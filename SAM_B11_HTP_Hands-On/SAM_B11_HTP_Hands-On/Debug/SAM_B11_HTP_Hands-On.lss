
SAM_B11_HTP_Hands-On.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d340  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  10015340  10015340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002cd8  100153f0  100153f0  000153f0  2**2
                  ALLOC
  3 .stack        00000800  100180c8  100180c8  000153f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000153f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00015418  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e98f  00000000  00000000  000154cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000356e  00000000  00000000  00043e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007db2  00000000  00000000  000473c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  0004f17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000850  00000000  00000000  0004f98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d98c  00000000  00000000  000501db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ce73  00000000  00000000  0006db67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010c478  00000000  00000000  0007a9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002580  00000000  00000000  00186e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10015340 	.word	0x10015340
10008068:	10015340 	.word	0x10015340
1000806c:	100153f0 	.word	0x100153f0
10008070:	100180c8 	.word	0x100180c8
10008074:	100153f0 	.word	0x100153f0
10008078:	10015344 	.word	0x10015344
1000807c:	100153f4 	.word	0x100153f4
10008080:	1001077d 	.word	0x1001077d
10008084:	1000bd05 	.word	0x1000bd05

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100153f0 	.word	0x100153f0
100080a8:	00000000 	.word	0x00000000
100080ac:	10015340 	.word	0x10015340

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100153f4 	.word	0x100153f4
100080dc:	10015340 	.word	0x10015340
100080e0:	10015340 	.word	0x10015340
100080e4:	00000000 	.word	0x00000000

100080e8 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
100080e8:	b510      	push	{r4, lr}
100080ea:	b086      	sub	sp, #24
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
100080ec:	a801      	add	r0, sp, #4
100080ee:	4b0c      	ldr	r3, [pc, #48]	; (10008120 <at30tse_init+0x38>)
100080f0:	4798      	blx	r3

	conf.pin_number_pad0 = AT30TSE_PIN_PAD0;
100080f2:	2308      	movs	r3, #8
100080f4:	9302      	str	r3, [sp, #8]
	conf.pin_number_pad1 = AT30TSE_PIN_PAD1;
100080f6:	3301      	adds	r3, #1
100080f8:	9304      	str	r3, [sp, #16]
	
	conf.pinmux_sel_pad0 = AT30TSE_MUX_PAD0;
100080fa:	3b07      	subs	r3, #7
100080fc:	9303      	str	r3, [sp, #12]
	conf.pinmux_sel_pad1 = AT30TSE_MUX_PAD1;
100080fe:	9305      	str	r3, [sp, #20]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_I2C_MODULE, &conf);
10008100:	4c08      	ldr	r4, [pc, #32]	; (10008124 <at30tse_init+0x3c>)
10008102:	aa01      	add	r2, sp, #4
10008104:	4908      	ldr	r1, [pc, #32]	; (10008128 <at30tse_init+0x40>)
10008106:	0020      	movs	r0, r4
10008108:	4b08      	ldr	r3, [pc, #32]	; (1000812c <at30tse_init+0x44>)
1000810a:	4798      	blx	r3
	i2c_enable(dev_inst_at30tse75x.hw);
1000810c:	6822      	ldr	r2, [r4, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000810e:	2128      	movs	r1, #40	; 0x28
10008110:	5c53      	ldrb	r3, [r2, r1]
10008112:	07db      	lsls	r3, r3, #31
10008114:	d4fc      	bmi.n	10008110 <at30tse_init+0x28>
static inline void i2c_enable(I2C *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
10008116:	2301      	movs	r3, #1
10008118:	7513      	strb	r3, [r2, #20]
}
1000811a:	b006      	add	sp, #24
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	10008779 	.word	0x10008779
10008124:	10016edc 	.word	0x10016edc
10008128:	40003000 	.word	0x40003000
1000812c:	10008791 	.word	0x10008791

10008130 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
10008130:	b570      	push	{r4, r5, r6, lr}
10008132:	b086      	sub	sp, #24
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
10008134:	ac05      	add	r4, sp, #20
10008136:	4301      	orrs	r1, r0
10008138:	7021      	strb	r1, [r4, #0]
	buffer[1] = 0;
1000813a:	2300      	movs	r3, #0
1000813c:	7063      	strb	r3, [r4, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
1000813e:	a903      	add	r1, sp, #12
10008140:	3348      	adds	r3, #72	; 0x48
10008142:	800b      	strh	r3, [r1, #0]
10008144:	2001      	movs	r0, #1
10008146:	8048      	strh	r0, [r1, #2]
10008148:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1,
		.data        = buffer,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
1000814a:	ad01      	add	r5, sp, #4
1000814c:	802b      	strh	r3, [r5, #0]
1000814e:	806a      	strh	r2, [r5, #2]
10008150:	9402      	str	r4, [sp, #8]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = reg_size,
		.data        = buffer,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
10008152:	4e07      	ldr	r6, [pc, #28]	; (10008170 <at30tse_read_register+0x40>)
10008154:	0030      	movs	r0, r6
10008156:	4b07      	ldr	r3, [pc, #28]	; (10008174 <at30tse_read_register+0x44>)
10008158:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
1000815a:	0029      	movs	r1, r5
1000815c:	0030      	movs	r0, r6
1000815e:	4b06      	ldr	r3, [pc, #24]	; (10008178 <at30tse_read_register+0x48>)
10008160:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
10008162:	7820      	ldrb	r0, [r4, #0]
10008164:	0200      	lsls	r0, r0, #8
10008166:	7863      	ldrb	r3, [r4, #1]
10008168:	4318      	orrs	r0, r3
}
1000816a:	b006      	add	sp, #24
1000816c:	bd70      	pop	{r4, r5, r6, pc}
1000816e:	46c0      	nop			; (mov r8, r8)
10008170:	10016edc 	.word	0x10016edc
10008174:	100088d5 	.word	0x100088d5
10008178:	10008875 	.word	0x10008875

1000817c <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
1000817c:	b510      	push	{r4, lr}
1000817e:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
10008180:	ac03      	add	r4, sp, #12
10008182:	4301      	orrs	r1, r0
10008184:	7021      	strb	r1, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
10008186:	0a19      	lsrs	r1, r3, #8
10008188:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
1000818a:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
1000818c:	a901      	add	r1, sp, #4
1000818e:	2348      	movs	r3, #72	; 0x48
10008190:	800b      	strh	r3, [r1, #0]
10008192:	3201      	adds	r2, #1
10008194:	804a      	strh	r2, [r1, #2]
10008196:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1 + reg_size,
		.data        = data,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
10008198:	4802      	ldr	r0, [pc, #8]	; (100081a4 <at30tse_write_register+0x28>)
1000819a:	4b03      	ldr	r3, [pc, #12]	; (100081a8 <at30tse_write_register+0x2c>)
1000819c:	4798      	blx	r3
}
1000819e:	b004      	add	sp, #16
100081a0:	bd10      	pop	{r4, pc}
100081a2:	46c0      	nop			; (mov r8, r8)
100081a4:	10016edc 	.word	0x10016edc
100081a8:	100088a5 	.word	0x100088a5

100081ac <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
100081ac:	b570      	push	{r4, r5, r6, lr}
100081ae:	0004      	movs	r4, r0
	at30tse_write_register(AT30TSE_CONFIG_REG,
100081b0:	0003      	movs	r3, r0
100081b2:	2201      	movs	r2, #1
100081b4:	2100      	movs	r1, #0
100081b6:	2001      	movs	r0, #1
100081b8:	4d03      	ldr	r5, [pc, #12]	; (100081c8 <at30tse_write_config_register+0x1c>)
100081ba:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
100081bc:	0464      	lsls	r4, r4, #17
100081be:	0fa4      	lsrs	r4, r4, #30
100081c0:	4b02      	ldr	r3, [pc, #8]	; (100081cc <at30tse_write_config_register+0x20>)
100081c2:	701c      	strb	r4, [r3, #0]

}
100081c4:	bd70      	pop	{r4, r5, r6, pc}
100081c6:	46c0      	nop			; (mov r8, r8)
100081c8:	1000817d 	.word	0x1000817d
100081cc:	1001540c 	.word	0x1001540c

100081d0 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature(void)
{
100081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
100081d2:	2202      	movs	r2, #2
100081d4:	2100      	movs	r1, #0
100081d6:	2000      	movs	r0, #0
100081d8:	4b21      	ldr	r3, [pc, #132]	; (10008260 <at30tse_read_temperature+0x90>)
100081da:	4798      	blx	r3
100081dc:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
100081de:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
100081e0:	0402      	lsls	r2, r0, #16
100081e2:	d502      	bpl.n	100081ea <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
100081e4:	0440      	lsls	r0, r0, #17
100081e6:	0c43      	lsrs	r3, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
100081e8:	3f02      	subs	r7, #2
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
100081ea:	4a1e      	ldr	r2, [pc, #120]	; (10008264 <at30tse_read_temperature+0x94>)
100081ec:	7816      	ldrb	r6, [r2, #0]
100081ee:	2e01      	cmp	r6, #1
100081f0:	d011      	beq.n	10008216 <at30tse_read_temperature+0x46>
100081f2:	2e00      	cmp	r6, #0
100081f4:	d004      	beq.n	10008200 <at30tse_read_temperature+0x30>
100081f6:	2e02      	cmp	r6, #2
100081f8:	d018      	beq.n	1000822c <at30tse_read_temperature+0x5c>
100081fa:	2e03      	cmp	r6, #3
100081fc:	d022      	beq.n	10008244 <at30tse_read_temperature+0x74>
100081fe:	e02c      	b.n	1000825a <at30tse_read_temperature+0x8a>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
10008200:	09db      	lsrs	r3, r3, #7
10008202:	b29d      	uxth	r5, r3
10008204:	0038      	movs	r0, r7
10008206:	4368      	muls	r0, r5
10008208:	4b17      	ldr	r3, [pc, #92]	; (10008268 <at30tse_read_temperature+0x98>)
1000820a:	4798      	blx	r3
1000820c:	2200      	movs	r2, #0
1000820e:	4b17      	ldr	r3, [pc, #92]	; (1000826c <at30tse_read_temperature+0x9c>)
10008210:	4c17      	ldr	r4, [pc, #92]	; (10008270 <at30tse_read_temperature+0xa0>)
10008212:	47a0      	blx	r4
			break;
10008214:	e023      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
10008216:	099b      	lsrs	r3, r3, #6
10008218:	b29c      	uxth	r4, r3
1000821a:	0038      	movs	r0, r7
1000821c:	4360      	muls	r0, r4
1000821e:	4b12      	ldr	r3, [pc, #72]	; (10008268 <at30tse_read_temperature+0x98>)
10008220:	4798      	blx	r3
10008222:	2200      	movs	r2, #0
10008224:	4b13      	ldr	r3, [pc, #76]	; (10008274 <at30tse_read_temperature+0xa4>)
10008226:	4c12      	ldr	r4, [pc, #72]	; (10008270 <at30tse_read_temperature+0xa0>)
10008228:	47a0      	blx	r4
			break;
1000822a:	e018      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
1000822c:	095b      	lsrs	r3, r3, #5
1000822e:	b299      	uxth	r1, r3
10008230:	0038      	movs	r0, r7
10008232:	4348      	muls	r0, r1
10008234:	4b0c      	ldr	r3, [pc, #48]	; (10008268 <at30tse_read_temperature+0x98>)
10008236:	4798      	blx	r3
10008238:	2200      	movs	r2, #0
1000823a:	23ff      	movs	r3, #255	; 0xff
1000823c:	059b      	lsls	r3, r3, #22
1000823e:	4c0c      	ldr	r4, [pc, #48]	; (10008270 <at30tse_read_temperature+0xa0>)
10008240:	47a0      	blx	r4
			break;
10008242:	e00c      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
10008244:	091b      	lsrs	r3, r3, #4
10008246:	b29a      	uxth	r2, r3
10008248:	0038      	movs	r0, r7
1000824a:	4350      	muls	r0, r2
1000824c:	4b06      	ldr	r3, [pc, #24]	; (10008268 <at30tse_read_temperature+0x98>)
1000824e:	4798      	blx	r3
10008250:	2200      	movs	r2, #0
10008252:	4b09      	ldr	r3, [pc, #36]	; (10008278 <at30tse_read_temperature+0xa8>)
10008254:	4c06      	ldr	r4, [pc, #24]	; (10008270 <at30tse_read_temperature+0xa0>)
10008256:	47a0      	blx	r4
			break;
10008258:	e001      	b.n	1000825e <at30tse_read_temperature+0x8e>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
1000825a:	2000      	movs	r0, #0
1000825c:	2100      	movs	r1, #0
			break;
		default:
			break;
	}
	return temperature;
}
1000825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008260:	10008131 	.word	0x10008131
10008264:	1001540c 	.word	0x1001540c
10008268:	100100bd 	.word	0x100100bd
1000826c:	3fe00000 	.word	0x3fe00000
10008270:	1000f4b5 	.word	0x1000f4b5
10008274:	3fd00000 	.word	0x3fd00000
10008278:	3fb00000 	.word	0x3fb00000

1000827c <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
1000827c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000827e:	4647      	mov	r7, r8
10008280:	b480      	push	{r7}
10008282:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
10008284:	2380      	movs	r3, #128	; 0x80
10008286:	011b      	lsls	r3, r3, #4
10008288:	4a3a      	ldr	r2, [pc, #232]	; (10008374 <dma_isr_handler+0xf8>)
1000828a:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
1000828c:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000828e:	230f      	movs	r3, #15
10008290:	401c      	ands	r4, r3
10008292:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008294:	4b38      	ldr	r3, [pc, #224]	; (10008378 <dma_isr_handler+0xfc>)
10008296:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008298:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000829a:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
1000829c:	2100      	movs	r1, #0
1000829e:	e000      	b.n	100082a2 <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
100082a0:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
100082a2:	0852      	lsrs	r2, r2, #1
		index++;
100082a4:	1c4b      	adds	r3, r1, #1
100082a6:	b2db      	uxtb	r3, r3
	} while (channel);
100082a8:	2a00      	cmp	r2, #0
100082aa:	d1f9      	bne.n	100082a0 <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
100082ac:	0089      	lsls	r1, r1, #2
100082ae:	4643      	mov	r3, r8
100082b0:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082b2:	7803      	ldrb	r3, [r0, #0]
100082b4:	021b      	lsls	r3, r3, #8
100082b6:	4a31      	ldr	r2, [pc, #196]	; (1000837c <dma_isr_handler+0x100>)
100082b8:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100082ba:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082bc:	4a30      	ldr	r2, [pc, #192]	; (10008380 <dma_isr_handler+0x104>)
100082be:	589a      	ldr	r2, [r3, r2]
100082c0:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
100082c2:	22ff      	movs	r2, #255	; 0xff
100082c4:	4022      	ands	r2, r4
100082c6:	4215      	tst	r5, r2
100082c8:	d003      	beq.n	100082d2 <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
100082ca:	2600      	movs	r6, #0
100082cc:	2225      	movs	r2, #37	; 0x25
100082ce:	5486      	strb	r6, [r0, r2]
100082d0:	e02f      	b.n	10008332 <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
100082d2:	0797      	lsls	r7, r2, #30
100082d4:	d504      	bpl.n	100082e0 <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082d6:	2610      	movs	r6, #16
100082d8:	2225      	movs	r2, #37	; 0x25
100082da:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
100082dc:	002e      	movs	r6, r5
100082de:	e028      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
100082e0:	0757      	lsls	r7, r2, #29
100082e2:	d504      	bpl.n	100082ee <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082e4:	2610      	movs	r6, #16
100082e6:	2225      	movs	r2, #37	; 0x25
100082e8:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
100082ea:	3e0e      	subs	r6, #14
100082ec:	e021      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
100082ee:	0717      	lsls	r7, r2, #28
100082f0:	d504      	bpl.n	100082fc <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082f2:	2610      	movs	r6, #16
100082f4:	2225      	movs	r2, #37	; 0x25
100082f6:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
100082f8:	3e0d      	subs	r6, #13
100082fa:	e01a      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
100082fc:	06d7      	lsls	r7, r2, #27
100082fe:	d504      	bpl.n	1000830a <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008300:	2610      	movs	r6, #16
10008302:	2225      	movs	r2, #37	; 0x25
10008304:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
10008306:	3e0c      	subs	r6, #12
10008308:	e013      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
1000830a:	0697      	lsls	r7, r2, #26
1000830c:	d504      	bpl.n	10008318 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000830e:	2610      	movs	r6, #16
10008310:	2225      	movs	r2, #37	; 0x25
10008312:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
10008314:	3e0b      	subs	r6, #11
10008316:	e00c      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008318:	0652      	lsls	r2, r2, #25
1000831a:	d504      	bpl.n	10008326 <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000831c:	2610      	movs	r6, #16
1000831e:	2225      	movs	r2, #37	; 0x25
10008320:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
10008322:	3e0a      	subs	r6, #10
10008324:	e005      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
10008326:	0622      	lsls	r2, r4, #24
10008328:	d503      	bpl.n	10008332 <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000832a:	2610      	movs	r6, #16
1000832c:	2225      	movs	r2, #37	; 0x25
1000832e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
10008330:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
10008332:	2900      	cmp	r1, #0
10008334:	d00e      	beq.n	10008354 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008336:	4913      	ldr	r1, [pc, #76]	; (10008384 <dma_isr_handler+0x108>)
10008338:	002a      	movs	r2, r5
1000833a:	40b2      	lsls	r2, r6
1000833c:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000833e:	2324      	movs	r3, #36	; 0x24
10008340:	5cc3      	ldrb	r3, [r0, r3]
10008342:	4133      	asrs	r3, r6
10008344:	421d      	tst	r5, r3
10008346:	d005      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
10008348:	00b3      	lsls	r3, r6, #2
1000834a:	18c3      	adds	r3, r0, r3
1000834c:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000834e:	2b00      	cmp	r3, #0
10008350:	d000      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
10008352:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
10008354:	002b      	movs	r3, r5
10008356:	40b3      	lsls	r3, r6
10008358:	439c      	bics	r4, r3
1000835a:	b263      	sxtb	r3, r4
1000835c:	2b00      	cmp	r3, #0
1000835e:	d19c      	bne.n	1000829a <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008360:	2180      	movs	r1, #128	; 0x80
10008362:	0209      	lsls	r1, r1, #8
10008364:	3381      	adds	r3, #129	; 0x81
10008366:	33ff      	adds	r3, #255	; 0xff
10008368:	4a07      	ldr	r2, [pc, #28]	; (10008388 <dma_isr_handler+0x10c>)
1000836a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
1000836c:	b002      	add	sp, #8
1000836e:	bc04      	pop	{r2}
10008370:	4690      	mov	r8, r2
10008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008374:	40002000 	.word	0x40002000
10008378:	10015410 	.word	0x10015410
1000837c:	400020ac 	.word	0x400020ac
10008380:	40002050 	.word	0x40002050
10008384:	400020a4 	.word	0x400020a4
10008388:	e000e100 	.word	0xe000e100

1000838c <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
1000838c:	2201      	movs	r2, #1
1000838e:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
10008390:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
10008392:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008394:	2300      	movs	r3, #0
10008396:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
10008398:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
1000839a:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
1000839c:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
1000839e:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
100083a0:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
100083a2:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
100083a4:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
100083a6:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
100083a8:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
100083aa:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
100083ac:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
100083ae:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
100083b0:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
100083b2:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
100083b4:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
100083b6:	74c3      	strb	r3, [r0, #19]
}
100083b8:	4770      	bx	lr
100083ba:	46c0      	nop			; (mov r8, r8)

100083bc <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
100083bc:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
100083be:	2325      	movs	r3, #37	; 0x25
100083c0:	5cc3      	ldrb	r3, [r0, r3]
100083c2:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
100083c4:	2b05      	cmp	r3, #5
100083c6:	d042      	beq.n	1000844e <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
100083c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
100083ca:	2a00      	cmp	r2, #0
100083cc:	d007      	beq.n	100083de <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
100083ce:	2303      	movs	r3, #3
100083d0:	68d4      	ldr	r4, [r2, #12]
100083d2:	439c      	bics	r4, r3
100083d4:	0023      	movs	r3, r4
100083d6:	2403      	movs	r4, #3
100083d8:	2b00      	cmp	r3, #0
100083da:	d11f      	bne.n	1000841c <dma_add_descriptor+0x60>
100083dc:	e02d      	b.n	1000843a <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
100083de:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083e0:	7803      	ldrb	r3, [r0, #0]
100083e2:	021b      	lsls	r3, r3, #8
100083e4:	4a1b      	ldr	r2, [pc, #108]	; (10008454 <dma_add_descriptor+0x98>)
100083e6:	4694      	mov	ip, r2
100083e8:	4463      	add	r3, ip
100083ea:	680a      	ldr	r2, [r1, #0]
100083ec:	601a      	str	r2, [r3, #0]
100083ee:	7803      	ldrb	r3, [r0, #0]
100083f0:	021b      	lsls	r3, r3, #8
100083f2:	4a19      	ldr	r2, [pc, #100]	; (10008458 <dma_add_descriptor+0x9c>)
100083f4:	4694      	mov	ip, r2
100083f6:	4463      	add	r3, ip
100083f8:	684a      	ldr	r2, [r1, #4]
100083fa:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
100083fc:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083fe:	7803      	ldrb	r3, [r0, #0]
10008400:	021b      	lsls	r3, r3, #8
10008402:	4916      	ldr	r1, [pc, #88]	; (1000845c <dma_add_descriptor+0xa0>)
10008404:	468c      	mov	ip, r1
10008406:	4463      	add	r3, ip
10008408:	601a      	str	r2, [r3, #0]
1000840a:	7803      	ldrb	r3, [r0, #0]
1000840c:	021b      	lsls	r3, r3, #8
1000840e:	4a14      	ldr	r2, [pc, #80]	; (10008460 <dma_add_descriptor+0xa4>)
10008410:	4694      	mov	ip, r2
10008412:	4463      	add	r3, ip
10008414:	2203      	movs	r2, #3
10008416:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008418:	2300      	movs	r3, #0
1000841a:	e018      	b.n	1000844e <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
1000841c:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000841e:	68d3      	ldr	r3, [r2, #12]
10008420:	43a3      	bics	r3, r4
10008422:	d1fb      	bne.n	1000841c <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
10008424:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008426:	2303      	movs	r3, #3
10008428:	68ca      	ldr	r2, [r1, #12]
1000842a:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
1000842c:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000842e:	2a00      	cmp	r2, #0
10008430:	d00d      	beq.n	1000844e <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
10008432:	3303      	adds	r3, #3
10008434:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
10008436:	2300      	movs	r3, #0
10008438:	e009      	b.n	1000844e <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000843a:	7803      	ldrb	r3, [r0, #0]
1000843c:	021b      	lsls	r3, r3, #8
1000843e:	4808      	ldr	r0, [pc, #32]	; (10008460 <dma_add_descriptor+0xa4>)
10008440:	4684      	mov	ip, r0
10008442:	4463      	add	r3, ip
10008444:	2003      	movs	r0, #3
10008446:	000c      	movs	r4, r1
10008448:	4384      	bics	r4, r0
1000844a:	601c      	str	r4, [r3, #0]
1000844c:	e7ea      	b.n	10008424 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
1000844e:	0018      	movs	r0, r3
10008450:	bd10      	pop	{r4, pc}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	40002000 	.word	0x40002000
10008458:	40002004 	.word	0x40002004
1000845c:	40002008 	.word	0x40002008
10008460:	4000200c 	.word	0x4000200c

10008464 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
10008464:	b082      	sub	sp, #8
10008466:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
10008468:	2325      	movs	r3, #37	; 0x25
1000846a:	5cc3      	ldrb	r3, [r0, r3]
1000846c:	b2d8      	uxtb	r0, r3
1000846e:	2805      	cmp	r0, #5
10008470:	d027      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008472:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
10008474:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
10008476:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008478:	2b00      	cmp	r3, #0
1000847a:	d022      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
1000847c:	7813      	ldrb	r3, [r2, #0]
1000847e:	021b      	lsls	r3, r3, #8
10008480:	4911      	ldr	r1, [pc, #68]	; (100084c8 <dma_start_transfer_job+0x64>)
10008482:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008484:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
10008486:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008488:	4910      	ldr	r1, [pc, #64]	; (100084cc <dma_start_transfer_job+0x68>)
1000848a:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
1000848c:	2324      	movs	r3, #36	; 0x24
1000848e:	5cd3      	ldrb	r3, [r2, r3]
10008490:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
10008492:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008494:	7813      	ldrb	r3, [r2, #0]
10008496:	021b      	lsls	r3, r3, #8
10008498:	480d      	ldr	r0, [pc, #52]	; (100084d0 <dma_start_transfer_job+0x6c>)
1000849a:	4684      	mov	ip, r0
1000849c:	4463      	add	r3, ip
1000849e:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
100084a0:	2105      	movs	r1, #5
100084a2:	2325      	movs	r3, #37	; 0x25
100084a4:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100084a6:	7813      	ldrb	r3, [r2, #0]
100084a8:	021b      	lsls	r3, r3, #8
100084aa:	490a      	ldr	r1, [pc, #40]	; (100084d4 <dma_start_transfer_job+0x70>)
100084ac:	468c      	mov	ip, r1
100084ae:	4463      	add	r3, ip
100084b0:	2101      	movs	r1, #1
100084b2:	6019      	str	r1, [r3, #0]
100084b4:	7813      	ldrb	r3, [r2, #0]
100084b6:	021b      	lsls	r3, r3, #8
100084b8:	4a07      	ldr	r2, [pc, #28]	; (100084d8 <dma_start_transfer_job+0x74>)
100084ba:	4694      	mov	ip, r2
100084bc:	4463      	add	r3, ip
100084be:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
100084c0:	2000      	movs	r0, #0
}
100084c2:	b002      	add	sp, #8
100084c4:	4770      	bx	lr
100084c6:	46c0      	nop			; (mov r8, r8)
100084c8:	400020ac 	.word	0x400020ac
100084cc:	400020a4 	.word	0x400020a4
100084d0:	400020a8 	.word	0x400020a8
100084d4:	40002040 	.word	0x40002040
100084d8:	40002044 	.word	0x40002044

100084dc <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
100084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100084de:	0004      	movs	r4, r0
100084e0:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
100084e2:	4b62      	ldr	r3, [pc, #392]	; (1000866c <dma_allocate+0x190>)
100084e4:	781b      	ldrb	r3, [r3, #0]
100084e6:	2b00      	cmp	r3, #0
100084e8:	d112      	bne.n	10008510 <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
100084ea:	2043      	movs	r0, #67	; 0x43
100084ec:	4b60      	ldr	r3, [pc, #384]	; (10008670 <dma_allocate+0x194>)
100084ee:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
100084f0:	4960      	ldr	r1, [pc, #384]	; (10008674 <dma_allocate+0x198>)
100084f2:	22cc      	movs	r2, #204	; 0xcc
100084f4:	5888      	ldr	r0, [r1, r2]
100084f6:	4b60      	ldr	r3, [pc, #384]	; (10008678 <dma_allocate+0x19c>)
100084f8:	4003      	ands	r3, r0
100084fa:	2080      	movs	r0, #128	; 0x80
100084fc:	0540      	lsls	r0, r0, #21
100084fe:	4303      	orrs	r3, r0
10008500:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
10008502:	495e      	ldr	r1, [pc, #376]	; (1000867c <dma_allocate+0x1a0>)
10008504:	201f      	movs	r0, #31
10008506:	4b5e      	ldr	r3, [pc, #376]	; (10008680 <dma_allocate+0x1a4>)
10008508:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
1000850a:	2201      	movs	r2, #1
1000850c:	4b57      	ldr	r3, [pc, #348]	; (1000866c <dma_allocate+0x190>)
1000850e:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
10008510:	4b56      	ldr	r3, [pc, #344]	; (1000866c <dma_allocate+0x190>)
10008512:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008514:	07d3      	lsls	r3, r2, #31
10008516:	d500      	bpl.n	1000851a <dma_allocate+0x3e>
10008518:	e0a2      	b.n	10008660 <dma_allocate+0x184>
1000851a:	e002      	b.n	10008522 <dma_allocate+0x46>
1000851c:	4211      	tst	r1, r2
1000851e:	d10e      	bne.n	1000853e <dma_allocate+0x62>
10008520:	e000      	b.n	10008524 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008522:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008524:	4a51      	ldr	r2, [pc, #324]	; (1000866c <dma_allocate+0x190>)
10008526:	6850      	ldr	r0, [r2, #4]
10008528:	2101      	movs	r1, #1
1000852a:	4099      	lsls	r1, r3
1000852c:	4301      	orrs	r1, r0
1000852e:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
10008530:	7a11      	ldrb	r1, [r2, #8]
10008532:	3901      	subs	r1, #1
10008534:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008536:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
10008538:	2bff      	cmp	r3, #255	; 0xff
1000853a:	d107      	bne.n	1000854c <dma_allocate+0x70>
1000853c:	e094      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
1000853e:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008540:	3301      	adds	r3, #1
10008542:	b2db      	uxtb	r3, r3
10008544:	2b05      	cmp	r3, #5
10008546:	d1e9      	bne.n	1000851c <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008548:	2014      	movs	r0, #20
1000854a:	e08d      	b.n	10008668 <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
1000854c:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000854e:	021b      	lsls	r3, r3, #8
10008550:	4a4c      	ldr	r2, [pc, #304]	; (10008684 <dma_allocate+0x1a8>)
10008552:	4694      	mov	ip, r2
10008554:	4463      	add	r3, ip
10008556:	782a      	ldrb	r2, [r5, #0]
10008558:	267f      	movs	r6, #127	; 0x7f
1000855a:	4032      	ands	r2, r6
1000855c:	78a9      	ldrb	r1, [r5, #2]
1000855e:	07c9      	lsls	r1, r1, #31
10008560:	430a      	orrs	r2, r1
10008562:	7869      	ldrb	r1, [r5, #1]
10008564:	0409      	lsls	r1, r1, #16
10008566:	20fc      	movs	r0, #252	; 0xfc
10008568:	0380      	lsls	r0, r0, #14
1000856a:	4001      	ands	r1, r0
1000856c:	430a      	orrs	r2, r1
1000856e:	601a      	str	r2, [r3, #0]
10008570:	7823      	ldrb	r3, [r4, #0]
10008572:	021b      	lsls	r3, r3, #8
10008574:	4a44      	ldr	r2, [pc, #272]	; (10008688 <dma_allocate+0x1ac>)
10008576:	4694      	mov	ip, r2
10008578:	4463      	add	r3, ip
1000857a:	7a6a      	ldrb	r2, [r5, #9]
1000857c:	4032      	ands	r2, r6
1000857e:	7ae9      	ldrb	r1, [r5, #11]
10008580:	07c9      	lsls	r1, r1, #31
10008582:	430a      	orrs	r2, r1
10008584:	7aa9      	ldrb	r1, [r5, #10]
10008586:	0409      	lsls	r1, r1, #16
10008588:	4008      	ands	r0, r1
1000858a:	4310      	orrs	r0, r2
1000858c:	6018      	str	r0, [r3, #0]
1000858e:	7823      	ldrb	r3, [r4, #0]
10008590:	021b      	lsls	r3, r3, #8
10008592:	4a3e      	ldr	r2, [pc, #248]	; (1000868c <dma_allocate+0x1b0>)
10008594:	4694      	mov	ip, r2
10008596:	4463      	add	r3, ip
10008598:	7cea      	ldrb	r2, [r5, #19]
1000859a:	0712      	lsls	r2, r2, #28
1000859c:	21c0      	movs	r1, #192	; 0xc0
1000859e:	0589      	lsls	r1, r1, #22
100085a0:	400a      	ands	r2, r1
100085a2:	7ca9      	ldrb	r1, [r5, #18]
100085a4:	0409      	lsls	r1, r1, #16
100085a6:	430a      	orrs	r2, r1
100085a8:	601a      	str	r2, [r3, #0]
100085aa:	7823      	ldrb	r3, [r4, #0]
100085ac:	021b      	lsls	r3, r3, #8
100085ae:	4a38      	ldr	r2, [pc, #224]	; (10008690 <dma_allocate+0x1b4>)
100085b0:	4694      	mov	ip, r2
100085b2:	4463      	add	r3, ip
100085b4:	792f      	ldrb	r7, [r5, #4]
100085b6:	023f      	lsls	r7, r7, #8
100085b8:	21e0      	movs	r1, #224	; 0xe0
100085ba:	00c9      	lsls	r1, r1, #3
100085bc:	003a      	movs	r2, r7
100085be:	400a      	ands	r2, r1
100085c0:	7b2e      	ldrb	r6, [r5, #12]
100085c2:	0436      	lsls	r6, r6, #16
100085c4:	20f8      	movs	r0, #248	; 0xf8
100085c6:	0340      	lsls	r0, r0, #13
100085c8:	4006      	ands	r6, r0
100085ca:	4332      	orrs	r2, r6
100085cc:	0017      	movs	r7, r2
100085ce:	78e8      	ldrb	r0, [r5, #3]
100085d0:	221f      	movs	r2, #31
100085d2:	4002      	ands	r2, r0
100085d4:	003e      	movs	r6, r7
100085d6:	4316      	orrs	r6, r2
100085d8:	7b6a      	ldrb	r2, [r5, #13]
100085da:	0612      	lsls	r2, r2, #24
100085dc:	20e0      	movs	r0, #224	; 0xe0
100085de:	04c0      	lsls	r0, r0, #19
100085e0:	4002      	ands	r2, r0
100085e2:	4332      	orrs	r2, r6
100085e4:	601a      	str	r2, [r3, #0]
100085e6:	7820      	ldrb	r0, [r4, #0]
100085e8:	0200      	lsls	r0, r0, #8
100085ea:	4b2a      	ldr	r3, [pc, #168]	; (10008694 <dma_allocate+0x1b8>)
100085ec:	469c      	mov	ip, r3
100085ee:	4460      	add	r0, ip
100085f0:	79ab      	ldrb	r3, [r5, #6]
100085f2:	2607      	movs	r6, #7
100085f4:	4033      	ands	r3, r6
100085f6:	796e      	ldrb	r6, [r5, #5]
100085f8:	2208      	movs	r2, #8
100085fa:	40b2      	lsls	r2, r6
100085fc:	4313      	orrs	r3, r2
100085fe:	79ee      	ldrb	r6, [r5, #7]
10008600:	2280      	movs	r2, #128	; 0x80
10008602:	40b2      	lsls	r2, r6
10008604:	4313      	orrs	r3, r2
10008606:	7bae      	ldrb	r6, [r5, #14]
10008608:	2280      	movs	r2, #128	; 0x80
1000860a:	0112      	lsls	r2, r2, #4
1000860c:	40b2      	lsls	r2, r6
1000860e:	4313      	orrs	r3, r2
10008610:	7c2e      	ldrb	r6, [r5, #16]
10008612:	2280      	movs	r2, #128	; 0x80
10008614:	0212      	lsls	r2, r2, #8
10008616:	40b2      	lsls	r2, r6
10008618:	4313      	orrs	r3, r2
1000861a:	001e      	movs	r6, r3
1000861c:	7a2a      	ldrb	r2, [r5, #8]
1000861e:	0112      	lsls	r2, r2, #4
10008620:	2370      	movs	r3, #112	; 0x70
10008622:	401a      	ands	r2, r3
10008624:	0033      	movs	r3, r6
10008626:	4313      	orrs	r3, r2
10008628:	7bea      	ldrb	r2, [r5, #15]
1000862a:	0212      	lsls	r2, r2, #8
1000862c:	4011      	ands	r1, r2
1000862e:	430b      	orrs	r3, r1
10008630:	7c69      	ldrb	r1, [r5, #17]
10008632:	0309      	lsls	r1, r1, #12
10008634:	22e0      	movs	r2, #224	; 0xe0
10008636:	01d2      	lsls	r2, r2, #7
10008638:	4011      	ands	r1, r2
1000863a:	430b      	orrs	r3, r1
1000863c:	6003      	str	r3, [r0, #0]
1000863e:	1d23      	adds	r3, r4, #4
10008640:	0021      	movs	r1, r4
10008642:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
10008644:	2200      	movs	r2, #0
10008646:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
10008648:	428b      	cmp	r3, r1
1000864a:	d1fc      	bne.n	10008646 <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
1000864c:	2300      	movs	r3, #0
1000864e:	2224      	movs	r2, #36	; 0x24
10008650:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
10008652:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
10008654:	7823      	ldrb	r3, [r4, #0]
10008656:	009b      	lsls	r3, r3, #2
10008658:	4a0f      	ldr	r2, [pc, #60]	; (10008698 <dma_allocate+0x1bc>)
1000865a:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
1000865c:	2000      	movs	r0, #0
1000865e:	e003      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
10008660:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008662:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
10008664:	2101      	movs	r1, #1
10008666:	e759      	b.n	1000851c <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
10008668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000866a:	46c0      	nop			; (mov r8, r8)
1000866c:	10015340 	.word	0x10015340
10008670:	100093f9 	.word	0x100093f9
10008674:	4000b000 	.word	0x4000b000
10008678:	e0ffffff 	.word	0xe0ffffff
1000867c:	1000827d 	.word	0x1000827d
10008680:	10009861 	.word	0x10009861
10008684:	40002010 	.word	0x40002010
10008688:	40002014 	.word	0x40002014
1000868c:	40002018 	.word	0x40002018
10008690:	40002020 	.word	0x40002020
10008694:	40002838 	.word	0x40002838
10008698:	10015410 	.word	0x10015410

1000869c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000869c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000869e:	464f      	mov	r7, r9
100086a0:	4646      	mov	r6, r8
100086a2:	b4c0      	push	{r6, r7}
100086a4:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100086a6:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100086a8:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100086aa:	2d00      	cmp	r5, #0
100086ac:	d02f      	beq.n	1000870e <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
100086ae:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100086b0:	2428      	movs	r4, #40	; 0x28
100086b2:	5d13      	ldrb	r3, [r2, r4]
100086b4:	07db      	lsls	r3, r3, #31
100086b6:	d4fc      	bmi.n	100086b2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100086b8:	2301      	movs	r3, #1
100086ba:	2434      	movs	r4, #52	; 0x34
100086bc:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
100086be:	3c14      	subs	r4, #20
100086c0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100086c2:	880b      	ldrh	r3, [r1, #0]
100086c4:	005b      	lsls	r3, r3, #1
100086c6:	2402      	movs	r4, #2
100086c8:	34ff      	adds	r4, #255	; 0xff
100086ca:	4323      	orrs	r3, r4
100086cc:	b29b      	uxth	r3, r3
100086ce:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100086d0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086d2:	2301      	movs	r3, #1
100086d4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100086d6:	7b13      	ldrb	r3, [r2, #12]
100086d8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086da:	4640      	mov	r0, r8
100086dc:	4218      	tst	r0, r3
100086de:	d006      	beq.n	100086ee <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100086e0:	1c67      	adds	r7, r4, #1
100086e2:	7910      	ldrb	r0, [r2, #4]
100086e4:	4684      	mov	ip, r0
100086e6:	6848      	ldr	r0, [r1, #4]
100086e8:	4666      	mov	r6, ip
100086ea:	5506      	strb	r6, [r0, r4]
100086ec:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100086ee:	42ac      	cmp	r4, r5
100086f0:	d3f1      	bcc.n	100086d6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086f2:	06db      	lsls	r3, r3, #27
100086f4:	d403      	bmi.n	100086fe <_i2c_master_read_packet+0x62>
100086f6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100086f8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086fa:	420b      	tst	r3, r1
100086fc:	d0fc      	beq.n	100086f8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100086fe:	464b      	mov	r3, r9
10008700:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008702:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008704:	2900      	cmp	r1, #0
10008706:	d102      	bne.n	1000870e <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008708:	3320      	adds	r3, #32
1000870a:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000870c:	2300      	movs	r3, #0
}
1000870e:	0018      	movs	r0, r3
10008710:	bc0c      	pop	{r2, r3}
10008712:	4690      	mov	r8, r2
10008714:	4699      	mov	r9, r3
10008716:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008718 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008718:	b5f0      	push	{r4, r5, r6, r7, lr}
1000871a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
1000871c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000871e:	884e      	ldrh	r6, [r1, #2]
10008720:	2428      	movs	r4, #40	; 0x28
10008722:	5d13      	ldrb	r3, [r2, r4]
10008724:	07db      	lsls	r3, r3, #31
10008726:	d4fc      	bmi.n	10008722 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008728:	2301      	movs	r3, #1
1000872a:	2434      	movs	r4, #52	; 0x34
1000872c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000872e:	3c14      	subs	r4, #20
10008730:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008732:	880b      	ldrh	r3, [r1, #0]
10008734:	005b      	lsls	r3, r3, #1
10008736:	34e0      	adds	r4, #224	; 0xe0
10008738:	4323      	orrs	r3, r4
1000873a:	b29b      	uxth	r3, r3
1000873c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000873e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008740:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008742:	7a13      	ldrb	r3, [r2, #8]
10008744:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008746:	421d      	tst	r5, r3
10008748:	d004      	beq.n	10008754 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000874a:	1c67      	adds	r7, r4, #1
1000874c:	6848      	ldr	r0, [r1, #4]
1000874e:	5d04      	ldrb	r4, [r0, r4]
10008750:	8014      	strh	r4, [r2, #0]
10008752:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008754:	42b4      	cmp	r4, r6
10008756:	d3f4      	bcc.n	10008742 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008758:	06db      	lsls	r3, r3, #27
1000875a:	d403      	bmi.n	10008764 <_i2c_master_write_packet+0x4c>
1000875c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000875e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008760:	420b      	tst	r3, r1
10008762:	d0fc      	beq.n	1000875e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008764:	4663      	mov	r3, ip
10008766:	795b      	ldrb	r3, [r3, #5]
10008768:	2b00      	cmp	r3, #0
1000876a:	d102      	bne.n	10008772 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000876c:	2100      	movs	r1, #0
1000876e:	3320      	adds	r3, #32
10008770:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008772:	2000      	movs	r0, #0
10008774:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008776:	46c0      	nop			; (mov r8, r8)

10008778 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008778:	2303      	movs	r3, #3
1000877a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000877c:	330d      	adds	r3, #13
1000877e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
10008780:	3b08      	subs	r3, #8
10008782:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
10008784:	3301      	adds	r3, #1
10008786:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
10008788:	3b07      	subs	r3, #7
1000878a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
1000878c:	6103      	str	r3, [r0, #16]
}
1000878e:	4770      	bx	lr

10008790 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
10008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008792:	0004      	movs	r4, r0
10008794:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008796:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008798:	2800      	cmp	r0, #0
1000879a:	d056      	beq.n	1000884a <i2c_master_init+0xba>
1000879c:	2a00      	cmp	r2, #0
1000879e:	d056      	beq.n	1000884e <i2c_master_init+0xbe>
100087a0:	2228      	movs	r2, #40	; 0x28
100087a2:	5c8b      	ldrb	r3, [r1, r2]
100087a4:	07db      	lsls	r3, r3, #31
100087a6:	d4fc      	bmi.n	100087a2 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100087a8:	2300      	movs	r3, #0
100087aa:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100087ac:	6823      	ldr	r3, [r4, #0]
100087ae:	4a29      	ldr	r2, [pc, #164]	; (10008854 <i2c_master_init+0xc4>)
100087b0:	4293      	cmp	r3, r2
100087b2:	d103      	bne.n	100087bc <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100087b4:	2003      	movs	r0, #3
100087b6:	4b28      	ldr	r3, [pc, #160]	; (10008858 <i2c_master_init+0xc8>)
100087b8:	4798      	blx	r3
100087ba:	e006      	b.n	100087ca <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100087bc:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100087be:	4a27      	ldr	r2, [pc, #156]	; (1000885c <i2c_master_init+0xcc>)
100087c0:	4293      	cmp	r3, r2
100087c2:	d145      	bne.n	10008850 <i2c_master_init+0xc0>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100087c4:	3002      	adds	r0, #2
100087c6:	4b24      	ldr	r3, [pc, #144]	; (10008858 <i2c_master_init+0xc8>)
100087c8:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
100087ca:	2300      	movs	r3, #0
100087cc:	7423      	strb	r3, [r4, #16]
	module->enabled_callback    = 0;
100087ce:	7463      	strb	r3, [r4, #17]
	module->buffer_length       = 0;
100087d0:	8263      	strh	r3, [r4, #18]
	module->buffer_remaining    = 0;
100087d2:	82a3      	strh	r3, [r4, #20]
	module->status              = STATUS_OK;
100087d4:	2200      	movs	r2, #0
100087d6:	7762      	strb	r2, [r4, #29]
	module->buffer              = NULL;
100087d8:	61a3      	str	r3, [r4, #24]

	_i2c_instances = (void*)module;
100087da:	4b21      	ldr	r3, [pc, #132]	; (10008860 <i2c_master_init+0xd0>)
100087dc:	601c      	str	r4, [r3, #0]
	if (module->hw == I2C0) {
100087de:	6823      	ldr	r3, [r4, #0]
100087e0:	4a1c      	ldr	r2, [pc, #112]	; (10008854 <i2c_master_init+0xc4>)
100087e2:	4293      	cmp	r3, r2
100087e4:	d10f      	bne.n	10008806 <i2c_master_init+0x76>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087e6:	4f1f      	ldr	r7, [pc, #124]	; (10008864 <i2c_master_init+0xd4>)
100087e8:	0039      	movs	r1, r7
100087ea:	2018      	movs	r0, #24
100087ec:	4e1e      	ldr	r6, [pc, #120]	; (10008868 <i2c_master_init+0xd8>)
100087ee:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087f0:	0039      	movs	r1, r7
100087f2:	2019      	movs	r0, #25
100087f4:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100087f6:	4b1d      	ldr	r3, [pc, #116]	; (1000886c <i2c_master_init+0xdc>)
100087f8:	2280      	movs	r2, #128	; 0x80
100087fa:	0052      	lsls	r2, r2, #1
100087fc:	601a      	str	r2, [r3, #0]
100087fe:	3201      	adds	r2, #1
10008800:	32ff      	adds	r2, #255	; 0xff
10008802:	601a      	str	r2, [r3, #0]
10008804:	e011      	b.n	1000882a <i2c_master_init+0x9a>
		NVIC_EnableIRQ(I2C0_RX_IRQn);
		NVIC_EnableIRQ(I2C0_TX_IRQn);
	} else if (module->hw == I2C1) {
10008806:	4a15      	ldr	r2, [pc, #84]	; (1000885c <i2c_master_init+0xcc>)
10008808:	4293      	cmp	r3, r2
1000880a:	d10e      	bne.n	1000882a <i2c_master_init+0x9a>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000880c:	4f15      	ldr	r7, [pc, #84]	; (10008864 <i2c_master_init+0xd4>)
1000880e:	0039      	movs	r1, r7
10008810:	201a      	movs	r0, #26
10008812:	4e15      	ldr	r6, [pc, #84]	; (10008868 <i2c_master_init+0xd8>)
10008814:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
10008816:	0039      	movs	r1, r7
10008818:	201b      	movs	r0, #27
1000881a:	47b0      	blx	r6
1000881c:	4b13      	ldr	r3, [pc, #76]	; (1000886c <i2c_master_init+0xdc>)
1000881e:	2280      	movs	r2, #128	; 0x80
10008820:	00d2      	lsls	r2, r2, #3
10008822:	601a      	str	r2, [r3, #0]
10008824:	2280      	movs	r2, #128	; 0x80
10008826:	0112      	lsls	r2, r2, #4
10008828:	601a      	str	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000882a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000882c:	8929      	ldrh	r1, [r5, #8]
1000882e:	7928      	ldrb	r0, [r5, #4]
10008830:	4e0f      	ldr	r6, [pc, #60]	; (10008870 <i2c_master_init+0xe0>)
10008832:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008834:	8a29      	ldrh	r1, [r5, #16]
10008836:	7b28      	ldrb	r0, [r5, #12]
10008838:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000883a:	782b      	ldrb	r3, [r5, #0]
1000883c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000883e:	886b      	ldrh	r3, [r5, #2]
10008840:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
10008842:	2301      	movs	r3, #1
10008844:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008846:	2000      	movs	r0, #0
10008848:	e002      	b.n	10008850 <i2c_master_init+0xc0>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000884a:	2017      	movs	r0, #23
1000884c:	e000      	b.n	10008850 <i2c_master_init+0xc0>
1000884e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008852:	46c0      	nop			; (mov r8, r8)
10008854:	40003000 	.word	0x40003000
10008858:	100093f9 	.word	0x100093f9
1000885c:	40003400 	.word	0x40003400
10008860:	10016efc 	.word	0x10016efc
10008864:	10008905 	.word	0x10008905
10008868:	10009861 	.word	0x10009861
1000886c:	e000e100 	.word	0xe000e100
10008870:	10008ec1 	.word	0x10008ec1

10008874 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008874:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008876:	2800      	cmp	r0, #0
10008878:	d00c      	beq.n	10008894 <i2c_master_read_packet_wait+0x20>
1000887a:	2900      	cmp	r1, #0
1000887c:	d00c      	beq.n	10008898 <i2c_master_read_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
1000887e:	8a82      	ldrh	r2, [r0, #20]
10008880:	b292      	uxth	r2, r2
		return STATUS_BUSY;
10008882:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
10008884:	2a00      	cmp	r2, #0
10008886:	d108      	bne.n	1000889a <i2c_master_read_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008888:	2300      	movs	r3, #0
1000888a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000888c:	4b04      	ldr	r3, [pc, #16]	; (100088a0 <i2c_master_read_packet_wait+0x2c>)
1000888e:	4798      	blx	r3
10008890:	0003      	movs	r3, r0
10008892:	e002      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008894:	2317      	movs	r3, #23
10008896:	e000      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
10008898:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000889a:	0018      	movs	r0, r3
1000889c:	bd10      	pop	{r4, pc}
1000889e:	46c0      	nop			; (mov r8, r8)
100088a0:	1000869d 	.word	0x1000869d

100088a4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088a4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100088a6:	2800      	cmp	r0, #0
100088a8:	d00c      	beq.n	100088c4 <i2c_master_write_packet_wait+0x20>
100088aa:	2900      	cmp	r1, #0
100088ac:	d00c      	beq.n	100088c8 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088ae:	8a82      	ldrh	r2, [r0, #20]
100088b0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088b2:	2305      	movs	r3, #5
	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088b4:	2a00      	cmp	r2, #0
100088b6:	d108      	bne.n	100088ca <i2c_master_write_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100088b8:	2300      	movs	r3, #0
100088ba:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088bc:	4b04      	ldr	r3, [pc, #16]	; (100088d0 <i2c_master_write_packet_wait+0x2c>)
100088be:	4798      	blx	r3
100088c0:	0003      	movs	r3, r0
100088c2:	e002      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088c4:	2317      	movs	r3, #23
100088c6:	e000      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
100088c8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100088ca:	0018      	movs	r0, r3
100088cc:	bd10      	pop	{r4, pc}
100088ce:	46c0      	nop			; (mov r8, r8)
100088d0:	10008719 	.word	0x10008719

100088d4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088d4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100088d6:	2800      	cmp	r0, #0
100088d8:	d00c      	beq.n	100088f4 <i2c_master_write_packet_wait_no_stop+0x20>
100088da:	2900      	cmp	r1, #0
100088dc:	d00c      	beq.n	100088f8 <i2c_master_write_packet_wait_no_stop+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088de:	8a82      	ldrh	r2, [r0, #20]
100088e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088e2:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088e4:	2a00      	cmp	r2, #0
100088e6:	d108      	bne.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100088e8:	3b04      	subs	r3, #4
100088ea:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088ec:	4b04      	ldr	r3, [pc, #16]	; (10008900 <i2c_master_write_packet_wait_no_stop+0x2c>)
100088ee:	4798      	blx	r3
100088f0:	0003      	movs	r3, r0
100088f2:	e002      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088f4:	2317      	movs	r3, #23
100088f6:	e000      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
100088f8:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100088fa:	0018      	movs	r0, r3
100088fc:	bd10      	pop	{r4, pc}
100088fe:	46c0      	nop			; (mov r8, r8)
10008900:	10008719 	.word	0x10008719

10008904 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
10008904:	b570      	push	{r4, r5, r6, lr}
10008906:	b082      	sub	sp, #8
	/* Get software module for callback handling */
	struct i2c_master_module *module =
10008908:	4b57      	ldr	r3, [pc, #348]	; (10008a68 <_i2c_master_isr_handler+0x164>)
1000890a:	681c      	ldr	r4, [r3, #0]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000890c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000890e:	7c63      	ldrb	r3, [r4, #17]
			module->registered_callback;
10008910:	7c25      	ldrb	r5, [r4, #16]
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008912:	401d      	ands	r5, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
10008914:	8a63      	ldrh	r3, [r4, #18]
10008916:	b29b      	uxth	r3, r3
10008918:	2b00      	cmp	r3, #0
1000891a:	d107      	bne.n	1000892c <_i2c_master_isr_handler+0x28>
1000891c:	8aa3      	ldrh	r3, [r4, #20]
1000891e:	b29b      	uxth	r3, r3
10008920:	2b00      	cmp	r3, #0
10008922:	d003      	beq.n	1000892c <_i2c_master_isr_handler+0x28>
		module->buffer_length = module->buffer_remaining;
10008924:	8aa3      	ldrh	r3, [r4, #20]
10008926:	b29b      	uxth	r3, r3
10008928:	8263      	strh	r3, [r4, #18]
1000892a:	e04e      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000892c:	8a63      	ldrh	r3, [r4, #18]
1000892e:	b29b      	uxth	r3, r3
10008930:	2b00      	cmp	r3, #0
10008932:	d019      	beq.n	10008968 <_i2c_master_isr_handler+0x64>
10008934:	8aa3      	ldrh	r3, [r4, #20]
10008936:	b29b      	uxth	r3, r3
10008938:	2b00      	cmp	r3, #0
1000893a:	d115      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
1000893c:	7f63      	ldrb	r3, [r4, #29]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000893e:	2b05      	cmp	r3, #5
10008940:	d112      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
10008942:	7f23      	ldrb	r3, [r4, #28]

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008944:	2b00      	cmp	r3, #0
10008946:	d10f      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
10008948:	222c      	movs	r2, #44	; 0x2c
1000894a:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
1000894c:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
1000894e:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008950:	7963      	ldrb	r3, [r4, #5]
10008952:	2b00      	cmp	r3, #0
10008954:	d102      	bne.n	1000895c <_i2c_master_isr_handler+0x58>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008956:	2200      	movs	r2, #0
10008958:	3320      	adds	r3, #32
1000895a:	54f2      	strb	r2, [r6, r3]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000895c:	07eb      	lsls	r3, r5, #31
1000895e:	d534      	bpl.n	100089ca <_i2c_master_isr_handler+0xc6>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
10008960:	68a3      	ldr	r3, [r4, #8]
10008962:	0020      	movs	r0, r4
10008964:	4798      	blx	r3
10008966:	e030      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
10008968:	8a63      	ldrh	r3, [r4, #18]
1000896a:	b29b      	uxth	r3, r3
1000896c:	2b00      	cmp	r3, #0
1000896e:	d02c      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
10008970:	8aa3      	ldrh	r3, [r4, #20]
10008972:	b29b      	uxth	r3, r3
10008974:	2b00      	cmp	r3, #0
10008976:	d028      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
10008978:	7f23      	ldrb	r3, [r4, #28]
1000897a:	2b00      	cmp	r3, #0
1000897c:	d117      	bne.n	100089ae <_i2c_master_isr_handler+0xaa>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000897e:	8a63      	ldrh	r3, [r4, #18]
10008980:	8aa2      	ldrh	r2, [r4, #20]
10008982:	1a9b      	subs	r3, r3, r2
10008984:	b29b      	uxth	r3, r3
10008986:	466a      	mov	r2, sp
10008988:	80d3      	strh	r3, [r2, #6]

	module->buffer_remaining--;
1000898a:	8aa3      	ldrh	r3, [r4, #20]
1000898c:	3b01      	subs	r3, #1
1000898e:	b29b      	uxth	r3, r3
10008990:	82a3      	strh	r3, [r4, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
10008992:	88d3      	ldrh	r3, [r2, #6]
10008994:	69a2      	ldr	r2, [r4, #24]
10008996:	4694      	mov	ip, r2
10008998:	4463      	add	r3, ip
1000899a:	781b      	ldrb	r3, [r3, #0]
1000899c:	8033      	strh	r3, [r6, #0]
	
	if (module->buffer_remaining <= 0) {
1000899e:	8aa3      	ldrh	r3, [r4, #20]
100089a0:	b29b      	uxth	r3, r3
100089a2:	2b00      	cmp	r3, #0
100089a4:	d111      	bne.n	100089ca <_i2c_master_isr_handler+0xc6>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100089a6:	2210      	movs	r2, #16
100089a8:	332c      	adds	r3, #44	; 0x2c
100089aa:	54f2      	strb	r2, [r6, r3]
100089ac:	e00d      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100089ae:	8a63      	ldrh	r3, [r4, #18]
100089b0:	8aa1      	ldrh	r1, [r4, #20]

	module->buffer_remaining--;
100089b2:	8aa2      	ldrh	r2, [r4, #20]
100089b4:	3a01      	subs	r2, #1
100089b6:	b292      	uxth	r2, r2
100089b8:	82a2      	strh	r2, [r4, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
100089ba:	1a5b      	subs	r3, r3, r1
100089bc:	b29b      	uxth	r3, r3
100089be:	69a2      	ldr	r2, [r4, #24]
100089c0:	4694      	mov	ip, r2
100089c2:	4463      	add	r3, ip
100089c4:	7932      	ldrb	r2, [r6, #4]
100089c6:	b2d2      	uxtb	r2, r2
100089c8:	701a      	strb	r2, [r3, #0]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089ca:	8a63      	ldrh	r3, [r4, #18]
100089cc:	b29b      	uxth	r3, r3
100089ce:	2b00      	cmp	r3, #0
100089d0:	d01c      	beq.n	10008a0c <_i2c_master_isr_handler+0x108>
100089d2:	8aa3      	ldrh	r3, [r4, #20]
100089d4:	b29b      	uxth	r3, r3
100089d6:	2b00      	cmp	r3, #0
100089d8:	d118      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
100089da:	7f63      	ldrb	r3, [r4, #29]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089dc:	2b05      	cmp	r3, #5
100089de:	d115      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
100089e0:	7f23      	ldrb	r3, [r4, #28]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
100089e2:	2b01      	cmp	r3, #1
100089e4:	d112      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
100089e6:	2300      	movs	r3, #0
100089e8:	2230      	movs	r2, #48	; 0x30
100089ea:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
100089ec:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
100089ee:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
100089f0:	7963      	ldrb	r3, [r4, #5]
100089f2:	2b00      	cmp	r3, #0
100089f4:	d102      	bne.n	100089fc <_i2c_master_isr_handler+0xf8>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
100089f6:	2200      	movs	r2, #0
100089f8:	3320      	adds	r3, #32
100089fa:	54f2      	strb	r2, [r6, r3]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
100089fc:	07ab      	lsls	r3, r5, #30
100089fe:	d505      	bpl.n	10008a0c <_i2c_master_isr_handler+0x108>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
10008a00:	7f23      	ldrb	r3, [r4, #28]
10008a02:	2b01      	cmp	r3, #1
10008a04:	d102      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
10008a06:	68e3      	ldr	r3, [r4, #12]
10008a08:	0020      	movs	r0, r4
10008a0a:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
10008a0c:	7f23      	ldrb	r3, [r4, #28]
10008a0e:	2b01      	cmp	r3, #1
10008a10:	d114      	bne.n	10008a3c <_i2c_master_isr_handler+0x138>
		if (module->hw == I2C0) {
10008a12:	6823      	ldr	r3, [r4, #0]
10008a14:	4a15      	ldr	r2, [pc, #84]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a16:	4293      	cmp	r3, r2
10008a18:	d106      	bne.n	10008a28 <_i2c_master_isr_handler+0x124>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008a1a:	2180      	movs	r1, #128	; 0x80
10008a1c:	0049      	lsls	r1, r1, #1
10008a1e:	23c0      	movs	r3, #192	; 0xc0
10008a20:	005b      	lsls	r3, r3, #1
10008a22:	4a13      	ldr	r2, [pc, #76]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a24:	50d1      	str	r1, [r2, r3]
10008a26:	e01d      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
10008a28:	4a12      	ldr	r2, [pc, #72]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a2a:	4293      	cmp	r3, r2
10008a2c:	d11a      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a2e:	2180      	movs	r1, #128	; 0x80
10008a30:	00c9      	lsls	r1, r1, #3
10008a32:	23c0      	movs	r3, #192	; 0xc0
10008a34:	005b      	lsls	r3, r3, #1
10008a36:	4a0e      	ldr	r2, [pc, #56]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a38:	50d1      	str	r1, [r2, r3]
10008a3a:	e013      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
10008a3c:	6823      	ldr	r3, [r4, #0]
10008a3e:	4a0b      	ldr	r2, [pc, #44]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a40:	4293      	cmp	r3, r2
10008a42:	d106      	bne.n	10008a52 <_i2c_master_isr_handler+0x14e>
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	0089      	lsls	r1, r1, #2
10008a48:	23c0      	movs	r3, #192	; 0xc0
10008a4a:	005b      	lsls	r3, r3, #1
10008a4c:	4a08      	ldr	r2, [pc, #32]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a4e:	50d1      	str	r1, [r2, r3]
10008a50:	e008      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
10008a52:	4a08      	ldr	r2, [pc, #32]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a54:	4293      	cmp	r3, r2
10008a56:	d105      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a58:	2180      	movs	r1, #128	; 0x80
10008a5a:	0109      	lsls	r1, r1, #4
10008a5c:	23c0      	movs	r3, #192	; 0xc0
10008a5e:	005b      	lsls	r3, r3, #1
10008a60:	4a03      	ldr	r2, [pc, #12]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a62:	50d1      	str	r1, [r2, r3]
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
10008a64:	b002      	add	sp, #8
10008a66:	bd70      	pop	{r4, r5, r6, pc}
10008a68:	10016efc 	.word	0x10016efc
10008a6c:	40003000 	.word	0x40003000
10008a70:	e000e100 	.word	0xe000e100
10008a74:	40003400 	.word	0x40003400

10008a78 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008a78:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008a7a:	4b0d      	ldr	r3, [pc, #52]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a7c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008a7e:	2b00      	cmp	r3, #0
10008a80:	d007      	beq.n	10008a92 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008a82:	2201      	movs	r2, #1
10008a84:	4b0a      	ldr	r3, [pc, #40]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a86:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008a88:	4b0a      	ldr	r3, [pc, #40]	; (10008ab4 <dualtimer_isr_handler+0x3c>)
10008a8a:	681b      	ldr	r3, [r3, #0]
10008a8c:	2b00      	cmp	r3, #0
10008a8e:	d000      	beq.n	10008a92 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008a90:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008a92:	2334      	movs	r3, #52	; 0x34
10008a94:	4a06      	ldr	r2, [pc, #24]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a96:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008a98:	2b00      	cmp	r3, #0
10008a9a:	d007      	beq.n	10008aac <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008a9c:	2101      	movs	r1, #1
10008a9e:	232c      	movs	r3, #44	; 0x2c
10008aa0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008aa2:	4b05      	ldr	r3, [pc, #20]	; (10008ab8 <dualtimer_isr_handler+0x40>)
10008aa4:	681b      	ldr	r3, [r3, #0]
10008aa6:	2b00      	cmp	r3, #0
10008aa8:	d000      	beq.n	10008aac <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008aaa:	4798      	blx	r3
	}
}
10008aac:	bd10      	pop	{r4, pc}
10008aae:	46c0      	nop			; (mov r8, r8)
10008ab0:	40001000 	.word	0x40001000
10008ab4:	10015424 	.word	0x10015424
10008ab8:	10015428 	.word	0x10015428

10008abc <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008abc:	2301      	movs	r3, #1
10008abe:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008ac0:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ac2:	2202      	movs	r2, #2
10008ac4:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ac6:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008ac8:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008aca:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008acc:	2200      	movs	r2, #0
10008ace:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008ad0:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008ad2:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008ad4:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008ad6:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008ad8:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008ada:	7602      	strb	r2, [r0, #24]
}
10008adc:	4770      	bx	lr
10008ade:	46c0      	nop			; (mov r8, r8)

10008ae0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008ae0:	2800      	cmp	r0, #0
10008ae2:	d107      	bne.n	10008af4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008ae4:	2900      	cmp	r1, #0
10008ae6:	d102      	bne.n	10008aee <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008ae8:	4b06      	ldr	r3, [pc, #24]	; (10008b04 <dualtimer_set_counter+0x24>)
10008aea:	601a      	str	r2, [r3, #0]
10008aec:	e009      	b.n	10008b02 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008aee:	4b05      	ldr	r3, [pc, #20]	; (10008b04 <dualtimer_set_counter+0x24>)
10008af0:	619a      	str	r2, [r3, #24]
10008af2:	e006      	b.n	10008b02 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008af4:	2900      	cmp	r1, #0
10008af6:	d102      	bne.n	10008afe <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008af8:	4b02      	ldr	r3, [pc, #8]	; (10008b04 <dualtimer_set_counter+0x24>)
10008afa:	621a      	str	r2, [r3, #32]
10008afc:	e001      	b.n	10008b02 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008afe:	4b01      	ldr	r3, [pc, #4]	; (10008b04 <dualtimer_set_counter+0x24>)
10008b00:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008b02:	4770      	bx	lr
10008b04:	40001000 	.word	0x40001000

10008b08 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008b08:	2800      	cmp	r0, #0
10008b0a:	d105      	bne.n	10008b18 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b0c:	4a06      	ldr	r2, [pc, #24]	; (10008b28 <dualtimer_enable+0x20>)
10008b0e:	7a11      	ldrb	r1, [r2, #8]
10008b10:	2380      	movs	r3, #128	; 0x80
10008b12:	430b      	orrs	r3, r1
10008b14:	7213      	strb	r3, [r2, #8]
10008b16:	e005      	b.n	10008b24 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008b18:	4903      	ldr	r1, [pc, #12]	; (10008b28 <dualtimer_enable+0x20>)
10008b1a:	2228      	movs	r2, #40	; 0x28
10008b1c:	5c88      	ldrb	r0, [r1, r2]
10008b1e:	2380      	movs	r3, #128	; 0x80
10008b20:	4303      	orrs	r3, r0
10008b22:	548b      	strb	r3, [r1, r2]
	}
}
10008b24:	4770      	bx	lr
10008b26:	46c0      	nop			; (mov r8, r8)
10008b28:	40001000 	.word	0x40001000

10008b2c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008b2c:	2800      	cmp	r0, #0
10008b2e:	d105      	bne.n	10008b3c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b30:	4a06      	ldr	r2, [pc, #24]	; (10008b4c <dualtimer_disable+0x20>)
10008b32:	7a11      	ldrb	r1, [r2, #8]
10008b34:	237f      	movs	r3, #127	; 0x7f
10008b36:	400b      	ands	r3, r1
10008b38:	7213      	strb	r3, [r2, #8]
10008b3a:	e005      	b.n	10008b48 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008b3c:	4903      	ldr	r1, [pc, #12]	; (10008b4c <dualtimer_disable+0x20>)
10008b3e:	2228      	movs	r2, #40	; 0x28
10008b40:	5c88      	ldrb	r0, [r1, r2]
10008b42:	237f      	movs	r3, #127	; 0x7f
10008b44:	4003      	ands	r3, r0
10008b46:	548b      	strb	r3, [r1, r2]
	}
}
10008b48:	4770      	bx	lr
10008b4a:	46c0      	nop			; (mov r8, r8)
10008b4c:	40001000 	.word	0x40001000

10008b50 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008b50:	b570      	push	{r4, r5, r6, lr}
10008b52:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008b54:	2004      	movs	r0, #4
10008b56:	4b39      	ldr	r3, [pc, #228]	; (10008c3c <dualtimer_init+0xec>)
10008b58:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008b5a:	7823      	ldrb	r3, [r4, #0]
10008b5c:	2b00      	cmp	r3, #0
10008b5e:	d102      	bne.n	10008b66 <dualtimer_init+0x16>
10008b60:	7b23      	ldrb	r3, [r4, #12]
10008b62:	2b00      	cmp	r3, #0
10008b64:	d065      	beq.n	10008c32 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008b66:	4936      	ldr	r1, [pc, #216]	; (10008c40 <dualtimer_init+0xf0>)
10008b68:	68ca      	ldr	r2, [r1, #12]
10008b6a:	2320      	movs	r3, #32
10008b6c:	4313      	orrs	r3, r2
10008b6e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008b70:	7e22      	ldrb	r2, [r4, #24]
10008b72:	698b      	ldr	r3, [r1, #24]
10008b74:	2003      	movs	r0, #3
10008b76:	4002      	ands	r2, r0
10008b78:	0112      	lsls	r2, r2, #4
10008b7a:	302d      	adds	r0, #45	; 0x2d
10008b7c:	4383      	bics	r3, r0
10008b7e:	4313      	orrs	r3, r2
10008b80:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008b82:	7823      	ldrb	r3, [r4, #0]
10008b84:	2b00      	cmp	r3, #0
10008b86:	d026      	beq.n	10008bd6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008b88:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008b8a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008b8c:	2b00      	cmp	r3, #0
10008b8e:	d003      	beq.n	10008b98 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008b90:	3b02      	subs	r3, #2
10008b92:	425d      	negs	r5, r3
10008b94:	415d      	adcs	r5, r3
10008b96:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008b98:	78a2      	ldrb	r2, [r4, #2]
10008b9a:	0052      	lsls	r2, r2, #1
10008b9c:	2502      	movs	r5, #2
10008b9e:	402a      	ands	r2, r5
10008ba0:	78e3      	ldrb	r3, [r4, #3]
10008ba2:	009b      	lsls	r3, r3, #2
10008ba4:	350a      	adds	r5, #10
10008ba6:	402b      	ands	r3, r5
10008ba8:	431a      	orrs	r2, r3
10008baa:	0015      	movs	r5, r2
10008bac:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008bae:	7923      	ldrb	r3, [r4, #4]
10008bb0:	2b00      	cmp	r3, #0
10008bb2:	d001      	beq.n	10008bb8 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008bb4:	2320      	movs	r3, #32
10008bb6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008bb8:	4b22      	ldr	r3, [pc, #136]	; (10008c44 <dualtimer_init+0xf4>)
10008bba:	68a2      	ldr	r2, [r4, #8]
10008bbc:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008bbe:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008bc0:	491f      	ldr	r1, [pc, #124]	; (10008c40 <dualtimer_init+0xf0>)
10008bc2:	22c4      	movs	r2, #196	; 0xc4
10008bc4:	0052      	lsls	r2, r2, #1
10008bc6:	5c88      	ldrb	r0, [r1, r2]
10008bc8:	2301      	movs	r3, #1
10008bca:	4303      	orrs	r3, r0
10008bcc:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008bce:	2000      	movs	r0, #0
10008bd0:	4b1d      	ldr	r3, [pc, #116]	; (10008c48 <dualtimer_init+0xf8>)
10008bd2:	4798      	blx	r3
10008bd4:	e000      	b.n	10008bd8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008bd6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008bd8:	7b23      	ldrb	r3, [r4, #12]
10008bda:	2b00      	cmp	r3, #0
10008bdc:	d029      	beq.n	10008c32 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008bde:	7b63      	ldrb	r3, [r4, #13]
10008be0:	2b00      	cmp	r3, #0
10008be2:	d005      	beq.n	10008bf0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008be4:	2b01      	cmp	r3, #1
10008be6:	d005      	beq.n	10008bf4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008be8:	2b02      	cmp	r3, #2
10008bea:	d104      	bne.n	10008bf6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008bec:	2540      	movs	r5, #64	; 0x40
10008bee:	e002      	b.n	10008bf6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008bf0:	2501      	movs	r5, #1
10008bf2:	e000      	b.n	10008bf6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008bf4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008bf6:	7ba3      	ldrb	r3, [r4, #14]
10008bf8:	005b      	lsls	r3, r3, #1
10008bfa:	2102      	movs	r1, #2
10008bfc:	4019      	ands	r1, r3
10008bfe:	7be2      	ldrb	r2, [r4, #15]
10008c00:	0092      	lsls	r2, r2, #2
10008c02:	230c      	movs	r3, #12
10008c04:	4013      	ands	r3, r2
10008c06:	430b      	orrs	r3, r1
10008c08:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008c0a:	7c23      	ldrb	r3, [r4, #16]
10008c0c:	2b00      	cmp	r3, #0
10008c0e:	d001      	beq.n	10008c14 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008c10:	2320      	movs	r3, #32
10008c12:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008c14:	6962      	ldr	r2, [r4, #20]
10008c16:	4b0b      	ldr	r3, [pc, #44]	; (10008c44 <dualtimer_init+0xf4>)
10008c18:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008c1a:	2228      	movs	r2, #40	; 0x28
10008c1c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008c1e:	4908      	ldr	r1, [pc, #32]	; (10008c40 <dualtimer_init+0xf0>)
10008c20:	3261      	adds	r2, #97	; 0x61
10008c22:	32ff      	adds	r2, #255	; 0xff
10008c24:	5c88      	ldrb	r0, [r1, r2]
10008c26:	2302      	movs	r3, #2
10008c28:	4303      	orrs	r3, r0
10008c2a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008c2c:	2001      	movs	r0, #1
10008c2e:	4b06      	ldr	r3, [pc, #24]	; (10008c48 <dualtimer_init+0xf8>)
10008c30:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008c32:	4906      	ldr	r1, [pc, #24]	; (10008c4c <dualtimer_init+0xfc>)
10008c34:	201e      	movs	r0, #30
10008c36:	4b06      	ldr	r3, [pc, #24]	; (10008c50 <dualtimer_init+0x100>)
10008c38:	4798      	blx	r3
}
10008c3a:	bd70      	pop	{r4, r5, r6, pc}
10008c3c:	100093f9 	.word	0x100093f9
10008c40:	4000b000 	.word	0x4000b000
10008c44:	40001000 	.word	0x40001000
10008c48:	10008b09 	.word	0x10008b09
10008c4c:	10008a79 	.word	0x10008a79
10008c50:	10009861 	.word	0x10009861

10008c54 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008c54:	2800      	cmp	r0, #0
10008c56:	d102      	bne.n	10008c5e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008c58:	4b02      	ldr	r3, [pc, #8]	; (10008c64 <dualtimer_register_callback+0x10>)
10008c5a:	6019      	str	r1, [r3, #0]
10008c5c:	e001      	b.n	10008c62 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008c5e:	4b02      	ldr	r3, [pc, #8]	; (10008c68 <dualtimer_register_callback+0x14>)
10008c60:	6019      	str	r1, [r3, #0]
	}
}
10008c62:	4770      	bx	lr
10008c64:	10015424 	.word	0x10015424
10008c68:	10015428 	.word	0x10015428

10008c6c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008c6c:	2300      	movs	r3, #0
10008c6e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008c70:	2201      	movs	r2, #1
10008c72:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008c74:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008c76:	70c3      	strb	r3, [r0, #3]
}
10008c78:	4770      	bx	lr
10008c7a:	46c0      	nop			; (mov r8, r8)

10008c7c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008c7c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008c7e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008c80:	2801      	cmp	r0, #1
10008c82:	d800      	bhi.n	10008c86 <gpio_pin_set_config+0xa>
10008c84:	e0c8      	b.n	10008e18 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008c86:	2807      	cmp	r0, #7
10008c88:	d809      	bhi.n	10008c9e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008c8a:	4d64      	ldr	r5, [pc, #400]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008c8c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008c8e:	3b10      	subs	r3, #16
10008c90:	4003      	ands	r3, r0
10008c92:	009b      	lsls	r3, r3, #2
10008c94:	2407      	movs	r4, #7
10008c96:	409c      	lsls	r4, r3
10008c98:	43a2      	bics	r2, r4
10008c9a:	646a      	str	r2, [r5, #68]	; 0x44
10008c9c:	e029      	b.n	10008cf2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008c9e:	280f      	cmp	r0, #15
10008ca0:	d809      	bhi.n	10008cb6 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ca2:	4d5e      	ldr	r5, [pc, #376]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008ca4:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008ca6:	2307      	movs	r3, #7
10008ca8:	4003      	ands	r3, r0
10008caa:	009b      	lsls	r3, r3, #2
10008cac:	2407      	movs	r4, #7
10008cae:	409c      	lsls	r4, r3
10008cb0:	43a2      	bics	r2, r4
10008cb2:	64aa      	str	r2, [r5, #72]	; 0x48
10008cb4:	e01d      	b.n	10008cf2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008cb6:	2817      	cmp	r0, #23
10008cb8:	d809      	bhi.n	10008cce <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008cba:	4d58      	ldr	r5, [pc, #352]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008cbc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008cbe:	2307      	movs	r3, #7
10008cc0:	4003      	ands	r3, r0
10008cc2:	009b      	lsls	r3, r3, #2
10008cc4:	2407      	movs	r4, #7
10008cc6:	409c      	lsls	r4, r3
10008cc8:	43a2      	bics	r2, r4
10008cca:	64ea      	str	r2, [r5, #76]	; 0x4c
10008ccc:	e011      	b.n	10008cf2 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008cce:	0003      	movs	r3, r0
10008cd0:	3b2c      	subs	r3, #44	; 0x2c
10008cd2:	2b03      	cmp	r3, #3
10008cd4:	d80d      	bhi.n	10008cf2 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008cd6:	4d52      	ldr	r5, [pc, #328]	; (10008e20 <gpio_pin_set_config+0x1a4>)
10008cd8:	2482      	movs	r4, #130	; 0x82
10008cda:	00e4      	lsls	r4, r4, #3
10008cdc:	5d2a      	ldrb	r2, [r5, r4]
10008cde:	0712      	lsls	r2, r2, #28
10008ce0:	2601      	movs	r6, #1
10008ce2:	409e      	lsls	r6, r3
10008ce4:	0f12      	lsrs	r2, r2, #28
10008ce6:	5d2b      	ldrb	r3, [r5, r4]
10008ce8:	43b2      	bics	r2, r6
10008cea:	260f      	movs	r6, #15
10008cec:	43b3      	bics	r3, r6
10008cee:	4313      	orrs	r3, r2
10008cf0:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008cf2:	0003      	movs	r3, r0
10008cf4:	3b1d      	subs	r3, #29
10008cf6:	2b02      	cmp	r3, #2
10008cf8:	d829      	bhi.n	10008d4e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008cfa:	784b      	ldrb	r3, [r1, #1]
10008cfc:	2b01      	cmp	r3, #1
10008cfe:	d108      	bne.n	10008d12 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008d00:	4d47      	ldr	r5, [pc, #284]	; (10008e20 <gpio_pin_set_config+0x1a4>)
10008d02:	7d2b      	ldrb	r3, [r5, #20]
10008d04:	241f      	movs	r4, #31
10008d06:	1a24      	subs	r4, r4, r0
10008d08:	2201      	movs	r2, #1
10008d0a:	40a2      	lsls	r2, r4
10008d0c:	4393      	bics	r3, r2
10008d0e:	752b      	strb	r3, [r5, #20]
10008d10:	e008      	b.n	10008d24 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008d12:	4c43      	ldr	r4, [pc, #268]	; (10008e20 <gpio_pin_set_config+0x1a4>)
10008d14:	7d25      	ldrb	r5, [r4, #20]
10008d16:	221f      	movs	r2, #31
10008d18:	1a12      	subs	r2, r2, r0
10008d1a:	2301      	movs	r3, #1
10008d1c:	4093      	lsls	r3, r2
10008d1e:	432b      	orrs	r3, r5
10008d20:	b2db      	uxtb	r3, r3
10008d22:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008d24:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008d26:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008d28:	2a00      	cmp	r2, #0
10008d2a:	d075      	beq.n	10008e18 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008d2c:	493c      	ldr	r1, [pc, #240]	; (10008e20 <gpio_pin_set_config+0x1a4>)
10008d2e:	880c      	ldrh	r4, [r1, #0]
10008d30:	221f      	movs	r2, #31
10008d32:	1a10      	subs	r0, r2, r0
10008d34:	0080      	lsls	r0, r0, #2
10008d36:	3301      	adds	r3, #1
10008d38:	4083      	lsls	r3, r0
10008d3a:	4323      	orrs	r3, r4
10008d3c:	b29b      	uxth	r3, r3
10008d3e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008d40:	4a38      	ldr	r2, [pc, #224]	; (10008e24 <gpio_pin_set_config+0x1a8>)
10008d42:	7811      	ldrb	r1, [r2, #0]
10008d44:	2302      	movs	r3, #2
10008d46:	430b      	orrs	r3, r1
10008d48:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008d4a:	2300      	movs	r3, #0
10008d4c:	e064      	b.n	10008e18 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008d4e:	780a      	ldrb	r2, [r1, #0]
10008d50:	2a00      	cmp	r2, #0
10008d52:	d140      	bne.n	10008dd6 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008d54:	280f      	cmp	r0, #15
10008d56:	d808      	bhi.n	10008d6a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008d58:	2301      	movs	r3, #1
10008d5a:	4083      	lsls	r3, r0
10008d5c:	b29b      	uxth	r3, r3
10008d5e:	4a32      	ldr	r2, [pc, #200]	; (10008e28 <gpio_pin_set_config+0x1ac>)
10008d60:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008d62:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008d64:	281f      	cmp	r0, #31
10008d66:	d857      	bhi.n	10008e18 <gpio_pin_set_config+0x19c>
10008d68:	e012      	b.n	10008d90 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008d6a:	281f      	cmp	r0, #31
10008d6c:	d807      	bhi.n	10008d7e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008d6e:	220f      	movs	r2, #15
10008d70:	4002      	ands	r2, r0
10008d72:	2301      	movs	r3, #1
10008d74:	4093      	lsls	r3, r2
10008d76:	b29b      	uxth	r3, r3
10008d78:	4a2c      	ldr	r2, [pc, #176]	; (10008e2c <gpio_pin_set_config+0x1b0>)
10008d7a:	8293      	strh	r3, [r2, #20]
10008d7c:	e008      	b.n	10008d90 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008d7e:	230f      	movs	r3, #15
10008d80:	4018      	ands	r0, r3
10008d82:	3b0e      	subs	r3, #14
10008d84:	4083      	lsls	r3, r0
10008d86:	b29b      	uxth	r3, r3
10008d88:	4a29      	ldr	r2, [pc, #164]	; (10008e30 <gpio_pin_set_config+0x1b4>)
10008d8a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008d8c:	2300      	movs	r3, #0
10008d8e:	e043      	b.n	10008e18 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008d90:	784b      	ldrb	r3, [r1, #1]
10008d92:	2b01      	cmp	r3, #1
10008d94:	d00c      	beq.n	10008db0 <gpio_pin_set_config+0x134>
10008d96:	2b00      	cmp	r3, #0
10008d98:	d002      	beq.n	10008da0 <gpio_pin_set_config+0x124>
10008d9a:	2b02      	cmp	r3, #2
10008d9c:	d010      	beq.n	10008dc0 <gpio_pin_set_config+0x144>
10008d9e:	e03a      	b.n	10008e16 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008da0:	491e      	ldr	r1, [pc, #120]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008da2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008da4:	2301      	movs	r3, #1
10008da6:	4083      	lsls	r3, r0
10008da8:	4313      	orrs	r3, r2
10008daa:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008dac:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008dae:	e033      	b.n	10008e18 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008db0:	491a      	ldr	r1, [pc, #104]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008db2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008db4:	2201      	movs	r2, #1
10008db6:	4082      	lsls	r2, r0
10008db8:	4393      	bics	r3, r2
10008dba:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008dbc:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008dbe:	e02b      	b.n	10008e18 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008dc0:	4b16      	ldr	r3, [pc, #88]	; (10008e1c <gpio_pin_set_config+0x1a0>)
10008dc2:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008dc4:	2201      	movs	r2, #1
10008dc6:	4082      	lsls	r2, r0
10008dc8:	4311      	orrs	r1, r2
10008dca:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008dcc:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008dce:	4391      	bics	r1, r2
10008dd0:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008dd2:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008dd4:	e020      	b.n	10008e18 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008dd6:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008dd8:	2a01      	cmp	r2, #1
10008dda:	d11d      	bne.n	10008e18 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008ddc:	280f      	cmp	r0, #15
10008dde:	d806      	bhi.n	10008dee <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008de0:	3301      	adds	r3, #1
10008de2:	4083      	lsls	r3, r0
10008de4:	b29b      	uxth	r3, r3
10008de6:	4a10      	ldr	r2, [pc, #64]	; (10008e28 <gpio_pin_set_config+0x1ac>)
10008de8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008dea:	2300      	movs	r3, #0
10008dec:	e014      	b.n	10008e18 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008dee:	281f      	cmp	r0, #31
10008df0:	d808      	bhi.n	10008e04 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008df2:	230f      	movs	r3, #15
10008df4:	4018      	ands	r0, r3
10008df6:	3b0e      	subs	r3, #14
10008df8:	4083      	lsls	r3, r0
10008dfa:	b29b      	uxth	r3, r3
10008dfc:	4a0b      	ldr	r2, [pc, #44]	; (10008e2c <gpio_pin_set_config+0x1b0>)
10008dfe:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008e00:	2300      	movs	r3, #0
10008e02:	e009      	b.n	10008e18 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008e04:	230f      	movs	r3, #15
10008e06:	4018      	ands	r0, r3
10008e08:	3b0e      	subs	r3, #14
10008e0a:	4083      	lsls	r3, r0
10008e0c:	b29b      	uxth	r3, r3
10008e0e:	4a08      	ldr	r2, [pc, #32]	; (10008e30 <gpio_pin_set_config+0x1b4>)
10008e10:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008e12:	2300      	movs	r3, #0
10008e14:	e000      	b.n	10008e18 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008e16:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008e18:	0018      	movs	r0, r3
10008e1a:	bd70      	pop	{r4, r5, r6, pc}
10008e1c:	4000b000 	.word	0x4000b000
10008e20:	4000f000 	.word	0x4000f000
10008e24:	4000e000 	.word	0x4000e000
10008e28:	40010000 	.word	0x40010000
10008e2c:	40011000 	.word	0x40011000
10008e30:	40013000 	.word	0x40013000

10008e34 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008e34:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
10008e36:	280f      	cmp	r0, #15
10008e38:	d810      	bhi.n	10008e5c <gpio_pin_set_output_level+0x28>
		if(level) {
10008e3a:	2900      	cmp	r1, #0
10008e3c:	d007      	beq.n	10008e4e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008e3e:	4a1d      	ldr	r2, [pc, #116]	; (10008eb4 <gpio_pin_set_output_level+0x80>)
10008e40:	8891      	ldrh	r1, [r2, #4]
10008e42:	2301      	movs	r3, #1
10008e44:	4083      	lsls	r3, r0
10008e46:	430b      	orrs	r3, r1
10008e48:	b29b      	uxth	r3, r3
10008e4a:	8093      	strh	r3, [r2, #4]
10008e4c:	e031      	b.n	10008eb2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008e4e:	4919      	ldr	r1, [pc, #100]	; (10008eb4 <gpio_pin_set_output_level+0x80>)
10008e50:	888b      	ldrh	r3, [r1, #4]
10008e52:	2201      	movs	r2, #1
10008e54:	4082      	lsls	r2, r0
10008e56:	4393      	bics	r3, r2
10008e58:	808b      	strh	r3, [r1, #4]
10008e5a:	e02a      	b.n	10008eb2 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008e5c:	281f      	cmp	r0, #31
10008e5e:	d814      	bhi.n	10008e8a <gpio_pin_set_output_level+0x56>
		if(level) {
10008e60:	2900      	cmp	r1, #0
10008e62:	d009      	beq.n	10008e78 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008e64:	4914      	ldr	r1, [pc, #80]	; (10008eb8 <gpio_pin_set_output_level+0x84>)
10008e66:	888c      	ldrh	r4, [r1, #4]
10008e68:	220f      	movs	r2, #15
10008e6a:	4010      	ands	r0, r2
10008e6c:	2301      	movs	r3, #1
10008e6e:	4083      	lsls	r3, r0
10008e70:	4323      	orrs	r3, r4
10008e72:	b29b      	uxth	r3, r3
10008e74:	808b      	strh	r3, [r1, #4]
10008e76:	e01c      	b.n	10008eb2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008e78:	490f      	ldr	r1, [pc, #60]	; (10008eb8 <gpio_pin_set_output_level+0x84>)
10008e7a:	888b      	ldrh	r3, [r1, #4]
10008e7c:	220f      	movs	r2, #15
10008e7e:	4010      	ands	r0, r2
10008e80:	3a0e      	subs	r2, #14
10008e82:	4082      	lsls	r2, r0
10008e84:	4393      	bics	r3, r2
10008e86:	808b      	strh	r3, [r1, #4]
10008e88:	e013      	b.n	10008eb2 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008e8a:	2900      	cmp	r1, #0
10008e8c:	d009      	beq.n	10008ea2 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008e8e:	490b      	ldr	r1, [pc, #44]	; (10008ebc <gpio_pin_set_output_level+0x88>)
10008e90:	888c      	ldrh	r4, [r1, #4]
10008e92:	220f      	movs	r2, #15
10008e94:	4010      	ands	r0, r2
10008e96:	2301      	movs	r3, #1
10008e98:	4083      	lsls	r3, r0
10008e9a:	4323      	orrs	r3, r4
10008e9c:	b29b      	uxth	r3, r3
10008e9e:	808b      	strh	r3, [r1, #4]
10008ea0:	e007      	b.n	10008eb2 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008ea2:	4906      	ldr	r1, [pc, #24]	; (10008ebc <gpio_pin_set_output_level+0x88>)
10008ea4:	888b      	ldrh	r3, [r1, #4]
10008ea6:	220f      	movs	r2, #15
10008ea8:	4010      	ands	r0, r2
10008eaa:	3a0e      	subs	r2, #14
10008eac:	4082      	lsls	r2, r0
10008eae:	4393      	bics	r3, r2
10008eb0:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008eb2:	bd10      	pop	{r4, pc}
10008eb4:	40010000 	.word	0x40010000
10008eb8:	40011000 	.word	0x40011000
10008ebc:	40013000 	.word	0x40013000

10008ec0 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008ec0:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008ec2:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008ec4:	23ff      	movs	r3, #255	; 0xff
10008ec6:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008ec8:	2807      	cmp	r0, #7
10008eca:	d833      	bhi.n	10008f34 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ecc:	4a4e      	ldr	r2, [pc, #312]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008ece:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008ed0:	3bf8      	subs	r3, #248	; 0xf8
10008ed2:	4003      	ands	r3, r0
10008ed4:	009b      	lsls	r3, r3, #2
10008ed6:	2607      	movs	r6, #7
10008ed8:	409e      	lsls	r6, r3
10008eda:	43b4      	bics	r4, r6
10008edc:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008ede:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008ee0:	000e      	movs	r6, r1
10008ee2:	409e      	lsls	r6, r3
10008ee4:	0033      	movs	r3, r6
10008ee6:	4323      	orrs	r3, r4
10008ee8:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008eea:	2901      	cmp	r1, #1
10008eec:	d000      	beq.n	10008ef0 <gpio_pinmux_cofiguration+0x30>
10008eee:	e08a      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008ef0:	2803      	cmp	r0, #3
10008ef2:	d80f      	bhi.n	10008f14 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ef4:	0011      	movs	r1, r2
10008ef6:	22d0      	movs	r2, #208	; 0xd0
10008ef8:	0052      	lsls	r2, r2, #1
10008efa:	588c      	ldr	r4, [r1, r2]
10008efc:	2303      	movs	r3, #3
10008efe:	4018      	ands	r0, r3
10008f00:	00c0      	lsls	r0, r0, #3
10008f02:	333c      	adds	r3, #60	; 0x3c
10008f04:	4083      	lsls	r3, r0
10008f06:	439c      	bics	r4, r3
10008f08:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008f0a:	588b      	ldr	r3, [r1, r2]
10008f0c:	4085      	lsls	r5, r0
10008f0e:	431d      	orrs	r5, r3
10008f10:	508d      	str	r5, [r1, r2]
10008f12:	e078      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008f14:	493c      	ldr	r1, [pc, #240]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008f16:	22d2      	movs	r2, #210	; 0xd2
10008f18:	0052      	lsls	r2, r2, #1
10008f1a:	588c      	ldr	r4, [r1, r2]
10008f1c:	2303      	movs	r3, #3
10008f1e:	4018      	ands	r0, r3
10008f20:	00c0      	lsls	r0, r0, #3
10008f22:	333c      	adds	r3, #60	; 0x3c
10008f24:	4083      	lsls	r3, r0
10008f26:	439c      	bics	r4, r3
10008f28:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008f2a:	588b      	ldr	r3, [r1, r2]
10008f2c:	4085      	lsls	r5, r0
10008f2e:	431d      	orrs	r5, r3
10008f30:	508d      	str	r5, [r1, r2]
10008f32:	e068      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008f34:	280f      	cmp	r0, #15
10008f36:	d832      	bhi.n	10008f9e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008f38:	4a33      	ldr	r2, [pc, #204]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008f3a:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008f3c:	2307      	movs	r3, #7
10008f3e:	4003      	ands	r3, r0
10008f40:	009b      	lsls	r3, r3, #2
10008f42:	2607      	movs	r6, #7
10008f44:	409e      	lsls	r6, r3
10008f46:	43b4      	bics	r4, r6
10008f48:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008f4a:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008f4c:	000e      	movs	r6, r1
10008f4e:	409e      	lsls	r6, r3
10008f50:	0033      	movs	r3, r6
10008f52:	4323      	orrs	r3, r4
10008f54:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008f56:	2901      	cmp	r1, #1
10008f58:	d155      	bne.n	10009006 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008f5a:	280b      	cmp	r0, #11
10008f5c:	d80f      	bhi.n	10008f7e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008f5e:	0011      	movs	r1, r2
10008f60:	22d4      	movs	r2, #212	; 0xd4
10008f62:	0052      	lsls	r2, r2, #1
10008f64:	588c      	ldr	r4, [r1, r2]
10008f66:	2303      	movs	r3, #3
10008f68:	4018      	ands	r0, r3
10008f6a:	00c0      	lsls	r0, r0, #3
10008f6c:	333c      	adds	r3, #60	; 0x3c
10008f6e:	4083      	lsls	r3, r0
10008f70:	439c      	bics	r4, r3
10008f72:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008f74:	588b      	ldr	r3, [r1, r2]
10008f76:	4085      	lsls	r5, r0
10008f78:	431d      	orrs	r5, r3
10008f7a:	508d      	str	r5, [r1, r2]
10008f7c:	e043      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008f7e:	4922      	ldr	r1, [pc, #136]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008f80:	22d6      	movs	r2, #214	; 0xd6
10008f82:	0052      	lsls	r2, r2, #1
10008f84:	588c      	ldr	r4, [r1, r2]
10008f86:	2303      	movs	r3, #3
10008f88:	4018      	ands	r0, r3
10008f8a:	00c0      	lsls	r0, r0, #3
10008f8c:	333c      	adds	r3, #60	; 0x3c
10008f8e:	4083      	lsls	r3, r0
10008f90:	439c      	bics	r4, r3
10008f92:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008f94:	588b      	ldr	r3, [r1, r2]
10008f96:	4085      	lsls	r5, r0
10008f98:	431d      	orrs	r5, r3
10008f9a:	508d      	str	r5, [r1, r2]
10008f9c:	e033      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008f9e:	2817      	cmp	r0, #23
10008fa0:	d831      	bhi.n	10009006 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008fa2:	4a19      	ldr	r2, [pc, #100]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008fa4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008fa6:	2307      	movs	r3, #7
10008fa8:	4003      	ands	r3, r0
10008faa:	009b      	lsls	r3, r3, #2
10008fac:	2607      	movs	r6, #7
10008fae:	409e      	lsls	r6, r3
10008fb0:	43b4      	bics	r4, r6
10008fb2:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008fb4:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008fb6:	000e      	movs	r6, r1
10008fb8:	409e      	lsls	r6, r3
10008fba:	0033      	movs	r3, r6
10008fbc:	4323      	orrs	r3, r4
10008fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008fc0:	2901      	cmp	r1, #1
10008fc2:	d120      	bne.n	10009006 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008fc4:	2813      	cmp	r0, #19
10008fc6:	d80f      	bhi.n	10008fe8 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008fc8:	0011      	movs	r1, r2
10008fca:	22d8      	movs	r2, #216	; 0xd8
10008fcc:	0052      	lsls	r2, r2, #1
10008fce:	588c      	ldr	r4, [r1, r2]
10008fd0:	2303      	movs	r3, #3
10008fd2:	4018      	ands	r0, r3
10008fd4:	00c0      	lsls	r0, r0, #3
10008fd6:	333c      	adds	r3, #60	; 0x3c
10008fd8:	4083      	lsls	r3, r0
10008fda:	439c      	bics	r4, r3
10008fdc:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008fde:	588b      	ldr	r3, [r1, r2]
10008fe0:	4085      	lsls	r5, r0
10008fe2:	431d      	orrs	r5, r3
10008fe4:	508d      	str	r5, [r1, r2]
10008fe6:	e00e      	b.n	10009006 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008fe8:	4a07      	ldr	r2, [pc, #28]	; (10009008 <gpio_pinmux_cofiguration+0x148>)
10008fea:	23da      	movs	r3, #218	; 0xda
10008fec:	005b      	lsls	r3, r3, #1
10008fee:	58d1      	ldr	r1, [r2, r3]
10008ff0:	2403      	movs	r4, #3
10008ff2:	4020      	ands	r0, r4
10008ff4:	00c0      	lsls	r0, r0, #3
10008ff6:	343c      	adds	r4, #60	; 0x3c
10008ff8:	4084      	lsls	r4, r0
10008ffa:	43a1      	bics	r1, r4
10008ffc:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008ffe:	58d1      	ldr	r1, [r2, r3]
10009000:	4085      	lsls	r5, r0
10009002:	430d      	orrs	r5, r1
10009004:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10009006:	bd70      	pop	{r4, r5, r6, pc}
10009008:	4000b000 	.word	0x4000b000

1000900c <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000900c:	2801      	cmp	r0, #1
1000900e:	d00d      	beq.n	1000902c <system_clock_config+0x20>
10009010:	2800      	cmp	r0, #0
10009012:	d002      	beq.n	1000901a <system_clock_config+0xe>
10009014:	2802      	cmp	r0, #2
10009016:	d01c      	beq.n	10009052 <system_clock_config+0x46>
10009018:	e02e      	b.n	10009078 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000901a:	4a18      	ldr	r2, [pc, #96]	; (1000907c <system_clock_config+0x70>)
1000901c:	6990      	ldr	r0, [r2, #24]
1000901e:	230c      	movs	r3, #12
10009020:	4303      	orrs	r3, r0
10009022:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10009024:	4a16      	ldr	r2, [pc, #88]	; (10009080 <system_clock_config+0x74>)
10009026:	4b17      	ldr	r3, [pc, #92]	; (10009084 <system_clock_config+0x78>)
10009028:	601a      	str	r2, [r3, #0]
			break;
1000902a:	e01a      	b.n	10009062 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000902c:	4b13      	ldr	r3, [pc, #76]	; (1000907c <system_clock_config+0x70>)
1000902e:	6998      	ldr	r0, [r3, #24]
10009030:	2208      	movs	r2, #8
10009032:	4302      	orrs	r2, r0
10009034:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009036:	699a      	ldr	r2, [r3, #24]
10009038:	2004      	movs	r0, #4
1000903a:	4382      	bics	r2, r0
1000903c:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000903e:	4a12      	ldr	r2, [pc, #72]	; (10009088 <system_clock_config+0x7c>)
10009040:	6853      	ldr	r3, [r2, #4]
10009042:	2080      	movs	r0, #128	; 0x80
10009044:	0300      	lsls	r0, r0, #12
10009046:	4303      	orrs	r3, r0
10009048:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000904a:	4a10      	ldr	r2, [pc, #64]	; (1000908c <system_clock_config+0x80>)
1000904c:	4b0d      	ldr	r3, [pc, #52]	; (10009084 <system_clock_config+0x78>)
1000904e:	601a      	str	r2, [r3, #0]
			break;
10009050:	e007      	b.n	10009062 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009052:	4a0a      	ldr	r2, [pc, #40]	; (1000907c <system_clock_config+0x70>)
10009054:	6993      	ldr	r3, [r2, #24]
10009056:	200c      	movs	r0, #12
10009058:	4383      	bics	r3, r0
1000905a:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000905c:	4a08      	ldr	r2, [pc, #32]	; (10009080 <system_clock_config+0x74>)
1000905e:	4b09      	ldr	r3, [pc, #36]	; (10009084 <system_clock_config+0x78>)
10009060:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10009062:	4b06      	ldr	r3, [pc, #24]	; (1000907c <system_clock_config+0x70>)
10009064:	699a      	ldr	r2, [r3, #24]
10009066:	2003      	movs	r0, #3
10009068:	4382      	bics	r2, r0
1000906a:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
1000906c:	699a      	ldr	r2, [r3, #24]
1000906e:	4001      	ands	r1, r0
10009070:	4311      	orrs	r1, r2
10009072:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10009074:	2000      	movs	r0, #0
10009076:	e000      	b.n	1000907a <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10009078:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000907a:	4770      	bx	lr
1000907c:	4000b000 	.word	0x4000b000
10009080:	018cba80 	.word	0x018cba80
10009084:	10016f00 	.word	0x10016f00
10009088:	4000f000 	.word	0x4000f000
1000908c:	001e8480 	.word	0x001e8480

10009090 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10009090:	4b01      	ldr	r3, [pc, #4]	; (10009098 <system_clock_get_value+0x8>)
10009092:	6818      	ldr	r0, [r3, #0]
}
10009094:	4770      	bx	lr
10009096:	46c0      	nop			; (mov r8, r8)
10009098:	10016f00 	.word	0x10016f00

1000909c <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000909c:	b500      	push	{lr}
	switch (peripheral) {
1000909e:	2835      	cmp	r0, #53	; 0x35
100090a0:	d900      	bls.n	100090a4 <system_clock_peripheral_enable+0x8>
100090a2:	e1a2      	b.n	100093ea <system_clock_peripheral_enable+0x34e>
100090a4:	0080      	lsls	r0, r0, #2
100090a6:	4bd2      	ldr	r3, [pc, #840]	; (100093f0 <system_clock_peripheral_enable+0x354>)
100090a8:	581b      	ldr	r3, [r3, r0]
100090aa:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090ac:	4ad1      	ldr	r2, [pc, #836]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090ae:	68d1      	ldr	r1, [r2, #12]
100090b0:	2302      	movs	r3, #2
100090b2:	430b      	orrs	r3, r1
100090b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
100090b8:	e198      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090ba:	4ace      	ldr	r2, [pc, #824]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090bc:	68d1      	ldr	r1, [r2, #12]
100090be:	2304      	movs	r3, #4
100090c0:	430b      	orrs	r3, r1
100090c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
100090c6:	e191      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090c8:	4aca      	ldr	r2, [pc, #808]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090ca:	68d1      	ldr	r1, [r2, #12]
100090cc:	2308      	movs	r3, #8
100090ce:	430b      	orrs	r3, r1
100090d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
100090d4:	e18a      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090d6:	4ac7      	ldr	r2, [pc, #796]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090d8:	68d1      	ldr	r1, [r2, #12]
100090da:	2310      	movs	r3, #16
100090dc:	430b      	orrs	r3, r1
100090de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
100090e2:	e183      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090e4:	4ac3      	ldr	r2, [pc, #780]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090e6:	68d1      	ldr	r1, [r2, #12]
100090e8:	2320      	movs	r3, #32
100090ea:	430b      	orrs	r3, r1
100090ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
100090f0:	e17c      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100090f2:	4ac0      	ldr	r2, [pc, #768]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100090f4:	68d1      	ldr	r1, [r2, #12]
100090f6:	2380      	movs	r3, #128	; 0x80
100090f8:	430b      	orrs	r3, r1
100090fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
100090fe:	e175      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009100:	4abc      	ldr	r2, [pc, #752]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009102:	68d3      	ldr	r3, [r2, #12]
10009104:	2180      	movs	r1, #128	; 0x80
10009106:	0049      	lsls	r1, r1, #1
10009108:	430b      	orrs	r3, r1
1000910a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000910c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
1000910e:	e16d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009110:	4ab8      	ldr	r2, [pc, #736]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009112:	68d3      	ldr	r3, [r2, #12]
10009114:	2180      	movs	r1, #128	; 0x80
10009116:	0109      	lsls	r1, r1, #4
10009118:	430b      	orrs	r3, r1
1000911a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000911c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
1000911e:	e165      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009120:	4ab4      	ldr	r2, [pc, #720]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009122:	68d3      	ldr	r3, [r2, #12]
10009124:	2180      	movs	r1, #128	; 0x80
10009126:	0149      	lsls	r1, r1, #5
10009128:	430b      	orrs	r3, r1
1000912a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000912c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
1000912e:	e15d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009130:	4ab0      	ldr	r2, [pc, #704]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009132:	68d3      	ldr	r3, [r2, #12]
10009134:	2180      	movs	r1, #128	; 0x80
10009136:	0189      	lsls	r1, r1, #6
10009138:	430b      	orrs	r3, r1
1000913a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000913c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
1000913e:	e155      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009140:	4aac      	ldr	r2, [pc, #688]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009142:	68d3      	ldr	r3, [r2, #12]
10009144:	2180      	movs	r1, #128	; 0x80
10009146:	01c9      	lsls	r1, r1, #7
10009148:	430b      	orrs	r3, r1
1000914a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000914c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
1000914e:	e14d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009150:	4aa8      	ldr	r2, [pc, #672]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009152:	68d3      	ldr	r3, [r2, #12]
10009154:	2180      	movs	r1, #128	; 0x80
10009156:	0209      	lsls	r1, r1, #8
10009158:	430b      	orrs	r3, r1
1000915a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000915c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
1000915e:	e145      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009160:	4aa4      	ldr	r2, [pc, #656]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009162:	68d3      	ldr	r3, [r2, #12]
10009164:	2180      	movs	r1, #128	; 0x80
10009166:	0249      	lsls	r1, r1, #9
10009168:	430b      	orrs	r3, r1
1000916a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000916c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
1000916e:	e13d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009170:	4aa0      	ldr	r2, [pc, #640]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009172:	68d3      	ldr	r3, [r2, #12]
10009174:	2180      	movs	r1, #128	; 0x80
10009176:	0289      	lsls	r1, r1, #10
10009178:	430b      	orrs	r3, r1
1000917a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000917c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000917e:	e135      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009180:	4a9c      	ldr	r2, [pc, #624]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009182:	68d3      	ldr	r3, [r2, #12]
10009184:	2180      	movs	r1, #128	; 0x80
10009186:	02c9      	lsls	r1, r1, #11
10009188:	430b      	orrs	r3, r1
1000918a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000918c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000918e:	e12d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009190:	4a98      	ldr	r2, [pc, #608]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009192:	68d3      	ldr	r3, [r2, #12]
10009194:	2180      	movs	r1, #128	; 0x80
10009196:	0309      	lsls	r1, r1, #12
10009198:	430b      	orrs	r3, r1
1000919a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000919c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000919e:	e125      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091a0:	4a94      	ldr	r2, [pc, #592]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091a2:	68d3      	ldr	r3, [r2, #12]
100091a4:	2180      	movs	r1, #128	; 0x80
100091a6:	0349      	lsls	r1, r1, #13
100091a8:	430b      	orrs	r3, r1
100091aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100091ae:	e11d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091b0:	4a90      	ldr	r2, [pc, #576]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091b2:	68d3      	ldr	r3, [r2, #12]
100091b4:	2180      	movs	r1, #128	; 0x80
100091b6:	0389      	lsls	r1, r1, #14
100091b8:	430b      	orrs	r3, r1
100091ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
100091be:	e115      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091c0:	4a8c      	ldr	r2, [pc, #560]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091c2:	68d3      	ldr	r3, [r2, #12]
100091c4:	2180      	movs	r1, #128	; 0x80
100091c6:	03c9      	lsls	r1, r1, #15
100091c8:	430b      	orrs	r3, r1
100091ca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
100091ce:	e10d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091d0:	4a88      	ldr	r2, [pc, #544]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091d2:	68d3      	ldr	r3, [r2, #12]
100091d4:	2180      	movs	r1, #128	; 0x80
100091d6:	0409      	lsls	r1, r1, #16
100091d8:	430b      	orrs	r3, r1
100091da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
100091de:	e105      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091e0:	4a84      	ldr	r2, [pc, #528]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091e2:	68d3      	ldr	r3, [r2, #12]
100091e4:	2180      	movs	r1, #128	; 0x80
100091e6:	0449      	lsls	r1, r1, #17
100091e8:	430b      	orrs	r3, r1
100091ea:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
100091ee:	e0fd      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091f0:	4a80      	ldr	r2, [pc, #512]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100091f2:	68d3      	ldr	r3, [r2, #12]
100091f4:	2180      	movs	r1, #128	; 0x80
100091f6:	0489      	lsls	r1, r1, #18
100091f8:	430b      	orrs	r3, r1
100091fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
100091fe:	e0f5      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009200:	4a7c      	ldr	r2, [pc, #496]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009202:	68d3      	ldr	r3, [r2, #12]
10009204:	2180      	movs	r1, #128	; 0x80
10009206:	04c9      	lsls	r1, r1, #19
10009208:	430b      	orrs	r3, r1
1000920a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000920c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
1000920e:	e0ed      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009210:	4a78      	ldr	r2, [pc, #480]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009212:	68d3      	ldr	r3, [r2, #12]
10009214:	2180      	movs	r1, #128	; 0x80
10009216:	0509      	lsls	r1, r1, #20
10009218:	430b      	orrs	r3, r1
1000921a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000921c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
1000921e:	e0e5      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009220:	4a74      	ldr	r2, [pc, #464]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009222:	68d3      	ldr	r3, [r2, #12]
10009224:	2180      	movs	r1, #128	; 0x80
10009226:	0549      	lsls	r1, r1, #21
10009228:	430b      	orrs	r3, r1
1000922a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000922c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
1000922e:	e0dd      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009230:	4a70      	ldr	r2, [pc, #448]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009232:	68d3      	ldr	r3, [r2, #12]
10009234:	2180      	movs	r1, #128	; 0x80
10009236:	0589      	lsls	r1, r1, #22
10009238:	430b      	orrs	r3, r1
1000923a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000923c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
1000923e:	e0d5      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009240:	4a6c      	ldr	r2, [pc, #432]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009242:	68d3      	ldr	r3, [r2, #12]
10009244:	2180      	movs	r1, #128	; 0x80
10009246:	05c9      	lsls	r1, r1, #23
10009248:	430b      	orrs	r3, r1
1000924a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000924e:	e0cd      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009250:	4a68      	ldr	r2, [pc, #416]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009252:	6911      	ldr	r1, [r2, #16]
10009254:	2301      	movs	r3, #1
10009256:	430b      	orrs	r3, r1
10009258:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000925a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
1000925c:	e0c6      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000925e:	4a65      	ldr	r2, [pc, #404]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009260:	6911      	ldr	r1, [r2, #16]
10009262:	2302      	movs	r3, #2
10009264:	430b      	orrs	r3, r1
10009266:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
1000926a:	e0bf      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000926c:	4a61      	ldr	r2, [pc, #388]	; (100093f4 <system_clock_peripheral_enable+0x358>)
1000926e:	6911      	ldr	r1, [r2, #16]
10009270:	2304      	movs	r3, #4
10009272:	430b      	orrs	r3, r1
10009274:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009276:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10009278:	e0b8      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000927a:	4a5e      	ldr	r2, [pc, #376]	; (100093f4 <system_clock_peripheral_enable+0x358>)
1000927c:	6911      	ldr	r1, [r2, #16]
1000927e:	2308      	movs	r3, #8
10009280:	430b      	orrs	r3, r1
10009282:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009284:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10009286:	e0b1      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009288:	4a5a      	ldr	r2, [pc, #360]	; (100093f4 <system_clock_peripheral_enable+0x358>)
1000928a:	6911      	ldr	r1, [r2, #16]
1000928c:	2310      	movs	r3, #16
1000928e:	430b      	orrs	r3, r1
10009290:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009292:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10009294:	e0aa      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009296:	4a57      	ldr	r2, [pc, #348]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009298:	6911      	ldr	r1, [r2, #16]
1000929a:	2320      	movs	r3, #32
1000929c:	430b      	orrs	r3, r1
1000929e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
100092a2:	e0a3      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092a4:	4a53      	ldr	r2, [pc, #332]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092a6:	6911      	ldr	r1, [r2, #16]
100092a8:	2340      	movs	r3, #64	; 0x40
100092aa:	430b      	orrs	r3, r1
100092ac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
100092b0:	e09c      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092b2:	4a50      	ldr	r2, [pc, #320]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092b4:	6911      	ldr	r1, [r2, #16]
100092b6:	2380      	movs	r3, #128	; 0x80
100092b8:	430b      	orrs	r3, r1
100092ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
100092be:	e095      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092c0:	4a4c      	ldr	r2, [pc, #304]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092c2:	6913      	ldr	r3, [r2, #16]
100092c4:	2180      	movs	r1, #128	; 0x80
100092c6:	0049      	lsls	r1, r1, #1
100092c8:	430b      	orrs	r3, r1
100092ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
100092ce:	e08d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092d0:	4a48      	ldr	r2, [pc, #288]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092d2:	6913      	ldr	r3, [r2, #16]
100092d4:	2180      	movs	r1, #128	; 0x80
100092d6:	0089      	lsls	r1, r1, #2
100092d8:	430b      	orrs	r3, r1
100092da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
100092de:	e085      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092e0:	4a44      	ldr	r2, [pc, #272]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092e2:	6913      	ldr	r3, [r2, #16]
100092e4:	2180      	movs	r1, #128	; 0x80
100092e6:	00c9      	lsls	r1, r1, #3
100092e8:	430b      	orrs	r3, r1
100092ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
100092ee:	e07d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100092f0:	4a40      	ldr	r2, [pc, #256]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100092f2:	6913      	ldr	r3, [r2, #16]
100092f4:	2180      	movs	r1, #128	; 0x80
100092f6:	0109      	lsls	r1, r1, #4
100092f8:	430b      	orrs	r3, r1
100092fa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100092fe:	e075      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009300:	4a3c      	ldr	r2, [pc, #240]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009302:	6913      	ldr	r3, [r2, #16]
10009304:	2180      	movs	r1, #128	; 0x80
10009306:	0149      	lsls	r1, r1, #5
10009308:	430b      	orrs	r3, r1
1000930a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000930c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000930e:	e06d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009310:	4a38      	ldr	r2, [pc, #224]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009312:	6913      	ldr	r3, [r2, #16]
10009314:	2180      	movs	r1, #128	; 0x80
10009316:	0189      	lsls	r1, r1, #6
10009318:	430b      	orrs	r3, r1
1000931a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000931c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000931e:	e065      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009320:	4a34      	ldr	r2, [pc, #208]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009322:	6913      	ldr	r3, [r2, #16]
10009324:	2180      	movs	r1, #128	; 0x80
10009326:	01c9      	lsls	r1, r1, #7
10009328:	430b      	orrs	r3, r1
1000932a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000932c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
1000932e:	e05d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009330:	4a30      	ldr	r2, [pc, #192]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009332:	6913      	ldr	r3, [r2, #16]
10009334:	2180      	movs	r1, #128	; 0x80
10009336:	0209      	lsls	r1, r1, #8
10009338:	430b      	orrs	r3, r1
1000933a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000933c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000933e:	e055      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009340:	4a2c      	ldr	r2, [pc, #176]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009342:	6913      	ldr	r3, [r2, #16]
10009344:	2180      	movs	r1, #128	; 0x80
10009346:	0249      	lsls	r1, r1, #9
10009348:	430b      	orrs	r3, r1
1000934a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000934c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000934e:	e04d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009350:	4a28      	ldr	r2, [pc, #160]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009352:	6913      	ldr	r3, [r2, #16]
10009354:	2180      	movs	r1, #128	; 0x80
10009356:	0289      	lsls	r1, r1, #10
10009358:	430b      	orrs	r3, r1
1000935a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000935c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000935e:	e045      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009360:	4a24      	ldr	r2, [pc, #144]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009362:	6913      	ldr	r3, [r2, #16]
10009364:	2180      	movs	r1, #128	; 0x80
10009366:	02c9      	lsls	r1, r1, #11
10009368:	430b      	orrs	r3, r1
1000936a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000936c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000936e:	e03d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009370:	4a20      	ldr	r2, [pc, #128]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009372:	6913      	ldr	r3, [r2, #16]
10009374:	2180      	movs	r1, #128	; 0x80
10009376:	0309      	lsls	r1, r1, #12
10009378:	430b      	orrs	r3, r1
1000937a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000937c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000937e:	e035      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009380:	4a1c      	ldr	r2, [pc, #112]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009382:	6913      	ldr	r3, [r2, #16]
10009384:	2180      	movs	r1, #128	; 0x80
10009386:	0349      	lsls	r1, r1, #13
10009388:	430b      	orrs	r3, r1
1000938a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000938c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000938e:	e02d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009390:	4a18      	ldr	r2, [pc, #96]	; (100093f4 <system_clock_peripheral_enable+0x358>)
10009392:	6913      	ldr	r3, [r2, #16]
10009394:	2180      	movs	r1, #128	; 0x80
10009396:	0389      	lsls	r1, r1, #14
10009398:	430b      	orrs	r3, r1
1000939a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000939c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000939e:	e025      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093a0:	4a14      	ldr	r2, [pc, #80]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100093a2:	6913      	ldr	r3, [r2, #16]
100093a4:	2180      	movs	r1, #128	; 0x80
100093a6:	03c9      	lsls	r1, r1, #15
100093a8:	430b      	orrs	r3, r1
100093aa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100093ae:	e01d      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093b0:	4a10      	ldr	r2, [pc, #64]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100093b2:	6913      	ldr	r3, [r2, #16]
100093b4:	2180      	movs	r1, #128	; 0x80
100093b6:	0409      	lsls	r1, r1, #16
100093b8:	430b      	orrs	r3, r1
100093ba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
100093be:	e015      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
100093c0:	4a0c      	ldr	r2, [pc, #48]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100093c2:	7d11      	ldrb	r1, [r2, #20]
100093c4:	2301      	movs	r3, #1
100093c6:	430b      	orrs	r3, r1
100093c8:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
100093cc:	e00e      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
100093ce:	4a09      	ldr	r2, [pc, #36]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100093d0:	7d11      	ldrb	r1, [r2, #20]
100093d2:	2302      	movs	r3, #2
100093d4:	430b      	orrs	r3, r1
100093d6:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
100093da:	e007      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
100093dc:	4a05      	ldr	r2, [pc, #20]	; (100093f4 <system_clock_peripheral_enable+0x358>)
100093de:	7d11      	ldrb	r1, [r2, #20]
100093e0:	2304      	movs	r3, #4
100093e2:	430b      	orrs	r3, r1
100093e4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
100093e8:	e000      	b.n	100093ec <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
100093ea:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100093ec:	bd00      	pop	{pc}
100093ee:	46c0      	nop			; (mov r8, r8)
100093f0:	100143c0 	.word	0x100143c0
100093f4:	4000b000 	.word	0x4000b000

100093f8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
100093f8:	b500      	push	{lr}
	switch (peripheral) {
100093fa:	2843      	cmp	r0, #67	; 0x43
100093fc:	d900      	bls.n	10009400 <system_peripheral_reset+0x8>
100093fe:	e223      	b.n	10009848 <system_peripheral_reset+0x450>
10009400:	0080      	lsls	r0, r0, #2
10009402:	4be0      	ldr	r3, [pc, #896]	; (10009784 <system_peripheral_reset+0x38c>)
10009404:	581b      	ldr	r3, [r3, r0]
10009406:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009408:	4bdf      	ldr	r3, [pc, #892]	; (10009788 <system_peripheral_reset+0x390>)
1000940a:	6859      	ldr	r1, [r3, #4]
1000940c:	2202      	movs	r2, #2
1000940e:	4391      	bics	r1, r2
10009410:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009412:	6859      	ldr	r1, [r3, #4]
10009414:	430a      	orrs	r2, r1
10009416:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009418:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000941a:	e216      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000941c:	4bda      	ldr	r3, [pc, #872]	; (10009788 <system_peripheral_reset+0x390>)
1000941e:	6859      	ldr	r1, [r3, #4]
10009420:	2204      	movs	r2, #4
10009422:	4391      	bics	r1, r2
10009424:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009426:	6859      	ldr	r1, [r3, #4]
10009428:	430a      	orrs	r2, r1
1000942a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000942c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
1000942e:	e20c      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009430:	4bd5      	ldr	r3, [pc, #852]	; (10009788 <system_peripheral_reset+0x390>)
10009432:	6859      	ldr	r1, [r3, #4]
10009434:	2208      	movs	r2, #8
10009436:	4391      	bics	r1, r2
10009438:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000943a:	6859      	ldr	r1, [r3, #4]
1000943c:	430a      	orrs	r2, r1
1000943e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009440:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
10009442:	e202      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009444:	4bd0      	ldr	r3, [pc, #832]	; (10009788 <system_peripheral_reset+0x390>)
10009446:	6859      	ldr	r1, [r3, #4]
10009448:	2210      	movs	r2, #16
1000944a:	4391      	bics	r1, r2
1000944c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000944e:	6859      	ldr	r1, [r3, #4]
10009450:	430a      	orrs	r2, r1
10009452:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009454:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10009456:	e1f8      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009458:	4bcb      	ldr	r3, [pc, #812]	; (10009788 <system_peripheral_reset+0x390>)
1000945a:	6859      	ldr	r1, [r3, #4]
1000945c:	2220      	movs	r2, #32
1000945e:	4391      	bics	r1, r2
10009460:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009462:	6859      	ldr	r1, [r3, #4]
10009464:	430a      	orrs	r2, r1
10009466:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009468:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
1000946a:	e1ee      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000946c:	4bc6      	ldr	r3, [pc, #792]	; (10009788 <system_peripheral_reset+0x390>)
1000946e:	6859      	ldr	r1, [r3, #4]
10009470:	2240      	movs	r2, #64	; 0x40
10009472:	4391      	bics	r1, r2
10009474:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009476:	6859      	ldr	r1, [r3, #4]
10009478:	430a      	orrs	r2, r1
1000947a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000947c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000947e:	e1e4      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009480:	4bc1      	ldr	r3, [pc, #772]	; (10009788 <system_peripheral_reset+0x390>)
10009482:	6859      	ldr	r1, [r3, #4]
10009484:	2280      	movs	r2, #128	; 0x80
10009486:	4391      	bics	r1, r2
10009488:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000948a:	6859      	ldr	r1, [r3, #4]
1000948c:	430a      	orrs	r2, r1
1000948e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009490:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10009492:	e1da      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009494:	4bbc      	ldr	r3, [pc, #752]	; (10009788 <system_peripheral_reset+0x390>)
10009496:	6859      	ldr	r1, [r3, #4]
10009498:	4abc      	ldr	r2, [pc, #752]	; (1000978c <system_peripheral_reset+0x394>)
1000949a:	400a      	ands	r2, r1
1000949c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000949e:	685a      	ldr	r2, [r3, #4]
100094a0:	2180      	movs	r1, #128	; 0x80
100094a2:	0049      	lsls	r1, r1, #1
100094a4:	430a      	orrs	r2, r1
100094a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
100094aa:	e1ce      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100094ac:	4bb6      	ldr	r3, [pc, #728]	; (10009788 <system_peripheral_reset+0x390>)
100094ae:	6859      	ldr	r1, [r3, #4]
100094b0:	4ab7      	ldr	r2, [pc, #732]	; (10009790 <system_peripheral_reset+0x398>)
100094b2:	400a      	ands	r2, r1
100094b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100094b6:	685a      	ldr	r2, [r3, #4]
100094b8:	2180      	movs	r1, #128	; 0x80
100094ba:	0089      	lsls	r1, r1, #2
100094bc:	430a      	orrs	r2, r1
100094be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
100094c2:	e1c2      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100094c4:	4bb0      	ldr	r3, [pc, #704]	; (10009788 <system_peripheral_reset+0x390>)
100094c6:	6859      	ldr	r1, [r3, #4]
100094c8:	4ab2      	ldr	r2, [pc, #712]	; (10009794 <system_peripheral_reset+0x39c>)
100094ca:	400a      	ands	r2, r1
100094cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100094ce:	685a      	ldr	r2, [r3, #4]
100094d0:	2180      	movs	r1, #128	; 0x80
100094d2:	00c9      	lsls	r1, r1, #3
100094d4:	430a      	orrs	r2, r1
100094d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
100094da:	e1b6      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100094dc:	4baa      	ldr	r3, [pc, #680]	; (10009788 <system_peripheral_reset+0x390>)
100094de:	6859      	ldr	r1, [r3, #4]
100094e0:	4aad      	ldr	r2, [pc, #692]	; (10009798 <system_peripheral_reset+0x3a0>)
100094e2:	400a      	ands	r2, r1
100094e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100094e6:	685a      	ldr	r2, [r3, #4]
100094e8:	2180      	movs	r1, #128	; 0x80
100094ea:	0109      	lsls	r1, r1, #4
100094ec:	430a      	orrs	r2, r1
100094ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
100094f2:	e1aa      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100094f4:	4ba4      	ldr	r3, [pc, #656]	; (10009788 <system_peripheral_reset+0x390>)
100094f6:	6859      	ldr	r1, [r3, #4]
100094f8:	4aa8      	ldr	r2, [pc, #672]	; (1000979c <system_peripheral_reset+0x3a4>)
100094fa:	400a      	ands	r2, r1
100094fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100094fe:	685a      	ldr	r2, [r3, #4]
10009500:	2180      	movs	r1, #128	; 0x80
10009502:	0149      	lsls	r1, r1, #5
10009504:	430a      	orrs	r2, r1
10009506:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009508:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000950a:	e19e      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000950c:	4b9e      	ldr	r3, [pc, #632]	; (10009788 <system_peripheral_reset+0x390>)
1000950e:	6859      	ldr	r1, [r3, #4]
10009510:	4aa3      	ldr	r2, [pc, #652]	; (100097a0 <system_peripheral_reset+0x3a8>)
10009512:	400a      	ands	r2, r1
10009514:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009516:	685a      	ldr	r2, [r3, #4]
10009518:	2180      	movs	r1, #128	; 0x80
1000951a:	0189      	lsls	r1, r1, #6
1000951c:	430a      	orrs	r2, r1
1000951e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009520:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10009522:	e192      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009524:	4b98      	ldr	r3, [pc, #608]	; (10009788 <system_peripheral_reset+0x390>)
10009526:	6859      	ldr	r1, [r3, #4]
10009528:	4a9e      	ldr	r2, [pc, #632]	; (100097a4 <system_peripheral_reset+0x3ac>)
1000952a:	400a      	ands	r2, r1
1000952c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000952e:	685a      	ldr	r2, [r3, #4]
10009530:	2180      	movs	r1, #128	; 0x80
10009532:	01c9      	lsls	r1, r1, #7
10009534:	430a      	orrs	r2, r1
10009536:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009538:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
1000953a:	e186      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000953c:	4b92      	ldr	r3, [pc, #584]	; (10009788 <system_peripheral_reset+0x390>)
1000953e:	6859      	ldr	r1, [r3, #4]
10009540:	4a99      	ldr	r2, [pc, #612]	; (100097a8 <system_peripheral_reset+0x3b0>)
10009542:	400a      	ands	r2, r1
10009544:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009546:	685a      	ldr	r2, [r3, #4]
10009548:	2180      	movs	r1, #128	; 0x80
1000954a:	0209      	lsls	r1, r1, #8
1000954c:	430a      	orrs	r2, r1
1000954e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009550:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
10009552:	e17a      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009554:	4b8c      	ldr	r3, [pc, #560]	; (10009788 <system_peripheral_reset+0x390>)
10009556:	6859      	ldr	r1, [r3, #4]
10009558:	4a94      	ldr	r2, [pc, #592]	; (100097ac <system_peripheral_reset+0x3b4>)
1000955a:	400a      	ands	r2, r1
1000955c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000955e:	685a      	ldr	r2, [r3, #4]
10009560:	2180      	movs	r1, #128	; 0x80
10009562:	0249      	lsls	r1, r1, #9
10009564:	430a      	orrs	r2, r1
10009566:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009568:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
1000956a:	e16e      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000956c:	4b86      	ldr	r3, [pc, #536]	; (10009788 <system_peripheral_reset+0x390>)
1000956e:	6859      	ldr	r1, [r3, #4]
10009570:	4a8f      	ldr	r2, [pc, #572]	; (100097b0 <system_peripheral_reset+0x3b8>)
10009572:	400a      	ands	r2, r1
10009574:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009576:	685a      	ldr	r2, [r3, #4]
10009578:	2180      	movs	r1, #128	; 0x80
1000957a:	0289      	lsls	r1, r1, #10
1000957c:	430a      	orrs	r2, r1
1000957e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009580:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
10009582:	e162      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009584:	4b80      	ldr	r3, [pc, #512]	; (10009788 <system_peripheral_reset+0x390>)
10009586:	6859      	ldr	r1, [r3, #4]
10009588:	4a8a      	ldr	r2, [pc, #552]	; (100097b4 <system_peripheral_reset+0x3bc>)
1000958a:	400a      	ands	r2, r1
1000958c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000958e:	685a      	ldr	r2, [r3, #4]
10009590:	2180      	movs	r1, #128	; 0x80
10009592:	02c9      	lsls	r1, r1, #11
10009594:	430a      	orrs	r2, r1
10009596:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009598:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000959a:	e156      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000959c:	4b7a      	ldr	r3, [pc, #488]	; (10009788 <system_peripheral_reset+0x390>)
1000959e:	6859      	ldr	r1, [r3, #4]
100095a0:	4a85      	ldr	r2, [pc, #532]	; (100097b8 <system_peripheral_reset+0x3c0>)
100095a2:	400a      	ands	r2, r1
100095a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095a6:	685a      	ldr	r2, [r3, #4]
100095a8:	2180      	movs	r1, #128	; 0x80
100095aa:	0309      	lsls	r1, r1, #12
100095ac:	430a      	orrs	r2, r1
100095ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100095b2:	e14a      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095b4:	4b74      	ldr	r3, [pc, #464]	; (10009788 <system_peripheral_reset+0x390>)
100095b6:	6859      	ldr	r1, [r3, #4]
100095b8:	4a80      	ldr	r2, [pc, #512]	; (100097bc <system_peripheral_reset+0x3c4>)
100095ba:	400a      	ands	r2, r1
100095bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095be:	685a      	ldr	r2, [r3, #4]
100095c0:	2180      	movs	r1, #128	; 0x80
100095c2:	0349      	lsls	r1, r1, #13
100095c4:	430a      	orrs	r2, r1
100095c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
100095ca:	e13e      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095cc:	4b6e      	ldr	r3, [pc, #440]	; (10009788 <system_peripheral_reset+0x390>)
100095ce:	6859      	ldr	r1, [r3, #4]
100095d0:	4a7b      	ldr	r2, [pc, #492]	; (100097c0 <system_peripheral_reset+0x3c8>)
100095d2:	400a      	ands	r2, r1
100095d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095d6:	685a      	ldr	r2, [r3, #4]
100095d8:	2180      	movs	r1, #128	; 0x80
100095da:	0389      	lsls	r1, r1, #14
100095dc:	430a      	orrs	r2, r1
100095de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095e0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
100095e2:	e132      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095e4:	4b68      	ldr	r3, [pc, #416]	; (10009788 <system_peripheral_reset+0x390>)
100095e6:	6859      	ldr	r1, [r3, #4]
100095e8:	4a76      	ldr	r2, [pc, #472]	; (100097c4 <system_peripheral_reset+0x3cc>)
100095ea:	400a      	ands	r2, r1
100095ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095ee:	685a      	ldr	r2, [r3, #4]
100095f0:	2180      	movs	r1, #128	; 0x80
100095f2:	03c9      	lsls	r1, r1, #15
100095f4:	430a      	orrs	r2, r1
100095f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
100095fa:	e126      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095fc:	4b62      	ldr	r3, [pc, #392]	; (10009788 <system_peripheral_reset+0x390>)
100095fe:	6859      	ldr	r1, [r3, #4]
10009600:	4a71      	ldr	r2, [pc, #452]	; (100097c8 <system_peripheral_reset+0x3d0>)
10009602:	400a      	ands	r2, r1
10009604:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009606:	685a      	ldr	r2, [r3, #4]
10009608:	2180      	movs	r1, #128	; 0x80
1000960a:	0409      	lsls	r1, r1, #16
1000960c:	430a      	orrs	r2, r1
1000960e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009610:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009612:	e11a      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009614:	4b5c      	ldr	r3, [pc, #368]	; (10009788 <system_peripheral_reset+0x390>)
10009616:	6859      	ldr	r1, [r3, #4]
10009618:	4a6c      	ldr	r2, [pc, #432]	; (100097cc <system_peripheral_reset+0x3d4>)
1000961a:	400a      	ands	r2, r1
1000961c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000961e:	685a      	ldr	r2, [r3, #4]
10009620:	2180      	movs	r1, #128	; 0x80
10009622:	0449      	lsls	r1, r1, #17
10009624:	430a      	orrs	r2, r1
10009626:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009628:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000962a:	e10e      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000962c:	4b56      	ldr	r3, [pc, #344]	; (10009788 <system_peripheral_reset+0x390>)
1000962e:	6859      	ldr	r1, [r3, #4]
10009630:	4a67      	ldr	r2, [pc, #412]	; (100097d0 <system_peripheral_reset+0x3d8>)
10009632:	400a      	ands	r2, r1
10009634:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009636:	685a      	ldr	r2, [r3, #4]
10009638:	2180      	movs	r1, #128	; 0x80
1000963a:	0489      	lsls	r1, r1, #18
1000963c:	430a      	orrs	r2, r1
1000963e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009640:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
10009642:	e102      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009644:	4b50      	ldr	r3, [pc, #320]	; (10009788 <system_peripheral_reset+0x390>)
10009646:	6859      	ldr	r1, [r3, #4]
10009648:	4a62      	ldr	r2, [pc, #392]	; (100097d4 <system_peripheral_reset+0x3dc>)
1000964a:	400a      	ands	r2, r1
1000964c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000964e:	685a      	ldr	r2, [r3, #4]
10009650:	2180      	movs	r1, #128	; 0x80
10009652:	04c9      	lsls	r1, r1, #19
10009654:	430a      	orrs	r2, r1
10009656:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009658:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
1000965a:	e0f6      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000965c:	4b4a      	ldr	r3, [pc, #296]	; (10009788 <system_peripheral_reset+0x390>)
1000965e:	6859      	ldr	r1, [r3, #4]
10009660:	4a5d      	ldr	r2, [pc, #372]	; (100097d8 <system_peripheral_reset+0x3e0>)
10009662:	400a      	ands	r2, r1
10009664:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009666:	685a      	ldr	r2, [r3, #4]
10009668:	2180      	movs	r1, #128	; 0x80
1000966a:	0509      	lsls	r1, r1, #20
1000966c:	430a      	orrs	r2, r1
1000966e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009670:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
10009672:	e0ea      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009674:	4b44      	ldr	r3, [pc, #272]	; (10009788 <system_peripheral_reset+0x390>)
10009676:	6859      	ldr	r1, [r3, #4]
10009678:	4a58      	ldr	r2, [pc, #352]	; (100097dc <system_peripheral_reset+0x3e4>)
1000967a:	400a      	ands	r2, r1
1000967c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000967e:	685a      	ldr	r2, [r3, #4]
10009680:	2180      	movs	r1, #128	; 0x80
10009682:	0549      	lsls	r1, r1, #21
10009684:	430a      	orrs	r2, r1
10009686:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009688:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
1000968a:	e0de      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000968c:	4b3e      	ldr	r3, [pc, #248]	; (10009788 <system_peripheral_reset+0x390>)
1000968e:	6859      	ldr	r1, [r3, #4]
10009690:	4a53      	ldr	r2, [pc, #332]	; (100097e0 <system_peripheral_reset+0x3e8>)
10009692:	400a      	ands	r2, r1
10009694:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009696:	685a      	ldr	r2, [r3, #4]
10009698:	2180      	movs	r1, #128	; 0x80
1000969a:	0589      	lsls	r1, r1, #22
1000969c:	430a      	orrs	r2, r1
1000969e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096a0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
100096a2:	e0d2      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096a4:	4b38      	ldr	r3, [pc, #224]	; (10009788 <system_peripheral_reset+0x390>)
100096a6:	6859      	ldr	r1, [r3, #4]
100096a8:	4a4e      	ldr	r2, [pc, #312]	; (100097e4 <system_peripheral_reset+0x3ec>)
100096aa:	400a      	ands	r2, r1
100096ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096ae:	685a      	ldr	r2, [r3, #4]
100096b0:	2180      	movs	r1, #128	; 0x80
100096b2:	05c9      	lsls	r1, r1, #23
100096b4:	430a      	orrs	r2, r1
100096b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
100096ba:	e0c6      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096bc:	4a32      	ldr	r2, [pc, #200]	; (10009788 <system_peripheral_reset+0x390>)
100096be:	6853      	ldr	r3, [r2, #4]
100096c0:	005b      	lsls	r3, r3, #1
100096c2:	085b      	lsrs	r3, r3, #1
100096c4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096c6:	6853      	ldr	r3, [r2, #4]
100096c8:	2180      	movs	r1, #128	; 0x80
100096ca:	0609      	lsls	r1, r1, #24
100096cc:	430b      	orrs	r3, r1
100096ce:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096d0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
100096d2:	e0ba      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100096d4:	4b2c      	ldr	r3, [pc, #176]	; (10009788 <system_peripheral_reset+0x390>)
100096d6:	891a      	ldrh	r2, [r3, #8]
100096d8:	2101      	movs	r1, #1
100096da:	438a      	bics	r2, r1
100096dc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100096de:	8919      	ldrh	r1, [r3, #8]
100096e0:	2201      	movs	r2, #1
100096e2:	430a      	orrs	r2, r1
100096e4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
100096e8:	e0af      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100096ea:	4b27      	ldr	r3, [pc, #156]	; (10009788 <system_peripheral_reset+0x390>)
100096ec:	891a      	ldrh	r2, [r3, #8]
100096ee:	2102      	movs	r1, #2
100096f0:	438a      	bics	r2, r1
100096f2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100096f4:	8919      	ldrh	r1, [r3, #8]
100096f6:	2202      	movs	r2, #2
100096f8:	430a      	orrs	r2, r1
100096fa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096fc:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
100096fe:	e0a4      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009700:	4b21      	ldr	r3, [pc, #132]	; (10009788 <system_peripheral_reset+0x390>)
10009702:	891a      	ldrh	r2, [r3, #8]
10009704:	2104      	movs	r1, #4
10009706:	438a      	bics	r2, r1
10009708:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000970a:	8919      	ldrh	r1, [r3, #8]
1000970c:	2204      	movs	r2, #4
1000970e:	430a      	orrs	r2, r1
10009710:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009712:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10009714:	e099      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009716:	4b1c      	ldr	r3, [pc, #112]	; (10009788 <system_peripheral_reset+0x390>)
10009718:	891a      	ldrh	r2, [r3, #8]
1000971a:	2108      	movs	r1, #8
1000971c:	438a      	bics	r2, r1
1000971e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009720:	8919      	ldrh	r1, [r3, #8]
10009722:	2208      	movs	r2, #8
10009724:	430a      	orrs	r2, r1
10009726:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009728:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000972a:	e08e      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000972c:	4b16      	ldr	r3, [pc, #88]	; (10009788 <system_peripheral_reset+0x390>)
1000972e:	891a      	ldrh	r2, [r3, #8]
10009730:	2110      	movs	r1, #16
10009732:	438a      	bics	r2, r1
10009734:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009736:	8919      	ldrh	r1, [r3, #8]
10009738:	2210      	movs	r2, #16
1000973a:	430a      	orrs	r2, r1
1000973c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000973e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009740:	e083      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009742:	4b11      	ldr	r3, [pc, #68]	; (10009788 <system_peripheral_reset+0x390>)
10009744:	891a      	ldrh	r2, [r3, #8]
10009746:	2120      	movs	r1, #32
10009748:	438a      	bics	r2, r1
1000974a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000974c:	8919      	ldrh	r1, [r3, #8]
1000974e:	2220      	movs	r2, #32
10009750:	430a      	orrs	r2, r1
10009752:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009754:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009756:	e078      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009758:	4b0b      	ldr	r3, [pc, #44]	; (10009788 <system_peripheral_reset+0x390>)
1000975a:	891a      	ldrh	r2, [r3, #8]
1000975c:	2140      	movs	r1, #64	; 0x40
1000975e:	438a      	bics	r2, r1
10009760:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009762:	8919      	ldrh	r1, [r3, #8]
10009764:	2240      	movs	r2, #64	; 0x40
10009766:	430a      	orrs	r2, r1
10009768:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000976a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000976c:	e06d      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000976e:	4b06      	ldr	r3, [pc, #24]	; (10009788 <system_peripheral_reset+0x390>)
10009770:	891a      	ldrh	r2, [r3, #8]
10009772:	2180      	movs	r1, #128	; 0x80
10009774:	438a      	bics	r2, r1
10009776:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009778:	8919      	ldrh	r1, [r3, #8]
1000977a:	2280      	movs	r2, #128	; 0x80
1000977c:	430a      	orrs	r2, r1
1000977e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009780:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
10009782:	e062      	b.n	1000984a <system_peripheral_reset+0x452>
10009784:	10014498 	.word	0x10014498
10009788:	4000b000 	.word	0x4000b000
1000978c:	fffffeff 	.word	0xfffffeff
10009790:	fffffdff 	.word	0xfffffdff
10009794:	fffffbff 	.word	0xfffffbff
10009798:	fffff7ff 	.word	0xfffff7ff
1000979c:	ffffefff 	.word	0xffffefff
100097a0:	ffffdfff 	.word	0xffffdfff
100097a4:	ffffbfff 	.word	0xffffbfff
100097a8:	ffff7fff 	.word	0xffff7fff
100097ac:	fffeffff 	.word	0xfffeffff
100097b0:	fffdffff 	.word	0xfffdffff
100097b4:	fffbffff 	.word	0xfffbffff
100097b8:	fff7ffff 	.word	0xfff7ffff
100097bc:	ffefffff 	.word	0xffefffff
100097c0:	ffdfffff 	.word	0xffdfffff
100097c4:	ffbfffff 	.word	0xffbfffff
100097c8:	ff7fffff 	.word	0xff7fffff
100097cc:	feffffff 	.word	0xfeffffff
100097d0:	fdffffff 	.word	0xfdffffff
100097d4:	fbffffff 	.word	0xfbffffff
100097d8:	f7ffffff 	.word	0xf7ffffff
100097dc:	efffffff 	.word	0xefffffff
100097e0:	dfffffff 	.word	0xdfffffff
100097e4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100097e8:	4b18      	ldr	r3, [pc, #96]	; (1000984c <system_peripheral_reset+0x454>)
100097ea:	8919      	ldrh	r1, [r3, #8]
100097ec:	4a18      	ldr	r2, [pc, #96]	; (10009850 <system_peripheral_reset+0x458>)
100097ee:	400a      	ands	r2, r1
100097f0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100097f2:	8919      	ldrh	r1, [r3, #8]
100097f4:	2280      	movs	r2, #128	; 0x80
100097f6:	0052      	lsls	r2, r2, #1
100097f8:	430a      	orrs	r2, r1
100097fa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097fc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
100097fe:	e024      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009800:	4b12      	ldr	r3, [pc, #72]	; (1000984c <system_peripheral_reset+0x454>)
10009802:	8919      	ldrh	r1, [r3, #8]
10009804:	4a13      	ldr	r2, [pc, #76]	; (10009854 <system_peripheral_reset+0x45c>)
10009806:	400a      	ands	r2, r1
10009808:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000980a:	8919      	ldrh	r1, [r3, #8]
1000980c:	2280      	movs	r2, #128	; 0x80
1000980e:	0092      	lsls	r2, r2, #2
10009810:	430a      	orrs	r2, r1
10009812:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009814:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
10009816:	e018      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009818:	4b0c      	ldr	r3, [pc, #48]	; (1000984c <system_peripheral_reset+0x454>)
1000981a:	8919      	ldrh	r1, [r3, #8]
1000981c:	4a0e      	ldr	r2, [pc, #56]	; (10009858 <system_peripheral_reset+0x460>)
1000981e:	400a      	ands	r2, r1
10009820:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009822:	8919      	ldrh	r1, [r3, #8]
10009824:	2280      	movs	r2, #128	; 0x80
10009826:	00d2      	lsls	r2, r2, #3
10009828:	430a      	orrs	r2, r1
1000982a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000982e:	e00c      	b.n	1000984a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009830:	4b06      	ldr	r3, [pc, #24]	; (1000984c <system_peripheral_reset+0x454>)
10009832:	8919      	ldrh	r1, [r3, #8]
10009834:	4a09      	ldr	r2, [pc, #36]	; (1000985c <system_peripheral_reset+0x464>)
10009836:	400a      	ands	r2, r1
10009838:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000983a:	8919      	ldrh	r1, [r3, #8]
1000983c:	2280      	movs	r2, #128	; 0x80
1000983e:	0112      	lsls	r2, r2, #4
10009840:	430a      	orrs	r2, r1
10009842:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009844:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
10009846:	e000      	b.n	1000984a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009848:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000984a:	bd00      	pop	{pc}
1000984c:	4000b000 	.word	0x4000b000
10009850:	fffffeff 	.word	0xfffffeff
10009854:	fffffdff 	.word	0xfffffdff
10009858:	fffffbff 	.word	0xfffffbff
1000985c:	fffff7ff 	.word	0xfffff7ff

10009860 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
10009860:	2380      	movs	r3, #128	; 0x80
10009862:	04db      	lsls	r3, r3, #19
10009864:	469c      	mov	ip, r3
10009866:	4460      	add	r0, ip
10009868:	0080      	lsls	r0, r0, #2
1000986a:	6001      	str	r1, [r0, #0]
}
1000986c:	4770      	bx	lr
1000986e:	46c0      	nop			; (mov r8, r8)

10009870 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
10009870:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009872:	4b20      	ldr	r3, [pc, #128]	; (100098f4 <uart_rx0_isr_handler+0x84>)
10009874:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009876:	6823      	ldr	r3, [r4, #0]
10009878:	7d1d      	ldrb	r5, [r3, #20]
1000987a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000987c:	066a      	lsls	r2, r5, #25
1000987e:	d513      	bpl.n	100098a8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009880:	211e      	movs	r1, #30
10009882:	2222      	movs	r2, #34	; 0x22
10009884:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009886:	7e1a      	ldrb	r2, [r3, #24]
10009888:	3123      	adds	r1, #35	; 0x23
1000988a:	438a      	bics	r2, r1
1000988c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000988e:	2321      	movs	r3, #33	; 0x21
10009890:	5ce3      	ldrb	r3, [r4, r3]
10009892:	071b      	lsls	r3, r3, #28
10009894:	d506      	bpl.n	100098a4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009896:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009898:	5ce3      	ldrb	r3, [r4, r3]
1000989a:	071b      	lsls	r3, r3, #28
1000989c:	d502      	bpl.n	100098a4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000989e:	0020      	movs	r0, r4
100098a0:	6923      	ldr	r3, [r4, #16]
100098a2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100098a4:	6823      	ldr	r3, [r4, #0]
100098a6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100098a8:	07eb      	lsls	r3, r5, #31
100098aa:	d522      	bpl.n	100098f2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100098ac:	6823      	ldr	r3, [r4, #0]
100098ae:	7c1b      	ldrb	r3, [r3, #16]
100098b0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100098b2:	6962      	ldr	r2, [r4, #20]
100098b4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100098b6:	6963      	ldr	r3, [r4, #20]
100098b8:	3301      	adds	r3, #1
100098ba:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100098bc:	8ba3      	ldrh	r3, [r4, #28]
100098be:	3b01      	subs	r3, #1
100098c0:	b29b      	uxth	r3, r3
100098c2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100098c4:	8ba3      	ldrh	r3, [r4, #28]
100098c6:	b29b      	uxth	r3, r3
100098c8:	2b00      	cmp	r3, #0
100098ca:	d112      	bne.n	100098f2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100098cc:	3321      	adds	r3, #33	; 0x21
100098ce:	5ce3      	ldrb	r3, [r4, r3]
100098d0:	075b      	lsls	r3, r3, #29
100098d2:	d50e      	bpl.n	100098f2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100098d4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100098d6:	5ce3      	ldrb	r3, [r4, r3]
100098d8:	075b      	lsls	r3, r3, #29
100098da:	d50a      	bpl.n	100098f2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100098dc:	2200      	movs	r2, #0
100098de:	2322      	movs	r3, #34	; 0x22
100098e0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100098e2:	6822      	ldr	r2, [r4, #0]
100098e4:	7e13      	ldrb	r3, [r2, #24]
100098e6:	2101      	movs	r1, #1
100098e8:	438b      	bics	r3, r1
100098ea:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100098ec:	68e3      	ldr	r3, [r4, #12]
100098ee:	0020      	movs	r0, r4
100098f0:	4798      	blx	r3
			}
		}
	}
}
100098f2:	bd70      	pop	{r4, r5, r6, pc}
100098f4:	10016f04 	.word	0x10016f04

100098f8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
100098f8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100098fa:	4b21      	ldr	r3, [pc, #132]	; (10009980 <uart_tx0_isr_handler+0x88>)
100098fc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100098fe:	6823      	ldr	r3, [r4, #0]
10009900:	791d      	ldrb	r5, [r3, #4]
10009902:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009904:	07ea      	lsls	r2, r5, #31
10009906:	d517      	bpl.n	10009938 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009908:	69a2      	ldr	r2, [r4, #24]
1000990a:	7811      	ldrb	r1, [r2, #0]
1000990c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000990e:	3201      	adds	r2, #1
10009910:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009912:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009914:	8be3      	ldrh	r3, [r4, #30]
10009916:	3b01      	subs	r3, #1
10009918:	b29b      	uxth	r3, r3
1000991a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000991c:	8be3      	ldrh	r3, [r4, #30]
1000991e:	b29b      	uxth	r3, r3
10009920:	2b00      	cmp	r3, #0
10009922:	d109      	bne.n	10009938 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009924:	6822      	ldr	r2, [r4, #0]
10009926:	7a13      	ldrb	r3, [r2, #8]
10009928:	2101      	movs	r1, #1
1000992a:	438b      	bics	r3, r1
1000992c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000992e:	6822      	ldr	r2, [r4, #0]
10009930:	7a11      	ldrb	r1, [r2, #8]
10009932:	2310      	movs	r3, #16
10009934:	430b      	orrs	r3, r1
10009936:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009938:	06eb      	lsls	r3, r5, #27
1000993a:	d512      	bpl.n	10009962 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000993c:	2321      	movs	r3, #33	; 0x21
1000993e:	5ce3      	ldrb	r3, [r4, r3]
10009940:	07db      	lsls	r3, r3, #31
10009942:	d50e      	bpl.n	10009962 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009944:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009946:	5ce3      	ldrb	r3, [r4, r3]
10009948:	07db      	lsls	r3, r3, #31
1000994a:	d50a      	bpl.n	10009962 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000994c:	2200      	movs	r2, #0
1000994e:	2322      	movs	r3, #34	; 0x22
10009950:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009952:	6822      	ldr	r2, [r4, #0]
10009954:	7a13      	ldrb	r3, [r2, #8]
10009956:	2110      	movs	r1, #16
10009958:	438b      	bics	r3, r1
1000995a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000995c:	0020      	movs	r0, r4
1000995e:	6863      	ldr	r3, [r4, #4]
10009960:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009962:	06ab      	lsls	r3, r5, #26
10009964:	d50a      	bpl.n	1000997c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009966:	2321      	movs	r3, #33	; 0x21
10009968:	5ce3      	ldrb	r3, [r4, r3]
1000996a:	079b      	lsls	r3, r3, #30
1000996c:	d506      	bpl.n	1000997c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000996e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009970:	5ce3      	ldrb	r3, [r4, r3]
10009972:	079b      	lsls	r3, r3, #30
10009974:	d502      	bpl.n	1000997c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009976:	68a3      	ldr	r3, [r4, #8]
10009978:	0020      	movs	r0, r4
1000997a:	4798      	blx	r3
		}

	}
}
1000997c:	bd70      	pop	{r4, r5, r6, pc}
1000997e:	46c0      	nop			; (mov r8, r8)
10009980:	10016f04 	.word	0x10016f04

10009984 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009984:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009986:	4b20      	ldr	r3, [pc, #128]	; (10009a08 <uart_rx1_isr_handler+0x84>)
10009988:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000998a:	6823      	ldr	r3, [r4, #0]
1000998c:	7d1d      	ldrb	r5, [r3, #20]
1000998e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009990:	066a      	lsls	r2, r5, #25
10009992:	d513      	bpl.n	100099bc <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009994:	211e      	movs	r1, #30
10009996:	2222      	movs	r2, #34	; 0x22
10009998:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000999a:	7e1a      	ldrb	r2, [r3, #24]
1000999c:	3123      	adds	r1, #35	; 0x23
1000999e:	438a      	bics	r2, r1
100099a0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100099a2:	2321      	movs	r3, #33	; 0x21
100099a4:	5ce3      	ldrb	r3, [r4, r3]
100099a6:	071b      	lsls	r3, r3, #28
100099a8:	d506      	bpl.n	100099b8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100099aa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100099ac:	5ce3      	ldrb	r3, [r4, r3]
100099ae:	071b      	lsls	r3, r3, #28
100099b0:	d502      	bpl.n	100099b8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100099b2:	0020      	movs	r0, r4
100099b4:	6923      	ldr	r3, [r4, #16]
100099b6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100099b8:	6823      	ldr	r3, [r4, #0]
100099ba:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100099bc:	07eb      	lsls	r3, r5, #31
100099be:	d522      	bpl.n	10009a06 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100099c0:	6823      	ldr	r3, [r4, #0]
100099c2:	7c1b      	ldrb	r3, [r3, #16]
100099c4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100099c6:	6962      	ldr	r2, [r4, #20]
100099c8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100099ca:	6963      	ldr	r3, [r4, #20]
100099cc:	3301      	adds	r3, #1
100099ce:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
100099d0:	8ba3      	ldrh	r3, [r4, #28]
100099d2:	3b01      	subs	r3, #1
100099d4:	b29b      	uxth	r3, r3
100099d6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
100099d8:	8ba3      	ldrh	r3, [r4, #28]
100099da:	b29b      	uxth	r3, r3
100099dc:	2b00      	cmp	r3, #0
100099de:	d112      	bne.n	10009a06 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100099e0:	3321      	adds	r3, #33	; 0x21
100099e2:	5ce3      	ldrb	r3, [r4, r3]
100099e4:	075b      	lsls	r3, r3, #29
100099e6:	d50e      	bpl.n	10009a06 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
100099e8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
100099ea:	5ce3      	ldrb	r3, [r4, r3]
100099ec:	075b      	lsls	r3, r3, #29
100099ee:	d50a      	bpl.n	10009a06 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
100099f0:	2200      	movs	r2, #0
100099f2:	2322      	movs	r3, #34	; 0x22
100099f4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100099f6:	6822      	ldr	r2, [r4, #0]
100099f8:	7e13      	ldrb	r3, [r2, #24]
100099fa:	2101      	movs	r1, #1
100099fc:	438b      	bics	r3, r1
100099fe:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009a00:	68e3      	ldr	r3, [r4, #12]
10009a02:	0020      	movs	r0, r4
10009a04:	4798      	blx	r3
			}
		}
	}
}
10009a06:	bd70      	pop	{r4, r5, r6, pc}
10009a08:	10016f04 	.word	0x10016f04

10009a0c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009a0c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009a0e:	4b21      	ldr	r3, [pc, #132]	; (10009a94 <uart_tx1_isr_handler+0x88>)
10009a10:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009a12:	6823      	ldr	r3, [r4, #0]
10009a14:	791d      	ldrb	r5, [r3, #4]
10009a16:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009a18:	07ea      	lsls	r2, r5, #31
10009a1a:	d517      	bpl.n	10009a4c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009a1c:	69a2      	ldr	r2, [r4, #24]
10009a1e:	7811      	ldrb	r1, [r2, #0]
10009a20:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009a22:	3201      	adds	r2, #1
10009a24:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009a26:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009a28:	8be3      	ldrh	r3, [r4, #30]
10009a2a:	3b01      	subs	r3, #1
10009a2c:	b29b      	uxth	r3, r3
10009a2e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009a30:	8be3      	ldrh	r3, [r4, #30]
10009a32:	b29b      	uxth	r3, r3
10009a34:	2b00      	cmp	r3, #0
10009a36:	d109      	bne.n	10009a4c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a38:	6822      	ldr	r2, [r4, #0]
10009a3a:	7a13      	ldrb	r3, [r2, #8]
10009a3c:	2101      	movs	r1, #1
10009a3e:	438b      	bics	r3, r1
10009a40:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009a42:	6822      	ldr	r2, [r4, #0]
10009a44:	7a11      	ldrb	r1, [r2, #8]
10009a46:	2310      	movs	r3, #16
10009a48:	430b      	orrs	r3, r1
10009a4a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009a4c:	06eb      	lsls	r3, r5, #27
10009a4e:	d512      	bpl.n	10009a76 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a50:	2321      	movs	r3, #33	; 0x21
10009a52:	5ce3      	ldrb	r3, [r4, r3]
10009a54:	07db      	lsls	r3, r3, #31
10009a56:	d50e      	bpl.n	10009a76 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009a58:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a5a:	5ce3      	ldrb	r3, [r4, r3]
10009a5c:	07db      	lsls	r3, r3, #31
10009a5e:	d50a      	bpl.n	10009a76 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009a60:	2200      	movs	r2, #0
10009a62:	2322      	movs	r3, #34	; 0x22
10009a64:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a66:	6822      	ldr	r2, [r4, #0]
10009a68:	7a13      	ldrb	r3, [r2, #8]
10009a6a:	2110      	movs	r1, #16
10009a6c:	438b      	bics	r3, r1
10009a6e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009a70:	0020      	movs	r0, r4
10009a72:	6863      	ldr	r3, [r4, #4]
10009a74:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009a76:	06ab      	lsls	r3, r5, #26
10009a78:	d50a      	bpl.n	10009a90 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009a7a:	2321      	movs	r3, #33	; 0x21
10009a7c:	5ce3      	ldrb	r3, [r4, r3]
10009a7e:	079b      	lsls	r3, r3, #30
10009a80:	d506      	bpl.n	10009a90 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009a82:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009a84:	5ce3      	ldrb	r3, [r4, r3]
10009a86:	079b      	lsls	r3, r3, #30
10009a88:	d502      	bpl.n	10009a90 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009a8a:	68a3      	ldr	r3, [r4, #8]
10009a8c:	0020      	movs	r0, r4
10009a8e:	4798      	blx	r3
		}

	}
}
10009a90:	bd70      	pop	{r4, r5, r6, pc}
10009a92:	46c0      	nop			; (mov r8, r8)
10009a94:	10016f04 	.word	0x10016f04

10009a98 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009a98:	23e1      	movs	r3, #225	; 0xe1
10009a9a:	025b      	lsls	r3, r3, #9
10009a9c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009a9e:	2300      	movs	r3, #0
10009aa0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009aa2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009aa4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009aa6:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009aa8:	3302      	adds	r3, #2
10009aaa:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009aac:	2203      	movs	r2, #3
10009aae:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009ab0:	3201      	adds	r2, #1
10009ab2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009ab4:	3201      	adds	r2, #1
10009ab6:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009ab8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009aba:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009abc:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10009abe:	6243      	str	r3, [r0, #36]	; 0x24
}
10009ac0:	4770      	bx	lr
10009ac2:	46c0      	nop			; (mov r8, r8)

10009ac4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009ac6:	464f      	mov	r7, r9
10009ac8:	4646      	mov	r6, r8
10009aca:	b4c0      	push	{r6, r7}
10009acc:	0005      	movs	r5, r0
10009ace:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009ad0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009ad2:	2300      	movs	r3, #0
10009ad4:	6043      	str	r3, [r0, #4]
10009ad6:	6083      	str	r3, [r0, #8]
10009ad8:	60c3      	str	r3, [r0, #12]
10009ada:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009adc:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009ade:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009ae0:	2200      	movs	r2, #0
10009ae2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009ae4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009ae6:	3320      	adds	r3, #32
10009ae8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009aea:	3301      	adds	r3, #1
10009aec:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009aee:	3301      	adds	r3, #1
10009af0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009af2:	4b55      	ldr	r3, [pc, #340]	; (10009c48 <uart_init+0x184>)
10009af4:	4299      	cmp	r1, r3
10009af6:	d118      	bne.n	10009b2a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009af8:	2009      	movs	r0, #9
10009afa:	4c54      	ldr	r4, [pc, #336]	; (10009c4c <uart_init+0x188>)
10009afc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009afe:	200a      	movs	r0, #10
10009b00:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009b02:	2009      	movs	r0, #9
10009b04:	4c52      	ldr	r4, [pc, #328]	; (10009c50 <uart_init+0x18c>)
10009b06:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009b08:	200a      	movs	r0, #10
10009b0a:	47a0      	blx	r4
		_uart_instances[0] = module;
10009b0c:	4b51      	ldr	r3, [pc, #324]	; (10009c54 <uart_init+0x190>)
10009b0e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009b10:	4951      	ldr	r1, [pc, #324]	; (10009c58 <uart_init+0x194>)
10009b12:	2010      	movs	r0, #16
10009b14:	4c51      	ldr	r4, [pc, #324]	; (10009c5c <uart_init+0x198>)
10009b16:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009b18:	4951      	ldr	r1, [pc, #324]	; (10009c60 <uart_init+0x19c>)
10009b1a:	2011      	movs	r0, #17
10009b1c:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009b1e:	4b51      	ldr	r3, [pc, #324]	; (10009c64 <uart_init+0x1a0>)
10009b20:	2201      	movs	r2, #1
10009b22:	601a      	str	r2, [r3, #0]
10009b24:	3201      	adds	r2, #1
10009b26:	601a      	str	r2, [r3, #0]
10009b28:	e01a      	b.n	10009b60 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009b2a:	4b4f      	ldr	r3, [pc, #316]	; (10009c68 <uart_init+0x1a4>)
10009b2c:	4299      	cmp	r1, r3
10009b2e:	d117      	bne.n	10009b60 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009b30:	200b      	movs	r0, #11
10009b32:	4c46      	ldr	r4, [pc, #280]	; (10009c4c <uart_init+0x188>)
10009b34:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009b36:	200c      	movs	r0, #12
10009b38:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009b3a:	200b      	movs	r0, #11
10009b3c:	4c44      	ldr	r4, [pc, #272]	; (10009c50 <uart_init+0x18c>)
10009b3e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009b40:	200c      	movs	r0, #12
10009b42:	47a0      	blx	r4
		_uart_instances[1] = module;
10009b44:	4b43      	ldr	r3, [pc, #268]	; (10009c54 <uart_init+0x190>)
10009b46:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009b48:	4948      	ldr	r1, [pc, #288]	; (10009c6c <uart_init+0x1a8>)
10009b4a:	2012      	movs	r0, #18
10009b4c:	4c43      	ldr	r4, [pc, #268]	; (10009c5c <uart_init+0x198>)
10009b4e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009b50:	4947      	ldr	r1, [pc, #284]	; (10009c70 <uart_init+0x1ac>)
10009b52:	2013      	movs	r0, #19
10009b54:	47a0      	blx	r4
10009b56:	4b43      	ldr	r3, [pc, #268]	; (10009c64 <uart_init+0x1a0>)
10009b58:	2204      	movs	r2, #4
10009b5a:	601a      	str	r2, [r3, #0]
10009b5c:	3204      	adds	r2, #4
10009b5e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009b60:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10009b62:	2204      	movs	r2, #4
10009b64:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009b66:	2b00      	cmp	r3, #0
10009b68:	d152      	bne.n	10009c10 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009b6a:	3302      	adds	r3, #2
10009b6c:	4698      	mov	r8, r3
10009b6e:	e04f      	b.n	10009c10 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009b70:	8a31      	ldrh	r1, [r6, #16]
10009b72:	ce01      	ldmia	r6!, {r0}
10009b74:	b2c0      	uxtb	r0, r0
10009b76:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009b78:	3401      	adds	r4, #1
10009b7a:	b2e4      	uxtb	r4, r4
10009b7c:	4544      	cmp	r4, r8
10009b7e:	d3f7      	bcc.n	10009b70 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009b80:	682b      	ldr	r3, [r5, #0]
10009b82:	7d1a      	ldrb	r2, [r3, #20]
10009b84:	07d2      	lsls	r2, r2, #31
10009b86:	d504      	bpl.n	10009b92 <uart_init+0xce>
10009b88:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009b8a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009b8c:	7d1a      	ldrb	r2, [r3, #20]
10009b8e:	420a      	tst	r2, r1
10009b90:	d1fb      	bne.n	10009b8a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009b92:	2100      	movs	r1, #0
10009b94:	2220      	movs	r2, #32
10009b96:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009b98:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009b9a:	1e59      	subs	r1, r3, #1
10009b9c:	418b      	sbcs	r3, r1
10009b9e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009ba0:	793b      	ldrb	r3, [r7, #4]
10009ba2:	797a      	ldrb	r2, [r7, #5]
10009ba4:	4313      	orrs	r3, r2
10009ba6:	430b      	orrs	r3, r1
	switch(config->parity) {
10009ba8:	79ba      	ldrb	r2, [r7, #6]
10009baa:	2a02      	cmp	r2, #2
10009bac:	d00d      	beq.n	10009bca <uart_init+0x106>
10009bae:	b2d1      	uxtb	r1, r2
10009bb0:	2902      	cmp	r1, #2
10009bb2:	d802      	bhi.n	10009bba <uart_init+0xf6>
10009bb4:	2a01      	cmp	r2, #1
10009bb6:	d005      	beq.n	10009bc4 <uart_init+0x100>
10009bb8:	e00f      	b.n	10009bda <uart_init+0x116>
10009bba:	2a03      	cmp	r2, #3
10009bbc:	d008      	beq.n	10009bd0 <uart_init+0x10c>
10009bbe:	2a04      	cmp	r2, #4
10009bc0:	d009      	beq.n	10009bd6 <uart_init+0x112>
10009bc2:	e00a      	b.n	10009bda <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009bc4:	2202      	movs	r2, #2
10009bc6:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009bc8:	e007      	b.n	10009bda <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10009bca:	2206      	movs	r2, #6
10009bcc:	4313      	orrs	r3, r2
			break;
10009bce:	e004      	b.n	10009bda <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009bd0:	220a      	movs	r2, #10
10009bd2:	4313      	orrs	r3, r2
			break;
10009bd4:	e001      	b.n	10009bda <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009bd6:	220e      	movs	r2, #14
10009bd8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009bda:	2220      	movs	r2, #32
10009bdc:	6829      	ldr	r1, [r5, #0]
10009bde:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009be0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009be2:	4b24      	ldr	r3, [pc, #144]	; (10009c74 <uart_init+0x1b0>)
10009be4:	4798      	blx	r3
10009be6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009be8:	0031      	movs	r1, r6
10009bea:	4b23      	ldr	r3, [pc, #140]	; (10009c78 <uart_init+0x1b4>)
10009bec:	4798      	blx	r3
10009bee:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009bf0:	0400      	lsls	r0, r0, #16
10009bf2:	0c00      	lsrs	r0, r0, #16
10009bf4:	4370      	muls	r0, r6
10009bf6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009bf8:	0931      	lsrs	r1, r6, #4
10009bfa:	4288      	cmp	r0, r1
10009bfc:	d906      	bls.n	10009c0c <uart_init+0x148>
10009bfe:	2300      	movs	r3, #0
		i++;
10009c00:	3301      	adds	r3, #1
10009c02:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009c04:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009c06:	4288      	cmp	r0, r1
10009c08:	d8fa      	bhi.n	10009c00 <uart_init+0x13c>
10009c0a:	e007      	b.n	10009c1c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009c0c:	2300      	movs	r3, #0
10009c0e:	e005      	b.n	10009c1c <uart_init+0x158>
10009c10:	003e      	movs	r6, r7
10009c12:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009c14:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009c16:	4b19      	ldr	r3, [pc, #100]	; (10009c7c <uart_init+0x1b8>)
10009c18:	4699      	mov	r9, r3
10009c1a:	e7a9      	b.n	10009b70 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009c1c:	2100      	movs	r1, #0
10009c1e:	2028      	movs	r0, #40	; 0x28
10009c20:	682c      	ldr	r4, [r5, #0]
10009c22:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009c24:	3301      	adds	r3, #1
10009c26:	071b      	lsls	r3, r3, #28
10009c28:	0f5b      	lsrs	r3, r3, #29
10009c2a:	00d2      	lsls	r2, r2, #3
10009c2c:	4313      	orrs	r3, r2
10009c2e:	b29b      	uxth	r3, r3
10009c30:	682a      	ldr	r2, [r5, #0]
10009c32:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009c34:	682b      	ldr	r3, [r5, #0]
10009c36:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009c38:	682b      	ldr	r3, [r5, #0]
10009c3a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009c3c:	2000      	movs	r0, #0
10009c3e:	bc0c      	pop	{r2, r3}
10009c40:	4690      	mov	r8, r2
10009c42:	4699      	mov	r9, r3
10009c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c46:	46c0      	nop			; (mov r8, r8)
10009c48:	40004000 	.word	0x40004000
10009c4c:	100093f9 	.word	0x100093f9
10009c50:	1000909d 	.word	0x1000909d
10009c54:	10016f04 	.word	0x10016f04
10009c58:	10009871 	.word	0x10009871
10009c5c:	10009861 	.word	0x10009861
10009c60:	100098f9 	.word	0x100098f9
10009c64:	e000e100 	.word	0xe000e100
10009c68:	40005000 	.word	0x40005000
10009c6c:	10009985 	.word	0x10009985
10009c70:	10009a0d 	.word	0x10009a0d
10009c74:	10009091 	.word	0x10009091
10009c78:	1000edb9 	.word	0x1000edb9
10009c7c:	10008ec1 	.word	0x10008ec1

10009c80 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009c80:	6802      	ldr	r2, [r0, #0]
10009c82:	2001      	movs	r0, #1
10009c84:	7913      	ldrb	r3, [r2, #4]
10009c86:	4203      	tst	r3, r0
10009c88:	d0fc      	beq.n	10009c84 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009c8a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009c8c:	2000      	movs	r0, #0
10009c8e:	4770      	bx	lr

10009c90 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009c90:	6802      	ldr	r2, [r0, #0]
10009c92:	2001      	movs	r0, #1
10009c94:	7d13      	ldrb	r3, [r2, #20]
10009c96:	4203      	tst	r3, r0
10009c98:	d0fc      	beq.n	10009c94 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009c9a:	7c13      	ldrb	r3, [r2, #16]
10009c9c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009c9e:	2000      	movs	r0, #0
10009ca0:	4770      	bx	lr
10009ca2:	46c0      	nop			; (mov r8, r8)

10009ca4 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009ca4:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009ca6:	2a00      	cmp	r2, #0
10009ca8:	d00d      	beq.n	10009cc6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009caa:	330b      	adds	r3, #11
10009cac:	5cc3      	ldrb	r3, [r0, r3]
10009cae:	b2db      	uxtb	r3, r3
10009cb0:	2b05      	cmp	r3, #5
10009cb2:	d008      	beq.n	10009cc6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009cb4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009cb6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009cb8:	2205      	movs	r2, #5
10009cba:	2322      	movs	r3, #34	; 0x22
10009cbc:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009cbe:	6803      	ldr	r3, [r0, #0]
10009cc0:	3a04      	subs	r2, #4
10009cc2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009cc4:	2300      	movs	r3, #0
}
10009cc6:	0018      	movs	r0, r3
10009cc8:	4770      	bx	lr
10009cca:	46c0      	nop			; (mov r8, r8)

10009ccc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009ccc:	0093      	lsls	r3, r2, #2
10009cce:	18c3      	adds	r3, r0, r3
10009cd0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009cd2:	2120      	movs	r1, #32
10009cd4:	2301      	movs	r3, #1
10009cd6:	4093      	lsls	r3, r2
10009cd8:	5c42      	ldrb	r2, [r0, r1]
10009cda:	4313      	orrs	r3, r2
10009cdc:	5443      	strb	r3, [r0, r1]
}
10009cde:	4770      	bx	lr

10009ce0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009ce0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009ce2:	2221      	movs	r2, #33	; 0x21
10009ce4:	2301      	movs	r3, #1
10009ce6:	408b      	lsls	r3, r1
10009ce8:	5c84      	ldrb	r4, [r0, r2]
10009cea:	4323      	orrs	r3, r4
10009cec:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009cee:	2901      	cmp	r1, #1
10009cf0:	d104      	bne.n	10009cfc <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009cf2:	6802      	ldr	r2, [r0, #0]
10009cf4:	7a11      	ldrb	r1, [r2, #8]
10009cf6:	2320      	movs	r3, #32
10009cf8:	430b      	orrs	r3, r1
10009cfa:	7213      	strb	r3, [r2, #8]
	}
}
10009cfc:	bd10      	pop	{r4, pc}
10009cfe:	46c0      	nop			; (mov r8, r8)

10009d00 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009d00:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009d02:	2201      	movs	r2, #1
10009d04:	408a      	lsls	r2, r1
10009d06:	2421      	movs	r4, #33	; 0x21
10009d08:	5d03      	ldrb	r3, [r0, r4]
10009d0a:	4393      	bics	r3, r2
10009d0c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009d0e:	2901      	cmp	r1, #1
10009d10:	d104      	bne.n	10009d1c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009d12:	6802      	ldr	r2, [r0, #0]
10009d14:	7a13      	ldrb	r3, [r2, #8]
10009d16:	311f      	adds	r1, #31
10009d18:	438b      	bics	r3, r1
10009d1a:	7213      	strb	r3, [r2, #8]
	}

}
10009d1c:	bd10      	pop	{r4, pc}
10009d1e:	46c0      	nop			; (mov r8, r8)

10009d20 <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
10009d20:	6802      	ldr	r2, [r0, #0]
10009d22:	7a11      	ldrb	r1, [r2, #8]
10009d24:	2310      	movs	r3, #16
10009d26:	430b      	orrs	r3, r1
10009d28:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009d2a:	6803      	ldr	r3, [r0, #0]
10009d2c:	4a07      	ldr	r2, [pc, #28]	; (10009d4c <uart_enable_transmit_dma+0x2c>)
10009d2e:	4293      	cmp	r3, r2
10009d30:	d104      	bne.n	10009d3c <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009d32:	2102      	movs	r1, #2
10009d34:	2380      	movs	r3, #128	; 0x80
10009d36:	4a06      	ldr	r2, [pc, #24]	; (10009d50 <uart_enable_transmit_dma+0x30>)
10009d38:	50d1      	str	r1, [r2, r3]
10009d3a:	e006      	b.n	10009d4a <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009d3c:	4a05      	ldr	r2, [pc, #20]	; (10009d54 <uart_enable_transmit_dma+0x34>)
10009d3e:	4293      	cmp	r3, r2
10009d40:	d103      	bne.n	10009d4a <uart_enable_transmit_dma+0x2a>
10009d42:	2108      	movs	r1, #8
10009d44:	2380      	movs	r3, #128	; 0x80
10009d46:	4a02      	ldr	r2, [pc, #8]	; (10009d50 <uart_enable_transmit_dma+0x30>)
10009d48:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009d4a:	4770      	bx	lr
10009d4c:	40004000 	.word	0x40004000
10009d50:	e000e100 	.word	0xe000e100
10009d54:	40005000 	.word	0x40005000

10009d58 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009d58:	6802      	ldr	r2, [r0, #0]
10009d5a:	7e11      	ldrb	r1, [r2, #24]
10009d5c:	2301      	movs	r3, #1
10009d5e:	430b      	orrs	r3, r1
10009d60:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009d62:	6803      	ldr	r3, [r0, #0]
10009d64:	4a07      	ldr	r2, [pc, #28]	; (10009d84 <uart_enable_receive_dma+0x2c>)
10009d66:	4293      	cmp	r3, r2
10009d68:	d104      	bne.n	10009d74 <uart_enable_receive_dma+0x1c>
10009d6a:	2102      	movs	r1, #2
10009d6c:	2380      	movs	r3, #128	; 0x80
10009d6e:	4a06      	ldr	r2, [pc, #24]	; (10009d88 <uart_enable_receive_dma+0x30>)
10009d70:	50d1      	str	r1, [r2, r3]
10009d72:	e006      	b.n	10009d82 <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009d74:	4a05      	ldr	r2, [pc, #20]	; (10009d8c <uart_enable_receive_dma+0x34>)
10009d76:	4293      	cmp	r3, r2
10009d78:	d103      	bne.n	10009d82 <uart_enable_receive_dma+0x2a>
10009d7a:	2108      	movs	r1, #8
10009d7c:	2380      	movs	r3, #128	; 0x80
10009d7e:	4a02      	ldr	r2, [pc, #8]	; (10009d88 <uart_enable_receive_dma+0x30>)
10009d80:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009d82:	4770      	bx	lr
10009d84:	40004000 	.word	0x40004000
10009d88:	e000e100 	.word	0xe000e100
10009d8c:	40005000 	.word	0x40005000

10009d90 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009d90:	b5f0      	push	{r4, r5, r6, r7, lr}
10009d92:	4647      	mov	r7, r8
10009d94:	b480      	push	{r7}
10009d96:	000c      	movs	r4, r1
10009d98:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009d9a:	2800      	cmp	r0, #0
10009d9c:	d10d      	bne.n	10009dba <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009d9e:	2a00      	cmp	r2, #0
10009da0:	dd0e      	ble.n	10009dc0 <_read+0x30>
10009da2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009da4:	4e08      	ldr	r6, [pc, #32]	; (10009dc8 <_read+0x38>)
10009da6:	4d09      	ldr	r5, [pc, #36]	; (10009dcc <_read+0x3c>)
10009da8:	6830      	ldr	r0, [r6, #0]
10009daa:	0021      	movs	r1, r4
10009dac:	682b      	ldr	r3, [r5, #0]
10009dae:	4798      	blx	r3
		ptr++;
10009db0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009db2:	42a7      	cmp	r7, r4
10009db4:	d1f8      	bne.n	10009da8 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009db6:	4640      	mov	r0, r8
10009db8:	e003      	b.n	10009dc2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009dba:	2001      	movs	r0, #1
10009dbc:	4240      	negs	r0, r0
10009dbe:	e000      	b.n	10009dc2 <_read+0x32>
	}

	for (; len > 0; --len) {
10009dc0:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009dc2:	bc04      	pop	{r2}
10009dc4:	4690      	mov	r8, r2
10009dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009dc8:	10016f14 	.word	0x10016f14
10009dcc:	10016f0c 	.word	0x10016f0c

10009dd0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009dd2:	4647      	mov	r7, r8
10009dd4:	b480      	push	{r7}
10009dd6:	000e      	movs	r6, r1
10009dd8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009dda:	3801      	subs	r0, #1
10009ddc:	2802      	cmp	r0, #2
10009dde:	d811      	bhi.n	10009e04 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009de0:	2a00      	cmp	r2, #0
10009de2:	d012      	beq.n	10009e0a <_write+0x3a>
10009de4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009de6:	4b0c      	ldr	r3, [pc, #48]	; (10009e18 <_write+0x48>)
10009de8:	4698      	mov	r8, r3
10009dea:	4f0c      	ldr	r7, [pc, #48]	; (10009e1c <_write+0x4c>)
10009dec:	4643      	mov	r3, r8
10009dee:	6818      	ldr	r0, [r3, #0]
10009df0:	5d31      	ldrb	r1, [r6, r4]
10009df2:	683b      	ldr	r3, [r7, #0]
10009df4:	4798      	blx	r3
10009df6:	2800      	cmp	r0, #0
10009df8:	db09      	blt.n	10009e0e <_write+0x3e>
			return -1;
		}
		++nChars;
10009dfa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009dfc:	42a5      	cmp	r5, r4
10009dfe:	d1f5      	bne.n	10009dec <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009e00:	0020      	movs	r0, r4
10009e02:	e006      	b.n	10009e12 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009e04:	2001      	movs	r0, #1
10009e06:	4240      	negs	r0, r0
10009e08:	e003      	b.n	10009e12 <_write+0x42>
	}

	for (; len != 0; --len) {
10009e0a:	2000      	movs	r0, #0
10009e0c:	e001      	b.n	10009e12 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009e0e:	2001      	movs	r0, #1
10009e10:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009e12:	bc04      	pop	{r2}
10009e14:	4690      	mov	r8, r2
10009e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e18:	10016f14 	.word	0x10016f14
10009e1c:	10016f10 	.word	0x10016f10

10009e20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009e20:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009e22:	4a06      	ldr	r2, [pc, #24]	; (10009e3c <_sbrk+0x1c>)
10009e24:	6812      	ldr	r2, [r2, #0]
10009e26:	2a00      	cmp	r2, #0
10009e28:	d102      	bne.n	10009e30 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009e2a:	4905      	ldr	r1, [pc, #20]	; (10009e40 <_sbrk+0x20>)
10009e2c:	4a03      	ldr	r2, [pc, #12]	; (10009e3c <_sbrk+0x1c>)
10009e2e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009e30:	4a02      	ldr	r2, [pc, #8]	; (10009e3c <_sbrk+0x1c>)
10009e32:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009e34:	18c3      	adds	r3, r0, r3
10009e36:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009e38:	4770      	bx	lr
10009e3a:	46c0      	nop			; (mov r8, r8)
10009e3c:	1001542c 	.word	0x1001542c
10009e40:	100188c8 	.word	0x100188c8

10009e44 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009e44:	2001      	movs	r0, #1
10009e46:	4240      	negs	r0, r0
10009e48:	4770      	bx	lr
10009e4a:	46c0      	nop			; (mov r8, r8)

10009e4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009e4c:	2380      	movs	r3, #128	; 0x80
10009e4e:	019b      	lsls	r3, r3, #6
10009e50:	604b      	str	r3, [r1, #4]

	return 0;
}
10009e52:	2000      	movs	r0, #0
10009e54:	4770      	bx	lr
10009e56:	46c0      	nop			; (mov r8, r8)

10009e58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009e58:	2001      	movs	r0, #1
10009e5a:	4770      	bx	lr

10009e5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009e5c:	2000      	movs	r0, #0
10009e5e:	4770      	bx	lr

10009e60 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009e60:	2000      	movs	r0, #0
10009e62:	4770      	bx	lr

10009e64 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009e64:	2000      	movs	r0, #0
10009e66:	4770      	bx	lr

10009e68 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009e68:	78c0      	ldrb	r0, [r0, #3]
10009e6a:	2800      	cmp	r0, #0
10009e6c:	d000      	beq.n	10009e70 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009e6e:	20e2      	movs	r0, #226	; 0xe2
}
10009e70:	4770      	bx	lr
10009e72:	46c0      	nop			; (mov r8, r8)

10009e74 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009e74:	2000      	movs	r0, #0
10009e76:	4770      	bx	lr

10009e78 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009e78:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009e7a:	7800      	ldrb	r0, [r0, #0]
10009e7c:	2800      	cmp	r0, #0
10009e7e:	d006      	beq.n	10009e8e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009e80:	4803      	ldr	r0, [pc, #12]	; (10009e90 <ble_scan_report_handler+0x18>)
10009e82:	4b04      	ldr	r3, [pc, #16]	; (10009e94 <ble_scan_report_handler+0x1c>)
10009e84:	4798      	blx	r3
10009e86:	4804      	ldr	r0, [pc, #16]	; (10009e98 <ble_scan_report_handler+0x20>)
10009e88:	4b04      	ldr	r3, [pc, #16]	; (10009e9c <ble_scan_report_handler+0x24>)
10009e8a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009e8c:	20e2      	movs	r0, #226	; 0xe2
}
10009e8e:	bd10      	pop	{r4, pc}
10009e90:	10014718 	.word	0x10014718
10009e94:	10010929 	.word	0x10010929
10009e98:	1001471c 	.word	0x1001471c
10009e9c:	10010809 	.word	0x10010809

10009ea0 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009ea0:	b510      	push	{r4, lr}
10009ea2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009ea4:	78c0      	ldrb	r0, [r0, #3]
10009ea6:	2800      	cmp	r0, #0
10009ea8:	d008      	beq.n	10009ebc <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009eaa:	4805      	ldr	r0, [pc, #20]	; (10009ec0 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009eac:	4b05      	ldr	r3, [pc, #20]	; (10009ec4 <ble_mtu_changed_cmd_complete_handler+0x24>)
10009eae:	4798      	blx	r3
10009eb0:	78a2      	ldrb	r2, [r4, #2]
10009eb2:	8821      	ldrh	r1, [r4, #0]
10009eb4:	4804      	ldr	r0, [pc, #16]	; (10009ec8 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009eb6:	4b05      	ldr	r3, [pc, #20]	; (10009ecc <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009eb8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009eba:	20e2      	movs	r0, #226	; 0xe2
}
10009ebc:	bd10      	pop	{r4, pc}
10009ebe:	46c0      	nop			; (mov r8, r8)
10009ec0:	10014718 	.word	0x10014718
10009ec4:	10010929 	.word	0x10010929
10009ec8:	10014730 	.word	0x10014730
10009ecc:	10010809 	.word	0x10010809

10009ed0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009ed2:	0004      	movs	r4, r0
10009ed4:	4b19      	ldr	r3, [pc, #100]	; (10009f3c <ble_disconnected_state_handler+0x6c>)
10009ed6:	229b      	movs	r2, #155	; 0x9b
10009ed8:	0092      	lsls	r2, r2, #2
10009eda:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009edc:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009ede:	2600      	movs	r6, #0
10009ee0:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ee2:	001a      	movs	r2, r3
10009ee4:	3a56      	subs	r2, #86	; 0x56
10009ee6:	8811      	ldrh	r1, [r2, #0]
10009ee8:	8822      	ldrh	r2, [r4, #0]
10009eea:	4291      	cmp	r1, r2
10009eec:	d119      	bne.n	10009f22 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009eee:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009ef0:	2a05      	cmp	r2, #5
10009ef2:	d001      	beq.n	10009ef8 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ef4:	2a08      	cmp	r2, #8
10009ef6:	d101      	bne.n	10009efc <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009ef8:	7007      	strb	r7, [r0, #0]
10009efa:	e012      	b.n	10009f22 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009efc:	2a07      	cmp	r2, #7
10009efe:	d80f      	bhi.n	10009f20 <ble_disconnected_state_handler+0x50>
10009f00:	0092      	lsls	r2, r2, #2
10009f02:	490f      	ldr	r1, [pc, #60]	; (10009f40 <ble_disconnected_state_handler+0x70>)
10009f04:	588a      	ldr	r2, [r1, r2]
10009f06:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009f08:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009f0a:	4a0e      	ldr	r2, [pc, #56]	; (10009f44 <ble_disconnected_state_handler+0x74>)
10009f0c:	7812      	ldrb	r2, [r2, #0]
10009f0e:	2a00      	cmp	r2, #0
10009f10:	d007      	beq.n	10009f22 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009f12:	4a0c      	ldr	r2, [pc, #48]	; (10009f44 <ble_disconnected_state_handler+0x74>)
10009f14:	7812      	ldrb	r2, [r2, #0]
10009f16:	3a01      	subs	r2, #1
10009f18:	b2d2      	uxtb	r2, r2
10009f1a:	490a      	ldr	r1, [pc, #40]	; (10009f44 <ble_disconnected_state_handler+0x74>)
10009f1c:	700a      	strb	r2, [r1, #0]
10009f1e:	e000      	b.n	10009f22 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009f20:	7006      	strb	r6, [r0, #0]
10009f22:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f24:	42ab      	cmp	r3, r5
10009f26:	d1db      	bne.n	10009ee0 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009f28:	4807      	ldr	r0, [pc, #28]	; (10009f48 <ble_disconnected_state_handler+0x78>)
10009f2a:	4b08      	ldr	r3, [pc, #32]	; (10009f4c <ble_disconnected_state_handler+0x7c>)
10009f2c:	4798      	blx	r3
10009f2e:	8822      	ldrh	r2, [r4, #0]
10009f30:	78a1      	ldrb	r1, [r4, #2]
10009f32:	4807      	ldr	r0, [pc, #28]	; (10009f50 <ble_disconnected_state_handler+0x80>)
10009f34:	4b07      	ldr	r3, [pc, #28]	; (10009f54 <ble_disconnected_state_handler+0x84>)
10009f36:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009f38:	2000      	movs	r0, #0
10009f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f3c:	10016f8e 	.word	0x10016f8e
10009f40:	100145a8 	.word	0x100145a8
10009f44:	1001719c 	.word	0x1001719c
10009f48:	10014718 	.word	0x10014718
10009f4c:	10010929 	.word	0x10010929
10009f50:	10014768 	.word	0x10014768
10009f54:	10010809 	.word	0x10010809

10009f58 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009f5a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009f5c:	8801      	ldrh	r1, [r0, #0]
10009f5e:	4b28      	ldr	r3, [pc, #160]	; (1000a000 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f60:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009f62:	891a      	ldrh	r2, [r3, #8]
10009f64:	428a      	cmp	r2, r1
10009f66:	d104      	bne.n	10009f72 <ble_encryption_status_change_handler+0x1a>
10009f68:	001a      	movs	r2, r3
10009f6a:	325e      	adds	r2, #94	; 0x5e
10009f6c:	7812      	ldrb	r2, [r2, #0]
10009f6e:	2a06      	cmp	r2, #6
10009f70:	d02e      	beq.n	10009fd0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009f72:	3401      	adds	r4, #1
10009f74:	b2e4      	uxtb	r4, r4
10009f76:	337c      	adds	r3, #124	; 0x7c
10009f78:	2c05      	cmp	r4, #5
10009f7a:	d1f2      	bne.n	10009f62 <ble_encryption_status_change_handler+0xa>
10009f7c:	e039      	b.n	10009ff2 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009f7e:	4920      	ldr	r1, [pc, #128]	; (1000a000 <ble_encryption_status_change_handler+0xa8>)
10009f80:	0163      	lsls	r3, r4, #5
10009f82:	1b1a      	subs	r2, r3, r4
10009f84:	0092      	lsls	r2, r2, #2
10009f86:	188a      	adds	r2, r1, r2
10009f88:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009f8a:	0014      	movs	r4, r2
10009f8c:	345e      	adds	r4, #94	; 0x5e
10009f8e:	2307      	movs	r3, #7
10009f90:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009f92:	481c      	ldr	r0, [pc, #112]	; (1000a004 <ble_encryption_status_change_handler+0xac>)
10009f94:	4b1c      	ldr	r3, [pc, #112]	; (1000a008 <ble_encryption_status_change_handler+0xb0>)
10009f96:	4798      	blx	r3
10009f98:	481c      	ldr	r0, [pc, #112]	; (1000a00c <ble_encryption_status_change_handler+0xb4>)
10009f9a:	4b1d      	ldr	r3, [pc, #116]	; (1000a010 <ble_encryption_status_change_handler+0xb8>)
10009f9c:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009f9e:	25e2      	movs	r5, #226	; 0xe2
10009fa0:	e02b      	b.n	10009ffa <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009fa2:	4818      	ldr	r0, [pc, #96]	; (1000a004 <ble_encryption_status_change_handler+0xac>)
10009fa4:	4b18      	ldr	r3, [pc, #96]	; (1000a008 <ble_encryption_status_change_handler+0xb0>)
10009fa6:	4798      	blx	r3
10009fa8:	481a      	ldr	r0, [pc, #104]	; (1000a014 <ble_encryption_status_change_handler+0xbc>)
10009faa:	4b19      	ldr	r3, [pc, #100]	; (1000a010 <ble_encryption_status_change_handler+0xb8>)
10009fac:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009fae:	4914      	ldr	r1, [pc, #80]	; (1000a000 <ble_encryption_status_change_handler+0xa8>)
10009fb0:	0163      	lsls	r3, r4, #5
10009fb2:	1b1a      	subs	r2, r3, r4
10009fb4:	0092      	lsls	r2, r2, #2
10009fb6:	188a      	adds	r2, r1, r2
10009fb8:	0010      	movs	r0, r2
10009fba:	305e      	adds	r0, #94	; 0x5e
10009fbc:	2708      	movs	r7, #8
10009fbe:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009fc0:	78f0      	ldrb	r0, [r6, #3]
10009fc2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009fc4:	78b2      	ldrb	r2, [r6, #2]
10009fc6:	1b1c      	subs	r4, r3, r4
10009fc8:	00a4      	lsls	r4, r4, #2
10009fca:	190c      	adds	r4, r1, r4
10009fcc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009fce:	e014      	b.n	10009ffa <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009fd0:	78b5      	ldrb	r5, [r6, #2]
10009fd2:	2d00      	cmp	r5, #0
10009fd4:	d0e5      	beq.n	10009fa2 <ble_encryption_status_change_handler+0x4a>
10009fd6:	e7d2      	b.n	10009f7e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009fd8:	4e0a      	ldr	r6, [pc, #40]	; (1000a004 <ble_encryption_status_change_handler+0xac>)
10009fda:	0030      	movs	r0, r6
10009fdc:	4d0a      	ldr	r5, [pc, #40]	; (1000a008 <ble_encryption_status_change_handler+0xb0>)
10009fde:	47a8      	blx	r5
10009fe0:	480c      	ldr	r0, [pc, #48]	; (1000a014 <ble_encryption_status_change_handler+0xbc>)
10009fe2:	4c0b      	ldr	r4, [pc, #44]	; (1000a010 <ble_encryption_status_change_handler+0xb8>)
10009fe4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009fe6:	0030      	movs	r0, r6
10009fe8:	47a8      	blx	r5
10009fea:	480b      	ldr	r0, [pc, #44]	; (1000a018 <ble_encryption_status_change_handler+0xc0>)
10009fec:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009fee:	25e2      	movs	r5, #226	; 0xe2
10009ff0:	e003      	b.n	10009ffa <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009ff2:	78b5      	ldrb	r5, [r6, #2]
10009ff4:	2d00      	cmp	r5, #0
10009ff6:	d1c2      	bne.n	10009f7e <ble_encryption_status_change_handler+0x26>
10009ff8:	e7ee      	b.n	10009fd8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009ffa:	0028      	movs	r0, r5
10009ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009ffe:	46c0      	nop			; (mov r8, r8)
1000a000:	10016f30 	.word	0x10016f30
1000a004:	10014718 	.word	0x10014718
1000a008:	10010929 	.word	0x10010929
1000a00c:	10014798 	.word	0x10014798
1000a010:	10010809 	.word	0x10010809
1000a014:	100147ac 	.word	0x100147ac
1000a018:	100147d0 	.word	0x100147d0

1000a01c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a01c:	b510      	push	{r4, lr}
1000a01e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a020:	4b15      	ldr	r3, [pc, #84]	; (1000a078 <ble_scan_info_handler+0x5c>)
1000a022:	781b      	ldrb	r3, [r3, #0]
1000a024:	b2db      	uxtb	r3, r3
1000a026:	2b13      	cmp	r3, #19
1000a028:	d812      	bhi.n	1000a050 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a02a:	4c13      	ldr	r4, [pc, #76]	; (1000a078 <ble_scan_info_handler+0x5c>)
1000a02c:	7823      	ldrb	r3, [r4, #0]
1000a02e:	b2db      	uxtb	r3, r3
1000a030:	0098      	lsls	r0, r3, #2
1000a032:	18c0      	adds	r0, r0, r3
1000a034:	00c0      	lsls	r0, r0, #3
1000a036:	18c3      	adds	r3, r0, r3
1000a038:	4810      	ldr	r0, [pc, #64]	; (1000a07c <ble_scan_info_handler+0x60>)
1000a03a:	1818      	adds	r0, r3, r0
1000a03c:	2229      	movs	r2, #41	; 0x29
1000a03e:	4b10      	ldr	r3, [pc, #64]	; (1000a080 <ble_scan_info_handler+0x64>)
1000a040:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a042:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a044:	7823      	ldrb	r3, [r4, #0]
1000a046:	3301      	adds	r3, #1
1000a048:	b2db      	uxtb	r3, r3
1000a04a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000a04c:	2300      	movs	r3, #0
1000a04e:	e011      	b.n	1000a074 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a050:	480c      	ldr	r0, [pc, #48]	; (1000a084 <ble_scan_info_handler+0x68>)
1000a052:	4b0d      	ldr	r3, [pc, #52]	; (1000a088 <ble_scan_info_handler+0x6c>)
1000a054:	4798      	blx	r3
1000a056:	480d      	ldr	r0, [pc, #52]	; (1000a08c <ble_scan_info_handler+0x70>)
1000a058:	4b0d      	ldr	r3, [pc, #52]	; (1000a090 <ble_scan_info_handler+0x74>)
1000a05a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a05c:	4b0d      	ldr	r3, [pc, #52]	; (1000a094 <ble_scan_info_handler+0x78>)
1000a05e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a060:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a062:	2800      	cmp	r0, #0
1000a064:	d006      	beq.n	1000a074 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000a066:	4807      	ldr	r0, [pc, #28]	; (1000a084 <ble_scan_info_handler+0x68>)
1000a068:	4b07      	ldr	r3, [pc, #28]	; (1000a088 <ble_scan_info_handler+0x6c>)
1000a06a:	4798      	blx	r3
1000a06c:	480a      	ldr	r0, [pc, #40]	; (1000a098 <ble_scan_info_handler+0x7c>)
1000a06e:	4b08      	ldr	r3, [pc, #32]	; (1000a090 <ble_scan_info_handler+0x74>)
1000a070:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a072:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000a074:	0018      	movs	r0, r3
1000a076:	bd10      	pop	{r4, pc}
1000a078:	10015d14 	.word	0x10015d14
1000a07c:	10017214 	.word	0x10017214
1000a080:	100107e7 	.word	0x100107e7
1000a084:	10014718 	.word	0x10014718
1000a088:	10010929 	.word	0x10010929
1000a08c:	100147f8 	.word	0x100147f8
1000a090:	10010809 	.word	0x10010809
1000a094:	1000cd25 	.word	0x1000cd25
1000a098:	10014830 	.word	0x10014830

1000a09c <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a09e:	464f      	mov	r7, r9
1000a0a0:	4646      	mov	r6, r8
1000a0a2:	b4c0      	push	{r6, r7}
1000a0a4:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a0a6:	8841      	ldrh	r1, [r0, #2]
1000a0a8:	4b3a      	ldr	r3, [pc, #232]	; (1000a194 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0aa:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a0ac:	891a      	ldrh	r2, [r3, #8]
1000a0ae:	428a      	cmp	r2, r1
1000a0b0:	d104      	bne.n	1000a0bc <ble_pair_done_handler+0x20>
1000a0b2:	001a      	movs	r2, r3
1000a0b4:	325e      	adds	r2, #94	; 0x5e
1000a0b6:	7812      	ldrb	r2, [r2, #0]
1000a0b8:	2a03      	cmp	r2, #3
1000a0ba:	d062      	beq.n	1000a182 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a0bc:	3401      	adds	r4, #1
1000a0be:	b2e4      	uxtb	r4, r4
1000a0c0:	337c      	adds	r3, #124	; 0x7c
1000a0c2:	2c05      	cmp	r4, #5
1000a0c4:	d1f2      	bne.n	1000a0ac <ble_pair_done_handler+0x10>
1000a0c6:	e02b      	b.n	1000a120 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a0c8:	0163      	lsls	r3, r4, #5
1000a0ca:	1b1c      	subs	r4, r3, r4
1000a0cc:	00a4      	lsls	r4, r4, #2
1000a0ce:	4b31      	ldr	r3, [pc, #196]	; (1000a194 <ble_pair_done_handler+0xf8>)
1000a0d0:	191c      	adds	r4, r3, r4
1000a0d2:	345e      	adds	r4, #94	; 0x5e
1000a0d4:	7823      	ldrb	r3, [r4, #0]
1000a0d6:	2b01      	cmp	r3, #1
1000a0d8:	d913      	bls.n	1000a102 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000a0da:	482f      	ldr	r0, [pc, #188]	; (1000a198 <ble_pair_done_handler+0xfc>)
1000a0dc:	4b2f      	ldr	r3, [pc, #188]	; (1000a19c <ble_pair_done_handler+0x100>)
1000a0de:	4798      	blx	r3
1000a0e0:	482f      	ldr	r0, [pc, #188]	; (1000a1a0 <ble_pair_done_handler+0x104>)
1000a0e2:	4b30      	ldr	r3, [pc, #192]	; (1000a1a4 <ble_pair_done_handler+0x108>)
1000a0e4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a0e6:	8868      	ldrh	r0, [r5, #2]
1000a0e8:	2113      	movs	r1, #19
1000a0ea:	4b2f      	ldr	r3, [pc, #188]	; (1000a1a8 <ble_pair_done_handler+0x10c>)
1000a0ec:	4798      	blx	r3
1000a0ee:	1e06      	subs	r6, r0, #0
1000a0f0:	d04b      	beq.n	1000a18a <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000a0f2:	4829      	ldr	r0, [pc, #164]	; (1000a198 <ble_pair_done_handler+0xfc>)
1000a0f4:	4b29      	ldr	r3, [pc, #164]	; (1000a19c <ble_pair_done_handler+0x100>)
1000a0f6:	4798      	blx	r3
1000a0f8:	482c      	ldr	r0, [pc, #176]	; (1000a1ac <ble_pair_done_handler+0x110>)
1000a0fa:	4b2a      	ldr	r3, [pc, #168]	; (1000a1a4 <ble_pair_done_handler+0x108>)
1000a0fc:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a0fe:	26e2      	movs	r6, #226	; 0xe2
1000a100:	e043      	b.n	1000a18a <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a102:	2600      	movs	r6, #0
1000a104:	e041      	b.n	1000a18a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a106:	4e24      	ldr	r6, [pc, #144]	; (1000a198 <ble_pair_done_handler+0xfc>)
1000a108:	0030      	movs	r0, r6
1000a10a:	4d24      	ldr	r5, [pc, #144]	; (1000a19c <ble_pair_done_handler+0x100>)
1000a10c:	47a8      	blx	r5
1000a10e:	4828      	ldr	r0, [pc, #160]	; (1000a1b0 <ble_pair_done_handler+0x114>)
1000a110:	4c24      	ldr	r4, [pc, #144]	; (1000a1a4 <ble_pair_done_handler+0x108>)
1000a112:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a114:	0030      	movs	r0, r6
1000a116:	47a8      	blx	r5
1000a118:	4826      	ldr	r0, [pc, #152]	; (1000a1b4 <ble_pair_done_handler+0x118>)
1000a11a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a11c:	26e2      	movs	r6, #226	; 0xe2
1000a11e:	e034      	b.n	1000a18a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a120:	792b      	ldrb	r3, [r5, #4]
1000a122:	2b00      	cmp	r3, #0
1000a124:	d1d0      	bne.n	1000a0c8 <ble_pair_done_handler+0x2c>
1000a126:	e7ee      	b.n	1000a106 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a128:	481b      	ldr	r0, [pc, #108]	; (1000a198 <ble_pair_done_handler+0xfc>)
1000a12a:	4b1c      	ldr	r3, [pc, #112]	; (1000a19c <ble_pair_done_handler+0x100>)
1000a12c:	4798      	blx	r3
1000a12e:	4820      	ldr	r0, [pc, #128]	; (1000a1b0 <ble_pair_done_handler+0x114>)
1000a130:	4b1c      	ldr	r3, [pc, #112]	; (1000a1a4 <ble_pair_done_handler+0x108>)
1000a132:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a134:	782a      	ldrb	r2, [r5, #0]
1000a136:	4b17      	ldr	r3, [pc, #92]	; (1000a194 <ble_pair_done_handler+0xf8>)
1000a138:	4699      	mov	r9, r3
1000a13a:	0167      	lsls	r7, r4, #5
1000a13c:	1b3b      	subs	r3, r7, r4
1000a13e:	009b      	lsls	r3, r3, #2
1000a140:	444b      	add	r3, r9
1000a142:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a144:	792a      	ldrb	r2, [r5, #4]
1000a146:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a148:	335e      	adds	r3, #94	; 0x5e
1000a14a:	2205      	movs	r2, #5
1000a14c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a14e:	1b38      	subs	r0, r7, r4
1000a150:	0080      	lsls	r0, r0, #2
1000a152:	4448      	add	r0, r9
1000a154:	3036      	adds	r0, #54	; 0x36
1000a156:	0029      	movs	r1, r5
1000a158:	3122      	adds	r1, #34	; 0x22
1000a15a:	320b      	adds	r2, #11
1000a15c:	4b16      	ldr	r3, [pc, #88]	; (1000a1b8 <ble_pair_done_handler+0x11c>)
1000a15e:	4698      	mov	r8, r3
1000a160:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a162:	1b38      	subs	r0, r7, r4
1000a164:	0080      	lsls	r0, r0, #2
1000a166:	4448      	add	r0, r9
1000a168:	3046      	adds	r0, #70	; 0x46
1000a16a:	0029      	movs	r1, r5
1000a16c:	3132      	adds	r1, #50	; 0x32
1000a16e:	2217      	movs	r2, #23
1000a170:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a172:	1b38      	subs	r0, r7, r4
1000a174:	0080      	lsls	r0, r0, #2
1000a176:	4448      	add	r0, r9
1000a178:	301a      	adds	r0, #26
1000a17a:	1da9      	adds	r1, r5, #6
1000a17c:	221c      	movs	r2, #28
1000a17e:	47c0      	blx	r8
1000a180:	e003      	b.n	1000a18a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a182:	792e      	ldrb	r6, [r5, #4]
1000a184:	2e00      	cmp	r6, #0
1000a186:	d0cf      	beq.n	1000a128 <ble_pair_done_handler+0x8c>
1000a188:	e79e      	b.n	1000a0c8 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a18a:	0030      	movs	r0, r6
1000a18c:	bc0c      	pop	{r2, r3}
1000a18e:	4690      	mov	r8, r2
1000a190:	4699      	mov	r9, r3
1000a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a194:	10016f30 	.word	0x10016f30
1000a198:	10014718 	.word	0x10014718
1000a19c:	10010929 	.word	0x10010929
1000a1a0:	10014848 	.word	0x10014848
1000a1a4:	10010809 	.word	0x10010809
1000a1a8:	1000cd45 	.word	0x1000cd45
1000a1ac:	10014868 	.word	0x10014868
1000a1b0:	10014884 	.word	0x10014884
1000a1b4:	100148b0 	.word	0x100148b0
1000a1b8:	100107e7 	.word	0x100107e7

1000a1bc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a1bc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a1be:	8800      	ldrh	r0, [r0, #0]
1000a1c0:	2378      	movs	r3, #120	; 0x78
1000a1c2:	2201      	movs	r2, #1
1000a1c4:	2101      	movs	r1, #1
1000a1c6:	4c02      	ldr	r4, [pc, #8]	; (1000a1d0 <ble_conn_param_update_req+0x14>)
1000a1c8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a1ca:	2000      	movs	r0, #0
1000a1cc:	bd10      	pop	{r4, pc}
1000a1ce:	46c0      	nop			; (mov r8, r8)
1000a1d0:	1000cd65 	.word	0x1000cd65

1000a1d4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a1d6:	4657      	mov	r7, sl
1000a1d8:	464e      	mov	r6, r9
1000a1da:	4645      	mov	r5, r8
1000a1dc:	b4e0      	push	{r5, r6, r7}
1000a1de:	b084      	sub	sp, #16
1000a1e0:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a1e2:	2209      	movs	r2, #9
1000a1e4:	2100      	movs	r1, #0
1000a1e6:	a801      	add	r0, sp, #4
1000a1e8:	4b6b      	ldr	r3, [pc, #428]	; (1000a398 <ble_slave_security_request_handler+0x1c4>)
1000a1ea:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a1ec:	8825      	ldrh	r5, [r4, #0]
1000a1ee:	496b      	ldr	r1, [pc, #428]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a1f0:	000a      	movs	r2, r1
1000a1f2:	2300      	movs	r3, #0
1000a1f4:	8910      	ldrh	r0, [r2, #8]
1000a1f6:	42a8      	cmp	r0, r5
1000a1f8:	d116      	bne.n	1000a228 <ble_slave_security_request_handler+0x54>
1000a1fa:	0010      	movs	r0, r2
1000a1fc:	305e      	adds	r0, #94	; 0x5e
1000a1fe:	7800      	ldrb	r0, [r0, #0]
1000a200:	2802      	cmp	r0, #2
1000a202:	d111      	bne.n	1000a228 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a204:	4865      	ldr	r0, [pc, #404]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a206:	015a      	lsls	r2, r3, #5
1000a208:	1ad6      	subs	r6, r2, r3
1000a20a:	00b6      	lsls	r6, r6, #2
1000a20c:	1986      	adds	r6, r0, r6
1000a20e:	365e      	adds	r6, #94	; 0x5e
1000a210:	2206      	movs	r2, #6
1000a212:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a214:	32f9      	adds	r2, #249	; 0xf9
1000a216:	4013      	ands	r3, r2
1000a218:	015a      	lsls	r2, r3, #5
1000a21a:	1ad2      	subs	r2, r2, r3
1000a21c:	0092      	lsls	r2, r2, #2
1000a21e:	1882      	adds	r2, r0, r2
1000a220:	7d12      	ldrb	r2, [r2, #20]
1000a222:	07d0      	lsls	r0, r2, #31
1000a224:	d405      	bmi.n	1000a232 <ble_slave_security_request_handler+0x5e>
1000a226:	e01b      	b.n	1000a260 <ble_slave_security_request_handler+0x8c>
1000a228:	3301      	adds	r3, #1
1000a22a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a22c:	2b05      	cmp	r3, #5
1000a22e:	d1e1      	bne.n	1000a1f4 <ble_slave_security_request_handler+0x20>
1000a230:	e01e      	b.n	1000a270 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a232:	78e0      	ldrb	r0, [r4, #3]
1000a234:	2800      	cmp	r0, #0
1000a236:	d013      	beq.n	1000a260 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a238:	0159      	lsls	r1, r3, #5
1000a23a:	1ac9      	subs	r1, r1, r3
1000a23c:	008b      	lsls	r3, r1, #2
1000a23e:	4957      	ldr	r1, [pc, #348]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a240:	18c9      	adds	r1, r1, r3
1000a242:	311a      	adds	r1, #26
1000a244:	8820      	ldrh	r0, [r4, #0]
1000a246:	4b56      	ldr	r3, [pc, #344]	; (1000a3a0 <ble_slave_security_request_handler+0x1cc>)
1000a248:	4798      	blx	r3
1000a24a:	2800      	cmp	r0, #0
1000a24c:	d100      	bne.n	1000a250 <ble_slave_security_request_handler+0x7c>
1000a24e:	e09d      	b.n	1000a38c <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a250:	4854      	ldr	r0, [pc, #336]	; (1000a3a4 <ble_slave_security_request_handler+0x1d0>)
1000a252:	4b55      	ldr	r3, [pc, #340]	; (1000a3a8 <ble_slave_security_request_handler+0x1d4>)
1000a254:	4798      	blx	r3
1000a256:	4855      	ldr	r0, [pc, #340]	; (1000a3ac <ble_slave_security_request_handler+0x1d8>)
1000a258:	4b55      	ldr	r3, [pc, #340]	; (1000a3b0 <ble_slave_security_request_handler+0x1dc>)
1000a25a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a25c:	20e2      	movs	r0, #226	; 0xe2
1000a25e:	e095      	b.n	1000a38c <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a260:	015a      	lsls	r2, r3, #5
1000a262:	1ad3      	subs	r3, r2, r3
1000a264:	009b      	lsls	r3, r3, #2
1000a266:	4a4d      	ldr	r2, [pc, #308]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a268:	18d3      	adds	r3, r2, r3
1000a26a:	335e      	adds	r3, #94	; 0x5e
1000a26c:	2202      	movs	r2, #2
1000a26e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a270:	8825      	ldrh	r5, [r4, #0]
1000a272:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a274:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a276:	0016      	movs	r6, r2
1000a278:	8908      	ldrh	r0, [r1, #8]
1000a27a:	42a8      	cmp	r0, r5
1000a27c:	d10d      	bne.n	1000a29a <ble_slave_security_request_handler+0xc6>
1000a27e:	0008      	movs	r0, r1
1000a280:	305e      	adds	r0, #94	; 0x5e
1000a282:	7800      	ldrb	r0, [r0, #0]
1000a284:	2802      	cmp	r0, #2
1000a286:	d108      	bne.n	1000a29a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a288:	0152      	lsls	r2, r2, #5
1000a28a:	1b92      	subs	r2, r2, r6
1000a28c:	0096      	lsls	r6, r2, #2
1000a28e:	4a43      	ldr	r2, [pc, #268]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a290:	1992      	adds	r2, r2, r6
1000a292:	325e      	adds	r2, #94	; 0x5e
1000a294:	2103      	movs	r1, #3
1000a296:	7011      	strb	r1, [r2, #0]
			break;
1000a298:	e005      	b.n	1000a2a6 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a29a:	3301      	adds	r3, #1
1000a29c:	b2db      	uxtb	r3, r3
1000a29e:	3201      	adds	r2, #1
1000a2a0:	317c      	adds	r1, #124	; 0x7c
1000a2a2:	2b05      	cmp	r3, #5
1000a2a4:	d1e7      	bne.n	1000a276 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a2a6:	aa01      	add	r2, sp, #4
1000a2a8:	2102      	movs	r1, #2
1000a2aa:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a2ac:	78e1      	ldrb	r1, [r4, #3]
1000a2ae:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a2b0:	2101      	movs	r1, #1
1000a2b2:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a2b4:	3103      	adds	r1, #3
1000a2b6:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a2b8:	001f      	movs	r7, r3
1000a2ba:	015a      	lsls	r2, r3, #5
1000a2bc:	1ad2      	subs	r2, r2, r3
1000a2be:	0092      	lsls	r2, r2, #2
1000a2c0:	4936      	ldr	r1, [pc, #216]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a2c2:	5c52      	ldrb	r2, [r2, r1]
1000a2c4:	2a02      	cmp	r2, #2
1000a2c6:	d104      	bne.n	1000a2d2 <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a2c8:	aa01      	add	r2, sp, #4
1000a2ca:	2103      	movs	r1, #3
1000a2cc:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a2ce:	71d1      	strb	r1, [r2, #7]
1000a2d0:	e003      	b.n	1000a2da <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a2d2:	aa01      	add	r2, sp, #4
1000a2d4:	2101      	movs	r1, #1
1000a2d6:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a2d8:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a2da:	aa01      	add	r2, sp, #4
1000a2dc:	2110      	movs	r1, #16
1000a2de:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a2e0:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a2e2:	017a      	lsls	r2, r7, #5
1000a2e4:	1bd2      	subs	r2, r2, r7
1000a2e6:	0092      	lsls	r2, r2, #2
1000a2e8:	492c      	ldr	r1, [pc, #176]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a2ea:	188a      	adds	r2, r1, r2
1000a2ec:	7e12      	ldrb	r2, [r2, #24]
1000a2ee:	2a40      	cmp	r2, #64	; 0x40
1000a2f0:	d134      	bne.n	1000a35c <ble_slave_security_request_handler+0x188>
1000a2f2:	015a      	lsls	r2, r3, #5
1000a2f4:	1ad3      	subs	r3, r2, r3
1000a2f6:	009b      	lsls	r3, r3, #2
1000a2f8:	469a      	mov	sl, r3
1000a2fa:	001e      	movs	r6, r3
1000a2fc:	3660      	adds	r6, #96	; 0x60
1000a2fe:	1876      	adds	r6, r6, r1
1000a300:	4655      	mov	r5, sl
1000a302:	3568      	adds	r5, #104	; 0x68
1000a304:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a306:	4b2b      	ldr	r3, [pc, #172]	; (1000a3b4 <ble_slave_security_request_handler+0x1e0>)
1000a308:	4699      	mov	r9, r3
1000a30a:	230f      	movs	r3, #15
1000a30c:	4698      	mov	r8, r3
1000a30e:	47c8      	blx	r9
1000a310:	4643      	mov	r3, r8
1000a312:	4018      	ands	r0, r3
1000a314:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a316:	47c8      	blx	r9
1000a318:	4643      	mov	r3, r8
1000a31a:	4018      	ands	r0, r3
1000a31c:	74b0      	strb	r0, [r6, #18]
1000a31e:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a320:	42ae      	cmp	r6, r5
1000a322:	d1f4      	bne.n	1000a30e <ble_slave_security_request_handler+0x13a>
1000a324:	4656      	mov	r6, sl
1000a326:	3670      	adds	r6, #112	; 0x70
1000a328:	4a1c      	ldr	r2, [pc, #112]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a32a:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a32c:	4b21      	ldr	r3, [pc, #132]	; (1000a3b4 <ble_slave_security_request_handler+0x1e0>)
1000a32e:	4699      	mov	r9, r3
1000a330:	230f      	movs	r3, #15
1000a332:	4698      	mov	r8, r3
1000a334:	47c8      	blx	r9
1000a336:	4643      	mov	r3, r8
1000a338:	4018      	ands	r0, r3
1000a33a:	7028      	strb	r0, [r5, #0]
1000a33c:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a33e:	42b5      	cmp	r5, r6
1000a340:	d1f8      	bne.n	1000a334 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a342:	4b1c      	ldr	r3, [pc, #112]	; (1000a3b4 <ble_slave_security_request_handler+0x1e0>)
1000a344:	4798      	blx	r3
1000a346:	017b      	lsls	r3, r7, #5
1000a348:	1bdb      	subs	r3, r3, r7
1000a34a:	009b      	lsls	r3, r3, #2
1000a34c:	4a13      	ldr	r2, [pc, #76]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a34e:	18d3      	adds	r3, r2, r3
1000a350:	001a      	movs	r2, r3
1000a352:	3270      	adds	r2, #112	; 0x70
1000a354:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a356:	337a      	adds	r3, #122	; 0x7a
1000a358:	2210      	movs	r2, #16
1000a35a:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a35c:	017a      	lsls	r2, r7, #5
1000a35e:	1bd7      	subs	r7, r2, r7
1000a360:	00bf      	lsls	r7, r7, #2
1000a362:	3760      	adds	r7, #96	; 0x60
1000a364:	4a0d      	ldr	r2, [pc, #52]	; (1000a39c <ble_slave_security_request_handler+0x1c8>)
1000a366:	18ba      	adds	r2, r7, r2
1000a368:	8820      	ldrh	r0, [r4, #0]
1000a36a:	2300      	movs	r3, #0
1000a36c:	a901      	add	r1, sp, #4
1000a36e:	4c12      	ldr	r4, [pc, #72]	; (1000a3b8 <ble_slave_security_request_handler+0x1e4>)
1000a370:	47a0      	blx	r4
1000a372:	2800      	cmp	r0, #0
1000a374:	d00a      	beq.n	1000a38c <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a376:	ab01      	add	r3, sp, #4
1000a378:	2200      	movs	r2, #0
1000a37a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a37c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a37e:	4809      	ldr	r0, [pc, #36]	; (1000a3a4 <ble_slave_security_request_handler+0x1d0>)
1000a380:	4b09      	ldr	r3, [pc, #36]	; (1000a3a8 <ble_slave_security_request_handler+0x1d4>)
1000a382:	4798      	blx	r3
1000a384:	480d      	ldr	r0, [pc, #52]	; (1000a3bc <ble_slave_security_request_handler+0x1e8>)
1000a386:	4b0a      	ldr	r3, [pc, #40]	; (1000a3b0 <ble_slave_security_request_handler+0x1dc>)
1000a388:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a38a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a38c:	b004      	add	sp, #16
1000a38e:	bc1c      	pop	{r2, r3, r4}
1000a390:	4690      	mov	r8, r2
1000a392:	4699      	mov	r9, r3
1000a394:	46a2      	mov	sl, r4
1000a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a398:	100107f9 	.word	0x100107f9
1000a39c:	10016f30 	.word	0x10016f30
1000a3a0:	1000d29d 	.word	0x1000d29d
1000a3a4:	10014718 	.word	0x10014718
1000a3a8:	10010929 	.word	0x10010929
1000a3ac:	100148e0 	.word	0x100148e0
1000a3b0:	10010809 	.word	0x10010809
1000a3b4:	1001093d 	.word	0x1001093d
1000a3b8:	1000d0b1 	.word	0x1000d0b1
1000a3bc:	100148f8 	.word	0x100148f8

1000a3c0 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3c2:	465f      	mov	r7, fp
1000a3c4:	4656      	mov	r6, sl
1000a3c6:	464d      	mov	r5, r9
1000a3c8:	4644      	mov	r4, r8
1000a3ca:	b4f0      	push	{r4, r5, r6, r7}
1000a3cc:	b085      	sub	sp, #20
1000a3ce:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3d0:	8804      	ldrh	r4, [r0, #0]
1000a3d2:	4a49      	ldr	r2, [pc, #292]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a3d4:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3d6:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3d8:	8910      	ldrh	r0, [r2, #8]
1000a3da:	42a0      	cmp	r0, r4
1000a3dc:	d10d      	bne.n	1000a3fa <ble_pair_request_handler+0x3a>
1000a3de:	0010      	movs	r0, r2
1000a3e0:	305e      	adds	r0, #94	; 0x5e
1000a3e2:	7800      	ldrb	r0, [r0, #0]
1000a3e4:	2802      	cmp	r0, #2
1000a3e6:	d108      	bne.n	1000a3fa <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a3e8:	014a      	lsls	r2, r1, #5
1000a3ea:	1a52      	subs	r2, r2, r1
1000a3ec:	0095      	lsls	r5, r2, #2
1000a3ee:	4a42      	ldr	r2, [pc, #264]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a3f0:	1952      	adds	r2, r2, r5
1000a3f2:	325e      	adds	r2, #94	; 0x5e
1000a3f4:	2103      	movs	r1, #3
1000a3f6:	7011      	strb	r1, [r2, #0]
			break;
1000a3f8:	e005      	b.n	1000a406 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3fa:	3301      	adds	r3, #1
1000a3fc:	b2db      	uxtb	r3, r3
1000a3fe:	3101      	adds	r1, #1
1000a400:	327c      	adds	r2, #124	; 0x7c
1000a402:	2b05      	cmp	r3, #5
1000a404:	d1e8      	bne.n	1000a3d8 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a406:	aa01      	add	r2, sp, #4
1000a408:	2102      	movs	r1, #2
1000a40a:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a40c:	3901      	subs	r1, #1
1000a40e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a410:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a412:	2100      	movs	r1, #0
1000a414:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a416:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a418:	001f      	movs	r7, r3
1000a41a:	015a      	lsls	r2, r3, #5
1000a41c:	1ad2      	subs	r2, r2, r3
1000a41e:	0092      	lsls	r2, r2, #2
1000a420:	4935      	ldr	r1, [pc, #212]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a422:	5c52      	ldrb	r2, [r2, r1]
1000a424:	2a02      	cmp	r2, #2
1000a426:	d104      	bne.n	1000a432 <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a428:	aa01      	add	r2, sp, #4
1000a42a:	2103      	movs	r1, #3
1000a42c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a42e:	71d1      	strb	r1, [r2, #7]
1000a430:	e003      	b.n	1000a43a <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a432:	aa01      	add	r2, sp, #4
1000a434:	2101      	movs	r1, #1
1000a436:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a438:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a43a:	aa01      	add	r2, sp, #4
1000a43c:	2110      	movs	r1, #16
1000a43e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a440:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a442:	017a      	lsls	r2, r7, #5
1000a444:	1bd2      	subs	r2, r2, r7
1000a446:	0092      	lsls	r2, r2, #2
1000a448:	492b      	ldr	r1, [pc, #172]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a44a:	188a      	adds	r2, r1, r2
1000a44c:	7e12      	ldrb	r2, [r2, #24]
1000a44e:	2a40      	cmp	r2, #64	; 0x40
1000a450:	d131      	bne.n	1000a4b6 <ble_pair_request_handler+0xf6>
1000a452:	015a      	lsls	r2, r3, #5
1000a454:	1ad3      	subs	r3, r2, r3
1000a456:	009b      	lsls	r3, r3, #2
1000a458:	469a      	mov	sl, r3
1000a45a:	001d      	movs	r5, r3
1000a45c:	3560      	adds	r5, #96	; 0x60
1000a45e:	186d      	adds	r5, r5, r1
1000a460:	4654      	mov	r4, sl
1000a462:	3468      	adds	r4, #104	; 0x68
1000a464:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a466:	4b25      	ldr	r3, [pc, #148]	; (1000a4fc <ble_pair_request_handler+0x13c>)
1000a468:	4699      	mov	r9, r3
1000a46a:	260f      	movs	r6, #15
1000a46c:	47c8      	blx	r9
1000a46e:	4030      	ands	r0, r6
1000a470:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a472:	47c8      	blx	r9
1000a474:	4030      	ands	r0, r6
1000a476:	74a8      	strb	r0, [r5, #18]
1000a478:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a47a:	42a5      	cmp	r5, r4
1000a47c:	d1f6      	bne.n	1000a46c <ble_pair_request_handler+0xac>
1000a47e:	4655      	mov	r5, sl
1000a480:	3570      	adds	r5, #112	; 0x70
1000a482:	4a1d      	ldr	r2, [pc, #116]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a484:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a486:	4b1d      	ldr	r3, [pc, #116]	; (1000a4fc <ble_pair_request_handler+0x13c>)
1000a488:	4699      	mov	r9, r3
1000a48a:	230f      	movs	r3, #15
1000a48c:	4698      	mov	r8, r3
1000a48e:	47c8      	blx	r9
1000a490:	4643      	mov	r3, r8
1000a492:	4018      	ands	r0, r3
1000a494:	7020      	strb	r0, [r4, #0]
1000a496:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a498:	42ac      	cmp	r4, r5
1000a49a:	d1f8      	bne.n	1000a48e <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a49c:	4b17      	ldr	r3, [pc, #92]	; (1000a4fc <ble_pair_request_handler+0x13c>)
1000a49e:	4798      	blx	r3
1000a4a0:	017b      	lsls	r3, r7, #5
1000a4a2:	1bdb      	subs	r3, r3, r7
1000a4a4:	009b      	lsls	r3, r3, #2
1000a4a6:	4a14      	ldr	r2, [pc, #80]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a4a8:	18d3      	adds	r3, r2, r3
1000a4aa:	001a      	movs	r2, r3
1000a4ac:	3270      	adds	r2, #112	; 0x70
1000a4ae:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a4b0:	337a      	adds	r3, #122	; 0x7a
1000a4b2:	2210      	movs	r2, #16
1000a4b4:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a4b6:	017a      	lsls	r2, r7, #5
1000a4b8:	1bd7      	subs	r7, r2, r7
1000a4ba:	00bf      	lsls	r7, r7, #2
1000a4bc:	3760      	adds	r7, #96	; 0x60
1000a4be:	4a0e      	ldr	r2, [pc, #56]	; (1000a4f8 <ble_pair_request_handler+0x138>)
1000a4c0:	18ba      	adds	r2, r7, r2
1000a4c2:	465b      	mov	r3, fp
1000a4c4:	8818      	ldrh	r0, [r3, #0]
1000a4c6:	2300      	movs	r3, #0
1000a4c8:	a901      	add	r1, sp, #4
1000a4ca:	4c0d      	ldr	r4, [pc, #52]	; (1000a500 <ble_pair_request_handler+0x140>)
1000a4cc:	47a0      	blx	r4
1000a4ce:	2800      	cmp	r0, #0
1000a4d0:	d00a      	beq.n	1000a4e8 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a4d2:	ab01      	add	r3, sp, #4
1000a4d4:	2200      	movs	r2, #0
1000a4d6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a4d8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a4da:	480a      	ldr	r0, [pc, #40]	; (1000a504 <ble_pair_request_handler+0x144>)
1000a4dc:	4b0a      	ldr	r3, [pc, #40]	; (1000a508 <ble_pair_request_handler+0x148>)
1000a4de:	4798      	blx	r3
1000a4e0:	480a      	ldr	r0, [pc, #40]	; (1000a50c <ble_pair_request_handler+0x14c>)
1000a4e2:	4b0b      	ldr	r3, [pc, #44]	; (1000a510 <ble_pair_request_handler+0x150>)
1000a4e4:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a4e6:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a4e8:	b005      	add	sp, #20
1000a4ea:	bc3c      	pop	{r2, r3, r4, r5}
1000a4ec:	4690      	mov	r8, r2
1000a4ee:	4699      	mov	r9, r3
1000a4f0:	46a2      	mov	sl, r4
1000a4f2:	46ab      	mov	fp, r5
1000a4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4f6:	46c0      	nop			; (mov r8, r8)
1000a4f8:	10016f30 	.word	0x10016f30
1000a4fc:	1001093d 	.word	0x1001093d
1000a500:	1000d0b1 	.word	0x1000d0b1
1000a504:	10014718 	.word	0x10014718
1000a508:	10010929 	.word	0x10010929
1000a50c:	10014924 	.word	0x10014924
1000a510:	10010809 	.word	0x10010809

1000a514 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a514:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a516:	b085      	sub	sp, #20
1000a518:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a51a:	2206      	movs	r2, #6
1000a51c:	493d      	ldr	r1, [pc, #244]	; (1000a614 <ble_pair_key_request_handler+0x100>)
1000a51e:	a802      	add	r0, sp, #8
1000a520:	4e3d      	ldr	r6, [pc, #244]	; (1000a618 <ble_pair_key_request_handler+0x104>)
1000a522:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a524:	ac01      	add	r4, sp, #4
1000a526:	2204      	movs	r2, #4
1000a528:	0029      	movs	r1, r5
1000a52a:	0020      	movs	r0, r4
1000a52c:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a52e:	78e3      	ldrb	r3, [r4, #3]
1000a530:	2b00      	cmp	r3, #0
1000a532:	d162      	bne.n	1000a5fa <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a534:	4839      	ldr	r0, [pc, #228]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a536:	4b3a      	ldr	r3, [pc, #232]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a538:	4798      	blx	r3
1000a53a:	483a      	ldr	r0, [pc, #232]	; (1000a624 <ble_pair_key_request_handler+0x110>)
1000a53c:	4b3a      	ldr	r3, [pc, #232]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a53e:	4798      	blx	r3
1000a540:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a542:	4c3a      	ldr	r4, [pc, #232]	; (1000a62c <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a544:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a546:	201e      	movs	r0, #30
1000a548:	47a0      	blx	r4
1000a54a:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a54c:	2b00      	cmp	r3, #0
1000a54e:	d11a      	bne.n	1000a586 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a550:	4f32      	ldr	r7, [pc, #200]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a552:	0038      	movs	r0, r7
1000a554:	4e32      	ldr	r6, [pc, #200]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a556:	47b0      	blx	r6
1000a558:	4835      	ldr	r0, [pc, #212]	; (1000a630 <ble_pair_key_request_handler+0x11c>)
1000a55a:	4c33      	ldr	r4, [pc, #204]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a55c:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a55e:	0038      	movs	r0, r7
1000a560:	47b0      	blx	r6
1000a562:	4834      	ldr	r0, [pc, #208]	; (1000a634 <ble_pair_key_request_handler+0x120>)
1000a564:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a566:	8828      	ldrh	r0, [r5, #0]
1000a568:	2113      	movs	r1, #19
1000a56a:	4b33      	ldr	r3, [pc, #204]	; (1000a638 <ble_pair_key_request_handler+0x124>)
1000a56c:	4798      	blx	r3
1000a56e:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a570:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a572:	2b00      	cmp	r3, #0
1000a574:	d04c      	beq.n	1000a610 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a576:	4829      	ldr	r0, [pc, #164]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a578:	4b29      	ldr	r3, [pc, #164]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a57a:	4798      	blx	r3
1000a57c:	482f      	ldr	r0, [pc, #188]	; (1000a63c <ble_pair_key_request_handler+0x128>)
1000a57e:	4b2a      	ldr	r3, [pc, #168]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a580:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a582:	20e2      	movs	r0, #226	; 0xe2
1000a584:	e044      	b.n	1000a610 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a586:	001a      	movs	r2, r3
1000a588:	3a30      	subs	r2, #48	; 0x30
1000a58a:	2a09      	cmp	r2, #9
1000a58c:	d8db      	bhi.n	1000a546 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a58e:	aa02      	add	r2, sp, #8
1000a590:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a592:	4038      	ands	r0, r7
1000a594:	4b2a      	ldr	r3, [pc, #168]	; (1000a640 <ble_pair_key_request_handler+0x12c>)
1000a596:	4798      	blx	r3
1000a598:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a59a:	2e06      	cmp	r6, #6
1000a59c:	d026      	beq.n	1000a5ec <ble_pair_key_request_handler+0xd8>
1000a59e:	e7d2      	b.n	1000a546 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a5a0:	481e      	ldr	r0, [pc, #120]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a5a2:	4b1f      	ldr	r3, [pc, #124]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a5a4:	4798      	blx	r3
1000a5a6:	4827      	ldr	r0, [pc, #156]	; (1000a644 <ble_pair_key_request_handler+0x130>)
1000a5a8:	4b1f      	ldr	r3, [pc, #124]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a5aa:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a5ac:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a5ae:	4e24      	ldr	r6, [pc, #144]	; (1000a640 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a5b0:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a5b2:	5ce0      	ldrb	r0, [r4, r3]
1000a5b4:	47b0      	blx	r6
1000a5b6:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a5b8:	2c06      	cmp	r4, #6
1000a5ba:	d1f9      	bne.n	1000a5b0 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a5bc:	ab01      	add	r3, sp, #4
1000a5be:	7899      	ldrb	r1, [r3, #2]
1000a5c0:	8828      	ldrh	r0, [r5, #0]
1000a5c2:	aa02      	add	r2, sp, #8
1000a5c4:	4b20      	ldr	r3, [pc, #128]	; (1000a648 <ble_pair_key_request_handler+0x134>)
1000a5c6:	4798      	blx	r3
1000a5c8:	2800      	cmp	r0, #0
1000a5ca:	d021      	beq.n	1000a610 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a5cc:	4813      	ldr	r0, [pc, #76]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a5ce:	4b14      	ldr	r3, [pc, #80]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a5d0:	4798      	blx	r3
1000a5d2:	481e      	ldr	r0, [pc, #120]	; (1000a64c <ble_pair_key_request_handler+0x138>)
1000a5d4:	4b14      	ldr	r3, [pc, #80]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a5d6:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a5d8:	2000      	movs	r0, #0
1000a5da:	e019      	b.n	1000a610 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a5dc:	480f      	ldr	r0, [pc, #60]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a5de:	4b10      	ldr	r3, [pc, #64]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a5e0:	4798      	blx	r3
1000a5e2:	481b      	ldr	r0, [pc, #108]	; (1000a650 <ble_pair_key_request_handler+0x13c>)
1000a5e4:	4b10      	ldr	r3, [pc, #64]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a5e6:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a5e8:	2000      	movs	r0, #0
1000a5ea:	e011      	b.n	1000a610 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a5ec:	480b      	ldr	r0, [pc, #44]	; (1000a61c <ble_pair_key_request_handler+0x108>)
1000a5ee:	4b0c      	ldr	r3, [pc, #48]	; (1000a620 <ble_pair_key_request_handler+0x10c>)
1000a5f0:	4798      	blx	r3
1000a5f2:	4818      	ldr	r0, [pc, #96]	; (1000a654 <ble_pair_key_request_handler+0x140>)
1000a5f4:	4b0c      	ldr	r3, [pc, #48]	; (1000a628 <ble_pair_key_request_handler+0x114>)
1000a5f6:	4798      	blx	r3
1000a5f8:	e7d8      	b.n	1000a5ac <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a5fa:	ab01      	add	r3, sp, #4
1000a5fc:	885a      	ldrh	r2, [r3, #2]
1000a5fe:	2380      	movs	r3, #128	; 0x80
1000a600:	005b      	lsls	r3, r3, #1
1000a602:	429a      	cmp	r2, r3
1000a604:	d0cc      	beq.n	1000a5a0 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a606:	ab01      	add	r3, sp, #4
1000a608:	789b      	ldrb	r3, [r3, #2]
1000a60a:	2b01      	cmp	r3, #1
1000a60c:	d0e6      	beq.n	1000a5dc <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a60e:	2000      	movs	r0, #0
}
1000a610:	b005      	add	sp, #20
1000a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a614:	100146d4 	.word	0x100146d4
1000a618:	100107e7 	.word	0x100107e7
1000a61c:	10014718 	.word	0x10014718
1000a620:	10010929 	.word	0x10010929
1000a624:	1001494c 	.word	0x1001494c
1000a628:	10010809 	.word	0x10010809
1000a62c:	1000b235 	.word	0x1000b235
1000a630:	10014974 	.word	0x10014974
1000a634:	10014980 	.word	0x10014980
1000a638:	1000cd45 	.word	0x1000cd45
1000a63c:	10014868 	.word	0x10014868
1000a640:	1001083d 	.word	0x1001083d
1000a644:	10014994 	.word	0x10014994
1000a648:	1000d1e1 	.word	0x1000d1e1
1000a64c:	100149cc 	.word	0x100149cc
1000a650:	100149e4 	.word	0x100149e4
1000a654:	10014a00 	.word	0x10014a00

1000a658 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a65a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a65c:	8805      	ldrh	r5, [r0, #0]
1000a65e:	4b2f      	ldr	r3, [pc, #188]	; (1000a71c <ble_encryption_request_handler+0xc4>)
1000a660:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a662:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a664:	0010      	movs	r0, r2
1000a666:	8919      	ldrh	r1, [r3, #8]
1000a668:	42a9      	cmp	r1, r5
1000a66a:	d116      	bne.n	1000a69a <ble_encryption_request_handler+0x42>
1000a66c:	0019      	movs	r1, r3
1000a66e:	315e      	adds	r1, #94	; 0x5e
1000a670:	7809      	ldrb	r1, [r1, #0]
1000a672:	2901      	cmp	r1, #1
1000a674:	d911      	bls.n	1000a69a <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a676:	4929      	ldr	r1, [pc, #164]	; (1000a71c <ble_encryption_request_handler+0xc4>)
1000a678:	0152      	lsls	r2, r2, #5
1000a67a:	1a10      	subs	r0, r2, r0
1000a67c:	0080      	lsls	r0, r0, #2
1000a67e:	1808      	adds	r0, r1, r0
1000a680:	305e      	adds	r0, #94	; 0x5e
1000a682:	2306      	movs	r3, #6
1000a684:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a686:	0162      	lsls	r2, r4, #5
1000a688:	1b13      	subs	r3, r2, r4
1000a68a:	009b      	lsls	r3, r3, #2
1000a68c:	18cb      	adds	r3, r1, r3
1000a68e:	3370      	adds	r3, #112	; 0x70
1000a690:	881a      	ldrh	r2, [r3, #0]
1000a692:	8873      	ldrh	r3, [r6, #2]
1000a694:	429a      	cmp	r2, r3
1000a696:	d113      	bne.n	1000a6c0 <ble_encryption_request_handler+0x68>
1000a698:	e006      	b.n	1000a6a8 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a69a:	3401      	adds	r4, #1
1000a69c:	b2e4      	uxtb	r4, r4
1000a69e:	3201      	adds	r2, #1
1000a6a0:	337c      	adds	r3, #124	; 0x7c
1000a6a2:	2c05      	cmp	r4, #5
1000a6a4:	d1de      	bne.n	1000a664 <ble_encryption_request_handler+0xc>
1000a6a6:	e00b      	b.n	1000a6c0 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a6a8:	0161      	lsls	r1, r4, #5
1000a6aa:	1b09      	subs	r1, r1, r4
1000a6ac:	0089      	lsls	r1, r1, #2
1000a6ae:	4b1b      	ldr	r3, [pc, #108]	; (1000a71c <ble_encryption_request_handler+0xc4>)
1000a6b0:	1859      	adds	r1, r3, r1
1000a6b2:	3172      	adds	r1, #114	; 0x72
1000a6b4:	1d30      	adds	r0, r6, #4
1000a6b6:	2208      	movs	r2, #8
1000a6b8:	4b19      	ldr	r3, [pc, #100]	; (1000a720 <ble_encryption_request_handler+0xc8>)
1000a6ba:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a6bc:	2800      	cmp	r0, #0
1000a6be:	d015      	beq.n	1000a6ec <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a6c0:	4f18      	ldr	r7, [pc, #96]	; (1000a724 <ble_encryption_request_handler+0xcc>)
1000a6c2:	0038      	movs	r0, r7
1000a6c4:	4e18      	ldr	r6, [pc, #96]	; (1000a728 <ble_encryption_request_handler+0xd0>)
1000a6c6:	47b0      	blx	r6
1000a6c8:	4818      	ldr	r0, [pc, #96]	; (1000a72c <ble_encryption_request_handler+0xd4>)
1000a6ca:	4d19      	ldr	r5, [pc, #100]	; (1000a730 <ble_encryption_request_handler+0xd8>)
1000a6cc:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a6ce:	0038      	movs	r0, r7
1000a6d0:	47b0      	blx	r6
1000a6d2:	4818      	ldr	r0, [pc, #96]	; (1000a734 <ble_encryption_request_handler+0xdc>)
1000a6d4:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a6d6:	0163      	lsls	r3, r4, #5
1000a6d8:	1b1c      	subs	r4, r3, r4
1000a6da:	00a4      	lsls	r4, r4, #2
1000a6dc:	4b0f      	ldr	r3, [pc, #60]	; (1000a71c <ble_encryption_request_handler+0xc4>)
1000a6de:	191c      	adds	r4, r3, r4
1000a6e0:	8920      	ldrh	r0, [r4, #8]
1000a6e2:	2105      	movs	r1, #5
1000a6e4:	4b14      	ldr	r3, [pc, #80]	; (1000a738 <ble_encryption_request_handler+0xe0>)
1000a6e6:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a6e8:	20e2      	movs	r0, #226	; 0xe2
1000a6ea:	e016      	b.n	1000a71a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a6ec:	0162      	lsls	r2, r4, #5
1000a6ee:	1b13      	subs	r3, r2, r4
1000a6f0:	009b      	lsls	r3, r3, #2
1000a6f2:	3360      	adds	r3, #96	; 0x60
1000a6f4:	4909      	ldr	r1, [pc, #36]	; (1000a71c <ble_encryption_request_handler+0xc4>)
1000a6f6:	185b      	adds	r3, r3, r1
1000a6f8:	1b14      	subs	r4, r2, r4
1000a6fa:	00a4      	lsls	r4, r4, #2
1000a6fc:	190c      	adds	r4, r1, r4
1000a6fe:	7d21      	ldrb	r1, [r4, #20]
1000a700:	8830      	ldrh	r0, [r6, #0]
1000a702:	2201      	movs	r2, #1
1000a704:	4c0d      	ldr	r4, [pc, #52]	; (1000a73c <ble_encryption_request_handler+0xe4>)
1000a706:	47a0      	blx	r4
1000a708:	2800      	cmp	r0, #0
1000a70a:	d006      	beq.n	1000a71a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a70c:	4805      	ldr	r0, [pc, #20]	; (1000a724 <ble_encryption_request_handler+0xcc>)
1000a70e:	4b06      	ldr	r3, [pc, #24]	; (1000a728 <ble_encryption_request_handler+0xd0>)
1000a710:	4798      	blx	r3
1000a712:	480b      	ldr	r0, [pc, #44]	; (1000a740 <ble_encryption_request_handler+0xe8>)
1000a714:	4b06      	ldr	r3, [pc, #24]	; (1000a730 <ble_encryption_request_handler+0xd8>)
1000a716:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a718:	2000      	movs	r0, #0
}
1000a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a71c:	10016f30 	.word	0x10016f30
1000a720:	100107c9 	.word	0x100107c9
1000a724:	10014718 	.word	0x10014718
1000a728:	10010929 	.word	0x10010929
1000a72c:	10014a14 	.word	0x10014a14
1000a730:	10010809 	.word	0x10010809
1000a734:	10014a4c 	.word	0x10014a4c
1000a738:	1000cd45 	.word	0x1000cd45
1000a73c:	1000d315 	.word	0x1000d315
1000a740:	10014aa4 	.word	0x10014aa4

1000a744 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a744:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a746:	2a00      	cmp	r2, #0
1000a748:	d047      	beq.n	1000a7da <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a74a:	2906      	cmp	r1, #6
1000a74c:	d847      	bhi.n	1000a7de <ble_mgr_events_callback_handler+0x9a>
1000a74e:	0089      	lsls	r1, r1, #2
1000a750:	4b28      	ldr	r3, [pc, #160]	; (1000a7f4 <ble_mgr_events_callback_handler+0xb0>)
1000a752:	585b      	ldr	r3, [r3, r1]
1000a754:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a756:	4b28      	ldr	r3, [pc, #160]	; (1000a7f8 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a758:	2405      	movs	r4, #5
1000a75a:	e00a      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a75c:	4b27      	ldr	r3, [pc, #156]	; (1000a7fc <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a75e:	2401      	movs	r4, #1
			}
			break;
1000a760:	e007      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a762:	4b27      	ldr	r3, [pc, #156]	; (1000a800 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a764:	2405      	movs	r4, #5
			}
			break;
1000a766:	e004      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a768:	4b26      	ldr	r3, [pc, #152]	; (1000a804 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a76a:	2401      	movs	r4, #1
			}
			break;
1000a76c:	e001      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a76e:	4b26      	ldr	r3, [pc, #152]	; (1000a808 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a770:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a772:	2800      	cmp	r0, #0
1000a774:	d116      	bne.n	1000a7a4 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a776:	6819      	ldr	r1, [r3, #0]
1000a778:	2900      	cmp	r1, #0
1000a77a:	d10b      	bne.n	1000a794 <ble_mgr_events_callback_handler+0x50>
1000a77c:	e006      	b.n	1000a78c <ble_mgr_events_callback_handler+0x48>
1000a77e:	001d      	movs	r5, r3
1000a780:	3304      	adds	r3, #4
1000a782:	1f18      	subs	r0, r3, #4
1000a784:	6800      	ldr	r0, [r0, #0]
1000a786:	2800      	cmp	r0, #0
1000a788:	d106      	bne.n	1000a798 <ble_mgr_events_callback_handler+0x54>
1000a78a:	e000      	b.n	1000a78e <ble_mgr_events_callback_handler+0x4a>
1000a78c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a78e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a790:	2101      	movs	r1, #1
						break;
1000a792:	e02c      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
1000a794:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a796:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a798:	3101      	adds	r1, #1
1000a79a:	b2c9      	uxtb	r1, r1
1000a79c:	42a1      	cmp	r1, r4
1000a79e:	d3ee      	bcc.n	1000a77e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a7a0:	2100      	movs	r1, #0
1000a7a2:	e024      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
1000a7a4:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a7a6:	2801      	cmp	r0, #1
1000a7a8:	d121      	bne.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a7aa:	6819      	ldr	r1, [r3, #0]
1000a7ac:	428a      	cmp	r2, r1
1000a7ae:	d10c      	bne.n	1000a7ca <ble_mgr_events_callback_handler+0x86>
1000a7b0:	e006      	b.n	1000a7c0 <ble_mgr_events_callback_handler+0x7c>
1000a7b2:	001d      	movs	r5, r3
1000a7b4:	3304      	adds	r3, #4
1000a7b6:	1f18      	subs	r0, r3, #4
1000a7b8:	6800      	ldr	r0, [r0, #0]
1000a7ba:	4282      	cmp	r2, r0
1000a7bc:	d107      	bne.n	1000a7ce <ble_mgr_events_callback_handler+0x8a>
1000a7be:	e000      	b.n	1000a7c2 <ble_mgr_events_callback_handler+0x7e>
1000a7c0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a7c2:	2300      	movs	r3, #0
1000a7c4:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a7c6:	2101      	movs	r1, #1
						break;
1000a7c8:	e011      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
1000a7ca:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a7cc:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a7ce:	3101      	adds	r1, #1
1000a7d0:	b2c9      	uxtb	r1, r1
1000a7d2:	42a1      	cmp	r1, r4
1000a7d4:	d3ed      	bcc.n	1000a7b2 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a7d6:	2100      	movs	r1, #0
1000a7d8:	e009      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a7da:	2100      	movs	r1, #0
1000a7dc:	e007      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a7de:	2100      	movs	r1, #0
1000a7e0:	e005      	b.n	1000a7ee <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a7e2:	4b0a      	ldr	r3, [pc, #40]	; (1000a80c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a7e4:	2405      	movs	r4, #5
1000a7e6:	e7c4      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a7e8:	4b09      	ldr	r3, [pc, #36]	; (1000a810 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a7ea:	2401      	movs	r4, #1
1000a7ec:	e7c1      	b.n	1000a772 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a7ee:	0008      	movs	r0, r1
1000a7f0:	bd30      	pop	{r4, r5, pc}
1000a7f2:	46c0      	nop			; (mov r8, r8)
1000a7f4:	100145c8 	.word	0x100145c8
1000a7f8:	10016f1c 	.word	0x10016f1c
1000a7fc:	10016f18 	.word	0x10016f18
1000a800:	100171a0 	.word	0x100171a0
1000a804:	10017754 	.word	0x10017754
1000a808:	100171b4 	.word	0x100171b4
1000a80c:	100171c8 	.word	0x100171c8
1000a810:	10017210 	.word	0x10017210

1000a814 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a814:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a816:	465f      	mov	r7, fp
1000a818:	4656      	mov	r6, sl
1000a81a:	464d      	mov	r5, r9
1000a81c:	4644      	mov	r4, r8
1000a81e:	b4f0      	push	{r4, r5, r6, r7}
1000a820:	b091      	sub	sp, #68	; 0x44
1000a822:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a824:	2400      	movs	r4, #0
1000a826:	4b7e      	ldr	r3, [pc, #504]	; (1000aa20 <ble_device_init+0x20c>)
1000a828:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a82a:	2207      	movs	r2, #7
1000a82c:	2100      	movs	r1, #0
1000a82e:	487d      	ldr	r0, [pc, #500]	; (1000aa24 <ble_device_init+0x210>)
1000a830:	4e7d      	ldr	r6, [pc, #500]	; (1000aa28 <ble_device_init+0x214>)
1000a832:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a834:	2212      	movs	r2, #18
1000a836:	2100      	movs	r1, #0
1000a838:	487c      	ldr	r0, [pc, #496]	; (1000aa2c <ble_device_init+0x218>)
1000a83a:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a83c:	4a7c      	ldr	r2, [pc, #496]	; (1000aa30 <ble_device_init+0x21c>)
1000a83e:	2100      	movs	r1, #0
1000a840:	487c      	ldr	r0, [pc, #496]	; (1000aa34 <ble_device_init+0x220>)
1000a842:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a844:	4b7c      	ldr	r3, [pc, #496]	; (1000aa38 <ble_device_init+0x224>)
1000a846:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a848:	22cd      	movs	r2, #205	; 0xcd
1000a84a:	0092      	lsls	r2, r2, #2
1000a84c:	2100      	movs	r1, #0
1000a84e:	487b      	ldr	r0, [pc, #492]	; (1000aa3c <ble_device_init+0x228>)
1000a850:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a852:	4b7b      	ldr	r3, [pc, #492]	; (1000aa40 <ble_device_init+0x22c>)
1000a854:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a856:	2283      	movs	r2, #131	; 0x83
1000a858:	0092      	lsls	r2, r2, #2
1000a85a:	2100      	movs	r1, #0
1000a85c:	4879      	ldr	r0, [pc, #484]	; (1000aa44 <ble_device_init+0x230>)
1000a85e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a860:	4b79      	ldr	r3, [pc, #484]	; (1000aa48 <ble_device_init+0x234>)
1000a862:	469b      	mov	fp, r3
1000a864:	2380      	movs	r3, #128	; 0x80
1000a866:	00db      	lsls	r3, r3, #3
1000a868:	469a      	mov	sl, r3
1000a86a:	001a      	movs	r2, r3
1000a86c:	2100      	movs	r1, #0
1000a86e:	4658      	mov	r0, fp
1000a870:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a872:	4b76      	ldr	r3, [pc, #472]	; (1000aa4c <ble_device_init+0x238>)
1000a874:	4699      	mov	r9, r3
1000a876:	2380      	movs	r3, #128	; 0x80
1000a878:	015b      	lsls	r3, r3, #5
1000a87a:	4698      	mov	r8, r3
1000a87c:	001a      	movs	r2, r3
1000a87e:	2100      	movs	r1, #0
1000a880:	4648      	mov	r0, r9
1000a882:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a884:	4f72      	ldr	r7, [pc, #456]	; (1000aa50 <ble_device_init+0x23c>)
1000a886:	221c      	movs	r2, #28
1000a888:	2100      	movs	r1, #0
1000a88a:	0038      	movs	r0, r7
1000a88c:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a88e:	465b      	mov	r3, fp
1000a890:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a892:	4653      	mov	r3, sl
1000a894:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a896:	464b      	mov	r3, r9
1000a898:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a89a:	4643      	mov	r3, r8
1000a89c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a89e:	4b6d      	ldr	r3, [pc, #436]	; (1000aa54 <ble_device_init+0x240>)
1000a8a0:	601c      	str	r4, [r3, #0]
1000a8a2:	605c      	str	r4, [r3, #4]
1000a8a4:	609c      	str	r4, [r3, #8]
1000a8a6:	60dc      	str	r4, [r3, #12]
1000a8a8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a8aa:	4b6b      	ldr	r3, [pc, #428]	; (1000aa58 <ble_device_init+0x244>)
1000a8ac:	601c      	str	r4, [r3, #0]
1000a8ae:	605c      	str	r4, [r3, #4]
1000a8b0:	609c      	str	r4, [r3, #8]
1000a8b2:	60dc      	str	r4, [r3, #12]
1000a8b4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a8b6:	4b69      	ldr	r3, [pc, #420]	; (1000aa5c <ble_device_init+0x248>)
1000a8b8:	601c      	str	r4, [r3, #0]
1000a8ba:	605c      	str	r4, [r3, #4]
1000a8bc:	609c      	str	r4, [r3, #8]
1000a8be:	60dc      	str	r4, [r3, #12]
1000a8c0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a8c2:	4b67      	ldr	r3, [pc, #412]	; (1000aa60 <ble_device_init+0x24c>)
1000a8c4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a8c6:	4b67      	ldr	r3, [pc, #412]	; (1000aa64 <ble_device_init+0x250>)
1000a8c8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a8ca:	4b67      	ldr	r3, [pc, #412]	; (1000aa68 <ble_device_init+0x254>)
1000a8cc:	601c      	str	r4, [r3, #0]
1000a8ce:	605c      	str	r4, [r3, #4]
1000a8d0:	609c      	str	r4, [r3, #8]
1000a8d2:	60dc      	str	r4, [r3, #12]
1000a8d4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a8d6:	4b65      	ldr	r3, [pc, #404]	; (1000aa6c <ble_device_init+0x258>)
1000a8d8:	601c      	str	r4, [r3, #0]
1000a8da:	4c65      	ldr	r4, [pc, #404]	; (1000aa70 <ble_device_init+0x25c>)
1000a8dc:	239b      	movs	r3, #155	; 0x9b
1000a8de:	009b      	lsls	r3, r3, #2
1000a8e0:	4698      	mov	r8, r3
1000a8e2:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a8e4:	4f50      	ldr	r7, [pc, #320]	; (1000aa28 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a8e6:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a8e8:	227c      	movs	r2, #124	; 0x7c
1000a8ea:	2100      	movs	r1, #0
1000a8ec:	0020      	movs	r0, r4
1000a8ee:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a8f0:	0023      	movs	r3, r4
1000a8f2:	335e      	adds	r3, #94	; 0x5e
1000a8f4:	2200      	movs	r2, #0
1000a8f6:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a8f8:	7626      	strb	r6, [r4, #24]
1000a8fa:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a8fc:	45a0      	cmp	r8, r4
1000a8fe:	d1f3      	bne.n	1000a8e8 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a900:	4b5c      	ldr	r3, [pc, #368]	; (1000aa74 <ble_device_init+0x260>)
1000a902:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a904:	4c52      	ldr	r4, [pc, #328]	; (1000aa50 <ble_device_init+0x23c>)
1000a906:	4b4a      	ldr	r3, [pc, #296]	; (1000aa30 <ble_device_init+0x21c>)
1000a908:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a90a:	4b4a      	ldr	r3, [pc, #296]	; (1000aa34 <ble_device_init+0x220>)
1000a90c:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a90e:	485a      	ldr	r0, [pc, #360]	; (1000aa78 <ble_device_init+0x264>)
1000a910:	4b5a      	ldr	r3, [pc, #360]	; (1000aa7c <ble_device_init+0x268>)
1000a912:	4798      	blx	r3
1000a914:	485a      	ldr	r0, [pc, #360]	; (1000aa80 <ble_device_init+0x26c>)
1000a916:	4b5b      	ldr	r3, [pc, #364]	; (1000aa84 <ble_device_init+0x270>)
1000a918:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a91a:	0020      	movs	r0, r4
1000a91c:	4b5a      	ldr	r3, [pc, #360]	; (1000aa88 <ble_device_init+0x274>)
1000a91e:	4798      	blx	r3
1000a920:	2800      	cmp	r0, #0
1000a922:	d00b      	beq.n	1000a93c <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a924:	4e54      	ldr	r6, [pc, #336]	; (1000aa78 <ble_device_init+0x264>)
1000a926:	0030      	movs	r0, r6
1000a928:	4d54      	ldr	r5, [pc, #336]	; (1000aa7c <ble_device_init+0x268>)
1000a92a:	47a8      	blx	r5
1000a92c:	4857      	ldr	r0, [pc, #348]	; (1000aa8c <ble_device_init+0x278>)
1000a92e:	4c55      	ldr	r4, [pc, #340]	; (1000aa84 <ble_device_init+0x270>)
1000a930:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a932:	0030      	movs	r0, r6
1000a934:	47a8      	blx	r5
1000a936:	4856      	ldr	r0, [pc, #344]	; (1000aa90 <ble_device_init+0x27c>)
1000a938:	47a0      	blx	r4
1000a93a:	e7fe      	b.n	1000a93a <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a93c:	4a55      	ldr	r2, [pc, #340]	; (1000aa94 <ble_device_init+0x280>)
1000a93e:	2100      	movs	r1, #0
1000a940:	2000      	movs	r0, #0
1000a942:	4c55      	ldr	r4, [pc, #340]	; (1000aa98 <ble_device_init+0x284>)
1000a944:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a946:	4a55      	ldr	r2, [pc, #340]	; (1000aa9c <ble_device_init+0x288>)
1000a948:	2102      	movs	r1, #2
1000a94a:	2000      	movs	r0, #0
1000a94c:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a94e:	2109      	movs	r1, #9
1000a950:	4853      	ldr	r0, [pc, #332]	; (1000aaa0 <ble_device_init+0x28c>)
1000a952:	4b54      	ldr	r3, [pc, #336]	; (1000aaa4 <ble_device_init+0x290>)
1000a954:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a956:	2800      	cmp	r0, #0
1000a958:	d005      	beq.n	1000a966 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a95a:	4847      	ldr	r0, [pc, #284]	; (1000aa78 <ble_device_init+0x264>)
1000a95c:	4b47      	ldr	r3, [pc, #284]	; (1000aa7c <ble_device_init+0x268>)
1000a95e:	4798      	blx	r3
1000a960:	4851      	ldr	r0, [pc, #324]	; (1000aaa8 <ble_device_init+0x294>)
1000a962:	4b48      	ldr	r3, [pc, #288]	; (1000aa84 <ble_device_init+0x270>)
1000a964:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a966:	2207      	movs	r2, #7
1000a968:	4950      	ldr	r1, [pc, #320]	; (1000aaac <ble_device_init+0x298>)
1000a96a:	3108      	adds	r1, #8
1000a96c:	a804      	add	r0, sp, #16
1000a96e:	4b50      	ldr	r3, [pc, #320]	; (1000aab0 <ble_device_init+0x29c>)
1000a970:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a972:	2226      	movs	r2, #38	; 0x26
1000a974:	2100      	movs	r1, #0
1000a976:	a806      	add	r0, sp, #24
1000a978:	4b2b      	ldr	r3, [pc, #172]	; (1000aa28 <ble_device_init+0x214>)
1000a97a:	4798      	blx	r3
	
	if (addr == NULL)
1000a97c:	2d00      	cmp	r5, #0
1000a97e:	d10c      	bne.n	1000a99a <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a980:	a804      	add	r0, sp, #16
1000a982:	4b4c      	ldr	r3, [pc, #304]	; (1000aab4 <ble_device_init+0x2a0>)
1000a984:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a986:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a988:	2800      	cmp	r0, #0
1000a98a:	d006      	beq.n	1000a99a <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a98c:	483a      	ldr	r0, [pc, #232]	; (1000aa78 <ble_device_init+0x264>)
1000a98e:	4b3b      	ldr	r3, [pc, #236]	; (1000aa7c <ble_device_init+0x268>)
1000a990:	4798      	blx	r3
1000a992:	4849      	ldr	r0, [pc, #292]	; (1000aab8 <ble_device_init+0x2a4>)
1000a994:	4b3b      	ldr	r3, [pc, #236]	; (1000aa84 <ble_device_init+0x270>)
1000a996:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a998:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a99a:	4837      	ldr	r0, [pc, #220]	; (1000aa78 <ble_device_init+0x264>)
1000a99c:	4b37      	ldr	r3, [pc, #220]	; (1000aa7c <ble_device_init+0x268>)
1000a99e:	4798      	blx	r3
1000a9a0:	792b      	ldrb	r3, [r5, #4]
1000a9a2:	796a      	ldrb	r2, [r5, #5]
1000a9a4:	79a9      	ldrb	r1, [r5, #6]
1000a9a6:	7828      	ldrb	r0, [r5, #0]
1000a9a8:	9003      	str	r0, [sp, #12]
1000a9aa:	7868      	ldrb	r0, [r5, #1]
1000a9ac:	9002      	str	r0, [sp, #8]
1000a9ae:	78a8      	ldrb	r0, [r5, #2]
1000a9b0:	9001      	str	r0, [sp, #4]
1000a9b2:	78e8      	ldrb	r0, [r5, #3]
1000a9b4:	9000      	str	r0, [sp, #0]
1000a9b6:	4841      	ldr	r0, [pc, #260]	; (1000aabc <ble_device_init+0x2a8>)
1000a9b8:	4c32      	ldr	r4, [pc, #200]	; (1000aa84 <ble_device_init+0x270>)
1000a9ba:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a9bc:	ac06      	add	r4, sp, #24
1000a9be:	230f      	movs	r3, #15
1000a9c0:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a9c2:	4b3f      	ldr	r3, [pc, #252]	; (1000aac0 <ble_device_init+0x2ac>)
1000a9c4:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a9c6:	2207      	movs	r2, #7
1000a9c8:	0029      	movs	r1, r5
1000a9ca:	a807      	add	r0, sp, #28
1000a9cc:	4b38      	ldr	r3, [pc, #224]	; (1000aab0 <ble_device_init+0x29c>)
1000a9ce:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a9d0:	2300      	movs	r3, #0
1000a9d2:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a9d4:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a9d6:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a9d8:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a9da:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a9dc:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a9de:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a9e0:	2380      	movs	r3, #128	; 0x80
1000a9e2:	009b      	lsls	r3, r3, #2
1000a9e4:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a9e6:	0020      	movs	r0, r4
1000a9e8:	4b36      	ldr	r3, [pc, #216]	; (1000aac4 <ble_device_init+0x2b0>)
1000a9ea:	4798      	blx	r3
1000a9ec:	2800      	cmp	r0, #0
1000a9ee:	d005      	beq.n	1000a9fc <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a9f0:	4821      	ldr	r0, [pc, #132]	; (1000aa78 <ble_device_init+0x264>)
1000a9f2:	4b22      	ldr	r3, [pc, #136]	; (1000aa7c <ble_device_init+0x268>)
1000a9f4:	4798      	blx	r3
1000a9f6:	4834      	ldr	r0, [pc, #208]	; (1000aac8 <ble_device_init+0x2b4>)
1000a9f8:	4b22      	ldr	r3, [pc, #136]	; (1000aa84 <ble_device_init+0x270>)
1000a9fa:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a9fc:	0028      	movs	r0, r5
1000a9fe:	4b33      	ldr	r3, [pc, #204]	; (1000aacc <ble_device_init+0x2b8>)
1000aa00:	4798      	blx	r3
1000aa02:	2800      	cmp	r0, #0
1000aa04:	d005      	beq.n	1000aa12 <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000aa06:	481c      	ldr	r0, [pc, #112]	; (1000aa78 <ble_device_init+0x264>)
1000aa08:	4b1c      	ldr	r3, [pc, #112]	; (1000aa7c <ble_device_init+0x268>)
1000aa0a:	4798      	blx	r3
1000aa0c:	4830      	ldr	r0, [pc, #192]	; (1000aad0 <ble_device_init+0x2bc>)
1000aa0e:	4b1d      	ldr	r3, [pc, #116]	; (1000aa84 <ble_device_init+0x270>)
1000aa10:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000aa12:	b011      	add	sp, #68	; 0x44
1000aa14:	bc3c      	pop	{r2, r3, r4, r5}
1000aa16:	4690      	mov	r8, r2
1000aa18:	4699      	mov	r9, r3
1000aa1a:	46a2      	mov	sl, r4
1000aa1c:	46ab      	mov	fp, r5
1000aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa20:	10015d10 	.word	0x10015d10
1000aa24:	10015d18 	.word	0x10015d18
1000aa28:	100107f9 	.word	0x100107f9
1000aa2c:	100171dc 	.word	0x100171dc
1000aa30:	000004e2 	.word	0x000004e2
1000aa34:	10015830 	.word	0x10015830
1000aa38:	10015d14 	.word	0x10015d14
1000aa3c:	10017214 	.word	0x10017214
1000aa40:	1001720c 	.word	0x1001720c
1000aa44:	10017548 	.word	0x10017548
1000aa48:	10015430 	.word	0x10015430
1000aa4c:	10015d20 	.word	0x10015d20
1000aa50:	100171f0 	.word	0x100171f0
1000aa54:	100171b4 	.word	0x100171b4
1000aa58:	100171c8 	.word	0x100171c8
1000aa5c:	10016f1c 	.word	0x10016f1c
1000aa60:	10017210 	.word	0x10017210
1000aa64:	10016f18 	.word	0x10016f18
1000aa68:	100171a0 	.word	0x100171a0
1000aa6c:	10017754 	.word	0x10017754
1000aa70:	10016f30 	.word	0x10016f30
1000aa74:	1001719c 	.word	0x1001719c
1000aa78:	10014718 	.word	0x10014718
1000aa7c:	10010929 	.word	0x10010929
1000aa80:	10014ac4 	.word	0x10014ac4
1000aa84:	10010809 	.word	0x10010809
1000aa88:	1000c95d 	.word	0x1000c95d
1000aa8c:	10014ad8 	.word	0x10014ad8
1000aa90:	10014af8 	.word	0x10014af8
1000aa94:	10014d30 	.word	0x10014d30
1000aa98:	1000a745 	.word	0x1000a745
1000aa9c:	100146f0 	.word	0x100146f0
1000aaa0:	10014b34 	.word	0x10014b34
1000aaa4:	1000c875 	.word	0x1000c875
1000aaa8:	10014b40 	.word	0x10014b40
1000aaac:	100146d4 	.word	0x100146d4
1000aab0:	100107e7 	.word	0x100107e7
1000aab4:	1000c8a9 	.word	0x1000c8a9
1000aab8:	10014b58 	.word	0x10014b58
1000aabc:	10014b70 	.word	0x10014b70
1000aac0:	00003a98 	.word	0x00003a98
1000aac4:	1000c8cd 	.word	0x1000c8cd
1000aac8:	10014ba8 	.word	0x10014ba8
1000aacc:	1000cb11 	.word	0x1000cb11
1000aad0:	10014bcc 	.word	0x10014bcc

1000aad4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000aad4:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000aad6:	2201      	movs	r2, #1
1000aad8:	2101      	movs	r1, #1
1000aada:	4b06      	ldr	r3, [pc, #24]	; (1000aaf4 <ble_send_slave_sec_request+0x20>)
1000aadc:	4798      	blx	r3
1000aade:	2800      	cmp	r0, #0
1000aae0:	d006      	beq.n	1000aaf0 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000aae2:	4805      	ldr	r0, [pc, #20]	; (1000aaf8 <ble_send_slave_sec_request+0x24>)
1000aae4:	4b05      	ldr	r3, [pc, #20]	; (1000aafc <ble_send_slave_sec_request+0x28>)
1000aae6:	4798      	blx	r3
1000aae8:	4805      	ldr	r0, [pc, #20]	; (1000ab00 <ble_send_slave_sec_request+0x2c>)
1000aaea:	4b06      	ldr	r3, [pc, #24]	; (1000ab04 <ble_send_slave_sec_request+0x30>)
1000aaec:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000aaee:	20e2      	movs	r0, #226	; 0xe2
}
1000aaf0:	bd10      	pop	{r4, pc}
1000aaf2:	46c0      	nop			; (mov r8, r8)
1000aaf4:	1000d25d 	.word	0x1000d25d
1000aaf8:	10014718 	.word	0x10014718
1000aafc:	10010929 	.word	0x10010929
1000ab00:	10014c08 	.word	0x10014c08
1000ab04:	10010809 	.word	0x10010809

1000ab08 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab0a:	465f      	mov	r7, fp
1000ab0c:	464e      	mov	r6, r9
1000ab0e:	4645      	mov	r5, r8
1000ab10:	b4e0      	push	{r5, r6, r7}
1000ab12:	b09a      	sub	sp, #104	; 0x68
1000ab14:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000ab16:	7a86      	ldrb	r6, [r0, #10]
1000ab18:	2e00      	cmp	r6, #0
1000ab1a:	d000      	beq.n	1000ab1e <ble_connected_state_handler+0x16>
1000ab1c:	e0c6      	b.n	1000acac <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000ab1e:	4875      	ldr	r0, [pc, #468]	; (1000acf4 <ble_connected_state_handler+0x1ec>)
1000ab20:	4f75      	ldr	r7, [pc, #468]	; (1000acf8 <ble_connected_state_handler+0x1f0>)
1000ab22:	47b8      	blx	r7
1000ab24:	792b      	ldrb	r3, [r5, #4]
1000ab26:	796a      	ldrb	r2, [r5, #5]
1000ab28:	79a9      	ldrb	r1, [r5, #6]
1000ab2a:	7868      	ldrb	r0, [r5, #1]
1000ab2c:	9002      	str	r0, [sp, #8]
1000ab2e:	78a8      	ldrb	r0, [r5, #2]
1000ab30:	9001      	str	r0, [sp, #4]
1000ab32:	78e8      	ldrb	r0, [r5, #3]
1000ab34:	9000      	str	r0, [sp, #0]
1000ab36:	4871      	ldr	r0, [pc, #452]	; (1000acfc <ble_connected_state_handler+0x1f4>)
1000ab38:	4c71      	ldr	r4, [pc, #452]	; (1000ad00 <ble_connected_state_handler+0x1f8>)
1000ab3a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ab3c:	486d      	ldr	r0, [pc, #436]	; (1000acf4 <ble_connected_state_handler+0x1ec>)
1000ab3e:	47b8      	blx	r7
1000ab40:	8929      	ldrh	r1, [r5, #8]
1000ab42:	4870      	ldr	r0, [pc, #448]	; (1000ad04 <ble_connected_state_handler+0x1fc>)
1000ab44:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ab46:	2212      	movs	r2, #18
1000ab48:	0029      	movs	r1, r5
1000ab4a:	486f      	ldr	r0, [pc, #444]	; (1000ad08 <ble_connected_state_handler+0x200>)
1000ab4c:	4b6f      	ldr	r3, [pc, #444]	; (1000ad0c <ble_connected_state_handler+0x204>)
1000ab4e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ab50:	9504      	str	r5, [sp, #16]
1000ab52:	2207      	movs	r2, #7
1000ab54:	0029      	movs	r1, r5
1000ab56:	486e      	ldr	r0, [pc, #440]	; (1000ad10 <ble_connected_state_handler+0x208>)
1000ab58:	4b6e      	ldr	r3, [pc, #440]	; (1000ad14 <ble_connected_state_handler+0x20c>)
1000ab5a:	4798      	blx	r3
1000ab5c:	2800      	cmp	r0, #0
1000ab5e:	d100      	bne.n	1000ab62 <ble_connected_state_handler+0x5a>
1000ab60:	e0ad      	b.n	1000acbe <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ab62:	782b      	ldrb	r3, [r5, #0]
1000ab64:	2b02      	cmp	r3, #2
1000ab66:	d000      	beq.n	1000ab6a <ble_connected_state_handler+0x62>
1000ab68:	e0a9      	b.n	1000acbe <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ab6a:	2250      	movs	r2, #80	; 0x50
1000ab6c:	2100      	movs	r1, #0
1000ab6e:	a806      	add	r0, sp, #24
1000ab70:	4b69      	ldr	r3, [pc, #420]	; (1000ad18 <ble_connected_state_handler+0x210>)
1000ab72:	4798      	blx	r3
1000ab74:	4f69      	ldr	r7, [pc, #420]	; (1000ad1c <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ab76:	2300      	movs	r3, #0
1000ab78:	e00b      	b.n	1000ab92 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ab7a:	1c59      	adds	r1, r3, #1
1000ab7c:	7814      	ldrb	r4, [r2, #0]
1000ab7e:	a806      	add	r0, sp, #24
1000ab80:	54c4      	strb	r4, [r0, r3]
1000ab82:	3201      	adds	r2, #1
1000ab84:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ab86:	42b3      	cmp	r3, r6
1000ab88:	d1f7      	bne.n	1000ab7a <ble_connected_state_handler+0x72>
1000ab8a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ab8c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ab8e:	2b50      	cmp	r3, #80	; 0x50
1000ab90:	d004      	beq.n	1000ab9c <ble_connected_state_handler+0x94>
1000ab92:	001e      	movs	r6, r3
1000ab94:	3610      	adds	r6, #16
1000ab96:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ab98:	003a      	movs	r2, r7
1000ab9a:	e7ee      	b.n	1000ab7a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ab9c:	aa06      	add	r2, sp, #24
1000ab9e:	0029      	movs	r1, r5
1000aba0:	2005      	movs	r0, #5
1000aba2:	4b5f      	ldr	r3, [pc, #380]	; (1000ad20 <ble_connected_state_handler+0x218>)
1000aba4:	4798      	blx	r3
1000aba6:	1e06      	subs	r6, r0, #0
1000aba8:	d100      	bne.n	1000abac <ble_connected_state_handler+0xa4>
1000abaa:	e09c      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000abac:	4851      	ldr	r0, [pc, #324]	; (1000acf4 <ble_connected_state_handler+0x1ec>)
1000abae:	4b52      	ldr	r3, [pc, #328]	; (1000acf8 <ble_connected_state_handler+0x1f0>)
1000abb0:	4798      	blx	r3
1000abb2:	485c      	ldr	r0, [pc, #368]	; (1000ad24 <ble_connected_state_handler+0x21c>)
1000abb4:	4b52      	ldr	r3, [pc, #328]	; (1000ad00 <ble_connected_state_handler+0x1f8>)
1000abb6:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000abb8:	26e2      	movs	r6, #226	; 0xe2
1000abba:	e094      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
1000abbc:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000abbe:	9405      	str	r4, [sp, #20]
1000abc0:	2207      	movs	r2, #7
1000abc2:	9904      	ldr	r1, [sp, #16]
1000abc4:	4648      	mov	r0, r9
1000abc6:	47d8      	blx	fp
1000abc8:	2800      	cmp	r0, #0
1000abca:	d109      	bne.n	1000abe0 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000abcc:	9a05      	ldr	r2, [sp, #20]
1000abce:	0153      	lsls	r3, r2, #5
1000abd0:	1a9b      	subs	r3, r3, r2
1000abd2:	009a      	lsls	r2, r3, #2
1000abd4:	4b54      	ldr	r3, [pc, #336]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000abd6:	189b      	adds	r3, r3, r2
1000abd8:	335e      	adds	r3, #94	; 0x5e
1000abda:	2202      	movs	r2, #2
1000abdc:	701a      	strb	r2, [r3, #0]
1000abde:	e02b      	b.n	1000ac38 <ble_connected_state_handler+0x130>
1000abe0:	3401      	adds	r4, #1
1000abe2:	237c      	movs	r3, #124	; 0x7c
1000abe4:	469c      	mov	ip, r3
1000abe6:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000abe8:	2c05      	cmp	r4, #5
1000abea:	d1e7      	bne.n	1000abbc <ble_connected_state_handler+0xb4>
1000abec:	e072      	b.n	1000acd4 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000abee:	001c      	movs	r4, r3
1000abf0:	7811      	ldrb	r1, [r2, #0]
1000abf2:	2900      	cmp	r1, #0
1000abf4:	d11a      	bne.n	1000ac2c <ble_connected_state_handler+0x124>
1000abf6:	e001      	b.n	1000abfc <ble_connected_state_handler+0xf4>
1000abf8:	2400      	movs	r4, #0
1000abfa:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000abfc:	0163      	lsls	r3, r4, #5
1000abfe:	4699      	mov	r9, r3
1000ac00:	1b18      	subs	r0, r3, r4
1000ac02:	0080      	lsls	r0, r0, #2
1000ac04:	4b48      	ldr	r3, [pc, #288]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000ac06:	4698      	mov	r8, r3
1000ac08:	4440      	add	r0, r8
1000ac0a:	2212      	movs	r2, #18
1000ac0c:	0029      	movs	r1, r5
1000ac0e:	4b3f      	ldr	r3, [pc, #252]	; (1000ad0c <ble_connected_state_handler+0x204>)
1000ac10:	4798      	blx	r3
						ble_device_count++;
1000ac12:	4a46      	ldr	r2, [pc, #280]	; (1000ad2c <ble_connected_state_handler+0x224>)
1000ac14:	7813      	ldrb	r3, [r2, #0]
1000ac16:	3301      	adds	r3, #1
1000ac18:	b2db      	uxtb	r3, r3
1000ac1a:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ac1c:	464b      	mov	r3, r9
1000ac1e:	1b1b      	subs	r3, r3, r4
1000ac20:	009b      	lsls	r3, r3, #2
1000ac22:	4443      	add	r3, r8
1000ac24:	335e      	adds	r3, #94	; 0x5e
1000ac26:	2202      	movs	r2, #2
1000ac28:	701a      	strb	r2, [r3, #0]
						break;
1000ac2a:	e005      	b.n	1000ac38 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ac2c:	1c79      	adds	r1, r7, #1
1000ac2e:	b2cf      	uxtb	r7, r1
1000ac30:	3301      	adds	r3, #1
1000ac32:	327c      	adds	r2, #124	; 0x7c
1000ac34:	2f05      	cmp	r7, #5
1000ac36:	d1da      	bne.n	1000abee <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ac38:	2207      	movs	r2, #7
1000ac3a:	0029      	movs	r1, r5
1000ac3c:	4834      	ldr	r0, [pc, #208]	; (1000ad10 <ble_connected_state_handler+0x208>)
1000ac3e:	4b35      	ldr	r3, [pc, #212]	; (1000ad14 <ble_connected_state_handler+0x20c>)
1000ac40:	4798      	blx	r3
1000ac42:	2800      	cmp	r0, #0
1000ac44:	d10c      	bne.n	1000ac60 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000ac46:	017b      	lsls	r3, r7, #5
1000ac48:	1bdb      	subs	r3, r3, r7
1000ac4a:	009b      	lsls	r3, r3, #2
1000ac4c:	4a36      	ldr	r2, [pc, #216]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000ac4e:	18d3      	adds	r3, r2, r3
1000ac50:	2205      	movs	r2, #5
1000ac52:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ac54:	3202      	adds	r2, #2
1000ac56:	2100      	movs	r1, #0
1000ac58:	482d      	ldr	r0, [pc, #180]	; (1000ad10 <ble_connected_state_handler+0x208>)
1000ac5a:	4b2f      	ldr	r3, [pc, #188]	; (1000ad18 <ble_connected_state_handler+0x210>)
1000ac5c:	4798      	blx	r3
1000ac5e:	e042      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ac60:	4b31      	ldr	r3, [pc, #196]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000ac62:	4698      	mov	r8, r3
1000ac64:	017c      	lsls	r4, r7, #5
1000ac66:	1be3      	subs	r3, r4, r7
1000ac68:	009b      	lsls	r3, r3, #2
1000ac6a:	4443      	add	r3, r8
1000ac6c:	220a      	movs	r2, #10
1000ac6e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ac70:	3a03      	subs	r2, #3
1000ac72:	2100      	movs	r1, #0
1000ac74:	4826      	ldr	r0, [pc, #152]	; (1000ad10 <ble_connected_state_handler+0x208>)
1000ac76:	4b28      	ldr	r3, [pc, #160]	; (1000ad18 <ble_connected_state_handler+0x210>)
1000ac78:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ac7a:	1be4      	subs	r4, r4, r7
1000ac7c:	00a4      	lsls	r4, r4, #2
1000ac7e:	4444      	add	r4, r8
1000ac80:	7ca3      	ldrb	r3, [r4, #18]
1000ac82:	2b0a      	cmp	r3, #10
1000ac84:	d12f      	bne.n	1000ace6 <ble_connected_state_handler+0x1de>
1000ac86:	e00d      	b.n	1000aca4 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000ac88:	481a      	ldr	r0, [pc, #104]	; (1000acf4 <ble_connected_state_handler+0x1ec>)
1000ac8a:	4b1b      	ldr	r3, [pc, #108]	; (1000acf8 <ble_connected_state_handler+0x1f0>)
1000ac8c:	4798      	blx	r3
1000ac8e:	4b27      	ldr	r3, [pc, #156]	; (1000ad2c <ble_connected_state_handler+0x224>)
1000ac90:	7819      	ldrb	r1, [r3, #0]
1000ac92:	b2c9      	uxtb	r1, r1
1000ac94:	4826      	ldr	r0, [pc, #152]	; (1000ad30 <ble_connected_state_handler+0x228>)
1000ac96:	4b1a      	ldr	r3, [pc, #104]	; (1000ad00 <ble_connected_state_handler+0x1f8>)
1000ac98:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000ac9a:	8928      	ldrh	r0, [r5, #8]
1000ac9c:	2113      	movs	r1, #19
1000ac9e:	4b25      	ldr	r3, [pc, #148]	; (1000ad34 <ble_connected_state_handler+0x22c>)
1000aca0:	4798      	blx	r3
1000aca2:	e020      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000aca4:	8928      	ldrh	r0, [r5, #8]
1000aca6:	4b24      	ldr	r3, [pc, #144]	; (1000ad38 <ble_connected_state_handler+0x230>)
1000aca8:	4798      	blx	r3
1000acaa:	e01c      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000acac:	4811      	ldr	r0, [pc, #68]	; (1000acf4 <ble_connected_state_handler+0x1ec>)
1000acae:	4b12      	ldr	r3, [pc, #72]	; (1000acf8 <ble_connected_state_handler+0x1f0>)
1000acb0:	4798      	blx	r3
1000acb2:	7aa9      	ldrb	r1, [r5, #10]
1000acb4:	4821      	ldr	r0, [pc, #132]	; (1000ad3c <ble_connected_state_handler+0x234>)
1000acb6:	4b12      	ldr	r3, [pc, #72]	; (1000ad00 <ble_connected_state_handler+0x1f8>)
1000acb8:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000acba:	2600      	movs	r6, #0
1000acbc:	e013      	b.n	1000ace6 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000acbe:	4b1b      	ldr	r3, [pc, #108]	; (1000ad2c <ble_connected_state_handler+0x224>)
1000acc0:	781b      	ldrb	r3, [r3, #0]
1000acc2:	b2db      	uxtb	r3, r3
1000acc4:	2b04      	cmp	r3, #4
1000acc6:	d8df      	bhi.n	1000ac88 <ble_connected_state_handler+0x180>
1000acc8:	4b17      	ldr	r3, [pc, #92]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000acca:	4699      	mov	r9, r3
1000accc:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000acce:	4b11      	ldr	r3, [pc, #68]	; (1000ad14 <ble_connected_state_handler+0x20c>)
1000acd0:	469b      	mov	fp, r3
1000acd2:	e773      	b.n	1000abbc <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000acd4:	235e      	movs	r3, #94	; 0x5e
1000acd6:	4a14      	ldr	r2, [pc, #80]	; (1000ad28 <ble_connected_state_handler+0x220>)
1000acd8:	5cd3      	ldrb	r3, [r2, r3]
1000acda:	2b00      	cmp	r3, #0
1000acdc:	d08c      	beq.n	1000abf8 <ble_connected_state_handler+0xf0>
1000acde:	4a18      	ldr	r2, [pc, #96]	; (1000ad40 <ble_connected_state_handler+0x238>)
1000ace0:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ace2:	2701      	movs	r7, #1
1000ace4:	e783      	b.n	1000abee <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000ace6:	0030      	movs	r0, r6
1000ace8:	b01a      	add	sp, #104	; 0x68
1000acea:	bc1c      	pop	{r2, r3, r4}
1000acec:	4690      	mov	r8, r2
1000acee:	4699      	mov	r9, r3
1000acf0:	46a3      	mov	fp, r4
1000acf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000acf4:	10014718 	.word	0x10014718
1000acf8:	10010929 	.word	0x10010929
1000acfc:	10014c28 	.word	0x10014c28
1000ad00:	10010809 	.word	0x10010809
1000ad04:	10014c6c 	.word	0x10014c6c
1000ad08:	100171dc 	.word	0x100171dc
1000ad0c:	100107e7 	.word	0x100107e7
1000ad10:	10015d18 	.word	0x10015d18
1000ad14:	100107c9 	.word	0x100107c9
1000ad18:	100107f9 	.word	0x100107f9
1000ad1c:	10016f76 	.word	0x10016f76
1000ad20:	1000cd71 	.word	0x1000cd71
1000ad24:	10014c84 	.word	0x10014c84
1000ad28:	10016f30 	.word	0x10016f30
1000ad2c:	1001719c 	.word	0x1001719c
1000ad30:	10014ca8 	.word	0x10014ca8
1000ad34:	1000cd45 	.word	0x1000cd45
1000ad38:	1000aad5 	.word	0x1000aad5
1000ad3c:	10014ce4 	.word	0x10014ce4
1000ad40:	1001700a 	.word	0x1001700a

1000ad44 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ad46:	4647      	mov	r7, r8
1000ad48:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000ad4a:	7803      	ldrb	r3, [r0, #0]
1000ad4c:	2b00      	cmp	r3, #0
1000ad4e:	d141      	bne.n	1000add4 <ble_resolv_rand_addr_handler+0x90>
1000ad50:	4d2f      	ldr	r5, [pc, #188]	; (1000ae10 <ble_resolv_rand_addr_handler+0xcc>)
1000ad52:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000ad54:	1c46      	adds	r6, r0, #1
1000ad56:	4f2f      	ldr	r7, [pc, #188]	; (1000ae14 <ble_resolv_rand_addr_handler+0xd0>)
1000ad58:	2210      	movs	r2, #16
1000ad5a:	0029      	movs	r1, r5
1000ad5c:	0030      	movs	r0, r6
1000ad5e:	47b8      	blx	r7
1000ad60:	2800      	cmp	r0, #0
1000ad62:	d03f      	beq.n	1000ade4 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ad64:	3401      	adds	r4, #1
1000ad66:	b2e4      	uxtb	r4, r4
1000ad68:	357c      	adds	r5, #124	; 0x7c
1000ad6a:	2c05      	cmp	r4, #5
1000ad6c:	d1f4      	bne.n	1000ad58 <ble_resolv_rand_addr_handler+0x14>
1000ad6e:	e031      	b.n	1000add4 <ble_resolv_rand_addr_handler+0x90>
1000ad70:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ad72:	001c      	movs	r4, r3
1000ad74:	7811      	ldrb	r1, [r2, #0]
1000ad76:	2900      	cmp	r1, #0
1000ad78:	d122      	bne.n	1000adc0 <ble_resolv_rand_addr_handler+0x7c>
1000ad7a:	e001      	b.n	1000ad80 <ble_resolv_rand_addr_handler+0x3c>
1000ad7c:	2400      	movs	r4, #0
1000ad7e:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ad80:	4b25      	ldr	r3, [pc, #148]	; (1000ae18 <ble_resolv_rand_addr_handler+0xd4>)
1000ad82:	4698      	mov	r8, r3
1000ad84:	0166      	lsls	r6, r4, #5
1000ad86:	1b37      	subs	r7, r6, r4
1000ad88:	00bf      	lsls	r7, r7, #2
1000ad8a:	4447      	add	r7, r8
1000ad8c:	2212      	movs	r2, #18
1000ad8e:	4923      	ldr	r1, [pc, #140]	; (1000ae1c <ble_resolv_rand_addr_handler+0xd8>)
1000ad90:	0038      	movs	r0, r7
1000ad92:	4b23      	ldr	r3, [pc, #140]	; (1000ae20 <ble_resolv_rand_addr_handler+0xdc>)
1000ad94:	4798      	blx	r3
				ble_device_count++;
1000ad96:	4a23      	ldr	r2, [pc, #140]	; (1000ae24 <ble_resolv_rand_addr_handler+0xe0>)
1000ad98:	7813      	ldrb	r3, [r2, #0]
1000ad9a:	3301      	adds	r3, #1
1000ad9c:	b2db      	uxtb	r3, r3
1000ad9e:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ada0:	375e      	adds	r7, #94	; 0x5e
1000ada2:	2302      	movs	r3, #2
1000ada4:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ada6:	1b34      	subs	r4, r6, r4
1000ada8:	00a4      	lsls	r4, r4, #2
1000adaa:	4444      	add	r4, r8
1000adac:	3308      	adds	r3, #8
1000adae:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000adb0:	016b      	lsls	r3, r5, #5
1000adb2:	1b5d      	subs	r5, r3, r5
1000adb4:	00ad      	lsls	r5, r5, #2
1000adb6:	4445      	add	r5, r8
1000adb8:	7cab      	ldrb	r3, [r5, #18]
1000adba:	2b0a      	cmp	r3, #10
1000adbc:	d123      	bne.n	1000ae06 <ble_resolv_rand_addr_handler+0xc2>
1000adbe:	e004      	b.n	1000adca <ble_resolv_rand_addr_handler+0x86>
1000adc0:	3301      	adds	r3, #1
1000adc2:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000adc4:	2b05      	cmp	r3, #5
1000adc6:	d1d3      	bne.n	1000ad70 <ble_resolv_rand_addr_handler+0x2c>
1000adc8:	e01d      	b.n	1000ae06 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000adca:	4b14      	ldr	r3, [pc, #80]	; (1000ae1c <ble_resolv_rand_addr_handler+0xd8>)
1000adcc:	8918      	ldrh	r0, [r3, #8]
1000adce:	4b16      	ldr	r3, [pc, #88]	; (1000ae28 <ble_resolv_rand_addr_handler+0xe4>)
1000add0:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000add2:	e018      	b.n	1000ae06 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000add4:	235e      	movs	r3, #94	; 0x5e
1000add6:	4a10      	ldr	r2, [pc, #64]	; (1000ae18 <ble_resolv_rand_addr_handler+0xd4>)
1000add8:	5cd3      	ldrb	r3, [r2, r3]
1000adda:	2b00      	cmp	r3, #0
1000addc:	d0ce      	beq.n	1000ad7c <ble_resolv_rand_addr_handler+0x38>
1000adde:	4a13      	ldr	r2, [pc, #76]	; (1000ae2c <ble_resolv_rand_addr_handler+0xe8>)
1000ade0:	2301      	movs	r3, #1
1000ade2:	e7c5      	b.n	1000ad70 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ade4:	480c      	ldr	r0, [pc, #48]	; (1000ae18 <ble_resolv_rand_addr_handler+0xd4>)
1000ade6:	0163      	lsls	r3, r4, #5
1000ade8:	1b1a      	subs	r2, r3, r4
1000adea:	0092      	lsls	r2, r2, #2
1000adec:	1882      	adds	r2, r0, r2
1000adee:	0011      	movs	r1, r2
1000adf0:	315e      	adds	r1, #94	; 0x5e
1000adf2:	2502      	movs	r5, #2
1000adf4:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000adf6:	210a      	movs	r1, #10
1000adf8:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000adfa:	0010      	movs	r0, r2
1000adfc:	2212      	movs	r2, #18
1000adfe:	4907      	ldr	r1, [pc, #28]	; (1000ae1c <ble_resolv_rand_addr_handler+0xd8>)
1000ae00:	4b07      	ldr	r3, [pc, #28]	; (1000ae20 <ble_resolv_rand_addr_handler+0xdc>)
1000ae02:	4798      	blx	r3
1000ae04:	e7e1      	b.n	1000adca <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ae06:	2000      	movs	r0, #0
1000ae08:	bc04      	pop	{r2}
1000ae0a:	4690      	mov	r8, r2
1000ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae0e:	46c0      	nop			; (mov r8, r8)
1000ae10:	10016f76 	.word	0x10016f76
1000ae14:	100107c9 	.word	0x100107c9
1000ae18:	10016f30 	.word	0x10016f30
1000ae1c:	100171dc 	.word	0x100171dc
1000ae20:	100107e7 	.word	0x100107e7
1000ae24:	1001719c 	.word	0x1001719c
1000ae28:	1000aad5 	.word	0x1000aad5
1000ae2c:	1001700a 	.word	0x1001700a

1000ae30 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ae32:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000ae34:	283b      	cmp	r0, #59	; 0x3b
1000ae36:	d872      	bhi.n	1000af1e <ble_event_manager+0xee>
1000ae38:	0083      	lsls	r3, r0, #2
1000ae3a:	4a3c      	ldr	r2, [pc, #240]	; (1000af2c <ble_event_manager+0xfc>)
1000ae3c:	58d3      	ldr	r3, [r2, r3]
1000ae3e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae40:	0084      	lsls	r4, r0, #2
1000ae42:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ae44:	4f3a      	ldr	r7, [pc, #232]	; (1000af30 <ble_event_manager+0x100>)
1000ae46:	59bb      	ldr	r3, [r7, r6]
1000ae48:	2b00      	cmp	r3, #0
1000ae4a:	d004      	beq.n	1000ae56 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae4c:	591b      	ldr	r3, [r3, r4]
1000ae4e:	2b00      	cmp	r3, #0
1000ae50:	d001      	beq.n	1000ae56 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000ae52:	0028      	movs	r0, r5
1000ae54:	4798      	blx	r3
1000ae56:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ae58:	2e14      	cmp	r6, #20
1000ae5a:	d1f4      	bne.n	1000ae46 <ble_event_manager+0x16>
1000ae5c:	e065      	b.n	1000af2a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae5e:	3813      	subs	r0, #19
1000ae60:	b2c4      	uxtb	r4, r0
1000ae62:	00a4      	lsls	r4, r4, #2
1000ae64:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ae66:	4f33      	ldr	r7, [pc, #204]	; (1000af34 <ble_event_manager+0x104>)
1000ae68:	59bb      	ldr	r3, [r7, r6]
1000ae6a:	2b00      	cmp	r3, #0
1000ae6c:	d004      	beq.n	1000ae78 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae6e:	591b      	ldr	r3, [r3, r4]
1000ae70:	2b00      	cmp	r3, #0
1000ae72:	d001      	beq.n	1000ae78 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000ae74:	0028      	movs	r0, r5
1000ae76:	4798      	blx	r3
1000ae78:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ae7a:	2e14      	cmp	r6, #20
1000ae7c:	d1f4      	bne.n	1000ae68 <ble_event_manager+0x38>
1000ae7e:	e054      	b.n	1000af2a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae80:	381d      	subs	r0, #29
1000ae82:	b2c4      	uxtb	r4, r0
1000ae84:	00a4      	lsls	r4, r4, #2
1000ae86:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ae88:	4f2b      	ldr	r7, [pc, #172]	; (1000af38 <ble_event_manager+0x108>)
1000ae8a:	59bb      	ldr	r3, [r7, r6]
1000ae8c:	2b00      	cmp	r3, #0
1000ae8e:	d004      	beq.n	1000ae9a <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ae90:	591b      	ldr	r3, [r3, r4]
1000ae92:	2b00      	cmp	r3, #0
1000ae94:	d001      	beq.n	1000ae9a <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ae96:	0028      	movs	r0, r5
1000ae98:	4798      	blx	r3
1000ae9a:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ae9c:	2e14      	cmp	r6, #20
1000ae9e:	d1f4      	bne.n	1000ae8a <ble_event_manager+0x5a>
1000aea0:	e043      	b.n	1000af2a <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000aea2:	3827      	subs	r0, #39	; 0x27
1000aea4:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000aea6:	4b25      	ldr	r3, [pc, #148]	; (1000af3c <ble_event_manager+0x10c>)
1000aea8:	681b      	ldr	r3, [r3, #0]
1000aeaa:	2b00      	cmp	r3, #0
1000aeac:	d03d      	beq.n	1000af2a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aeae:	0080      	lsls	r0, r0, #2
1000aeb0:	58c3      	ldr	r3, [r0, r3]
1000aeb2:	2b00      	cmp	r3, #0
1000aeb4:	d039      	beq.n	1000af2a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aeb6:	0008      	movs	r0, r1
1000aeb8:	4798      	blx	r3
1000aeba:	e036      	b.n	1000af2a <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000aebc:	382d      	subs	r0, #45	; 0x2d
1000aebe:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000aec0:	4b1f      	ldr	r3, [pc, #124]	; (1000af40 <ble_event_manager+0x110>)
1000aec2:	681b      	ldr	r3, [r3, #0]
1000aec4:	2b00      	cmp	r3, #0
1000aec6:	d030      	beq.n	1000af2a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aec8:	0080      	lsls	r0, r0, #2
1000aeca:	58c3      	ldr	r3, [r0, r3]
1000aecc:	2b00      	cmp	r3, #0
1000aece:	d02c      	beq.n	1000af2a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000aed0:	0008      	movs	r0, r1
1000aed2:	4798      	blx	r3
1000aed4:	e029      	b.n	1000af2a <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aed6:	3836      	subs	r0, #54	; 0x36
1000aed8:	b2c4      	uxtb	r4, r0
1000aeda:	00a4      	lsls	r4, r4, #2
1000aedc:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000aede:	4f19      	ldr	r7, [pc, #100]	; (1000af44 <ble_event_manager+0x114>)
1000aee0:	59bb      	ldr	r3, [r7, r6]
1000aee2:	2b00      	cmp	r3, #0
1000aee4:	d004      	beq.n	1000aef0 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000aee6:	591b      	ldr	r3, [r3, r4]
1000aee8:	2b00      	cmp	r3, #0
1000aeea:	d001      	beq.n	1000aef0 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000aeec:	0028      	movs	r0, r5
1000aeee:	4798      	blx	r3
1000aef0:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000aef2:	2e14      	cmp	r6, #20
1000aef4:	d1f4      	bne.n	1000aee0 <ble_event_manager+0xb0>
1000aef6:	e018      	b.n	1000af2a <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000aef8:	3838      	subs	r0, #56	; 0x38
1000aefa:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000aefc:	4b12      	ldr	r3, [pc, #72]	; (1000af48 <ble_event_manager+0x118>)
1000aefe:	681b      	ldr	r3, [r3, #0]
1000af00:	2b00      	cmp	r3, #0
1000af02:	d012      	beq.n	1000af2a <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000af04:	0080      	lsls	r0, r0, #2
1000af06:	58c3      	ldr	r3, [r0, r3]
1000af08:	2b00      	cmp	r3, #0
1000af0a:	d00e      	beq.n	1000af2a <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000af0c:	0008      	movs	r0, r1
1000af0e:	4798      	blx	r3
1000af10:	e00b      	b.n	1000af2a <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000af12:	4b0e      	ldr	r3, [pc, #56]	; (1000af4c <ble_event_manager+0x11c>)
1000af14:	681b      	ldr	r3, [r3, #0]
1000af16:	2b00      	cmp	r3, #0
1000af18:	d007      	beq.n	1000af2a <ble_event_manager+0xfa>
			ble_user_event_cb();
1000af1a:	4798      	blx	r3
1000af1c:	e005      	b.n	1000af2a <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000af1e:	4d0c      	ldr	r5, [pc, #48]	; (1000af50 <ble_event_manager+0x120>)
1000af20:	0028      	movs	r0, r5
1000af22:	4c0c      	ldr	r4, [pc, #48]	; (1000af54 <ble_event_manager+0x124>)
1000af24:	47a0      	blx	r4
1000af26:	0028      	movs	r0, r5
1000af28:	47a0      	blx	r4
	}
	break;		
	}
}
1000af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000af2c:	100145e4 	.word	0x100145e4
1000af30:	100171b4 	.word	0x100171b4
1000af34:	100171c8 	.word	0x100171c8
1000af38:	10016f1c 	.word	0x10016f1c
1000af3c:	10017210 	.word	0x10017210
1000af40:	10016f18 	.word	0x10016f18
1000af44:	100171a0 	.word	0x100171a0
1000af48:	10017754 	.word	0x10017754
1000af4c:	10015d10 	.word	0x10015d10
1000af50:	10014718 	.word	0x10014718
1000af54:	10010929 	.word	0x10010929

1000af58 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000af58:	b510      	push	{r4, lr}
1000af5a:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000af5c:	4906      	ldr	r1, [pc, #24]	; (1000af78 <ble_event_task+0x20>)
1000af5e:	4807      	ldr	r0, [pc, #28]	; (1000af7c <ble_event_task+0x24>)
1000af60:	4b07      	ldr	r3, [pc, #28]	; (1000af80 <ble_event_task+0x28>)
1000af62:	4798      	blx	r3
1000af64:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000af66:	d104      	bne.n	1000af72 <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000af68:	4b04      	ldr	r3, [pc, #16]	; (1000af7c <ble_event_task+0x24>)
1000af6a:	7818      	ldrb	r0, [r3, #0]
1000af6c:	4902      	ldr	r1, [pc, #8]	; (1000af78 <ble_event_task+0x20>)
1000af6e:	4b05      	ldr	r3, [pc, #20]	; (1000af84 <ble_event_task+0x2c>)
1000af70:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000af72:	0020      	movs	r0, r4
1000af74:	bd10      	pop	{r4, pc}
1000af76:	46c0      	nop			; (mov r8, r8)
1000af78:	10017548 	.word	0x10017548
1000af7c:	1001720c 	.word	0x1001720c
1000af80:	1000c105 	.word	0x1000c105
1000af84:	1000ae31 	.word	0x1000ae31

1000af88 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000af88:	b570      	push	{r4, r5, r6, lr}
1000af8a:	b090      	sub	sp, #64	; 0x40
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000af8c:	ac08      	add	r4, sp, #32
1000af8e:	230a      	movs	r3, #10
1000af90:	7023      	strb	r3, [r4, #0]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000af92:	2609      	movs	r6, #9
1000af94:	7066      	strb	r6, [r4, #1]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000af96:	2209      	movs	r2, #9
1000af98:	4911      	ldr	r1, [pc, #68]	; (1000afe0 <ble_advertisement_data_set+0x58>)
1000af9a:	2022      	movs	r0, #34	; 0x22
1000af9c:	4468      	add	r0, sp
1000af9e:	4d11      	ldr	r5, [pc, #68]	; (1000afe4 <ble_advertisement_data_set+0x5c>)
1000afa0:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000afa2:	2300      	movs	r3, #0
1000afa4:	466a      	mov	r2, sp
1000afa6:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000afa8:	3315      	adds	r3, #21
1000afaa:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000afac:	72e6      	strb	r6, [r4, #11]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000afae:	33ea      	adds	r3, #234	; 0xea
1000afb0:	7323      	strb	r3, [r4, #12]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000afb2:	2208      	movs	r2, #8
1000afb4:	490c      	ldr	r1, [pc, #48]	; (1000afe8 <ble_advertisement_data_set+0x60>)
1000afb6:	3110      	adds	r1, #16
1000afb8:	202d      	movs	r0, #45	; 0x2d
1000afba:	4468      	add	r0, sp
1000afbc:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000afbe:	2300      	movs	r3, #0
1000afc0:	466a      	mov	r2, sp
1000afc2:	2115      	movs	r1, #21
1000afc4:	0020      	movs	r0, r4
1000afc6:	4c09      	ldr	r4, [pc, #36]	; (1000afec <ble_advertisement_data_set+0x64>)
1000afc8:	47a0      	blx	r4
1000afca:	2800      	cmp	r0, #0
1000afcc:	d005      	beq.n	1000afda <ble_advertisement_data_set+0x52>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000afce:	4808      	ldr	r0, [pc, #32]	; (1000aff0 <ble_advertisement_data_set+0x68>)
1000afd0:	4b08      	ldr	r3, [pc, #32]	; (1000aff4 <ble_advertisement_data_set+0x6c>)
1000afd2:	4798      	blx	r3
1000afd4:	4808      	ldr	r0, [pc, #32]	; (1000aff8 <ble_advertisement_data_set+0x70>)
1000afd6:	4b09      	ldr	r3, [pc, #36]	; (1000affc <ble_advertisement_data_set+0x74>)
1000afd8:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000afda:	2000      	movs	r0, #0
1000afdc:	b010      	add	sp, #64	; 0x40
1000afde:	bd70      	pop	{r4, r5, r6, pc}
1000afe0:	10014b34 	.word	0x10014b34
1000afe4:	100107e7 	.word	0x100107e7
1000afe8:	100146d4 	.word	0x100146d4
1000afec:	1000cb65 	.word	0x1000cb65
1000aff0:	10014718 	.word	0x10014718
1000aff4:	10010929 	.word	0x10010929
1000aff8:	10014d0c 	.word	0x10014d0c
1000affc:	10010809 	.word	0x10010809

1000b000 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000b000:	4770      	bx	lr
1000b002:	46c0      	nop			; (mov r8, r8)

1000b004 <hw_timer_init>:

void hw_timer_init(void)
{
1000b004:	b500      	push	{lr}
1000b006:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000b008:	a801      	add	r0, sp, #4
1000b00a:	4b05      	ldr	r3, [pc, #20]	; (1000b020 <hw_timer_init+0x1c>)
1000b00c:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000b00e:	4b05      	ldr	r3, [pc, #20]	; (1000b024 <hw_timer_init+0x20>)
1000b010:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000b012:	4b05      	ldr	r3, [pc, #20]	; (1000b028 <hw_timer_init+0x24>)
1000b014:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000b016:	a801      	add	r0, sp, #4
1000b018:	4b04      	ldr	r3, [pc, #16]	; (1000b02c <hw_timer_init+0x28>)
1000b01a:	4798      	blx	r3
}
1000b01c:	b009      	add	sp, #36	; 0x24
1000b01e:	bd00      	pop	{pc}
1000b020:	10008abd 	.word	0x10008abd
1000b024:	018cba80 	.word	0x018cba80
1000b028:	03197500 	.word	0x03197500
1000b02c:	10008b51 	.word	0x10008b51

1000b030 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000b030:	b510      	push	{r4, lr}
1000b032:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000b034:	2000      	movs	r0, #0
1000b036:	4c07      	ldr	r4, [pc, #28]	; (1000b054 <hw_timer_register_callback+0x24>)
1000b038:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000b03a:	4907      	ldr	r1, [pc, #28]	; (1000b058 <hw_timer_register_callback+0x28>)
1000b03c:	2001      	movs	r0, #1
1000b03e:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000b040:	2000      	movs	r0, #0
1000b042:	4c06      	ldr	r4, [pc, #24]	; (1000b05c <hw_timer_register_callback+0x2c>)
1000b044:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000b046:	2001      	movs	r0, #1
1000b048:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b04a:	2280      	movs	r2, #128	; 0x80
1000b04c:	01d2      	lsls	r2, r2, #7
1000b04e:	4b04      	ldr	r3, [pc, #16]	; (1000b060 <hw_timer_register_callback+0x30>)
1000b050:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b052:	bd10      	pop	{r4, pc}
1000b054:	10008c55 	.word	0x10008c55
1000b058:	1000b001 	.word	0x1000b001
1000b05c:	10008b2d 	.word	0x10008b2d
1000b060:	e000e100 	.word	0xe000e100

1000b064 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000b064:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000b066:	2800      	cmp	r0, #0
1000b068:	d100      	bne.n	1000b06c <hw_timer_start+0x8>
		delay = 1;
1000b06a:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000b06c:	4b05      	ldr	r3, [pc, #20]	; (1000b084 <hw_timer_start+0x20>)
1000b06e:	4343      	muls	r3, r0
1000b070:	001a      	movs	r2, r3
1000b072:	2100      	movs	r1, #0
1000b074:	2000      	movs	r0, #0
1000b076:	4b04      	ldr	r3, [pc, #16]	; (1000b088 <hw_timer_start+0x24>)
1000b078:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000b07a:	2000      	movs	r0, #0
1000b07c:	4b03      	ldr	r3, [pc, #12]	; (1000b08c <hw_timer_start+0x28>)
1000b07e:	4798      	blx	r3
}
1000b080:	bd10      	pop	{r4, pc}
1000b082:	46c0      	nop			; (mov r8, r8)
1000b084:	018cba80 	.word	0x018cba80
1000b088:	10008ae1 	.word	0x10008ae1
1000b08c:	10008b09 	.word	0x10008b09

1000b090 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000b090:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000b092:	2000      	movs	r0, #0
1000b094:	4b01      	ldr	r3, [pc, #4]	; (1000b09c <hw_timer_stop+0xc>)
1000b096:	4798      	blx	r3
}
1000b098:	bd10      	pop	{r4, pc}
1000b09a:	46c0      	nop			; (mov r8, r8)
1000b09c:	10008b2d 	.word	0x10008b2d

1000b0a0 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000b0a0:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000b0a2:	4b0e      	ldr	r3, [pc, #56]	; (1000b0dc <uart_read_complete_callback+0x3c>)
1000b0a4:	781b      	ldrb	r3, [r3, #0]
1000b0a6:	2b01      	cmp	r3, #1
1000b0a8:	d10b      	bne.n	1000b0c2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000b0aa:	2202      	movs	r2, #2
1000b0ac:	4b0b      	ldr	r3, [pc, #44]	; (1000b0dc <uart_read_complete_callback+0x3c>)
1000b0ae:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000b0b0:	4b0b      	ldr	r3, [pc, #44]	; (1000b0e0 <uart_read_complete_callback+0x40>)
1000b0b2:	681b      	ldr	r3, [r3, #0]
1000b0b4:	2b00      	cmp	r3, #0
1000b0b6:	d110      	bne.n	1000b0da <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b0b8:	2102      	movs	r1, #2
1000b0ba:	480a      	ldr	r0, [pc, #40]	; (1000b0e4 <uart_read_complete_callback+0x44>)
1000b0bc:	4b0a      	ldr	r3, [pc, #40]	; (1000b0e8 <uart_read_complete_callback+0x48>)
1000b0be:	4798      	blx	r3
1000b0c0:	e00b      	b.n	1000b0da <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000b0c2:	4b07      	ldr	r3, [pc, #28]	; (1000b0e0 <uart_read_complete_callback+0x40>)
1000b0c4:	681b      	ldr	r3, [r3, #0]
1000b0c6:	2b00      	cmp	r3, #0
1000b0c8:	d007      	beq.n	1000b0da <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000b0ca:	4c08      	ldr	r4, [pc, #32]	; (1000b0ec <uart_read_complete_callback+0x4c>)
1000b0cc:	7820      	ldrb	r0, [r4, #0]
1000b0ce:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b0d0:	2201      	movs	r2, #1
1000b0d2:	0021      	movs	r1, r4
1000b0d4:	4803      	ldr	r0, [pc, #12]	; (1000b0e4 <uart_read_complete_callback+0x44>)
1000b0d6:	4b06      	ldr	r3, [pc, #24]	; (1000b0f0 <uart_read_complete_callback+0x50>)
1000b0d8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000b0da:	bd10      	pop	{r4, pc}
1000b0dc:	10016d24 	.word	0x10016d24
1000b0e0:	10016d2c 	.word	0x10016d2c
1000b0e4:	10017758 	.word	0x10017758
1000b0e8:	10009d01 	.word	0x10009d01
1000b0ec:	10016d28 	.word	0x10016d28
1000b0f0:	10009ca5 	.word	0x10009ca5

1000b0f4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b0f4:	b570      	push	{r4, r5, r6, lr}
1000b0f6:	0006      	movs	r6, r0
1000b0f8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b0fa:	4c03      	ldr	r4, [pc, #12]	; (1000b108 <usart_serial_getchar+0x14>)
1000b0fc:	0029      	movs	r1, r5
1000b0fe:	0030      	movs	r0, r6
1000b100:	47a0      	blx	r4
1000b102:	2800      	cmp	r0, #0
1000b104:	d1fa      	bne.n	1000b0fc <usart_serial_getchar+0x8>
}
1000b106:	bd70      	pop	{r4, r5, r6, pc}
1000b108:	10009c91 	.word	0x10009c91

1000b10c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b10c:	b570      	push	{r4, r5, r6, lr}
1000b10e:	0006      	movs	r6, r0
1000b110:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b112:	4c03      	ldr	r4, [pc, #12]	; (1000b120 <usart_serial_putchar+0x14>)
1000b114:	0029      	movs	r1, r5
1000b116:	0030      	movs	r0, r6
1000b118:	47a0      	blx	r4
1000b11a:	2800      	cmp	r0, #0
1000b11c:	d1fa      	bne.n	1000b114 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b11e:	bd70      	pop	{r4, r5, r6, pc}
1000b120:	10009c81 	.word	0x10009c81

1000b124 <serial_console_init>:

void serial_console_init(void)
{
1000b124:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b126:	2100      	movs	r1, #0
1000b128:	2000      	movs	r0, #0
1000b12a:	4b19      	ldr	r3, [pc, #100]	; (1000b190 <serial_console_init+0x6c>)
1000b12c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b12e:	4c19      	ldr	r4, [pc, #100]	; (1000b194 <serial_console_init+0x70>)
1000b130:	0020      	movs	r0, r4
1000b132:	4b19      	ldr	r3, [pc, #100]	; (1000b198 <serial_console_init+0x74>)
1000b134:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000b136:	23e1      	movs	r3, #225	; 0xe1
1000b138:	025b      	lsls	r3, r3, #9
1000b13a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000b13c:	2302      	movs	r3, #2
1000b13e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000b140:	2203      	movs	r2, #3
1000b142:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000b144:	3201      	adds	r2, #1
1000b146:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000b148:	3201      	adds	r2, #1
1000b14a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000b14c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000b14e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000b150:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000b152:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b154:	4d11      	ldr	r5, [pc, #68]	; (1000b19c <serial_console_init+0x78>)
1000b156:	4b12      	ldr	r3, [pc, #72]	; (1000b1a0 <serial_console_init+0x7c>)
1000b158:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b15a:	4a12      	ldr	r2, [pc, #72]	; (1000b1a4 <serial_console_init+0x80>)
1000b15c:	4b12      	ldr	r3, [pc, #72]	; (1000b1a8 <serial_console_init+0x84>)
1000b15e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b160:	4a12      	ldr	r2, [pc, #72]	; (1000b1ac <serial_console_init+0x88>)
1000b162:	4b13      	ldr	r3, [pc, #76]	; (1000b1b0 <serial_console_init+0x8c>)
1000b164:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b166:	0022      	movs	r2, r4
1000b168:	4912      	ldr	r1, [pc, #72]	; (1000b1b4 <serial_console_init+0x90>)
1000b16a:	0028      	movs	r0, r5
1000b16c:	4b12      	ldr	r3, [pc, #72]	; (1000b1b8 <serial_console_init+0x94>)
1000b16e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b170:	4e12      	ldr	r6, [pc, #72]	; (1000b1bc <serial_console_init+0x98>)
1000b172:	6833      	ldr	r3, [r6, #0]
1000b174:	6898      	ldr	r0, [r3, #8]
1000b176:	2100      	movs	r1, #0
1000b178:	4c11      	ldr	r4, [pc, #68]	; (1000b1c0 <serial_console_init+0x9c>)
1000b17a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b17c:	6833      	ldr	r3, [r6, #0]
1000b17e:	6858      	ldr	r0, [r3, #4]
1000b180:	2100      	movs	r1, #0
1000b182:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b184:	2202      	movs	r2, #2
1000b186:	490f      	ldr	r1, [pc, #60]	; (1000b1c4 <serial_console_init+0xa0>)
1000b188:	0028      	movs	r0, r5
1000b18a:	4b0f      	ldr	r3, [pc, #60]	; (1000b1c8 <serial_console_init+0xa4>)
1000b18c:	4798      	blx	r3
}
1000b18e:	bd70      	pop	{r4, r5, r6, pc}
1000b190:	1000900d 	.word	0x1000900d
1000b194:	1001777c 	.word	0x1001777c
1000b198:	10009a99 	.word	0x10009a99
1000b19c:	10017758 	.word	0x10017758
1000b1a0:	10016f14 	.word	0x10016f14
1000b1a4:	1000b10d 	.word	0x1000b10d
1000b1a8:	10016f10 	.word	0x10016f10
1000b1ac:	1000b0f5 	.word	0x1000b0f5
1000b1b0:	10016f0c 	.word	0x10016f0c
1000b1b4:	40004000 	.word	0x40004000
1000b1b8:	10009ac5 	.word	0x10009ac5
1000b1bc:	100153b4 	.word	0x100153b4
1000b1c0:	100109b5 	.word	0x100109b5
1000b1c4:	1000b0a1 	.word	0x1000b0a1
1000b1c8:	10009ccd 	.word	0x10009ccd

1000b1cc <_time_start>:

void _time_start(unsigned int sec)
{
1000b1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1ce:	b083      	sub	sp, #12
1000b1d0:	0005      	movs	r5, r0
	system_clock_get_value();
1000b1d2:	4c0d      	ldr	r4, [pc, #52]	; (1000b208 <_time_start+0x3c>)
1000b1d4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000b1d6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000b1d8:	4f0c      	ldr	r7, [pc, #48]	; (1000b20c <_time_start+0x40>)
1000b1da:	47b8      	blx	r7
1000b1dc:	4e0c      	ldr	r6, [pc, #48]	; (1000b210 <_time_start+0x44>)
1000b1de:	4a0d      	ldr	r2, [pc, #52]	; (1000b214 <_time_start+0x48>)
1000b1e0:	4b0d      	ldr	r3, [pc, #52]	; (1000b218 <_time_start+0x4c>)
1000b1e2:	47b0      	blx	r6
1000b1e4:	9000      	str	r0, [sp, #0]
1000b1e6:	9101      	str	r1, [sp, #4]
1000b1e8:	20fa      	movs	r0, #250	; 0xfa
1000b1ea:	0080      	lsls	r0, r0, #2
1000b1ec:	4368      	muls	r0, r5
1000b1ee:	47b8      	blx	r7
1000b1f0:	0002      	movs	r2, r0
1000b1f2:	000b      	movs	r3, r1
1000b1f4:	9800      	ldr	r0, [sp, #0]
1000b1f6:	9901      	ldr	r1, [sp, #4]
1000b1f8:	47b0      	blx	r6
1000b1fa:	4b08      	ldr	r3, [pc, #32]	; (1000b21c <_time_start+0x50>)
1000b1fc:	4798      	blx	r3
1000b1fe:	4b08      	ldr	r3, [pc, #32]	; (1000b220 <_time_start+0x54>)
1000b200:	6018      	str	r0, [r3, #0]
}
1000b202:	b003      	add	sp, #12
1000b204:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b206:	46c0      	nop			; (mov r8, r8)
1000b208:	10009091 	.word	0x10009091
1000b20c:	10010141 	.word	0x10010141
1000b210:	1000f4b5 	.word	0x1000f4b5
1000b214:	19feaec7 	.word	0x19feaec7
1000b218:	3f09d8ef 	.word	0x3f09d8ef
1000b21c:	1000ef01 	.word	0x1000ef01
1000b220:	10016d20 	.word	0x10016d20

1000b224 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000b224:	4b02      	ldr	r3, [pc, #8]	; (1000b230 <_time_done+0xc>)
1000b226:	681a      	ldr	r2, [r3, #0]
1000b228:	1e50      	subs	r0, r2, #1
1000b22a:	6018      	str	r0, [r3, #0]
}
1000b22c:	4770      	bx	lr
1000b22e:	46c0      	nop			; (mov r8, r8)
1000b230:	10016d20 	.word	0x10016d20

1000b234 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000b234:	b570      	push	{r4, r5, r6, lr}
1000b236:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000b238:	2201      	movs	r2, #1
1000b23a:	4b11      	ldr	r3, [pc, #68]	; (1000b280 <getchar_b11_timeout+0x4c>)
1000b23c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000b23e:	4b11      	ldr	r3, [pc, #68]	; (1000b284 <getchar_b11_timeout+0x50>)
1000b240:	681b      	ldr	r3, [r3, #0]
1000b242:	2b00      	cmp	r3, #0
1000b244:	d103      	bne.n	1000b24e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000b246:	2102      	movs	r1, #2
1000b248:	480f      	ldr	r0, [pc, #60]	; (1000b288 <getchar_b11_timeout+0x54>)
1000b24a:	4b10      	ldr	r3, [pc, #64]	; (1000b28c <getchar_b11_timeout+0x58>)
1000b24c:	4798      	blx	r3

	_time_start(sec);
1000b24e:	0020      	movs	r0, r4
1000b250:	4b0f      	ldr	r3, [pc, #60]	; (1000b290 <getchar_b11_timeout+0x5c>)
1000b252:	4798      	blx	r3
	
	string_input[0] = 0;
1000b254:	490f      	ldr	r1, [pc, #60]	; (1000b294 <getchar_b11_timeout+0x60>)
1000b256:	2300      	movs	r3, #0
1000b258:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b25a:	2201      	movs	r2, #1
1000b25c:	480a      	ldr	r0, [pc, #40]	; (1000b288 <getchar_b11_timeout+0x54>)
1000b25e:	4b0e      	ldr	r3, [pc, #56]	; (1000b298 <getchar_b11_timeout+0x64>)
1000b260:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000b262:	4c07      	ldr	r4, [pc, #28]	; (1000b280 <getchar_b11_timeout+0x4c>)
1000b264:	4d0d      	ldr	r5, [pc, #52]	; (1000b29c <getchar_b11_timeout+0x68>)
1000b266:	7823      	ldrb	r3, [r4, #0]
1000b268:	2b02      	cmp	r3, #2
1000b26a:	d002      	beq.n	1000b272 <getchar_b11_timeout+0x3e>
1000b26c:	47a8      	blx	r5
1000b26e:	2800      	cmp	r0, #0
1000b270:	d1f9      	bne.n	1000b266 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000b272:	2200      	movs	r2, #0
1000b274:	4b02      	ldr	r3, [pc, #8]	; (1000b280 <getchar_b11_timeout+0x4c>)
1000b276:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b278:	4b06      	ldr	r3, [pc, #24]	; (1000b294 <getchar_b11_timeout+0x60>)
1000b27a:	7818      	ldrb	r0, [r3, #0]
}
1000b27c:	bd70      	pop	{r4, r5, r6, pc}
1000b27e:	46c0      	nop			; (mov r8, r8)
1000b280:	10016d24 	.word	0x10016d24
1000b284:	10016d2c 	.word	0x10016d2c
1000b288:	10017758 	.word	0x10017758
1000b28c:	10009ce1 	.word	0x10009ce1
1000b290:	1000b1cd 	.word	0x1000b1cd
1000b294:	10016d28 	.word	0x10016d28
1000b298:	10009ca5 	.word	0x10009ca5
1000b29c:	1000b225 	.word	0x1000b225

1000b2a0 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b2a0:	4b02      	ldr	r3, [pc, #8]	; (1000b2ac <platform_event_free+0xc>)
1000b2a2:	681a      	ldr	r2, [r3, #0]
1000b2a4:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b2a6:	6018      	str	r0, [r3, #0]
}
1000b2a8:	4770      	bx	lr
1000b2aa:	46c0      	nop			; (mov r8, r8)
1000b2ac:	10016d34 	.word	0x10016d34

1000b2b0 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b2b0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b2b2:	4b0b      	ldr	r3, [pc, #44]	; (1000b2e0 <platform_event_post+0x30>)
1000b2b4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b2b6:	2c00      	cmp	r4, #0
1000b2b8:	d011      	beq.n	1000b2de <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b2ba:	6825      	ldr	r5, [r4, #0]
1000b2bc:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b2be:	2300      	movs	r3, #0
1000b2c0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b2c2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b2c4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b2c6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b2c8:	4b06      	ldr	r3, [pc, #24]	; (1000b2e4 <platform_event_post+0x34>)
1000b2ca:	681a      	ldr	r2, [r3, #0]
1000b2cc:	2a00      	cmp	r2, #0
1000b2ce:	d102      	bne.n	1000b2d6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b2d0:	601c      	str	r4, [r3, #0]
1000b2d2:	e004      	b.n	1000b2de <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b2d4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b2d6:	6813      	ldr	r3, [r2, #0]
1000b2d8:	2b00      	cmp	r3, #0
1000b2da:	d1fb      	bne.n	1000b2d4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b2dc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b2de:	bd30      	pop	{r4, r5, pc}
1000b2e0:	10016d34 	.word	0x10016d34
1000b2e4:	10016d30 	.word	0x10016d30

1000b2e8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b2e8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b2ea:	2300      	movs	r3, #0
1000b2ec:	4a06      	ldr	r2, [pc, #24]	; (1000b308 <platform_event_init+0x20>)
1000b2ee:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b2f0:	4a06      	ldr	r2, [pc, #24]	; (1000b30c <platform_event_init+0x24>)
1000b2f2:	6013      	str	r3, [r2, #0]
1000b2f4:	4c06      	ldr	r4, [pc, #24]	; (1000b310 <platform_event_init+0x28>)
1000b2f6:	0026      	movs	r6, r4
1000b2f8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b2fa:	4d06      	ldr	r5, [pc, #24]	; (1000b314 <platform_event_init+0x2c>)
1000b2fc:	0020      	movs	r0, r4
1000b2fe:	47a8      	blx	r5
1000b300:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b302:	42b4      	cmp	r4, r6
1000b304:	d1fa      	bne.n	1000b2fc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b306:	bd70      	pop	{r4, r5, r6, pc}
1000b308:	10016d34 	.word	0x10016d34
1000b30c:	10016d30 	.word	0x10016d30
1000b310:	10016d38 	.word	0x10016d38
1000b314:	1000b2a1 	.word	0x1000b2a1

1000b318 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b318:	b570      	push	{r4, r5, r6, lr}
1000b31a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b31c:	4b13      	ldr	r3, [pc, #76]	; (1000b36c <at_ke_msg_send+0x54>)
1000b31e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b320:	4b13      	ldr	r3, [pc, #76]	; (1000b370 <at_ke_msg_send+0x58>)
1000b322:	681b      	ldr	r3, [r3, #0]
1000b324:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b326:	2c0c      	cmp	r4, #12
1000b328:	d01f      	beq.n	1000b36a <at_ke_msg_send+0x52>
1000b32a:	3c0c      	subs	r4, #12
1000b32c:	88e3      	ldrh	r3, [r4, #6]
1000b32e:	2b05      	cmp	r3, #5
1000b330:	d01b      	beq.n	1000b36a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b332:	07eb      	lsls	r3, r5, #31
1000b334:	d414      	bmi.n	1000b360 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b336:	4b0f      	ldr	r3, [pc, #60]	; (1000b374 <at_ke_msg_send+0x5c>)
1000b338:	681b      	ldr	r3, [r3, #0]
1000b33a:	2002      	movs	r0, #2
1000b33c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b33e:	4b0e      	ldr	r3, [pc, #56]	; (1000b378 <at_ke_msg_send+0x60>)
1000b340:	681b      	ldr	r3, [r3, #0]
1000b342:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b344:	4c0d      	ldr	r4, [pc, #52]	; (1000b37c <at_ke_msg_send+0x64>)
1000b346:	2003      	movs	r0, #3
1000b348:	6823      	ldr	r3, [r4, #0]
1000b34a:	4798      	blx	r3
1000b34c:	2800      	cmp	r0, #0
1000b34e:	d1fa      	bne.n	1000b346 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b350:	4b0b      	ldr	r3, [pc, #44]	; (1000b380 <at_ke_msg_send+0x68>)
1000b352:	681b      	ldr	r3, [r3, #0]
1000b354:	3002      	adds	r0, #2
1000b356:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b358:	2201      	movs	r2, #1
1000b35a:	4b0a      	ldr	r3, [pc, #40]	; (1000b384 <at_ke_msg_send+0x6c>)
1000b35c:	601a      	str	r2, [r3, #0]
1000b35e:	e004      	b.n	1000b36a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b360:	4b09      	ldr	r3, [pc, #36]	; (1000b388 <at_ke_msg_send+0x70>)
1000b362:	6818      	ldr	r0, [r3, #0]
1000b364:	4b09      	ldr	r3, [pc, #36]	; (1000b38c <at_ke_msg_send+0x74>)
1000b366:	681b      	ldr	r3, [r3, #0]
1000b368:	4798      	blx	r3
		}
	}
}
1000b36a:	bd70      	pop	{r4, r5, r6, pc}
1000b36c:	4000b1ec 	.word	0x4000b1ec
1000b370:	10016de0 	.word	0x10016de0
1000b374:	10016dd8 	.word	0x10016dd8
1000b378:	10016dec 	.word	0x10016dec
1000b37c:	10016dc4 	.word	0x10016dc4
1000b380:	10016dcc 	.word	0x10016dcc
1000b384:	4000b020 	.word	0x4000b020
1000b388:	10016dd0 	.word	0x10016dd0
1000b38c:	10016dc0 	.word	0x10016dc0

1000b390 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b390:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b392:	4b06      	ldr	r3, [pc, #24]	; (1000b3ac <samb11_plf_resume_callback+0x1c>)
1000b394:	4a06      	ldr	r2, [pc, #24]	; (1000b3b0 <samb11_plf_resume_callback+0x20>)
1000b396:	6819      	ldr	r1, [r3, #0]
1000b398:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b39a:	685a      	ldr	r2, [r3, #4]
1000b39c:	4b05      	ldr	r3, [pc, #20]	; (1000b3b4 <samb11_plf_resume_callback+0x24>)
1000b39e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b3a0:	4b05      	ldr	r3, [pc, #20]	; (1000b3b8 <samb11_plf_resume_callback+0x28>)
1000b3a2:	681b      	ldr	r3, [r3, #0]
1000b3a4:	2b00      	cmp	r3, #0
1000b3a6:	d000      	beq.n	1000b3aa <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b3a8:	4798      	blx	r3
	}
}
1000b3aa:	bd10      	pop	{r4, pc}
1000b3ac:	100177a4 	.word	0x100177a4
1000b3b0:	4000b00c 	.word	0x4000b00c
1000b3b4:	4000b010 	.word	0x4000b010
1000b3b8:	10017a80 	.word	0x10017a80

1000b3bc <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b3bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b3be:	2232      	movs	r2, #50	; 0x32
1000b3c0:	2100      	movs	r1, #0
1000b3c2:	480d      	ldr	r0, [pc, #52]	; (1000b3f8 <init_port_list+0x3c>)
1000b3c4:	4b0d      	ldr	r3, [pc, #52]	; (1000b3fc <init_port_list+0x40>)
1000b3c6:	4798      	blx	r3
1000b3c8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b3ca:	480b      	ldr	r0, [pc, #44]	; (1000b3f8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b3cc:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b3ce:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b3d0:	004a      	lsls	r2, r1, #1
1000b3d2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b3d4:	1882      	adds	r2, r0, r2
1000b3d6:	7853      	ldrb	r3, [r2, #1]
1000b3d8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b3da:	b2db      	uxtb	r3, r3
1000b3dc:	43a3      	bics	r3, r4
1000b3de:	7053      	strb	r3, [r2, #1]
1000b3e0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b3e2:	2919      	cmp	r1, #25
1000b3e4:	d1f4      	bne.n	1000b3d0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b3e6:	4b04      	ldr	r3, [pc, #16]	; (1000b3f8 <init_port_list+0x3c>)
1000b3e8:	785a      	ldrb	r2, [r3, #1]
1000b3ea:	3918      	subs	r1, #24
1000b3ec:	438a      	bics	r2, r1
1000b3ee:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b3f0:	78da      	ldrb	r2, [r3, #3]
1000b3f2:	438a      	bics	r2, r1
1000b3f4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b3f6:	bd70      	pop	{r4, r5, r6, pc}
1000b3f8:	100177c0 	.word	0x100177c0
1000b3fc:	100107f9 	.word	0x100107f9

1000b400 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b400:	4a06      	ldr	r2, [pc, #24]	; (1000b41c <init_clock+0x1c>)
1000b402:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b404:	4b06      	ldr	r3, [pc, #24]	; (1000b420 <init_clock+0x20>)
1000b406:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b408:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b40a:	4a06      	ldr	r2, [pc, #24]	; (1000b424 <init_clock+0x24>)
1000b40c:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b40e:	4906      	ldr	r1, [pc, #24]	; (1000b428 <init_clock+0x28>)
1000b410:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b412:	4b06      	ldr	r3, [pc, #24]	; (1000b42c <init_clock+0x2c>)
1000b414:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b416:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b418:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b41a:	4770      	bx	lr
1000b41c:	4000b00c 	.word	0x4000b00c
1000b420:	fffe0fd3 	.word	0xfffe0fd3
1000b424:	100177a4 	.word	0x100177a4
1000b428:	4000b010 	.word	0x4000b010
1000b42c:	ffffe7c0 	.word	0xffffe7c0

1000b430 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b430:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b432:	4657      	mov	r7, sl
1000b434:	464e      	mov	r6, r9
1000b436:	4645      	mov	r5, r8
1000b438:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b43a:	4b4f      	ldr	r3, [pc, #316]	; (1000b578 <platform_driver_init+0x148>)
1000b43c:	781b      	ldrb	r3, [r3, #0]
1000b43e:	2b00      	cmp	r3, #0
1000b440:	d004      	beq.n	1000b44c <platform_driver_init+0x1c>
1000b442:	4b4d      	ldr	r3, [pc, #308]	; (1000b578 <platform_driver_init+0x148>)
1000b444:	781b      	ldrb	r3, [r3, #0]
1000b446:	2b01      	cmp	r3, #1
1000b448:	d100      	bne.n	1000b44c <platform_driver_init+0x1c>
1000b44a:	e08c      	b.n	1000b566 <platform_driver_init+0x136>
		init_port_list();
1000b44c:	4b4b      	ldr	r3, [pc, #300]	; (1000b57c <platform_driver_init+0x14c>)
1000b44e:	4798      	blx	r3
		init_clock();
1000b450:	4b4b      	ldr	r3, [pc, #300]	; (1000b580 <platform_driver_init+0x150>)
1000b452:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b454:	2300      	movs	r3, #0
1000b456:	4698      	mov	r8, r3
1000b458:	4b4a      	ldr	r3, [pc, #296]	; (1000b584 <platform_driver_init+0x154>)
1000b45a:	4642      	mov	r2, r8
1000b45c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b45e:	4c4a      	ldr	r4, [pc, #296]	; (1000b588 <platform_driver_init+0x158>)
1000b460:	2380      	movs	r3, #128	; 0x80
1000b462:	2280      	movs	r2, #128	; 0x80
1000b464:	0412      	lsls	r2, r2, #16
1000b466:	4692      	mov	sl, r2
1000b468:	50e2      	str	r2, [r4, r3]
1000b46a:	2280      	movs	r2, #128	; 0x80
1000b46c:	0452      	lsls	r2, r2, #17
1000b46e:	4691      	mov	r9, r2
1000b470:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b472:	4d46      	ldr	r5, [pc, #280]	; (1000b58c <platform_driver_init+0x15c>)
1000b474:	4b46      	ldr	r3, [pc, #280]	; (1000b590 <platform_driver_init+0x160>)
1000b476:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b478:	4b46      	ldr	r3, [pc, #280]	; (1000b594 <platform_driver_init+0x164>)
1000b47a:	4a47      	ldr	r2, [pc, #284]	; (1000b598 <platform_driver_init+0x168>)
1000b47c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b47e:	4947      	ldr	r1, [pc, #284]	; (1000b59c <platform_driver_init+0x16c>)
1000b480:	4a47      	ldr	r2, [pc, #284]	; (1000b5a0 <platform_driver_init+0x170>)
1000b482:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b484:	4a47      	ldr	r2, [pc, #284]	; (1000b5a4 <platform_driver_init+0x174>)
1000b486:	6811      	ldr	r1, [r2, #0]
1000b488:	4a47      	ldr	r2, [pc, #284]	; (1000b5a8 <platform_driver_init+0x178>)
1000b48a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b48c:	4a47      	ldr	r2, [pc, #284]	; (1000b5ac <platform_driver_init+0x17c>)
1000b48e:	6811      	ldr	r1, [r2, #0]
1000b490:	4a47      	ldr	r2, [pc, #284]	; (1000b5b0 <platform_driver_init+0x180>)
1000b492:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b494:	4947      	ldr	r1, [pc, #284]	; (1000b5b4 <platform_driver_init+0x184>)
1000b496:	4a48      	ldr	r2, [pc, #288]	; (1000b5b8 <platform_driver_init+0x188>)
1000b498:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b49a:	4948      	ldr	r1, [pc, #288]	; (1000b5bc <platform_driver_init+0x18c>)
1000b49c:	4a48      	ldr	r2, [pc, #288]	; (1000b5c0 <platform_driver_init+0x190>)
1000b49e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b4a0:	4f48      	ldr	r7, [pc, #288]	; (1000b5c4 <platform_driver_init+0x194>)
1000b4a2:	4a49      	ldr	r2, [pc, #292]	; (1000b5c8 <platform_driver_init+0x198>)
1000b4a4:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b4a6:	4949      	ldr	r1, [pc, #292]	; (1000b5cc <platform_driver_init+0x19c>)
1000b4a8:	4a49      	ldr	r2, [pc, #292]	; (1000b5d0 <platform_driver_init+0x1a0>)
1000b4aa:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b4ac:	4949      	ldr	r1, [pc, #292]	; (1000b5d4 <platform_driver_init+0x1a4>)
1000b4ae:	4a4a      	ldr	r2, [pc, #296]	; (1000b5d8 <platform_driver_init+0x1a8>)
1000b4b0:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b4b2:	4e4a      	ldr	r6, [pc, #296]	; (1000b5dc <platform_driver_init+0x1ac>)
1000b4b4:	4a4a      	ldr	r2, [pc, #296]	; (1000b5e0 <platform_driver_init+0x1b0>)
1000b4b6:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b4b8:	494a      	ldr	r1, [pc, #296]	; (1000b5e4 <platform_driver_init+0x1b4>)
1000b4ba:	4a4b      	ldr	r2, [pc, #300]	; (1000b5e8 <platform_driver_init+0x1b8>)
1000b4bc:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b4be:	494b      	ldr	r1, [pc, #300]	; (1000b5ec <platform_driver_init+0x1bc>)
1000b4c0:	4a4b      	ldr	r2, [pc, #300]	; (1000b5f0 <platform_driver_init+0x1c0>)
1000b4c2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b4c4:	494b      	ldr	r1, [pc, #300]	; (1000b5f4 <platform_driver_init+0x1c4>)
1000b4c6:	4a4c      	ldr	r2, [pc, #304]	; (1000b5f8 <platform_driver_init+0x1c8>)
1000b4c8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b4ca:	494c      	ldr	r1, [pc, #304]	; (1000b5fc <platform_driver_init+0x1cc>)
1000b4cc:	4a4c      	ldr	r2, [pc, #304]	; (1000b600 <platform_driver_init+0x1d0>)
1000b4ce:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b4d0:	494c      	ldr	r1, [pc, #304]	; (1000b604 <platform_driver_init+0x1d4>)
1000b4d2:	4a4d      	ldr	r2, [pc, #308]	; (1000b608 <platform_driver_init+0x1d8>)
1000b4d4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b4d6:	2028      	movs	r0, #40	; 0x28
1000b4d8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b4da:	494c      	ldr	r1, [pc, #304]	; (1000b60c <platform_driver_init+0x1dc>)
1000b4dc:	2028      	movs	r0, #40	; 0x28
1000b4de:	682b      	ldr	r3, [r5, #0]
1000b4e0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b4e2:	682b      	ldr	r3, [r5, #0]
1000b4e4:	494a      	ldr	r1, [pc, #296]	; (1000b610 <platform_driver_init+0x1e0>)
1000b4e6:	2027      	movs	r0, #39	; 0x27
1000b4e8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b4ea:	4b4a      	ldr	r3, [pc, #296]	; (1000b614 <platform_driver_init+0x1e4>)
1000b4ec:	681a      	ldr	r2, [r3, #0]
1000b4ee:	4b4a      	ldr	r3, [pc, #296]	; (1000b618 <platform_driver_init+0x1e8>)
1000b4f0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b4f2:	4a4a      	ldr	r2, [pc, #296]	; (1000b61c <platform_driver_init+0x1ec>)
1000b4f4:	4b4a      	ldr	r3, [pc, #296]	; (1000b620 <platform_driver_init+0x1f0>)
1000b4f6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b4f8:	4a4a      	ldr	r2, [pc, #296]	; (1000b624 <platform_driver_init+0x1f4>)
1000b4fa:	4b4b      	ldr	r3, [pc, #300]	; (1000b628 <platform_driver_init+0x1f8>)
1000b4fc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b4fe:	4a4b      	ldr	r2, [pc, #300]	; (1000b62c <platform_driver_init+0x1fc>)
1000b500:	4b4b      	ldr	r3, [pc, #300]	; (1000b630 <platform_driver_init+0x200>)
1000b502:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b504:	4a4b      	ldr	r2, [pc, #300]	; (1000b634 <platform_driver_init+0x204>)
1000b506:	4b4c      	ldr	r3, [pc, #304]	; (1000b638 <platform_driver_init+0x208>)
1000b508:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b50a:	4a4c      	ldr	r2, [pc, #304]	; (1000b63c <platform_driver_init+0x20c>)
1000b50c:	4b4c      	ldr	r3, [pc, #304]	; (1000b640 <platform_driver_init+0x210>)
1000b50e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b510:	4a4c      	ldr	r2, [pc, #304]	; (1000b644 <platform_driver_init+0x214>)
1000b512:	4b4d      	ldr	r3, [pc, #308]	; (1000b648 <platform_driver_init+0x218>)
1000b514:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b516:	4a4d      	ldr	r2, [pc, #308]	; (1000b64c <platform_driver_init+0x21c>)
1000b518:	4b4d      	ldr	r3, [pc, #308]	; (1000b650 <platform_driver_init+0x220>)
1000b51a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b51c:	22a0      	movs	r2, #160	; 0xa0
1000b51e:	0092      	lsls	r2, r2, #2
1000b520:	2100      	movs	r1, #0
1000b522:	484c      	ldr	r0, [pc, #304]	; (1000b654 <platform_driver_init+0x224>)
1000b524:	4b4c      	ldr	r3, [pc, #304]	; (1000b658 <platform_driver_init+0x228>)
1000b526:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b528:	2280      	movs	r2, #128	; 0x80
1000b52a:	0092      	lsls	r2, r2, #2
1000b52c:	4b4b      	ldr	r3, [pc, #300]	; (1000b65c <platform_driver_init+0x22c>)
1000b52e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b530:	4b4b      	ldr	r3, [pc, #300]	; (1000b660 <platform_driver_init+0x230>)
1000b532:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b534:	4653      	mov	r3, sl
1000b536:	6023      	str	r3, [r4, #0]
1000b538:	464b      	mov	r3, r9
1000b53a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b53c:	4b49      	ldr	r3, [pc, #292]	; (1000b664 <platform_driver_init+0x234>)
1000b53e:	4642      	mov	r2, r8
1000b540:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b542:	683b      	ldr	r3, [r7, #0]
1000b544:	4a48      	ldr	r2, [pc, #288]	; (1000b668 <platform_driver_init+0x238>)
1000b546:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b548:	6833      	ldr	r3, [r6, #0]
1000b54a:	4a48      	ldr	r2, [pc, #288]	; (1000b66c <platform_driver_init+0x23c>)
1000b54c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b54e:	2000      	movs	r0, #0
1000b550:	4c47      	ldr	r4, [pc, #284]	; (1000b670 <platform_driver_init+0x240>)
1000b552:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b554:	2001      	movs	r0, #1
1000b556:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b558:	2002      	movs	r0, #2
1000b55a:	47a0      	blx	r4
		platform_initialized = 1;
1000b55c:	2201      	movs	r2, #1
1000b55e:	4b06      	ldr	r3, [pc, #24]	; (1000b578 <platform_driver_init+0x148>)
1000b560:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b562:	2000      	movs	r0, #0
1000b564:	e003      	b.n	1000b56e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b566:	2201      	movs	r2, #1
1000b568:	4b03      	ldr	r3, [pc, #12]	; (1000b578 <platform_driver_init+0x148>)
1000b56a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b56c:	2001      	movs	r0, #1
	}
	return status;
}
1000b56e:	bc1c      	pop	{r2, r3, r4}
1000b570:	4690      	mov	r8, r2
1000b572:	4699      	mov	r9, r3
1000b574:	46a2      	mov	sl, r4
1000b576:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b578:	10016dc8 	.word	0x10016dc8
1000b57c:	1000b3bd 	.word	0x1000b3bd
1000b580:	1000b401 	.word	0x1000b401
1000b584:	10016de8 	.word	0x10016de8
1000b588:	e000e100 	.word	0xe000e100
1000b58c:	10017a74 	.word	0x10017a74
1000b590:	000007d7 	.word	0x000007d7
1000b594:	000007bd 	.word	0x000007bd
1000b598:	100177b0 	.word	0x100177b0
1000b59c:	0001bc51 	.word	0x0001bc51
1000b5a0:	10017a78 	.word	0x10017a78
1000b5a4:	100400bc 	.word	0x100400bc
1000b5a8:	10016db8 	.word	0x10016db8
1000b5ac:	100400b8 	.word	0x100400b8
1000b5b0:	10016db4 	.word	0x10016db4
1000b5b4:	0001b99f 	.word	0x0001b99f
1000b5b8:	100177ac 	.word	0x100177ac
1000b5bc:	0001b9db 	.word	0x0001b9db
1000b5c0:	100177b8 	.word	0x100177b8
1000b5c4:	10017a88 	.word	0x10017a88
1000b5c8:	1004003c 	.word	0x1004003c
1000b5cc:	10041fc0 	.word	0x10041fc0
1000b5d0:	100177bc 	.word	0x100177bc
1000b5d4:	10041fc4 	.word	0x10041fc4
1000b5d8:	10017a84 	.word	0x10017a84
1000b5dc:	10017a7c 	.word	0x10017a7c
1000b5e0:	10041fd4 	.word	0x10041fd4
1000b5e4:	10041fd8 	.word	0x10041fd8
1000b5e8:	100177b4 	.word	0x100177b4
1000b5ec:	0001cbe9 	.word	0x0001cbe9
1000b5f0:	10016dd8 	.word	0x10016dd8
1000b5f4:	0001cd8f 	.word	0x0001cd8f
1000b5f8:	10016dcc 	.word	0x10016dcc
1000b5fc:	0001cea3 	.word	0x0001cea3
1000b600:	10016dec 	.word	0x10016dec
1000b604:	0001cbcf 	.word	0x0001cbcf
1000b608:	10016dc4 	.word	0x10016dc4
1000b60c:	1000ba49 	.word	0x1000ba49
1000b610:	1000b9dd 	.word	0x1000b9dd
1000b614:	100400e4 	.word	0x100400e4
1000b618:	10016de0 	.word	0x10016de0
1000b61c:	00019fe9 	.word	0x00019fe9
1000b620:	10016df0 	.word	0x10016df0
1000b624:	0001dbdd 	.word	0x0001dbdd
1000b628:	10016dc0 	.word	0x10016dc0
1000b62c:	0001dc5b 	.word	0x0001dc5b
1000b630:	10016dd4 	.word	0x10016dd4
1000b634:	100405ec 	.word	0x100405ec
1000b638:	10016dd0 	.word	0x10016dd0
1000b63c:	0001d5e3 	.word	0x0001d5e3
1000b640:	10016ddc 	.word	0x10016ddc
1000b644:	10040c20 	.word	0x10040c20
1000b648:	10016df4 	.word	0x10016df4
1000b64c:	00019f09 	.word	0x00019f09
1000b650:	10016db0 	.word	0x10016db0
1000b654:	100177f4 	.word	0x100177f4
1000b658:	100107f9 	.word	0x100107f9
1000b65c:	10017a8c 	.word	0x10017a8c
1000b660:	1000b2e9 	.word	0x1000b2e9
1000b664:	10017a80 	.word	0x10017a80
1000b668:	1000b391 	.word	0x1000b391
1000b66c:	1000baa5 	.word	0x1000baa5
1000b670:	1000ba8d 	.word	0x1000ba8d

1000b674 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b674:	4b04      	ldr	r3, [pc, #16]	; (1000b688 <platform_register_ble_msg_handler+0x14>)
1000b676:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b678:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b67a:	2a01      	cmp	r2, #1
1000b67c:	d102      	bne.n	1000b684 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b67e:	4b03      	ldr	r3, [pc, #12]	; (1000b68c <platform_register_ble_msg_handler+0x18>)
1000b680:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b682:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b684:	0018      	movs	r0, r3
1000b686:	4770      	bx	lr
1000b688:	10016dc8 	.word	0x10016dc8
1000b68c:	10016de8 	.word	0x10016de8

1000b690 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b690:	b570      	push	{r4, r5, r6, lr}
1000b692:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b694:	4b0e      	ldr	r3, [pc, #56]	; (1000b6d0 <platform_interface_send+0x40>)
1000b696:	681b      	ldr	r3, [r3, #0]
1000b698:	2b00      	cmp	r3, #0
1000b69a:	d002      	beq.n	1000b6a2 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b69c:	8840      	ldrh	r0, [r0, #2]
1000b69e:	4798      	blx	r3
1000b6a0:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b6a2:	88e3      	ldrh	r3, [r4, #6]
1000b6a4:	88a2      	ldrh	r2, [r4, #4]
1000b6a6:	8861      	ldrh	r1, [r4, #2]
1000b6a8:	8820      	ldrh	r0, [r4, #0]
1000b6aa:	4d0a      	ldr	r5, [pc, #40]	; (1000b6d4 <platform_interface_send+0x44>)
1000b6ac:	682d      	ldr	r5, [r5, #0]
1000b6ae:	47a8      	blx	r5
1000b6b0:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b6b2:	88e2      	ldrh	r2, [r4, #6]
1000b6b4:	2a00      	cmp	r2, #0
1000b6b6:	d102      	bne.n	1000b6be <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b6b8:	4b07      	ldr	r3, [pc, #28]	; (1000b6d8 <platform_interface_send+0x48>)
1000b6ba:	4798      	blx	r3
1000b6bc:	e006      	b.n	1000b6cc <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b6be:	0021      	movs	r1, r4
1000b6c0:	3108      	adds	r1, #8
1000b6c2:	4b06      	ldr	r3, [pc, #24]	; (1000b6dc <platform_interface_send+0x4c>)
1000b6c4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b6c6:	0028      	movs	r0, r5
1000b6c8:	4b03      	ldr	r3, [pc, #12]	; (1000b6d8 <platform_interface_send+0x48>)
1000b6ca:	4798      	blx	r3
	}
}
1000b6cc:	bd70      	pop	{r4, r5, r6, pc}
1000b6ce:	46c0      	nop			; (mov r8, r8)
1000b6d0:	10016db8 	.word	0x10016db8
1000b6d4:	10016df0 	.word	0x10016df0
1000b6d8:	1000b319 	.word	0x1000b319
1000b6dc:	100107e7 	.word	0x100107e7

1000b6e0 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6e2:	465f      	mov	r7, fp
1000b6e4:	4656      	mov	r6, sl
1000b6e6:	464d      	mov	r5, r9
1000b6e8:	4644      	mov	r4, r8
1000b6ea:	b4f0      	push	{r4, r5, r6, r7}
1000b6ec:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b6ee:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b6f0:	2300      	movs	r3, #0
1000b6f2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b6f4:	1ce3      	adds	r3, r4, #3
1000b6f6:	d81c      	bhi.n	1000b732 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b6f8:	220d      	movs	r2, #13
1000b6fa:	2100      	movs	r1, #0
1000b6fc:	a802      	add	r0, sp, #8
1000b6fe:	4b82      	ldr	r3, [pc, #520]	; (1000b908 <platform_event_wait+0x228>)
1000b700:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b702:	2333      	movs	r3, #51	; 0x33
1000b704:	aa02      	add	r2, sp, #8
1000b706:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b708:	3b30      	subs	r3, #48	; 0x30
1000b70a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b70c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b70e:	3302      	adds	r3, #2
1000b710:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b712:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b714:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b716:	0a23      	lsrs	r3, r4, #8
1000b718:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b71a:	0c23      	lsrs	r3, r4, #16
1000b71c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b71e:	0e24      	lsrs	r4, r4, #24
1000b720:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b722:	2301      	movs	r3, #1
1000b724:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b726:	210d      	movs	r1, #13
1000b728:	0010      	movs	r0, r2
1000b72a:	4b78      	ldr	r3, [pc, #480]	; (1000b90c <platform_event_wait+0x22c>)
1000b72c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b72e:	2301      	movs	r3, #1
1000b730:	4699      	mov	r9, r3
1000b732:	2400      	movs	r4, #0
1000b734:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b736:	4f76      	ldr	r7, [pc, #472]	; (1000b910 <platform_event_wait+0x230>)
1000b738:	4e76      	ldr	r6, [pc, #472]	; (1000b914 <platform_event_wait+0x234>)
1000b73a:	4977      	ldr	r1, [pc, #476]	; (1000b918 <platform_event_wait+0x238>)
1000b73c:	6838      	ldr	r0, [r7, #0]
1000b73e:	6833      	ldr	r3, [r6, #0]
1000b740:	4798      	blx	r3
1000b742:	2800      	cmp	r0, #0
1000b744:	d000      	beq.n	1000b748 <platform_event_wait+0x68>
1000b746:	e088      	b.n	1000b85a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b748:	4b73      	ldr	r3, [pc, #460]	; (1000b918 <platform_event_wait+0x238>)
1000b74a:	681c      	ldr	r4, [r3, #0]
1000b74c:	88a3      	ldrh	r3, [r4, #4]
1000b74e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b750:	23cd      	movs	r3, #205	; 0xcd
1000b752:	009b      	lsls	r3, r3, #2
1000b754:	459a      	cmp	sl, r3
1000b756:	d100      	bne.n	1000b75a <platform_event_wait+0x7a>
1000b758:	e0c7      	b.n	1000b8ea <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b75a:	8923      	ldrh	r3, [r4, #8]
1000b75c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b75e:	8963      	ldrh	r3, [r4, #10]
1000b760:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b762:	464b      	mov	r3, r9
1000b764:	2b00      	cmp	r3, #0
1000b766:	d011      	beq.n	1000b78c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b768:	220d      	movs	r2, #13
1000b76a:	2100      	movs	r1, #0
1000b76c:	a802      	add	r0, sp, #8
1000b76e:	4b66      	ldr	r3, [pc, #408]	; (1000b908 <platform_event_wait+0x228>)
1000b770:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b772:	2333      	movs	r3, #51	; 0x33
1000b774:	aa02      	add	r2, sp, #8
1000b776:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b778:	3b30      	subs	r3, #48	; 0x30
1000b77a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b77c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b77e:	3302      	adds	r3, #2
1000b780:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b782:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b784:	210d      	movs	r1, #13
1000b786:	0010      	movs	r0, r2
1000b788:	4b60      	ldr	r3, [pc, #384]	; (1000b90c <platform_event_wait+0x22c>)
1000b78a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b78c:	23a0      	movs	r3, #160	; 0xa0
1000b78e:	00db      	lsls	r3, r3, #3
1000b790:	459a      	cmp	sl, r3
1000b792:	d121      	bne.n	1000b7d8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b794:	4b61      	ldr	r3, [pc, #388]	; (1000b91c <platform_event_wait+0x23c>)
1000b796:	881b      	ldrh	r3, [r3, #0]
1000b798:	4443      	add	r3, r8
1000b79a:	22a0      	movs	r2, #160	; 0xa0
1000b79c:	0092      	lsls	r2, r2, #2
1000b79e:	4293      	cmp	r3, r2
1000b7a0:	dd02      	ble.n	1000b7a8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b7a2:	3a80      	subs	r2, #128	; 0x80
1000b7a4:	4b5d      	ldr	r3, [pc, #372]	; (1000b91c <platform_event_wait+0x23c>)
1000b7a6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b7a8:	4b5c      	ldr	r3, [pc, #368]	; (1000b91c <platform_event_wait+0x23c>)
1000b7aa:	469a      	mov	sl, r3
1000b7ac:	881d      	ldrh	r5, [r3, #0]
1000b7ae:	4b5c      	ldr	r3, [pc, #368]	; (1000b920 <platform_event_wait+0x240>)
1000b7b0:	18ed      	adds	r5, r5, r3
1000b7b2:	0021      	movs	r1, r4
1000b7b4:	310c      	adds	r1, #12
1000b7b6:	4642      	mov	r2, r8
1000b7b8:	0028      	movs	r0, r5
1000b7ba:	4b5a      	ldr	r3, [pc, #360]	; (1000b924 <platform_event_wait+0x244>)
1000b7bc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b7be:	4642      	mov	r2, r8
1000b7c0:	0029      	movs	r1, r5
1000b7c2:	4658      	mov	r0, fp
1000b7c4:	4b58      	ldr	r3, [pc, #352]	; (1000b928 <platform_event_wait+0x248>)
1000b7c6:	4798      	blx	r3
				plf_event_buff_index += len;
1000b7c8:	4653      	mov	r3, sl
1000b7ca:	881b      	ldrh	r3, [r3, #0]
1000b7cc:	4443      	add	r3, r8
1000b7ce:	4652      	mov	r2, sl
1000b7d0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b7d2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b7d4:	2502      	movs	r5, #2
1000b7d6:	e03a      	b.n	1000b84e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b7d8:	4b54      	ldr	r3, [pc, #336]	; (1000b92c <platform_event_wait+0x24c>)
1000b7da:	681b      	ldr	r3, [r3, #0]
1000b7dc:	2b00      	cmp	r3, #0
1000b7de:	d032      	beq.n	1000b846 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b7e0:	4b4d      	ldr	r3, [pc, #308]	; (1000b918 <platform_event_wait+0x238>)
1000b7e2:	681a      	ldr	r2, [r3, #0]
1000b7e4:	8893      	ldrh	r3, [r2, #4]
1000b7e6:	21cd      	movs	r1, #205	; 0xcd
1000b7e8:	0089      	lsls	r1, r1, #2
1000b7ea:	428b      	cmp	r3, r1
1000b7ec:	d104      	bne.n	1000b7f8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b7ee:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b7f0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b7f2:	2b00      	cmp	r3, #0
1000b7f4:	d02b      	beq.n	1000b84e <platform_event_wait+0x16e>
1000b7f6:	e028      	b.n	1000b84a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b7f8:	4c4d      	ldr	r4, [pc, #308]	; (1000b930 <platform_event_wait+0x250>)
1000b7fa:	4d49      	ldr	r5, [pc, #292]	; (1000b920 <platform_event_wait+0x240>)
1000b7fc:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b7fe:	702b      	strb	r3, [r5, #0]
1000b800:	0a1b      	lsrs	r3, r3, #8
1000b802:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b804:	8910      	ldrh	r0, [r2, #8]
1000b806:	4b4b      	ldr	r3, [pc, #300]	; (1000b934 <platform_event_wait+0x254>)
1000b808:	681b      	ldr	r3, [r3, #0]
1000b80a:	4798      	blx	r3
1000b80c:	7128      	strb	r0, [r5, #4]
1000b80e:	0a00      	lsrs	r0, r0, #8
1000b810:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b812:	6820      	ldr	r0, [r4, #0]
1000b814:	4b40      	ldr	r3, [pc, #256]	; (1000b918 <platform_event_wait+0x238>)
1000b816:	681a      	ldr	r2, [r3, #0]
1000b818:	88d2      	ldrh	r2, [r2, #6]
1000b81a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b81c:	681d      	ldr	r5, [r3, #0]
1000b81e:	896b      	ldrh	r3, [r5, #10]
1000b820:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b822:	3008      	adds	r0, #8
1000b824:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b826:	896a      	ldrh	r2, [r5, #10]
1000b828:	2a00      	cmp	r2, #0
1000b82a:	d003      	beq.n	1000b834 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b82c:	0029      	movs	r1, r5
1000b82e:	310c      	adds	r1, #12
1000b830:	4b3c      	ldr	r3, [pc, #240]	; (1000b924 <platform_event_wait+0x244>)
1000b832:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b834:	8969      	ldrh	r1, [r5, #10]
1000b836:	3108      	adds	r1, #8
1000b838:	4b3c      	ldr	r3, [pc, #240]	; (1000b92c <platform_event_wait+0x24c>)
1000b83a:	681b      	ldr	r3, [r3, #0]
1000b83c:	4838      	ldr	r0, [pc, #224]	; (1000b920 <platform_event_wait+0x240>)
1000b83e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b840:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b842:	2503      	movs	r5, #3
1000b844:	e003      	b.n	1000b84e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b846:	2400      	movs	r4, #0
1000b848:	e001      	b.n	1000b84e <platform_event_wait+0x16e>
1000b84a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b84c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b84e:	4b32      	ldr	r3, [pc, #200]	; (1000b918 <platform_event_wait+0x238>)
1000b850:	6818      	ldr	r0, [r3, #0]
1000b852:	4b39      	ldr	r3, [pc, #228]	; (1000b938 <platform_event_wait+0x258>)
1000b854:	681b      	ldr	r3, [r3, #0]
1000b856:	4798      	blx	r3
1000b858:	e000      	b.n	1000b85c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b85a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b85c:	2c00      	cmp	r4, #0
1000b85e:	d000      	beq.n	1000b862 <platform_event_wait+0x182>
1000b860:	e76b      	b.n	1000b73a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b862:	464b      	mov	r3, r9
1000b864:	2b00      	cmp	r3, #0
1000b866:	d046      	beq.n	1000b8f6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b868:	4b29      	ldr	r3, [pc, #164]	; (1000b910 <platform_event_wait+0x230>)
1000b86a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b86c:	2e00      	cmp	r6, #0
1000b86e:	d104      	bne.n	1000b87a <platform_event_wait+0x19a>
1000b870:	2300      	movs	r3, #0
1000b872:	6a1c      	ldr	r4, [r3, #32]
1000b874:	2c00      	cmp	r4, #0
1000b876:	d131      	bne.n	1000b8dc <platform_event_wait+0x1fc>
1000b878:	e03d      	b.n	1000b8f6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b87a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b87c:	2314      	movs	r3, #20
1000b87e:	469c      	mov	ip, r3
1000b880:	44b4      	add	ip, r6
1000b882:	4663      	mov	r3, ip
1000b884:	4660      	mov	r0, ip
1000b886:	9300      	str	r3, [sp, #0]
1000b888:	4b2c      	ldr	r3, [pc, #176]	; (1000b93c <platform_event_wait+0x25c>)
1000b88a:	681b      	ldr	r3, [r3, #0]
1000b88c:	4798      	blx	r3
	while(NULL != current)
1000b88e:	2c00      	cmp	r4, #0
1000b890:	d01f      	beq.n	1000b8d2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b892:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b894:	23cd      	movs	r3, #205	; 0xcd
1000b896:	009b      	lsls	r3, r3, #2
1000b898:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b89a:	4b27      	ldr	r3, [pc, #156]	; (1000b938 <platform_event_wait+0x258>)
1000b89c:	469a      	mov	sl, r3
1000b89e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b8a0:	6803      	ldr	r3, [r0, #0]
1000b8a2:	889b      	ldrh	r3, [r3, #4]
1000b8a4:	4543      	cmp	r3, r8
1000b8a6:	d110      	bne.n	1000b8ca <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b8a8:	2f00      	cmp	r7, #0
1000b8aa:	d006      	beq.n	1000b8ba <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b8ac:	6883      	ldr	r3, [r0, #8]
1000b8ae:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b8b0:	4653      	mov	r3, sl
1000b8b2:	681b      	ldr	r3, [r3, #0]
1000b8b4:	4798      	blx	r3
				current = prev->pstrNext;
1000b8b6:	68b8      	ldr	r0, [r7, #8]
1000b8b8:	e009      	b.n	1000b8ce <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b8ba:	6883      	ldr	r3, [r0, #8]
1000b8bc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b8be:	4b1e      	ldr	r3, [pc, #120]	; (1000b938 <platform_event_wait+0x258>)
1000b8c0:	681b      	ldr	r3, [r3, #0]
1000b8c2:	9301      	str	r3, [sp, #4]
1000b8c4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b8c6:	6a30      	ldr	r0, [r6, #32]
1000b8c8:	e001      	b.n	1000b8ce <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b8ca:	0007      	movs	r7, r0
1000b8cc:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b8ce:	2800      	cmp	r0, #0
1000b8d0:	d1e6      	bne.n	1000b8a0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b8d2:	4b1b      	ldr	r3, [pc, #108]	; (1000b940 <platform_event_wait+0x260>)
1000b8d4:	681b      	ldr	r3, [r3, #0]
1000b8d6:	9800      	ldr	r0, [sp, #0]
1000b8d8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b8da:	e00c      	b.n	1000b8f6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b8dc:	2314      	movs	r3, #20
1000b8de:	9300      	str	r3, [sp, #0]
1000b8e0:	4b16      	ldr	r3, [pc, #88]	; (1000b93c <platform_event_wait+0x25c>)
1000b8e2:	681b      	ldr	r3, [r3, #0]
1000b8e4:	2014      	movs	r0, #20
1000b8e6:	4798      	blx	r3
1000b8e8:	e7d3      	b.n	1000b892 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b8ea:	4b10      	ldr	r3, [pc, #64]	; (1000b92c <platform_event_wait+0x24c>)
1000b8ec:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b8ee:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b8f0:	2b00      	cmp	r3, #0
1000b8f2:	d0ac      	beq.n	1000b84e <platform_event_wait+0x16e>
1000b8f4:	e77b      	b.n	1000b7ee <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b8f6:	0028      	movs	r0, r5
1000b8f8:	b007      	add	sp, #28
1000b8fa:	bc3c      	pop	{r2, r3, r4, r5}
1000b8fc:	4690      	mov	r8, r2
1000b8fe:	4699      	mov	r9, r3
1000b900:	46a2      	mov	sl, r4
1000b902:	46ab      	mov	fp, r5
1000b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b906:	46c0      	nop			; (mov r8, r8)
1000b908:	100107f9 	.word	0x100107f9
1000b90c:	1000b691 	.word	0x1000b691
1000b910:	10016df4 	.word	0x10016df4
1000b914:	10016ddc 	.word	0x10016ddc
1000b918:	10016dbc 	.word	0x10016dbc
1000b91c:	10017a8c 	.word	0x10017a8c
1000b920:	100177f4 	.word	0x100177f4
1000b924:	100107e7 	.word	0x100107e7
1000b928:	1000b2b1 	.word	0x1000b2b1
1000b92c:	10016de8 	.word	0x10016de8
1000b930:	10016de4 	.word	0x10016de4
1000b934:	10016db4 	.word	0x10016db4
1000b938:	10016db0 	.word	0x10016db0
1000b93c:	10016dd4 	.word	0x10016dd4
1000b940:	10016dc0 	.word	0x10016dc0

1000b944 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b944:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b946:	4b03      	ldr	r3, [pc, #12]	; (1000b954 <acquire_sleep_lock+0x10>)
1000b948:	681b      	ldr	r3, [r3, #0]
1000b94a:	2080      	movs	r0, #128	; 0x80
1000b94c:	0200      	lsls	r0, r0, #8
1000b94e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b950:	2008      	movs	r0, #8
1000b952:	bd10      	pop	{r4, pc}
1000b954:	100177ac 	.word	0x100177ac

1000b958 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b958:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b95a:	4b03      	ldr	r3, [pc, #12]	; (1000b968 <release_message_lock+0x10>)
1000b95c:	681b      	ldr	r3, [r3, #0]
1000b95e:	2080      	movs	r0, #128	; 0x80
1000b960:	01c0      	lsls	r0, r0, #7
1000b962:	4798      	blx	r3
	return status;
}
1000b964:	2000      	movs	r0, #0
1000b966:	bd10      	pop	{r4, pc}
1000b968:	100177b8 	.word	0x100177b8

1000b96c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b96c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b96e:	4a18      	ldr	r2, [pc, #96]	; (1000b9d0 <gpio1_combined_isr_handler+0x64>)
1000b970:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b972:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b974:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b976:	2180      	movs	r1, #128	; 0x80
1000b978:	0209      	lsls	r1, r1, #8
1000b97a:	4301      	orrs	r1, r0
1000b97c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b97e:	0010      	movs	r0, r2
1000b980:	4d14      	ldr	r5, [pc, #80]	; (1000b9d4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b982:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b984:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b986:	05db      	lsls	r3, r3, #23
1000b988:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b98a:	d011      	beq.n	1000b9b0 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b98c:	b2db      	uxtb	r3, r3
1000b98e:	4259      	negs	r1, r3
1000b990:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b992:	2b01      	cmp	r3, #1
1000b994:	d006      	beq.n	1000b9a4 <gpio1_combined_isr_handler+0x38>
1000b996:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b998:	085b      	lsrs	r3, r3, #1
				index++;
1000b99a:	3101      	adds	r1, #1
1000b99c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b99e:	2b01      	cmp	r3, #1
1000b9a0:	d1fa      	bne.n	1000b998 <gpio1_combined_isr_handler+0x2c>
1000b9a2:	e000      	b.n	1000b9a6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b9a4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b9a6:	0023      	movs	r3, r4
1000b9a8:	408b      	lsls	r3, r1
1000b9aa:	b29b      	uxth	r3, r3
1000b9ac:	8703      	strh	r3, [r0, #56]	; 0x38
1000b9ae:	e003      	b.n	1000b9b8 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b9b0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b9b2:	432b      	orrs	r3, r5
1000b9b4:	b29b      	uxth	r3, r3
1000b9b6:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b9b8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b9ba:	05db      	lsls	r3, r3, #23
1000b9bc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b9be:	d1e2      	bne.n	1000b986 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b9c0:	2180      	movs	r1, #128	; 0x80
1000b9c2:	0049      	lsls	r1, r1, #1
1000b9c4:	3381      	adds	r3, #129	; 0x81
1000b9c6:	33ff      	adds	r3, #255	; 0xff
1000b9c8:	4a03      	ldr	r2, [pc, #12]	; (1000b9d8 <gpio1_combined_isr_handler+0x6c>)
1000b9ca:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b9cc:	bd30      	pop	{r4, r5, pc}
1000b9ce:	46c0      	nop			; (mov r8, r8)
1000b9d0:	40011000 	.word	0x40011000
1000b9d4:	ffff8000 	.word	0xffff8000
1000b9d8:	e000e100 	.word	0xe000e100

1000b9dc <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b9dc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b9de:	4a17      	ldr	r2, [pc, #92]	; (1000ba3c <gpio0_combined_isr_handler+0x60>)
1000b9e0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b9e2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b9e4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b9e6:	2180      	movs	r1, #128	; 0x80
1000b9e8:	0209      	lsls	r1, r1, #8
1000b9ea:	4301      	orrs	r1, r0
1000b9ec:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b9ee:	0010      	movs	r0, r2
1000b9f0:	4d13      	ldr	r5, [pc, #76]	; (1000ba40 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b9f2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b9f4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b9f6:	05db      	lsls	r3, r3, #23
1000b9f8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b9fa:	d011      	beq.n	1000ba20 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b9fc:	b2db      	uxtb	r3, r3
1000b9fe:	4259      	negs	r1, r3
1000ba00:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000ba02:	2b01      	cmp	r3, #1
1000ba04:	d006      	beq.n	1000ba14 <gpio0_combined_isr_handler+0x38>
1000ba06:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000ba08:	085b      	lsrs	r3, r3, #1
				index++;
1000ba0a:	3101      	adds	r1, #1
1000ba0c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000ba0e:	2b01      	cmp	r3, #1
1000ba10:	d1fa      	bne.n	1000ba08 <gpio0_combined_isr_handler+0x2c>
1000ba12:	e000      	b.n	1000ba16 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000ba14:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000ba16:	0023      	movs	r3, r4
1000ba18:	408b      	lsls	r3, r1
1000ba1a:	b29b      	uxth	r3, r3
1000ba1c:	8703      	strh	r3, [r0, #56]	; 0x38
1000ba1e:	e003      	b.n	1000ba28 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000ba20:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000ba22:	432b      	orrs	r3, r5
1000ba24:	b29b      	uxth	r3, r3
1000ba26:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000ba28:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000ba2a:	05db      	lsls	r3, r3, #23
1000ba2c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000ba2e:	d1e2      	bne.n	1000b9f6 <gpio0_combined_isr_handler+0x1a>
1000ba30:	2180      	movs	r1, #128	; 0x80
1000ba32:	3381      	adds	r3, #129	; 0x81
1000ba34:	33ff      	adds	r3, #255	; 0xff
1000ba36:	4a03      	ldr	r2, [pc, #12]	; (1000ba44 <gpio0_combined_isr_handler+0x68>)
1000ba38:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000ba3a:	bd30      	pop	{r4, r5, pc}
1000ba3c:	40010000 	.word	0x40010000
1000ba40:	ffff8000 	.word	0xffff8000
1000ba44:	e000e100 	.word	0xe000e100

1000ba48 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000ba48:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000ba4a:	4b0c      	ldr	r3, [pc, #48]	; (1000ba7c <PORT1_COMB_Handler+0x34>)
1000ba4c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000ba4e:	0b5b      	lsrs	r3, r3, #13
1000ba50:	d010      	beq.n	1000ba74 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000ba52:	4b0b      	ldr	r3, [pc, #44]	; (1000ba80 <PORT1_COMB_Handler+0x38>)
1000ba54:	681b      	ldr	r3, [r3, #0]
1000ba56:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000ba58:	4a08      	ldr	r2, [pc, #32]	; (1000ba7c <PORT1_COMB_Handler+0x34>)
1000ba5a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000ba5c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000ba5e:	0b5b      	lsrs	r3, r3, #13
1000ba60:	035b      	lsls	r3, r3, #13
1000ba62:	430b      	orrs	r3, r1
1000ba64:	8713      	strh	r3, [r2, #56]	; 0x38
1000ba66:	2180      	movs	r1, #128	; 0x80
1000ba68:	0049      	lsls	r1, r1, #1
1000ba6a:	23c0      	movs	r3, #192	; 0xc0
1000ba6c:	005b      	lsls	r3, r3, #1
1000ba6e:	4a05      	ldr	r2, [pc, #20]	; (1000ba84 <PORT1_COMB_Handler+0x3c>)
1000ba70:	50d1      	str	r1, [r2, r3]
1000ba72:	e001      	b.n	1000ba78 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000ba74:	4b04      	ldr	r3, [pc, #16]	; (1000ba88 <PORT1_COMB_Handler+0x40>)
1000ba76:	4798      	blx	r3
	}
}
1000ba78:	bd10      	pop	{r4, pc}
1000ba7a:	46c0      	nop			; (mov r8, r8)
1000ba7c:	40011000 	.word	0x40011000
1000ba80:	10017a78 	.word	0x10017a78
1000ba84:	e000e100 	.word	0xe000e100
1000ba88:	1000b96d 	.word	0x1000b96d

1000ba8c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000ba8c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000ba8e:	2802      	cmp	r0, #2
1000ba90:	d804      	bhi.n	1000ba9c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000ba92:	0080      	lsls	r0, r0, #2
1000ba94:	2200      	movs	r2, #0
1000ba96:	4b02      	ldr	r3, [pc, #8]	; (1000baa0 <wakeup_int_unregister_callback+0x14>)
1000ba98:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000ba9a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000ba9c:	0018      	movs	r0, r3
1000ba9e:	4770      	bx	lr
1000baa0:	10017a90 	.word	0x10017a90

1000baa4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000baa4:	b510      	push	{r4, lr}
1000baa6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000baa8:	7803      	ldrb	r3, [r0, #0]
1000baaa:	2b01      	cmp	r3, #1
1000baac:	d108      	bne.n	1000bac0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000baae:	4b11      	ldr	r3, [pc, #68]	; (1000baf4 <wakeup_active_event_callback+0x50>)
1000bab0:	681b      	ldr	r3, [r3, #0]
1000bab2:	2b00      	cmp	r3, #0
1000bab4:	d000      	beq.n	1000bab8 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000bab6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000bab8:	23ff      	movs	r3, #255	; 0xff
1000baba:	6822      	ldr	r2, [r4, #0]
1000babc:	439a      	bics	r2, r3
1000babe:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000bac0:	7863      	ldrb	r3, [r4, #1]
1000bac2:	2b01      	cmp	r3, #1
1000bac4:	d108      	bne.n	1000bad8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000bac6:	4b0b      	ldr	r3, [pc, #44]	; (1000baf4 <wakeup_active_event_callback+0x50>)
1000bac8:	685b      	ldr	r3, [r3, #4]
1000baca:	2b00      	cmp	r3, #0
1000bacc:	d000      	beq.n	1000bad0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000bace:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000bad0:	4b09      	ldr	r3, [pc, #36]	; (1000baf8 <wakeup_active_event_callback+0x54>)
1000bad2:	6822      	ldr	r2, [r4, #0]
1000bad4:	4013      	ands	r3, r2
1000bad6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000bad8:	78a3      	ldrb	r3, [r4, #2]
1000bada:	2b01      	cmp	r3, #1
1000badc:	d108      	bne.n	1000baf0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000bade:	4b05      	ldr	r3, [pc, #20]	; (1000baf4 <wakeup_active_event_callback+0x50>)
1000bae0:	689b      	ldr	r3, [r3, #8]
1000bae2:	2b00      	cmp	r3, #0
1000bae4:	d000      	beq.n	1000bae8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000bae6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000bae8:	4b04      	ldr	r3, [pc, #16]	; (1000bafc <wakeup_active_event_callback+0x58>)
1000baea:	6822      	ldr	r2, [r4, #0]
1000baec:	4013      	ands	r3, r2
1000baee:	6023      	str	r3, [r4, #0]
	}
}
1000baf0:	bd10      	pop	{r4, pc}
1000baf2:	46c0      	nop			; (mov r8, r8)
1000baf4:	10017a90 	.word	0x10017a90
1000baf8:	ffff00ff 	.word	0xffff00ff
1000bafc:	ff00ffff 	.word	0xff00ffff

1000bb00 <transfer_done_tx>:
struct dma_descriptor example_descriptor_tx;
struct dma_descriptor example_descriptor_rx;


static void transfer_done_tx(struct dma_resource* const resource )
{
1000bb00:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_tx);
1000bb02:	4802      	ldr	r0, [pc, #8]	; (1000bb0c <transfer_done_tx+0xc>)
1000bb04:	4b02      	ldr	r3, [pc, #8]	; (1000bb10 <transfer_done_tx+0x10>)
1000bb06:	4798      	blx	r3
}
1000bb08:	bd10      	pop	{r4, pc}
1000bb0a:	46c0      	nop			; (mov r8, r8)
1000bb0c:	10017ab0 	.word	0x10017ab0
1000bb10:	10008465 	.word	0x10008465

1000bb14 <timer_callback_handler>:



/* Timer callback */
static void timer_callback_handler(void)
{
1000bb14:	b510      	push	{r4, lr}
	/* Stop timer */
	hw_timer_stop();
1000bb16:	4b04      	ldr	r3, [pc, #16]	; (1000bb28 <timer_callback_handler+0x14>)
1000bb18:	4798      	blx	r3
	/* Set timer Alarm flag */
	Timer_Flag = true;
1000bb1a:	2201      	movs	r2, #1
1000bb1c:	4b03      	ldr	r3, [pc, #12]	; (1000bb2c <timer_callback_handler+0x18>)
1000bb1e:	701a      	strb	r2, [r3, #0]
	/* Restart Timer */
	hw_timer_start(10);
1000bb20:	200a      	movs	r0, #10
1000bb22:	4b03      	ldr	r3, [pc, #12]	; (1000bb30 <timer_callback_handler+0x1c>)
1000bb24:	4798      	blx	r3
}
1000bb26:	bd10      	pop	{r4, pc}
1000bb28:	1000b091 	.word	0x1000b091
1000bb2c:	10016dff 	.word	0x10016dff
1000bb30:	1000b065 	.word	0x1000b065

1000bb34 <app_htpt_cfg_indntf_ind_handler>:
#endif
	}
}

static at_ble_status_t  app_htpt_cfg_indntf_ind_handler(void *params)
{
1000bb34:	b510      	push	{r4, lr}
	at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params, sizeof(at_ble_htpt_cfg_indntf_ind_t));
	if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 1) {
1000bb36:	7843      	ldrb	r3, [r0, #1]
1000bb38:	2b01      	cmp	r3, #1
1000bb3a:	d106      	bne.n	1000bb4a <app_htpt_cfg_indntf_ind_handler+0x16>
		printf("Started HTP Temperature Notification");
1000bb3c:	4807      	ldr	r0, [pc, #28]	; (1000bb5c <app_htpt_cfg_indntf_ind_handler+0x28>)
1000bb3e:	4b08      	ldr	r3, [pc, #32]	; (1000bb60 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000bb40:	4798      	blx	r3
		Temp_Notification_Flag = true;
1000bb42:	2201      	movs	r2, #1
1000bb44:	4b07      	ldr	r3, [pc, #28]	; (1000bb64 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000bb46:	701a      	strb	r2, [r3, #0]
1000bb48:	e005      	b.n	1000bb56 <app_htpt_cfg_indntf_ind_handler+0x22>
	}
	else {
		printf("HTP Temperature Notification Stopped");
1000bb4a:	4807      	ldr	r0, [pc, #28]	; (1000bb68 <app_htpt_cfg_indntf_ind_handler+0x34>)
1000bb4c:	4b04      	ldr	r3, [pc, #16]	; (1000bb60 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000bb4e:	4798      	blx	r3
		Temp_Notification_Flag = false;
1000bb50:	2200      	movs	r2, #0
1000bb52:	4b04      	ldr	r3, [pc, #16]	; (1000bb64 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000bb54:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
1000bb56:	2000      	movs	r0, #0
1000bb58:	bd10      	pop	{r4, pc}
1000bb5a:	46c0      	nop			; (mov r8, r8)
1000bb5c:	10014dc8 	.word	0x10014dc8
1000bb60:	10010809 	.word	0x10010809
1000bb64:	10016e00 	.word	0x10016e00
1000bb68:	10014df0 	.word	0x10014df0

1000bb6c <ble_paired_cb>:
	}
}

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_paired_cb (void *param)
{
1000bb6c:	b570      	push	{r4, r5, r6, lr}
1000bb6e:	0005      	movs	r5, r0
	at_ble_pair_done_t *pair_params = param;
	printf("\nAssignment 3.2: Application paired ");
1000bb70:	4809      	ldr	r0, [pc, #36]	; (1000bb98 <ble_paired_cb+0x2c>)
1000bb72:	4c0a      	ldr	r4, [pc, #40]	; (1000bb9c <ble_paired_cb+0x30>)
1000bb74:	47a0      	blx	r4
	/* Enable the HTP Profile */
	printf("\nAssignment 4.1: enable health temperature service ");
1000bb76:	480a      	ldr	r0, [pc, #40]	; (1000bba0 <ble_paired_cb+0x34>)
1000bb78:	47a0      	blx	r4
	status = at_ble_htpt_enable(pair_params->handle,
1000bb7a:	8868      	ldrh	r0, [r5, #2]
1000bb7c:	2101      	movs	r1, #1
1000bb7e:	4b09      	ldr	r3, [pc, #36]	; (1000bba4 <ble_paired_cb+0x38>)
1000bb80:	4798      	blx	r3
1000bb82:	4b09      	ldr	r3, [pc, #36]	; (1000bba8 <ble_paired_cb+0x3c>)
1000bb84:	7018      	strb	r0, [r3, #0]
	HTPT_CFG_STABLE_MEAS_IND);
	if(status != AT_BLE_SUCCESS){
1000bb86:	781b      	ldrb	r3, [r3, #0]
1000bb88:	2b00      	cmp	r3, #0
1000bb8a:	d003      	beq.n	1000bb94 <ble_paired_cb+0x28>
		printf("*** Failure in HTP Profile Enable");
1000bb8c:	4807      	ldr	r0, [pc, #28]	; (1000bbac <ble_paired_cb+0x40>)
1000bb8e:	4b03      	ldr	r3, [pc, #12]	; (1000bb9c <ble_paired_cb+0x30>)
1000bb90:	4798      	blx	r3
1000bb92:	e7fe      	b.n	1000bb92 <ble_paired_cb+0x26>
		while(1);
	}
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000bb94:	2000      	movs	r0, #0
1000bb96:	bd70      	pop	{r4, r5, r6, pc}
1000bb98:	10014e18 	.word	0x10014e18
1000bb9c:	10010809 	.word	0x10010809
1000bba0:	10014e40 	.word	0x10014e40
1000bba4:	1000d369 	.word	0x1000d369
1000bba8:	10017b44 	.word	0x10017b44
1000bbac:	10014e74 	.word	0x10014e74

1000bbb0 <ble_advertise>:
	}
}


static void ble_advertise (void)
{
1000bbb0:	b510      	push	{r4, lr}
1000bbb2:	b084      	sub	sp, #16
	printf("\nAssignment 2.1 : Start Advertising");
1000bbb4:	4815      	ldr	r0, [pc, #84]	; (1000bc0c <ble_advertise+0x5c>)
1000bbb6:	4b16      	ldr	r3, [pc, #88]	; (1000bc10 <ble_advertise+0x60>)
1000bbb8:	4798      	blx	r3
	status = ble_advertisement_data_set();
1000bbba:	4b16      	ldr	r3, [pc, #88]	; (1000bc14 <ble_advertise+0x64>)
1000bbbc:	4798      	blx	r3
1000bbbe:	4b16      	ldr	r3, [pc, #88]	; (1000bc18 <ble_advertise+0x68>)
1000bbc0:	7018      	strb	r0, [r3, #0]
	if(status != AT_BLE_SUCCESS)
1000bbc2:	781b      	ldrb	r3, [r3, #0]
1000bbc4:	2b00      	cmp	r3, #0
1000bbc6:	d006      	beq.n	1000bbd6 <ble_advertise+0x26>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000bbc8:	4b13      	ldr	r3, [pc, #76]	; (1000bc18 <ble_advertise+0x68>)
1000bbca:	7819      	ldrb	r1, [r3, #0]
1000bbcc:	b2c9      	uxtb	r1, r1
1000bbce:	4813      	ldr	r0, [pc, #76]	; (1000bc1c <ble_advertise+0x6c>)
1000bbd0:	4b0f      	ldr	r3, [pc, #60]	; (1000bc10 <ble_advertise+0x60>)
1000bbd2:	4798      	blx	r3
1000bbd4:	e7fe      	b.n	1000bbd4 <ble_advertise+0x24>
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
1000bbd6:	2300      	movs	r3, #0
1000bbd8:	9302      	str	r3, [sp, #8]
1000bbda:	4b11      	ldr	r3, [pc, #68]	; (1000bc20 <ble_advertise+0x70>)
1000bbdc:	9301      	str	r3, [sp, #4]
1000bbde:	335a      	adds	r3, #90	; 0x5a
1000bbe0:	33ff      	adds	r3, #255	; 0xff
1000bbe2:	9300      	str	r3, [sp, #0]
1000bbe4:	2300      	movs	r3, #0
1000bbe6:	2200      	movs	r2, #0
1000bbe8:	2101      	movs	r1, #1
1000bbea:	2000      	movs	r0, #0
1000bbec:	4c0d      	ldr	r4, [pc, #52]	; (1000bc24 <ble_advertise+0x74>)
1000bbee:	47a0      	blx	r4
1000bbf0:	4b09      	ldr	r3, [pc, #36]	; (1000bc18 <ble_advertise+0x68>)
1000bbf2:	7018      	strb	r0, [r3, #0]
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
1000bbf4:	781b      	ldrb	r3, [r3, #0]
1000bbf6:	2b00      	cmp	r3, #0
1000bbf8:	d006      	beq.n	1000bc08 <ble_advertise+0x58>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000bbfa:	4b07      	ldr	r3, [pc, #28]	; (1000bc18 <ble_advertise+0x68>)
1000bbfc:	7819      	ldrb	r1, [r3, #0]
1000bbfe:	b2c9      	uxtb	r1, r1
1000bc00:	4806      	ldr	r0, [pc, #24]	; (1000bc1c <ble_advertise+0x6c>)
1000bc02:	4b03      	ldr	r3, [pc, #12]	; (1000bc10 <ble_advertise+0x60>)
1000bc04:	4798      	blx	r3
1000bc06:	e7fe      	b.n	1000bc06 <ble_advertise+0x56>
		while(1);
	}
}
1000bc08:	b004      	add	sp, #16
1000bc0a:	bd10      	pop	{r4, pc}
1000bc0c:	10014e98 	.word	0x10014e98
1000bc10:	10010809 	.word	0x10010809
1000bc14:	1000af89 	.word	0x1000af89
1000bc18:	10017b44 	.word	0x10017b44
1000bc1c:	10014ebc 	.word	0x10014ebc
1000bc20:	0000028f 	.word	0x0000028f
1000bc24:	1000cbe9 	.word	0x1000cbe9

1000bc28 <ble_disconnected_cb>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event */
static at_ble_status_t ble_disconnected_cb (void *param)
{
1000bc28:	b510      	push	{r4, lr}
	printf("\nAssignment 3.2: Application disconnected ");
1000bc2a:	4803      	ldr	r0, [pc, #12]	; (1000bc38 <ble_disconnected_cb+0x10>)
1000bc2c:	4b03      	ldr	r3, [pc, #12]	; (1000bc3c <ble_disconnected_cb+0x14>)
1000bc2e:	4798      	blx	r3
	ble_advertise();
1000bc30:	4b03      	ldr	r3, [pc, #12]	; (1000bc40 <ble_disconnected_cb+0x18>)
1000bc32:	4798      	blx	r3
	ALL_UNUSED(param);return AT_BLE_SUCCESS;
}
1000bc34:	2000      	movs	r0, #0
1000bc36:	bd10      	pop	{r4, pc}
1000bc38:	10014eec 	.word	0x10014eec
1000bc3c:	10010809 	.word	0x10010809
1000bc40:	1000bbb1 	.word	0x1000bbb1

1000bc44 <transfer_done_rx>:
	Header: 1 Byte. 
	'T' for temperature command, Rest 5 bytes for temperature value 
	'L' for Light Command, ext byte '0' for LED ON, 'F' for LED OFF, 4 bytes padded to make size consistent	 
*/
static void transfer_done_rx(struct dma_resource* const resource )
{	
1000bc44:	b530      	push	{r4, r5, lr}
1000bc46:	b083      	sub	sp, #12
	dma_start_transfer_job(&uart_dma_resource_rx);											// Restart the DMA transfer
1000bc48:	481a      	ldr	r0, [pc, #104]	; (1000bcb4 <transfer_done_rx+0x70>)
1000bc4a:	4b1b      	ldr	r3, [pc, #108]	; (1000bcb8 <transfer_done_rx+0x74>)
1000bc4c:	4798      	blx	r3
	int i=0;	
	uint8_t temp_buffer[BUFFER_LEN+1];													
	strcpy(temp_buffer,string);																// Copy DMA buffer to local buffer
1000bc4e:	4c1b      	ldr	r4, [pc, #108]	; (1000bcbc <transfer_done_rx+0x78>)
1000bc50:	0021      	movs	r1, r4
1000bc52:	4668      	mov	r0, sp
1000bc54:	4b1a      	ldr	r3, [pc, #104]	; (1000bcc0 <transfer_done_rx+0x7c>)
1000bc56:	4798      	blx	r3
	memset(string,0,sizeof(string));														// Reset the DMA Buffer
1000bc58:	2207      	movs	r2, #7
1000bc5a:	2100      	movs	r1, #0
1000bc5c:	0020      	movs	r0, r4
1000bc5e:	4b19      	ldr	r3, [pc, #100]	; (1000bcc4 <transfer_done_rx+0x80>)
1000bc60:	4798      	blx	r3
	printf("\n");
1000bc62:	200a      	movs	r0, #10
1000bc64:	4b18      	ldr	r3, [pc, #96]	; (1000bcc8 <transfer_done_rx+0x84>)
1000bc66:	4798      	blx	r3
	//printf("MJ: %s", temp_buffer);
	for(i=0;i<BUFFER_LEN;i++)
1000bc68:	2400      	movs	r4, #0
 		printf("%c",temp_buffer[i]);
1000bc6a:	4d17      	ldr	r5, [pc, #92]	; (1000bcc8 <transfer_done_rx+0x84>)
1000bc6c:	466b      	mov	r3, sp
1000bc6e:	5ce0      	ldrb	r0, [r4, r3]
1000bc70:	47a8      	blx	r5
	uint8_t temp_buffer[BUFFER_LEN+1];													
	strcpy(temp_buffer,string);																// Copy DMA buffer to local buffer
	memset(string,0,sizeof(string));														// Reset the DMA Buffer
	printf("\n");
	//printf("MJ: %s", temp_buffer);
	for(i=0;i<BUFFER_LEN;i++)
1000bc72:	3401      	adds	r4, #1
1000bc74:	2c06      	cmp	r4, #6
1000bc76:	d1f9      	bne.n	1000bc6c <transfer_done_rx+0x28>
 		printf("%c",temp_buffer[i]);
	//printf("\n");
	temp_buffer[BUFFER_LEN] = '\0';															// NULL terminate for string functions to work
1000bc78:	2300      	movs	r3, #0
1000bc7a:	466a      	mov	r2, sp
1000bc7c:	7193      	strb	r3, [r2, #6]
	if(temp_buffer[0] == LIGHT_SENSOR)														// IF light command
1000bc7e:	7813      	ldrb	r3, [r2, #0]
1000bc80:	2b4c      	cmp	r3, #76	; 0x4c
1000bc82:	d10e      	bne.n	1000bca2 <transfer_done_rx+0x5e>
	{
		if(temp_buffer[1] == LEDON)
1000bc84:	7853      	ldrb	r3, [r2, #1]
1000bc86:	2b4e      	cmp	r3, #78	; 0x4e
1000bc88:	d104      	bne.n	1000bc94 <transfer_done_rx+0x50>
			gpio_pin_set_output_level(LED_0_PIN,LED_ON);									// Turn ON LED if ON in leopard gecko
1000bc8a:	2100      	movs	r1, #0
1000bc8c:	2016      	movs	r0, #22
1000bc8e:	4b0f      	ldr	r3, [pc, #60]	; (1000bccc <transfer_done_rx+0x88>)
1000bc90:	4798      	blx	r3
1000bc92:	e00c      	b.n	1000bcae <transfer_done_rx+0x6a>
					
		else if(temp_buffer[1] == LEDOFF)
1000bc94:	2b46      	cmp	r3, #70	; 0x46
1000bc96:	d10a      	bne.n	1000bcae <transfer_done_rx+0x6a>
			gpio_pin_set_output_level(LED_0_PIN,LED_OFF);									// Turn OFF LED if OFF in leopard gecko
1000bc98:	2101      	movs	r1, #1
1000bc9a:	2016      	movs	r0, #22
1000bc9c:	4b0b      	ldr	r3, [pc, #44]	; (1000bccc <transfer_done_rx+0x88>)
1000bc9e:	4798      	blx	r3
1000bca0:	e005      	b.n	1000bcae <transfer_done_rx+0x6a>
	}	
	else if(temp_buffer[0] == TEMP_SENSOR)													// If temperature Data
1000bca2:	2b54      	cmp	r3, #84	; 0x54
1000bca4:	d103      	bne.n	1000bcae <transfer_done_rx+0x6a>
	{
		strcpy(temperature_buffer,(temp_buffer+1));											// Copy in temperature buffer
1000bca6:	1c51      	adds	r1, r2, #1
1000bca8:	4809      	ldr	r0, [pc, #36]	; (1000bcd0 <transfer_done_rx+0x8c>)
1000bcaa:	4b05      	ldr	r3, [pc, #20]	; (1000bcc0 <transfer_done_rx+0x7c>)
1000bcac:	4798      	blx	r3
		//for(i=0;i<8;i++)
			//printf("%c",temp_buffer[i]);
	}
	//printf("%ld",strlen(temp_buffer));	
	
}
1000bcae:	b003      	add	sp, #12
1000bcb0:	bd30      	pop	{r4, r5, pc}
1000bcb2:	46c0      	nop			; (mov r8, r8)
1000bcb4:	10017ae0 	.word	0x10017ae0
1000bcb8:	10008465 	.word	0x10008465
1000bcbc:	10016df8 	.word	0x10016df8
1000bcc0:	10010b29 	.word	0x10010b29
1000bcc4:	100107f9 	.word	0x100107f9
1000bcc8:	1001083d 	.word	0x1001083d
1000bccc:	10008e35 	.word	0x10008e35
1000bcd0:	10016e04 	.word	0x10016e04

1000bcd4 <led_config>:
	printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
#endif
}

void led_config(void)
{
1000bcd4:	b510      	push	{r4, lr}
1000bcd6:	b082      	sub	sp, #8
	struct gpio_config pin_conf;
	gpio_get_config_defaults(&pin_conf);
1000bcd8:	ac01      	add	r4, sp, #4
1000bcda:	0020      	movs	r0, r4
1000bcdc:	4b06      	ldr	r3, [pc, #24]	; (1000bcf8 <led_config+0x24>)
1000bcde:	4798      	blx	r3
		
	pin_conf.direction = GPIO_PIN_DIR_OUTPUT;
1000bce0:	2301      	movs	r3, #1
1000bce2:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(LED0_PIN,&pin_conf);
1000bce4:	0021      	movs	r1, r4
1000bce6:	2016      	movs	r0, #22
1000bce8:	4b04      	ldr	r3, [pc, #16]	; (1000bcfc <led_config+0x28>)
1000bcea:	4798      	blx	r3
	gpio_pin_set_output_level(LED_0_PIN,LED_OFF);
1000bcec:	2101      	movs	r1, #1
1000bcee:	2016      	movs	r0, #22
1000bcf0:	4b03      	ldr	r3, [pc, #12]	; (1000bd00 <led_config+0x2c>)
1000bcf2:	4798      	blx	r3
	
}
1000bcf4:	b002      	add	sp, #8
1000bcf6:	bd10      	pop	{r4, pc}
1000bcf8:	10008c6d 	.word	0x10008c6d
1000bcfc:	10008c7d 	.word	0x10008c7d
1000bd00:	10008e35 	.word	0x10008e35

1000bd04 <main>:


int main (void)
{
1000bd04:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd06:	4657      	mov	r7, sl
1000bd08:	464e      	mov	r6, r9
1000bd0a:	4645      	mov	r5, r8
1000bd0c:	b4e0      	push	{r5, r6, r7}
1000bd0e:	b08e      	sub	sp, #56	; 0x38
	platform_driver_init();
1000bd10:	4b7f      	ldr	r3, [pc, #508]	; (1000bf10 <main+0x20c>)
1000bd12:	4798      	blx	r3
	acquire_sleep_lock();
1000bd14:	4b7f      	ldr	r3, [pc, #508]	; (1000bf14 <main+0x210>)
1000bd16:	4798      	blx	r3
	/* Initialize serial console */
	serial_console_init();
1000bd18:	4b7f      	ldr	r3, [pc, #508]	; (1000bf18 <main+0x214>)
1000bd1a:	4798      	blx	r3
	//configure_usart();
	led_config();
1000bd1c:	4b7f      	ldr	r3, [pc, #508]	; (1000bf1c <main+0x218>)
1000bd1e:	4798      	blx	r3
	/* Initialize the hardware timer */
	hw_timer_init();
1000bd20:	4b7f      	ldr	r3, [pc, #508]	; (1000bf20 <main+0x21c>)
1000bd22:	4798      	blx	r3
	/* Register the callback */
	hw_timer_register_callback(timer_callback_handler);
1000bd24:	487f      	ldr	r0, [pc, #508]	; (1000bf24 <main+0x220>)
1000bd26:	4b80      	ldr	r3, [pc, #512]	; (1000bf28 <main+0x224>)
1000bd28:	4798      	blx	r3
	/* Start timer */
	hw_timer_start(1);
1000bd2a:	2001      	movs	r0, #1
1000bd2c:	4b7f      	ldr	r3, [pc, #508]	; (1000bf2c <main+0x228>)
1000bd2e:	4798      	blx	r3
	/* initialize the BLE chip and Set the Device Address */
	ble_device_init(NULL);
1000bd30:	2000      	movs	r0, #0
1000bd32:	4b7f      	ldr	r3, [pc, #508]	; (1000bf30 <main+0x22c>)
1000bd34:	4798      	blx	r3
	/* Initialize the temperature sensor */
	at30tse_init();
1000bd36:	4b7f      	ldr	r3, [pc, #508]	; (1000bf34 <main+0x230>)
1000bd38:	4798      	blx	r3
	/* configure the temperature sensor ADC */
	at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
1000bd3a:	20c0      	movs	r0, #192	; 0xc0
1000bd3c:	01c0      	lsls	r0, r0, #7
1000bd3e:	4b7e      	ldr	r3, [pc, #504]	; (1000bf38 <main+0x234>)
1000bd40:	4798      	blx	r3

static void htp_temperature_read(void)
{
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	temperature = at30tse_read_temperature();
1000bd42:	4b7e      	ldr	r3, [pc, #504]	; (1000bf3c <main+0x238>)
1000bd44:	4798      	blx	r3
	/* Display temperature on com port */
#ifdef HTPT_FLAG_FAHRENHEIT
	printf("Temperature: %d Fahrenheit", (uint16_t)temperature);
#else
	printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
1000bd46:	4b7e      	ldr	r3, [pc, #504]	; (1000bf40 <main+0x23c>)
1000bd48:	4798      	blx	r3
1000bd4a:	4b7e      	ldr	r3, [pc, #504]	; (1000bf44 <main+0x240>)
1000bd4c:	4798      	blx	r3
1000bd4e:	b281      	uxth	r1, r0
1000bd50:	487d      	ldr	r0, [pc, #500]	; (1000bf48 <main+0x244>)
1000bd52:	4c7e      	ldr	r4, [pc, #504]	; (1000bf4c <main+0x248>)
1000bd54:	47a0      	blx	r4
	NULL
};


static void htp_init (void){
	printf("\nAssignment 4.1: Init Health temperature service ");
1000bd56:	487e      	ldr	r0, [pc, #504]	; (1000bf50 <main+0x24c>)
1000bd58:	47a0      	blx	r4
	/* Create htp service in GATT database*/
	status = at_ble_htpt_create_db(
1000bd5a:	4b7e      	ldr	r3, [pc, #504]	; (1000bf54 <main+0x250>)
1000bd5c:	9302      	str	r3, [sp, #8]
1000bd5e:	230c      	movs	r3, #12
1000bd60:	9301      	str	r3, [sp, #4]
1000bd62:	3b0b      	subs	r3, #11
1000bd64:	9300      	str	r3, [sp, #0]
1000bd66:	331d      	adds	r3, #29
1000bd68:	2201      	movs	r2, #1
1000bd6a:	2101      	movs	r1, #1
1000bd6c:	2001      	movs	r0, #1
1000bd6e:	4c7a      	ldr	r4, [pc, #488]	; (1000bf58 <main+0x254>)
1000bd70:	47a0      	blx	r4
1000bd72:	4b7a      	ldr	r3, [pc, #488]	; (1000bf5c <main+0x258>)
1000bd74:	7018      	strb	r0, [r3, #0]
	1,
	30,
	1,
	HTPT_AUTH,
	&htpt_conn_handle);
	if (status != AT_BLE_SUCCESS){
1000bd76:	781b      	ldrb	r3, [r3, #0]
1000bd78:	2b00      	cmp	r3, #0
1000bd7a:	d003      	beq.n	1000bd84 <main+0x80>
		printf("HTP Data Base creation failed");
1000bd7c:	4878      	ldr	r0, [pc, #480]	; (1000bf60 <main+0x25c>)
1000bd7e:	4b73      	ldr	r3, [pc, #460]	; (1000bf4c <main+0x248>)
1000bd80:	4798      	blx	r3
1000bd82:	e7fe      	b.n	1000bd82 <main+0x7e>
};

static void register_ble_callbacks (void)
{
	/* Register GAP Callbacks */
	printf("\nAssignment 3.2: Register bluetooth events callbacks");
1000bd84:	4877      	ldr	r0, [pc, #476]	; (1000bf64 <main+0x260>)
1000bd86:	4b71      	ldr	r3, [pc, #452]	; (1000bf4c <main+0x248>)
1000bd88:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000bd8a:	4a77      	ldr	r2, [pc, #476]	; (1000bf68 <main+0x264>)
1000bd8c:	2100      	movs	r1, #0
1000bd8e:	2000      	movs	r0, #0
1000bd90:	4b76      	ldr	r3, [pc, #472]	; (1000bf6c <main+0x268>)
1000bd92:	4798      	blx	r3
1000bd94:	4b71      	ldr	r3, [pc, #452]	; (1000bf5c <main+0x258>)
1000bd96:	7018      	strb	r0, [r3, #0]
	BLE_GAP_EVENT_TYPE,app_gap_cb);
	if (status != true) {
1000bd98:	781b      	ldrb	r3, [r3, #0]
1000bd9a:	2b01      	cmp	r3, #1
1000bd9c:	d002      	beq.n	1000bda4 <main+0xa0>
		printf("\n##Error when Registering  SAMB11 gap callbacks");
1000bd9e:	4874      	ldr	r0, [pc, #464]	; (1000bf70 <main+0x26c>)
1000bda0:	4b6a      	ldr	r3, [pc, #424]	; (1000bf4c <main+0x248>)
1000bda2:	4798      	blx	r3
	}
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000bda4:	4a73      	ldr	r2, [pc, #460]	; (1000bf74 <main+0x270>)
1000bda6:	2104      	movs	r1, #4
1000bda8:	2000      	movs	r0, #0
1000bdaa:	4b70      	ldr	r3, [pc, #448]	; (1000bf6c <main+0x268>)
1000bdac:	4798      	blx	r3
1000bdae:	4b6b      	ldr	r3, [pc, #428]	; (1000bf5c <main+0x258>)
1000bdb0:	7018      	strb	r0, [r3, #0]
	BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	if (status != true) {
1000bdb2:	781b      	ldrb	r3, [r3, #0]
1000bdb4:	2b01      	cmp	r3, #1
1000bdb6:	d002      	beq.n	1000bdbe <main+0xba>
		printf("\n##Error when Registering  SAMB11 htpt callbacks");
1000bdb8:	486f      	ldr	r0, [pc, #444]	; (1000bf78 <main+0x274>)
1000bdba:	4b64      	ldr	r3, [pc, #400]	; (1000bf4c <main+0x248>)
1000bdbc:	4798      	blx	r3
	/* Initialize the htp service */
	htp_init();
	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();
	/* Start Advertising process */
	ble_advertise();
1000bdbe:	4b6f      	ldr	r3, [pc, #444]	; (1000bf7c <main+0x278>)
1000bdc0:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart1;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart1);
1000bdc2:	a804      	add	r0, sp, #16
1000bdc4:	4b6e      	ldr	r3, [pc, #440]	; (1000bf80 <main+0x27c>)
1000bdc6:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart1.baud_rate = 9600;
1000bdc8:	2396      	movs	r3, #150	; 0x96
1000bdca:	019b      	lsls	r3, r3, #6
1000bdcc:	9304      	str	r3, [sp, #16]
	config_uart1.pin_number_pad[0] = EDBG1_CDC_SERCOM_PIN_PAD0;
1000bdce:	2306      	movs	r3, #6
1000bdd0:	9306      	str	r3, [sp, #24]
	config_uart1.pin_number_pad[1] = EDBG1_CDC_SERCOM_PIN_PAD1;
1000bdd2:	3301      	adds	r3, #1
1000bdd4:	9307      	str	r3, [sp, #28]
	config_uart1.pin_number_pad[2] = EDBG1_CDC_SERCOM_PIN_PAD2;
1000bdd6:	3307      	adds	r3, #7
1000bdd8:	9308      	str	r3, [sp, #32]
	config_uart1.pin_number_pad[3] = EDBG1_CDC_SERCOM_PIN_PAD3;
1000bdda:	3301      	adds	r3, #1
1000bddc:	9309      	str	r3, [sp, #36]	; 0x24
	config_uart1.pinmux_sel_pad[0] = EDBG1_CDC_SERCOM_MUX_PAD0;
1000bdde:	3b0d      	subs	r3, #13
1000bde0:	930a      	str	r3, [sp, #40]	; 0x28
	config_uart1.pinmux_sel_pad[1] = EDBG1_CDC_SERCOM_MUX_PAD1;
1000bde2:	930b      	str	r3, [sp, #44]	; 0x2c
	config_uart1.pinmux_sel_pad[2] = EDBG1_CDC_SERCOM_MUX_PAD2;
1000bde4:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart1.pinmux_sel_pad[3] = EDBG1_CDC_SERCOM_MUX_PAD3;
1000bde6:	930d      	str	r3, [sp, #52]	; 0x34
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance1,
1000bde8:	4d66      	ldr	r5, [pc, #408]	; (1000bf84 <main+0x280>)
1000bdea:	4c67      	ldr	r4, [pc, #412]	; (1000bf88 <main+0x284>)
1000bdec:	aa04      	add	r2, sp, #16
1000bdee:	4967      	ldr	r1, [pc, #412]	; (1000bf8c <main+0x288>)
1000bdf0:	0028      	movs	r0, r5
1000bdf2:	47a0      	blx	r4
1000bdf4:	2800      	cmp	r0, #0
1000bdf6:	d1f9      	bne.n	1000bdec <main+0xe8>
	EDBG1_CDC_MODULE, &config_uart1) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance1);
1000bdf8:	4b62      	ldr	r3, [pc, #392]	; (1000bf84 <main+0x280>)
1000bdfa:	4699      	mov	r9, r3
1000bdfc:	0018      	movs	r0, r3
1000bdfe:	4b64      	ldr	r3, [pc, #400]	; (1000bf90 <main+0x28c>)
1000be00:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance1);
1000be02:	4648      	mov	r0, r9
1000be04:	4b63      	ldr	r3, [pc, #396]	; (1000bf94 <main+0x290>)
1000be06:	4798      	blx	r3
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000be08:	ac04      	add	r4, sp, #16
1000be0a:	0020      	movs	r0, r4
1000be0c:	4e62      	ldr	r6, [pc, #392]	; (1000bf98 <main+0x294>)
1000be0e:	47b0      	blx	r6
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART1TX_DMA_PERIPHERAL;
1000be10:	2304      	movs	r3, #4
1000be12:	7323      	strb	r3, [r4, #12]
	config.des.enable_inc_addr = false;
1000be14:	2500      	movs	r5, #0
1000be16:	72e5      	strb	r5, [r4, #11]
	config.src.periph = UART1TX_DMA_PERIPHERAL;
1000be18:	70e3      	strb	r3, [r4, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000be1a:	4f60      	ldr	r7, [pc, #384]	; (1000bf9c <main+0x298>)
1000be1c:	0021      	movs	r1, r4
1000be1e:	0038      	movs	r0, r7
1000be20:	4b5f      	ldr	r3, [pc, #380]	; (1000bfa0 <main+0x29c>)
1000be22:	469a      	mov	sl, r3
1000be24:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000be26:	0020      	movs	r0, r4
1000be28:	47b0      	blx	r6
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART1RX_DMA_PERIPHERAL;
1000be2a:	2303      	movs	r3, #3
1000be2c:	4698      	mov	r8, r3
1000be2e:	70e3      	strb	r3, [r4, #3]
	config.src.enable_inc_addr = false;
1000be30:	70a5      	strb	r5, [r4, #2]
	config.src.periph_delay = 1;
1000be32:	2601      	movs	r6, #1
1000be34:	2301      	movs	r3, #1
1000be36:	7123      	strb	r3, [r4, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000be38:	4d5a      	ldr	r5, [pc, #360]	; (1000bfa4 <main+0x2a0>)
1000be3a:	0021      	movs	r1, r4
1000be3c:	0028      	movs	r0, r5
1000be3e:	47d0      	blx	sl
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000be40:	4959      	ldr	r1, [pc, #356]	; (1000bfa8 <main+0x2a4>)
1000be42:	7b0b      	ldrb	r3, [r1, #12]
1000be44:	4333      	orrs	r3, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000be46:	2002      	movs	r0, #2
1000be48:	4303      	orrs	r3, r0
1000be4a:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000be4c:	68cb      	ldr	r3, [r1, #12]
1000be4e:	4642      	mov	r2, r8
1000be50:	4013      	ands	r3, r2
1000be52:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000be54:	2306      	movs	r3, #6
1000be56:	469c      	mov	ip, r3
1000be58:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string;
1000be5a:	4b54      	ldr	r3, [pc, #336]	; (1000bfac <main+0x2a8>)
1000be5c:	469a      	mov	sl, r3
1000be5e:	600b      	str	r3, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance1.hw->TRANSMIT_DATA.reg);
1000be60:	464b      	mov	r3, r9
1000be62:	681b      	ldr	r3, [r3, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
1000be64:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000be66:	4c52      	ldr	r4, [pc, #328]	; (1000bfb0 <main+0x2ac>)
1000be68:	7b22      	ldrb	r2, [r4, #12]
1000be6a:	4332      	orrs	r2, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000be6c:	4302      	orrs	r2, r0
1000be6e:	7322      	strb	r2, [r4, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000be70:	4642      	mov	r2, r8
1000be72:	68e0      	ldr	r0, [r4, #12]
1000be74:	4002      	ands	r2, r0
1000be76:	60e2      	str	r2, [r4, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000be78:	4662      	mov	r2, ip
1000be7a:	60a2      	str	r2, [r4, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
1000be7c:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000be7e:	6023      	str	r3, [r4, #0]
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
1000be80:	4653      	mov	r3, sl
1000be82:	6063      	str	r3, [r4, #4]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]
	
	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000be84:	0038      	movs	r0, r7
1000be86:	4b4b      	ldr	r3, [pc, #300]	; (1000bfb4 <main+0x2b0>)
1000be88:	4698      	mov	r8, r3
1000be8a:	4798      	blx	r3
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000be8c:	0021      	movs	r1, r4
1000be8e:	0028      	movs	r0, r5
1000be90:	47c0      	blx	r8
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000be92:	4b49      	ldr	r3, [pc, #292]	; (1000bfb8 <main+0x2b4>)
1000be94:	607b      	str	r3, [r7, #4]
1000be96:	4b49      	ldr	r3, [pc, #292]	; (1000bfbc <main+0x2b8>)
1000be98:	606b      	str	r3, [r5, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000be9a:	2324      	movs	r3, #36	; 0x24
1000be9c:	5cfa      	ldrb	r2, [r7, r3]
1000be9e:	4332      	orrs	r2, r6
1000bea0:	54fa      	strb	r2, [r7, r3]
1000bea2:	5cea      	ldrb	r2, [r5, r3]
1000bea4:	4316      	orrs	r6, r2
1000bea6:	54ee      	strb	r6, [r5, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bea8:	2280      	movs	r2, #128	; 0x80
1000beaa:	0212      	lsls	r2, r2, #8
1000beac:	4b44      	ldr	r3, [pc, #272]	; (1000bfc0 <main+0x2bc>)
1000beae:	601a      	str	r2, [r3, #0]
	//! [configure_callback]
	//! [setup_init]

	//! [main]
	//! [main_1]
	dma_start_transfer_job(&uart_dma_resource_rx);
1000beb0:	0028      	movs	r0, r5
1000beb2:	4b44      	ldr	r3, [pc, #272]	; (1000bfc4 <main+0x2c0>)
1000beb4:	4798      	blx	r3
	//! [main_1]
	
	
	while(1) {
 		ble_event_task(655);  // 655: 10 min
1000beb6:	4f44      	ldr	r7, [pc, #272]	; (1000bfc8 <main+0x2c4>)
 		if (Timer_Flag & Temp_Notification_Flag)
1000beb8:	4e44      	ldr	r6, [pc, #272]	; (1000bfcc <main+0x2c8>)
1000beba:	4d45      	ldr	r5, [pc, #276]	; (1000bfd0 <main+0x2cc>)
	dma_start_transfer_job(&uart_dma_resource_rx);
	//! [main_1]
	
	
	while(1) {
 		ble_event_task(655);  // 655: 10 min
1000bebc:	4845      	ldr	r0, [pc, #276]	; (1000bfd4 <main+0x2d0>)
1000bebe:	47b8      	blx	r7
 		if (Timer_Flag & Temp_Notification_Flag)
1000bec0:	7832      	ldrb	r2, [r6, #0]
1000bec2:	782b      	ldrb	r3, [r5, #0]
1000bec4:	b2db      	uxtb	r3, r3
1000bec6:	2a00      	cmp	r2, #0
1000bec8:	d0f8      	beq.n	1000bebc <main+0x1b8>
1000beca:	2b00      	cmp	r3, #0
1000becc:	d0f6      	beq.n	1000bebc <main+0x1b8>
static void htp_temperature_send(void) {
	at_ble_prf_date_time_t timestamp;
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	//temperature = at30tse_read_temperature();
	temperature = atof(temperature_buffer);
1000bece:	4842      	ldr	r0, [pc, #264]	; (1000bfd8 <main+0x2d4>)
1000bed0:	4b42      	ldr	r3, [pc, #264]	; (1000bfdc <main+0x2d8>)
1000bed2:	4798      	blx	r3
#ifdef HTPT_FLAG_FAHRENHEIT
	temperature = (((temperature * 9.0)/5.0) + 32.0);
#endif
	/* Read Temperature Value from IO1 Xplained Pro */
	timestamp.day = 1;
1000bed4:	ad04      	add	r5, sp, #16
1000bed6:	2401      	movs	r4, #1
1000bed8:	70ec      	strb	r4, [r5, #3]
	timestamp.hour = 9;
1000beda:	2309      	movs	r3, #9
1000bedc:	712b      	strb	r3, [r5, #4]
	timestamp.min = 2;
1000bede:	3b07      	subs	r3, #7
1000bee0:	716b      	strb	r3, [r5, #5]
	timestamp.month = 8;
1000bee2:	3306      	adds	r3, #6
1000bee4:	70ab      	strb	r3, [r5, #2]
	timestamp.sec = 36;
1000bee6:	331c      	adds	r3, #28
1000bee8:	71ab      	strb	r3, [r5, #6]
	timestamp.year = 15;
1000beea:	3b15      	subs	r3, #21
1000beec:	802b      	strh	r3, [r5, #0]
	/* Read Temperature Value from IO1 Xplained Pro */
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)temperature),
1000beee:	4b14      	ldr	r3, [pc, #80]	; (1000bf40 <main+0x23c>)
1000bef0:	4798      	blx	r3
1000bef2:	493b      	ldr	r1, [pc, #236]	; (1000bfe0 <main+0x2dc>)
1000bef4:	4b3b      	ldr	r3, [pc, #236]	; (1000bfe4 <main+0x2e0>)
1000bef6:	4798      	blx	r3
1000bef8:	4b12      	ldr	r3, [pc, #72]	; (1000bf44 <main+0x240>)
1000befa:	4798      	blx	r3
1000befc:	23ff      	movs	r3, #255	; 0xff
1000befe:	061b      	lsls	r3, r3, #24
1000bf00:	4318      	orrs	r0, r3
1000bf02:	9400      	str	r4, [sp, #0]
1000bf04:	2301      	movs	r3, #1
1000bf06:	2204      	movs	r2, #4
1000bf08:	0029      	movs	r1, r5
1000bf0a:	4d37      	ldr	r5, [pc, #220]	; (1000bfe8 <main+0x2e4>)
1000bf0c:	47a8      	blx	r5
1000bf0e:	e7d4      	b.n	1000beba <main+0x1b6>
1000bf10:	1000b431 	.word	0x1000b431
1000bf14:	1000b945 	.word	0x1000b945
1000bf18:	1000b125 	.word	0x1000b125
1000bf1c:	1000bcd5 	.word	0x1000bcd5
1000bf20:	1000b005 	.word	0x1000b005
1000bf24:	1000bb15 	.word	0x1000bb15
1000bf28:	1000b031 	.word	0x1000b031
1000bf2c:	1000b065 	.word	0x1000b065
1000bf30:	1000a815 	.word	0x1000a815
1000bf34:	100080e9 	.word	0x100080e9
1000bf38:	100081ad 	.word	0x100081ad
1000bf3c:	100081d1 	.word	0x100081d1
1000bf40:	100101b1 	.word	0x100101b1
1000bf44:	1000eed1 	.word	0x1000eed1
1000bf48:	10014f18 	.word	0x10014f18
1000bf4c:	10010809 	.word	0x10010809
1000bf50:	10014f34 	.word	0x10014f34
1000bf54:	10017a9c 	.word	0x10017a9c
1000bf58:	1000d349 	.word	0x1000d349
1000bf5c:	10017b44 	.word	0x10017b44
1000bf60:	10014f68 	.word	0x10014f68
1000bf64:	10014f88 	.word	0x10014f88
1000bf68:	10014d7c 	.word	0x10014d7c
1000bf6c:	1000a745 	.word	0x1000a745
1000bf70:	10014fc0 	.word	0x10014fc0
1000bf74:	10015024 	.word	0x10015024
1000bf78:	10014ff0 	.word	0x10014ff0
1000bf7c:	1000bbb1 	.word	0x1000bbb1
1000bf80:	10009a99 	.word	0x10009a99
1000bf84:	10017b20 	.word	0x10017b20
1000bf88:	10009ac5 	.word	0x10009ac5
1000bf8c:	40005000 	.word	0x40005000
1000bf90:	10009d21 	.word	0x10009d21
1000bf94:	10009d59 	.word	0x10009d59
1000bf98:	1000838d 	.word	0x1000838d
1000bf9c:	10017ab0 	.word	0x10017ab0
1000bfa0:	100084dd 	.word	0x100084dd
1000bfa4:	10017ae0 	.word	0x10017ae0
1000bfa8:	10017b10 	.word	0x10017b10
1000bfac:	10016df8 	.word	0x10016df8
1000bfb0:	10017aa0 	.word	0x10017aa0
1000bfb4:	100083bd 	.word	0x100083bd
1000bfb8:	1000bb01 	.word	0x1000bb01
1000bfbc:	1000bc45 	.word	0x1000bc45
1000bfc0:	e000e100 	.word	0xe000e100
1000bfc4:	10008465 	.word	0x10008465
1000bfc8:	1000af59 	.word	0x1000af59
1000bfcc:	10016dff 	.word	0x10016dff
1000bfd0:	10016e00 	.word	0x10016e00
1000bfd4:	0000028f 	.word	0x0000028f
1000bfd8:	10016e04 	.word	0x10016e04
1000bfdc:	10010771 	.word	0x10010771
1000bfe0:	41200000 	.word	0x41200000
1000bfe4:	1000ef3d 	.word	0x1000ef3d
1000bfe8:	1000d375 	.word	0x1000d375

1000bfec <internal_event_post>:
1000bfec:	b570      	push	{r4, r5, r6, lr}
1000bfee:	4d12      	ldr	r5, [pc, #72]	; (1000c038 <internal_event_post+0x4c>)
1000bff0:	682c      	ldr	r4, [r5, #0]
1000bff2:	2c00      	cmp	r4, #0
1000bff4:	d014      	beq.n	1000c020 <internal_event_post+0x34>
1000bff6:	6826      	ldr	r6, [r4, #0]
1000bff8:	60e2      	str	r2, [r4, #12]
1000bffa:	602e      	str	r6, [r5, #0]
1000bffc:	2500      	movs	r5, #0
1000bffe:	4a0f      	ldr	r2, [pc, #60]	; (1000c03c <internal_event_post+0x50>)
1000c000:	8123      	strh	r3, [r4, #8]
1000c002:	6813      	ldr	r3, [r2, #0]
1000c004:	6025      	str	r5, [r4, #0]
1000c006:	80a0      	strh	r0, [r4, #4]
1000c008:	80e1      	strh	r1, [r4, #6]
1000c00a:	42ab      	cmp	r3, r5
1000c00c:	d101      	bne.n	1000c012 <internal_event_post+0x26>
1000c00e:	6014      	str	r4, [r2, #0]
1000c010:	e011      	b.n	1000c036 <internal_event_post+0x4a>
1000c012:	681a      	ldr	r2, [r3, #0]
1000c014:	2a00      	cmp	r2, #0
1000c016:	d001      	beq.n	1000c01c <internal_event_post+0x30>
1000c018:	1c13      	adds	r3, r2, #0
1000c01a:	e7fa      	b.n	1000c012 <internal_event_post+0x26>
1000c01c:	601c      	str	r4, [r3, #0]
1000c01e:	e00a      	b.n	1000c036 <internal_event_post+0x4a>
1000c020:	b2c4      	uxtb	r4, r0
1000c022:	2c00      	cmp	r4, #0
1000c024:	d107      	bne.n	1000c036 <internal_event_post+0x4a>
1000c026:	4c06      	ldr	r4, [pc, #24]	; (1000c040 <internal_event_post+0x54>)
1000c028:	60e2      	str	r2, [r4, #12]
1000c02a:	2201      	movs	r2, #1
1000c02c:	8123      	strh	r3, [r4, #8]
1000c02e:	4b05      	ldr	r3, [pc, #20]	; (1000c044 <internal_event_post+0x58>)
1000c030:	80a0      	strh	r0, [r4, #4]
1000c032:	80e1      	strh	r1, [r4, #6]
1000c034:	701a      	strb	r2, [r3, #0]
1000c036:	bd70      	pop	{r4, r5, r6, pc}
1000c038:	10016e24 	.word	0x10016e24
1000c03c:	10016e20 	.word	0x10016e20
1000c040:	10016e0c 	.word	0x10016e0c
1000c044:	10016e1c 	.word	0x10016e1c

1000c048 <internal_event_init>:
1000c048:	b510      	push	{r4, lr}
1000c04a:	4b08      	ldr	r3, [pc, #32]	; (1000c06c <internal_event_init+0x24>)
1000c04c:	0900      	lsrs	r0, r0, #4
1000c04e:	0100      	lsls	r0, r0, #4
1000c050:	681a      	ldr	r2, [r3, #0]
1000c052:	1808      	adds	r0, r1, r0
1000c054:	4281      	cmp	r1, r0
1000c056:	d003      	beq.n	1000c060 <internal_event_init+0x18>
1000c058:	600a      	str	r2, [r1, #0]
1000c05a:	1c0a      	adds	r2, r1, #0
1000c05c:	3110      	adds	r1, #16
1000c05e:	e7f9      	b.n	1000c054 <internal_event_init+0xc>
1000c060:	601a      	str	r2, [r3, #0]
1000c062:	2200      	movs	r2, #0
1000c064:	4b02      	ldr	r3, [pc, #8]	; (1000c070 <internal_event_init+0x28>)
1000c066:	601a      	str	r2, [r3, #0]
1000c068:	bd10      	pop	{r4, pc}
1000c06a:	46c0      	nop			; (mov r8, r8)
1000c06c:	10016e24 	.word	0x10016e24
1000c070:	10016e20 	.word	0x10016e20

1000c074 <special_events_handler>:
1000c074:	b538      	push	{r3, r4, r5, lr}
1000c076:	4c1b      	ldr	r4, [pc, #108]	; (1000c0e4 <special_events_handler+0x70>)
1000c078:	1c03      	adds	r3, r0, #0
1000c07a:	8825      	ldrh	r5, [r4, #0]
1000c07c:	1c08      	adds	r0, r1, #0
1000c07e:	1c21      	adds	r1, r4, #0
1000c080:	429d      	cmp	r5, r3
1000c082:	d107      	bne.n	1000c094 <special_events_handler+0x20>
1000c084:	88a5      	ldrh	r5, [r4, #4]
1000c086:	4285      	cmp	r5, r0
1000c088:	d104      	bne.n	1000c094 <special_events_handler+0x20>
1000c08a:	2301      	movs	r3, #1
1000c08c:	425b      	negs	r3, r3
1000c08e:	8023      	strh	r3, [r4, #0]
1000c090:	60a2      	str	r2, [r4, #8]
1000c092:	e009      	b.n	1000c0a8 <special_events_handler+0x34>
1000c094:	884c      	ldrh	r4, [r1, #2]
1000c096:	429c      	cmp	r4, r3
1000c098:	d10a      	bne.n	1000c0b0 <special_events_handler+0x3c>
1000c09a:	888c      	ldrh	r4, [r1, #4]
1000c09c:	4284      	cmp	r4, r0
1000c09e:	d107      	bne.n	1000c0b0 <special_events_handler+0x3c>
1000c0a0:	2301      	movs	r3, #1
1000c0a2:	425b      	negs	r3, r3
1000c0a4:	804b      	strh	r3, [r1, #2]
1000c0a6:	608a      	str	r2, [r1, #8]
1000c0a8:	4b0f      	ldr	r3, [pc, #60]	; (1000c0e8 <special_events_handler+0x74>)
1000c0aa:	4798      	blx	r3
1000c0ac:	2001      	movs	r0, #1
1000c0ae:	e017      	b.n	1000c0e0 <special_events_handler+0x6c>
1000c0b0:	490e      	ldr	r1, [pc, #56]	; (1000c0ec <special_events_handler+0x78>)
1000c0b2:	428b      	cmp	r3, r1
1000c0b4:	d00e      	beq.n	1000c0d4 <special_events_handler+0x60>
1000c0b6:	490e      	ldr	r1, [pc, #56]	; (1000c0f0 <special_events_handler+0x7c>)
1000c0b8:	428b      	cmp	r3, r1
1000c0ba:	d007      	beq.n	1000c0cc <special_events_handler+0x58>
1000c0bc:	490d      	ldr	r1, [pc, #52]	; (1000c0f4 <special_events_handler+0x80>)
1000c0be:	2000      	movs	r0, #0
1000c0c0:	428b      	cmp	r3, r1
1000c0c2:	d10d      	bne.n	1000c0e0 <special_events_handler+0x6c>
1000c0c4:	1c10      	adds	r0, r2, #0
1000c0c6:	4b0c      	ldr	r3, [pc, #48]	; (1000c0f8 <special_events_handler+0x84>)
1000c0c8:	4798      	blx	r3
1000c0ca:	e7ef      	b.n	1000c0ac <special_events_handler+0x38>
1000c0cc:	1c11      	adds	r1, r2, #0
1000c0ce:	4b0b      	ldr	r3, [pc, #44]	; (1000c0fc <special_events_handler+0x88>)
1000c0d0:	2200      	movs	r2, #0
1000c0d2:	e002      	b.n	1000c0da <special_events_handler+0x66>
1000c0d4:	1c11      	adds	r1, r2, #0
1000c0d6:	2200      	movs	r2, #0
1000c0d8:	4b09      	ldr	r3, [pc, #36]	; (1000c100 <special_events_handler+0x8c>)
1000c0da:	4798      	blx	r3
1000c0dc:	4243      	negs	r3, r0
1000c0de:	4158      	adcs	r0, r3
1000c0e0:	bd38      	pop	{r3, r4, r5, pc}
1000c0e2:	46c0      	nop			; (mov r8, r8)
1000c0e4:	10017b48 	.word	0x10017b48
1000c0e8:	1000d481 	.word	0x1000d481
1000c0ec:	00000e13 	.word	0x00000e13
1000c0f0:	00000e15 	.word	0x00000e15
1000c0f4:	00000e01 	.word	0x00000e01
1000c0f8:	1000d7f1 	.word	0x1000d7f1
1000c0fc:	1000d9b1 	.word	0x1000d9b1
1000c100:	1000da89 	.word	0x1000da89

1000c104 <at_ble_event_get>:
1000c104:	2300      	movs	r3, #0
1000c106:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c108:	b087      	sub	sp, #28
1000c10a:	9204      	str	r2, [sp, #16]
1000c10c:	7003      	strb	r3, [r0, #0]
1000c10e:	9b04      	ldr	r3, [sp, #16]
1000c110:	9003      	str	r0, [sp, #12]
1000c112:	3b01      	subs	r3, #1
1000c114:	1c0d      	adds	r5, r1, #0
1000c116:	9305      	str	r3, [sp, #20]
1000c118:	3303      	adds	r3, #3
1000c11a:	d802      	bhi.n	1000c122 <at_ble_event_get+0x1e>
1000c11c:	9804      	ldr	r0, [sp, #16]
1000c11e:	4bae      	ldr	r3, [pc, #696]	; (1000c3d8 <at_ble_event_get+0x2d4>)
1000c120:	4798      	blx	r3
1000c122:	9b05      	ldr	r3, [sp, #20]
1000c124:	4cad      	ldr	r4, [pc, #692]	; (1000c3dc <at_ble_event_get+0x2d8>)
1000c126:	3303      	adds	r3, #3
1000c128:	d902      	bls.n	1000c130 <at_ble_event_get+0x2c>
1000c12a:	2300      	movs	r3, #0
1000c12c:	9302      	str	r3, [sp, #8]
1000c12e:	e015      	b.n	1000c15c <at_ble_event_get+0x58>
1000c130:	2300      	movs	r3, #0
1000c132:	9302      	str	r3, [sp, #8]
1000c134:	6823      	ldr	r3, [r4, #0]
1000c136:	2b00      	cmp	r3, #0
1000c138:	d113      	bne.n	1000c162 <at_ble_event_get+0x5e>
1000c13a:	9b02      	ldr	r3, [sp, #8]
1000c13c:	2bd0      	cmp	r3, #208	; 0xd0
1000c13e:	d100      	bne.n	1000c142 <at_ble_event_get+0x3e>
1000c140:	e2da      	b.n	1000c6f8 <at_ble_event_get+0x5f4>
1000c142:	9804      	ldr	r0, [sp, #16]
1000c144:	4ba6      	ldr	r3, [pc, #664]	; (1000c3e0 <at_ble_event_get+0x2dc>)
1000c146:	4798      	blx	r3
1000c148:	9002      	str	r0, [sp, #8]
1000c14a:	2802      	cmp	r0, #2
1000c14c:	d1f2      	bne.n	1000c134 <at_ble_event_get+0x30>
1000c14e:	e03f      	b.n	1000c1d0 <at_ble_event_get+0xcc>
1000c150:	9804      	ldr	r0, [sp, #16]
1000c152:	4ba3      	ldr	r3, [pc, #652]	; (1000c3e0 <at_ble_event_get+0x2dc>)
1000c154:	4798      	blx	r3
1000c156:	9002      	str	r0, [sp, #8]
1000c158:	2802      	cmp	r0, #2
1000c15a:	d039      	beq.n	1000c1d0 <at_ble_event_get+0xcc>
1000c15c:	6823      	ldr	r3, [r4, #0]
1000c15e:	2b00      	cmp	r3, #0
1000c160:	d0f6      	beq.n	1000c150 <at_ble_event_get+0x4c>
1000c162:	9b02      	ldr	r3, [sp, #8]
1000c164:	2bd0      	cmp	r3, #208	; 0xd0
1000c166:	d100      	bne.n	1000c16a <at_ble_event_get+0x66>
1000c168:	e2c6      	b.n	1000c6f8 <at_ble_event_get+0x5f4>
1000c16a:	9b02      	ldr	r3, [sp, #8]
1000c16c:	3b03      	subs	r3, #3
1000c16e:	1e5a      	subs	r2, r3, #1
1000c170:	4193      	sbcs	r3, r2
1000c172:	9a02      	ldr	r2, [sp, #8]
1000c174:	425b      	negs	r3, r3
1000c176:	401a      	ands	r2, r3
1000c178:	6823      	ldr	r3, [r4, #0]
1000c17a:	9202      	str	r2, [sp, #8]
1000c17c:	2b00      	cmp	r3, #0
1000c17e:	d100      	bne.n	1000c182 <at_ble_event_get+0x7e>
1000c180:	e2c2      	b.n	1000c708 <at_ble_event_get+0x604>
1000c182:	681a      	ldr	r2, [r3, #0]
1000c184:	68de      	ldr	r6, [r3, #12]
1000c186:	6022      	str	r2, [r4, #0]
1000c188:	88da      	ldrh	r2, [r3, #6]
1000c18a:	9201      	str	r2, [sp, #4]
1000c18c:	4a95      	ldr	r2, [pc, #596]	; (1000c3e4 <at_ble_event_get+0x2e0>)
1000c18e:	889c      	ldrh	r4, [r3, #4]
1000c190:	6811      	ldr	r1, [r2, #0]
1000c192:	6013      	str	r3, [r2, #0]
1000c194:	6019      	str	r1, [r3, #0]
1000c196:	4b94      	ldr	r3, [pc, #592]	; (1000c3e8 <at_ble_event_get+0x2e4>)
1000c198:	781b      	ldrb	r3, [r3, #0]
1000c19a:	2b01      	cmp	r3, #1
1000c19c:	d10f      	bne.n	1000c1be <at_ble_event_get+0xba>
1000c19e:	4b93      	ldr	r3, [pc, #588]	; (1000c3ec <at_ble_event_get+0x2e8>)
1000c1a0:	4a92      	ldr	r2, [pc, #584]	; (1000c3ec <at_ble_event_get+0x2e8>)
1000c1a2:	8898      	ldrh	r0, [r3, #4]
1000c1a4:	88d9      	ldrh	r1, [r3, #6]
1000c1a6:	68d2      	ldr	r2, [r2, #12]
1000c1a8:	891b      	ldrh	r3, [r3, #8]
1000c1aa:	4f91      	ldr	r7, [pc, #580]	; (1000c3f0 <at_ble_event_get+0x2ec>)
1000c1ac:	47b8      	blx	r7
1000c1ae:	2210      	movs	r2, #16
1000c1b0:	4b90      	ldr	r3, [pc, #576]	; (1000c3f4 <at_ble_event_get+0x2f0>)
1000c1b2:	488e      	ldr	r0, [pc, #568]	; (1000c3ec <at_ble_event_get+0x2e8>)
1000c1b4:	2100      	movs	r1, #0
1000c1b6:	4798      	blx	r3
1000c1b8:	2300      	movs	r3, #0
1000c1ba:	4a8b      	ldr	r2, [pc, #556]	; (1000c3e8 <at_ble_event_get+0x2e4>)
1000c1bc:	7013      	strb	r3, [r2, #0]
1000c1be:	9b02      	ldr	r3, [sp, #8]
1000c1c0:	2b00      	cmp	r3, #0
1000c1c2:	d114      	bne.n	1000c1ee <at_ble_event_get+0xea>
1000c1c4:	4b8c      	ldr	r3, [pc, #560]	; (1000c3f8 <at_ble_event_get+0x2f4>)
1000c1c6:	429c      	cmp	r4, r3
1000c1c8:	d009      	beq.n	1000c1de <at_ble_event_get+0xda>
1000c1ca:	4b8c      	ldr	r3, [pc, #560]	; (1000c3fc <at_ble_event_get+0x2f8>)
1000c1cc:	429c      	cmp	r4, r3
1000c1ce:	d127      	bne.n	1000c220 <at_ble_event_get+0x11c>
1000c1d0:	233a      	movs	r3, #58	; 0x3a
1000c1d2:	9a03      	ldr	r2, [sp, #12]
1000c1d4:	7013      	strb	r3, [r2, #0]
1000c1d6:	2300      	movs	r3, #0
1000c1d8:	9302      	str	r3, [sp, #8]
1000c1da:	1c1d      	adds	r5, r3, #0
1000c1dc:	e007      	b.n	1000c1ee <at_ble_event_get+0xea>
1000c1de:	9b01      	ldr	r3, [sp, #4]
1000c1e0:	42a3      	cmp	r3, r4
1000c1e2:	d000      	beq.n	1000c1e6 <at_ble_event_get+0xe2>
1000c1e4:	e28a      	b.n	1000c6fc <at_ble_event_get+0x5f8>
1000c1e6:	2338      	movs	r3, #56	; 0x38
1000c1e8:	9a03      	ldr	r2, [sp, #12]
1000c1ea:	7013      	strb	r3, [r2, #0]
1000c1ec:	602e      	str	r6, [r5, #0]
1000c1ee:	9b03      	ldr	r3, [sp, #12]
1000c1f0:	781b      	ldrb	r3, [r3, #0]
1000c1f2:	2b3b      	cmp	r3, #59	; 0x3b
1000c1f4:	d101      	bne.n	1000c1fa <at_ble_event_get+0xf6>
1000c1f6:	4b82      	ldr	r3, [pc, #520]	; (1000c400 <at_ble_event_get+0x2fc>)
1000c1f8:	4798      	blx	r3
1000c1fa:	9b03      	ldr	r3, [sp, #12]
1000c1fc:	781b      	ldrb	r3, [r3, #0]
1000c1fe:	2b3b      	cmp	r3, #59	; 0x3b
1000c200:	d003      	beq.n	1000c20a <at_ble_event_get+0x106>
1000c202:	9b05      	ldr	r3, [sp, #20]
1000c204:	3303      	adds	r3, #3
1000c206:	d904      	bls.n	1000c212 <at_ble_event_get+0x10e>
1000c208:	e283      	b.n	1000c712 <at_ble_event_get+0x60e>
1000c20a:	9b02      	ldr	r3, [sp, #8]
1000c20c:	2b00      	cmp	r3, #0
1000c20e:	d088      	beq.n	1000c122 <at_ble_event_get+0x1e>
1000c210:	e7f7      	b.n	1000c202 <at_ble_event_get+0xfe>
1000c212:	9b02      	ldr	r3, [sp, #8]
1000c214:	2bd0      	cmp	r3, #208	; 0xd0
1000c216:	d100      	bne.n	1000c21a <at_ble_event_get+0x116>
1000c218:	e27b      	b.n	1000c712 <at_ble_event_get+0x60e>
1000c21a:	4b7a      	ldr	r3, [pc, #488]	; (1000c404 <at_ble_event_get+0x300>)
1000c21c:	4798      	blx	r3
1000c21e:	e278      	b.n	1000c712 <at_ble_event_get+0x60e>
1000c220:	9b01      	ldr	r3, [sp, #4]
1000c222:	2bbb      	cmp	r3, #187	; 0xbb
1000c224:	d125      	bne.n	1000c272 <at_ble_event_get+0x16e>
1000c226:	2cbb      	cmp	r4, #187	; 0xbb
1000c228:	d123      	bne.n	1000c272 <at_ble_event_get+0x16e>
1000c22a:	466b      	mov	r3, sp
1000c22c:	891b      	ldrh	r3, [r3, #8]
1000c22e:	80ab      	strh	r3, [r5, #4]
1000c230:	78b3      	ldrb	r3, [r6, #2]
1000c232:	7872      	ldrb	r2, [r6, #1]
1000c234:	78f0      	ldrb	r0, [r6, #3]
1000c236:	021b      	lsls	r3, r3, #8
1000c238:	4313      	orrs	r3, r2
1000c23a:	7971      	ldrb	r1, [r6, #5]
1000c23c:	7932      	ldrb	r2, [r6, #4]
1000c23e:	70a8      	strb	r0, [r5, #2]
1000c240:	4871      	ldr	r0, [pc, #452]	; (1000c408 <at_ble_event_get+0x304>)
1000c242:	802b      	strh	r3, [r5, #0]
1000c244:	4283      	cmp	r3, r0
1000c246:	d806      	bhi.n	1000c256 <at_ble_event_get+0x152>
1000c248:	4a70      	ldr	r2, [pc, #448]	; (1000c40c <at_ble_event_get+0x308>)
1000c24a:	4293      	cmp	r3, r2
1000c24c:	d20b      	bcs.n	1000c266 <at_ble_event_get+0x162>
1000c24e:	4a70      	ldr	r2, [pc, #448]	; (1000c410 <at_ble_event_get+0x30c>)
1000c250:	4293      	cmp	r3, r2
1000c252:	d008      	beq.n	1000c266 <at_ble_event_get+0x162>
1000c254:	e009      	b.n	1000c26a <at_ble_event_get+0x166>
1000c256:	486f      	ldr	r0, [pc, #444]	; (1000c414 <at_ble_event_get+0x310>)
1000c258:	4283      	cmp	r3, r0
1000c25a:	d106      	bne.n	1000c26a <at_ble_event_get+0x166>
1000c25c:	020b      	lsls	r3, r1, #8
1000c25e:	4313      	orrs	r3, r2
1000c260:	80ab      	strh	r3, [r5, #4]
1000c262:	2337      	movs	r3, #55	; 0x37
1000c264:	e002      	b.n	1000c26c <at_ble_event_get+0x168>
1000c266:	2336      	movs	r3, #54	; 0x36
1000c268:	e000      	b.n	1000c26c <at_ble_event_get+0x168>
1000c26a:	2300      	movs	r3, #0
1000c26c:	9a03      	ldr	r2, [sp, #12]
1000c26e:	7013      	strb	r3, [r2, #0]
1000c270:	e7bd      	b.n	1000c1ee <at_ble_event_get+0xea>
1000c272:	4b69      	ldr	r3, [pc, #420]	; (1000c418 <at_ble_event_get+0x314>)
1000c274:	429c      	cmp	r4, r3
1000c276:	d100      	bne.n	1000c27a <at_ble_event_get+0x176>
1000c278:	e144      	b.n	1000c504 <at_ble_event_get+0x400>
1000c27a:	d865      	bhi.n	1000c348 <at_ble_event_get+0x244>
1000c27c:	4b67      	ldr	r3, [pc, #412]	; (1000c41c <at_ble_event_get+0x318>)
1000c27e:	429c      	cmp	r4, r3
1000c280:	d100      	bne.n	1000c284 <at_ble_event_get+0x180>
1000c282:	e1d5      	b.n	1000c630 <at_ble_event_get+0x52c>
1000c284:	d82f      	bhi.n	1000c2e6 <at_ble_event_get+0x1e2>
1000c286:	4b66      	ldr	r3, [pc, #408]	; (1000c420 <at_ble_event_get+0x31c>)
1000c288:	429c      	cmp	r4, r3
1000c28a:	d100      	bne.n	1000c28e <at_ble_event_get+0x18a>
1000c28c:	e1e0      	b.n	1000c650 <at_ble_event_get+0x54c>
1000c28e:	d813      	bhi.n	1000c2b8 <at_ble_event_get+0x1b4>
1000c290:	4b64      	ldr	r3, [pc, #400]	; (1000c424 <at_ble_event_get+0x320>)
1000c292:	429c      	cmp	r4, r3
1000c294:	d100      	bne.n	1000c298 <at_ble_event_get+0x194>
1000c296:	e1a3      	b.n	1000c5e0 <at_ble_event_get+0x4dc>
1000c298:	d804      	bhi.n	1000c2a4 <at_ble_event_get+0x1a0>
1000c29a:	2638      	movs	r6, #56	; 0x38
1000c29c:	42b4      	cmp	r4, r6
1000c29e:	d100      	bne.n	1000c2a2 <at_ble_event_get+0x19e>
1000c2a0:	e225      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c2a2:	e117      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c2a4:	4b60      	ldr	r3, [pc, #384]	; (1000c428 <at_ble_event_get+0x324>)
1000c2a6:	429c      	cmp	r4, r3
1000c2a8:	d100      	bne.n	1000c2ac <at_ble_event_get+0x1a8>
1000c2aa:	e19f      	b.n	1000c5ec <at_ble_event_get+0x4e8>
1000c2ac:	33fe      	adds	r3, #254	; 0xfe
1000c2ae:	33ff      	adds	r3, #255	; 0xff
1000c2b0:	429c      	cmp	r4, r3
1000c2b2:	d100      	bne.n	1000c2b6 <at_ble_event_get+0x1b2>
1000c2b4:	e1d3      	b.n	1000c65e <at_ble_event_get+0x55a>
1000c2b6:	e10d      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c2b8:	4b5c      	ldr	r3, [pc, #368]	; (1000c42c <at_ble_event_get+0x328>)
1000c2ba:	429c      	cmp	r4, r3
1000c2bc:	d100      	bne.n	1000c2c0 <at_ble_event_get+0x1bc>
1000c2be:	e1a9      	b.n	1000c614 <at_ble_event_get+0x510>
1000c2c0:	d808      	bhi.n	1000c2d4 <at_ble_event_get+0x1d0>
1000c2c2:	4b5b      	ldr	r3, [pc, #364]	; (1000c430 <at_ble_event_get+0x32c>)
1000c2c4:	429c      	cmp	r4, r3
1000c2c6:	d100      	bne.n	1000c2ca <at_ble_event_get+0x1c6>
1000c2c8:	e196      	b.n	1000c5f8 <at_ble_event_get+0x4f4>
1000c2ca:	4b5a      	ldr	r3, [pc, #360]	; (1000c434 <at_ble_event_get+0x330>)
1000c2cc:	429c      	cmp	r4, r3
1000c2ce:	d100      	bne.n	1000c2d2 <at_ble_event_get+0x1ce>
1000c2d0:	e199      	b.n	1000c606 <at_ble_event_get+0x502>
1000c2d2:	e0ff      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c2d4:	4b58      	ldr	r3, [pc, #352]	; (1000c438 <at_ble_event_get+0x334>)
1000c2d6:	429c      	cmp	r4, r3
1000c2d8:	d100      	bne.n	1000c2dc <at_ble_event_get+0x1d8>
1000c2da:	e1a2      	b.n	1000c622 <at_ble_event_get+0x51e>
1000c2dc:	4b57      	ldr	r3, [pc, #348]	; (1000c43c <at_ble_event_get+0x338>)
1000c2de:	429c      	cmp	r4, r3
1000c2e0:	d100      	bne.n	1000c2e4 <at_ble_event_get+0x1e0>
1000c2e2:	e1d4      	b.n	1000c68e <at_ble_event_get+0x58a>
1000c2e4:	e0f6      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c2e6:	4b56      	ldr	r3, [pc, #344]	; (1000c440 <at_ble_event_get+0x33c>)
1000c2e8:	429c      	cmp	r4, r3
1000c2ea:	d100      	bne.n	1000c2ee <at_ble_event_get+0x1ea>
1000c2ec:	e1c8      	b.n	1000c680 <at_ble_event_get+0x57c>
1000c2ee:	d812      	bhi.n	1000c316 <at_ble_event_get+0x212>
1000c2f0:	4b54      	ldr	r3, [pc, #336]	; (1000c444 <at_ble_event_get+0x340>)
1000c2f2:	429c      	cmp	r4, r3
1000c2f4:	d100      	bne.n	1000c2f8 <at_ble_event_get+0x1f4>
1000c2f6:	e1d1      	b.n	1000c69c <at_ble_event_get+0x598>
1000c2f8:	d804      	bhi.n	1000c304 <at_ble_event_get+0x200>
1000c2fa:	4b53      	ldr	r3, [pc, #332]	; (1000c448 <at_ble_event_get+0x344>)
1000c2fc:	429c      	cmp	r4, r3
1000c2fe:	d100      	bne.n	1000c302 <at_ble_event_get+0x1fe>
1000c300:	e19b      	b.n	1000c63a <at_ble_event_get+0x536>
1000c302:	e0e7      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c304:	4b51      	ldr	r3, [pc, #324]	; (1000c44c <at_ble_event_get+0x348>)
1000c306:	429c      	cmp	r4, r3
1000c308:	d100      	bne.n	1000c30c <at_ble_event_get+0x208>
1000c30a:	e1ad      	b.n	1000c668 <at_ble_event_get+0x564>
1000c30c:	4b50      	ldr	r3, [pc, #320]	; (1000c450 <at_ble_event_get+0x34c>)
1000c30e:	429c      	cmp	r4, r3
1000c310:	d100      	bne.n	1000c314 <at_ble_event_get+0x210>
1000c312:	e1b0      	b.n	1000c676 <at_ble_event_get+0x572>
1000c314:	e0de      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c316:	4b4f      	ldr	r3, [pc, #316]	; (1000c454 <at_ble_event_get+0x350>)
1000c318:	429c      	cmp	r4, r3
1000c31a:	d100      	bne.n	1000c31e <at_ble_event_get+0x21a>
1000c31c:	e0e0      	b.n	1000c4e0 <at_ble_event_get+0x3dc>
1000c31e:	d809      	bhi.n	1000c334 <at_ble_event_get+0x230>
1000c320:	3b08      	subs	r3, #8
1000c322:	429c      	cmp	r4, r3
1000c324:	d100      	bne.n	1000c328 <at_ble_event_get+0x224>
1000c326:	e0d7      	b.n	1000c4d8 <at_ble_event_get+0x3d4>
1000c328:	4b4b      	ldr	r3, [pc, #300]	; (1000c458 <at_ble_event_get+0x354>)
1000c32a:	2639      	movs	r6, #57	; 0x39
1000c32c:	429c      	cmp	r4, r3
1000c32e:	d100      	bne.n	1000c332 <at_ble_event_get+0x22e>
1000c330:	e1dd      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c332:	e0cf      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c334:	23d1      	movs	r3, #209	; 0xd1
1000c336:	011b      	lsls	r3, r3, #4
1000c338:	429c      	cmp	r4, r3
1000c33a:	d100      	bne.n	1000c33e <at_ble_event_get+0x23a>
1000c33c:	e0d6      	b.n	1000c4ec <at_ble_event_get+0x3e8>
1000c33e:	4b47      	ldr	r3, [pc, #284]	; (1000c45c <at_ble_event_get+0x358>)
1000c340:	429c      	cmp	r4, r3
1000c342:	d100      	bne.n	1000c346 <at_ble_event_get+0x242>
1000c344:	e0d8      	b.n	1000c4f8 <at_ble_event_get+0x3f4>
1000c346:	e0c5      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c348:	4b45      	ldr	r3, [pc, #276]	; (1000c460 <at_ble_event_get+0x35c>)
1000c34a:	429c      	cmp	r4, r3
1000c34c:	d100      	bne.n	1000c350 <at_ble_event_get+0x24c>
1000c34e:	e117      	b.n	1000c580 <at_ble_event_get+0x47c>
1000c350:	d82e      	bhi.n	1000c3b0 <at_ble_event_get+0x2ac>
1000c352:	4b44      	ldr	r3, [pc, #272]	; (1000c464 <at_ble_event_get+0x360>)
1000c354:	429c      	cmp	r4, r3
1000c356:	d100      	bne.n	1000c35a <at_ble_event_get+0x256>
1000c358:	e13d      	b.n	1000c5d6 <at_ble_event_get+0x4d2>
1000c35a:	d812      	bhi.n	1000c382 <at_ble_event_get+0x27e>
1000c35c:	4b42      	ldr	r3, [pc, #264]	; (1000c468 <at_ble_event_get+0x364>)
1000c35e:	429c      	cmp	r4, r3
1000c360:	d100      	bne.n	1000c364 <at_ble_event_get+0x260>
1000c362:	e0e8      	b.n	1000c536 <at_ble_event_get+0x432>
1000c364:	d804      	bhi.n	1000c370 <at_ble_event_get+0x26c>
1000c366:	3b03      	subs	r3, #3
1000c368:	429c      	cmp	r4, r3
1000c36a:	d100      	bne.n	1000c36e <at_ble_event_get+0x26a>
1000c36c:	e0d0      	b.n	1000c510 <at_ble_event_get+0x40c>
1000c36e:	e0b1      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c370:	4b3e      	ldr	r3, [pc, #248]	; (1000c46c <at_ble_event_get+0x368>)
1000c372:	429c      	cmp	r4, r3
1000c374:	d100      	bne.n	1000c378 <at_ble_event_get+0x274>
1000c376:	e0d0      	b.n	1000c51a <at_ble_event_get+0x416>
1000c378:	4b3d      	ldr	r3, [pc, #244]	; (1000c470 <at_ble_event_get+0x36c>)
1000c37a:	429c      	cmp	r4, r3
1000c37c:	d100      	bne.n	1000c380 <at_ble_event_get+0x27c>
1000c37e:	e0f9      	b.n	1000c574 <at_ble_event_get+0x470>
1000c380:	e0a8      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c382:	4b3c      	ldr	r3, [pc, #240]	; (1000c474 <at_ble_event_get+0x370>)
1000c384:	429c      	cmp	r4, r3
1000c386:	d100      	bne.n	1000c38a <at_ble_event_get+0x286>
1000c388:	e0db      	b.n	1000c542 <at_ble_event_get+0x43e>
1000c38a:	d808      	bhi.n	1000c39e <at_ble_event_get+0x29a>
1000c38c:	4b3a      	ldr	r3, [pc, #232]	; (1000c478 <at_ble_event_get+0x374>)
1000c38e:	429c      	cmp	r4, r3
1000c390:	d100      	bne.n	1000c394 <at_ble_event_get+0x290>
1000c392:	e11b      	b.n	1000c5cc <at_ble_event_get+0x4c8>
1000c394:	4b39      	ldr	r3, [pc, #228]	; (1000c47c <at_ble_event_get+0x378>)
1000c396:	429c      	cmp	r4, r3
1000c398:	d100      	bne.n	1000c39c <at_ble_event_get+0x298>
1000c39a:	e0d8      	b.n	1000c54e <at_ble_event_get+0x44a>
1000c39c:	e09a      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c39e:	4b38      	ldr	r3, [pc, #224]	; (1000c480 <at_ble_event_get+0x37c>)
1000c3a0:	429c      	cmp	r4, r3
1000c3a2:	d100      	bne.n	1000c3a6 <at_ble_event_get+0x2a2>
1000c3a4:	e0d8      	b.n	1000c558 <at_ble_event_get+0x454>
1000c3a6:	4b37      	ldr	r3, [pc, #220]	; (1000c484 <at_ble_event_get+0x380>)
1000c3a8:	429c      	cmp	r4, r3
1000c3aa:	d100      	bne.n	1000c3ae <at_ble_event_get+0x2aa>
1000c3ac:	e0db      	b.n	1000c566 <at_ble_event_get+0x462>
1000c3ae:	e091      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c3b0:	4b35      	ldr	r3, [pc, #212]	; (1000c488 <at_ble_event_get+0x384>)
1000c3b2:	429c      	cmp	r4, r3
1000c3b4:	d100      	bne.n	1000c3b8 <at_ble_event_get+0x2b4>
1000c3b6:	e0f7      	b.n	1000c5a8 <at_ble_event_get+0x4a4>
1000c3b8:	d876      	bhi.n	1000c4a8 <at_ble_event_get+0x3a4>
1000c3ba:	4b34      	ldr	r3, [pc, #208]	; (1000c48c <at_ble_event_get+0x388>)
1000c3bc:	429c      	cmp	r4, r3
1000c3be:	d100      	bne.n	1000c3c2 <at_ble_event_get+0x2be>
1000c3c0:	e0f8      	b.n	1000c5b4 <at_ble_event_get+0x4b0>
1000c3c2:	d869      	bhi.n	1000c498 <at_ble_event_get+0x394>
1000c3c4:	4b32      	ldr	r3, [pc, #200]	; (1000c490 <at_ble_event_get+0x38c>)
1000c3c6:	429c      	cmp	r4, r3
1000c3c8:	d100      	bne.n	1000c3cc <at_ble_event_get+0x2c8>
1000c3ca:	e0e0      	b.n	1000c58e <at_ble_event_get+0x48a>
1000c3cc:	4b31      	ldr	r3, [pc, #196]	; (1000c494 <at_ble_event_get+0x390>)
1000c3ce:	429c      	cmp	r4, r3
1000c3d0:	d100      	bne.n	1000c3d4 <at_ble_event_get+0x2d0>
1000c3d2:	e0a9      	b.n	1000c528 <at_ble_event_get+0x424>
1000c3d4:	e07e      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c3d6:	46c0      	nop			; (mov r8, r8)
1000c3d8:	1000d4b9 	.word	0x1000d4b9
1000c3dc:	10016e20 	.word	0x10016e20
1000c3e0:	1000b6e1 	.word	0x1000b6e1
1000c3e4:	10016e24 	.word	0x10016e24
1000c3e8:	10016e1c 	.word	0x10016e1c
1000c3ec:	10016e0c 	.word	0x10016e0c
1000c3f0:	1000bfed 	.word	0x1000bfed
1000c3f4:	100107f9 	.word	0x100107f9
1000c3f8:	0000ffff 	.word	0x0000ffff
1000c3fc:	0000fffe 	.word	0x0000fffe
1000c400:	1000b959 	.word	0x1000b959
1000c404:	1000d4bb 	.word	0x1000d4bb
1000c408:	0000201e 	.word	0x0000201e
1000c40c:	0000201d 	.word	0x0000201d
1000c410:	00000c03 	.word	0x00000c03
1000c414:	0000201f 	.word	0x0000201f
1000c418:	00000d1c 	.word	0x00000d1c
1000c41c:	00000c0c 	.word	0x00000c0c
1000c420:	00000c02 	.word	0x00000c02
1000c424:	00000a02 	.word	0x00000a02
1000c428:	00000a03 	.word	0x00000a03
1000c42c:	00000c06 	.word	0x00000c06
1000c430:	00000c04 	.word	0x00000c04
1000c434:	00000c05 	.word	0x00000c05
1000c438:	00000c07 	.word	0x00000c07
1000c43c:	00000c09 	.word	0x00000c09
1000c440:	00000c17 	.word	0x00000c17
1000c444:	00000c12 	.word	0x00000c12
1000c448:	00000c0d 	.word	0x00000c0d
1000c44c:	00000c13 	.word	0x00000c13
1000c450:	00000c15 	.word	0x00000c15
1000c454:	00000d08 	.word	0x00000d08
1000c458:	00000d01 	.word	0x00000d01
1000c45c:	00000d15 	.word	0x00000d15
1000c460:	00000e1b 	.word	0x00000e1b
1000c464:	00000e0f 	.word	0x00000e0f
1000c468:	00000e03 	.word	0x00000e03
1000c46c:	00000e06 	.word	0x00000e06
1000c470:	00000e0a 	.word	0x00000e0a
1000c474:	00000e15 	.word	0x00000e15
1000c478:	00000e11 	.word	0x00000e11
1000c47c:	00000e13 	.word	0x00000e13
1000c480:	00000e17 	.word	0x00000e17
1000c484:	00000e19 	.word	0x00000e19
1000c488:	00000e27 	.word	0x00000e27
1000c48c:	00000e21 	.word	0x00000e21
1000c490:	00000e1c 	.word	0x00000e1c
1000c494:	00000e1d 	.word	0x00000e1d
1000c498:	4b9f      	ldr	r3, [pc, #636]	; (1000c718 <at_ble_event_get+0x614>)
1000c49a:	429c      	cmp	r4, r3
1000c49c:	d07e      	beq.n	1000c59c <at_ble_event_get+0x498>
1000c49e:	4b9f      	ldr	r3, [pc, #636]	; (1000c71c <at_ble_event_get+0x618>)
1000c4a0:	429c      	cmp	r4, r3
1000c4a2:	d100      	bne.n	1000c4a6 <at_ble_event_get+0x3a2>
1000c4a4:	e08c      	b.n	1000c5c0 <at_ble_event_get+0x4bc>
1000c4a6:	e015      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c4a8:	4b9d      	ldr	r3, [pc, #628]	; (1000c720 <at_ble_event_get+0x61c>)
1000c4aa:	429c      	cmp	r4, r3
1000c4ac:	d100      	bne.n	1000c4b0 <at_ble_event_get+0x3ac>
1000c4ae:	e10a      	b.n	1000c6c6 <at_ble_event_get+0x5c2>
1000c4b0:	d808      	bhi.n	1000c4c4 <at_ble_event_get+0x3c0>
1000c4b2:	4b9c      	ldr	r3, [pc, #624]	; (1000c724 <at_ble_event_get+0x620>)
1000c4b4:	429c      	cmp	r4, r3
1000c4b6:	d100      	bne.n	1000c4ba <at_ble_event_get+0x3b6>
1000c4b8:	e0f7      	b.n	1000c6aa <at_ble_event_get+0x5a6>
1000c4ba:	4b9b      	ldr	r3, [pc, #620]	; (1000c728 <at_ble_event_get+0x624>)
1000c4bc:	429c      	cmp	r4, r3
1000c4be:	d100      	bne.n	1000c4c2 <at_ble_event_get+0x3be>
1000c4c0:	e0fa      	b.n	1000c6b8 <at_ble_event_get+0x5b4>
1000c4c2:	e007      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c4c4:	4b99      	ldr	r3, [pc, #612]	; (1000c72c <at_ble_event_get+0x628>)
1000c4c6:	429c      	cmp	r4, r3
1000c4c8:	d100      	bne.n	1000c4cc <at_ble_event_get+0x3c8>
1000c4ca:	e103      	b.n	1000c6d4 <at_ble_event_get+0x5d0>
1000c4cc:	4b98      	ldr	r3, [pc, #608]	; (1000c730 <at_ble_event_get+0x62c>)
1000c4ce:	429c      	cmp	r4, r3
1000c4d0:	d100      	bne.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c4d2:	e106      	b.n	1000c6e2 <at_ble_event_get+0x5de>
1000c4d4:	2600      	movs	r6, #0
1000c4d6:	e10a      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c4d8:	1c30      	adds	r0, r6, #0
1000c4da:	1c29      	adds	r1, r5, #0
1000c4dc:	4b95      	ldr	r3, [pc, #596]	; (1000c734 <at_ble_event_get+0x630>)
1000c4de:	e014      	b.n	1000c50a <at_ble_event_get+0x406>
1000c4e0:	1c30      	adds	r0, r6, #0
1000c4e2:	1c29      	adds	r1, r5, #0
1000c4e4:	4b94      	ldr	r3, [pc, #592]	; (1000c738 <at_ble_event_get+0x634>)
1000c4e6:	4798      	blx	r3
1000c4e8:	2604      	movs	r6, #4
1000c4ea:	e100      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c4ec:	1c30      	adds	r0, r6, #0
1000c4ee:	1c29      	adds	r1, r5, #0
1000c4f0:	4b92      	ldr	r3, [pc, #584]	; (1000c73c <at_ble_event_get+0x638>)
1000c4f2:	4798      	blx	r3
1000c4f4:	2601      	movs	r6, #1
1000c4f6:	e0fa      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c4f8:	1c30      	adds	r0, r6, #0
1000c4fa:	1c29      	adds	r1, r5, #0
1000c4fc:	4b90      	ldr	r3, [pc, #576]	; (1000c740 <at_ble_event_get+0x63c>)
1000c4fe:	4798      	blx	r3
1000c500:	260f      	movs	r6, #15
1000c502:	e0f4      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c504:	1c30      	adds	r0, r6, #0
1000c506:	1c29      	adds	r1, r5, #0
1000c508:	4b8e      	ldr	r3, [pc, #568]	; (1000c744 <at_ble_event_get+0x640>)
1000c50a:	4798      	blx	r3
1000c50c:	1c06      	adds	r6, r0, #0
1000c50e:	e0ee      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c510:	9801      	ldr	r0, [sp, #4]
1000c512:	1c31      	adds	r1, r6, #0
1000c514:	1c2a      	adds	r2, r5, #0
1000c516:	4b8c      	ldr	r3, [pc, #560]	; (1000c748 <at_ble_event_get+0x644>)
1000c518:	e017      	b.n	1000c54a <at_ble_event_get+0x446>
1000c51a:	1c31      	adds	r1, r6, #0
1000c51c:	9801      	ldr	r0, [sp, #4]
1000c51e:	1c2a      	adds	r2, r5, #0
1000c520:	4b8a      	ldr	r3, [pc, #552]	; (1000c74c <at_ble_event_get+0x648>)
1000c522:	4798      	blx	r3
1000c524:	2611      	movs	r6, #17
1000c526:	e0e2      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c528:	1c31      	adds	r1, r6, #0
1000c52a:	9801      	ldr	r0, [sp, #4]
1000c52c:	1c2a      	adds	r2, r5, #0
1000c52e:	4b88      	ldr	r3, [pc, #544]	; (1000c750 <at_ble_event_get+0x64c>)
1000c530:	4798      	blx	r3
1000c532:	2612      	movs	r6, #18
1000c534:	e0db      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c536:	1c30      	adds	r0, r6, #0
1000c538:	1c29      	adds	r1, r5, #0
1000c53a:	4b86      	ldr	r3, [pc, #536]	; (1000c754 <at_ble_event_get+0x650>)
1000c53c:	4798      	blx	r3
1000c53e:	2606      	movs	r6, #6
1000c540:	e0d5      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c542:	1c31      	adds	r1, r6, #0
1000c544:	1c2a      	adds	r2, r5, #0
1000c546:	9801      	ldr	r0, [sp, #4]
1000c548:	4b83      	ldr	r3, [pc, #524]	; (1000c758 <at_ble_event_get+0x654>)
1000c54a:	4798      	blx	r3
1000c54c:	e7de      	b.n	1000c50c <at_ble_event_get+0x408>
1000c54e:	9801      	ldr	r0, [sp, #4]
1000c550:	1c31      	adds	r1, r6, #0
1000c552:	1c2a      	adds	r2, r5, #0
1000c554:	4b81      	ldr	r3, [pc, #516]	; (1000c75c <at_ble_event_get+0x658>)
1000c556:	e7f8      	b.n	1000c54a <at_ble_event_get+0x446>
1000c558:	1c31      	adds	r1, r6, #0
1000c55a:	9801      	ldr	r0, [sp, #4]
1000c55c:	1c2a      	adds	r2, r5, #0
1000c55e:	4b80      	ldr	r3, [pc, #512]	; (1000c760 <at_ble_event_get+0x65c>)
1000c560:	4798      	blx	r3
1000c562:	260d      	movs	r6, #13
1000c564:	e0c3      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c566:	1c31      	adds	r1, r6, #0
1000c568:	9801      	ldr	r0, [sp, #4]
1000c56a:	1c2a      	adds	r2, r5, #0
1000c56c:	4b7d      	ldr	r3, [pc, #500]	; (1000c764 <at_ble_event_get+0x660>)
1000c56e:	4798      	blx	r3
1000c570:	260e      	movs	r6, #14
1000c572:	e0bc      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c574:	9801      	ldr	r0, [sp, #4]
1000c576:	1c31      	adds	r1, r6, #0
1000c578:	1c2a      	adds	r2, r5, #0
1000c57a:	4b7b      	ldr	r3, [pc, #492]	; (1000c768 <at_ble_event_get+0x664>)
1000c57c:	4798      	blx	r3
1000c57e:	e084      	b.n	1000c68a <at_ble_event_get+0x586>
1000c580:	1c31      	adds	r1, r6, #0
1000c582:	9801      	ldr	r0, [sp, #4]
1000c584:	1c2a      	adds	r2, r5, #0
1000c586:	4b79      	ldr	r3, [pc, #484]	; (1000c76c <at_ble_event_get+0x668>)
1000c588:	4798      	blx	r3
1000c58a:	260b      	movs	r6, #11
1000c58c:	e0af      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c58e:	1c31      	adds	r1, r6, #0
1000c590:	9801      	ldr	r0, [sp, #4]
1000c592:	1c2a      	adds	r2, r5, #0
1000c594:	4b76      	ldr	r3, [pc, #472]	; (1000c770 <at_ble_event_get+0x66c>)
1000c596:	4798      	blx	r3
1000c598:	2610      	movs	r6, #16
1000c59a:	e0a8      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c59c:	1c30      	adds	r0, r6, #0
1000c59e:	1c29      	adds	r1, r5, #0
1000c5a0:	4b74      	ldr	r3, [pc, #464]	; (1000c774 <at_ble_event_get+0x670>)
1000c5a2:	4798      	blx	r3
1000c5a4:	2628      	movs	r6, #40	; 0x28
1000c5a6:	e0a2      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5a8:	1c30      	adds	r0, r6, #0
1000c5aa:	1c29      	adds	r1, r5, #0
1000c5ac:	4b72      	ldr	r3, [pc, #456]	; (1000c778 <at_ble_event_get+0x674>)
1000c5ae:	4798      	blx	r3
1000c5b0:	2629      	movs	r6, #41	; 0x29
1000c5b2:	e09c      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5b4:	1c30      	adds	r0, r6, #0
1000c5b6:	1c29      	adds	r1, r5, #0
1000c5b8:	4b70      	ldr	r3, [pc, #448]	; (1000c77c <at_ble_event_get+0x678>)
1000c5ba:	4798      	blx	r3
1000c5bc:	2627      	movs	r6, #39	; 0x27
1000c5be:	e096      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5c0:	1c30      	adds	r0, r6, #0
1000c5c2:	1c29      	adds	r1, r5, #0
1000c5c4:	4b6e      	ldr	r3, [pc, #440]	; (1000c780 <at_ble_event_get+0x67c>)
1000c5c6:	4798      	blx	r3
1000c5c8:	262a      	movs	r6, #42	; 0x2a
1000c5ca:	e090      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5cc:	9801      	ldr	r0, [sp, #4]
1000c5ce:	1c31      	adds	r1, r6, #0
1000c5d0:	1c2a      	adds	r2, r5, #0
1000c5d2:	4b6c      	ldr	r3, [pc, #432]	; (1000c784 <at_ble_event_get+0x680>)
1000c5d4:	e7b9      	b.n	1000c54a <at_ble_event_get+0x446>
1000c5d6:	9801      	ldr	r0, [sp, #4]
1000c5d8:	1c31      	adds	r1, r6, #0
1000c5da:	1c2a      	adds	r2, r5, #0
1000c5dc:	4b6a      	ldr	r3, [pc, #424]	; (1000c788 <at_ble_event_get+0x684>)
1000c5de:	e7b4      	b.n	1000c54a <at_ble_event_get+0x446>
1000c5e0:	1c30      	adds	r0, r6, #0
1000c5e2:	1c29      	adds	r1, r5, #0
1000c5e4:	4b69      	ldr	r3, [pc, #420]	; (1000c78c <at_ble_event_get+0x688>)
1000c5e6:	4798      	blx	r3
1000c5e8:	262b      	movs	r6, #43	; 0x2b
1000c5ea:	e080      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5ec:	1c30      	adds	r0, r6, #0
1000c5ee:	1c29      	adds	r1, r5, #0
1000c5f0:	4b67      	ldr	r3, [pc, #412]	; (1000c790 <at_ble_event_get+0x68c>)
1000c5f2:	4798      	blx	r3
1000c5f4:	262c      	movs	r6, #44	; 0x2c
1000c5f6:	e07a      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c5f8:	1c31      	adds	r1, r6, #0
1000c5fa:	9801      	ldr	r0, [sp, #4]
1000c5fc:	1c2a      	adds	r2, r5, #0
1000c5fe:	4b65      	ldr	r3, [pc, #404]	; (1000c794 <at_ble_event_get+0x690>)
1000c600:	4798      	blx	r3
1000c602:	2613      	movs	r6, #19
1000c604:	e073      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c606:	1c31      	adds	r1, r6, #0
1000c608:	9801      	ldr	r0, [sp, #4]
1000c60a:	1c2a      	adds	r2, r5, #0
1000c60c:	4b62      	ldr	r3, [pc, #392]	; (1000c798 <at_ble_event_get+0x694>)
1000c60e:	4798      	blx	r3
1000c610:	2614      	movs	r6, #20
1000c612:	e06c      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c614:	1c31      	adds	r1, r6, #0
1000c616:	9801      	ldr	r0, [sp, #4]
1000c618:	1c2a      	adds	r2, r5, #0
1000c61a:	4b60      	ldr	r3, [pc, #384]	; (1000c79c <at_ble_event_get+0x698>)
1000c61c:	4798      	blx	r3
1000c61e:	2615      	movs	r6, #21
1000c620:	e065      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c622:	1c31      	adds	r1, r6, #0
1000c624:	9801      	ldr	r0, [sp, #4]
1000c626:	1c2a      	adds	r2, r5, #0
1000c628:	4b5d      	ldr	r3, [pc, #372]	; (1000c7a0 <at_ble_event_get+0x69c>)
1000c62a:	4798      	blx	r3
1000c62c:	2616      	movs	r6, #22
1000c62e:	e05e      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c630:	9801      	ldr	r0, [sp, #4]
1000c632:	1c31      	adds	r1, r6, #0
1000c634:	1c2a      	adds	r2, r5, #0
1000c636:	4b5b      	ldr	r3, [pc, #364]	; (1000c7a4 <at_ble_event_get+0x6a0>)
1000c638:	e787      	b.n	1000c54a <at_ble_event_get+0x446>
1000c63a:	1c31      	adds	r1, r6, #0
1000c63c:	9801      	ldr	r0, [sp, #4]
1000c63e:	1c2a      	adds	r2, r5, #0
1000c640:	4b58      	ldr	r3, [pc, #352]	; (1000c7a4 <at_ble_event_get+0x6a0>)
1000c642:	4798      	blx	r3
1000c644:	88a9      	ldrh	r1, [r5, #4]
1000c646:	1c06      	adds	r6, r0, #0
1000c648:	4b57      	ldr	r3, [pc, #348]	; (1000c7a8 <at_ble_event_get+0x6a4>)
1000c64a:	8828      	ldrh	r0, [r5, #0]
1000c64c:	4798      	blx	r3
1000c64e:	e04e      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c650:	1c31      	adds	r1, r6, #0
1000c652:	9801      	ldr	r0, [sp, #4]
1000c654:	1c2a      	adds	r2, r5, #0
1000c656:	4b55      	ldr	r3, [pc, #340]	; (1000c7ac <at_ble_event_get+0x6a8>)
1000c658:	4798      	blx	r3
1000c65a:	2623      	movs	r6, #35	; 0x23
1000c65c:	e047      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c65e:	9801      	ldr	r0, [sp, #4]
1000c660:	1c31      	adds	r1, r6, #0
1000c662:	1c2a      	adds	r2, r5, #0
1000c664:	4b52      	ldr	r3, [pc, #328]	; (1000c7b0 <at_ble_event_get+0x6ac>)
1000c666:	e770      	b.n	1000c54a <at_ble_event_get+0x446>
1000c668:	9b01      	ldr	r3, [sp, #4]
1000c66a:	1c30      	adds	r0, r6, #0
1000c66c:	0a1f      	lsrs	r7, r3, #8
1000c66e:	802f      	strh	r7, [r5, #0]
1000c670:	1c29      	adds	r1, r5, #0
1000c672:	4b50      	ldr	r3, [pc, #320]	; (1000c7b4 <at_ble_event_get+0x6b0>)
1000c674:	e749      	b.n	1000c50a <at_ble_event_get+0x406>
1000c676:	9801      	ldr	r0, [sp, #4]
1000c678:	1c31      	adds	r1, r6, #0
1000c67a:	1c2a      	adds	r2, r5, #0
1000c67c:	4b4e      	ldr	r3, [pc, #312]	; (1000c7b8 <at_ble_event_get+0x6b4>)
1000c67e:	e764      	b.n	1000c54a <at_ble_event_get+0x446>
1000c680:	1c30      	adds	r0, r6, #0
1000c682:	1c29      	adds	r1, r5, #0
1000c684:	9a01      	ldr	r2, [sp, #4]
1000c686:	4b4d      	ldr	r3, [pc, #308]	; (1000c7bc <at_ble_event_get+0x6b8>)
1000c688:	4798      	blx	r3
1000c68a:	263b      	movs	r6, #59	; 0x3b
1000c68c:	e02f      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c68e:	1c31      	adds	r1, r6, #0
1000c690:	9801      	ldr	r0, [sp, #4]
1000c692:	1c2a      	adds	r2, r5, #0
1000c694:	4b4a      	ldr	r3, [pc, #296]	; (1000c7c0 <at_ble_event_get+0x6bc>)
1000c696:	4798      	blx	r3
1000c698:	2618      	movs	r6, #24
1000c69a:	e028      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c69c:	1c31      	adds	r1, r6, #0
1000c69e:	9801      	ldr	r0, [sp, #4]
1000c6a0:	1c2a      	adds	r2, r5, #0
1000c6a2:	4b48      	ldr	r3, [pc, #288]	; (1000c7c4 <at_ble_event_get+0x6c0>)
1000c6a4:	4798      	blx	r3
1000c6a6:	2620      	movs	r6, #32
1000c6a8:	e021      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c6aa:	1c31      	adds	r1, r6, #0
1000c6ac:	9801      	ldr	r0, [sp, #4]
1000c6ae:	1c2a      	adds	r2, r5, #0
1000c6b0:	4b45      	ldr	r3, [pc, #276]	; (1000c7c8 <at_ble_event_get+0x6c4>)
1000c6b2:	4798      	blx	r3
1000c6b4:	2633      	movs	r6, #51	; 0x33
1000c6b6:	e01a      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c6b8:	1c31      	adds	r1, r6, #0
1000c6ba:	9801      	ldr	r0, [sp, #4]
1000c6bc:	1c2a      	adds	r2, r5, #0
1000c6be:	4b43      	ldr	r3, [pc, #268]	; (1000c7cc <at_ble_event_get+0x6c8>)
1000c6c0:	4798      	blx	r3
1000c6c2:	2630      	movs	r6, #48	; 0x30
1000c6c4:	e013      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c6c6:	1c31      	adds	r1, r6, #0
1000c6c8:	9801      	ldr	r0, [sp, #4]
1000c6ca:	1c2a      	adds	r2, r5, #0
1000c6cc:	4b40      	ldr	r3, [pc, #256]	; (1000c7d0 <at_ble_event_get+0x6cc>)
1000c6ce:	4798      	blx	r3
1000c6d0:	2634      	movs	r6, #52	; 0x34
1000c6d2:	e00c      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c6d4:	1c31      	adds	r1, r6, #0
1000c6d6:	9801      	ldr	r0, [sp, #4]
1000c6d8:	1c2a      	adds	r2, r5, #0
1000c6da:	4b3e      	ldr	r3, [pc, #248]	; (1000c7d4 <at_ble_event_get+0x6d0>)
1000c6dc:	4798      	blx	r3
1000c6de:	2635      	movs	r6, #53	; 0x35
1000c6e0:	e005      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c6e2:	1c31      	adds	r1, r6, #0
1000c6e4:	9801      	ldr	r0, [sp, #4]
1000c6e6:	1c2a      	adds	r2, r5, #0
1000c6e8:	4b3b      	ldr	r3, [pc, #236]	; (1000c7d8 <at_ble_event_get+0x6d4>)
1000c6ea:	4798      	blx	r3
1000c6ec:	2632      	movs	r6, #50	; 0x32
1000c6ee:	9b03      	ldr	r3, [sp, #12]
1000c6f0:	701e      	strb	r6, [r3, #0]
1000c6f2:	2300      	movs	r3, #0
1000c6f4:	9302      	str	r3, [sp, #8]
1000c6f6:	e57a      	b.n	1000c1ee <at_ble_event_get+0xea>
1000c6f8:	23d0      	movs	r3, #208	; 0xd0
1000c6fa:	e7fb      	b.n	1000c6f4 <at_ble_event_get+0x5f0>
1000c6fc:	9b01      	ldr	r3, [sp, #4]
1000c6fe:	9e02      	ldr	r6, [sp, #8]
1000c700:	2bbb      	cmp	r3, #187	; 0xbb
1000c702:	d000      	beq.n	1000c706 <at_ble_event_get+0x602>
1000c704:	e6e6      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c706:	e7f2      	b.n	1000c6ee <at_ble_event_get+0x5ea>
1000c708:	9b02      	ldr	r3, [sp, #8]
1000c70a:	2b00      	cmp	r3, #0
1000c70c:	d000      	beq.n	1000c710 <at_ble_event_get+0x60c>
1000c70e:	e56e      	b.n	1000c1ee <at_ble_event_get+0xea>
1000c710:	e6e0      	b.n	1000c4d4 <at_ble_event_get+0x3d0>
1000c712:	9802      	ldr	r0, [sp, #8]
1000c714:	b007      	add	sp, #28
1000c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c718:	00000e22 	.word	0x00000e22
1000c71c:	00000e25 	.word	0x00000e25
1000c720:	00001b05 	.word	0x00001b05
1000c724:	00001b01 	.word	0x00001b01
1000c728:	00001b03 	.word	0x00001b03
1000c72c:	00001b06 	.word	0x00001b06
1000c730:	00001b08 	.word	0x00001b08
1000c734:	1000e2e5 	.word	0x1000e2e5
1000c738:	1000e2c9 	.word	0x1000e2c9
1000c73c:	1000e565 	.word	0x1000e565
1000c740:	1000e655 	.word	0x1000e655
1000c744:	1000e761 	.word	0x1000e761
1000c748:	1000d65d 	.word	0x1000d65d
1000c74c:	1000dedd 	.word	0x1000dedd
1000c750:	1000df59 	.word	0x1000df59
1000c754:	1000d915 	.word	0x1000d915
1000c758:	1000d9b1 	.word	0x1000d9b1
1000c75c:	1000da89 	.word	0x1000da89
1000c760:	1000dd11 	.word	0x1000dd11
1000c764:	1000ddb1 	.word	0x1000ddb1
1000c768:	1000de69 	.word	0x1000de69
1000c76c:	1000de91 	.word	0x1000de91
1000c770:	1000dea7 	.word	0x1000dea7
1000c774:	1000df71 	.word	0x1000df71
1000c778:	1000df9f 	.word	0x1000df9f
1000c77c:	1000dfb5 	.word	0x1000dfb5
1000c780:	1000dfdf 	.word	0x1000dfdf
1000c784:	1000de0d 	.word	0x1000de0d
1000c788:	1000de37 	.word	0x1000de37
1000c78c:	1000d055 	.word	0x1000d055
1000c790:	1000d081 	.word	0x1000d081
1000c794:	1000e909 	.word	0x1000e909
1000c798:	1000e945 	.word	0x1000e945
1000c79c:	1000e98d 	.word	0x1000e98d
1000c7a0:	1000e9d1 	.word	0x1000e9d1
1000c7a4:	1000ea05 	.word	0x1000ea05
1000c7a8:	1000e8c9 	.word	0x1000e8c9
1000c7ac:	1000ead1 	.word	0x1000ead1
1000c7b0:	1000ea59 	.word	0x1000ea59
1000c7b4:	1000cfad 	.word	0x1000cfad
1000c7b8:	1000d019 	.word	0x1000d019
1000c7bc:	1000cfdd 	.word	0x1000cfdd
1000c7c0:	1000eae1 	.word	0x1000eae1
1000c7c4:	1000eb21 	.word	0x1000eb21
1000c7c8:	1000ed65 	.word	0x1000ed65
1000c7cc:	1000ed6f 	.word	0x1000ed6f
1000c7d0:	1000ed75 	.word	0x1000ed75
1000c7d4:	1000ed7b 	.word	0x1000ed7b
1000c7d8:	1000ed87 	.word	0x1000ed87

1000c7dc <internal_event_flush>:
1000c7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c7de:	490e      	ldr	r1, [pc, #56]	; (1000c818 <internal_event_flush+0x3c>)
1000c7e0:	2400      	movs	r4, #0
1000c7e2:	680b      	ldr	r3, [r1, #0]
1000c7e4:	1c0f      	adds	r7, r1, #0
1000c7e6:	1c1e      	adds	r6, r3, #0
1000c7e8:	4a0c      	ldr	r2, [pc, #48]	; (1000c81c <internal_event_flush+0x40>)
1000c7ea:	6815      	ldr	r5, [r2, #0]
1000c7ec:	9201      	str	r2, [sp, #4]
1000c7ee:	2b00      	cmp	r3, #0
1000c7f0:	d00e      	beq.n	1000c810 <internal_event_flush+0x34>
1000c7f2:	889a      	ldrh	r2, [r3, #4]
1000c7f4:	6819      	ldr	r1, [r3, #0]
1000c7f6:	4282      	cmp	r2, r0
1000c7f8:	d107      	bne.n	1000c80a <internal_event_flush+0x2e>
1000c7fa:	2c00      	cmp	r4, #0
1000c7fc:	d001      	beq.n	1000c802 <internal_event_flush+0x26>
1000c7fe:	6021      	str	r1, [r4, #0]
1000c800:	e000      	b.n	1000c804 <internal_event_flush+0x28>
1000c802:	1c0e      	adds	r6, r1, #0
1000c804:	601d      	str	r5, [r3, #0]
1000c806:	1c1d      	adds	r5, r3, #0
1000c808:	1c23      	adds	r3, r4, #0
1000c80a:	1c1c      	adds	r4, r3, #0
1000c80c:	1c0b      	adds	r3, r1, #0
1000c80e:	e7ee      	b.n	1000c7ee <internal_event_flush+0x12>
1000c810:	9b01      	ldr	r3, [sp, #4]
1000c812:	603e      	str	r6, [r7, #0]
1000c814:	601d      	str	r5, [r3, #0]
1000c816:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c818:	10016e20 	.word	0x10016e20
1000c81c:	10016e24 	.word	0x10016e24

1000c820 <internal_conn_flush>:
1000c820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c822:	4a12      	ldr	r2, [pc, #72]	; (1000c86c <internal_conn_flush+0x4c>)
1000c824:	9000      	str	r0, [sp, #0]
1000c826:	6813      	ldr	r3, [r2, #0]
1000c828:	4811      	ldr	r0, [pc, #68]	; (1000c870 <internal_conn_flush+0x50>)
1000c82a:	1c1f      	adds	r7, r3, #0
1000c82c:	2100      	movs	r1, #0
1000c82e:	4684      	mov	ip, r0
1000c830:	6804      	ldr	r4, [r0, #0]
1000c832:	9201      	str	r2, [sp, #4]
1000c834:	2b00      	cmp	r3, #0
1000c836:	d014      	beq.n	1000c862 <internal_conn_flush+0x42>
1000c838:	88d8      	ldrh	r0, [r3, #6]
1000c83a:	9a00      	ldr	r2, [sp, #0]
1000c83c:	681d      	ldr	r5, [r3, #0]
1000c83e:	0a06      	lsrs	r6, r0, #8
1000c840:	4296      	cmp	r6, r2
1000c842:	d10b      	bne.n	1000c85c <internal_conn_flush+0x3c>
1000c844:	26fd      	movs	r6, #253	; 0xfd
1000c846:	4006      	ands	r6, r0
1000c848:	2e0c      	cmp	r6, #12
1000c84a:	d107      	bne.n	1000c85c <internal_conn_flush+0x3c>
1000c84c:	2900      	cmp	r1, #0
1000c84e:	d001      	beq.n	1000c854 <internal_conn_flush+0x34>
1000c850:	600d      	str	r5, [r1, #0]
1000c852:	e000      	b.n	1000c856 <internal_conn_flush+0x36>
1000c854:	1c2f      	adds	r7, r5, #0
1000c856:	601c      	str	r4, [r3, #0]
1000c858:	1c1c      	adds	r4, r3, #0
1000c85a:	1c0b      	adds	r3, r1, #0
1000c85c:	1c19      	adds	r1, r3, #0
1000c85e:	1c2b      	adds	r3, r5, #0
1000c860:	e7e8      	b.n	1000c834 <internal_conn_flush+0x14>
1000c862:	9b01      	ldr	r3, [sp, #4]
1000c864:	601f      	str	r7, [r3, #0]
1000c866:	4663      	mov	r3, ip
1000c868:	601c      	str	r4, [r3, #0]
1000c86a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c86c:	10016e20 	.word	0x10016e20
1000c870:	10016e24 	.word	0x10016e24

1000c874 <at_ble_device_name_set>:
1000c874:	b530      	push	{r4, r5, lr}
1000c876:	23cf      	movs	r3, #207	; 0xcf
1000c878:	2800      	cmp	r0, #0
1000c87a:	d010      	beq.n	1000c89e <at_ble_device_name_set+0x2a>
1000c87c:	1e4a      	subs	r2, r1, #1
1000c87e:	2a1f      	cmp	r2, #31
1000c880:	d80d      	bhi.n	1000c89e <at_ble_device_name_set+0x2a>
1000c882:	4a08      	ldr	r2, [pc, #32]	; (1000c8a4 <at_ble_device_name_set+0x30>)
1000c884:	1c13      	adds	r3, r2, #0
1000c886:	33aa      	adds	r3, #170	; 0xaa
1000c888:	8019      	strh	r1, [r3, #0]
1000c88a:	2300      	movs	r3, #0
1000c88c:	1c1c      	adds	r4, r3, #0
1000c88e:	5cc5      	ldrb	r5, [r0, r3]
1000c890:	34ac      	adds	r4, #172	; 0xac
1000c892:	3301      	adds	r3, #1
1000c894:	5515      	strb	r5, [r2, r4]
1000c896:	b2dc      	uxtb	r4, r3
1000c898:	428c      	cmp	r4, r1
1000c89a:	d3f7      	bcc.n	1000c88c <at_ble_device_name_set+0x18>
1000c89c:	2300      	movs	r3, #0
1000c89e:	1c18      	adds	r0, r3, #0
1000c8a0:	bd30      	pop	{r4, r5, pc}
1000c8a2:	46c0      	nop			; (mov r8, r8)
1000c8a4:	10017be6 	.word	0x10017be6

1000c8a8 <at_ble_addr_get>:
1000c8a8:	b510      	push	{r4, lr}
1000c8aa:	1c04      	adds	r4, r0, #0
1000c8ac:	20cf      	movs	r0, #207	; 0xcf
1000c8ae:	2c00      	cmp	r4, #0
1000c8b0:	d006      	beq.n	1000c8c0 <at_ble_addr_get+0x18>
1000c8b2:	4b04      	ldr	r3, [pc, #16]	; (1000c8c4 <at_ble_addr_get+0x1c>)
1000c8b4:	38ce      	subs	r0, #206	; 0xce
1000c8b6:	1c21      	adds	r1, r4, #0
1000c8b8:	4798      	blx	r3
1000c8ba:	4b03      	ldr	r3, [pc, #12]	; (1000c8c8 <at_ble_addr_get+0x20>)
1000c8bc:	791b      	ldrb	r3, [r3, #4]
1000c8be:	7023      	strb	r3, [r4, #0]
1000c8c0:	bd10      	pop	{r4, pc}
1000c8c2:	46c0      	nop			; (mov r8, r8)
1000c8c4:	1000e179 	.word	0x1000e179
1000c8c8:	10017be6 	.word	0x10017be6

1000c8cc <at_ble_set_dev_config>:
1000c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8ce:	7906      	ldrb	r6, [r0, #4]
1000c8d0:	b089      	sub	sp, #36	; 0x24
1000c8d2:	25cf      	movs	r5, #207	; 0xcf
1000c8d4:	2e03      	cmp	r6, #3
1000c8d6:	d838      	bhi.n	1000c94a <at_ble_set_dev_config+0x7e>
1000c8d8:	7803      	ldrb	r3, [r0, #0]
1000c8da:	3511      	adds	r5, #17
1000c8dc:	2b0f      	cmp	r3, #15
1000c8de:	d834      	bhi.n	1000c94a <at_ble_set_dev_config+0x7e>
1000c8e0:	2380      	movs	r3, #128	; 0x80
1000c8e2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c8e4:	3d11      	subs	r5, #17
1000c8e6:	009b      	lsls	r3, r3, #2
1000c8e8:	429f      	cmp	r7, r3
1000c8ea:	d82e      	bhi.n	1000c94a <at_ble_set_dev_config+0x7e>
1000c8ec:	7fc5      	ldrb	r5, [r0, #31]
1000c8ee:	7f83      	ldrb	r3, [r0, #30]
1000c8f0:	01ad      	lsls	r5, r5, #6
1000c8f2:	015b      	lsls	r3, r3, #5
1000c8f4:	431d      	orrs	r5, r3
1000c8f6:	7ec3      	ldrb	r3, [r0, #27]
1000c8f8:	431d      	orrs	r5, r3
1000c8fa:	7f43      	ldrb	r3, [r0, #29]
1000c8fc:	011b      	lsls	r3, r3, #4
1000c8fe:	431d      	orrs	r5, r3
1000c900:	7f03      	ldrb	r3, [r0, #28]
1000c902:	009b      	lsls	r3, r3, #2
1000c904:	431d      	orrs	r5, r3
1000c906:	4b12      	ldr	r3, [pc, #72]	; (1000c950 <at_ble_set_dev_config+0x84>)
1000c908:	b2ed      	uxtb	r5, r5
1000c90a:	711e      	strb	r6, [r3, #4]
1000c90c:	7903      	ldrb	r3, [r0, #4]
1000c90e:	3b02      	subs	r3, #2
1000c910:	2b01      	cmp	r3, #1
1000c912:	d801      	bhi.n	1000c918 <at_ble_set_dev_config+0x4c>
1000c914:	2302      	movs	r3, #2
1000c916:	7103      	strb	r3, [r0, #4]
1000c918:	1c04      	adds	r4, r0, #0
1000c91a:	1c23      	adds	r3, r4, #0
1000c91c:	330b      	adds	r3, #11
1000c91e:	8861      	ldrh	r1, [r4, #2]
1000c920:	9307      	str	r3, [sp, #28]
1000c922:	7923      	ldrb	r3, [r4, #4]
1000c924:	7800      	ldrb	r0, [r0, #0]
1000c926:	9300      	str	r3, [sp, #0]
1000c928:	9501      	str	r5, [sp, #4]
1000c92a:	8c25      	ldrh	r5, [r4, #32]
1000c92c:	1d62      	adds	r2, r4, #5
1000c92e:	9502      	str	r5, [sp, #8]
1000c930:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c932:	9b07      	ldr	r3, [sp, #28]
1000c934:	9503      	str	r5, [sp, #12]
1000c936:	9704      	str	r7, [sp, #16]
1000c938:	4d06      	ldr	r5, [pc, #24]	; (1000c954 <at_ble_set_dev_config+0x88>)
1000c93a:	47a8      	blx	r5
1000c93c:	7126      	strb	r6, [r4, #4]
1000c93e:	1c05      	adds	r5, r0, #0
1000c940:	1c21      	adds	r1, r4, #0
1000c942:	4803      	ldr	r0, [pc, #12]	; (1000c950 <at_ble_set_dev_config+0x84>)
1000c944:	2226      	movs	r2, #38	; 0x26
1000c946:	4b04      	ldr	r3, [pc, #16]	; (1000c958 <at_ble_set_dev_config+0x8c>)
1000c948:	4798      	blx	r3
1000c94a:	1c28      	adds	r0, r5, #0
1000c94c:	b009      	add	sp, #36	; 0x24
1000c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c950:	10017be6 	.word	0x10017be6
1000c954:	1000e071 	.word	0x1000e071
1000c958:	100107e7 	.word	0x100107e7

1000c95c <at_ble_init>:
1000c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c95e:	b087      	sub	sp, #28
1000c960:	af03      	add	r7, sp, #12
1000c962:	4954      	ldr	r1, [pc, #336]	; (1000cab4 <at_ble_init+0x158>)
1000c964:	220b      	movs	r2, #11
1000c966:	4b54      	ldr	r3, [pc, #336]	; (1000cab8 <at_ble_init+0x15c>)
1000c968:	1c04      	adds	r4, r0, #0
1000c96a:	1c38      	adds	r0, r7, #0
1000c96c:	4798      	blx	r3
1000c96e:	2205      	movs	r2, #5
1000c970:	4b52      	ldr	r3, [pc, #328]	; (1000cabc <at_ble_init+0x160>)
1000c972:	2640      	movs	r6, #64	; 0x40
1000c974:	801a      	strh	r2, [r3, #0]
1000c976:	2300      	movs	r3, #0
1000c978:	4a51      	ldr	r2, [pc, #324]	; (1000cac0 <at_ble_init+0x164>)
1000c97a:	6013      	str	r3, [r2, #0]
1000c97c:	4a51      	ldr	r2, [pc, #324]	; (1000cac4 <at_ble_init+0x168>)
1000c97e:	7013      	strb	r3, [r2, #0]
1000c980:	4a51      	ldr	r2, [pc, #324]	; (1000cac8 <at_ble_init+0x16c>)
1000c982:	7013      	strb	r3, [r2, #0]
1000c984:	4b51      	ldr	r3, [pc, #324]	; (1000cacc <at_ble_init+0x170>)
1000c986:	4798      	blx	r3
1000c988:	4b51      	ldr	r3, [pc, #324]	; (1000cad0 <at_ble_init+0x174>)
1000c98a:	4798      	blx	r3
1000c98c:	4b51      	ldr	r3, [pc, #324]	; (1000cad4 <at_ble_init+0x178>)
1000c98e:	4798      	blx	r3
1000c990:	4b51      	ldr	r3, [pc, #324]	; (1000cad8 <at_ble_init+0x17c>)
1000c992:	4798      	blx	r3
1000c994:	2c00      	cmp	r4, #0
1000c996:	d100      	bne.n	1000c99a <at_ble_init+0x3e>
1000c998:	e089      	b.n	1000caae <at_ble_init+0x152>
1000c99a:	68a3      	ldr	r3, [r4, #8]
1000c99c:	2b00      	cmp	r3, #0
1000c99e:	d100      	bne.n	1000c9a2 <at_ble_init+0x46>
1000c9a0:	e085      	b.n	1000caae <at_ble_init+0x152>
1000c9a2:	6923      	ldr	r3, [r4, #16]
1000c9a4:	2b00      	cmp	r3, #0
1000c9a6:	d100      	bne.n	1000c9aa <at_ble_init+0x4e>
1000c9a8:	e081      	b.n	1000caae <at_ble_init+0x152>
1000c9aa:	6820      	ldr	r0, [r4, #0]
1000c9ac:	2800      	cmp	r0, #0
1000c9ae:	d102      	bne.n	1000c9b6 <at_ble_init+0x5a>
1000c9b0:	6863      	ldr	r3, [r4, #4]
1000c9b2:	2b00      	cmp	r3, #0
1000c9b4:	d17b      	bne.n	1000caae <at_ble_init+0x152>
1000c9b6:	4b49      	ldr	r3, [pc, #292]	; (1000cadc <at_ble_init+0x180>)
1000c9b8:	6861      	ldr	r1, [r4, #4]
1000c9ba:	4798      	blx	r3
1000c9bc:	4b48      	ldr	r3, [pc, #288]	; (1000cae0 <at_ble_init+0x184>)
1000c9be:	4798      	blx	r3
1000c9c0:	2801      	cmp	r0, #1
1000c9c2:	d901      	bls.n	1000c9c8 <at_ble_init+0x6c>
1000c9c4:	26e2      	movs	r6, #226	; 0xe2
1000c9c6:	e072      	b.n	1000caae <at_ble_init+0x152>
1000c9c8:	4846      	ldr	r0, [pc, #280]	; (1000cae4 <at_ble_init+0x188>)
1000c9ca:	4b47      	ldr	r3, [pc, #284]	; (1000cae8 <at_ble_init+0x18c>)
1000c9cc:	4798      	blx	r3
1000c9ce:	2800      	cmp	r0, #0
1000c9d0:	d1f8      	bne.n	1000c9c4 <at_ble_init+0x68>
1000c9d2:	1c20      	adds	r0, r4, #0
1000c9d4:	4b45      	ldr	r3, [pc, #276]	; (1000caec <at_ble_init+0x190>)
1000c9d6:	4798      	blx	r3
1000c9d8:	68e0      	ldr	r0, [r4, #12]
1000c9da:	68a1      	ldr	r1, [r4, #8]
1000c9dc:	4b44      	ldr	r3, [pc, #272]	; (1000caf0 <at_ble_init+0x194>)
1000c9de:	4798      	blx	r3
1000c9e0:	466b      	mov	r3, sp
1000c9e2:	2201      	movs	r2, #1
1000c9e4:	1cdc      	adds	r4, r3, #3
1000c9e6:	1c20      	adds	r0, r4, #0
1000c9e8:	a901      	add	r1, sp, #4
1000c9ea:	4252      	negs	r2, r2
1000c9ec:	4b41      	ldr	r3, [pc, #260]	; (1000caf4 <at_ble_init+0x198>)
1000c9ee:	4798      	blx	r3
1000c9f0:	2800      	cmp	r0, #0
1000c9f2:	d102      	bne.n	1000c9fa <at_ble_init+0x9e>
1000c9f4:	7823      	ldrb	r3, [r4, #0]
1000c9f6:	2b39      	cmp	r3, #57	; 0x39
1000c9f8:	d1f2      	bne.n	1000c9e0 <at_ble_init+0x84>
1000c9fa:	4b3f      	ldr	r3, [pc, #252]	; (1000caf8 <at_ble_init+0x19c>)
1000c9fc:	4798      	blx	r3
1000c9fe:	1e06      	subs	r6, r0, #0
1000ca00:	d155      	bne.n	1000caae <at_ble_init+0x152>
1000ca02:	1c03      	adds	r3, r0, #0
1000ca04:	2101      	movs	r1, #1
1000ca06:	4a3d      	ldr	r2, [pc, #244]	; (1000cafc <at_ble_init+0x1a0>)
1000ca08:	4249      	negs	r1, r1
1000ca0a:	189a      	adds	r2, r3, r2
1000ca0c:	3312      	adds	r3, #18
1000ca0e:	8151      	strh	r1, [r2, #10]
1000ca10:	2b90      	cmp	r3, #144	; 0x90
1000ca12:	d1f7      	bne.n	1000ca04 <at_ble_init+0xa8>
1000ca14:	4c3a      	ldr	r4, [pc, #232]	; (1000cb00 <at_ble_init+0x1a4>)
1000ca16:	3b81      	subs	r3, #129	; 0x81
1000ca18:	7023      	strb	r3, [r4, #0]
1000ca1a:	4b3a      	ldr	r3, [pc, #232]	; (1000cb04 <at_ble_init+0x1a8>)
1000ca1c:	4a3a      	ldr	r2, [pc, #232]	; (1000cb08 <at_ble_init+0x1ac>)
1000ca1e:	8063      	strh	r3, [r4, #2]
1000ca20:	2300      	movs	r3, #0
1000ca22:	7123      	strb	r3, [r4, #4]
1000ca24:	3301      	adds	r3, #1
1000ca26:	1e58      	subs	r0, r3, #1
1000ca28:	0119      	lsls	r1, r3, #4
1000ca2a:	4301      	orrs	r1, r0
1000ca2c:	3302      	adds	r3, #2
1000ca2e:	7011      	strb	r1, [r2, #0]
1000ca30:	3201      	adds	r2, #1
1000ca32:	2b21      	cmp	r3, #33	; 0x21
1000ca34:	d1f7      	bne.n	1000ca26 <at_ble_init+0xca>
1000ca36:	33e0      	adds	r3, #224	; 0xe0
1000ca38:	33ff      	adds	r3, #255	; 0xff
1000ca3a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ca3c:	1c23      	adds	r3, r4, #0
1000ca3e:	2500      	movs	r5, #0
1000ca40:	3373      	adds	r3, #115	; 0x73
1000ca42:	701d      	strb	r5, [r3, #0]
1000ca44:	1c23      	adds	r3, r4, #0
1000ca46:	3372      	adds	r3, #114	; 0x72
1000ca48:	701d      	strb	r5, [r3, #0]
1000ca4a:	1c23      	adds	r3, r4, #0
1000ca4c:	3376      	adds	r3, #118	; 0x76
1000ca4e:	701d      	strb	r5, [r3, #0]
1000ca50:	1c23      	adds	r3, r4, #0
1000ca52:	33cc      	adds	r3, #204	; 0xcc
1000ca54:	801d      	strh	r5, [r3, #0]
1000ca56:	1c22      	adds	r2, r4, #0
1000ca58:	23a0      	movs	r3, #160	; 0xa0
1000ca5a:	32d0      	adds	r2, #208	; 0xd0
1000ca5c:	005b      	lsls	r3, r3, #1
1000ca5e:	8013      	strh	r3, [r2, #0]
1000ca60:	1c22      	adds	r2, r4, #0
1000ca62:	32ce      	adds	r2, #206	; 0xce
1000ca64:	8013      	strh	r3, [r2, #0]
1000ca66:	1c23      	adds	r3, r4, #0
1000ca68:	33d2      	adds	r3, #210	; 0xd2
1000ca6a:	801d      	strh	r5, [r3, #0]
1000ca6c:	22fa      	movs	r2, #250	; 0xfa
1000ca6e:	1c23      	adds	r3, r4, #0
1000ca70:	0052      	lsls	r2, r2, #1
1000ca72:	33d4      	adds	r3, #212	; 0xd4
1000ca74:	801a      	strh	r2, [r3, #0]
1000ca76:	1c23      	adds	r3, r4, #0
1000ca78:	33d6      	adds	r3, #214	; 0xd6
1000ca7a:	701d      	strb	r5, [r3, #0]
1000ca7c:	1c20      	adds	r0, r4, #0
1000ca7e:	4b23      	ldr	r3, [pc, #140]	; (1000cb0c <at_ble_init+0x1b0>)
1000ca80:	76e5      	strb	r5, [r4, #27]
1000ca82:	7725      	strb	r5, [r4, #28]
1000ca84:	7765      	strb	r5, [r4, #29]
1000ca86:	77a5      	strb	r5, [r4, #30]
1000ca88:	77e5      	strb	r5, [r4, #31]
1000ca8a:	8425      	strh	r5, [r4, #32]
1000ca8c:	8465      	strh	r5, [r4, #34]	; 0x22
1000ca8e:	4798      	blx	r3
1000ca90:	1c23      	adds	r3, r4, #0
1000ca92:	2207      	movs	r2, #7
1000ca94:	3374      	adds	r3, #116	; 0x74
1000ca96:	701a      	strb	r2, [r3, #0]
1000ca98:	1c23      	adds	r3, r4, #0
1000ca9a:	3204      	adds	r2, #4
1000ca9c:	33aa      	adds	r3, #170	; 0xaa
1000ca9e:	801a      	strh	r2, [r3, #0]
1000caa0:	1c2b      	adds	r3, r5, #0
1000caa2:	5d7a      	ldrb	r2, [r7, r5]
1000caa4:	33ac      	adds	r3, #172	; 0xac
1000caa6:	3501      	adds	r5, #1
1000caa8:	54e2      	strb	r2, [r4, r3]
1000caaa:	2d0b      	cmp	r5, #11
1000caac:	d1f8      	bne.n	1000caa0 <at_ble_init+0x144>
1000caae:	1c30      	adds	r0, r6, #0
1000cab0:	b007      	add	sp, #28
1000cab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cab4:	10015048 	.word	0x10015048
1000cab8:	100107e7 	.word	0x100107e7
1000cabc:	10017b54 	.word	0x10017b54
1000cac0:	10016ed0 	.word	0x10016ed0
1000cac4:	10016e30 	.word	0x10016e30
1000cac8:	1001534c 	.word	0x1001534c
1000cacc:	1000eb31 	.word	0x1000eb31
1000cad0:	1000cdad 	.word	0x1000cdad
1000cad4:	1000ce29 	.word	0x1000ce29
1000cad8:	1000d049 	.word	0x1000d049
1000cadc:	1000ce65 	.word	0x1000ce65
1000cae0:	1000b431 	.word	0x1000b431
1000cae4:	1000d391 	.word	0x1000d391
1000cae8:	1000b675 	.word	0x1000b675
1000caec:	1000d439 	.word	0x1000d439
1000caf0:	1000c049 	.word	0x1000c049
1000caf4:	1000c105 	.word	0x1000c105
1000caf8:	1000e001 	.word	0x1000e001
1000cafc:	10017b56 	.word	0x10017b56
1000cb00:	10017be6 	.word	0x10017be6
1000cb04:	00003a98 	.word	0x00003a98
1000cb08:	10017bf1 	.word	0x10017bf1
1000cb0c:	1000c8cd 	.word	0x1000c8cd

1000cb10 <at_ble_addr_set>:
1000cb10:	b538      	push	{r3, r4, r5, lr}
1000cb12:	1c45      	adds	r5, r0, #1
1000cb14:	1c03      	adds	r3, r0, #0
1000cb16:	20cf      	movs	r0, #207	; 0xcf
1000cb18:	2d00      	cmp	r5, #0
1000cb1a:	d018      	beq.n	1000cb4e <at_ble_addr_set+0x3e>
1000cb1c:	781a      	ldrb	r2, [r3, #0]
1000cb1e:	2a03      	cmp	r2, #3
1000cb20:	d815      	bhi.n	1000cb4e <at_ble_addr_set+0x3e>
1000cb22:	2a01      	cmp	r2, #1
1000cb24:	d102      	bne.n	1000cb2c <at_ble_addr_set+0x1c>
1000cb26:	785a      	ldrb	r2, [r3, #1]
1000cb28:	2a00      	cmp	r2, #0
1000cb2a:	d010      	beq.n	1000cb4e <at_ble_addr_set+0x3e>
1000cb2c:	1c1c      	adds	r4, r3, #0
1000cb2e:	1c29      	adds	r1, r5, #0
1000cb30:	2206      	movs	r2, #6
1000cb32:	4b07      	ldr	r3, [pc, #28]	; (1000cb50 <at_ble_addr_set+0x40>)
1000cb34:	4807      	ldr	r0, [pc, #28]	; (1000cb54 <at_ble_addr_set+0x44>)
1000cb36:	4798      	blx	r3
1000cb38:	7823      	ldrb	r3, [r4, #0]
1000cb3a:	4807      	ldr	r0, [pc, #28]	; (1000cb58 <at_ble_addr_set+0x48>)
1000cb3c:	7103      	strb	r3, [r0, #4]
1000cb3e:	4b07      	ldr	r3, [pc, #28]	; (1000cb5c <at_ble_addr_set+0x4c>)
1000cb40:	4798      	blx	r3
1000cb42:	7823      	ldrb	r3, [r4, #0]
1000cb44:	2b00      	cmp	r3, #0
1000cb46:	d102      	bne.n	1000cb4e <at_ble_addr_set+0x3e>
1000cb48:	1c28      	adds	r0, r5, #0
1000cb4a:	4b05      	ldr	r3, [pc, #20]	; (1000cb60 <at_ble_addr_set+0x50>)
1000cb4c:	4798      	blx	r3
1000cb4e:	bd38      	pop	{r3, r4, r5, pc}
1000cb50:	100107e7 	.word	0x100107e7
1000cb54:	10017beb 	.word	0x10017beb
1000cb58:	10017be6 	.word	0x10017be6
1000cb5c:	1000c8cd 	.word	0x1000c8cd
1000cb60:	1000d4bd 	.word	0x1000d4bd

1000cb64 <at_ble_adv_data_set>:
1000cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cb66:	4684      	mov	ip, r0
1000cb68:	1c0f      	adds	r7, r1, #0
1000cb6a:	1c16      	adds	r6, r2, #0
1000cb6c:	1c1c      	adds	r4, r3, #0
1000cb6e:	2800      	cmp	r0, #0
1000cb70:	d102      	bne.n	1000cb78 <at_ble_adv_data_set+0x14>
1000cb72:	20e2      	movs	r0, #226	; 0xe2
1000cb74:	2a00      	cmp	r2, #0
1000cb76:	d02b      	beq.n	1000cbd0 <at_ble_adv_data_set+0x6c>
1000cb78:	20cf      	movs	r0, #207	; 0xcf
1000cb7a:	2f1f      	cmp	r7, #31
1000cb7c:	d828      	bhi.n	1000cbd0 <at_ble_adv_data_set+0x6c>
1000cb7e:	2c1f      	cmp	r4, #31
1000cb80:	d826      	bhi.n	1000cbd0 <at_ble_adv_data_set+0x6c>
1000cb82:	4663      	mov	r3, ip
1000cb84:	2b00      	cmp	r3, #0
1000cb86:	d00e      	beq.n	1000cba6 <at_ble_adv_data_set+0x42>
1000cb88:	4812      	ldr	r0, [pc, #72]	; (1000cbd4 <at_ble_adv_data_set+0x70>)
1000cb8a:	4d13      	ldr	r5, [pc, #76]	; (1000cbd8 <at_ble_adv_data_set+0x74>)
1000cb8c:	2f00      	cmp	r7, #0
1000cb8e:	d104      	bne.n	1000cb9a <at_ble_adv_data_set+0x36>
1000cb90:	1c39      	adds	r1, r7, #0
1000cb92:	221f      	movs	r2, #31
1000cb94:	4b11      	ldr	r3, [pc, #68]	; (1000cbdc <at_ble_adv_data_set+0x78>)
1000cb96:	4798      	blx	r3
1000cb98:	e003      	b.n	1000cba2 <at_ble_adv_data_set+0x3e>
1000cb9a:	4661      	mov	r1, ip
1000cb9c:	1c3a      	adds	r2, r7, #0
1000cb9e:	4b10      	ldr	r3, [pc, #64]	; (1000cbe0 <at_ble_adv_data_set+0x7c>)
1000cba0:	4798      	blx	r3
1000cba2:	3572      	adds	r5, #114	; 0x72
1000cba4:	702f      	strb	r7, [r5, #0]
1000cba6:	1e30      	subs	r0, r6, #0
1000cba8:	d012      	beq.n	1000cbd0 <at_ble_adv_data_set+0x6c>
1000cbaa:	4d0b      	ldr	r5, [pc, #44]	; (1000cbd8 <at_ble_adv_data_set+0x74>)
1000cbac:	480d      	ldr	r0, [pc, #52]	; (1000cbe4 <at_ble_adv_data_set+0x80>)
1000cbae:	2c00      	cmp	r4, #0
1000cbb0:	d107      	bne.n	1000cbc2 <at_ble_adv_data_set+0x5e>
1000cbb2:	1c21      	adds	r1, r4, #0
1000cbb4:	221f      	movs	r2, #31
1000cbb6:	4b09      	ldr	r3, [pc, #36]	; (1000cbdc <at_ble_adv_data_set+0x78>)
1000cbb8:	3573      	adds	r5, #115	; 0x73
1000cbba:	4798      	blx	r3
1000cbbc:	702c      	strb	r4, [r5, #0]
1000cbbe:	1c20      	adds	r0, r4, #0
1000cbc0:	e006      	b.n	1000cbd0 <at_ble_adv_data_set+0x6c>
1000cbc2:	1c31      	adds	r1, r6, #0
1000cbc4:	1c22      	adds	r2, r4, #0
1000cbc6:	4b06      	ldr	r3, [pc, #24]	; (1000cbe0 <at_ble_adv_data_set+0x7c>)
1000cbc8:	4798      	blx	r3
1000cbca:	2000      	movs	r0, #0
1000cbcc:	3573      	adds	r5, #115	; 0x73
1000cbce:	702c      	strb	r4, [r5, #0]
1000cbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cbd2:	46c0      	nop			; (mov r8, r8)
1000cbd4:	10017c1a 	.word	0x10017c1a
1000cbd8:	10017be6 	.word	0x10017be6
1000cbdc:	100107f9 	.word	0x100107f9
1000cbe0:	100107e7 	.word	0x100107e7
1000cbe4:	10017c39 	.word	0x10017c39

1000cbe8 <at_ble_adv_start>:
1000cbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cbea:	b091      	sub	sp, #68	; 0x44
1000cbec:	1c1f      	adds	r7, r3, #0
1000cbee:	ab16      	add	r3, sp, #88	; 0x58
1000cbf0:	881d      	ldrh	r5, [r3, #0]
1000cbf2:	ab17      	add	r3, sp, #92	; 0x5c
1000cbf4:	881b      	ldrh	r3, [r3, #0]
1000cbf6:	910d      	str	r1, [sp, #52]	; 0x34
1000cbf8:	930e      	str	r3, [sp, #56]	; 0x38
1000cbfa:	ab18      	add	r3, sp, #96	; 0x60
1000cbfc:	781b      	ldrb	r3, [r3, #0]
1000cbfe:	1c04      	adds	r4, r0, #0
1000cc00:	930f      	str	r3, [sp, #60]	; 0x3c
1000cc02:	4b42      	ldr	r3, [pc, #264]	; (1000cd0c <at_ble_adv_start+0x124>)
1000cc04:	1c16      	adds	r6, r2, #0
1000cc06:	3373      	adds	r3, #115	; 0x73
1000cc08:	781b      	ldrb	r3, [r3, #0]
1000cc0a:	20cf      	movs	r0, #207	; 0xcf
1000cc0c:	930c      	str	r3, [sp, #48]	; 0x30
1000cc0e:	2c01      	cmp	r4, #1
1000cc10:	d103      	bne.n	1000cc1a <at_ble_adv_start+0x32>
1000cc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000cc14:	2b00      	cmp	r3, #0
1000cc16:	d176      	bne.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc18:	e024      	b.n	1000cc64 <at_ble_adv_start+0x7c>
1000cc1a:	2c04      	cmp	r4, #4
1000cc1c:	d873      	bhi.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc1e:	2380      	movs	r3, #128	; 0x80
1000cc20:	01db      	lsls	r3, r3, #7
1000cc22:	429d      	cmp	r5, r3
1000cc24:	d86f      	bhi.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc26:	2c00      	cmp	r4, #0
1000cc28:	d102      	bne.n	1000cc30 <at_ble_adv_start+0x48>
1000cc2a:	2d1f      	cmp	r5, #31
1000cc2c:	d96b      	bls.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc2e:	e003      	b.n	1000cc38 <at_ble_adv_start+0x50>
1000cc30:	2d9f      	cmp	r5, #159	; 0x9f
1000cc32:	d801      	bhi.n	1000cc38 <at_ble_adv_start+0x50>
1000cc34:	2c01      	cmp	r4, #1
1000cc36:	d166      	bne.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc38:	2f00      	cmp	r7, #0
1000cc3a:	d009      	beq.n	1000cc50 <at_ble_adv_start+0x68>
1000cc3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000cc3e:	20cf      	movs	r0, #207	; 0xcf
1000cc40:	3b01      	subs	r3, #1
1000cc42:	2b01      	cmp	r3, #1
1000cc44:	d95f      	bls.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc46:	2c01      	cmp	r4, #1
1000cc48:	d102      	bne.n	1000cc50 <at_ble_adv_start+0x68>
1000cc4a:	2d00      	cmp	r5, #0
1000cc4c:	d100      	bne.n	1000cc50 <at_ble_adv_start+0x68>
1000cc4e:	3520      	adds	r5, #32
1000cc50:	4b2f      	ldr	r3, [pc, #188]	; (1000cd10 <at_ble_adv_start+0x128>)
1000cc52:	4798      	blx	r3
1000cc54:	1c01      	adds	r1, r0, #0
1000cc56:	2e00      	cmp	r6, #0
1000cc58:	d043      	beq.n	1000cce2 <at_ble_adv_start+0xfa>
1000cc5a:	7833      	ldrb	r3, [r6, #0]
1000cc5c:	1e60      	subs	r0, r4, #1
1000cc5e:	2b00      	cmp	r3, #0
1000cc60:	d109      	bne.n	1000cc76 <at_ble_adv_start+0x8e>
1000cc62:	e03b      	b.n	1000ccdc <at_ble_adv_start+0xf4>
1000cc64:	2380      	movs	r3, #128	; 0x80
1000cc66:	01db      	lsls	r3, r3, #7
1000cc68:	429d      	cmp	r5, r3
1000cc6a:	d84c      	bhi.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc6c:	2e00      	cmp	r6, #0
1000cc6e:	d04a      	beq.n	1000cd06 <at_ble_adv_start+0x11e>
1000cc70:	2f00      	cmp	r7, #0
1000cc72:	d1e3      	bne.n	1000cc3c <at_ble_adv_start+0x54>
1000cc74:	e02b      	b.n	1000ccce <at_ble_adv_start+0xe6>
1000cc76:	2301      	movs	r3, #1
1000cc78:	2803      	cmp	r0, #3
1000cc7a:	d93a      	bls.n	1000ccf2 <at_ble_adv_start+0x10a>
1000cc7c:	200d      	movs	r0, #13
1000cc7e:	1c72      	adds	r2, r6, #1
1000cc80:	e002      	b.n	1000cc88 <at_ble_adv_start+0xa0>
1000cc82:	200e      	movs	r0, #14
1000cc84:	1e32      	subs	r2, r6, #0
1000cc86:	d1fa      	bne.n	1000cc7e <at_ble_adv_start+0x96>
1000cc88:	4c20      	ldr	r4, [pc, #128]	; (1000cd0c <at_ble_adv_start+0x124>)
1000cc8a:	3474      	adds	r4, #116	; 0x74
1000cc8c:	7826      	ldrb	r6, [r4, #0]
1000cc8e:	2407      	movs	r4, #7
1000cc90:	2e00      	cmp	r6, #0
1000cc92:	d000      	beq.n	1000cc96 <at_ble_adv_start+0xae>
1000cc94:	1c34      	adds	r4, r6, #0
1000cc96:	9200      	str	r2, [sp, #0]
1000cc98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000cc9a:	9403      	str	r4, [sp, #12]
1000cc9c:	9204      	str	r2, [sp, #16]
1000cc9e:	4a1b      	ldr	r2, [pc, #108]	; (1000cd0c <at_ble_adv_start+0x124>)
1000cca0:	9501      	str	r5, [sp, #4]
1000cca2:	9502      	str	r5, [sp, #8]
1000cca4:	9705      	str	r7, [sp, #20]
1000cca6:	3272      	adds	r2, #114	; 0x72
1000cca8:	7812      	ldrb	r2, [r2, #0]
1000ccaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000ccac:	9206      	str	r2, [sp, #24]
1000ccae:	4a19      	ldr	r2, [pc, #100]	; (1000cd14 <at_ble_adv_start+0x12c>)
1000ccb0:	9207      	str	r2, [sp, #28]
1000ccb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000ccb4:	9208      	str	r2, [sp, #32]
1000ccb6:	4a18      	ldr	r2, [pc, #96]	; (1000cd18 <at_ble_adv_start+0x130>)
1000ccb8:	9209      	str	r2, [sp, #36]	; 0x24
1000ccba:	2264      	movs	r2, #100	; 0x64
1000ccbc:	4362      	muls	r2, r4
1000ccbe:	b292      	uxth	r2, r2
1000ccc0:	920a      	str	r2, [sp, #40]	; 0x28
1000ccc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000ccc4:	4c15      	ldr	r4, [pc, #84]	; (1000cd1c <at_ble_adv_start+0x134>)
1000ccc6:	920b      	str	r2, [sp, #44]	; 0x2c
1000ccc8:	4a15      	ldr	r2, [pc, #84]	; (1000cd20 <at_ble_adv_start+0x138>)
1000ccca:	47a0      	blx	r4
1000cccc:	e01b      	b.n	1000cd06 <at_ble_adv_start+0x11e>
1000ccce:	2d00      	cmp	r5, #0
1000ccd0:	d1be      	bne.n	1000cc50 <at_ble_adv_start+0x68>
1000ccd2:	4b0f      	ldr	r3, [pc, #60]	; (1000cd10 <at_ble_adv_start+0x128>)
1000ccd4:	4798      	blx	r3
1000ccd6:	2520      	movs	r5, #32
1000ccd8:	1c01      	adds	r1, r0, #0
1000ccda:	e7be      	b.n	1000cc5a <at_ble_adv_start+0x72>
1000ccdc:	2803      	cmp	r0, #3
1000ccde:	d8cd      	bhi.n	1000cc7c <at_ble_adv_start+0x94>
1000cce0:	e006      	b.n	1000ccf0 <at_ble_adv_start+0x108>
1000cce2:	1e60      	subs	r0, r4, #1
1000cce4:	2803      	cmp	r0, #3
1000cce6:	d903      	bls.n	1000ccf0 <at_ble_adv_start+0x108>
1000cce8:	1c33      	adds	r3, r6, #0
1000ccea:	200d      	movs	r0, #13
1000ccec:	1c32      	adds	r2, r6, #0
1000ccee:	e7cb      	b.n	1000cc88 <at_ble_adv_start+0xa0>
1000ccf0:	2300      	movs	r3, #0
1000ccf2:	f002 f84d 	bl	1000ed90 <__gnu_thumb1_case_sqi>
1000ccf6:	06c6      	.short	0x06c6
1000ccf8:	0204      	.short	0x0204
1000ccfa:	200f      	movs	r0, #15
1000ccfc:	e7c2      	b.n	1000cc84 <at_ble_adv_start+0x9c>
1000ccfe:	2200      	movs	r2, #0
1000cd00:	920c      	str	r2, [sp, #48]	; 0x30
1000cd02:	200c      	movs	r0, #12
1000cd04:	e7be      	b.n	1000cc84 <at_ble_adv_start+0x9c>
1000cd06:	b011      	add	sp, #68	; 0x44
1000cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd0a:	46c0      	nop			; (mov r8, r8)
1000cd0c:	10017be6 	.word	0x10017be6
1000cd10:	1000e54d 	.word	0x1000e54d
1000cd14:	10017c1a 	.word	0x10017c1a
1000cd18:	10017c39 	.word	0x10017c39
1000cd1c:	1000e42d 	.word	0x1000e42d
1000cd20:	00003a98 	.word	0x00003a98

1000cd24 <at_ble_scan_stop>:
1000cd24:	b510      	push	{r4, lr}
1000cd26:	4b05      	ldr	r3, [pc, #20]	; (1000cd3c <at_ble_scan_stop+0x18>)
1000cd28:	4798      	blx	r3
1000cd2a:	1e04      	subs	r4, r0, #0
1000cd2c:	d103      	bne.n	1000cd36 <at_ble_scan_stop+0x12>
1000cd2e:	20d1      	movs	r0, #209	; 0xd1
1000cd30:	4b03      	ldr	r3, [pc, #12]	; (1000cd40 <at_ble_scan_stop+0x1c>)
1000cd32:	0100      	lsls	r0, r0, #4
1000cd34:	4798      	blx	r3
1000cd36:	1c20      	adds	r0, r4, #0
1000cd38:	bd10      	pop	{r4, pc}
1000cd3a:	46c0      	nop			; (mov r8, r8)
1000cd3c:	1000e259 	.word	0x1000e259
1000cd40:	1000c7dd 	.word	0x1000c7dd

1000cd44 <at_ble_disconnect>:
1000cd44:	b538      	push	{r3, r4, r5, lr}
1000cd46:	1c04      	adds	r4, r0, #0
1000cd48:	4b04      	ldr	r3, [pc, #16]	; (1000cd5c <at_ble_disconnect+0x18>)
1000cd4a:	1c08      	adds	r0, r1, #0
1000cd4c:	1c21      	adds	r1, r4, #0
1000cd4e:	4798      	blx	r3
1000cd50:	1c05      	adds	r5, r0, #0
1000cd52:	4b03      	ldr	r3, [pc, #12]	; (1000cd60 <at_ble_disconnect+0x1c>)
1000cd54:	1c20      	adds	r0, r4, #0
1000cd56:	4798      	blx	r3
1000cd58:	1c28      	adds	r0, r5, #0
1000cd5a:	bd38      	pop	{r3, r4, r5, pc}
1000cd5c:	1000d8d1 	.word	0x1000d8d1
1000cd60:	1000c821 	.word	0x1000c821

1000cd64 <at_ble_conn_update_reply>:
1000cd64:	b510      	push	{r4, lr}
1000cd66:	4c01      	ldr	r4, [pc, #4]	; (1000cd6c <at_ble_conn_update_reply+0x8>)
1000cd68:	47a0      	blx	r4
1000cd6a:	bd10      	pop	{r4, pc}
1000cd6c:	1000ddc1 	.word	0x1000ddc1

1000cd70 <at_ble_random_address_resolve>:
1000cd70:	b510      	push	{r4, lr}
1000cd72:	23cf      	movs	r3, #207	; 0xcf
1000cd74:	2800      	cmp	r0, #0
1000cd76:	d00a      	beq.n	1000cd8e <at_ble_random_address_resolve+0x1e>
1000cd78:	2900      	cmp	r1, #0
1000cd7a:	d008      	beq.n	1000cd8e <at_ble_random_address_resolve+0x1e>
1000cd7c:	2a00      	cmp	r2, #0
1000cd7e:	d006      	beq.n	1000cd8e <at_ble_random_address_resolve+0x1e>
1000cd80:	780c      	ldrb	r4, [r1, #0]
1000cd82:	2c02      	cmp	r4, #2
1000cd84:	d103      	bne.n	1000cd8e <at_ble_random_address_resolve+0x1e>
1000cd86:	4b03      	ldr	r3, [pc, #12]	; (1000cd94 <at_ble_random_address_resolve+0x24>)
1000cd88:	3101      	adds	r1, #1
1000cd8a:	4798      	blx	r3
1000cd8c:	2300      	movs	r3, #0
1000cd8e:	1c18      	adds	r0, r3, #0
1000cd90:	bd10      	pop	{r4, pc}
1000cd92:	46c0      	nop			; (mov r8, r8)
1000cd94:	1000e5ed 	.word	0x1000e5ed

1000cd98 <at_ble_uuid_len2type>:
1000cd98:	1e83      	subs	r3, r0, #2
1000cd9a:	b2db      	uxtb	r3, r3
1000cd9c:	2003      	movs	r0, #3
1000cd9e:	2b0e      	cmp	r3, #14
1000cda0:	d801      	bhi.n	1000cda6 <at_ble_uuid_len2type+0xe>
1000cda2:	4a01      	ldr	r2, [pc, #4]	; (1000cda8 <at_ble_uuid_len2type+0x10>)
1000cda4:	5cd0      	ldrb	r0, [r2, r3]
1000cda6:	4770      	bx	lr
1000cda8:	10015053 	.word	0x10015053

1000cdac <init_gatt_client_module>:
1000cdac:	2200      	movs	r2, #0
1000cdae:	4b01      	ldr	r3, [pc, #4]	; (1000cdb4 <init_gatt_client_module+0x8>)
1000cdb0:	801a      	strh	r2, [r3, #0]
1000cdb2:	4770      	bx	lr
1000cdb4:	10016e28 	.word	0x10016e28

1000cdb8 <db_searchATT>:
1000cdb8:	b570      	push	{r4, r5, r6, lr}
1000cdba:	1c05      	adds	r5, r0, #0
1000cdbc:	2400      	movs	r4, #0
1000cdbe:	4b0c      	ldr	r3, [pc, #48]	; (1000cdf0 <db_searchATT+0x38>)
1000cdc0:	6819      	ldr	r1, [r3, #0]
1000cdc2:	4b0c      	ldr	r3, [pc, #48]	; (1000cdf4 <db_searchATT+0x3c>)
1000cdc4:	681e      	ldr	r6, [r3, #0]
1000cdc6:	428c      	cmp	r4, r1
1000cdc8:	dc10      	bgt.n	1000cdec <db_searchATT+0x34>
1000cdca:	200c      	movs	r0, #12
1000cdcc:	1863      	adds	r3, r4, r1
1000cdce:	0fda      	lsrs	r2, r3, #31
1000cdd0:	18d3      	adds	r3, r2, r3
1000cdd2:	1c02      	adds	r2, r0, #0
1000cdd4:	105b      	asrs	r3, r3, #1
1000cdd6:	435a      	muls	r2, r3
1000cdd8:	18b0      	adds	r0, r6, r2
1000cdda:	8802      	ldrh	r2, [r0, #0]
1000cddc:	42aa      	cmp	r2, r5
1000cdde:	d201      	bcs.n	1000cde4 <db_searchATT+0x2c>
1000cde0:	1e59      	subs	r1, r3, #1
1000cde2:	e7f0      	b.n	1000cdc6 <db_searchATT+0xe>
1000cde4:	42aa      	cmp	r2, r5
1000cde6:	d902      	bls.n	1000cdee <db_searchATT+0x36>
1000cde8:	1c5c      	adds	r4, r3, #1
1000cdea:	e7ec      	b.n	1000cdc6 <db_searchATT+0xe>
1000cdec:	2000      	movs	r0, #0
1000cdee:	bd70      	pop	{r4, r5, r6, pc}
1000cdf0:	10016e3c 	.word	0x10016e3c
1000cdf4:	10016e34 	.word	0x10016e34

1000cdf8 <at_ble_read_authorize_reply.part.1>:
1000cdf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000cdfa:	4b09      	ldr	r3, [pc, #36]	; (1000ce20 <at_ble_read_authorize_reply.part.1+0x28>)
1000cdfc:	1c05      	adds	r5, r0, #0
1000cdfe:	1c08      	adds	r0, r1, #0
1000ce00:	1c0c      	adds	r4, r1, #0
1000ce02:	4798      	blx	r3
1000ce04:	2800      	cmp	r0, #0
1000ce06:	d009      	beq.n	1000ce1c <at_ble_read_authorize_reply.part.1+0x24>
1000ce08:	6882      	ldr	r2, [r0, #8]
1000ce0a:	2a00      	cmp	r2, #0
1000ce0c:	d006      	beq.n	1000ce1c <at_ble_read_authorize_reply.part.1+0x24>
1000ce0e:	8883      	ldrh	r3, [r0, #4]
1000ce10:	1c29      	adds	r1, r5, #0
1000ce12:	9200      	str	r2, [sp, #0]
1000ce14:	1c20      	adds	r0, r4, #0
1000ce16:	2200      	movs	r2, #0
1000ce18:	4c02      	ldr	r4, [pc, #8]	; (1000ce24 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ce1a:	47a0      	blx	r4
1000ce1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ce1e:	46c0      	nop			; (mov r8, r8)
1000ce20:	1000cdb9 	.word	0x1000cdb9
1000ce24:	1000e7d1 	.word	0x1000e7d1

1000ce28 <initi_gatt_server_module>:
1000ce28:	2300      	movs	r3, #0
1000ce2a:	4a07      	ldr	r2, [pc, #28]	; (1000ce48 <initi_gatt_server_module+0x20>)
1000ce2c:	7013      	strb	r3, [r2, #0]
1000ce2e:	4a07      	ldr	r2, [pc, #28]	; (1000ce4c <initi_gatt_server_module+0x24>)
1000ce30:	6013      	str	r3, [r2, #0]
1000ce32:	4a07      	ldr	r2, [pc, #28]	; (1000ce50 <initi_gatt_server_module+0x28>)
1000ce34:	6013      	str	r3, [r2, #0]
1000ce36:	4a07      	ldr	r2, [pc, #28]	; (1000ce54 <initi_gatt_server_module+0x2c>)
1000ce38:	6013      	str	r3, [r2, #0]
1000ce3a:	4a07      	ldr	r2, [pc, #28]	; (1000ce58 <initi_gatt_server_module+0x30>)
1000ce3c:	6013      	str	r3, [r2, #0]
1000ce3e:	4a07      	ldr	r2, [pc, #28]	; (1000ce5c <initi_gatt_server_module+0x34>)
1000ce40:	6013      	str	r3, [r2, #0]
1000ce42:	4a07      	ldr	r2, [pc, #28]	; (1000ce60 <initi_gatt_server_module+0x38>)
1000ce44:	6013      	str	r3, [r2, #0]
1000ce46:	4770      	bx	lr
1000ce48:	10016e30 	.word	0x10016e30
1000ce4c:	10016e40 	.word	0x10016e40
1000ce50:	10016e3c 	.word	0x10016e3c
1000ce54:	10016e2c 	.word	0x10016e2c
1000ce58:	10016e38 	.word	0x10016e38
1000ce5c:	10016e34 	.word	0x10016e34
1000ce60:	10016e44 	.word	0x10016e44

1000ce64 <db_init>:
1000ce64:	4b0a      	ldr	r3, [pc, #40]	; (1000ce90 <db_init+0x2c>)
1000ce66:	4a0b      	ldr	r2, [pc, #44]	; (1000ce94 <db_init+0x30>)
1000ce68:	6018      	str	r0, [r3, #0]
1000ce6a:	084b      	lsrs	r3, r1, #1
1000ce6c:	6013      	str	r3, [r2, #0]
1000ce6e:	4a0a      	ldr	r2, [pc, #40]	; (1000ce98 <db_init+0x34>)
1000ce70:	18c3      	adds	r3, r0, r3
1000ce72:	6013      	str	r3, [r2, #0]
1000ce74:	4a09      	ldr	r2, [pc, #36]	; (1000ce9c <db_init+0x38>)
1000ce76:	1841      	adds	r1, r0, r1
1000ce78:	6013      	str	r3, [r2, #0]
1000ce7a:	2303      	movs	r3, #3
1000ce7c:	2200      	movs	r2, #0
1000ce7e:	3103      	adds	r1, #3
1000ce80:	4399      	bics	r1, r3
1000ce82:	4b07      	ldr	r3, [pc, #28]	; (1000cea0 <db_init+0x3c>)
1000ce84:	3904      	subs	r1, #4
1000ce86:	6019      	str	r1, [r3, #0]
1000ce88:	4b06      	ldr	r3, [pc, #24]	; (1000cea4 <db_init+0x40>)
1000ce8a:	601a      	str	r2, [r3, #0]
1000ce8c:	4770      	bx	lr
1000ce8e:	46c0      	nop			; (mov r8, r8)
1000ce90:	10016e44 	.word	0x10016e44
1000ce94:	10016e40 	.word	0x10016e40
1000ce98:	10016e2c 	.word	0x10016e2c
1000ce9c:	10016e38 	.word	0x10016e38
1000cea0:	10016e34 	.word	0x10016e34
1000cea4:	10016e3c 	.word	0x10016e3c

1000cea8 <at_ble_characteristic_value_set>:
1000cea8:	b570      	push	{r4, r5, r6, lr}
1000ceaa:	4b0b      	ldr	r3, [pc, #44]	; (1000ced8 <at_ble_characteristic_value_set+0x30>)
1000ceac:	1c06      	adds	r6, r0, #0
1000ceae:	1c0c      	adds	r4, r1, #0
1000ceb0:	1c15      	adds	r5, r2, #0
1000ceb2:	4798      	blx	r3
1000ceb4:	2800      	cmp	r0, #0
1000ceb6:	d008      	beq.n	1000ceca <at_ble_characteristic_value_set+0x22>
1000ceb8:	6880      	ldr	r0, [r0, #8]
1000ceba:	2800      	cmp	r0, #0
1000cebc:	d005      	beq.n	1000ceca <at_ble_characteristic_value_set+0x22>
1000cebe:	1c21      	adds	r1, r4, #0
1000cec0:	1c2a      	adds	r2, r5, #0
1000cec2:	4b06      	ldr	r3, [pc, #24]	; (1000cedc <at_ble_characteristic_value_set+0x34>)
1000cec4:	4798      	blx	r3
1000cec6:	2000      	movs	r0, #0
1000cec8:	e004      	b.n	1000ced4 <at_ble_characteristic_value_set+0x2c>
1000ceca:	1c30      	adds	r0, r6, #0
1000cecc:	1c29      	adds	r1, r5, #0
1000cece:	1c22      	adds	r2, r4, #0
1000ced0:	4b03      	ldr	r3, [pc, #12]	; (1000cee0 <at_ble_characteristic_value_set+0x38>)
1000ced2:	4798      	blx	r3
1000ced4:	bd70      	pop	{r4, r5, r6, pc}
1000ced6:	46c0      	nop			; (mov r8, r8)
1000ced8:	1000cdb9 	.word	0x1000cdb9
1000cedc:	100107e7 	.word	0x100107e7
1000cee0:	1000eb45 	.word	0x1000eb45

1000cee4 <at_ble_characteristic_value_get>:
1000cee4:	b570      	push	{r4, r5, r6, lr}
1000cee6:	4b0c      	ldr	r3, [pc, #48]	; (1000cf18 <at_ble_characteristic_value_get+0x34>)
1000cee8:	1c06      	adds	r6, r0, #0
1000ceea:	1c0c      	adds	r4, r1, #0
1000ceec:	1c15      	adds	r5, r2, #0
1000ceee:	4798      	blx	r3
1000cef0:	2800      	cmp	r0, #0
1000cef2:	d00b      	beq.n	1000cf0c <at_ble_characteristic_value_get+0x28>
1000cef4:	6883      	ldr	r3, [r0, #8]
1000cef6:	2b00      	cmp	r3, #0
1000cef8:	d008      	beq.n	1000cf0c <at_ble_characteristic_value_get+0x28>
1000cefa:	8883      	ldrh	r3, [r0, #4]
1000cefc:	802b      	strh	r3, [r5, #0]
1000cefe:	8882      	ldrh	r2, [r0, #4]
1000cf00:	6881      	ldr	r1, [r0, #8]
1000cf02:	4b06      	ldr	r3, [pc, #24]	; (1000cf1c <at_ble_characteristic_value_get+0x38>)
1000cf04:	1c20      	adds	r0, r4, #0
1000cf06:	4798      	blx	r3
1000cf08:	2000      	movs	r0, #0
1000cf0a:	e004      	b.n	1000cf16 <at_ble_characteristic_value_get+0x32>
1000cf0c:	1c30      	adds	r0, r6, #0
1000cf0e:	1c29      	adds	r1, r5, #0
1000cf10:	1c22      	adds	r2, r4, #0
1000cf12:	4b03      	ldr	r3, [pc, #12]	; (1000cf20 <at_ble_characteristic_value_get+0x3c>)
1000cf14:	4798      	blx	r3
1000cf16:	bd70      	pop	{r4, r5, r6, pc}
1000cf18:	1000cdb9 	.word	0x1000cdb9
1000cf1c:	100107e7 	.word	0x100107e7
1000cf20:	1000ebd1 	.word	0x1000ebd1

1000cf24 <at_ble_write_authorize_reply>:
1000cf24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf26:	b085      	sub	sp, #20
1000cf28:	1c04      	adds	r4, r0, #0
1000cf2a:	9101      	str	r1, [sp, #4]
1000cf2c:	2900      	cmp	r1, #0
1000cf2e:	d128      	bne.n	1000cf82 <at_ble_write_authorize_reply+0x5e>
1000cf30:	8843      	ldrh	r3, [r0, #2]
1000cf32:	1c27      	adds	r7, r4, #0
1000cf34:	9300      	str	r3, [sp, #0]
1000cf36:	1c18      	adds	r0, r3, #0
1000cf38:	4b16      	ldr	r3, [pc, #88]	; (1000cf94 <at_ble_write_authorize_reply+0x70>)
1000cf3a:	4798      	blx	r3
1000cf3c:	3708      	adds	r7, #8
1000cf3e:	2800      	cmp	r0, #0
1000cf40:	d009      	beq.n	1000cf56 <at_ble_write_authorize_reply+0x32>
1000cf42:	6880      	ldr	r0, [r0, #8]
1000cf44:	2800      	cmp	r0, #0
1000cf46:	d006      	beq.n	1000cf56 <at_ble_write_authorize_reply+0x32>
1000cf48:	88a3      	ldrh	r3, [r4, #4]
1000cf4a:	88e2      	ldrh	r2, [r4, #6]
1000cf4c:	18c0      	adds	r0, r0, r3
1000cf4e:	1c39      	adds	r1, r7, #0
1000cf50:	4b11      	ldr	r3, [pc, #68]	; (1000cf98 <at_ble_write_authorize_reply+0x74>)
1000cf52:	4798      	blx	r3
1000cf54:	e015      	b.n	1000cf82 <at_ble_write_authorize_reply+0x5e>
1000cf56:	ab02      	add	r3, sp, #8
1000cf58:	1d9e      	adds	r6, r3, #6
1000cf5a:	2300      	movs	r3, #0
1000cf5c:	4d0f      	ldr	r5, [pc, #60]	; (1000cf9c <at_ble_write_authorize_reply+0x78>)
1000cf5e:	8033      	strh	r3, [r6, #0]
1000cf60:	6829      	ldr	r1, [r5, #0]
1000cf62:	1c32      	adds	r2, r6, #0
1000cf64:	4b0e      	ldr	r3, [pc, #56]	; (1000cfa0 <at_ble_write_authorize_reply+0x7c>)
1000cf66:	9800      	ldr	r0, [sp, #0]
1000cf68:	4798      	blx	r3
1000cf6a:	682b      	ldr	r3, [r5, #0]
1000cf6c:	88a0      	ldrh	r0, [r4, #4]
1000cf6e:	88e2      	ldrh	r2, [r4, #6]
1000cf70:	1818      	adds	r0, r3, r0
1000cf72:	1c39      	adds	r1, r7, #0
1000cf74:	4b08      	ldr	r3, [pc, #32]	; (1000cf98 <at_ble_write_authorize_reply+0x74>)
1000cf76:	4798      	blx	r3
1000cf78:	8860      	ldrh	r0, [r4, #2]
1000cf7a:	8832      	ldrh	r2, [r6, #0]
1000cf7c:	6829      	ldr	r1, [r5, #0]
1000cf7e:	4b09      	ldr	r3, [pc, #36]	; (1000cfa4 <at_ble_write_authorize_reply+0x80>)
1000cf80:	4798      	blx	r3
1000cf82:	8860      	ldrh	r0, [r4, #2]
1000cf84:	8821      	ldrh	r1, [r4, #0]
1000cf86:	9a01      	ldr	r2, [sp, #4]
1000cf88:	4b07      	ldr	r3, [pc, #28]	; (1000cfa8 <at_ble_write_authorize_reply+0x84>)
1000cf8a:	4798      	blx	r3
1000cf8c:	2000      	movs	r0, #0
1000cf8e:	b005      	add	sp, #20
1000cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf92:	46c0      	nop			; (mov r8, r8)
1000cf94:	1000cdb9 	.word	0x1000cdb9
1000cf98:	100107e7 	.word	0x100107e7
1000cf9c:	10015350 	.word	0x10015350
1000cfa0:	1000cee5 	.word	0x1000cee5
1000cfa4:	1000cea9 	.word	0x1000cea9
1000cfa8:	1000e83d 	.word	0x1000e83d

1000cfac <gatts_handle_read_req>:
1000cfac:	b538      	push	{r3, r4, r5, lr}
1000cfae:	1c0c      	adds	r4, r1, #0
1000cfb0:	4b07      	ldr	r3, [pc, #28]	; (1000cfd0 <gatts_handle_read_req+0x24>)
1000cfb2:	4798      	blx	r3
1000cfb4:	8865      	ldrh	r5, [r4, #2]
1000cfb6:	4b07      	ldr	r3, [pc, #28]	; (1000cfd4 <gatts_handle_read_req+0x28>)
1000cfb8:	1c28      	adds	r0, r5, #0
1000cfba:	4798      	blx	r3
1000cfbc:	7883      	ldrb	r3, [r0, #2]
1000cfbe:	2026      	movs	r0, #38	; 0x26
1000cfc0:	07db      	lsls	r3, r3, #31
1000cfc2:	d404      	bmi.n	1000cfce <gatts_handle_read_req+0x22>
1000cfc4:	8820      	ldrh	r0, [r4, #0]
1000cfc6:	1c29      	adds	r1, r5, #0
1000cfc8:	4b03      	ldr	r3, [pc, #12]	; (1000cfd8 <gatts_handle_read_req+0x2c>)
1000cfca:	4798      	blx	r3
1000cfcc:	203b      	movs	r0, #59	; 0x3b
1000cfce:	bd38      	pop	{r3, r4, r5, pc}
1000cfd0:	1000e781 	.word	0x1000e781
1000cfd4:	1000cdb9 	.word	0x1000cdb9
1000cfd8:	1000cdf9 	.word	0x1000cdf9

1000cfdc <gatts_handle_att_info_req>:
1000cfdc:	b538      	push	{r3, r4, r5, lr}
1000cfde:	1c0d      	adds	r5, r1, #0
1000cfe0:	4b0a      	ldr	r3, [pc, #40]	; (1000d00c <gatts_handle_att_info_req+0x30>)
1000cfe2:	1c14      	adds	r4, r2, #0
1000cfe4:	4798      	blx	r3
1000cfe6:	882d      	ldrh	r5, [r5, #0]
1000cfe8:	4b09      	ldr	r3, [pc, #36]	; (1000d010 <gatts_handle_att_info_req+0x34>)
1000cfea:	1c28      	adds	r0, r5, #0
1000cfec:	4798      	blx	r3
1000cfee:	0a22      	lsrs	r2, r4, #8
1000cff0:	1c03      	adds	r3, r0, #0
1000cff2:	4c08      	ldr	r4, [pc, #32]	; (1000d014 <gatts_handle_att_info_req+0x38>)
1000cff4:	b291      	uxth	r1, r2
1000cff6:	2800      	cmp	r0, #0
1000cff8:	d003      	beq.n	1000d002 <gatts_handle_att_info_req+0x26>
1000cffa:	8882      	ldrh	r2, [r0, #4]
1000cffc:	2300      	movs	r3, #0
1000cffe:	1c28      	adds	r0, r5, #0
1000d000:	e001      	b.n	1000d006 <gatts_handle_att_info_req+0x2a>
1000d002:	1c28      	adds	r0, r5, #0
1000d004:	2201      	movs	r2, #1
1000d006:	47a0      	blx	r4
1000d008:	203b      	movs	r0, #59	; 0x3b
1000d00a:	bd38      	pop	{r3, r4, r5, pc}
1000d00c:	1000e7c5 	.word	0x1000e7c5
1000d010:	1000cdb9 	.word	0x1000cdb9
1000d014:	1000e881 	.word	0x1000e881

1000d018 <gatts_handle_write_req>:
1000d018:	b510      	push	{r4, lr}
1000d01a:	1c14      	adds	r4, r2, #0
1000d01c:	4b07      	ldr	r3, [pc, #28]	; (1000d03c <gatts_handle_write_req+0x24>)
1000d01e:	4798      	blx	r3
1000d020:	4b07      	ldr	r3, [pc, #28]	; (1000d040 <gatts_handle_write_req+0x28>)
1000d022:	8860      	ldrh	r0, [r4, #2]
1000d024:	4798      	blx	r3
1000d026:	2302      	movs	r3, #2
1000d028:	7881      	ldrb	r1, [r0, #2]
1000d02a:	2022      	movs	r0, #34	; 0x22
1000d02c:	4019      	ands	r1, r3
1000d02e:	d103      	bne.n	1000d038 <gatts_handle_write_req+0x20>
1000d030:	1c20      	adds	r0, r4, #0
1000d032:	4b04      	ldr	r3, [pc, #16]	; (1000d044 <gatts_handle_write_req+0x2c>)
1000d034:	4798      	blx	r3
1000d036:	201f      	movs	r0, #31
1000d038:	bd10      	pop	{r4, pc}
1000d03a:	46c0      	nop			; (mov r8, r8)
1000d03c:	1000e78d 	.word	0x1000e78d
1000d040:	1000cdb9 	.word	0x1000cdb9
1000d044:	1000cf25 	.word	0x1000cf25

1000d048 <init_l2cc_task_module>:
1000d048:	220a      	movs	r2, #10
1000d04a:	4b01      	ldr	r3, [pc, #4]	; (1000d050 <init_l2cc_task_module+0x8>)
1000d04c:	701a      	strb	r2, [r3, #0]
1000d04e:	4770      	bx	lr
1000d050:	1001534c 	.word	0x1001534c

1000d054 <l2cc_data_send_rsp_handler>:
1000d054:	b510      	push	{r4, lr}
1000d056:	7802      	ldrb	r2, [r0, #0]
1000d058:	700a      	strb	r2, [r1, #0]
1000d05a:	7883      	ldrb	r3, [r0, #2]
1000d05c:	7844      	ldrb	r4, [r0, #1]
1000d05e:	021b      	lsls	r3, r3, #8
1000d060:	4323      	orrs	r3, r4
1000d062:	804b      	strh	r3, [r1, #2]
1000d064:	7903      	ldrb	r3, [r0, #4]
1000d066:	78c0      	ldrb	r0, [r0, #3]
1000d068:	021b      	lsls	r3, r3, #8
1000d06a:	4303      	orrs	r3, r0
1000d06c:	808b      	strh	r3, [r1, #4]
1000d06e:	2a00      	cmp	r2, #0
1000d070:	d103      	bne.n	1000d07a <l2cc_data_send_rsp_handler+0x26>
1000d072:	4a02      	ldr	r2, [pc, #8]	; (1000d07c <l2cc_data_send_rsp_handler+0x28>)
1000d074:	7813      	ldrb	r3, [r2, #0]
1000d076:	3301      	adds	r3, #1
1000d078:	7013      	strb	r3, [r2, #0]
1000d07a:	bd10      	pop	{r4, pc}
1000d07c:	1001534c 	.word	0x1001534c

1000d080 <l2cc_data_received_handler>:
1000d080:	b508      	push	{r3, lr}
1000d082:	1c03      	adds	r3, r0, #0
1000d084:	7842      	ldrb	r2, [r0, #1]
1000d086:	7800      	ldrb	r0, [r0, #0]
1000d088:	0212      	lsls	r2, r2, #8
1000d08a:	4302      	orrs	r2, r0
1000d08c:	800a      	strh	r2, [r1, #0]
1000d08e:	78da      	ldrb	r2, [r3, #3]
1000d090:	7898      	ldrb	r0, [r3, #2]
1000d092:	0212      	lsls	r2, r2, #8
1000d094:	4302      	orrs	r2, r0
1000d096:	804a      	strh	r2, [r1, #2]
1000d098:	795a      	ldrb	r2, [r3, #5]
1000d09a:	7918      	ldrb	r0, [r3, #4]
1000d09c:	0212      	lsls	r2, r2, #8
1000d09e:	4302      	orrs	r2, r0
1000d0a0:	808a      	strh	r2, [r1, #4]
1000d0a2:	1d88      	adds	r0, r1, #6
1000d0a4:	1d99      	adds	r1, r3, #6
1000d0a6:	4b01      	ldr	r3, [pc, #4]	; (1000d0ac <l2cc_data_received_handler+0x2c>)
1000d0a8:	4798      	blx	r3
1000d0aa:	bd08      	pop	{r3, pc}
1000d0ac:	100107e7 	.word	0x100107e7

1000d0b0 <at_ble_authenticate>:
1000d0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d0b2:	1c0c      	adds	r4, r1, #0
1000d0b4:	211f      	movs	r1, #31
1000d0b6:	b08b      	sub	sp, #44	; 0x2c
1000d0b8:	9307      	str	r3, [sp, #28]
1000d0ba:	ab02      	add	r3, sp, #8
1000d0bc:	18c9      	adds	r1, r1, r3
1000d0be:	230f      	movs	r3, #15
1000d0c0:	700b      	strb	r3, [r1, #0]
1000d0c2:	4b40      	ldr	r3, [pc, #256]	; (1000d1c4 <at_ble_authenticate+0x114>)
1000d0c4:	1c05      	adds	r5, r0, #0
1000d0c6:	1c16      	adds	r6, r2, #0
1000d0c8:	4798      	blx	r3
1000d0ca:	1c07      	adds	r7, r0, #0
1000d0cc:	2001      	movs	r0, #1
1000d0ce:	2f07      	cmp	r7, #7
1000d0d0:	d875      	bhi.n	1000d1be <at_ble_authenticate+0x10e>
1000d0d2:	2c00      	cmp	r4, #0
1000d0d4:	d113      	bne.n	1000d0fe <at_ble_authenticate+0x4e>
1000d0d6:	2312      	movs	r3, #18
1000d0d8:	435f      	muls	r7, r3
1000d0da:	4b3b      	ldr	r3, [pc, #236]	; (1000d1c8 <at_ble_authenticate+0x118>)
1000d0dc:	5cfb      	ldrb	r3, [r7, r3]
1000d0de:	4283      	cmp	r3, r0
1000d0e0:	d001      	beq.n	1000d0e6 <at_ble_authenticate+0x36>
1000d0e2:	20cf      	movs	r0, #207	; 0xcf
1000d0e4:	e06b      	b.n	1000d1be <at_ble_authenticate+0x10e>
1000d0e6:	9504      	str	r5, [sp, #16]
1000d0e8:	9400      	str	r4, [sp, #0]
1000d0ea:	9401      	str	r4, [sp, #4]
1000d0ec:	9402      	str	r4, [sp, #8]
1000d0ee:	9403      	str	r4, [sp, #12]
1000d0f0:	1c20      	adds	r0, r4, #0
1000d0f2:	1c21      	adds	r1, r4, #0
1000d0f4:	1c22      	adds	r2, r4, #0
1000d0f6:	1c23      	adds	r3, r4, #0
1000d0f8:	4d34      	ldr	r5, [pc, #208]	; (1000d1cc <at_ble_authenticate+0x11c>)
1000d0fa:	47a8      	blx	r5
1000d0fc:	e05e      	b.n	1000d1bc <at_ble_authenticate+0x10c>
1000d0fe:	7922      	ldrb	r2, [r4, #4]
1000d100:	2a06      	cmp	r2, #6
1000d102:	d9ee      	bls.n	1000d0e2 <at_ble_authenticate+0x32>
1000d104:	7963      	ldrb	r3, [r4, #5]
1000d106:	2b10      	cmp	r3, #16
1000d108:	d8eb      	bhi.n	1000d0e2 <at_ble_authenticate+0x32>
1000d10a:	429a      	cmp	r2, r3
1000d10c:	d8e9      	bhi.n	1000d0e2 <at_ble_authenticate+0x32>
1000d10e:	7a23      	ldrb	r3, [r4, #8]
1000d110:	2b04      	cmp	r3, #4
1000d112:	d8e6      	bhi.n	1000d0e2 <at_ble_authenticate+0x32>
1000d114:	79a3      	ldrb	r3, [r4, #6]
1000d116:	2b07      	cmp	r3, #7
1000d118:	d8e3      	bhi.n	1000d0e2 <at_ble_authenticate+0x32>
1000d11a:	79e3      	ldrb	r3, [r4, #7]
1000d11c:	2b07      	cmp	r3, #7
1000d11e:	d8e0      	bhi.n	1000d0e2 <at_ble_authenticate+0x32>
1000d120:	78a3      	ldrb	r3, [r4, #2]
1000d122:	2b00      	cmp	r3, #0
1000d124:	d006      	beq.n	1000d134 <at_ble_authenticate+0x84>
1000d126:	2e00      	cmp	r6, #0
1000d128:	d0db      	beq.n	1000d0e2 <at_ble_authenticate+0x32>
1000d12a:	4829      	ldr	r0, [pc, #164]	; (1000d1d0 <at_ble_authenticate+0x120>)
1000d12c:	1c31      	adds	r1, r6, #0
1000d12e:	221c      	movs	r2, #28
1000d130:	4b28      	ldr	r3, [pc, #160]	; (1000d1d4 <at_ble_authenticate+0x124>)
1000d132:	4798      	blx	r3
1000d134:	9b07      	ldr	r3, [sp, #28]
1000d136:	2b00      	cmp	r3, #0
1000d138:	d005      	beq.n	1000d146 <at_ble_authenticate+0x96>
1000d13a:	4827      	ldr	r0, [pc, #156]	; (1000d1d8 <at_ble_authenticate+0x128>)
1000d13c:	1c19      	adds	r1, r3, #0
1000d13e:	309a      	adds	r0, #154	; 0x9a
1000d140:	2210      	movs	r2, #16
1000d142:	4b24      	ldr	r3, [pc, #144]	; (1000d1d4 <at_ble_authenticate+0x124>)
1000d144:	4798      	blx	r3
1000d146:	7863      	ldrb	r3, [r4, #1]
1000d148:	78a2      	ldrb	r2, [r4, #2]
1000d14a:	009b      	lsls	r3, r3, #2
1000d14c:	4313      	orrs	r3, r2
1000d14e:	2212      	movs	r2, #18
1000d150:	4357      	muls	r7, r2
1000d152:	4a1d      	ldr	r2, [pc, #116]	; (1000d1c8 <at_ble_authenticate+0x118>)
1000d154:	b2db      	uxtb	r3, r3
1000d156:	5cba      	ldrb	r2, [r7, r2]
1000d158:	2a00      	cmp	r2, #0
1000d15a:	d116      	bne.n	1000d18a <at_ble_authenticate+0xda>
1000d15c:	79a0      	ldrb	r0, [r4, #6]
1000d15e:	0742      	lsls	r2, r0, #29
1000d160:	d502      	bpl.n	1000d168 <at_ble_authenticate+0xb8>
1000d162:	9a07      	ldr	r2, [sp, #28]
1000d164:	2a00      	cmp	r2, #0
1000d166:	d0bc      	beq.n	1000d0e2 <at_ble_authenticate+0x32>
1000d168:	07c2      	lsls	r2, r0, #31
1000d16a:	d501      	bpl.n	1000d170 <at_ble_authenticate+0xc0>
1000d16c:	2e00      	cmp	r6, #0
1000d16e:	d0b8      	beq.n	1000d0e2 <at_ble_authenticate+0x32>
1000d170:	7966      	ldrb	r6, [r4, #5]
1000d172:	7821      	ldrb	r1, [r4, #0]
1000d174:	78e2      	ldrb	r2, [r4, #3]
1000d176:	9600      	str	r6, [sp, #0]
1000d178:	9001      	str	r0, [sp, #4]
1000d17a:	79e0      	ldrb	r0, [r4, #7]
1000d17c:	9002      	str	r0, [sp, #8]
1000d17e:	7a20      	ldrb	r0, [r4, #8]
1000d180:	4c16      	ldr	r4, [pc, #88]	; (1000d1dc <at_ble_authenticate+0x12c>)
1000d182:	9003      	str	r0, [sp, #12]
1000d184:	1c28      	adds	r0, r5, #0
1000d186:	47a0      	blx	r4
1000d188:	e018      	b.n	1000d1bc <at_ble_authenticate+0x10c>
1000d18a:	2a01      	cmp	r2, #1
1000d18c:	d1a9      	bne.n	1000d0e2 <at_ble_authenticate+0x32>
1000d18e:	79e0      	ldrb	r0, [r4, #7]
1000d190:	0742      	lsls	r2, r0, #29
1000d192:	d502      	bpl.n	1000d19a <at_ble_authenticate+0xea>
1000d194:	9a07      	ldr	r2, [sp, #28]
1000d196:	2a00      	cmp	r2, #0
1000d198:	d0a3      	beq.n	1000d0e2 <at_ble_authenticate+0x32>
1000d19a:	07c2      	lsls	r2, r0, #31
1000d19c:	d501      	bpl.n	1000d1a2 <at_ble_authenticate+0xf2>
1000d19e:	2e00      	cmp	r6, #0
1000d1a0:	d09f      	beq.n	1000d0e2 <at_ble_authenticate+0x32>
1000d1a2:	7966      	ldrb	r6, [r4, #5]
1000d1a4:	7821      	ldrb	r1, [r4, #0]
1000d1a6:	78e2      	ldrb	r2, [r4, #3]
1000d1a8:	9600      	str	r6, [sp, #0]
1000d1aa:	79a6      	ldrb	r6, [r4, #6]
1000d1ac:	9002      	str	r0, [sp, #8]
1000d1ae:	9601      	str	r6, [sp, #4]
1000d1b0:	7a20      	ldrb	r0, [r4, #8]
1000d1b2:	9504      	str	r5, [sp, #16]
1000d1b4:	9003      	str	r0, [sp, #12]
1000d1b6:	4c05      	ldr	r4, [pc, #20]	; (1000d1cc <at_ble_authenticate+0x11c>)
1000d1b8:	2001      	movs	r0, #1
1000d1ba:	47a0      	blx	r4
1000d1bc:	2000      	movs	r0, #0
1000d1be:	b00b      	add	sp, #44	; 0x2c
1000d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1c2:	46c0      	nop			; (mov r8, r8)
1000d1c4:	1000d5f9 	.word	0x1000d5f9
1000d1c8:	10017b56 	.word	0x10017b56
1000d1cc:	1000db69 	.word	0x1000db69
1000d1d0:	10017c64 	.word	0x10017c64
1000d1d4:	100107e7 	.word	0x100107e7
1000d1d8:	10017be6 	.word	0x10017be6
1000d1dc:	1000d949 	.word	0x1000d949

1000d1e0 <at_ble_pair_key_reply>:
1000d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d1e2:	b085      	sub	sp, #20
1000d1e4:	1c05      	adds	r5, r0, #0
1000d1e6:	1c0c      	adds	r4, r1, #0
1000d1e8:	1c16      	adds	r6, r2, #0
1000d1ea:	2100      	movs	r1, #0
1000d1ec:	4668      	mov	r0, sp
1000d1ee:	2210      	movs	r2, #16
1000d1f0:	4b18      	ldr	r3, [pc, #96]	; (1000d254 <at_ble_pair_key_reply+0x74>)
1000d1f2:	4798      	blx	r3
1000d1f4:	2101      	movs	r1, #1
1000d1f6:	2e00      	cmp	r6, #0
1000d1f8:	d101      	bne.n	1000d1fe <at_ble_pair_key_reply+0x1e>
1000d1fa:	1c31      	adds	r1, r6, #0
1000d1fc:	466e      	mov	r6, sp
1000d1fe:	2c00      	cmp	r4, #0
1000d200:	d116      	bne.n	1000d230 <at_ble_pair_key_reply+0x50>
1000d202:	2701      	movs	r7, #1
1000d204:	1c23      	adds	r3, r4, #0
1000d206:	1d70      	adds	r0, r6, #5
1000d208:	3e01      	subs	r6, #1
1000d20a:	7802      	ldrb	r2, [r0, #0]
1000d20c:	3801      	subs	r0, #1
1000d20e:	3a30      	subs	r2, #48	; 0x30
1000d210:	437a      	muls	r2, r7
1000d212:	189b      	adds	r3, r3, r2
1000d214:	220a      	movs	r2, #10
1000d216:	4357      	muls	r7, r2
1000d218:	42b0      	cmp	r0, r6
1000d21a:	d1f6      	bne.n	1000d20a <at_ble_pair_key_reply+0x2a>
1000d21c:	466a      	mov	r2, sp
1000d21e:	4668      	mov	r0, sp
1000d220:	7013      	strb	r3, [r2, #0]
1000d222:	0a1a      	lsrs	r2, r3, #8
1000d224:	7042      	strb	r2, [r0, #1]
1000d226:	0c1a      	lsrs	r2, r3, #16
1000d228:	0e1b      	lsrs	r3, r3, #24
1000d22a:	7082      	strb	r2, [r0, #2]
1000d22c:	70c3      	strb	r3, [r0, #3]
1000d22e:	e009      	b.n	1000d244 <at_ble_pair_key_reply+0x64>
1000d230:	20cf      	movs	r0, #207	; 0xcf
1000d232:	2c01      	cmp	r4, #1
1000d234:	d10c      	bne.n	1000d250 <at_ble_pair_key_reply+0x70>
1000d236:	2300      	movs	r3, #0
1000d238:	4668      	mov	r0, sp
1000d23a:	5cf2      	ldrb	r2, [r6, r3]
1000d23c:	54c2      	strb	r2, [r0, r3]
1000d23e:	3301      	adds	r3, #1
1000d240:	2b10      	cmp	r3, #16
1000d242:	d1f9      	bne.n	1000d238 <at_ble_pair_key_reply+0x58>
1000d244:	2004      	movs	r0, #4
1000d246:	466a      	mov	r2, sp
1000d248:	1c2b      	adds	r3, r5, #0
1000d24a:	4c03      	ldr	r4, [pc, #12]	; (1000d258 <at_ble_pair_key_reply+0x78>)
1000d24c:	47a0      	blx	r4
1000d24e:	2000      	movs	r0, #0
1000d250:	b005      	add	sp, #20
1000d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d254:	100107f9 	.word	0x100107f9
1000d258:	1000dbe5 	.word	0x1000dbe5

1000d25c <at_ble_send_slave_sec_request>:
1000d25c:	b570      	push	{r4, r5, r6, lr}
1000d25e:	4b0c      	ldr	r3, [pc, #48]	; (1000d290 <at_ble_send_slave_sec_request+0x34>)
1000d260:	1c0e      	adds	r6, r1, #0
1000d262:	2100      	movs	r1, #0
1000d264:	1c05      	adds	r5, r0, #0
1000d266:	1c14      	adds	r4, r2, #0
1000d268:	4798      	blx	r3
1000d26a:	2301      	movs	r3, #1
1000d26c:	2807      	cmp	r0, #7
1000d26e:	d80d      	bhi.n	1000d28c <at_ble_send_slave_sec_request+0x30>
1000d270:	3311      	adds	r3, #17
1000d272:	4358      	muls	r0, r3
1000d274:	4b07      	ldr	r3, [pc, #28]	; (1000d294 <at_ble_send_slave_sec_request+0x38>)
1000d276:	5cc2      	ldrb	r2, [r0, r3]
1000d278:	23e0      	movs	r3, #224	; 0xe0
1000d27a:	2a01      	cmp	r2, #1
1000d27c:	d106      	bne.n	1000d28c <at_ble_send_slave_sec_request+0x30>
1000d27e:	00b1      	lsls	r1, r6, #2
1000d280:	430c      	orrs	r4, r1
1000d282:	4b05      	ldr	r3, [pc, #20]	; (1000d298 <at_ble_send_slave_sec_request+0x3c>)
1000d284:	b2e1      	uxtb	r1, r4
1000d286:	1c28      	adds	r0, r5, #0
1000d288:	4798      	blx	r3
1000d28a:	2300      	movs	r3, #0
1000d28c:	1c18      	adds	r0, r3, #0
1000d28e:	bd70      	pop	{r4, r5, r6, pc}
1000d290:	1000d5f9 	.word	0x1000d5f9
1000d294:	10017b56 	.word	0x10017b56
1000d298:	1000dc35 	.word	0x1000dc35

1000d29c <at_ble_encryption_start>:
1000d29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d29e:	23cf      	movs	r3, #207	; 0xcf
1000d2a0:	2900      	cmp	r1, #0
1000d2a2:	d02b      	beq.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2a4:	2a05      	cmp	r2, #5
1000d2a6:	d829      	bhi.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2a8:	2701      	movs	r7, #1
1000d2aa:	1c3d      	adds	r5, r7, #0
1000d2ac:	2433      	movs	r4, #51	; 0x33
1000d2ae:	4095      	lsls	r5, r2
1000d2b0:	4225      	tst	r5, r4
1000d2b2:	d023      	beq.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2b4:	7e8c      	ldrb	r4, [r1, #26]
1000d2b6:	3c07      	subs	r4, #7
1000d2b8:	2c09      	cmp	r4, #9
1000d2ba:	d81f      	bhi.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2bc:	4b10      	ldr	r3, [pc, #64]	; (1000d300 <at_ble_encryption_start+0x64>)
1000d2be:	1c0c      	adds	r4, r1, #0
1000d2c0:	2100      	movs	r1, #0
1000d2c2:	1c15      	adds	r5, r2, #0
1000d2c4:	1c06      	adds	r6, r0, #0
1000d2c6:	4798      	blx	r3
1000d2c8:	1c3b      	adds	r3, r7, #0
1000d2ca:	2807      	cmp	r0, #7
1000d2cc:	d816      	bhi.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2ce:	2312      	movs	r3, #18
1000d2d0:	4358      	muls	r0, r3
1000d2d2:	4b0c      	ldr	r3, [pc, #48]	; (1000d304 <at_ble_encryption_start+0x68>)
1000d2d4:	5cc7      	ldrb	r7, [r0, r3]
1000d2d6:	23e0      	movs	r3, #224	; 0xe0
1000d2d8:	2f00      	cmp	r7, #0
1000d2da:	d10f      	bne.n	1000d2fc <at_ble_encryption_start+0x60>
1000d2dc:	1c21      	adds	r1, r4, #0
1000d2de:	221c      	movs	r2, #28
1000d2e0:	4b09      	ldr	r3, [pc, #36]	; (1000d308 <at_ble_encryption_start+0x6c>)
1000d2e2:	480a      	ldr	r0, [pc, #40]	; (1000d30c <at_ble_encryption_start+0x70>)
1000d2e4:	4798      	blx	r3
1000d2e6:	1c23      	adds	r3, r4, #0
1000d2e8:	7ea1      	ldrb	r1, [r4, #26]
1000d2ea:	8a22      	ldrh	r2, [r4, #16]
1000d2ec:	3312      	adds	r3, #18
1000d2ee:	9100      	str	r1, [sp, #0]
1000d2f0:	9501      	str	r5, [sp, #4]
1000d2f2:	1c21      	adds	r1, r4, #0
1000d2f4:	1c30      	adds	r0, r6, #0
1000d2f6:	4c06      	ldr	r4, [pc, #24]	; (1000d310 <at_ble_encryption_start+0x74>)
1000d2f8:	47a0      	blx	r4
1000d2fa:	1c3b      	adds	r3, r7, #0
1000d2fc:	1c18      	adds	r0, r3, #0
1000d2fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d300:	1000d5f9 	.word	0x1000d5f9
1000d304:	10017b56 	.word	0x10017b56
1000d308:	100107e7 	.word	0x100107e7
1000d30c:	10017c64 	.word	0x10017c64
1000d310:	1000dc75 	.word	0x1000dc75

1000d314 <at_ble_encryption_request_reply>:
1000d314:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d316:	24cf      	movs	r4, #207	; 0xcf
1000d318:	2b00      	cmp	r3, #0
1000d31a:	d011      	beq.n	1000d340 <at_ble_encryption_request_reply+0x2c>
1000d31c:	2a00      	cmp	r2, #0
1000d31e:	d00a      	beq.n	1000d336 <at_ble_encryption_request_reply+0x22>
1000d320:	2905      	cmp	r1, #5
1000d322:	d80d      	bhi.n	1000d340 <at_ble_encryption_request_reply+0x2c>
1000d324:	2501      	movs	r5, #1
1000d326:	2633      	movs	r6, #51	; 0x33
1000d328:	408d      	lsls	r5, r1
1000d32a:	4235      	tst	r5, r6
1000d32c:	d008      	beq.n	1000d340 <at_ble_encryption_request_reply+0x2c>
1000d32e:	7e9d      	ldrb	r5, [r3, #26]
1000d330:	3d07      	subs	r5, #7
1000d332:	2d09      	cmp	r5, #9
1000d334:	d804      	bhi.n	1000d340 <at_ble_encryption_request_reply+0x2c>
1000d336:	7e9c      	ldrb	r4, [r3, #26]
1000d338:	9400      	str	r4, [sp, #0]
1000d33a:	4c02      	ldr	r4, [pc, #8]	; (1000d344 <at_ble_encryption_request_reply+0x30>)
1000d33c:	47a0      	blx	r4
1000d33e:	2400      	movs	r4, #0
1000d340:	1c20      	adds	r0, r4, #0
1000d342:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d344:	1000dd31 	.word	0x1000dd31

1000d348 <at_ble_htpt_create_db>:
1000d348:	b530      	push	{r4, r5, lr}
1000d34a:	b085      	sub	sp, #20
1000d34c:	ac08      	add	r4, sp, #32
1000d34e:	8825      	ldrh	r5, [r4, #0]
1000d350:	ac09      	add	r4, sp, #36	; 0x24
1000d352:	7824      	ldrb	r4, [r4, #0]
1000d354:	9500      	str	r5, [sp, #0]
1000d356:	9401      	str	r4, [sp, #4]
1000d358:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000d35a:	9402      	str	r4, [sp, #8]
1000d35c:	4c01      	ldr	r4, [pc, #4]	; (1000d364 <at_ble_htpt_create_db+0x1c>)
1000d35e:	47a0      	blx	r4
1000d360:	b005      	add	sp, #20
1000d362:	bd30      	pop	{r4, r5, pc}
1000d364:	1000ec6d 	.word	0x1000ec6d

1000d368 <at_ble_htpt_enable>:
1000d368:	b508      	push	{r3, lr}
1000d36a:	4b01      	ldr	r3, [pc, #4]	; (1000d370 <at_ble_htpt_enable+0x8>)
1000d36c:	4798      	blx	r3
1000d36e:	bd08      	pop	{r3, pc}
1000d370:	1000ecad 	.word	0x1000ecad

1000d374 <at_ble_htpt_temp_send>:
1000d374:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d376:	1c04      	adds	r4, r0, #0
1000d378:	a806      	add	r0, sp, #24
1000d37a:	7805      	ldrb	r5, [r0, #0]
1000d37c:	20cf      	movs	r0, #207	; 0xcf
1000d37e:	2900      	cmp	r1, #0
1000d380:	d003      	beq.n	1000d38a <at_ble_htpt_temp_send+0x16>
1000d382:	1c20      	adds	r0, r4, #0
1000d384:	9500      	str	r5, [sp, #0]
1000d386:	4c01      	ldr	r4, [pc, #4]	; (1000d38c <at_ble_htpt_temp_send+0x18>)
1000d388:	47a0      	blx	r4
1000d38a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d38c:	1000eced 	.word	0x1000eced

1000d390 <rx_callback>:
1000d390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d392:	8883      	ldrh	r3, [r0, #4]
1000d394:	1c01      	adds	r1, r0, #0
1000d396:	9301      	str	r3, [sp, #4]
1000d398:	88c5      	ldrh	r5, [r0, #6]
1000d39a:	8806      	ldrh	r6, [r0, #0]
1000d39c:	2d00      	cmp	r5, #0
1000d39e:	d10f      	bne.n	1000d3c0 <rx_callback+0x30>
1000d3a0:	1c19      	adds	r1, r3, #0
1000d3a2:	1c30      	adds	r0, r6, #0
1000d3a4:	4b19      	ldr	r3, [pc, #100]	; (1000d40c <rx_callback+0x7c>)
1000d3a6:	1c2a      	adds	r2, r5, #0
1000d3a8:	4798      	blx	r3
1000d3aa:	1e03      	subs	r3, r0, #0
1000d3ac:	d105      	bne.n	1000d3ba <rx_callback+0x2a>
1000d3ae:	1c30      	adds	r0, r6, #0
1000d3b0:	9901      	ldr	r1, [sp, #4]
1000d3b2:	1c1a      	adds	r2, r3, #0
1000d3b4:	4c16      	ldr	r4, [pc, #88]	; (1000d410 <rx_callback+0x80>)
1000d3b6:	47a0      	blx	r4
1000d3b8:	e027      	b.n	1000d40a <rx_callback+0x7a>
1000d3ba:	4b16      	ldr	r3, [pc, #88]	; (1000d414 <rx_callback+0x84>)
1000d3bc:	4798      	blx	r3
1000d3be:	e024      	b.n	1000d40a <rx_callback+0x7a>
1000d3c0:	4c15      	ldr	r4, [pc, #84]	; (1000d418 <rx_callback+0x88>)
1000d3c2:	4a16      	ldr	r2, [pc, #88]	; (1000d41c <rx_callback+0x8c>)
1000d3c4:	6823      	ldr	r3, [r4, #0]
1000d3c6:	6812      	ldr	r2, [r2, #0]
1000d3c8:	18eb      	adds	r3, r5, r3
1000d3ca:	4293      	cmp	r3, r2
1000d3cc:	d901      	bls.n	1000d3d2 <rx_callback+0x42>
1000d3ce:	2300      	movs	r3, #0
1000d3d0:	6023      	str	r3, [r4, #0]
1000d3d2:	4f13      	ldr	r7, [pc, #76]	; (1000d420 <rx_callback+0x90>)
1000d3d4:	6822      	ldr	r2, [r4, #0]
1000d3d6:	683b      	ldr	r3, [r7, #0]
1000d3d8:	3108      	adds	r1, #8
1000d3da:	1898      	adds	r0, r3, r2
1000d3dc:	1c2a      	adds	r2, r5, #0
1000d3de:	4b11      	ldr	r3, [pc, #68]	; (1000d424 <rx_callback+0x94>)
1000d3e0:	4798      	blx	r3
1000d3e2:	683b      	ldr	r3, [r7, #0]
1000d3e4:	6822      	ldr	r2, [r4, #0]
1000d3e6:	1c30      	adds	r0, r6, #0
1000d3e8:	189a      	adds	r2, r3, r2
1000d3ea:	9901      	ldr	r1, [sp, #4]
1000d3ec:	4b07      	ldr	r3, [pc, #28]	; (1000d40c <rx_callback+0x7c>)
1000d3ee:	4798      	blx	r3
1000d3f0:	2800      	cmp	r0, #0
1000d3f2:	d1e2      	bne.n	1000d3ba <rx_callback+0x2a>
1000d3f4:	6823      	ldr	r3, [r4, #0]
1000d3f6:	683a      	ldr	r2, [r7, #0]
1000d3f8:	1c30      	adds	r0, r6, #0
1000d3fa:	18d2      	adds	r2, r2, r3
1000d3fc:	9901      	ldr	r1, [sp, #4]
1000d3fe:	1c2b      	adds	r3, r5, #0
1000d400:	4e03      	ldr	r6, [pc, #12]	; (1000d410 <rx_callback+0x80>)
1000d402:	47b0      	blx	r6
1000d404:	6823      	ldr	r3, [r4, #0]
1000d406:	18ed      	adds	r5, r5, r3
1000d408:	6025      	str	r5, [r4, #0]
1000d40a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d40c:	1000c075 	.word	0x1000c075
1000d410:	1000bfed 	.word	0x1000bfed
1000d414:	1000b959 	.word	0x1000b959
1000d418:	10017cc0 	.word	0x10017cc0
1000d41c:	10016e4c 	.word	0x10016e4c
1000d420:	10016e48 	.word	0x10016e48
1000d424:	100107e7 	.word	0x100107e7

1000d428 <interface_send>:
1000d428:	b508      	push	{r3, lr}
1000d42a:	4b02      	ldr	r3, [pc, #8]	; (1000d434 <interface_send+0xc>)
1000d42c:	4798      	blx	r3
1000d42e:	2000      	movs	r0, #0
1000d430:	bd08      	pop	{r3, pc}
1000d432:	46c0      	nop			; (mov r8, r8)
1000d434:	1000b691 	.word	0x1000b691

1000d438 <interface_init>:
1000d438:	2280      	movs	r2, #128	; 0x80
1000d43a:	b510      	push	{r4, lr}
1000d43c:	2100      	movs	r1, #0
1000d43e:	1c04      	adds	r4, r0, #0
1000d440:	0092      	lsls	r2, r2, #2
1000d442:	4b08      	ldr	r3, [pc, #32]	; (1000d464 <interface_init+0x2c>)
1000d444:	4808      	ldr	r0, [pc, #32]	; (1000d468 <interface_init+0x30>)
1000d446:	4798      	blx	r3
1000d448:	2200      	movs	r2, #0
1000d44a:	4b08      	ldr	r3, [pc, #32]	; (1000d46c <interface_init+0x34>)
1000d44c:	601a      	str	r2, [r3, #0]
1000d44e:	4a08      	ldr	r2, [pc, #32]	; (1000d470 <interface_init+0x38>)
1000d450:	4b08      	ldr	r3, [pc, #32]	; (1000d474 <interface_init+0x3c>)
1000d452:	601a      	str	r2, [r3, #0]
1000d454:	4b08      	ldr	r3, [pc, #32]	; (1000d478 <interface_init+0x40>)
1000d456:	6922      	ldr	r2, [r4, #16]
1000d458:	601a      	str	r2, [r3, #0]
1000d45a:	6962      	ldr	r2, [r4, #20]
1000d45c:	4b07      	ldr	r3, [pc, #28]	; (1000d47c <interface_init+0x44>)
1000d45e:	601a      	str	r2, [r3, #0]
1000d460:	bd10      	pop	{r4, pc}
1000d462:	46c0      	nop			; (mov r8, r8)
1000d464:	100107f9 	.word	0x100107f9
1000d468:	10017ec4 	.word	0x10017ec4
1000d46c:	10017cc0 	.word	0x10017cc0
1000d470:	10017cc4 	.word	0x10017cc4
1000d474:	10015350 	.word	0x10015350
1000d478:	10016e48 	.word	0x10016e48
1000d47c:	10016e4c 	.word	0x10016e4c

1000d480 <platform_cmd_cmpl_signal>:
1000d480:	2201      	movs	r2, #1
1000d482:	4b01      	ldr	r3, [pc, #4]	; (1000d488 <platform_cmd_cmpl_signal+0x8>)
1000d484:	601a      	str	r2, [r3, #0]
1000d486:	4770      	bx	lr
1000d488:	10016e50 	.word	0x10016e50

1000d48c <platform_cmd_cmpl_wait>:
1000d48c:	b510      	push	{r4, lr}
1000d48e:	1c04      	adds	r4, r0, #0
1000d490:	4b07      	ldr	r3, [pc, #28]	; (1000d4b0 <platform_cmd_cmpl_wait+0x24>)
1000d492:	681a      	ldr	r2, [r3, #0]
1000d494:	2a01      	cmp	r2, #1
1000d496:	d003      	beq.n	1000d4a0 <platform_cmd_cmpl_wait+0x14>
1000d498:	4b06      	ldr	r3, [pc, #24]	; (1000d4b4 <platform_cmd_cmpl_wait+0x28>)
1000d49a:	2000      	movs	r0, #0
1000d49c:	4798      	blx	r3
1000d49e:	e7f7      	b.n	1000d490 <platform_cmd_cmpl_wait+0x4>
1000d4a0:	6819      	ldr	r1, [r3, #0]
1000d4a2:	2901      	cmp	r1, #1
1000d4a4:	d102      	bne.n	1000d4ac <platform_cmd_cmpl_wait+0x20>
1000d4a6:	2200      	movs	r2, #0
1000d4a8:	601a      	str	r2, [r3, #0]
1000d4aa:	e000      	b.n	1000d4ae <platform_cmd_cmpl_wait+0x22>
1000d4ac:	7022      	strb	r2, [r4, #0]
1000d4ae:	bd10      	pop	{r4, pc}
1000d4b0:	10016e50 	.word	0x10016e50
1000d4b4:	1000b6e1 	.word	0x1000b6e1

1000d4b8 <start_timer>:
1000d4b8:	4770      	bx	lr

1000d4ba <stop_timer>:
1000d4ba:	4770      	bx	lr

1000d4bc <dbg_le_set_bd_addr_req_handler>:
1000d4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d4be:	466b      	mov	r3, sp
1000d4c0:	1dde      	adds	r6, r3, #7
1000d4c2:	2300      	movs	r3, #0
1000d4c4:	7033      	strb	r3, [r6, #0]
1000d4c6:	230f      	movs	r3, #15
1000d4c8:	4c13      	ldr	r4, [pc, #76]	; (1000d518 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d4ca:	2703      	movs	r7, #3
1000d4cc:	7023      	strb	r3, [r4, #0]
1000d4ce:	2300      	movs	r3, #0
1000d4d0:	70e3      	strb	r3, [r4, #3]
1000d4d2:	4b12      	ldr	r3, [pc, #72]	; (1000d51c <dbg_le_set_bd_addr_req_handler+0x60>)
1000d4d4:	1c01      	adds	r1, r0, #0
1000d4d6:	881a      	ldrh	r2, [r3, #0]
1000d4d8:	881b      	ldrh	r3, [r3, #0]
1000d4da:	7122      	strb	r2, [r4, #4]
1000d4dc:	0a1b      	lsrs	r3, r3, #8
1000d4de:	2206      	movs	r2, #6
1000d4e0:	7163      	strb	r3, [r4, #5]
1000d4e2:	480f      	ldr	r0, [pc, #60]	; (1000d520 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d4e4:	4b0f      	ldr	r3, [pc, #60]	; (1000d524 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d4e6:	7067      	strb	r7, [r4, #1]
1000d4e8:	70a7      	strb	r7, [r4, #2]
1000d4ea:	4798      	blx	r3
1000d4ec:	4d0e      	ldr	r5, [pc, #56]	; (1000d528 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d4ee:	4b0f      	ldr	r3, [pc, #60]	; (1000d52c <dbg_le_set_bd_addr_req_handler+0x70>)
1000d4f0:	210e      	movs	r1, #14
1000d4f2:	802b      	strh	r3, [r5, #0]
1000d4f4:	2306      	movs	r3, #6
1000d4f6:	71a3      	strb	r3, [r4, #6]
1000d4f8:	2300      	movs	r3, #0
1000d4fa:	1c20      	adds	r0, r4, #0
1000d4fc:	71e3      	strb	r3, [r4, #7]
1000d4fe:	4b0c      	ldr	r3, [pc, #48]	; (1000d530 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d500:	80af      	strh	r7, [r5, #4]
1000d502:	4798      	blx	r3
1000d504:	1c30      	adds	r0, r6, #0
1000d506:	4b0b      	ldr	r3, [pc, #44]	; (1000d534 <dbg_le_set_bd_addr_req_handler+0x78>)
1000d508:	4798      	blx	r3
1000d50a:	7833      	ldrb	r3, [r6, #0]
1000d50c:	20e2      	movs	r0, #226	; 0xe2
1000d50e:	2b00      	cmp	r3, #0
1000d510:	d101      	bne.n	1000d516 <dbg_le_set_bd_addr_req_handler+0x5a>
1000d512:	68ab      	ldr	r3, [r5, #8]
1000d514:	7818      	ldrb	r0, [r3, #0]
1000d516:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d518:	10017ec4 	.word	0x10017ec4
1000d51c:	10017b54 	.word	0x10017b54
1000d520:	10017ecc 	.word	0x10017ecc
1000d524:	100107e7 	.word	0x100107e7
1000d528:	10017b48 	.word	0x10017b48
1000d52c:	00000329 	.word	0x00000329
1000d530:	1000d429 	.word	0x1000d429
1000d534:	1000d48d 	.word	0x1000d48d

1000d538 <gapc_get_dev_info_cfm.constprop.1>:
1000d538:	b538      	push	{r3, r4, r5, lr}
1000d53a:	230b      	movs	r3, #11
1000d53c:	4c27      	ldr	r4, [pc, #156]	; (1000d5dc <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d53e:	7023      	strb	r3, [r4, #0]
1000d540:	3303      	adds	r3, #3
1000d542:	7063      	strb	r3, [r4, #1]
1000d544:	3329      	adds	r3, #41	; 0x29
1000d546:	70a3      	strb	r3, [r4, #2]
1000d548:	4b25      	ldr	r3, [pc, #148]	; (1000d5e0 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d54a:	70e1      	strb	r1, [r4, #3]
1000d54c:	881a      	ldrh	r2, [r3, #0]
1000d54e:	881b      	ldrh	r3, [r3, #0]
1000d550:	7122      	strb	r2, [r4, #4]
1000d552:	0a1b      	lsrs	r3, r3, #8
1000d554:	7163      	strb	r3, [r4, #5]
1000d556:	2300      	movs	r3, #0
1000d558:	7220      	strb	r0, [r4, #8]
1000d55a:	7263      	strb	r3, [r4, #9]
1000d55c:	2801      	cmp	r0, #1
1000d55e:	d02b      	beq.n	1000d5b8 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d560:	4298      	cmp	r0, r3
1000d562:	d01b      	beq.n	1000d59c <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d564:	2802      	cmp	r0, #2
1000d566:	d12f      	bne.n	1000d5c8 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d568:	4b1e      	ldr	r3, [pc, #120]	; (1000d5e4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d56a:	2112      	movs	r1, #18
1000d56c:	1c1a      	adds	r2, r3, #0
1000d56e:	32ce      	adds	r2, #206	; 0xce
1000d570:	8812      	ldrh	r2, [r2, #0]
1000d572:	72a2      	strb	r2, [r4, #10]
1000d574:	0a12      	lsrs	r2, r2, #8
1000d576:	72e2      	strb	r2, [r4, #11]
1000d578:	1c1a      	adds	r2, r3, #0
1000d57a:	32d0      	adds	r2, #208	; 0xd0
1000d57c:	8812      	ldrh	r2, [r2, #0]
1000d57e:	7322      	strb	r2, [r4, #12]
1000d580:	0a12      	lsrs	r2, r2, #8
1000d582:	7362      	strb	r2, [r4, #13]
1000d584:	1c1a      	adds	r2, r3, #0
1000d586:	32d2      	adds	r2, #210	; 0xd2
1000d588:	8812      	ldrh	r2, [r2, #0]
1000d58a:	33d4      	adds	r3, #212	; 0xd4
1000d58c:	73a2      	strb	r2, [r4, #14]
1000d58e:	0a12      	lsrs	r2, r2, #8
1000d590:	73e2      	strb	r2, [r4, #15]
1000d592:	881b      	ldrh	r3, [r3, #0]
1000d594:	7423      	strb	r3, [r4, #16]
1000d596:	0a1b      	lsrs	r3, r3, #8
1000d598:	7463      	strb	r3, [r4, #17]
1000d59a:	e016      	b.n	1000d5ca <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d59c:	4b11      	ldr	r3, [pc, #68]	; (1000d5e4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d59e:	4912      	ldr	r1, [pc, #72]	; (1000d5e8 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d5a0:	33aa      	adds	r3, #170	; 0xaa
1000d5a2:	881d      	ldrh	r5, [r3, #0]
1000d5a4:	4811      	ldr	r0, [pc, #68]	; (1000d5ec <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d5a6:	0a2b      	lsrs	r3, r5, #8
1000d5a8:	72a5      	strb	r5, [r4, #10]
1000d5aa:	72e3      	strb	r3, [r4, #11]
1000d5ac:	1c2a      	adds	r2, r5, #0
1000d5ae:	4b10      	ldr	r3, [pc, #64]	; (1000d5f0 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d5b0:	350c      	adds	r5, #12
1000d5b2:	4798      	blx	r3
1000d5b4:	b2a9      	uxth	r1, r5
1000d5b6:	e008      	b.n	1000d5ca <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d5b8:	4b0a      	ldr	r3, [pc, #40]	; (1000d5e4 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d5ba:	210c      	movs	r1, #12
1000d5bc:	33cc      	adds	r3, #204	; 0xcc
1000d5be:	881b      	ldrh	r3, [r3, #0]
1000d5c0:	72a3      	strb	r3, [r4, #10]
1000d5c2:	0a1b      	lsrs	r3, r3, #8
1000d5c4:	72e3      	strb	r3, [r4, #11]
1000d5c6:	e000      	b.n	1000d5ca <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d5c8:	210a      	movs	r1, #10
1000d5ca:	1c0b      	adds	r3, r1, #0
1000d5cc:	3b08      	subs	r3, #8
1000d5ce:	71a3      	strb	r3, [r4, #6]
1000d5d0:	121b      	asrs	r3, r3, #8
1000d5d2:	71e3      	strb	r3, [r4, #7]
1000d5d4:	1c20      	adds	r0, r4, #0
1000d5d6:	4b07      	ldr	r3, [pc, #28]	; (1000d5f4 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d5d8:	4798      	blx	r3
1000d5da:	bd38      	pop	{r3, r4, r5, pc}
1000d5dc:	10017ec4 	.word	0x10017ec4
1000d5e0:	10017b54 	.word	0x10017b54
1000d5e4:	10017be6 	.word	0x10017be6
1000d5e8:	10017c92 	.word	0x10017c92
1000d5ec:	10017ed0 	.word	0x10017ed0
1000d5f0:	100107e7 	.word	0x100107e7
1000d5f4:	1000d429 	.word	0x1000d429

1000d5f8 <check_ConnData_idx_role>:
1000d5f8:	4b0c      	ldr	r3, [pc, #48]	; (1000d62c <check_ConnData_idx_role+0x34>)
1000d5fa:	b570      	push	{r4, r5, r6, lr}
1000d5fc:	1c04      	adds	r4, r0, #0
1000d5fe:	2008      	movs	r0, #8
1000d600:	429c      	cmp	r4, r3
1000d602:	d011      	beq.n	1000d628 <check_ConnData_idx_role+0x30>
1000d604:	2300      	movs	r3, #0
1000d606:	2212      	movs	r2, #18
1000d608:	435a      	muls	r2, r3
1000d60a:	4d09      	ldr	r5, [pc, #36]	; (1000d630 <check_ConnData_idx_role+0x38>)
1000d60c:	b2d8      	uxtb	r0, r3
1000d60e:	1956      	adds	r6, r2, r5
1000d610:	8976      	ldrh	r6, [r6, #10]
1000d612:	42a6      	cmp	r6, r4
1000d614:	d104      	bne.n	1000d620 <check_ConnData_idx_role+0x28>
1000d616:	2900      	cmp	r1, #0
1000d618:	d006      	beq.n	1000d628 <check_ConnData_idx_role+0x30>
1000d61a:	5d53      	ldrb	r3, [r2, r5]
1000d61c:	700b      	strb	r3, [r1, #0]
1000d61e:	e003      	b.n	1000d628 <check_ConnData_idx_role+0x30>
1000d620:	3301      	adds	r3, #1
1000d622:	2b08      	cmp	r3, #8
1000d624:	d1ef      	bne.n	1000d606 <check_ConnData_idx_role+0xe>
1000d626:	1c18      	adds	r0, r3, #0
1000d628:	bd70      	pop	{r4, r5, r6, pc}
1000d62a:	46c0      	nop			; (mov r8, r8)
1000d62c:	0000ffff 	.word	0x0000ffff
1000d630:	10017b56 	.word	0x10017b56

1000d634 <check_ConnData_emptyEntry>:
1000d634:	2300      	movs	r3, #0
1000d636:	2212      	movs	r2, #18
1000d638:	435a      	muls	r2, r3
1000d63a:	4906      	ldr	r1, [pc, #24]	; (1000d654 <check_ConnData_emptyEntry+0x20>)
1000d63c:	b2d8      	uxtb	r0, r3
1000d63e:	1852      	adds	r2, r2, r1
1000d640:	8951      	ldrh	r1, [r2, #10]
1000d642:	4a05      	ldr	r2, [pc, #20]	; (1000d658 <check_ConnData_emptyEntry+0x24>)
1000d644:	4291      	cmp	r1, r2
1000d646:	d003      	beq.n	1000d650 <check_ConnData_emptyEntry+0x1c>
1000d648:	3301      	adds	r3, #1
1000d64a:	2b08      	cmp	r3, #8
1000d64c:	d1f3      	bne.n	1000d636 <check_ConnData_emptyEntry+0x2>
1000d64e:	1c18      	adds	r0, r3, #0
1000d650:	4770      	bx	lr
1000d652:	46c0      	nop			; (mov r8, r8)
1000d654:	10017b56 	.word	0x10017b56
1000d658:	0000ffff 	.word	0x0000ffff

1000d65c <gapc_cmp_evt>:
1000d65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d65e:	780b      	ldrb	r3, [r1, #0]
1000d660:	1c05      	adds	r5, r0, #0
1000d662:	1e58      	subs	r0, r3, #1
1000d664:	784e      	ldrb	r6, [r1, #1]
1000d666:	280f      	cmp	r0, #15
1000d668:	d85a      	bhi.n	1000d720 <gapc_cmp_evt+0xc4>
1000d66a:	1c14      	adds	r4, r2, #0
1000d66c:	f001 fb9a 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000d670:	5858440a 	.word	0x5858440a
1000d674:	4b584444 	.word	0x4b584444
1000d678:	0825122d 	.word	0x0825122d
1000d67c:	3e395858 	.word	0x3e395858
1000d680:	203b      	movs	r0, #59	; 0x3b
1000d682:	e04e      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d684:	203b      	movs	r0, #59	; 0x3b
1000d686:	2e00      	cmp	r6, #0
1000d688:	d04b      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d68a:	0a2d      	lsrs	r5, r5, #8
1000d68c:	8015      	strh	r5, [r2, #0]
1000d68e:	7096      	strb	r6, [r2, #2]
1000d690:	3835      	subs	r0, #53	; 0x35
1000d692:	e046      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d694:	466b      	mov	r3, sp
1000d696:	1ddf      	adds	r7, r3, #7
1000d698:	2301      	movs	r3, #1
1000d69a:	0a2d      	lsrs	r5, r5, #8
1000d69c:	703b      	strb	r3, [r7, #0]
1000d69e:	1c28      	adds	r0, r5, #0
1000d6a0:	1c39      	adds	r1, r7, #0
1000d6a2:	4b20      	ldr	r3, [pc, #128]	; (1000d724 <gapc_cmp_evt+0xc8>)
1000d6a4:	4798      	blx	r3
1000d6a6:	2807      	cmp	r0, #7
1000d6a8:	d803      	bhi.n	1000d6b2 <gapc_cmp_evt+0x56>
1000d6aa:	783b      	ldrb	r3, [r7, #0]
1000d6ac:	203b      	movs	r0, #59	; 0x3b
1000d6ae:	2b00      	cmp	r3, #0
1000d6b0:	d037      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6b2:	8065      	strh	r5, [r4, #2]
1000d6b4:	7126      	strb	r6, [r4, #4]
1000d6b6:	2009      	movs	r0, #9
1000d6b8:	e033      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6ba:	203b      	movs	r0, #59	; 0x3b
1000d6bc:	2e00      	cmp	r6, #0
1000d6be:	d030      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6c0:	0a2d      	lsrs	r5, r5, #8
1000d6c2:	8015      	strh	r5, [r2, #0]
1000d6c4:	7096      	strb	r6, [r2, #2]
1000d6c6:	382d      	subs	r0, #45	; 0x2d
1000d6c8:	e02b      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6ca:	203b      	movs	r0, #59	; 0x3b
1000d6cc:	2e00      	cmp	r6, #0
1000d6ce:	d028      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6d0:	2300      	movs	r3, #0
1000d6d2:	0a2d      	lsrs	r5, r5, #8
1000d6d4:	8015      	strh	r5, [r2, #0]
1000d6d6:	7096      	strb	r6, [r2, #2]
1000d6d8:	8093      	strh	r3, [r2, #4]
1000d6da:	80d3      	strh	r3, [r2, #6]
1000d6dc:	8113      	strh	r3, [r2, #8]
1000d6de:	3834      	subs	r0, #52	; 0x34
1000d6e0:	e01f      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6e2:	203b      	movs	r0, #59	; 0x3b
1000d6e4:	2e00      	cmp	r6, #0
1000d6e6:	d01c      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6e8:	7216      	strb	r6, [r2, #8]
1000d6ea:	e003      	b.n	1000d6f4 <gapc_cmp_evt+0x98>
1000d6ec:	203b      	movs	r0, #59	; 0x3b
1000d6ee:	2e00      	cmp	r6, #0
1000d6f0:	d017      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6f2:	7116      	strb	r6, [r2, #4]
1000d6f4:	3812      	subs	r0, #18
1000d6f6:	e014      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6f8:	203b      	movs	r0, #59	; 0x3b
1000d6fa:	2e00      	cmp	r6, #0
1000d6fc:	d011      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d6fe:	7093      	strb	r3, [r2, #2]
1000d700:	70d6      	strb	r6, [r2, #3]
1000d702:	382a      	subs	r0, #42	; 0x2a
1000d704:	e00d      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d706:	203b      	movs	r0, #59	; 0x3b
1000d708:	2e00      	cmp	r6, #0
1000d70a:	d00a      	beq.n	1000d722 <gapc_cmp_evt+0xc6>
1000d70c:	0a2d      	lsrs	r5, r5, #8
1000d70e:	7016      	strb	r6, [r2, #0]
1000d710:	8055      	strh	r5, [r2, #2]
1000d712:	1d10      	adds	r0, r2, #4
1000d714:	2100      	movs	r1, #0
1000d716:	2205      	movs	r2, #5
1000d718:	4b03      	ldr	r3, [pc, #12]	; (1000d728 <gapc_cmp_evt+0xcc>)
1000d71a:	4798      	blx	r3
1000d71c:	2012      	movs	r0, #18
1000d71e:	e000      	b.n	1000d722 <gapc_cmp_evt+0xc6>
1000d720:	2000      	movs	r0, #0
1000d722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d724:	1000d5f9 	.word	0x1000d5f9
1000d728:	100107f9 	.word	0x100107f9

1000d72c <gapc_connection_cfm_handler>:
1000d72c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d72e:	b085      	sub	sp, #20
1000d730:	1c1d      	adds	r5, r3, #0
1000d732:	ab0a      	add	r3, sp, #40	; 0x28
1000d734:	781b      	ldrb	r3, [r3, #0]
1000d736:	9201      	str	r2, [sp, #4]
1000d738:	9302      	str	r3, [sp, #8]
1000d73a:	ab0b      	add	r3, sp, #44	; 0x2c
1000d73c:	781b      	ldrb	r3, [r3, #0]
1000d73e:	1c07      	adds	r7, r0, #0
1000d740:	9303      	str	r3, [sp, #12]
1000d742:	ab0c      	add	r3, sp, #48	; 0x30
1000d744:	881a      	ldrh	r2, [r3, #0]
1000d746:	2302      	movs	r3, #2
1000d748:	1c0e      	adds	r6, r1, #0
1000d74a:	4c23      	ldr	r4, [pc, #140]	; (1000d7d8 <gapc_connection_cfm_handler+0xac>)
1000d74c:	1c39      	adds	r1, r7, #0
1000d74e:	7023      	strb	r3, [r4, #0]
1000d750:	330c      	adds	r3, #12
1000d752:	7063      	strb	r3, [r4, #1]
1000d754:	70a3      	strb	r3, [r4, #2]
1000d756:	4b21      	ldr	r3, [pc, #132]	; (1000d7dc <gapc_connection_cfm_handler+0xb0>)
1000d758:	70e2      	strb	r2, [r4, #3]
1000d75a:	881a      	ldrh	r2, [r3, #0]
1000d75c:	881b      	ldrh	r3, [r3, #0]
1000d75e:	7122      	strb	r2, [r4, #4]
1000d760:	0a1b      	lsrs	r3, r3, #8
1000d762:	4f1f      	ldr	r7, [pc, #124]	; (1000d7e0 <gapc_connection_cfm_handler+0xb4>)
1000d764:	2210      	movs	r2, #16
1000d766:	481f      	ldr	r0, [pc, #124]	; (1000d7e4 <gapc_connection_cfm_handler+0xb8>)
1000d768:	7163      	strb	r3, [r4, #5]
1000d76a:	47b8      	blx	r7
1000d76c:	0a33      	lsrs	r3, r6, #8
1000d76e:	7626      	strb	r6, [r4, #24]
1000d770:	7663      	strb	r3, [r4, #25]
1000d772:	9901      	ldr	r1, [sp, #4]
1000d774:	0c33      	lsrs	r3, r6, #16
1000d776:	2210      	movs	r2, #16
1000d778:	0e36      	lsrs	r6, r6, #24
1000d77a:	481b      	ldr	r0, [pc, #108]	; (1000d7e8 <gapc_connection_cfm_handler+0xbc>)
1000d77c:	76a3      	strb	r3, [r4, #26]
1000d77e:	76e6      	strb	r6, [r4, #27]
1000d780:	47b8      	blx	r7
1000d782:	1c23      	adds	r3, r4, #0
1000d784:	332c      	adds	r3, #44	; 0x2c
1000d786:	701d      	strb	r5, [r3, #0]
1000d788:	1c23      	adds	r3, r4, #0
1000d78a:	0a2a      	lsrs	r2, r5, #8
1000d78c:	332d      	adds	r3, #45	; 0x2d
1000d78e:	701a      	strb	r2, [r3, #0]
1000d790:	1c23      	adds	r3, r4, #0
1000d792:	0c2a      	lsrs	r2, r5, #16
1000d794:	332e      	adds	r3, #46	; 0x2e
1000d796:	701a      	strb	r2, [r3, #0]
1000d798:	1c23      	adds	r3, r4, #0
1000d79a:	0e2d      	lsrs	r5, r5, #24
1000d79c:	332f      	adds	r3, #47	; 0x2f
1000d79e:	466a      	mov	r2, sp
1000d7a0:	701d      	strb	r5, [r3, #0]
1000d7a2:	1c23      	adds	r3, r4, #0
1000d7a4:	7a12      	ldrb	r2, [r2, #8]
1000d7a6:	3330      	adds	r3, #48	; 0x30
1000d7a8:	701a      	strb	r2, [r3, #0]
1000d7aa:	1c23      	adds	r3, r4, #0
1000d7ac:	2500      	movs	r5, #0
1000d7ae:	3331      	adds	r3, #49	; 0x31
1000d7b0:	466a      	mov	r2, sp
1000d7b2:	701d      	strb	r5, [r3, #0]
1000d7b4:	1c23      	adds	r3, r4, #0
1000d7b6:	7b12      	ldrb	r2, [r2, #12]
1000d7b8:	3332      	adds	r3, #50	; 0x32
1000d7ba:	701a      	strb	r2, [r3, #0]
1000d7bc:	1c23      	adds	r3, r4, #0
1000d7be:	3333      	adds	r3, #51	; 0x33
1000d7c0:	701d      	strb	r5, [r3, #0]
1000d7c2:	232c      	movs	r3, #44	; 0x2c
1000d7c4:	1c20      	adds	r0, r4, #0
1000d7c6:	71a3      	strb	r3, [r4, #6]
1000d7c8:	2134      	movs	r1, #52	; 0x34
1000d7ca:	4b08      	ldr	r3, [pc, #32]	; (1000d7ec <gapc_connection_cfm_handler+0xc0>)
1000d7cc:	71e5      	strb	r5, [r4, #7]
1000d7ce:	4798      	blx	r3
1000d7d0:	1c28      	adds	r0, r5, #0
1000d7d2:	b005      	add	sp, #20
1000d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7d6:	46c0      	nop			; (mov r8, r8)
1000d7d8:	10017ec4 	.word	0x10017ec4
1000d7dc:	10017b54 	.word	0x10017b54
1000d7e0:	100107e7 	.word	0x100107e7
1000d7e4:	10017ecc 	.word	0x10017ecc
1000d7e8:	10017ee0 	.word	0x10017ee0
1000d7ec:	1000d429 	.word	0x1000d429

1000d7f0 <gapc_con_req_ind>:
1000d7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7f2:	7845      	ldrb	r5, [r0, #1]
1000d7f4:	7803      	ldrb	r3, [r0, #0]
1000d7f6:	4c30      	ldr	r4, [pc, #192]	; (1000d8b8 <gapc_con_req_ind+0xc8>)
1000d7f8:	022d      	lsls	r5, r5, #8
1000d7fa:	431d      	orrs	r5, r3
1000d7fc:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d7fe:	78c3      	ldrb	r3, [r0, #3]
1000d800:	7882      	ldrb	r2, [r0, #2]
1000d802:	b08b      	sub	sp, #44	; 0x2c
1000d804:	021b      	lsls	r3, r3, #8
1000d806:	431a      	orrs	r2, r3
1000d808:	466b      	mov	r3, sp
1000d80a:	9205      	str	r2, [sp, #20]
1000d80c:	8a9b      	ldrh	r3, [r3, #20]
1000d80e:	2120      	movs	r1, #32
1000d810:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d812:	7943      	ldrb	r3, [r0, #5]
1000d814:	7902      	ldrb	r2, [r0, #4]
1000d816:	021b      	lsls	r3, r3, #8
1000d818:	431a      	orrs	r2, r3
1000d81a:	466b      	mov	r3, sp
1000d81c:	9206      	str	r2, [sp, #24]
1000d81e:	8b1b      	ldrh	r3, [r3, #24]
1000d820:	1c06      	adds	r6, r0, #0
1000d822:	8623      	strh	r3, [r4, #48]	; 0x30
1000d824:	79c3      	ldrb	r3, [r0, #7]
1000d826:	7982      	ldrb	r2, [r0, #6]
1000d828:	021b      	lsls	r3, r3, #8
1000d82a:	431a      	orrs	r2, r3
1000d82c:	466b      	mov	r3, sp
1000d82e:	9207      	str	r2, [sp, #28]
1000d830:	466a      	mov	r2, sp
1000d832:	8b9b      	ldrh	r3, [r3, #28]
1000d834:	1852      	adds	r2, r2, r1
1000d836:	8663      	strh	r3, [r4, #50]	; 0x32
1000d838:	7a43      	ldrb	r3, [r0, #9]
1000d83a:	1c01      	adds	r1, r0, #0
1000d83c:	9308      	str	r3, [sp, #32]
1000d83e:	1c23      	adds	r3, r4, #0
1000d840:	7812      	ldrb	r2, [r2, #0]
1000d842:	3377      	adds	r3, #119	; 0x77
1000d844:	3478      	adds	r4, #120	; 0x78
1000d846:	701a      	strb	r2, [r3, #0]
1000d848:	310a      	adds	r1, #10
1000d84a:	2206      	movs	r2, #6
1000d84c:	4b1b      	ldr	r3, [pc, #108]	; (1000d8bc <gapc_con_req_ind+0xcc>)
1000d84e:	1c20      	adds	r0, r4, #0
1000d850:	4798      	blx	r3
1000d852:	7c33      	ldrb	r3, [r6, #16]
1000d854:	9309      	str	r3, [sp, #36]	; 0x24
1000d856:	4b1a      	ldr	r3, [pc, #104]	; (1000d8c0 <gapc_con_req_ind+0xd0>)
1000d858:	4798      	blx	r3
1000d85a:	4e1a      	ldr	r6, [pc, #104]	; (1000d8c4 <gapc_con_req_ind+0xd4>)
1000d85c:	1e07      	subs	r7, r0, #0
1000d85e:	2f07      	cmp	r7, #7
1000d860:	d81b      	bhi.n	1000d89a <gapc_con_req_ind+0xaa>
1000d862:	2312      	movs	r3, #18
1000d864:	4343      	muls	r3, r0
1000d866:	18f0      	adds	r0, r6, r3
1000d868:	8145      	strh	r5, [r0, #10]
1000d86a:	4669      	mov	r1, sp
1000d86c:	2524      	movs	r5, #36	; 0x24
1000d86e:	1949      	adds	r1, r1, r5
1000d870:	7809      	ldrb	r1, [r1, #0]
1000d872:	2206      	movs	r2, #6
1000d874:	54f1      	strb	r1, [r6, r3]
1000d876:	2120      	movs	r1, #32
1000d878:	466b      	mov	r3, sp
1000d87a:	185b      	adds	r3, r3, r1
1000d87c:	781b      	ldrb	r3, [r3, #0]
1000d87e:	1c21      	adds	r1, r4, #0
1000d880:	7043      	strb	r3, [r0, #1]
1000d882:	466b      	mov	r3, sp
1000d884:	8a9b      	ldrh	r3, [r3, #20]
1000d886:	3002      	adds	r0, #2
1000d888:	8143      	strh	r3, [r0, #10]
1000d88a:	466b      	mov	r3, sp
1000d88c:	8b1b      	ldrh	r3, [r3, #24]
1000d88e:	8183      	strh	r3, [r0, #12]
1000d890:	466b      	mov	r3, sp
1000d892:	8b9b      	ldrh	r3, [r3, #28]
1000d894:	81c3      	strh	r3, [r0, #14]
1000d896:	4b09      	ldr	r3, [pc, #36]	; (1000d8bc <gapc_con_req_ind+0xcc>)
1000d898:	4798      	blx	r3
1000d89a:	2112      	movs	r1, #18
1000d89c:	2300      	movs	r3, #0
1000d89e:	434f      	muls	r7, r1
1000d8a0:	9300      	str	r3, [sp, #0]
1000d8a2:	9301      	str	r3, [sp, #4]
1000d8a4:	19f6      	adds	r6, r6, r7
1000d8a6:	8971      	ldrh	r1, [r6, #10]
1000d8a8:	4a07      	ldr	r2, [pc, #28]	; (1000d8c8 <gapc_con_req_ind+0xd8>)
1000d8aa:	9102      	str	r1, [sp, #8]
1000d8ac:	1c10      	adds	r0, r2, #0
1000d8ae:	1c19      	adds	r1, r3, #0
1000d8b0:	4c06      	ldr	r4, [pc, #24]	; (1000d8cc <gapc_con_req_ind+0xdc>)
1000d8b2:	47a0      	blx	r4
1000d8b4:	b00b      	add	sp, #44	; 0x2c
1000d8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8b8:	10017be6 	.word	0x10017be6
1000d8bc:	100107e7 	.word	0x100107e7
1000d8c0:	1000d635 	.word	0x1000d635
1000d8c4:	10017b56 	.word	0x10017b56
1000d8c8:	10016e54 	.word	0x10016e54
1000d8cc:	1000d72d 	.word	0x1000d72d

1000d8d0 <gapc_disconnect_cmd_handler>:
1000d8d0:	2204      	movs	r2, #4
1000d8d2:	b510      	push	{r4, lr}
1000d8d4:	4b0c      	ldr	r3, [pc, #48]	; (1000d908 <gapc_disconnect_cmd_handler+0x38>)
1000d8d6:	2400      	movs	r4, #0
1000d8d8:	701a      	strb	r2, [r3, #0]
1000d8da:	320a      	adds	r2, #10
1000d8dc:	705a      	strb	r2, [r3, #1]
1000d8de:	709a      	strb	r2, [r3, #2]
1000d8e0:	4a0a      	ldr	r2, [pc, #40]	; (1000d90c <gapc_disconnect_cmd_handler+0x3c>)
1000d8e2:	70d9      	strb	r1, [r3, #3]
1000d8e4:	8811      	ldrh	r1, [r2, #0]
1000d8e6:	8812      	ldrh	r2, [r2, #0]
1000d8e8:	7119      	strb	r1, [r3, #4]
1000d8ea:	0a12      	lsrs	r2, r2, #8
1000d8ec:	715a      	strb	r2, [r3, #5]
1000d8ee:	2201      	movs	r2, #1
1000d8f0:	721a      	strb	r2, [r3, #8]
1000d8f2:	1892      	adds	r2, r2, r2
1000d8f4:	7258      	strb	r0, [r3, #9]
1000d8f6:	719a      	strb	r2, [r3, #6]
1000d8f8:	71dc      	strb	r4, [r3, #7]
1000d8fa:	1c18      	adds	r0, r3, #0
1000d8fc:	210a      	movs	r1, #10
1000d8fe:	4b04      	ldr	r3, [pc, #16]	; (1000d910 <gapc_disconnect_cmd_handler+0x40>)
1000d900:	4798      	blx	r3
1000d902:	1c20      	adds	r0, r4, #0
1000d904:	bd10      	pop	{r4, pc}
1000d906:	46c0      	nop			; (mov r8, r8)
1000d908:	10017ec4 	.word	0x10017ec4
1000d90c:	10017b54 	.word	0x10017b54
1000d910:	1000d429 	.word	0x1000d429

1000d914 <gapc_disconnect_ind>:
1000d914:	1c02      	adds	r2, r0, #0
1000d916:	b508      	push	{r3, lr}
1000d918:	7843      	ldrb	r3, [r0, #1]
1000d91a:	7800      	ldrb	r0, [r0, #0]
1000d91c:	021b      	lsls	r3, r3, #8
1000d91e:	4318      	orrs	r0, r3
1000d920:	8008      	strh	r0, [r1, #0]
1000d922:	7893      	ldrb	r3, [r2, #2]
1000d924:	708b      	strb	r3, [r1, #2]
1000d926:	2100      	movs	r1, #0
1000d928:	4b05      	ldr	r3, [pc, #20]	; (1000d940 <gapc_disconnect_ind+0x2c>)
1000d92a:	4798      	blx	r3
1000d92c:	2807      	cmp	r0, #7
1000d92e:	d806      	bhi.n	1000d93e <gapc_disconnect_ind+0x2a>
1000d930:	2312      	movs	r3, #18
1000d932:	4358      	muls	r0, r3
1000d934:	4b03      	ldr	r3, [pc, #12]	; (1000d944 <gapc_disconnect_ind+0x30>)
1000d936:	1818      	adds	r0, r3, r0
1000d938:	2301      	movs	r3, #1
1000d93a:	425b      	negs	r3, r3
1000d93c:	8143      	strh	r3, [r0, #10]
1000d93e:	bd08      	pop	{r3, pc}
1000d940:	1000d5f9 	.word	0x1000d5f9
1000d944:	10017b56 	.word	0x10017b56

1000d948 <gapc_bond_cmd_handler>:
1000d948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d94a:	9300      	str	r3, [sp, #0]
1000d94c:	2312      	movs	r3, #18
1000d94e:	1c04      	adds	r4, r0, #0
1000d950:	a808      	add	r0, sp, #32
1000d952:	7807      	ldrb	r7, [r0, #0]
1000d954:	a809      	add	r0, sp, #36	; 0x24
1000d956:	7806      	ldrb	r6, [r0, #0]
1000d958:	a80a      	add	r0, sp, #40	; 0x28
1000d95a:	7805      	ldrb	r5, [r0, #0]
1000d95c:	a80b      	add	r0, sp, #44	; 0x2c
1000d95e:	7800      	ldrb	r0, [r0, #0]
1000d960:	9001      	str	r0, [sp, #4]
1000d962:	4810      	ldr	r0, [pc, #64]	; (1000d9a4 <gapc_bond_cmd_handler+0x5c>)
1000d964:	7003      	strb	r3, [r0, #0]
1000d966:	230e      	movs	r3, #14
1000d968:	70c4      	strb	r4, [r0, #3]
1000d96a:	4c0f      	ldr	r4, [pc, #60]	; (1000d9a8 <gapc_bond_cmd_handler+0x60>)
1000d96c:	7043      	strb	r3, [r0, #1]
1000d96e:	7083      	strb	r3, [r0, #2]
1000d970:	8823      	ldrh	r3, [r4, #0]
1000d972:	8824      	ldrh	r4, [r4, #0]
1000d974:	7103      	strb	r3, [r0, #4]
1000d976:	466b      	mov	r3, sp
1000d978:	781b      	ldrb	r3, [r3, #0]
1000d97a:	0a24      	lsrs	r4, r4, #8
1000d97c:	72c3      	strb	r3, [r0, #11]
1000d97e:	466b      	mov	r3, sp
1000d980:	791b      	ldrb	r3, [r3, #4]
1000d982:	7144      	strb	r4, [r0, #5]
1000d984:	73c3      	strb	r3, [r0, #15]
1000d986:	2308      	movs	r3, #8
1000d988:	7183      	strb	r3, [r0, #6]
1000d98a:	2300      	movs	r3, #0
1000d98c:	240a      	movs	r4, #10
1000d98e:	7241      	strb	r1, [r0, #9]
1000d990:	71c3      	strb	r3, [r0, #7]
1000d992:	2110      	movs	r1, #16
1000d994:	4b05      	ldr	r3, [pc, #20]	; (1000d9ac <gapc_bond_cmd_handler+0x64>)
1000d996:	7307      	strb	r7, [r0, #12]
1000d998:	7346      	strb	r6, [r0, #13]
1000d99a:	7385      	strb	r5, [r0, #14]
1000d99c:	7204      	strb	r4, [r0, #8]
1000d99e:	7282      	strb	r2, [r0, #10]
1000d9a0:	4798      	blx	r3
1000d9a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d9a4:	10017ec4 	.word	0x10017ec4
1000d9a8:	10017b54 	.word	0x10017b54
1000d9ac:	1000d429 	.word	0x1000d429

1000d9b0 <gapc_bond_ind>:
1000d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d9b2:	780e      	ldrb	r6, [r1, #0]
1000d9b4:	1c03      	adds	r3, r0, #0
1000d9b6:	1eb0      	subs	r0, r6, #2
1000d9b8:	2805      	cmp	r0, #5
1000d9ba:	d85d      	bhi.n	1000da78 <gapc_bond_ind+0xc8>
1000d9bc:	1c15      	adds	r5, r2, #0
1000d9be:	1c0c      	adds	r4, r1, #0
1000d9c0:	f001 f9f0 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000d9c4:	2f5a030d 	.word	0x2f5a030d
1000d9c8:	4740      	.short	0x4740
1000d9ca:	2009      	movs	r0, #9
1000d9cc:	2a00      	cmp	r2, #0
1000d9ce:	d054      	beq.n	1000da7a <gapc_bond_ind+0xca>
1000d9d0:	0a1b      	lsrs	r3, r3, #8
1000d9d2:	8053      	strh	r3, [r2, #2]
1000d9d4:	788b      	ldrb	r3, [r1, #2]
1000d9d6:	4829      	ldr	r0, [pc, #164]	; (1000da7c <gapc_bond_ind+0xcc>)
1000d9d8:	7113      	strb	r3, [r2, #4]
1000d9da:	2100      	movs	r1, #0
1000d9dc:	e01c      	b.n	1000da18 <gapc_bond_ind+0x68>
1000d9de:	2009      	movs	r0, #9
1000d9e0:	2a00      	cmp	r2, #0
1000d9e2:	d04a      	beq.n	1000da7a <gapc_bond_ind+0xca>
1000d9e4:	4c25      	ldr	r4, [pc, #148]	; (1000da7c <gapc_bond_ind+0xcc>)
1000d9e6:	0a1b      	lsrs	r3, r3, #8
1000d9e8:	8053      	strh	r3, [r2, #2]
1000d9ea:	788b      	ldrb	r3, [r1, #2]
1000d9ec:	2700      	movs	r7, #0
1000d9ee:	1c10      	adds	r0, r2, #0
1000d9f0:	1c21      	adds	r1, r4, #0
1000d9f2:	7013      	strb	r3, [r2, #0]
1000d9f4:	4e22      	ldr	r6, [pc, #136]	; (1000da80 <gapc_bond_ind+0xd0>)
1000d9f6:	7117      	strb	r7, [r2, #4]
1000d9f8:	312e      	adds	r1, #46	; 0x2e
1000d9fa:	2217      	movs	r2, #23
1000d9fc:	3032      	adds	r0, #50	; 0x32
1000d9fe:	47b0      	blx	r6
1000da00:	1c28      	adds	r0, r5, #0
1000da02:	1c21      	adds	r1, r4, #0
1000da04:	2210      	movs	r2, #16
1000da06:	311e      	adds	r1, #30
1000da08:	3022      	adds	r0, #34	; 0x22
1000da0a:	47b0      	blx	r6
1000da0c:	1ca1      	adds	r1, r4, #2
1000da0e:	1da8      	adds	r0, r5, #6
1000da10:	221c      	movs	r2, #28
1000da12:	47b0      	blx	r6
1000da14:	1c20      	adds	r0, r4, #0
1000da16:	1c39      	adds	r1, r7, #0
1000da18:	2246      	movs	r2, #70	; 0x46
1000da1a:	4b1a      	ldr	r3, [pc, #104]	; (1000da84 <gapc_bond_ind+0xd4>)
1000da1c:	4798      	blx	r3
1000da1e:	2009      	movs	r0, #9
1000da20:	e02b      	b.n	1000da7a <gapc_bond_ind+0xca>
1000da22:	4d16      	ldr	r5, [pc, #88]	; (1000da7c <gapc_bond_ind+0xcc>)
1000da24:	3102      	adds	r1, #2
1000da26:	1c28      	adds	r0, r5, #0
1000da28:	2210      	movs	r2, #16
1000da2a:	4e15      	ldr	r6, [pc, #84]	; (1000da80 <gapc_bond_ind+0xd0>)
1000da2c:	302e      	adds	r0, #46	; 0x2e
1000da2e:	47b0      	blx	r6
1000da30:	1c28      	adds	r0, r5, #0
1000da32:	1c21      	adds	r1, r4, #0
1000da34:	303f      	adds	r0, #63	; 0x3f
1000da36:	3112      	adds	r1, #18
1000da38:	2206      	movs	r2, #6
1000da3a:	47b0      	blx	r6
1000da3c:	7e23      	ldrb	r3, [r4, #24]
1000da3e:	353e      	adds	r5, #62	; 0x3e
1000da40:	702b      	strb	r3, [r5, #0]
1000da42:	e019      	b.n	1000da78 <gapc_bond_ind+0xc8>
1000da44:	480d      	ldr	r0, [pc, #52]	; (1000da7c <gapc_bond_ind+0xcc>)
1000da46:	3102      	adds	r1, #2
1000da48:	2210      	movs	r2, #16
1000da4a:	4b0d      	ldr	r3, [pc, #52]	; (1000da80 <gapc_bond_ind+0xd0>)
1000da4c:	301e      	adds	r0, #30
1000da4e:	4798      	blx	r3
1000da50:	e012      	b.n	1000da78 <gapc_bond_ind+0xc8>
1000da52:	4d0a      	ldr	r5, [pc, #40]	; (1000da7c <gapc_bond_ind+0xcc>)
1000da54:	3102      	adds	r1, #2
1000da56:	2210      	movs	r2, #16
1000da58:	4e09      	ldr	r6, [pc, #36]	; (1000da80 <gapc_bond_ind+0xd0>)
1000da5a:	1ca8      	adds	r0, r5, #2
1000da5c:	47b0      	blx	r6
1000da5e:	1c28      	adds	r0, r5, #0
1000da60:	1c21      	adds	r1, r4, #0
1000da62:	7ce3      	ldrb	r3, [r4, #19]
1000da64:	7ca2      	ldrb	r2, [r4, #18]
1000da66:	021b      	lsls	r3, r3, #8
1000da68:	4313      	orrs	r3, r2
1000da6a:	3014      	adds	r0, #20
1000da6c:	3114      	adds	r1, #20
1000da6e:	2208      	movs	r2, #8
1000da70:	826b      	strh	r3, [r5, #18]
1000da72:	47b0      	blx	r6
1000da74:	7f23      	ldrb	r3, [r4, #28]
1000da76:	772b      	strb	r3, [r5, #28]
1000da78:	2000      	movs	r0, #0
1000da7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000da7c:	10016e84 	.word	0x10016e84
1000da80:	100107e7 	.word	0x100107e7
1000da84:	100107f9 	.word	0x100107f9

1000da88 <gapc_bond_req_ind>:
1000da88:	b570      	push	{r4, r5, r6, lr}
1000da8a:	780c      	ldrb	r4, [r1, #0]
1000da8c:	1c03      	adds	r3, r0, #0
1000da8e:	7849      	ldrb	r1, [r1, #1]
1000da90:	2c07      	cmp	r4, #7
1000da92:	d85c      	bhi.n	1000db4e <gapc_bond_req_ind+0xc6>
1000da94:	1c20      	adds	r0, r4, #0
1000da96:	f001 f985 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000da9a:	5a04      	.short	0x5a04
1000da9c:	5a0b5a5a 	.word	0x5a0b5a5a
1000daa0:	1f1f      	.short	0x1f1f
1000daa2:	200a      	movs	r0, #10
1000daa4:	2a00      	cmp	r2, #0
1000daa6:	d053      	beq.n	1000db50 <gapc_bond_req_ind+0xc8>
1000daa8:	0a1b      	lsrs	r3, r3, #8
1000daaa:	8013      	strh	r3, [r2, #0]
1000daac:	7091      	strb	r1, [r2, #2]
1000daae:	e04f      	b.n	1000db50 <gapc_bond_req_ind+0xc8>
1000dab0:	2a00      	cmp	r2, #0
1000dab2:	d00b      	beq.n	1000dacc <gapc_bond_req_ind+0x44>
1000dab4:	0a1b      	lsrs	r3, r3, #8
1000dab6:	8013      	strh	r3, [r2, #0]
1000dab8:	2900      	cmp	r1, #0
1000daba:	d102      	bne.n	1000dac2 <gapc_bond_req_ind+0x3a>
1000dabc:	2301      	movs	r3, #1
1000dabe:	7093      	strb	r3, [r2, #2]
1000dac0:	e004      	b.n	1000dacc <gapc_bond_req_ind+0x44>
1000dac2:	2300      	movs	r3, #0
1000dac4:	7093      	strb	r3, [r2, #2]
1000dac6:	2902      	cmp	r1, #2
1000dac8:	d102      	bne.n	1000dad0 <gapc_bond_req_ind+0x48>
1000daca:	70d3      	strb	r3, [r2, #3]
1000dacc:	200c      	movs	r0, #12
1000dace:	e03f      	b.n	1000db50 <gapc_bond_req_ind+0xc8>
1000dad0:	2901      	cmp	r1, #1
1000dad2:	d1fb      	bne.n	1000dacc <gapc_bond_req_ind+0x44>
1000dad4:	70d1      	strb	r1, [r2, #3]
1000dad6:	e7f9      	b.n	1000dacc <gapc_bond_req_ind+0x44>
1000dad8:	2214      	movs	r2, #20
1000dada:	481e      	ldr	r0, [pc, #120]	; (1000db54 <gapc_bond_req_ind+0xcc>)
1000dadc:	0a1b      	lsrs	r3, r3, #8
1000dade:	70c3      	strb	r3, [r0, #3]
1000dae0:	4b1d      	ldr	r3, [pc, #116]	; (1000db58 <gapc_bond_req_ind+0xd0>)
1000dae2:	7002      	strb	r2, [r0, #0]
1000dae4:	3a06      	subs	r2, #6
1000dae6:	7042      	strb	r2, [r0, #1]
1000dae8:	7082      	strb	r2, [r0, #2]
1000daea:	881a      	ldrh	r2, [r3, #0]
1000daec:	881b      	ldrh	r3, [r3, #0]
1000daee:	4e1b      	ldr	r6, [pc, #108]	; (1000db5c <gapc_bond_req_ind+0xd4>)
1000daf0:	0a1b      	lsrs	r3, r3, #8
1000daf2:	7143      	strb	r3, [r0, #5]
1000daf4:	2301      	movs	r3, #1
1000daf6:	7102      	strb	r2, [r0, #4]
1000daf8:	7204      	strb	r4, [r0, #8]
1000dafa:	7243      	strb	r3, [r0, #9]
1000dafc:	1c05      	adds	r5, r0, #0
1000dafe:	1c31      	adds	r1, r6, #0
1000db00:	300a      	adds	r0, #10
1000db02:	2c07      	cmp	r4, #7
1000db04:	d116      	bne.n	1000db34 <gapc_bond_req_ind+0xac>
1000db06:	317e      	adds	r1, #126	; 0x7e
1000db08:	2210      	movs	r2, #16
1000db0a:	4c15      	ldr	r4, [pc, #84]	; (1000db60 <gapc_bond_req_ind+0xd8>)
1000db0c:	47a0      	blx	r4
1000db0e:	1c33      	adds	r3, r6, #0
1000db10:	1c31      	adds	r1, r6, #0
1000db12:	1c28      	adds	r0, r5, #0
1000db14:	338e      	adds	r3, #142	; 0x8e
1000db16:	881b      	ldrh	r3, [r3, #0]
1000db18:	3190      	adds	r1, #144	; 0x90
1000db1a:	76ab      	strb	r3, [r5, #26]
1000db1c:	2208      	movs	r2, #8
1000db1e:	0a1b      	lsrs	r3, r3, #8
1000db20:	301c      	adds	r0, #28
1000db22:	76eb      	strb	r3, [r5, #27]
1000db24:	47a0      	blx	r4
1000db26:	1c31      	adds	r1, r6, #0
1000db28:	3198      	adds	r1, #152	; 0x98
1000db2a:	780a      	ldrb	r2, [r1, #0]
1000db2c:	1d6b      	adds	r3, r5, #5
1000db2e:	77da      	strb	r2, [r3, #31]
1000db30:	2125      	movs	r1, #37	; 0x25
1000db32:	e004      	b.n	1000db3e <gapc_bond_req_ind+0xb6>
1000db34:	319a      	adds	r1, #154	; 0x9a
1000db36:	2210      	movs	r2, #16
1000db38:	4b09      	ldr	r3, [pc, #36]	; (1000db60 <gapc_bond_req_ind+0xd8>)
1000db3a:	4798      	blx	r3
1000db3c:	211a      	movs	r1, #26
1000db3e:	1c0b      	adds	r3, r1, #0
1000db40:	2400      	movs	r4, #0
1000db42:	3b08      	subs	r3, #8
1000db44:	71ab      	strb	r3, [r5, #6]
1000db46:	1c28      	adds	r0, r5, #0
1000db48:	4b06      	ldr	r3, [pc, #24]	; (1000db64 <gapc_bond_req_ind+0xdc>)
1000db4a:	71ec      	strb	r4, [r5, #7]
1000db4c:	4798      	blx	r3
1000db4e:	2000      	movs	r0, #0
1000db50:	bd70      	pop	{r4, r5, r6, pc}
1000db52:	46c0      	nop			; (mov r8, r8)
1000db54:	10017ec4 	.word	0x10017ec4
1000db58:	10017b54 	.word	0x10017b54
1000db5c:	10017be6 	.word	0x10017be6
1000db60:	100107e7 	.word	0x100107e7
1000db64:	1000d429 	.word	0x1000d429

1000db68 <gapc_bond_cfm_handler_pair_resp>:
1000db68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db6a:	b085      	sub	sp, #20
1000db6c:	1c07      	adds	r7, r0, #0
1000db6e:	a80a      	add	r0, sp, #40	; 0x28
1000db70:	7806      	ldrb	r6, [r0, #0]
1000db72:	a80b      	add	r0, sp, #44	; 0x2c
1000db74:	7805      	ldrb	r5, [r0, #0]
1000db76:	a80c      	add	r0, sp, #48	; 0x30
1000db78:	7800      	ldrb	r0, [r0, #0]
1000db7a:	2414      	movs	r4, #20
1000db7c:	9002      	str	r0, [sp, #8]
1000db7e:	a80d      	add	r0, sp, #52	; 0x34
1000db80:	7800      	ldrb	r0, [r0, #0]
1000db82:	9301      	str	r3, [sp, #4]
1000db84:	9003      	str	r0, [sp, #12]
1000db86:	a80e      	add	r0, sp, #56	; 0x38
1000db88:	8800      	ldrh	r0, [r0, #0]
1000db8a:	4684      	mov	ip, r0
1000db8c:	4812      	ldr	r0, [pc, #72]	; (1000dbd8 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000db8e:	7004      	strb	r4, [r0, #0]
1000db90:	3c06      	subs	r4, #6
1000db92:	7044      	strb	r4, [r0, #1]
1000db94:	7084      	strb	r4, [r0, #2]
1000db96:	4664      	mov	r4, ip
1000db98:	70c4      	strb	r4, [r0, #3]
1000db9a:	4c10      	ldr	r4, [pc, #64]	; (1000dbdc <gapc_bond_cfm_handler_pair_resp+0x74>)
1000db9c:	7247      	strb	r7, [r0, #9]
1000db9e:	8823      	ldrh	r3, [r4, #0]
1000dba0:	8824      	ldrh	r4, [r4, #0]
1000dba2:	7103      	strb	r3, [r0, #4]
1000dba4:	466b      	mov	r3, sp
1000dba6:	791b      	ldrb	r3, [r3, #4]
1000dba8:	0a24      	lsrs	r4, r4, #8
1000dbaa:	7303      	strb	r3, [r0, #12]
1000dbac:	466b      	mov	r3, sp
1000dbae:	7a1b      	ldrb	r3, [r3, #8]
1000dbb0:	7144      	strb	r4, [r0, #5]
1000dbb2:	73c3      	strb	r3, [r0, #15]
1000dbb4:	466b      	mov	r3, sp
1000dbb6:	7b1b      	ldrb	r3, [r3, #12]
1000dbb8:	2401      	movs	r4, #1
1000dbba:	7403      	strb	r3, [r0, #16]
1000dbbc:	2309      	movs	r3, #9
1000dbbe:	7183      	strb	r3, [r0, #6]
1000dbc0:	2300      	movs	r3, #0
1000dbc2:	7204      	strb	r4, [r0, #8]
1000dbc4:	7281      	strb	r1, [r0, #10]
1000dbc6:	72c2      	strb	r2, [r0, #11]
1000dbc8:	7346      	strb	r6, [r0, #13]
1000dbca:	7385      	strb	r5, [r0, #14]
1000dbcc:	71c3      	strb	r3, [r0, #7]
1000dbce:	2111      	movs	r1, #17
1000dbd0:	4b03      	ldr	r3, [pc, #12]	; (1000dbe0 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000dbd2:	4798      	blx	r3
1000dbd4:	b005      	add	sp, #20
1000dbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dbd8:	10017ec4 	.word	0x10017ec4
1000dbdc:	10017b54 	.word	0x10017b54
1000dbe0:	1000d429 	.word	0x1000d429

1000dbe4 <gapc_bond_cfm_handler_key_exch>:
1000dbe4:	b538      	push	{r3, r4, r5, lr}
1000dbe6:	2514      	movs	r5, #20
1000dbe8:	4c0d      	ldr	r4, [pc, #52]	; (1000dc20 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000dbea:	70e3      	strb	r3, [r4, #3]
1000dbec:	4b0d      	ldr	r3, [pc, #52]	; (1000dc24 <gapc_bond_cfm_handler_key_exch+0x40>)
1000dbee:	7025      	strb	r5, [r4, #0]
1000dbf0:	3d06      	subs	r5, #6
1000dbf2:	7065      	strb	r5, [r4, #1]
1000dbf4:	70a5      	strb	r5, [r4, #2]
1000dbf6:	881d      	ldrh	r5, [r3, #0]
1000dbf8:	881b      	ldrh	r3, [r3, #0]
1000dbfa:	7220      	strb	r0, [r4, #8]
1000dbfc:	0a1b      	lsrs	r3, r3, #8
1000dbfe:	7163      	strb	r3, [r4, #5]
1000dc00:	7261      	strb	r1, [r4, #9]
1000dc02:	4b09      	ldr	r3, [pc, #36]	; (1000dc28 <gapc_bond_cfm_handler_key_exch+0x44>)
1000dc04:	1c11      	adds	r1, r2, #0
1000dc06:	4809      	ldr	r0, [pc, #36]	; (1000dc2c <gapc_bond_cfm_handler_key_exch+0x48>)
1000dc08:	2210      	movs	r2, #16
1000dc0a:	7125      	strb	r5, [r4, #4]
1000dc0c:	4798      	blx	r3
1000dc0e:	2312      	movs	r3, #18
1000dc10:	71a3      	strb	r3, [r4, #6]
1000dc12:	2300      	movs	r3, #0
1000dc14:	1c20      	adds	r0, r4, #0
1000dc16:	71e3      	strb	r3, [r4, #7]
1000dc18:	211a      	movs	r1, #26
1000dc1a:	4b05      	ldr	r3, [pc, #20]	; (1000dc30 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000dc1c:	4798      	blx	r3
1000dc1e:	bd38      	pop	{r3, r4, r5, pc}
1000dc20:	10017ec4 	.word	0x10017ec4
1000dc24:	10017b54 	.word	0x10017b54
1000dc28:	100107e7 	.word	0x100107e7
1000dc2c:	10017ece 	.word	0x10017ece
1000dc30:	1000d429 	.word	0x1000d429

1000dc34 <gapc_security_cmd_handler>:
1000dc34:	221a      	movs	r2, #26
1000dc36:	b508      	push	{r3, lr}
1000dc38:	4b0b      	ldr	r3, [pc, #44]	; (1000dc68 <gapc_security_cmd_handler+0x34>)
1000dc3a:	701a      	strb	r2, [r3, #0]
1000dc3c:	3a0c      	subs	r2, #12
1000dc3e:	705a      	strb	r2, [r3, #1]
1000dc40:	709a      	strb	r2, [r3, #2]
1000dc42:	4a0a      	ldr	r2, [pc, #40]	; (1000dc6c <gapc_security_cmd_handler+0x38>)
1000dc44:	70d8      	strb	r0, [r3, #3]
1000dc46:	8810      	ldrh	r0, [r2, #0]
1000dc48:	8812      	ldrh	r2, [r2, #0]
1000dc4a:	7118      	strb	r0, [r3, #4]
1000dc4c:	0a12      	lsrs	r2, r2, #8
1000dc4e:	715a      	strb	r2, [r3, #5]
1000dc50:	220c      	movs	r2, #12
1000dc52:	721a      	strb	r2, [r3, #8]
1000dc54:	3a0a      	subs	r2, #10
1000dc56:	719a      	strb	r2, [r3, #6]
1000dc58:	2200      	movs	r2, #0
1000dc5a:	7259      	strb	r1, [r3, #9]
1000dc5c:	71da      	strb	r2, [r3, #7]
1000dc5e:	1c18      	adds	r0, r3, #0
1000dc60:	210a      	movs	r1, #10
1000dc62:	4b03      	ldr	r3, [pc, #12]	; (1000dc70 <gapc_security_cmd_handler+0x3c>)
1000dc64:	4798      	blx	r3
1000dc66:	bd08      	pop	{r3, pc}
1000dc68:	10017ec4 	.word	0x10017ec4
1000dc6c:	10017b54 	.word	0x10017b54
1000dc70:	1000d429 	.word	0x1000d429

1000dc74 <gapc_encrypt_cmd_handler>:
1000dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc76:	2500      	movs	r5, #0
1000dc78:	b089      	sub	sp, #36	; 0x24
1000dc7a:	9306      	str	r3, [sp, #24]
1000dc7c:	ab0e      	add	r3, sp, #56	; 0x38
1000dc7e:	781b      	ldrb	r3, [r3, #0]
1000dc80:	1c17      	adds	r7, r2, #0
1000dc82:	9307      	str	r3, [sp, #28]
1000dc84:	ab0f      	add	r3, sp, #60	; 0x3c
1000dc86:	781b      	ldrb	r3, [r3, #0]
1000dc88:	4a19      	ldr	r2, [pc, #100]	; (1000dcf0 <gapc_encrypt_cmd_handler+0x7c>)
1000dc8a:	1c06      	adds	r6, r0, #0
1000dc8c:	9105      	str	r1, [sp, #20]
1000dc8e:	9300      	str	r3, [sp, #0]
1000dc90:	9002      	str	r0, [sp, #8]
1000dc92:	1c29      	adds	r1, r5, #0
1000dc94:	1c2b      	adds	r3, r5, #0
1000dc96:	9501      	str	r5, [sp, #4]
1000dc98:	1c10      	adds	r0, r2, #0
1000dc9a:	4c16      	ldr	r4, [pc, #88]	; (1000dcf4 <gapc_encrypt_cmd_handler+0x80>)
1000dc9c:	47a0      	blx	r4
1000dc9e:	2316      	movs	r3, #22
1000dca0:	4c15      	ldr	r4, [pc, #84]	; (1000dcf8 <gapc_encrypt_cmd_handler+0x84>)
1000dca2:	9905      	ldr	r1, [sp, #20]
1000dca4:	7023      	strb	r3, [r4, #0]
1000dca6:	3b08      	subs	r3, #8
1000dca8:	7063      	strb	r3, [r4, #1]
1000dcaa:	70a3      	strb	r3, [r4, #2]
1000dcac:	4b13      	ldr	r3, [pc, #76]	; (1000dcfc <gapc_encrypt_cmd_handler+0x88>)
1000dcae:	70e6      	strb	r6, [r4, #3]
1000dcb0:	881a      	ldrh	r2, [r3, #0]
1000dcb2:	881b      	ldrh	r3, [r3, #0]
1000dcb4:	7122      	strb	r2, [r4, #4]
1000dcb6:	0a1b      	lsrs	r3, r3, #8
1000dcb8:	7163      	strb	r3, [r4, #5]
1000dcba:	230b      	movs	r3, #11
1000dcbc:	4e10      	ldr	r6, [pc, #64]	; (1000dd00 <gapc_encrypt_cmd_handler+0x8c>)
1000dcbe:	2210      	movs	r2, #16
1000dcc0:	4810      	ldr	r0, [pc, #64]	; (1000dd04 <gapc_encrypt_cmd_handler+0x90>)
1000dcc2:	7223      	strb	r3, [r4, #8]
1000dcc4:	7265      	strb	r5, [r4, #9]
1000dcc6:	47b0      	blx	r6
1000dcc8:	0a3b      	lsrs	r3, r7, #8
1000dcca:	9906      	ldr	r1, [sp, #24]
1000dccc:	2208      	movs	r2, #8
1000dcce:	480e      	ldr	r0, [pc, #56]	; (1000dd08 <gapc_encrypt_cmd_handler+0x94>)
1000dcd0:	76e3      	strb	r3, [r4, #27]
1000dcd2:	76a7      	strb	r7, [r4, #26]
1000dcd4:	47b0      	blx	r6
1000dcd6:	466a      	mov	r2, sp
1000dcd8:	7f12      	ldrb	r2, [r2, #28]
1000dcda:	1d63      	adds	r3, r4, #5
1000dcdc:	77da      	strb	r2, [r3, #31]
1000dcde:	231d      	movs	r3, #29
1000dce0:	1c20      	adds	r0, r4, #0
1000dce2:	71a3      	strb	r3, [r4, #6]
1000dce4:	2125      	movs	r1, #37	; 0x25
1000dce6:	4b09      	ldr	r3, [pc, #36]	; (1000dd0c <gapc_encrypt_cmd_handler+0x98>)
1000dce8:	71e5      	strb	r5, [r4, #7]
1000dcea:	4798      	blx	r3
1000dcec:	b009      	add	sp, #36	; 0x24
1000dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcf0:	10016e64 	.word	0x10016e64
1000dcf4:	1000d72d 	.word	0x1000d72d
1000dcf8:	10017ec4 	.word	0x10017ec4
1000dcfc:	10017b54 	.word	0x10017b54
1000dd00:	100107e7 	.word	0x100107e7
1000dd04:	10017ece 	.word	0x10017ece
1000dd08:	10017ee0 	.word	0x10017ee0
1000dd0c:	1000d429 	.word	0x1000d429

1000dd10 <gapc_encrypt_req_ind>:
1000dd10:	b508      	push	{r3, lr}
1000dd12:	0a00      	lsrs	r0, r0, #8
1000dd14:	8010      	strh	r0, [r2, #0]
1000dd16:	784b      	ldrb	r3, [r1, #1]
1000dd18:	7808      	ldrb	r0, [r1, #0]
1000dd1a:	021b      	lsls	r3, r3, #8
1000dd1c:	4303      	orrs	r3, r0
1000dd1e:	8053      	strh	r3, [r2, #2]
1000dd20:	1d10      	adds	r0, r2, #4
1000dd22:	3102      	adds	r1, #2
1000dd24:	2208      	movs	r2, #8
1000dd26:	4b01      	ldr	r3, [pc, #4]	; (1000dd2c <gapc_encrypt_req_ind+0x1c>)
1000dd28:	4798      	blx	r3
1000dd2a:	bd08      	pop	{r3, pc}
1000dd2c:	100107e7 	.word	0x100107e7

1000dd30 <gapc_encrypt_cfm_handler>:
1000dd30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd32:	2500      	movs	r5, #0
1000dd34:	b087      	sub	sp, #28
1000dd36:	9304      	str	r3, [sp, #16]
1000dd38:	ab0c      	add	r3, sp, #48	; 0x30
1000dd3a:	781b      	ldrb	r3, [r3, #0]
1000dd3c:	1c17      	adds	r7, r2, #0
1000dd3e:	4a15      	ldr	r2, [pc, #84]	; (1000dd94 <gapc_encrypt_cfm_handler+0x64>)
1000dd40:	1c06      	adds	r6, r0, #0
1000dd42:	9305      	str	r3, [sp, #20]
1000dd44:	9100      	str	r1, [sp, #0]
1000dd46:	9002      	str	r0, [sp, #8]
1000dd48:	1c29      	adds	r1, r5, #0
1000dd4a:	1c2b      	adds	r3, r5, #0
1000dd4c:	9501      	str	r5, [sp, #4]
1000dd4e:	1c10      	adds	r0, r2, #0
1000dd50:	4c11      	ldr	r4, [pc, #68]	; (1000dd98 <gapc_encrypt_cfm_handler+0x68>)
1000dd52:	47a0      	blx	r4
1000dd54:	2318      	movs	r3, #24
1000dd56:	4c11      	ldr	r4, [pc, #68]	; (1000dd9c <gapc_encrypt_cfm_handler+0x6c>)
1000dd58:	9904      	ldr	r1, [sp, #16]
1000dd5a:	7023      	strb	r3, [r4, #0]
1000dd5c:	3b0a      	subs	r3, #10
1000dd5e:	7063      	strb	r3, [r4, #1]
1000dd60:	70a3      	strb	r3, [r4, #2]
1000dd62:	4b0f      	ldr	r3, [pc, #60]	; (1000dda0 <gapc_encrypt_cfm_handler+0x70>)
1000dd64:	480f      	ldr	r0, [pc, #60]	; (1000dda4 <gapc_encrypt_cfm_handler+0x74>)
1000dd66:	881a      	ldrh	r2, [r3, #0]
1000dd68:	881b      	ldrh	r3, [r3, #0]
1000dd6a:	7122      	strb	r2, [r4, #4]
1000dd6c:	0a1b      	lsrs	r3, r3, #8
1000dd6e:	7163      	strb	r3, [r4, #5]
1000dd70:	2210      	movs	r2, #16
1000dd72:	4b0d      	ldr	r3, [pc, #52]	; (1000dda8 <gapc_encrypt_cfm_handler+0x78>)
1000dd74:	70e6      	strb	r6, [r4, #3]
1000dd76:	7227      	strb	r7, [r4, #8]
1000dd78:	4798      	blx	r3
1000dd7a:	466b      	mov	r3, sp
1000dd7c:	7d1b      	ldrb	r3, [r3, #20]
1000dd7e:	1c20      	adds	r0, r4, #0
1000dd80:	7663      	strb	r3, [r4, #25]
1000dd82:	2312      	movs	r3, #18
1000dd84:	211a      	movs	r1, #26
1000dd86:	71a3      	strb	r3, [r4, #6]
1000dd88:	4b08      	ldr	r3, [pc, #32]	; (1000ddac <gapc_encrypt_cfm_handler+0x7c>)
1000dd8a:	71e5      	strb	r5, [r4, #7]
1000dd8c:	4798      	blx	r3
1000dd8e:	b007      	add	sp, #28
1000dd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd92:	46c0      	nop			; (mov r8, r8)
1000dd94:	10016e74 	.word	0x10016e74
1000dd98:	1000d72d 	.word	0x1000d72d
1000dd9c:	10017ec4 	.word	0x10017ec4
1000dda0:	10017b54 	.word	0x10017b54
1000dda4:	10017ecd 	.word	0x10017ecd
1000dda8:	100107e7 	.word	0x100107e7
1000ddac:	1000d429 	.word	0x1000d429

1000ddb0 <gapc_encrypt_ind>:
1000ddb0:	780b      	ldrb	r3, [r1, #0]
1000ddb2:	0a00      	lsrs	r0, r0, #8
1000ddb4:	70d3      	strb	r3, [r2, #3]
1000ddb6:	2300      	movs	r3, #0
1000ddb8:	8010      	strh	r0, [r2, #0]
1000ddba:	7093      	strb	r3, [r2, #2]
1000ddbc:	4770      	bx	lr
	...

1000ddc0 <gapc_param_update_cfm_handler>:
1000ddc0:	b538      	push	{r3, r4, r5, lr}
1000ddc2:	2410      	movs	r4, #16
1000ddc4:	1c05      	adds	r5, r0, #0
1000ddc6:	480e      	ldr	r0, [pc, #56]	; (1000de00 <gapc_param_update_cfm_handler+0x40>)
1000ddc8:	7004      	strb	r4, [r0, #0]
1000ddca:	3c02      	subs	r4, #2
1000ddcc:	7044      	strb	r4, [r0, #1]
1000ddce:	7084      	strb	r4, [r0, #2]
1000ddd0:	4c0c      	ldr	r4, [pc, #48]	; (1000de04 <gapc_param_update_cfm_handler+0x44>)
1000ddd2:	70c5      	strb	r5, [r0, #3]
1000ddd4:	8825      	ldrh	r5, [r4, #0]
1000ddd6:	8824      	ldrh	r4, [r4, #0]
1000ddd8:	72c3      	strb	r3, [r0, #11]
1000ddda:	0a1b      	lsrs	r3, r3, #8
1000dddc:	0a24      	lsrs	r4, r4, #8
1000ddde:	7303      	strb	r3, [r0, #12]
1000dde0:	2305      	movs	r3, #5
1000dde2:	7144      	strb	r4, [r0, #5]
1000dde4:	2400      	movs	r4, #0
1000dde6:	7201      	strb	r1, [r0, #8]
1000dde8:	7242      	strb	r2, [r0, #9]
1000ddea:	7183      	strb	r3, [r0, #6]
1000ddec:	0a12      	lsrs	r2, r2, #8
1000ddee:	210d      	movs	r1, #13
1000ddf0:	4b05      	ldr	r3, [pc, #20]	; (1000de08 <gapc_param_update_cfm_handler+0x48>)
1000ddf2:	7105      	strb	r5, [r0, #4]
1000ddf4:	7282      	strb	r2, [r0, #10]
1000ddf6:	71c4      	strb	r4, [r0, #7]
1000ddf8:	4798      	blx	r3
1000ddfa:	1c20      	adds	r0, r4, #0
1000ddfc:	bd38      	pop	{r3, r4, r5, pc}
1000ddfe:	46c0      	nop			; (mov r8, r8)
1000de00:	10017ec4 	.word	0x10017ec4
1000de04:	10017b54 	.word	0x10017b54
1000de08:	1000d429 	.word	0x1000d429

1000de0c <gapc_param_updated_ind>:
1000de0c:	2300      	movs	r3, #0
1000de0e:	0a00      	lsrs	r0, r0, #8
1000de10:	8010      	strh	r0, [r2, #0]
1000de12:	7093      	strb	r3, [r2, #2]
1000de14:	784b      	ldrb	r3, [r1, #1]
1000de16:	7808      	ldrb	r0, [r1, #0]
1000de18:	021b      	lsls	r3, r3, #8
1000de1a:	4303      	orrs	r3, r0
1000de1c:	8093      	strh	r3, [r2, #4]
1000de1e:	78cb      	ldrb	r3, [r1, #3]
1000de20:	7888      	ldrb	r0, [r1, #2]
1000de22:	021b      	lsls	r3, r3, #8
1000de24:	4303      	orrs	r3, r0
1000de26:	80d3      	strh	r3, [r2, #6]
1000de28:	794b      	ldrb	r3, [r1, #5]
1000de2a:	7909      	ldrb	r1, [r1, #4]
1000de2c:	021b      	lsls	r3, r3, #8
1000de2e:	430b      	orrs	r3, r1
1000de30:	2007      	movs	r0, #7
1000de32:	8113      	strh	r3, [r2, #8]
1000de34:	4770      	bx	lr

1000de36 <gapc_param_updated_req_ind>:
1000de36:	0a00      	lsrs	r0, r0, #8
1000de38:	8010      	strh	r0, [r2, #0]
1000de3a:	784b      	ldrb	r3, [r1, #1]
1000de3c:	7808      	ldrb	r0, [r1, #0]
1000de3e:	021b      	lsls	r3, r3, #8
1000de40:	4303      	orrs	r3, r0
1000de42:	8053      	strh	r3, [r2, #2]
1000de44:	78cb      	ldrb	r3, [r1, #3]
1000de46:	7888      	ldrb	r0, [r1, #2]
1000de48:	021b      	lsls	r3, r3, #8
1000de4a:	4303      	orrs	r3, r0
1000de4c:	8093      	strh	r3, [r2, #4]
1000de4e:	794b      	ldrb	r3, [r1, #5]
1000de50:	7908      	ldrb	r0, [r1, #4]
1000de52:	021b      	lsls	r3, r3, #8
1000de54:	4303      	orrs	r3, r0
1000de56:	80d3      	strh	r3, [r2, #6]
1000de58:	79cb      	ldrb	r3, [r1, #7]
1000de5a:	7989      	ldrb	r1, [r1, #6]
1000de5c:	021b      	lsls	r3, r3, #8
1000de5e:	430b      	orrs	r3, r1
1000de60:	2008      	movs	r0, #8
1000de62:	8113      	strh	r3, [r2, #8]
1000de64:	4770      	bx	lr
	...

1000de68 <gapc_dev_info_req_ind_handler>:
1000de68:	b508      	push	{r3, lr}
1000de6a:	1c0b      	adds	r3, r1, #0
1000de6c:	0a01      	lsrs	r1, r0, #8
1000de6e:	8011      	strh	r1, [r2, #0]
1000de70:	7818      	ldrb	r0, [r3, #0]
1000de72:	7090      	strb	r0, [r2, #2]
1000de74:	2800      	cmp	r0, #0
1000de76:	d104      	bne.n	1000de82 <gapc_dev_info_req_ind_handler+0x1a>
1000de78:	4b03      	ldr	r3, [pc, #12]	; (1000de88 <gapc_dev_info_req_ind_handler+0x20>)
1000de7a:	33aa      	adds	r3, #170	; 0xaa
1000de7c:	881b      	ldrh	r3, [r3, #0]
1000de7e:	2b00      	cmp	r3, #0
1000de80:	d001      	beq.n	1000de86 <gapc_dev_info_req_ind_handler+0x1e>
1000de82:	4b02      	ldr	r3, [pc, #8]	; (1000de8c <gapc_dev_info_req_ind_handler+0x24>)
1000de84:	4798      	blx	r3
1000de86:	bd08      	pop	{r3, pc}
1000de88:	10017be6 	.word	0x10017be6
1000de8c:	1000d539 	.word	0x1000d539

1000de90 <gapc_sec_req_ind>:
1000de90:	0a00      	lsrs	r0, r0, #8
1000de92:	8010      	strh	r0, [r2, #0]
1000de94:	7809      	ldrb	r1, [r1, #0]
1000de96:	2301      	movs	r3, #1
1000de98:	1c08      	adds	r0, r1, #0
1000de9a:	0889      	lsrs	r1, r1, #2
1000de9c:	4018      	ands	r0, r3
1000de9e:	400b      	ands	r3, r1
1000dea0:	70d0      	strb	r0, [r2, #3]
1000dea2:	7113      	strb	r3, [r2, #4]
1000dea4:	4770      	bx	lr

1000dea6 <gapc_sign_counter_ind_handler>:
1000dea6:	0a00      	lsrs	r0, r0, #8
1000dea8:	8010      	strh	r0, [r2, #0]
1000deaa:	784b      	ldrb	r3, [r1, #1]
1000deac:	0218      	lsls	r0, r3, #8
1000deae:	788b      	ldrb	r3, [r1, #2]
1000deb0:	041b      	lsls	r3, r3, #16
1000deb2:	4303      	orrs	r3, r0
1000deb4:	7808      	ldrb	r0, [r1, #0]
1000deb6:	4303      	orrs	r3, r0
1000deb8:	78c8      	ldrb	r0, [r1, #3]
1000deba:	0600      	lsls	r0, r0, #24
1000debc:	4303      	orrs	r3, r0
1000debe:	6053      	str	r3, [r2, #4]
1000dec0:	794b      	ldrb	r3, [r1, #5]
1000dec2:	0218      	lsls	r0, r3, #8
1000dec4:	798b      	ldrb	r3, [r1, #6]
1000dec6:	041b      	lsls	r3, r3, #16
1000dec8:	4303      	orrs	r3, r0
1000deca:	7908      	ldrb	r0, [r1, #4]
1000decc:	79c9      	ldrb	r1, [r1, #7]
1000dece:	4303      	orrs	r3, r0
1000ded0:	0609      	lsls	r1, r1, #24
1000ded2:	430b      	orrs	r3, r1
1000ded4:	2000      	movs	r0, #0
1000ded6:	6093      	str	r3, [r2, #8]
1000ded8:	4770      	bx	lr
	...

1000dedc <gapc_peer_att_info_ind_handler>:
1000dedc:	b510      	push	{r4, lr}
1000dede:	0a00      	lsrs	r0, r0, #8
1000dee0:	8010      	strh	r0, [r2, #0]
1000dee2:	7808      	ldrb	r0, [r1, #0]
1000dee4:	7090      	strb	r0, [r2, #2]
1000dee6:	788b      	ldrb	r3, [r1, #2]
1000dee8:	784c      	ldrb	r4, [r1, #1]
1000deea:	021b      	lsls	r3, r3, #8
1000deec:	4323      	orrs	r3, r4
1000deee:	8093      	strh	r3, [r2, #4]
1000def0:	2801      	cmp	r0, #1
1000def2:	d027      	beq.n	1000df44 <gapc_peer_att_info_ind_handler+0x68>
1000def4:	2800      	cmp	r0, #0
1000def6:	d017      	beq.n	1000df28 <gapc_peer_att_info_ind_handler+0x4c>
1000def8:	2802      	cmp	r0, #2
1000defa:	d12a      	bne.n	1000df52 <gapc_peer_att_info_ind_handler+0x76>
1000defc:	790b      	ldrb	r3, [r1, #4]
1000defe:	78c8      	ldrb	r0, [r1, #3]
1000df00:	021b      	lsls	r3, r3, #8
1000df02:	4303      	orrs	r3, r0
1000df04:	8113      	strh	r3, [r2, #8]
1000df06:	798b      	ldrb	r3, [r1, #6]
1000df08:	7948      	ldrb	r0, [r1, #5]
1000df0a:	021b      	lsls	r3, r3, #8
1000df0c:	4303      	orrs	r3, r0
1000df0e:	80d3      	strh	r3, [r2, #6]
1000df10:	7a0b      	ldrb	r3, [r1, #8]
1000df12:	79c8      	ldrb	r0, [r1, #7]
1000df14:	021b      	lsls	r3, r3, #8
1000df16:	4303      	orrs	r3, r0
1000df18:	8193      	strh	r3, [r2, #12]
1000df1a:	7a8b      	ldrb	r3, [r1, #10]
1000df1c:	7a49      	ldrb	r1, [r1, #9]
1000df1e:	021b      	lsls	r3, r3, #8
1000df20:	430b      	orrs	r3, r1
1000df22:	8153      	strh	r3, [r2, #10]
1000df24:	2306      	movs	r3, #6
1000df26:	e013      	b.n	1000df50 <gapc_peer_att_info_ind_handler+0x74>
1000df28:	1c14      	adds	r4, r2, #0
1000df2a:	1c20      	adds	r0, r4, #0
1000df2c:	790a      	ldrb	r2, [r1, #4]
1000df2e:	78cb      	ldrb	r3, [r1, #3]
1000df30:	0212      	lsls	r2, r2, #8
1000df32:	431a      	orrs	r2, r3
1000df34:	80e2      	strh	r2, [r4, #6]
1000df36:	4b07      	ldr	r3, [pc, #28]	; (1000df54 <gapc_peer_att_info_ind_handler+0x78>)
1000df38:	3008      	adds	r0, #8
1000df3a:	3105      	adds	r1, #5
1000df3c:	4798      	blx	r3
1000df3e:	2302      	movs	r3, #2
1000df40:	70a3      	strb	r3, [r4, #2]
1000df42:	e006      	b.n	1000df52 <gapc_peer_att_info_ind_handler+0x76>
1000df44:	790b      	ldrb	r3, [r1, #4]
1000df46:	78c9      	ldrb	r1, [r1, #3]
1000df48:	021b      	lsls	r3, r3, #8
1000df4a:	430b      	orrs	r3, r1
1000df4c:	80d3      	strh	r3, [r2, #6]
1000df4e:	2305      	movs	r3, #5
1000df50:	7093      	strb	r3, [r2, #2]
1000df52:	bd10      	pop	{r4, pc}
1000df54:	100107e7 	.word	0x100107e7

1000df58 <gapc_con_channel_map_ind_handler>:
1000df58:	b508      	push	{r3, lr}
1000df5a:	2300      	movs	r3, #0
1000df5c:	0a00      	lsrs	r0, r0, #8
1000df5e:	7013      	strb	r3, [r2, #0]
1000df60:	8050      	strh	r0, [r2, #2]
1000df62:	4b02      	ldr	r3, [pc, #8]	; (1000df6c <gapc_con_channel_map_ind_handler+0x14>)
1000df64:	1d10      	adds	r0, r2, #4
1000df66:	2205      	movs	r2, #5
1000df68:	4798      	blx	r3
1000df6a:	bd08      	pop	{r3, pc}
1000df6c:	100107e7 	.word	0x100107e7

1000df70 <gapc_lecb_connected>:
1000df70:	7843      	ldrb	r3, [r0, #1]
1000df72:	7802      	ldrb	r2, [r0, #0]
1000df74:	021b      	lsls	r3, r3, #8
1000df76:	4313      	orrs	r3, r2
1000df78:	800b      	strh	r3, [r1, #0]
1000df7a:	78c3      	ldrb	r3, [r0, #3]
1000df7c:	7882      	ldrb	r2, [r0, #2]
1000df7e:	021b      	lsls	r3, r3, #8
1000df80:	4313      	orrs	r3, r2
1000df82:	804b      	strh	r3, [r1, #2]
1000df84:	7943      	ldrb	r3, [r0, #5]
1000df86:	7902      	ldrb	r2, [r0, #4]
1000df88:	021b      	lsls	r3, r3, #8
1000df8a:	4313      	orrs	r3, r2
1000df8c:	808b      	strh	r3, [r1, #4]
1000df8e:	79c3      	ldrb	r3, [r0, #7]
1000df90:	7982      	ldrb	r2, [r0, #6]
1000df92:	021b      	lsls	r3, r3, #8
1000df94:	4313      	orrs	r3, r2
1000df96:	80cb      	strh	r3, [r1, #6]
1000df98:	2300      	movs	r3, #0
1000df9a:	720b      	strb	r3, [r1, #8]
1000df9c:	4770      	bx	lr

1000df9e <gapc_lecb_disconnected>:
1000df9e:	7843      	ldrb	r3, [r0, #1]
1000dfa0:	7802      	ldrb	r2, [r0, #0]
1000dfa2:	021b      	lsls	r3, r3, #8
1000dfa4:	4313      	orrs	r3, r2
1000dfa6:	800b      	strh	r3, [r1, #0]
1000dfa8:	78c3      	ldrb	r3, [r0, #3]
1000dfaa:	7882      	ldrb	r2, [r0, #2]
1000dfac:	021b      	lsls	r3, r3, #8
1000dfae:	4313      	orrs	r3, r2
1000dfb0:	804b      	strh	r3, [r1, #2]
1000dfb2:	4770      	bx	lr

1000dfb4 <gapc_lecb_connect_req_ind>:
1000dfb4:	7843      	ldrb	r3, [r0, #1]
1000dfb6:	7802      	ldrb	r2, [r0, #0]
1000dfb8:	021b      	lsls	r3, r3, #8
1000dfba:	4313      	orrs	r3, r2
1000dfbc:	800b      	strh	r3, [r1, #0]
1000dfbe:	78c3      	ldrb	r3, [r0, #3]
1000dfc0:	7882      	ldrb	r2, [r0, #2]
1000dfc2:	021b      	lsls	r3, r3, #8
1000dfc4:	4313      	orrs	r3, r2
1000dfc6:	804b      	strh	r3, [r1, #2]
1000dfc8:	7943      	ldrb	r3, [r0, #5]
1000dfca:	7902      	ldrb	r2, [r0, #4]
1000dfcc:	021b      	lsls	r3, r3, #8
1000dfce:	4313      	orrs	r3, r2
1000dfd0:	808b      	strh	r3, [r1, #4]
1000dfd2:	79c3      	ldrb	r3, [r0, #7]
1000dfd4:	7982      	ldrb	r2, [r0, #6]
1000dfd6:	021b      	lsls	r3, r3, #8
1000dfd8:	4313      	orrs	r3, r2
1000dfda:	80cb      	strh	r3, [r1, #6]
1000dfdc:	4770      	bx	lr

1000dfde <gapc_lecb_add_credit_resp_handler>:
1000dfde:	7843      	ldrb	r3, [r0, #1]
1000dfe0:	7802      	ldrb	r2, [r0, #0]
1000dfe2:	021b      	lsls	r3, r3, #8
1000dfe4:	4313      	orrs	r3, r2
1000dfe6:	800b      	strh	r3, [r1, #0]
1000dfe8:	78c3      	ldrb	r3, [r0, #3]
1000dfea:	7882      	ldrb	r2, [r0, #2]
1000dfec:	021b      	lsls	r3, r3, #8
1000dfee:	4313      	orrs	r3, r2
1000dff0:	804b      	strh	r3, [r1, #2]
1000dff2:	7943      	ldrb	r3, [r0, #5]
1000dff4:	7902      	ldrb	r2, [r0, #4]
1000dff6:	021b      	lsls	r3, r3, #8
1000dff8:	4313      	orrs	r3, r2
1000dffa:	808b      	strh	r3, [r1, #4]
1000dffc:	4770      	bx	lr
	...

1000e000 <gapm_reset_req_handler>:
1000e000:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e002:	466b      	mov	r3, sp
1000e004:	4915      	ldr	r1, [pc, #84]	; (1000e05c <gapm_reset_req_handler+0x5c>)
1000e006:	4816      	ldr	r0, [pc, #88]	; (1000e060 <gapm_reset_req_handler+0x60>)
1000e008:	880c      	ldrh	r4, [r1, #0]
1000e00a:	8809      	ldrh	r1, [r1, #0]
1000e00c:	1ddd      	adds	r5, r3, #7
1000e00e:	0a09      	lsrs	r1, r1, #8
1000e010:	2300      	movs	r3, #0
1000e012:	2202      	movs	r2, #2
1000e014:	7141      	strb	r1, [r0, #5]
1000e016:	26d0      	movs	r6, #208	; 0xd0
1000e018:	2101      	movs	r1, #1
1000e01a:	7104      	strb	r4, [r0, #4]
1000e01c:	4c11      	ldr	r4, [pc, #68]	; (1000e064 <gapm_reset_req_handler+0x64>)
1000e01e:	702b      	strb	r3, [r5, #0]
1000e020:	7002      	strb	r2, [r0, #0]
1000e022:	70c3      	strb	r3, [r0, #3]
1000e024:	320b      	adds	r2, #11
1000e026:	7201      	strb	r1, [r0, #8]
1000e028:	7181      	strb	r1, [r0, #6]
1000e02a:	71c3      	strb	r3, [r0, #7]
1000e02c:	3108      	adds	r1, #8
1000e02e:	4b0e      	ldr	r3, [pc, #56]	; (1000e068 <gapm_reset_req_handler+0x68>)
1000e030:	0136      	lsls	r6, r6, #4
1000e032:	7042      	strb	r2, [r0, #1]
1000e034:	7082      	strb	r2, [r0, #2]
1000e036:	80a2      	strh	r2, [r4, #4]
1000e038:	8026      	strh	r6, [r4, #0]
1000e03a:	4798      	blx	r3
1000e03c:	1c28      	adds	r0, r5, #0
1000e03e:	4b0b      	ldr	r3, [pc, #44]	; (1000e06c <gapm_reset_req_handler+0x6c>)
1000e040:	4798      	blx	r3
1000e042:	782b      	ldrb	r3, [r5, #0]
1000e044:	20e2      	movs	r0, #226	; 0xe2
1000e046:	2b00      	cmp	r3, #0
1000e048:	d106      	bne.n	1000e058 <gapm_reset_req_handler+0x58>
1000e04a:	68a3      	ldr	r3, [r4, #8]
1000e04c:	20e2      	movs	r0, #226	; 0xe2
1000e04e:	781a      	ldrb	r2, [r3, #0]
1000e050:	785b      	ldrb	r3, [r3, #1]
1000e052:	2a01      	cmp	r2, #1
1000e054:	d100      	bne.n	1000e058 <gapm_reset_req_handler+0x58>
1000e056:	1c18      	adds	r0, r3, #0
1000e058:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e05a:	46c0      	nop			; (mov r8, r8)
1000e05c:	10017b54 	.word	0x10017b54
1000e060:	10017ec4 	.word	0x10017ec4
1000e064:	10017b48 	.word	0x10017b48
1000e068:	1000d429 	.word	0x1000d429
1000e06c:	1000d48d 	.word	0x1000d48d

1000e070 <gapm_set_dev_config_cmd_handler>:
1000e070:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e072:	b089      	sub	sp, #36	; 0x24
1000e074:	9303      	str	r3, [sp, #12]
1000e076:	ab0e      	add	r3, sp, #56	; 0x38
1000e078:	781b      	ldrb	r3, [r3, #0]
1000e07a:	4c37      	ldr	r4, [pc, #220]	; (1000e158 <gapm_set_dev_config_cmd_handler+0xe8>)
1000e07c:	9304      	str	r3, [sp, #16]
1000e07e:	ab0f      	add	r3, sp, #60	; 0x3c
1000e080:	781b      	ldrb	r3, [r3, #0]
1000e082:	270d      	movs	r7, #13
1000e084:	9305      	str	r3, [sp, #20]
1000e086:	ab10      	add	r3, sp, #64	; 0x40
1000e088:	881b      	ldrh	r3, [r3, #0]
1000e08a:	72a1      	strb	r1, [r4, #10]
1000e08c:	9300      	str	r3, [sp, #0]
1000e08e:	ab11      	add	r3, sp, #68	; 0x44
1000e090:	881b      	ldrh	r3, [r3, #0]
1000e092:	0a09      	lsrs	r1, r1, #8
1000e094:	9301      	str	r3, [sp, #4]
1000e096:	ab12      	add	r3, sp, #72	; 0x48
1000e098:	881b      	ldrh	r3, [r3, #0]
1000e09a:	7260      	strb	r0, [r4, #9]
1000e09c:	9302      	str	r3, [sp, #8]
1000e09e:	ab06      	add	r3, sp, #24
1000e0a0:	1dde      	adds	r6, r3, #7
1000e0a2:	2300      	movs	r3, #0
1000e0a4:	7033      	strb	r3, [r6, #0]
1000e0a6:	2304      	movs	r3, #4
1000e0a8:	7023      	strb	r3, [r4, #0]
1000e0aa:	2300      	movs	r3, #0
1000e0ac:	70e3      	strb	r3, [r4, #3]
1000e0ae:	4b2b      	ldr	r3, [pc, #172]	; (1000e15c <gapm_set_dev_config_cmd_handler+0xec>)
1000e0b0:	72e1      	strb	r1, [r4, #11]
1000e0b2:	881d      	ldrh	r5, [r3, #0]
1000e0b4:	881b      	ldrh	r3, [r3, #0]
1000e0b6:	1c11      	adds	r1, r2, #0
1000e0b8:	0a1b      	lsrs	r3, r3, #8
1000e0ba:	7163      	strb	r3, [r4, #5]
1000e0bc:	2303      	movs	r3, #3
1000e0be:	7125      	strb	r5, [r4, #4]
1000e0c0:	2206      	movs	r2, #6
1000e0c2:	4d27      	ldr	r5, [pc, #156]	; (1000e160 <gapm_set_dev_config_cmd_handler+0xf0>)
1000e0c4:	4827      	ldr	r0, [pc, #156]	; (1000e164 <gapm_set_dev_config_cmd_handler+0xf4>)
1000e0c6:	7223      	strb	r3, [r4, #8]
1000e0c8:	7067      	strb	r7, [r4, #1]
1000e0ca:	70a7      	strb	r7, [r4, #2]
1000e0cc:	47a8      	blx	r5
1000e0ce:	9903      	ldr	r1, [sp, #12]
1000e0d0:	2210      	movs	r2, #16
1000e0d2:	4825      	ldr	r0, [pc, #148]	; (1000e168 <gapm_set_dev_config_cmd_handler+0xf8>)
1000e0d4:	47a8      	blx	r5
1000e0d6:	466a      	mov	r2, sp
1000e0d8:	7c12      	ldrb	r2, [r2, #16]
1000e0da:	1ce3      	adds	r3, r4, #3
1000e0dc:	77da      	strb	r2, [r3, #31]
1000e0de:	466a      	mov	r2, sp
1000e0e0:	7d12      	ldrb	r2, [r2, #20]
1000e0e2:	1d23      	adds	r3, r4, #4
1000e0e4:	77da      	strb	r2, [r3, #31]
1000e0e6:	466a      	mov	r2, sp
1000e0e8:	7812      	ldrb	r2, [r2, #0]
1000e0ea:	1d63      	adds	r3, r4, #5
1000e0ec:	77da      	strb	r2, [r3, #31]
1000e0ee:	9b00      	ldr	r3, [sp, #0]
1000e0f0:	1da2      	adds	r2, r4, #6
1000e0f2:	0a1b      	lsrs	r3, r3, #8
1000e0f4:	77d3      	strb	r3, [r2, #31]
1000e0f6:	466a      	mov	r2, sp
1000e0f8:	7912      	ldrb	r2, [r2, #4]
1000e0fa:	1de3      	adds	r3, r4, #7
1000e0fc:	77da      	strb	r2, [r3, #31]
1000e0fe:	1c22      	adds	r2, r4, #0
1000e100:	9b01      	ldr	r3, [sp, #4]
1000e102:	3208      	adds	r2, #8
1000e104:	0a1b      	lsrs	r3, r3, #8
1000e106:	77d3      	strb	r3, [r2, #31]
1000e108:	466a      	mov	r2, sp
1000e10a:	1c23      	adds	r3, r4, #0
1000e10c:	7a12      	ldrb	r2, [r2, #8]
1000e10e:	3328      	adds	r3, #40	; 0x28
1000e110:	701a      	strb	r2, [r3, #0]
1000e112:	1c22      	adds	r2, r4, #0
1000e114:	9b02      	ldr	r3, [sp, #8]
1000e116:	3229      	adds	r2, #41	; 0x29
1000e118:	0a1b      	lsrs	r3, r3, #8
1000e11a:	7013      	strb	r3, [r2, #0]
1000e11c:	23d0      	movs	r3, #208	; 0xd0
1000e11e:	4d13      	ldr	r5, [pc, #76]	; (1000e16c <gapm_set_dev_config_cmd_handler+0xfc>)
1000e120:	011b      	lsls	r3, r3, #4
1000e122:	802b      	strh	r3, [r5, #0]
1000e124:	2322      	movs	r3, #34	; 0x22
1000e126:	71a3      	strb	r3, [r4, #6]
1000e128:	2300      	movs	r3, #0
1000e12a:	212a      	movs	r1, #42	; 0x2a
1000e12c:	71e3      	strb	r3, [r4, #7]
1000e12e:	1c20      	adds	r0, r4, #0
1000e130:	4b0f      	ldr	r3, [pc, #60]	; (1000e170 <gapm_set_dev_config_cmd_handler+0x100>)
1000e132:	80af      	strh	r7, [r5, #4]
1000e134:	4798      	blx	r3
1000e136:	1c30      	adds	r0, r6, #0
1000e138:	4b0e      	ldr	r3, [pc, #56]	; (1000e174 <gapm_set_dev_config_cmd_handler+0x104>)
1000e13a:	4798      	blx	r3
1000e13c:	7833      	ldrb	r3, [r6, #0]
1000e13e:	20e2      	movs	r0, #226	; 0xe2
1000e140:	2b00      	cmp	r3, #0
1000e142:	d106      	bne.n	1000e152 <gapm_set_dev_config_cmd_handler+0xe2>
1000e144:	68ab      	ldr	r3, [r5, #8]
1000e146:	20e2      	movs	r0, #226	; 0xe2
1000e148:	781a      	ldrb	r2, [r3, #0]
1000e14a:	785b      	ldrb	r3, [r3, #1]
1000e14c:	2a03      	cmp	r2, #3
1000e14e:	d100      	bne.n	1000e152 <gapm_set_dev_config_cmd_handler+0xe2>
1000e150:	1c18      	adds	r0, r3, #0
1000e152:	b009      	add	sp, #36	; 0x24
1000e154:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e156:	46c0      	nop			; (mov r8, r8)
1000e158:	10017ec4 	.word	0x10017ec4
1000e15c:	10017b54 	.word	0x10017b54
1000e160:	100107e7 	.word	0x100107e7
1000e164:	10017ed0 	.word	0x10017ed0
1000e168:	10017ed6 	.word	0x10017ed6
1000e16c:	10017b48 	.word	0x10017b48
1000e170:	1000d429 	.word	0x1000d429
1000e174:	1000d48d 	.word	0x1000d48d

1000e178 <gapm_get_dev_config_cmd_handler>:
1000e178:	4684      	mov	ip, r0
1000e17a:	4663      	mov	r3, ip
1000e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e17e:	b085      	sub	sp, #20
1000e180:	9100      	str	r1, [sp, #0]
1000e182:	20cf      	movs	r0, #207	; 0xcf
1000e184:	2b01      	cmp	r3, #1
1000e186:	d854      	bhi.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e188:	2900      	cmp	r1, #0
1000e18a:	d052      	beq.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e18c:	2200      	movs	r2, #0
1000e18e:	492a      	ldr	r1, [pc, #168]	; (1000e238 <gapm_get_dev_config_cmd_handler+0xc0>)
1000e190:	ab02      	add	r3, sp, #8
1000e192:	880c      	ldrh	r4, [r1, #0]
1000e194:	8809      	ldrh	r1, [r1, #0]
1000e196:	1d9f      	adds	r7, r3, #6
1000e198:	719a      	strb	r2, [r3, #6]
1000e19a:	4b28      	ldr	r3, [pc, #160]	; (1000e23c <gapm_get_dev_config_cmd_handler+0xc4>)
1000e19c:	0a09      	lsrs	r1, r1, #8
1000e19e:	250d      	movs	r5, #13
1000e1a0:	2606      	movs	r6, #6
1000e1a2:	7159      	strb	r1, [r3, #5]
1000e1a4:	4661      	mov	r1, ip
1000e1a6:	701e      	strb	r6, [r3, #0]
1000e1a8:	705d      	strb	r5, [r3, #1]
1000e1aa:	709d      	strb	r5, [r3, #2]
1000e1ac:	70da      	strb	r2, [r3, #3]
1000e1ae:	711c      	strb	r4, [r3, #4]
1000e1b0:	2901      	cmp	r1, #1
1000e1b2:	d13e      	bne.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e1b4:	21d0      	movs	r1, #208	; 0xd0
1000e1b6:	4c22      	ldr	r4, [pc, #136]	; (1000e240 <gapm_get_dev_config_cmd_handler+0xc8>)
1000e1b8:	0109      	lsls	r1, r1, #4
1000e1ba:	8061      	strh	r1, [r4, #2]
1000e1bc:	4921      	ldr	r1, [pc, #132]	; (1000e244 <gapm_get_dev_config_cmd_handler+0xcc>)
1000e1be:	71da      	strb	r2, [r3, #7]
1000e1c0:	8021      	strh	r1, [r4, #0]
1000e1c2:	4661      	mov	r1, ip
1000e1c4:	721e      	strb	r6, [r3, #8]
1000e1c6:	7199      	strb	r1, [r3, #6]
1000e1c8:	1c18      	adds	r0, r3, #0
1000e1ca:	2109      	movs	r1, #9
1000e1cc:	4b1e      	ldr	r3, [pc, #120]	; (1000e248 <gapm_get_dev_config_cmd_handler+0xd0>)
1000e1ce:	80a5      	strh	r5, [r4, #4]
1000e1d0:	4798      	blx	r3
1000e1d2:	1c38      	adds	r0, r7, #0
1000e1d4:	4b1d      	ldr	r3, [pc, #116]	; (1000e24c <gapm_get_dev_config_cmd_handler+0xd4>)
1000e1d6:	4798      	blx	r3
1000e1d8:	783b      	ldrb	r3, [r7, #0]
1000e1da:	20e2      	movs	r0, #226	; 0xe2
1000e1dc:	9301      	str	r3, [sp, #4]
1000e1de:	2b00      	cmp	r3, #0
1000e1e0:	d127      	bne.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e1e2:	8821      	ldrh	r1, [r4, #0]
1000e1e4:	4a1a      	ldr	r2, [pc, #104]	; (1000e250 <gapm_get_dev_config_cmd_handler+0xd8>)
1000e1e6:	68a7      	ldr	r7, [r4, #8]
1000e1e8:	3b01      	subs	r3, #1
1000e1ea:	4291      	cmp	r1, r2
1000e1ec:	d001      	beq.n	1000e1f2 <gapm_get_dev_config_cmd_handler+0x7a>
1000e1ee:	8023      	strh	r3, [r4, #0]
1000e1f0:	e01a      	b.n	1000e228 <gapm_get_dev_config_cmd_handler+0xb0>
1000e1f2:	8063      	strh	r3, [r4, #2]
1000e1f4:	9b00      	ldr	r3, [sp, #0]
1000e1f6:	1c39      	adds	r1, r7, #0
1000e1f8:	1c58      	adds	r0, r3, #1
1000e1fa:	1c32      	adds	r2, r6, #0
1000e1fc:	4b15      	ldr	r3, [pc, #84]	; (1000e254 <gapm_get_dev_config_cmd_handler+0xdc>)
1000e1fe:	4798      	blx	r3
1000e200:	79bb      	ldrb	r3, [r7, #6]
1000e202:	9a00      	ldr	r2, [sp, #0]
1000e204:	7013      	strb	r3, [r2, #0]
1000e206:	23d0      	movs	r3, #208	; 0xd0
1000e208:	011b      	lsls	r3, r3, #4
1000e20a:	8023      	strh	r3, [r4, #0]
1000e20c:	ab02      	add	r3, sp, #8
1000e20e:	80a5      	strh	r5, [r4, #4]
1000e210:	1ddd      	adds	r5, r3, #7
1000e212:	466b      	mov	r3, sp
1000e214:	791b      	ldrb	r3, [r3, #4]
1000e216:	1c28      	adds	r0, r5, #0
1000e218:	702b      	strb	r3, [r5, #0]
1000e21a:	4b0c      	ldr	r3, [pc, #48]	; (1000e24c <gapm_get_dev_config_cmd_handler+0xd4>)
1000e21c:	4798      	blx	r3
1000e21e:	782b      	ldrb	r3, [r5, #0]
1000e220:	20d0      	movs	r0, #208	; 0xd0
1000e222:	2b00      	cmp	r3, #0
1000e224:	d105      	bne.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e226:	68a7      	ldr	r7, [r4, #8]
1000e228:	783b      	ldrb	r3, [r7, #0]
1000e22a:	7878      	ldrb	r0, [r7, #1]
1000e22c:	2b06      	cmp	r3, #6
1000e22e:	d000      	beq.n	1000e232 <gapm_get_dev_config_cmd_handler+0xba>
1000e230:	20e2      	movs	r0, #226	; 0xe2
1000e232:	b005      	add	sp, #20
1000e234:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e236:	46c0      	nop			; (mov r8, r8)
1000e238:	10017b54 	.word	0x10017b54
1000e23c:	10017ec4 	.word	0x10017ec4
1000e240:	10017b48 	.word	0x10017b48
1000e244:	00000d08 	.word	0x00000d08
1000e248:	1000d429 	.word	0x1000d429
1000e24c:	1000d48d 	.word	0x1000d48d
1000e250:	0000ffff 	.word	0x0000ffff
1000e254:	100107e7 	.word	0x100107e7

1000e258 <gapm_cancel_cmd_handler>:
1000e258:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e25a:	4916      	ldr	r1, [pc, #88]	; (1000e2b4 <gapm_cancel_cmd_handler+0x5c>)
1000e25c:	4816      	ldr	r0, [pc, #88]	; (1000e2b8 <gapm_cancel_cmd_handler+0x60>)
1000e25e:	880c      	ldrh	r4, [r1, #0]
1000e260:	8809      	ldrh	r1, [r1, #0]
1000e262:	466b      	mov	r3, sp
1000e264:	0a09      	lsrs	r1, r1, #8
1000e266:	7141      	strb	r1, [r0, #5]
1000e268:	2102      	movs	r1, #2
1000e26a:	2203      	movs	r2, #3
1000e26c:	7201      	strb	r1, [r0, #8]
1000e26e:	21d0      	movs	r1, #208	; 0xd0
1000e270:	1ddd      	adds	r5, r3, #7
1000e272:	2300      	movs	r3, #0
1000e274:	7104      	strb	r4, [r0, #4]
1000e276:	4c11      	ldr	r4, [pc, #68]	; (1000e2bc <gapm_cancel_cmd_handler+0x64>)
1000e278:	7002      	strb	r2, [r0, #0]
1000e27a:	0109      	lsls	r1, r1, #4
1000e27c:	320a      	adds	r2, #10
1000e27e:	702b      	strb	r3, [r5, #0]
1000e280:	7042      	strb	r2, [r0, #1]
1000e282:	7082      	strb	r2, [r0, #2]
1000e284:	70c3      	strb	r3, [r0, #3]
1000e286:	8021      	strh	r1, [r4, #0]
1000e288:	80a2      	strh	r2, [r4, #4]
1000e28a:	71c3      	strb	r3, [r0, #7]
1000e28c:	3a0c      	subs	r2, #12
1000e28e:	2109      	movs	r1, #9
1000e290:	4b0b      	ldr	r3, [pc, #44]	; (1000e2c0 <gapm_cancel_cmd_handler+0x68>)
1000e292:	7182      	strb	r2, [r0, #6]
1000e294:	4798      	blx	r3
1000e296:	1c28      	adds	r0, r5, #0
1000e298:	4b0a      	ldr	r3, [pc, #40]	; (1000e2c4 <gapm_cancel_cmd_handler+0x6c>)
1000e29a:	4798      	blx	r3
1000e29c:	7828      	ldrb	r0, [r5, #0]
1000e29e:	2800      	cmp	r0, #0
1000e2a0:	d001      	beq.n	1000e2a6 <gapm_cancel_cmd_handler+0x4e>
1000e2a2:	20e2      	movs	r0, #226	; 0xe2
1000e2a4:	e004      	b.n	1000e2b0 <gapm_cancel_cmd_handler+0x58>
1000e2a6:	68a3      	ldr	r3, [r4, #8]
1000e2a8:	785b      	ldrb	r3, [r3, #1]
1000e2aa:	2b44      	cmp	r3, #68	; 0x44
1000e2ac:	d000      	beq.n	1000e2b0 <gapm_cancel_cmd_handler+0x58>
1000e2ae:	1c18      	adds	r0, r3, #0
1000e2b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e2b2:	46c0      	nop			; (mov r8, r8)
1000e2b4:	10017b54 	.word	0x10017b54
1000e2b8:	10017ec4 	.word	0x10017ec4
1000e2bc:	10017b48 	.word	0x10017b48
1000e2c0:	1000d429 	.word	0x1000d429
1000e2c4:	1000d48d 	.word	0x1000d48d

1000e2c8 <gapm_dev_bdaddr_ind_handler>:
1000e2c8:	b538      	push	{r3, r4, r5, lr}
1000e2ca:	1c05      	adds	r5, r0, #0
1000e2cc:	1c0c      	adds	r4, r1, #0
1000e2ce:	1c48      	adds	r0, r1, #1
1000e2d0:	2206      	movs	r2, #6
1000e2d2:	1c29      	adds	r1, r5, #0
1000e2d4:	4b02      	ldr	r3, [pc, #8]	; (1000e2e0 <gapm_dev_bdaddr_ind_handler+0x18>)
1000e2d6:	4798      	blx	r3
1000e2d8:	79ab      	ldrb	r3, [r5, #6]
1000e2da:	2000      	movs	r0, #0
1000e2dc:	7023      	strb	r3, [r4, #0]
1000e2de:	bd38      	pop	{r3, r4, r5, pc}
1000e2e0:	100107e7 	.word	0x100107e7

1000e2e4 <gapm_cmp_evt>:
1000e2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e2e6:	7803      	ldrb	r3, [r0, #0]
1000e2e8:	7845      	ldrb	r5, [r0, #1]
1000e2ea:	3b0c      	subs	r3, #12
1000e2ec:	1e18      	subs	r0, r3, #0
1000e2ee:	280b      	cmp	r0, #11
1000e2f0:	d900      	bls.n	1000e2f4 <gapm_cmp_evt+0x10>
1000e2f2:	e08d      	b.n	1000e410 <gapm_cmp_evt+0x12c>
1000e2f4:	1c0c      	adds	r4, r1, #0
1000e2f6:	f000 fd55 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000e2fa:	1952      	.short	0x1952
1000e2fc:	068b1919 	.word	0x068b1919
1000e300:	8b595906 	.word	0x8b595906
1000e304:	0d8b      	.short	0x0d8b
1000e306:	2300      	movs	r3, #0
1000e308:	2d45      	cmp	r5, #69	; 0x45
1000e30a:	d000      	beq.n	1000e30e <gapm_cmp_evt+0x2a>
1000e30c:	1c2b      	adds	r3, r5, #0
1000e30e:	7023      	strb	r3, [r4, #0]
1000e310:	2002      	movs	r0, #2
1000e312:	e07e      	b.n	1000e412 <gapm_cmp_evt+0x12e>
1000e314:	203b      	movs	r0, #59	; 0x3b
1000e316:	2d00      	cmp	r5, #0
1000e318:	d100      	bne.n	1000e31c <gapm_cmp_evt+0x38>
1000e31a:	e07a      	b.n	1000e412 <gapm_cmp_evt+0x12e>
1000e31c:	700d      	strb	r5, [r1, #0]
1000e31e:	1c48      	adds	r0, r1, #1
1000e320:	2210      	movs	r2, #16
1000e322:	2100      	movs	r1, #0
1000e324:	4b3b      	ldr	r3, [pc, #236]	; (1000e414 <gapm_cmp_evt+0x130>)
1000e326:	4798      	blx	r3
1000e328:	200f      	movs	r0, #15
1000e32a:	e072      	b.n	1000e412 <gapm_cmp_evt+0x12e>
1000e32c:	2d00      	cmp	r5, #0
1000e32e:	d134      	bne.n	1000e39a <gapm_cmp_evt+0xb6>
1000e330:	4b39      	ldr	r3, [pc, #228]	; (1000e418 <gapm_cmp_evt+0x134>)
1000e332:	4798      	blx	r3
1000e334:	1e43      	subs	r3, r0, #1
1000e336:	b2db      	uxtb	r3, r3
1000e338:	1c28      	adds	r0, r5, #0
1000e33a:	2b06      	cmp	r3, #6
1000e33c:	d869      	bhi.n	1000e412 <gapm_cmp_evt+0x12e>
1000e33e:	466b      	mov	r3, sp
1000e340:	4e36      	ldr	r6, [pc, #216]	; (1000e41c <gapm_cmp_evt+0x138>)
1000e342:	1dd9      	adds	r1, r3, #7
1000e344:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e346:	4b36      	ldr	r3, [pc, #216]	; (1000e420 <gapm_cmp_evt+0x13c>)
1000e348:	4798      	blx	r3
1000e34a:	2312      	movs	r3, #18
1000e34c:	4358      	muls	r0, r3
1000e34e:	4935      	ldr	r1, [pc, #212]	; (1000e424 <gapm_cmp_evt+0x140>)
1000e350:	1809      	adds	r1, r1, r0
1000e352:	1c0b      	adds	r3, r1, #0
1000e354:	894a      	ldrh	r2, [r1, #10]
1000e356:	3308      	adds	r3, #8
1000e358:	8122      	strh	r2, [r4, #8]
1000e35a:	784f      	ldrb	r7, [r1, #1]
1000e35c:	72a5      	strb	r5, [r4, #10]
1000e35e:	7027      	strb	r7, [r4, #0]
1000e360:	898a      	ldrh	r2, [r1, #12]
1000e362:	1c60      	adds	r0, r4, #1
1000e364:	81a2      	strh	r2, [r4, #12]
1000e366:	88db      	ldrh	r3, [r3, #6]
1000e368:	3102      	adds	r1, #2
1000e36a:	81e3      	strh	r3, [r4, #14]
1000e36c:	89cb      	ldrh	r3, [r1, #14]
1000e36e:	2206      	movs	r2, #6
1000e370:	8223      	strh	r3, [r4, #16]
1000e372:	4b2d      	ldr	r3, [pc, #180]	; (1000e428 <gapm_cmp_evt+0x144>)
1000e374:	4798      	blx	r3
1000e376:	2f00      	cmp	r7, #0
1000e378:	d00a      	beq.n	1000e390 <gapm_cmp_evt+0xac>
1000e37a:	79a3      	ldrb	r3, [r4, #6]
1000e37c:	223f      	movs	r2, #63	; 0x3f
1000e37e:	1c19      	adds	r1, r3, #0
1000e380:	3501      	adds	r5, #1
1000e382:	4391      	bics	r1, r2
1000e384:	29c0      	cmp	r1, #192	; 0xc0
1000e386:	d003      	beq.n	1000e390 <gapm_cmp_evt+0xac>
1000e388:	065b      	lsls	r3, r3, #25
1000e38a:	0fdb      	lsrs	r3, r3, #31
1000e38c:	3502      	adds	r5, #2
1000e38e:	1aed      	subs	r5, r5, r3
1000e390:	2301      	movs	r3, #1
1000e392:	425b      	negs	r3, r3
1000e394:	7025      	strb	r5, [r4, #0]
1000e396:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e398:	e038      	b.n	1000e40c <gapm_cmp_evt+0x128>
1000e39a:	700d      	strb	r5, [r1, #0]
1000e39c:	e004      	b.n	1000e3a8 <gapm_cmp_evt+0xc4>
1000e39e:	2300      	movs	r3, #0
1000e3a0:	2d45      	cmp	r5, #69	; 0x45
1000e3a2:	d000      	beq.n	1000e3a6 <gapm_cmp_evt+0xc2>
1000e3a4:	1c2b      	adds	r3, r5, #0
1000e3a6:	7023      	strb	r3, [r4, #0]
1000e3a8:	2003      	movs	r0, #3
1000e3aa:	e032      	b.n	1000e412 <gapm_cmp_evt+0x12e>
1000e3ac:	4e1b      	ldr	r6, [pc, #108]	; (1000e41c <gapm_cmp_evt+0x138>)
1000e3ae:	2100      	movs	r1, #0
1000e3b0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e3b2:	4b1b      	ldr	r3, [pc, #108]	; (1000e420 <gapm_cmp_evt+0x13c>)
1000e3b4:	4798      	blx	r3
1000e3b6:	2807      	cmp	r0, #7
1000e3b8:	d818      	bhi.n	1000e3ec <gapm_cmp_evt+0x108>
1000e3ba:	2301      	movs	r3, #1
1000e3bc:	425b      	negs	r3, r3
1000e3be:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e3c0:	3313      	adds	r3, #19
1000e3c2:	4358      	muls	r0, r3
1000e3c4:	4917      	ldr	r1, [pc, #92]	; (1000e424 <gapm_cmp_evt+0x140>)
1000e3c6:	1809      	adds	r1, r1, r0
1000e3c8:	1c0b      	adds	r3, r1, #0
1000e3ca:	894a      	ldrh	r2, [r1, #10]
1000e3cc:	3308      	adds	r3, #8
1000e3ce:	8122      	strh	r2, [r4, #8]
1000e3d0:	784a      	ldrb	r2, [r1, #1]
1000e3d2:	72a5      	strb	r5, [r4, #10]
1000e3d4:	7022      	strb	r2, [r4, #0]
1000e3d6:	898a      	ldrh	r2, [r1, #12]
1000e3d8:	1c60      	adds	r0, r4, #1
1000e3da:	81a2      	strh	r2, [r4, #12]
1000e3dc:	88db      	ldrh	r3, [r3, #6]
1000e3de:	3102      	adds	r1, #2
1000e3e0:	81e3      	strh	r3, [r4, #14]
1000e3e2:	89cb      	ldrh	r3, [r1, #14]
1000e3e4:	2206      	movs	r2, #6
1000e3e6:	8223      	strh	r3, [r4, #16]
1000e3e8:	4b0f      	ldr	r3, [pc, #60]	; (1000e428 <gapm_cmp_evt+0x144>)
1000e3ea:	4798      	blx	r3
1000e3ec:	2200      	movs	r2, #0
1000e3ee:	7823      	ldrb	r3, [r4, #0]
1000e3f0:	4293      	cmp	r3, r2
1000e3f2:	d00a      	beq.n	1000e40a <gapm_cmp_evt+0x126>
1000e3f4:	79a3      	ldrb	r3, [r4, #6]
1000e3f6:	323f      	adds	r2, #63	; 0x3f
1000e3f8:	1c19      	adds	r1, r3, #0
1000e3fa:	4391      	bics	r1, r2
1000e3fc:	3a3e      	subs	r2, #62	; 0x3e
1000e3fe:	29c0      	cmp	r1, #192	; 0xc0
1000e400:	d003      	beq.n	1000e40a <gapm_cmp_evt+0x126>
1000e402:	065b      	lsls	r3, r3, #25
1000e404:	0fdb      	lsrs	r3, r3, #31
1000e406:	3202      	adds	r2, #2
1000e408:	1ad2      	subs	r2, r2, r3
1000e40a:	7022      	strb	r2, [r4, #0]
1000e40c:	2005      	movs	r0, #5
1000e40e:	e000      	b.n	1000e412 <gapm_cmp_evt+0x12e>
1000e410:	2000      	movs	r0, #0
1000e412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e414:	100107f9 	.word	0x100107f9
1000e418:	1000d635 	.word	0x1000d635
1000e41c:	10017be6 	.word	0x10017be6
1000e420:	1000d5f9 	.word	0x1000d5f9
1000e424:	10017b56 	.word	0x10017b56
1000e428:	100107e7 	.word	0x100107e7

1000e42c <gapm_start_adv_cmd_handler>:
1000e42c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e42e:	b089      	sub	sp, #36	; 0x24
1000e430:	9303      	str	r3, [sp, #12]
1000e432:	ab0e      	add	r3, sp, #56	; 0x38
1000e434:	9102      	str	r1, [sp, #8]
1000e436:	cb02      	ldmia	r3!, {r1}
1000e438:	aa08      	add	r2, sp, #32
1000e43a:	881b      	ldrh	r3, [r3, #0]
1000e43c:	4e3c      	ldr	r6, [pc, #240]	; (1000e530 <gapm_start_adv_cmd_handler+0x104>)
1000e43e:	9300      	str	r3, [sp, #0]
1000e440:	ab10      	add	r3, sp, #64	; 0x40
1000e442:	881b      	ldrh	r3, [r3, #0]
1000e444:	240d      	movs	r4, #13
1000e446:	469c      	mov	ip, r3
1000e448:	ab11      	add	r3, sp, #68	; 0x44
1000e44a:	781b      	ldrb	r3, [r3, #0]
1000e44c:	9304      	str	r3, [sp, #16]
1000e44e:	ab12      	add	r3, sp, #72	; 0x48
1000e450:	781b      	ldrb	r3, [r3, #0]
1000e452:	9305      	str	r3, [sp, #20]
1000e454:	ab13      	add	r3, sp, #76	; 0x4c
1000e456:	781b      	ldrb	r3, [r3, #0]
1000e458:	9306      	str	r3, [sp, #24]
1000e45a:	ab14      	add	r3, sp, #80	; 0x50
1000e45c:	781b      	ldrb	r3, [r3, #0]
1000e45e:	9301      	str	r3, [sp, #4]
1000e460:	2319      	movs	r3, #25
1000e462:	189b      	adds	r3, r3, r2
1000e464:	7fdd      	ldrb	r5, [r3, #31]
1000e466:	ab18      	add	r3, sp, #96	; 0x60
1000e468:	881f      	ldrh	r7, [r3, #0]
1000e46a:	ab19      	add	r3, sp, #100	; 0x64
1000e46c:	781b      	ldrb	r3, [r3, #0]
1000e46e:	8832      	ldrh	r2, [r6, #0]
1000e470:	9307      	str	r3, [sp, #28]
1000e472:	4b30      	ldr	r3, [pc, #192]	; (1000e534 <gapm_start_adv_cmd_handler+0x108>)
1000e474:	8836      	ldrh	r6, [r6, #0]
1000e476:	711a      	strb	r2, [r3, #4]
1000e478:	466a      	mov	r2, sp
1000e47a:	7a12      	ldrb	r2, [r2, #8]
1000e47c:	701c      	strb	r4, [r3, #0]
1000e47e:	705c      	strb	r4, [r3, #1]
1000e480:	709c      	strb	r4, [r3, #2]
1000e482:	725a      	strb	r2, [r3, #9]
1000e484:	2400      	movs	r4, #0
1000e486:	466a      	mov	r2, sp
1000e488:	0a36      	lsrs	r6, r6, #8
1000e48a:	70dc      	strb	r4, [r3, #3]
1000e48c:	7218      	strb	r0, [r3, #8]
1000e48e:	729c      	strb	r4, [r3, #10]
1000e490:	715e      	strb	r6, [r3, #5]
1000e492:	72dc      	strb	r4, [r3, #11]
1000e494:	7812      	ldrb	r2, [r2, #0]
1000e496:	380e      	subs	r0, #14
1000e498:	731a      	strb	r2, [r3, #12]
1000e49a:	9a00      	ldr	r2, [sp, #0]
1000e49c:	0a14      	lsrs	r4, r2, #8
1000e49e:	4662      	mov	r2, ip
1000e4a0:	739a      	strb	r2, [r3, #14]
1000e4a2:	4662      	mov	r2, ip
1000e4a4:	735c      	strb	r4, [r3, #13]
1000e4a6:	0a14      	lsrs	r4, r2, #8
1000e4a8:	466a      	mov	r2, sp
1000e4aa:	7c12      	ldrb	r2, [r2, #16]
1000e4ac:	73dc      	strb	r4, [r3, #15]
1000e4ae:	741a      	strb	r2, [r3, #16]
1000e4b0:	1c1c      	adds	r4, r3, #0
1000e4b2:	2801      	cmp	r0, #1
1000e4b4:	d809      	bhi.n	1000e4ca <gapm_start_adv_cmd_handler+0x9e>
1000e4b6:	2900      	cmp	r1, #0
1000e4b8:	d003      	beq.n	1000e4c2 <gapm_start_adv_cmd_handler+0x96>
1000e4ba:	481f      	ldr	r0, [pc, #124]	; (1000e538 <gapm_start_adv_cmd_handler+0x10c>)
1000e4bc:	2206      	movs	r2, #6
1000e4be:	4b1f      	ldr	r3, [pc, #124]	; (1000e53c <gapm_start_adv_cmd_handler+0x110>)
1000e4c0:	4798      	blx	r3
1000e4c2:	466b      	mov	r3, sp
1000e4c4:	7b1b      	ldrb	r3, [r3, #12]
1000e4c6:	75e3      	strb	r3, [r4, #23]
1000e4c8:	e014      	b.n	1000e4f4 <gapm_start_adv_cmd_handler+0xc8>
1000e4ca:	466b      	mov	r3, sp
1000e4cc:	7d1b      	ldrb	r3, [r3, #20]
1000e4ce:	9915      	ldr	r1, [sp, #84]	; 0x54
1000e4d0:	7463      	strb	r3, [r4, #17]
1000e4d2:	466b      	mov	r3, sp
1000e4d4:	7e1b      	ldrb	r3, [r3, #24]
1000e4d6:	9a01      	ldr	r2, [sp, #4]
1000e4d8:	74a3      	strb	r3, [r4, #18]
1000e4da:	466b      	mov	r3, sp
1000e4dc:	791b      	ldrb	r3, [r3, #4]
1000e4de:	4818      	ldr	r0, [pc, #96]	; (1000e540 <gapm_start_adv_cmd_handler+0x114>)
1000e4e0:	4e16      	ldr	r6, [pc, #88]	; (1000e53c <gapm_start_adv_cmd_handler+0x110>)
1000e4e2:	74e3      	strb	r3, [r4, #19]
1000e4e4:	47b0      	blx	r6
1000e4e6:	1c23      	adds	r3, r4, #0
1000e4e8:	4816      	ldr	r0, [pc, #88]	; (1000e544 <gapm_start_adv_cmd_handler+0x118>)
1000e4ea:	3330      	adds	r3, #48	; 0x30
1000e4ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000e4ee:	1c2a      	adds	r2, r5, #0
1000e4f0:	701d      	strb	r5, [r3, #0]
1000e4f2:	47b0      	blx	r6
1000e4f4:	1c22      	adds	r2, r4, #0
1000e4f6:	23a5      	movs	r3, #165	; 0xa5
1000e4f8:	3250      	adds	r2, #80	; 0x50
1000e4fa:	7013      	strb	r3, [r2, #0]
1000e4fc:	1c22      	adds	r2, r4, #0
1000e4fe:	3251      	adds	r2, #81	; 0x51
1000e500:	7013      	strb	r3, [r2, #0]
1000e502:	1c23      	adds	r3, r4, #0
1000e504:	1c22      	adds	r2, r4, #0
1000e506:	3352      	adds	r3, #82	; 0x52
1000e508:	701f      	strb	r7, [r3, #0]
1000e50a:	3253      	adds	r2, #83	; 0x53
1000e50c:	0a3b      	lsrs	r3, r7, #8
1000e50e:	7013      	strb	r3, [r2, #0]
1000e510:	466a      	mov	r2, sp
1000e512:	1c23      	adds	r3, r4, #0
1000e514:	7f12      	ldrb	r2, [r2, #28]
1000e516:	3354      	adds	r3, #84	; 0x54
1000e518:	701a      	strb	r2, [r3, #0]
1000e51a:	234d      	movs	r3, #77	; 0x4d
1000e51c:	2500      	movs	r5, #0
1000e51e:	71a3      	strb	r3, [r4, #6]
1000e520:	1c20      	adds	r0, r4, #0
1000e522:	2155      	movs	r1, #85	; 0x55
1000e524:	4b08      	ldr	r3, [pc, #32]	; (1000e548 <gapm_start_adv_cmd_handler+0x11c>)
1000e526:	71e5      	strb	r5, [r4, #7]
1000e528:	4798      	blx	r3
1000e52a:	1c28      	adds	r0, r5, #0
1000e52c:	b009      	add	sp, #36	; 0x24
1000e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e530:	10017b54 	.word	0x10017b54
1000e534:	10017ec4 	.word	0x10017ec4
1000e538:	10017ed5 	.word	0x10017ed5
1000e53c:	100107e7 	.word	0x100107e7
1000e540:	10017ed8 	.word	0x10017ed8
1000e544:	10017ef5 	.word	0x10017ef5
1000e548:	1000d429 	.word	0x1000d429

1000e54c <get_gap_local_addr_type>:
1000e54c:	4b04      	ldr	r3, [pc, #16]	; (1000e560 <get_gap_local_addr_type+0x14>)
1000e54e:	2001      	movs	r0, #1
1000e550:	791b      	ldrb	r3, [r3, #4]
1000e552:	2b02      	cmp	r3, #2
1000e554:	d003      	beq.n	1000e55e <get_gap_local_addr_type+0x12>
1000e556:	3b03      	subs	r3, #3
1000e558:	4258      	negs	r0, r3
1000e55a:	4158      	adcs	r0, r3
1000e55c:	0040      	lsls	r0, r0, #1
1000e55e:	4770      	bx	lr
1000e560:	10017be6 	.word	0x10017be6

1000e564 <gapm_adv_report_evt_handler>:
1000e564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e566:	7843      	ldrb	r3, [r0, #1]
1000e568:	1c05      	adds	r5, r0, #0
1000e56a:	9301      	str	r3, [sp, #4]
1000e56c:	466b      	mov	r3, sp
1000e56e:	1c0c      	adds	r4, r1, #0
1000e570:	791b      	ldrb	r3, [r3, #4]
1000e572:	7806      	ldrb	r6, [r0, #0]
1000e574:	2206      	movs	r2, #6
1000e576:	704b      	strb	r3, [r1, #1]
1000e578:	1c88      	adds	r0, r1, #2
1000e57a:	4f1b      	ldr	r7, [pc, #108]	; (1000e5e8 <gapm_adv_report_evt_handler+0x84>)
1000e57c:	1ca9      	adds	r1, r5, #2
1000e57e:	47b8      	blx	r7
1000e580:	1c20      	adds	r0, r4, #0
1000e582:	1c29      	adds	r1, r5, #0
1000e584:	7a2a      	ldrb	r2, [r5, #8]
1000e586:	3008      	adds	r0, #8
1000e588:	77c2      	strb	r2, [r0, #31]
1000e58a:	3109      	adds	r1, #9
1000e58c:	3528      	adds	r5, #40	; 0x28
1000e58e:	47b8      	blx	r7
1000e590:	782b      	ldrb	r3, [r5, #0]
1000e592:	b25a      	sxtb	r2, r3
1000e594:	2a00      	cmp	r2, #0
1000e596:	da01      	bge.n	1000e59c <gapm_adv_report_evt_handler+0x38>
1000e598:	3301      	adds	r3, #1
1000e59a:	b2db      	uxtb	r3, r3
1000e59c:	1c22      	adds	r2, r4, #0
1000e59e:	3228      	adds	r2, #40	; 0x28
1000e5a0:	7013      	strb	r3, [r2, #0]
1000e5a2:	2200      	movs	r2, #0
1000e5a4:	9b01      	ldr	r3, [sp, #4]
1000e5a6:	4293      	cmp	r3, r2
1000e5a8:	d00a      	beq.n	1000e5c0 <gapm_adv_report_evt_handler+0x5c>
1000e5aa:	79e3      	ldrb	r3, [r4, #7]
1000e5ac:	323f      	adds	r2, #63	; 0x3f
1000e5ae:	1c19      	adds	r1, r3, #0
1000e5b0:	4391      	bics	r1, r2
1000e5b2:	3a3e      	subs	r2, #62	; 0x3e
1000e5b4:	29c0      	cmp	r1, #192	; 0xc0
1000e5b6:	d003      	beq.n	1000e5c0 <gapm_adv_report_evt_handler+0x5c>
1000e5b8:	065b      	lsls	r3, r3, #25
1000e5ba:	0fdb      	lsrs	r3, r3, #31
1000e5bc:	3202      	adds	r2, #2
1000e5be:	1ad2      	subs	r2, r2, r3
1000e5c0:	7062      	strb	r2, [r4, #1]
1000e5c2:	2e04      	cmp	r6, #4
1000e5c4:	d80f      	bhi.n	1000e5e6 <gapm_adv_report_evt_handler+0x82>
1000e5c6:	1c30      	adds	r0, r6, #0
1000e5c8:	f000 fbec 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000e5cc:	09070503 	.word	0x09070503
1000e5d0:	0b          	.byte	0x0b
1000e5d1:	00          	.byte	0x00
1000e5d2:	2300      	movs	r3, #0
1000e5d4:	e006      	b.n	1000e5e4 <gapm_adv_report_evt_handler+0x80>
1000e5d6:	2301      	movs	r3, #1
1000e5d8:	e004      	b.n	1000e5e4 <gapm_adv_report_evt_handler+0x80>
1000e5da:	2302      	movs	r3, #2
1000e5dc:	e002      	b.n	1000e5e4 <gapm_adv_report_evt_handler+0x80>
1000e5de:	2303      	movs	r3, #3
1000e5e0:	e000      	b.n	1000e5e4 <gapm_adv_report_evt_handler+0x80>
1000e5e2:	2305      	movs	r3, #5
1000e5e4:	7023      	strb	r3, [r4, #0]
1000e5e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e5e8:	100107e7 	.word	0x100107e7

1000e5ec <gapm_resolv_addr_cmd_handler>:
1000e5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e5ee:	2314      	movs	r3, #20
1000e5f0:	4c12      	ldr	r4, [pc, #72]	; (1000e63c <gapm_resolv_addr_cmd_handler+0x50>)
1000e5f2:	1c17      	adds	r7, r2, #0
1000e5f4:	7023      	strb	r3, [r4, #0]
1000e5f6:	3b07      	subs	r3, #7
1000e5f8:	7063      	strb	r3, [r4, #1]
1000e5fa:	70a3      	strb	r3, [r4, #2]
1000e5fc:	2300      	movs	r3, #0
1000e5fe:	70e3      	strb	r3, [r4, #3]
1000e600:	4b0f      	ldr	r3, [pc, #60]	; (1000e640 <gapm_resolv_addr_cmd_handler+0x54>)
1000e602:	1c05      	adds	r5, r0, #0
1000e604:	881a      	ldrh	r2, [r3, #0]
1000e606:	881b      	ldrh	r3, [r3, #0]
1000e608:	4e0e      	ldr	r6, [pc, #56]	; (1000e644 <gapm_resolv_addr_cmd_handler+0x58>)
1000e60a:	0a1b      	lsrs	r3, r3, #8
1000e60c:	7163      	strb	r3, [r4, #5]
1000e60e:	2317      	movs	r3, #23
1000e610:	012d      	lsls	r5, r5, #4
1000e612:	7122      	strb	r2, [r4, #4]
1000e614:	7260      	strb	r0, [r4, #9]
1000e616:	2206      	movs	r2, #6
1000e618:	480b      	ldr	r0, [pc, #44]	; (1000e648 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e61a:	7223      	strb	r3, [r4, #8]
1000e61c:	47b0      	blx	r6
1000e61e:	1c39      	adds	r1, r7, #0
1000e620:	1c2a      	adds	r2, r5, #0
1000e622:	480a      	ldr	r0, [pc, #40]	; (1000e64c <gapm_resolv_addr_cmd_handler+0x60>)
1000e624:	47b0      	blx	r6
1000e626:	1c29      	adds	r1, r5, #0
1000e628:	3110      	adds	r1, #16
1000e62a:	1c0b      	adds	r3, r1, #0
1000e62c:	3b08      	subs	r3, #8
1000e62e:	71a3      	strb	r3, [r4, #6]
1000e630:	121b      	asrs	r3, r3, #8
1000e632:	71e3      	strb	r3, [r4, #7]
1000e634:	1c20      	adds	r0, r4, #0
1000e636:	4b06      	ldr	r3, [pc, #24]	; (1000e650 <gapm_resolv_addr_cmd_handler+0x64>)
1000e638:	4798      	blx	r3
1000e63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e63c:	10017ec4 	.word	0x10017ec4
1000e640:	10017b54 	.word	0x10017b54
1000e644:	100107e7 	.word	0x100107e7
1000e648:	10017ece 	.word	0x10017ece
1000e64c:	10017ed4 	.word	0x10017ed4
1000e650:	1000d429 	.word	0x1000d429

1000e654 <gapm_addr_solved_ind_handler>:
1000e654:	b570      	push	{r4, r5, r6, lr}
1000e656:	1c04      	adds	r4, r0, #0
1000e658:	1c08      	adds	r0, r1, #0
1000e65a:	1c0d      	adds	r5, r1, #0
1000e65c:	4e05      	ldr	r6, [pc, #20]	; (1000e674 <gapm_addr_solved_ind_handler+0x20>)
1000e65e:	1c21      	adds	r1, r4, #0
1000e660:	2206      	movs	r2, #6
1000e662:	3011      	adds	r0, #17
1000e664:	47b0      	blx	r6
1000e666:	1c68      	adds	r0, r5, #1
1000e668:	1da1      	adds	r1, r4, #6
1000e66a:	2210      	movs	r2, #16
1000e66c:	47b0      	blx	r6
1000e66e:	2300      	movs	r3, #0
1000e670:	702b      	strb	r3, [r5, #0]
1000e672:	bd70      	pop	{r4, r5, r6, pc}
1000e674:	100107e7 	.word	0x100107e7

1000e678 <gapm_profile_task_add_cmd_handler>:
1000e678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e67a:	4684      	mov	ip, r0
1000e67c:	a808      	add	r0, sp, #32
1000e67e:	c810      	ldmia	r0!, {r4}
1000e680:	2500      	movs	r5, #0
1000e682:	8807      	ldrh	r7, [r0, #0]
1000e684:	4668      	mov	r0, sp
1000e686:	1d86      	adds	r6, r0, #6
1000e688:	7185      	strb	r5, [r0, #6]
1000e68a:	201b      	movs	r0, #27
1000e68c:	4c2b      	ldr	r4, [pc, #172]	; (1000e73c <gapm_profile_task_add_cmd_handler+0xc4>)
1000e68e:	7020      	strb	r0, [r4, #0]
1000e690:	200d      	movs	r0, #13
1000e692:	7060      	strb	r0, [r4, #1]
1000e694:	200d      	movs	r0, #13
1000e696:	70e5      	strb	r5, [r4, #3]
1000e698:	4d29      	ldr	r5, [pc, #164]	; (1000e740 <gapm_profile_task_add_cmd_handler+0xc8>)
1000e69a:	70a0      	strb	r0, [r4, #2]
1000e69c:	8828      	ldrh	r0, [r5, #0]
1000e69e:	882d      	ldrh	r5, [r5, #0]
1000e6a0:	7120      	strb	r0, [r4, #4]
1000e6a2:	201b      	movs	r0, #27
1000e6a4:	7220      	strb	r0, [r4, #8]
1000e6a6:	4660      	mov	r0, ip
1000e6a8:	72a1      	strb	r1, [r4, #10]
1000e6aa:	7322      	strb	r2, [r4, #12]
1000e6ac:	73a3      	strb	r3, [r4, #14]
1000e6ae:	0a09      	lsrs	r1, r1, #8
1000e6b0:	0a12      	lsrs	r2, r2, #8
1000e6b2:	0a1b      	lsrs	r3, r3, #8
1000e6b4:	7260      	strb	r0, [r4, #9]
1000e6b6:	72e1      	strb	r1, [r4, #11]
1000e6b8:	7362      	strb	r2, [r4, #13]
1000e6ba:	73e3      	strb	r3, [r4, #15]
1000e6bc:	1c3a      	adds	r2, r7, #0
1000e6be:	0a2d      	lsrs	r5, r5, #8
1000e6c0:	9908      	ldr	r1, [sp, #32]
1000e6c2:	4b20      	ldr	r3, [pc, #128]	; (1000e744 <gapm_profile_task_add_cmd_handler+0xcc>)
1000e6c4:	4820      	ldr	r0, [pc, #128]	; (1000e748 <gapm_profile_task_add_cmd_handler+0xd0>)
1000e6c6:	7165      	strb	r5, [r4, #5]
1000e6c8:	4798      	blx	r3
1000e6ca:	4d20      	ldr	r5, [pc, #128]	; (1000e74c <gapm_profile_task_add_cmd_handler+0xd4>)
1000e6cc:	1c39      	adds	r1, r7, #0
1000e6ce:	4b20      	ldr	r3, [pc, #128]	; (1000e750 <gapm_profile_task_add_cmd_handler+0xd8>)
1000e6d0:	3110      	adds	r1, #16
1000e6d2:	802b      	strh	r3, [r5, #0]
1000e6d4:	230d      	movs	r3, #13
1000e6d6:	b289      	uxth	r1, r1
1000e6d8:	80ab      	strh	r3, [r5, #4]
1000e6da:	1c0b      	adds	r3, r1, #0
1000e6dc:	27d0      	movs	r7, #208	; 0xd0
1000e6de:	3b08      	subs	r3, #8
1000e6e0:	71a3      	strb	r3, [r4, #6]
1000e6e2:	121b      	asrs	r3, r3, #8
1000e6e4:	71e3      	strb	r3, [r4, #7]
1000e6e6:	1c20      	adds	r0, r4, #0
1000e6e8:	4b1a      	ldr	r3, [pc, #104]	; (1000e754 <gapm_profile_task_add_cmd_handler+0xdc>)
1000e6ea:	013f      	lsls	r7, r7, #4
1000e6ec:	806f      	strh	r7, [r5, #2]
1000e6ee:	4798      	blx	r3
1000e6f0:	1c30      	adds	r0, r6, #0
1000e6f2:	4c19      	ldr	r4, [pc, #100]	; (1000e758 <gapm_profile_task_add_cmd_handler+0xe0>)
1000e6f4:	47a0      	blx	r4
1000e6f6:	7831      	ldrb	r1, [r6, #0]
1000e6f8:	20e2      	movs	r0, #226	; 0xe2
1000e6fa:	2900      	cmp	r1, #0
1000e6fc:	d11d      	bne.n	1000e73a <gapm_profile_task_add_cmd_handler+0xc2>
1000e6fe:	2301      	movs	r3, #1
1000e700:	882e      	ldrh	r6, [r5, #0]
1000e702:	4816      	ldr	r0, [pc, #88]	; (1000e75c <gapm_profile_task_add_cmd_handler+0xe4>)
1000e704:	68aa      	ldr	r2, [r5, #8]
1000e706:	425b      	negs	r3, r3
1000e708:	4286      	cmp	r6, r0
1000e70a:	d001      	beq.n	1000e710 <gapm_profile_task_add_cmd_handler+0x98>
1000e70c:	802b      	strh	r3, [r5, #0]
1000e70e:	e013      	b.n	1000e738 <gapm_profile_task_add_cmd_handler+0xc0>
1000e710:	806b      	strh	r3, [r5, #2]
1000e712:	7953      	ldrb	r3, [r2, #5]
1000e714:	7912      	ldrb	r2, [r2, #4]
1000e716:	021b      	lsls	r3, r3, #8
1000e718:	4313      	orrs	r3, r2
1000e71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e71c:	8013      	strh	r3, [r2, #0]
1000e71e:	230d      	movs	r3, #13
1000e720:	80ab      	strh	r3, [r5, #4]
1000e722:	466b      	mov	r3, sp
1000e724:	1dde      	adds	r6, r3, #7
1000e726:	1c30      	adds	r0, r6, #0
1000e728:	71d9      	strb	r1, [r3, #7]
1000e72a:	802f      	strh	r7, [r5, #0]
1000e72c:	47a0      	blx	r4
1000e72e:	7833      	ldrb	r3, [r6, #0]
1000e730:	20d0      	movs	r0, #208	; 0xd0
1000e732:	2b00      	cmp	r3, #0
1000e734:	d101      	bne.n	1000e73a <gapm_profile_task_add_cmd_handler+0xc2>
1000e736:	68aa      	ldr	r2, [r5, #8]
1000e738:	7850      	ldrb	r0, [r2, #1]
1000e73a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e73c:	10017ec4 	.word	0x10017ec4
1000e740:	10017b54 	.word	0x10017b54
1000e744:	100107e7 	.word	0x100107e7
1000e748:	10017ed4 	.word	0x10017ed4
1000e74c:	10017b48 	.word	0x10017b48
1000e750:	00000d1c 	.word	0x00000d1c
1000e754:	1000d429 	.word	0x1000d429
1000e758:	1000d48d 	.word	0x1000d48d
1000e75c:	0000ffff 	.word	0x0000ffff

1000e760 <gapm_profile_added_ind_handler>:
1000e760:	b510      	push	{r4, lr}
1000e762:	7843      	ldrb	r3, [r0, #1]
1000e764:	7902      	ldrb	r2, [r0, #4]
1000e766:	7944      	ldrb	r4, [r0, #5]
1000e768:	7800      	ldrb	r0, [r0, #0]
1000e76a:	021b      	lsls	r3, r3, #8
1000e76c:	4303      	orrs	r3, r0
1000e76e:	2b1b      	cmp	r3, #27
1000e770:	d104      	bne.n	1000e77c <gapm_profile_added_ind_handler+0x1c>
1000e772:	2300      	movs	r3, #0
1000e774:	700b      	strb	r3, [r1, #0]
1000e776:	0223      	lsls	r3, r4, #8
1000e778:	4313      	orrs	r3, r2
1000e77a:	804b      	strh	r3, [r1, #2]
1000e77c:	203b      	movs	r0, #59	; 0x3b
1000e77e:	bd10      	pop	{r4, pc}

1000e780 <gattc_read_req_ind_parser>:
1000e780:	7843      	ldrb	r3, [r0, #1]
1000e782:	7802      	ldrb	r2, [r0, #0]
1000e784:	021b      	lsls	r3, r3, #8
1000e786:	4313      	orrs	r3, r2
1000e788:	804b      	strh	r3, [r1, #2]
1000e78a:	4770      	bx	lr

1000e78c <gattc_write_req_ind_parser>:
1000e78c:	b508      	push	{r3, lr}
1000e78e:	1c13      	adds	r3, r2, #0
1000e790:	0a00      	lsrs	r0, r0, #8
1000e792:	8010      	strh	r0, [r2, #0]
1000e794:	784a      	ldrb	r2, [r1, #1]
1000e796:	7808      	ldrb	r0, [r1, #0]
1000e798:	0212      	lsls	r2, r2, #8
1000e79a:	4302      	orrs	r2, r0
1000e79c:	805a      	strh	r2, [r3, #2]
1000e79e:	78ca      	ldrb	r2, [r1, #3]
1000e7a0:	7888      	ldrb	r0, [r1, #2]
1000e7a2:	0212      	lsls	r2, r2, #8
1000e7a4:	4302      	orrs	r2, r0
1000e7a6:	809a      	strh	r2, [r3, #4]
1000e7a8:	794a      	ldrb	r2, [r1, #5]
1000e7aa:	7908      	ldrb	r0, [r1, #4]
1000e7ac:	0212      	lsls	r2, r2, #8
1000e7ae:	4302      	orrs	r2, r0
1000e7b0:	80da      	strh	r2, [r3, #6]
1000e7b2:	3308      	adds	r3, #8
1000e7b4:	1c18      	adds	r0, r3, #0
1000e7b6:	3106      	adds	r1, #6
1000e7b8:	4b01      	ldr	r3, [pc, #4]	; (1000e7c0 <gattc_write_req_ind_parser+0x34>)
1000e7ba:	4798      	blx	r3
1000e7bc:	bd08      	pop	{r3, pc}
1000e7be:	46c0      	nop			; (mov r8, r8)
1000e7c0:	100107e7 	.word	0x100107e7

1000e7c4 <gattc_att_info_req_parser>:
1000e7c4:	7843      	ldrb	r3, [r0, #1]
1000e7c6:	7802      	ldrb	r2, [r0, #0]
1000e7c8:	021b      	lsls	r3, r3, #8
1000e7ca:	4313      	orrs	r3, r2
1000e7cc:	800b      	strh	r3, [r1, #0]
1000e7ce:	4770      	bx	lr

1000e7d0 <gattc_read_cfm>:
1000e7d0:	b538      	push	{r3, r4, r5, lr}
1000e7d2:	2514      	movs	r5, #20
1000e7d4:	1c1c      	adds	r4, r3, #0
1000e7d6:	4b14      	ldr	r3, [pc, #80]	; (1000e828 <gattc_read_cfm+0x58>)
1000e7d8:	70d9      	strb	r1, [r3, #3]
1000e7da:	4914      	ldr	r1, [pc, #80]	; (1000e82c <gattc_read_cfm+0x5c>)
1000e7dc:	701d      	strb	r5, [r3, #0]
1000e7de:	3d08      	subs	r5, #8
1000e7e0:	705d      	strb	r5, [r3, #1]
1000e7e2:	709d      	strb	r5, [r3, #2]
1000e7e4:	880d      	ldrh	r5, [r1, #0]
1000e7e6:	8809      	ldrh	r1, [r1, #0]
1000e7e8:	7218      	strb	r0, [r3, #8]
1000e7ea:	0a09      	lsrs	r1, r1, #8
1000e7ec:	7159      	strb	r1, [r3, #5]
1000e7ee:	0a00      	lsrs	r0, r0, #8
1000e7f0:	0a21      	lsrs	r1, r4, #8
1000e7f2:	711d      	strb	r5, [r3, #4]
1000e7f4:	7258      	strb	r0, [r3, #9]
1000e7f6:	729c      	strb	r4, [r3, #10]
1000e7f8:	72d9      	strb	r1, [r3, #11]
1000e7fa:	731a      	strb	r2, [r3, #12]
1000e7fc:	1c1d      	adds	r5, r3, #0
1000e7fe:	2c00      	cmp	r4, #0
1000e800:	d007      	beq.n	1000e812 <gattc_read_cfm+0x42>
1000e802:	9904      	ldr	r1, [sp, #16]
1000e804:	1c22      	adds	r2, r4, #0
1000e806:	480a      	ldr	r0, [pc, #40]	; (1000e830 <gattc_read_cfm+0x60>)
1000e808:	4b0a      	ldr	r3, [pc, #40]	; (1000e834 <gattc_read_cfm+0x64>)
1000e80a:	340d      	adds	r4, #13
1000e80c:	4798      	blx	r3
1000e80e:	b2a1      	uxth	r1, r4
1000e810:	e001      	b.n	1000e816 <gattc_read_cfm+0x46>
1000e812:	210e      	movs	r1, #14
1000e814:	735c      	strb	r4, [r3, #13]
1000e816:	1c0b      	adds	r3, r1, #0
1000e818:	3b08      	subs	r3, #8
1000e81a:	71ab      	strb	r3, [r5, #6]
1000e81c:	121b      	asrs	r3, r3, #8
1000e81e:	71eb      	strb	r3, [r5, #7]
1000e820:	1c28      	adds	r0, r5, #0
1000e822:	4b05      	ldr	r3, [pc, #20]	; (1000e838 <gattc_read_cfm+0x68>)
1000e824:	4798      	blx	r3
1000e826:	bd38      	pop	{r3, r4, r5, pc}
1000e828:	10017ec4 	.word	0x10017ec4
1000e82c:	10017b54 	.word	0x10017b54
1000e830:	10017ed1 	.word	0x10017ed1
1000e834:	100107e7 	.word	0x100107e7
1000e838:	1000d429 	.word	0x1000d429

1000e83c <gattc_write_cfm>:
1000e83c:	4b0d      	ldr	r3, [pc, #52]	; (1000e874 <gattc_write_cfm+0x38>)
1000e83e:	b510      	push	{r4, lr}
1000e840:	729a      	strb	r2, [r3, #10]
1000e842:	2203      	movs	r2, #3
1000e844:	2416      	movs	r4, #22
1000e846:	719a      	strb	r2, [r3, #6]
1000e848:	2200      	movs	r2, #0
1000e84a:	70d9      	strb	r1, [r3, #3]
1000e84c:	490a      	ldr	r1, [pc, #40]	; (1000e878 <gattc_write_cfm+0x3c>)
1000e84e:	701c      	strb	r4, [r3, #0]
1000e850:	3c0a      	subs	r4, #10
1000e852:	705c      	strb	r4, [r3, #1]
1000e854:	709c      	strb	r4, [r3, #2]
1000e856:	880c      	ldrh	r4, [r1, #0]
1000e858:	8809      	ldrh	r1, [r1, #0]
1000e85a:	7218      	strb	r0, [r3, #8]
1000e85c:	0a09      	lsrs	r1, r1, #8
1000e85e:	0a00      	lsrs	r0, r0, #8
1000e860:	711c      	strb	r4, [r3, #4]
1000e862:	7159      	strb	r1, [r3, #5]
1000e864:	7258      	strb	r0, [r3, #9]
1000e866:	71da      	strb	r2, [r3, #7]
1000e868:	1c18      	adds	r0, r3, #0
1000e86a:	210b      	movs	r1, #11
1000e86c:	4b03      	ldr	r3, [pc, #12]	; (1000e87c <gattc_write_cfm+0x40>)
1000e86e:	4798      	blx	r3
1000e870:	bd10      	pop	{r4, pc}
1000e872:	46c0      	nop			; (mov r8, r8)
1000e874:	10017ec4 	.word	0x10017ec4
1000e878:	10017b54 	.word	0x10017b54
1000e87c:	1000d429 	.word	0x1000d429

1000e880 <gattc_att_info_cfm>:
1000e880:	b538      	push	{r3, r4, r5, lr}
1000e882:	4c0e      	ldr	r4, [pc, #56]	; (1000e8bc <gattc_att_info_cfm+0x3c>)
1000e884:	2518      	movs	r5, #24
1000e886:	7323      	strb	r3, [r4, #12]
1000e888:	2305      	movs	r3, #5
1000e88a:	71a3      	strb	r3, [r4, #6]
1000e88c:	2300      	movs	r3, #0
1000e88e:	70e1      	strb	r1, [r4, #3]
1000e890:	490b      	ldr	r1, [pc, #44]	; (1000e8c0 <gattc_att_info_cfm+0x40>)
1000e892:	7025      	strb	r5, [r4, #0]
1000e894:	3d0c      	subs	r5, #12
1000e896:	7065      	strb	r5, [r4, #1]
1000e898:	70a5      	strb	r5, [r4, #2]
1000e89a:	880d      	ldrh	r5, [r1, #0]
1000e89c:	8809      	ldrh	r1, [r1, #0]
1000e89e:	7220      	strb	r0, [r4, #8]
1000e8a0:	0a09      	lsrs	r1, r1, #8
1000e8a2:	0a00      	lsrs	r0, r0, #8
1000e8a4:	7161      	strb	r1, [r4, #5]
1000e8a6:	7260      	strb	r0, [r4, #9]
1000e8a8:	72a2      	strb	r2, [r4, #10]
1000e8aa:	71e3      	strb	r3, [r4, #7]
1000e8ac:	0a12      	lsrs	r2, r2, #8
1000e8ae:	1c20      	adds	r0, r4, #0
1000e8b0:	210d      	movs	r1, #13
1000e8b2:	4b04      	ldr	r3, [pc, #16]	; (1000e8c4 <gattc_att_info_cfm+0x44>)
1000e8b4:	7125      	strb	r5, [r4, #4]
1000e8b6:	72e2      	strb	r2, [r4, #11]
1000e8b8:	4798      	blx	r3
1000e8ba:	bd38      	pop	{r3, r4, r5, pc}
1000e8bc:	10017ec4 	.word	0x10017ec4
1000e8c0:	10017b54 	.word	0x10017b54
1000e8c4:	1000d429 	.word	0x1000d429

1000e8c8 <gattc_event_cfm_handler>:
1000e8c8:	220e      	movs	r2, #14
1000e8ca:	b508      	push	{r3, lr}
1000e8cc:	4b0b      	ldr	r3, [pc, #44]	; (1000e8fc <gattc_event_cfm_handler+0x34>)
1000e8ce:	701a      	strb	r2, [r3, #0]
1000e8d0:	3a02      	subs	r2, #2
1000e8d2:	705a      	strb	r2, [r3, #1]
1000e8d4:	709a      	strb	r2, [r3, #2]
1000e8d6:	4a0a      	ldr	r2, [pc, #40]	; (1000e900 <gattc_event_cfm_handler+0x38>)
1000e8d8:	70d8      	strb	r0, [r3, #3]
1000e8da:	8810      	ldrh	r0, [r2, #0]
1000e8dc:	8812      	ldrh	r2, [r2, #0]
1000e8de:	7219      	strb	r1, [r3, #8]
1000e8e0:	0a12      	lsrs	r2, r2, #8
1000e8e2:	715a      	strb	r2, [r3, #5]
1000e8e4:	2202      	movs	r2, #2
1000e8e6:	719a      	strb	r2, [r3, #6]
1000e8e8:	2200      	movs	r2, #0
1000e8ea:	0a09      	lsrs	r1, r1, #8
1000e8ec:	7118      	strb	r0, [r3, #4]
1000e8ee:	7259      	strb	r1, [r3, #9]
1000e8f0:	71da      	strb	r2, [r3, #7]
1000e8f2:	1c18      	adds	r0, r3, #0
1000e8f4:	210a      	movs	r1, #10
1000e8f6:	4b03      	ldr	r3, [pc, #12]	; (1000e904 <gattc_event_cfm_handler+0x3c>)
1000e8f8:	4798      	blx	r3
1000e8fa:	bd08      	pop	{r3, pc}
1000e8fc:	10017ec4 	.word	0x10017ec4
1000e900:	10017b54 	.word	0x10017b54
1000e904:	1000d429 	.word	0x1000d429

1000e908 <gattc_disc_svc_ind_parser>:
1000e908:	b570      	push	{r4, r5, r6, lr}
1000e90a:	1c15      	adds	r5, r2, #0
1000e90c:	0a00      	lsrs	r0, r0, #8
1000e90e:	8010      	strh	r0, [r2, #0]
1000e910:	784b      	ldrb	r3, [r1, #1]
1000e912:	780a      	ldrb	r2, [r1, #0]
1000e914:	021b      	lsls	r3, r3, #8
1000e916:	4313      	orrs	r3, r2
1000e918:	806b      	strh	r3, [r5, #2]
1000e91a:	78cb      	ldrb	r3, [r1, #3]
1000e91c:	788a      	ldrb	r2, [r1, #2]
1000e91e:	021b      	lsls	r3, r3, #8
1000e920:	4313      	orrs	r3, r2
1000e922:	80ab      	strh	r3, [r5, #4]
1000e924:	790e      	ldrb	r6, [r1, #4]
1000e926:	4b05      	ldr	r3, [pc, #20]	; (1000e93c <gattc_disc_svc_ind_parser+0x34>)
1000e928:	1c30      	adds	r0, r6, #0
1000e92a:	1c0c      	adds	r4, r1, #0
1000e92c:	4798      	blx	r3
1000e92e:	1c32      	adds	r2, r6, #0
1000e930:	71a8      	strb	r0, [r5, #6]
1000e932:	1d61      	adds	r1, r4, #5
1000e934:	1de8      	adds	r0, r5, #7
1000e936:	4b02      	ldr	r3, [pc, #8]	; (1000e940 <gattc_disc_svc_ind_parser+0x38>)
1000e938:	4798      	blx	r3
1000e93a:	bd70      	pop	{r4, r5, r6, pc}
1000e93c:	1000cd99 	.word	0x1000cd99
1000e940:	100107e7 	.word	0x100107e7

1000e944 <gattc_disc_svc_incl_ind_parser>:
1000e944:	b570      	push	{r4, r5, r6, lr}
1000e946:	1c15      	adds	r5, r2, #0
1000e948:	0a00      	lsrs	r0, r0, #8
1000e94a:	8010      	strh	r0, [r2, #0]
1000e94c:	784b      	ldrb	r3, [r1, #1]
1000e94e:	780a      	ldrb	r2, [r1, #0]
1000e950:	021b      	lsls	r3, r3, #8
1000e952:	4313      	orrs	r3, r2
1000e954:	806b      	strh	r3, [r5, #2]
1000e956:	78cb      	ldrb	r3, [r1, #3]
1000e958:	788a      	ldrb	r2, [r1, #2]
1000e95a:	021b      	lsls	r3, r3, #8
1000e95c:	4313      	orrs	r3, r2
1000e95e:	80ab      	strh	r3, [r5, #4]
1000e960:	794b      	ldrb	r3, [r1, #5]
1000e962:	790a      	ldrb	r2, [r1, #4]
1000e964:	021b      	lsls	r3, r3, #8
1000e966:	4313      	orrs	r3, r2
1000e968:	80eb      	strh	r3, [r5, #6]
1000e96a:	798e      	ldrb	r6, [r1, #6]
1000e96c:	4b05      	ldr	r3, [pc, #20]	; (1000e984 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e96e:	1c30      	adds	r0, r6, #0
1000e970:	1c0c      	adds	r4, r1, #0
1000e972:	4798      	blx	r3
1000e974:	7228      	strb	r0, [r5, #8]
1000e976:	1c28      	adds	r0, r5, #0
1000e978:	1c32      	adds	r2, r6, #0
1000e97a:	1de1      	adds	r1, r4, #7
1000e97c:	4b02      	ldr	r3, [pc, #8]	; (1000e988 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e97e:	3009      	adds	r0, #9
1000e980:	4798      	blx	r3
1000e982:	bd70      	pop	{r4, r5, r6, pc}
1000e984:	1000cd99 	.word	0x1000cd99
1000e988:	100107e7 	.word	0x100107e7

1000e98c <gattc_disc_char_ind_parser>:
1000e98c:	b570      	push	{r4, r5, r6, lr}
1000e98e:	1c15      	adds	r5, r2, #0
1000e990:	0a00      	lsrs	r0, r0, #8
1000e992:	8010      	strh	r0, [r2, #0]
1000e994:	784b      	ldrb	r3, [r1, #1]
1000e996:	780a      	ldrb	r2, [r1, #0]
1000e998:	021b      	lsls	r3, r3, #8
1000e99a:	4313      	orrs	r3, r2
1000e99c:	806b      	strh	r3, [r5, #2]
1000e99e:	78cb      	ldrb	r3, [r1, #3]
1000e9a0:	788a      	ldrb	r2, [r1, #2]
1000e9a2:	021b      	lsls	r3, r3, #8
1000e9a4:	4313      	orrs	r3, r2
1000e9a6:	80ab      	strh	r3, [r5, #4]
1000e9a8:	790b      	ldrb	r3, [r1, #4]
1000e9aa:	1c0c      	adds	r4, r1, #0
1000e9ac:	71ab      	strb	r3, [r5, #6]
1000e9ae:	794e      	ldrb	r6, [r1, #5]
1000e9b0:	4b05      	ldr	r3, [pc, #20]	; (1000e9c8 <gattc_disc_char_ind_parser+0x3c>)
1000e9b2:	1c30      	adds	r0, r6, #0
1000e9b4:	4798      	blx	r3
1000e9b6:	71e8      	strb	r0, [r5, #7]
1000e9b8:	1c28      	adds	r0, r5, #0
1000e9ba:	1c32      	adds	r2, r6, #0
1000e9bc:	1da1      	adds	r1, r4, #6
1000e9be:	4b03      	ldr	r3, [pc, #12]	; (1000e9cc <gattc_disc_char_ind_parser+0x40>)
1000e9c0:	3008      	adds	r0, #8
1000e9c2:	4798      	blx	r3
1000e9c4:	bd70      	pop	{r4, r5, r6, pc}
1000e9c6:	46c0      	nop			; (mov r8, r8)
1000e9c8:	1000cd99 	.word	0x1000cd99
1000e9cc:	100107e7 	.word	0x100107e7

1000e9d0 <gattc_disc_char_desc_ind_parser>:
1000e9d0:	b570      	push	{r4, r5, r6, lr}
1000e9d2:	1c15      	adds	r5, r2, #0
1000e9d4:	0a00      	lsrs	r0, r0, #8
1000e9d6:	8010      	strh	r0, [r2, #0]
1000e9d8:	784b      	ldrb	r3, [r1, #1]
1000e9da:	780a      	ldrb	r2, [r1, #0]
1000e9dc:	021b      	lsls	r3, r3, #8
1000e9de:	4313      	orrs	r3, r2
1000e9e0:	806b      	strh	r3, [r5, #2]
1000e9e2:	788e      	ldrb	r6, [r1, #2]
1000e9e4:	4b05      	ldr	r3, [pc, #20]	; (1000e9fc <gattc_disc_char_desc_ind_parser+0x2c>)
1000e9e6:	1c30      	adds	r0, r6, #0
1000e9e8:	1c0c      	adds	r4, r1, #0
1000e9ea:	4798      	blx	r3
1000e9ec:	1c32      	adds	r2, r6, #0
1000e9ee:	7128      	strb	r0, [r5, #4]
1000e9f0:	1ce1      	adds	r1, r4, #3
1000e9f2:	1d68      	adds	r0, r5, #5
1000e9f4:	4b02      	ldr	r3, [pc, #8]	; (1000ea00 <gattc_disc_char_desc_ind_parser+0x30>)
1000e9f6:	4798      	blx	r3
1000e9f8:	bd70      	pop	{r4, r5, r6, pc}
1000e9fa:	46c0      	nop			; (mov r8, r8)
1000e9fc:	1000cd99 	.word	0x1000cd99
1000ea00:	100107e7 	.word	0x100107e7

1000ea04 <gattc_event_ind_and_notification_parser>:
1000ea04:	b510      	push	{r4, lr}
1000ea06:	780c      	ldrb	r4, [r1, #0]
1000ea08:	1c13      	adds	r3, r2, #0
1000ea0a:	2c12      	cmp	r4, #18
1000ea0c:	d10e      	bne.n	1000ea2c <gattc_event_ind_and_notification_parser+0x28>
1000ea0e:	0a00      	lsrs	r0, r0, #8
1000ea10:	8010      	strh	r0, [r2, #0]
1000ea12:	788a      	ldrb	r2, [r1, #2]
1000ea14:	709a      	strb	r2, [r3, #2]
1000ea16:	7948      	ldrb	r0, [r1, #5]
1000ea18:	790c      	ldrb	r4, [r1, #4]
1000ea1a:	0200      	lsls	r0, r0, #8
1000ea1c:	4320      	orrs	r0, r4
1000ea1e:	8098      	strh	r0, [r3, #4]
1000ea20:	3106      	adds	r1, #6
1000ea22:	1d98      	adds	r0, r3, #6
1000ea24:	4b0b      	ldr	r3, [pc, #44]	; (1000ea54 <gattc_event_ind_and_notification_parser+0x50>)
1000ea26:	4798      	blx	r3
1000ea28:	221b      	movs	r2, #27
1000ea2a:	e010      	b.n	1000ea4e <gattc_event_ind_and_notification_parser+0x4a>
1000ea2c:	2200      	movs	r2, #0
1000ea2e:	2c13      	cmp	r4, #19
1000ea30:	d10d      	bne.n	1000ea4e <gattc_event_ind_and_notification_parser+0x4a>
1000ea32:	0a00      	lsrs	r0, r0, #8
1000ea34:	8018      	strh	r0, [r3, #0]
1000ea36:	788a      	ldrb	r2, [r1, #2]
1000ea38:	709a      	strb	r2, [r3, #2]
1000ea3a:	7908      	ldrb	r0, [r1, #4]
1000ea3c:	78cc      	ldrb	r4, [r1, #3]
1000ea3e:	0200      	lsls	r0, r0, #8
1000ea40:	4320      	orrs	r0, r4
1000ea42:	8098      	strh	r0, [r3, #4]
1000ea44:	3106      	adds	r1, #6
1000ea46:	1d98      	adds	r0, r3, #6
1000ea48:	4b02      	ldr	r3, [pc, #8]	; (1000ea54 <gattc_event_ind_and_notification_parser+0x50>)
1000ea4a:	4798      	blx	r3
1000ea4c:	221c      	movs	r2, #28
1000ea4e:	1c10      	adds	r0, r2, #0
1000ea50:	bd10      	pop	{r4, pc}
1000ea52:	46c0      	nop			; (mov r8, r8)
1000ea54:	100107e7 	.word	0x100107e7

1000ea58 <gattc_complete_evt_handler>:
1000ea58:	b500      	push	{lr}
1000ea5a:	0a00      	lsrs	r0, r0, #8
1000ea5c:	8010      	strh	r0, [r2, #0]
1000ea5e:	7808      	ldrb	r0, [r1, #0]
1000ea60:	7090      	strb	r0, [r2, #2]
1000ea62:	784b      	ldrb	r3, [r1, #1]
1000ea64:	3801      	subs	r0, #1
1000ea66:	70d3      	strb	r3, [r2, #3]
1000ea68:	2813      	cmp	r0, #19
1000ea6a:	d82c      	bhi.n	1000eac6 <gattc_complete_evt_handler+0x6e>
1000ea6c:	f000 f99a 	bl	1000eda4 <__gnu_thumb1_case_uqi>
1000ea70:	0a0a0a0c 	.word	0x0a0a0a0c
1000ea74:	210a0a0a 	.word	0x210a0a0a
1000ea78:	111f2121 	.word	0x111f2121
1000ea7c:	2b111111 	.word	0x2b111111
1000ea80:	2919132b 	.word	0x2919132b
1000ea84:	2017      	movs	r0, #23
1000ea86:	e01f      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000ea88:	2024      	movs	r0, #36	; 0x24
1000ea8a:	2b00      	cmp	r3, #0
1000ea8c:	d11c      	bne.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000ea8e:	3017      	adds	r0, #23
1000ea90:	e01a      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000ea92:	2025      	movs	r0, #37	; 0x25
1000ea94:	e018      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000ea96:	4a0d      	ldr	r2, [pc, #52]	; (1000eacc <gattc_complete_evt_handler+0x74>)
1000ea98:	201d      	movs	r0, #29
1000ea9a:	6813      	ldr	r3, [r2, #0]
1000ea9c:	3b01      	subs	r3, #1
1000ea9e:	6013      	str	r3, [r2, #0]
1000eaa0:	e012      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eaa2:	4a0a      	ldr	r2, [pc, #40]	; (1000eacc <gattc_complete_evt_handler+0x74>)
1000eaa4:	201e      	movs	r0, #30
1000eaa6:	6813      	ldr	r3, [r2, #0]
1000eaa8:	3b01      	subs	r3, #1
1000eaaa:	6013      	str	r3, [r2, #0]
1000eaac:	e00c      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eaae:	2019      	movs	r0, #25
1000eab0:	e00a      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eab2:	203b      	movs	r0, #59	; 0x3b
1000eab4:	2b00      	cmp	r3, #0
1000eab6:	d007      	beq.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eab8:	2182      	movs	r1, #130	; 0x82
1000eaba:	0089      	lsls	r1, r1, #2
1000eabc:	5453      	strb	r3, [r2, r1]
1000eabe:	3823      	subs	r0, #35	; 0x23
1000eac0:	e002      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eac2:	2021      	movs	r0, #33	; 0x21
1000eac4:	e000      	b.n	1000eac8 <gattc_complete_evt_handler+0x70>
1000eac6:	2000      	movs	r0, #0
1000eac8:	bd00      	pop	{pc}
1000eaca:	46c0      	nop			; (mov r8, r8)
1000eacc:	10016ed0 	.word	0x10016ed0

1000ead0 <gattc_event_mtu_changed_ind_parser>:
1000ead0:	0a00      	lsrs	r0, r0, #8
1000ead2:	8010      	strh	r0, [r2, #0]
1000ead4:	784b      	ldrb	r3, [r1, #1]
1000ead6:	7809      	ldrb	r1, [r1, #0]
1000ead8:	021b      	lsls	r3, r3, #8
1000eada:	430b      	orrs	r3, r1
1000eadc:	8053      	strh	r3, [r2, #2]
1000eade:	4770      	bx	lr

1000eae0 <gattc_read_ind_parser>:
1000eae0:	0a00      	lsrs	r0, r0, #8
1000eae2:	b508      	push	{r3, lr}
1000eae4:	8010      	strh	r0, [r2, #0]
1000eae6:	1c13      	adds	r3, r2, #0
1000eae8:	2282      	movs	r2, #130	; 0x82
1000eaea:	2000      	movs	r0, #0
1000eaec:	0092      	lsls	r2, r2, #2
1000eaee:	5498      	strb	r0, [r3, r2]
1000eaf0:	784a      	ldrb	r2, [r1, #1]
1000eaf2:	7808      	ldrb	r0, [r1, #0]
1000eaf4:	0212      	lsls	r2, r2, #8
1000eaf6:	4302      	orrs	r2, r0
1000eaf8:	805a      	strh	r2, [r3, #2]
1000eafa:	78ca      	ldrb	r2, [r1, #3]
1000eafc:	7888      	ldrb	r0, [r1, #2]
1000eafe:	0212      	lsls	r2, r2, #8
1000eb00:	4302      	orrs	r2, r0
1000eb02:	80da      	strh	r2, [r3, #6]
1000eb04:	794a      	ldrb	r2, [r1, #5]
1000eb06:	7908      	ldrb	r0, [r1, #4]
1000eb08:	0212      	lsls	r2, r2, #8
1000eb0a:	4302      	orrs	r2, r0
1000eb0c:	809a      	strh	r2, [r3, #4]
1000eb0e:	3308      	adds	r3, #8
1000eb10:	1c18      	adds	r0, r3, #0
1000eb12:	3106      	adds	r1, #6
1000eb14:	4b01      	ldr	r3, [pc, #4]	; (1000eb1c <gattc_read_ind_parser+0x3c>)
1000eb16:	4798      	blx	r3
1000eb18:	bd08      	pop	{r3, pc}
1000eb1a:	46c0      	nop			; (mov r8, r8)
1000eb1c:	100107e7 	.word	0x100107e7

1000eb20 <gattc_svc_changed_cfg_ind_parser>:
1000eb20:	0a00      	lsrs	r0, r0, #8
1000eb22:	8010      	strh	r0, [r2, #0]
1000eb24:	784b      	ldrb	r3, [r1, #1]
1000eb26:	7809      	ldrb	r1, [r1, #0]
1000eb28:	021b      	lsls	r3, r3, #8
1000eb2a:	430b      	orrs	r3, r1
1000eb2c:	8053      	strh	r3, [r2, #2]
1000eb2e:	4770      	bx	lr

1000eb30 <init_gattc_task_module>:
1000eb30:	2300      	movs	r3, #0
1000eb32:	4a02      	ldr	r2, [pc, #8]	; (1000eb3c <init_gattc_task_module+0xc>)
1000eb34:	8013      	strh	r3, [r2, #0]
1000eb36:	4a02      	ldr	r2, [pc, #8]	; (1000eb40 <init_gattc_task_module+0x10>)
1000eb38:	8013      	strh	r3, [r2, #0]
1000eb3a:	4770      	bx	lr
1000eb3c:	10016eca 	.word	0x10016eca
1000eb40:	10016ecc 	.word	0x10016ecc

1000eb44 <gattm_att_set_value_req_handler>:
1000eb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eb46:	466b      	mov	r3, sp
1000eb48:	1dde      	adds	r6, r3, #7
1000eb4a:	2300      	movs	r3, #0
1000eb4c:	1c0d      	adds	r5, r1, #0
1000eb4e:	210c      	movs	r1, #12
1000eb50:	270b      	movs	r7, #11
1000eb52:	4c17      	ldr	r4, [pc, #92]	; (1000ebb0 <gattm_att_set_value_req_handler+0x6c>)
1000eb54:	7033      	strb	r3, [r6, #0]
1000eb56:	70e3      	strb	r3, [r4, #3]
1000eb58:	4b16      	ldr	r3, [pc, #88]	; (1000ebb4 <gattm_att_set_value_req_handler+0x70>)
1000eb5a:	7021      	strb	r1, [r4, #0]
1000eb5c:	8819      	ldrh	r1, [r3, #0]
1000eb5e:	881b      	ldrh	r3, [r3, #0]
1000eb60:	7220      	strb	r0, [r4, #8]
1000eb62:	0a1b      	lsrs	r3, r3, #8
1000eb64:	7163      	strb	r3, [r4, #5]
1000eb66:	0a00      	lsrs	r0, r0, #8
1000eb68:	0a2b      	lsrs	r3, r5, #8
1000eb6a:	7121      	strb	r1, [r4, #4]
1000eb6c:	7260      	strb	r0, [r4, #9]
1000eb6e:	1c11      	adds	r1, r2, #0
1000eb70:	72a5      	strb	r5, [r4, #10]
1000eb72:	1c2a      	adds	r2, r5, #0
1000eb74:	72e3      	strb	r3, [r4, #11]
1000eb76:	350c      	adds	r5, #12
1000eb78:	4b0f      	ldr	r3, [pc, #60]	; (1000ebb8 <gattm_att_set_value_req_handler+0x74>)
1000eb7a:	4810      	ldr	r0, [pc, #64]	; (1000ebbc <gattm_att_set_value_req_handler+0x78>)
1000eb7c:	7067      	strb	r7, [r4, #1]
1000eb7e:	70a7      	strb	r7, [r4, #2]
1000eb80:	4798      	blx	r3
1000eb82:	b2a9      	uxth	r1, r5
1000eb84:	4b0e      	ldr	r3, [pc, #56]	; (1000ebc0 <gattm_att_set_value_req_handler+0x7c>)
1000eb86:	4d0f      	ldr	r5, [pc, #60]	; (1000ebc4 <gattm_att_set_value_req_handler+0x80>)
1000eb88:	1c20      	adds	r0, r4, #0
1000eb8a:	802b      	strh	r3, [r5, #0]
1000eb8c:	1c0b      	adds	r3, r1, #0
1000eb8e:	3b08      	subs	r3, #8
1000eb90:	71a3      	strb	r3, [r4, #6]
1000eb92:	121b      	asrs	r3, r3, #8
1000eb94:	71e3      	strb	r3, [r4, #7]
1000eb96:	4b0c      	ldr	r3, [pc, #48]	; (1000ebc8 <gattm_att_set_value_req_handler+0x84>)
1000eb98:	80af      	strh	r7, [r5, #4]
1000eb9a:	4798      	blx	r3
1000eb9c:	1c30      	adds	r0, r6, #0
1000eb9e:	4b0b      	ldr	r3, [pc, #44]	; (1000ebcc <gattm_att_set_value_req_handler+0x88>)
1000eba0:	4798      	blx	r3
1000eba2:	7833      	ldrb	r3, [r6, #0]
1000eba4:	20e2      	movs	r0, #226	; 0xe2
1000eba6:	2b00      	cmp	r3, #0
1000eba8:	d101      	bne.n	1000ebae <gattm_att_set_value_req_handler+0x6a>
1000ebaa:	68ab      	ldr	r3, [r5, #8]
1000ebac:	7898      	ldrb	r0, [r3, #2]
1000ebae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ebb0:	10017ec4 	.word	0x10017ec4
1000ebb4:	10017b54 	.word	0x10017b54
1000ebb8:	100107e7 	.word	0x100107e7
1000ebbc:	10017ed0 	.word	0x10017ed0
1000ebc0:	00000b0d 	.word	0x00000b0d
1000ebc4:	10017b48 	.word	0x10017b48
1000ebc8:	1000d429 	.word	0x1000d429
1000ebcc:	1000d48d 	.word	0x1000d48d

1000ebd0 <gattm_att_get_value_req_handler>:
1000ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebd2:	b085      	sub	sp, #20
1000ebd4:	9201      	str	r2, [sp, #4]
1000ebd6:	220a      	movs	r2, #10
1000ebd8:	1c04      	adds	r4, r0, #0
1000ebda:	481d      	ldr	r0, [pc, #116]	; (1000ec50 <gattm_att_get_value_req_handler+0x80>)
1000ebdc:	ab02      	add	r3, sp, #8
1000ebde:	1dde      	adds	r6, r3, #7
1000ebe0:	7002      	strb	r2, [r0, #0]
1000ebe2:	2300      	movs	r3, #0
1000ebe4:	220b      	movs	r2, #11
1000ebe6:	4d1b      	ldr	r5, [pc, #108]	; (1000ec54 <gattm_att_get_value_req_handler+0x84>)
1000ebe8:	1c0f      	adds	r7, r1, #0
1000ebea:	8829      	ldrh	r1, [r5, #0]
1000ebec:	882d      	ldrh	r5, [r5, #0]
1000ebee:	7101      	strb	r1, [r0, #4]
1000ebf0:	0a2d      	lsrs	r5, r5, #8
1000ebf2:	7145      	strb	r5, [r0, #5]
1000ebf4:	0a25      	lsrs	r5, r4, #8
1000ebf6:	7245      	strb	r5, [r0, #9]
1000ebf8:	4917      	ldr	r1, [pc, #92]	; (1000ec58 <gattm_att_get_value_req_handler+0x88>)
1000ebfa:	4d18      	ldr	r5, [pc, #96]	; (1000ec5c <gattm_att_get_value_req_handler+0x8c>)
1000ebfc:	7033      	strb	r3, [r6, #0]
1000ebfe:	7042      	strb	r2, [r0, #1]
1000ec00:	7082      	strb	r2, [r0, #2]
1000ec02:	70c3      	strb	r3, [r0, #3]
1000ec04:	8029      	strh	r1, [r5, #0]
1000ec06:	80aa      	strh	r2, [r5, #4]
1000ec08:	71c3      	strb	r3, [r0, #7]
1000ec0a:	3a09      	subs	r2, #9
1000ec0c:	210a      	movs	r1, #10
1000ec0e:	4b14      	ldr	r3, [pc, #80]	; (1000ec60 <gattm_att_get_value_req_handler+0x90>)
1000ec10:	7182      	strb	r2, [r0, #6]
1000ec12:	7204      	strb	r4, [r0, #8]
1000ec14:	4798      	blx	r3
1000ec16:	1c30      	adds	r0, r6, #0
1000ec18:	4b12      	ldr	r3, [pc, #72]	; (1000ec64 <gattm_att_get_value_req_handler+0x94>)
1000ec1a:	4798      	blx	r3
1000ec1c:	7833      	ldrb	r3, [r6, #0]
1000ec1e:	20e2      	movs	r0, #226	; 0xe2
1000ec20:	2b00      	cmp	r3, #0
1000ec22:	d112      	bne.n	1000ec4a <gattm_att_get_value_req_handler+0x7a>
1000ec24:	68a9      	ldr	r1, [r5, #8]
1000ec26:	9801      	ldr	r0, [sp, #4]
1000ec28:	784d      	ldrb	r5, [r1, #1]
1000ec2a:	780b      	ldrb	r3, [r1, #0]
1000ec2c:	78ca      	ldrb	r2, [r1, #3]
1000ec2e:	022d      	lsls	r5, r5, #8
1000ec30:	431d      	orrs	r5, r3
1000ec32:	788b      	ldrb	r3, [r1, #2]
1000ec34:	0212      	lsls	r2, r2, #8
1000ec36:	431a      	orrs	r2, r3
1000ec38:	803a      	strh	r2, [r7, #0]
1000ec3a:	790e      	ldrb	r6, [r1, #4]
1000ec3c:	4b0a      	ldr	r3, [pc, #40]	; (1000ec68 <gattm_att_get_value_req_handler+0x98>)
1000ec3e:	3105      	adds	r1, #5
1000ec40:	4798      	blx	r3
1000ec42:	20e2      	movs	r0, #226	; 0xe2
1000ec44:	42ac      	cmp	r4, r5
1000ec46:	d100      	bne.n	1000ec4a <gattm_att_get_value_req_handler+0x7a>
1000ec48:	1c30      	adds	r0, r6, #0
1000ec4a:	b005      	add	sp, #20
1000ec4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec4e:	46c0      	nop			; (mov r8, r8)
1000ec50:	10017ec4 	.word	0x10017ec4
1000ec54:	10017b54 	.word	0x10017b54
1000ec58:	00000b0b 	.word	0x00000b0b
1000ec5c:	10017b48 	.word	0x10017b48
1000ec60:	1000d429 	.word	0x1000d429
1000ec64:	1000d48d 	.word	0x1000d48d
1000ec68:	100107e7 	.word	0x100107e7

1000ec6c <htpt_create_db_req_handler>:
1000ec6c:	b570      	push	{r4, r5, r6, lr}
1000ec6e:	b086      	sub	sp, #24
1000ec70:	ac04      	add	r4, sp, #16
1000ec72:	80a3      	strh	r3, [r4, #4]
1000ec74:	4b0b      	ldr	r3, [pc, #44]	; (1000eca4 <htpt_create_db_req_handler+0x38>)
1000ec76:	8062      	strh	r2, [r4, #2]
1000ec78:	1c06      	adds	r6, r0, #0
1000ec7a:	881a      	ldrh	r2, [r3, #0]
1000ec7c:	2308      	movs	r3, #8
1000ec7e:	a80a      	add	r0, sp, #40	; 0x28
1000ec80:	8805      	ldrh	r5, [r0, #0]
1000ec82:	a80b      	add	r0, sp, #44	; 0x2c
1000ec84:	7026      	strb	r6, [r4, #0]
1000ec86:	7061      	strb	r1, [r4, #1]
1000ec88:	80e5      	strh	r5, [r4, #6]
1000ec8a:	7800      	ldrb	r0, [r0, #0]
1000ec8c:	9301      	str	r3, [sp, #4]
1000ec8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ec90:	9400      	str	r4, [sp, #0]
1000ec92:	9302      	str	r3, [sp, #8]
1000ec94:	b292      	uxth	r2, r2
1000ec96:	211b      	movs	r1, #27
1000ec98:	2300      	movs	r3, #0
1000ec9a:	4c03      	ldr	r4, [pc, #12]	; (1000eca8 <htpt_create_db_req_handler+0x3c>)
1000ec9c:	47a0      	blx	r4
1000ec9e:	b006      	add	sp, #24
1000eca0:	bd70      	pop	{r4, r5, r6, pc}
1000eca2:	46c0      	nop			; (mov r8, r8)
1000eca4:	10017b54 	.word	0x10017b54
1000eca8:	1000e679 	.word	0x1000e679

1000ecac <htpt_enable_req_handler>:
1000ecac:	221b      	movs	r2, #27
1000ecae:	b538      	push	{r3, r4, r5, lr}
1000ecb0:	4b0b      	ldr	r3, [pc, #44]	; (1000ece0 <htpt_enable_req_handler+0x34>)
1000ecb2:	2400      	movs	r4, #0
1000ecb4:	705a      	strb	r2, [r3, #1]
1000ecb6:	709a      	strb	r2, [r3, #2]
1000ecb8:	4a0a      	ldr	r2, [pc, #40]	; (1000ece4 <htpt_enable_req_handler+0x38>)
1000ecba:	701c      	strb	r4, [r3, #0]
1000ecbc:	8815      	ldrh	r5, [r2, #0]
1000ecbe:	8812      	ldrh	r2, [r2, #0]
1000ecc0:	711d      	strb	r5, [r3, #4]
1000ecc2:	0a12      	lsrs	r2, r2, #8
1000ecc4:	715a      	strb	r2, [r3, #5]
1000ecc6:	2202      	movs	r2, #2
1000ecc8:	70dc      	strb	r4, [r3, #3]
1000ecca:	7218      	strb	r0, [r3, #8]
1000eccc:	7259      	strb	r1, [r3, #9]
1000ecce:	719a      	strb	r2, [r3, #6]
1000ecd0:	71dc      	strb	r4, [r3, #7]
1000ecd2:	1c18      	adds	r0, r3, #0
1000ecd4:	210a      	movs	r1, #10
1000ecd6:	4b04      	ldr	r3, [pc, #16]	; (1000ece8 <htpt_enable_req_handler+0x3c>)
1000ecd8:	4798      	blx	r3
1000ecda:	1c20      	adds	r0, r4, #0
1000ecdc:	bd38      	pop	{r3, r4, r5, pc}
1000ecde:	46c0      	nop			; (mov r8, r8)
1000ece0:	10017ec4 	.word	0x10017ec4
1000ece4:	10017b54 	.word	0x10017b54
1000ece8:	1000d429 	.word	0x1000d429

1000ecec <htpt_temp_send_req_handler>:
1000ecec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ecee:	2502      	movs	r5, #2
1000ecf0:	ac08      	add	r4, sp, #32
1000ecf2:	7826      	ldrb	r6, [r4, #0]
1000ecf4:	4c18      	ldr	r4, [pc, #96]	; (1000ed58 <htpt_temp_send_req_handler+0x6c>)
1000ecf6:	4f19      	ldr	r7, [pc, #100]	; (1000ed5c <htpt_temp_send_req_handler+0x70>)
1000ecf8:	7025      	strb	r5, [r4, #0]
1000ecfa:	3519      	adds	r5, #25
1000ecfc:	7065      	strb	r5, [r4, #1]
1000ecfe:	70a5      	strb	r5, [r4, #2]
1000ed00:	2500      	movs	r5, #0
1000ed02:	9301      	str	r3, [sp, #4]
1000ed04:	883b      	ldrh	r3, [r7, #0]
1000ed06:	883f      	ldrh	r7, [r7, #0]
1000ed08:	7123      	strb	r3, [r4, #4]
1000ed0a:	466b      	mov	r3, sp
1000ed0c:	0a3f      	lsrs	r7, r7, #8
1000ed0e:	7167      	strb	r7, [r4, #5]
1000ed10:	0a07      	lsrs	r7, r0, #8
1000ed12:	7220      	strb	r0, [r4, #8]
1000ed14:	7267      	strb	r7, [r4, #9]
1000ed16:	0c07      	lsrs	r7, r0, #16
1000ed18:	0e00      	lsrs	r0, r0, #24
1000ed1a:	70e5      	strb	r5, [r4, #3]
1000ed1c:	72a7      	strb	r7, [r4, #10]
1000ed1e:	72e0      	strb	r0, [r4, #11]
1000ed20:	8808      	ldrh	r0, [r1, #0]
1000ed22:	791b      	ldrb	r3, [r3, #4]
1000ed24:	7320      	strb	r0, [r4, #12]
1000ed26:	8808      	ldrh	r0, [r1, #0]
1000ed28:	0a00      	lsrs	r0, r0, #8
1000ed2a:	7360      	strb	r0, [r4, #13]
1000ed2c:	7888      	ldrb	r0, [r1, #2]
1000ed2e:	73a0      	strb	r0, [r4, #14]
1000ed30:	78c8      	ldrb	r0, [r1, #3]
1000ed32:	73e0      	strb	r0, [r4, #15]
1000ed34:	7908      	ldrb	r0, [r1, #4]
1000ed36:	7420      	strb	r0, [r4, #16]
1000ed38:	7948      	ldrb	r0, [r1, #5]
1000ed3a:	7460      	strb	r0, [r4, #17]
1000ed3c:	7989      	ldrb	r1, [r1, #6]
1000ed3e:	7522      	strb	r2, [r4, #20]
1000ed40:	74a1      	strb	r1, [r4, #18]
1000ed42:	7563      	strb	r3, [r4, #21]
1000ed44:	2314      	movs	r3, #20
1000ed46:	1c20      	adds	r0, r4, #0
1000ed48:	71a3      	strb	r3, [r4, #6]
1000ed4a:	211c      	movs	r1, #28
1000ed4c:	4b04      	ldr	r3, [pc, #16]	; (1000ed60 <htpt_temp_send_req_handler+0x74>)
1000ed4e:	7626      	strb	r6, [r4, #24]
1000ed50:	71e5      	strb	r5, [r4, #7]
1000ed52:	4798      	blx	r3
1000ed54:	1c28      	adds	r0, r5, #0
1000ed56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ed58:	10017ec4 	.word	0x10017ec4
1000ed5c:	10017b54 	.word	0x10017b54
1000ed60:	1000d429 	.word	0x1000d429

1000ed64 <htpt_enable_rsp_handler>:
1000ed64:	780b      	ldrb	r3, [r1, #0]
1000ed66:	7013      	strb	r3, [r2, #0]
1000ed68:	784b      	ldrb	r3, [r1, #1]
1000ed6a:	7053      	strb	r3, [r2, #1]
1000ed6c:	4770      	bx	lr

1000ed6e <htpt_temp_send_rsp_handler>:
1000ed6e:	780b      	ldrb	r3, [r1, #0]
1000ed70:	7013      	strb	r3, [r2, #0]
1000ed72:	4770      	bx	lr

1000ed74 <htpt_meas_intv_upd_rsp_handler>:
1000ed74:	780b      	ldrb	r3, [r1, #0]
1000ed76:	7013      	strb	r3, [r2, #0]
1000ed78:	4770      	bx	lr

1000ed7a <htpt_meas_intv_chg_req_ind_handler>:
1000ed7a:	78cb      	ldrb	r3, [r1, #3]
1000ed7c:	7889      	ldrb	r1, [r1, #2]
1000ed7e:	021b      	lsls	r3, r3, #8
1000ed80:	430b      	orrs	r3, r1
1000ed82:	8013      	strh	r3, [r2, #0]
1000ed84:	4770      	bx	lr

1000ed86 <htpt_cfg_indntf_ind_handler>:
1000ed86:	780b      	ldrb	r3, [r1, #0]
1000ed88:	7013      	strb	r3, [r2, #0]
1000ed8a:	784b      	ldrb	r3, [r1, #1]
1000ed8c:	7053      	strb	r3, [r2, #1]
1000ed8e:	4770      	bx	lr

1000ed90 <__gnu_thumb1_case_sqi>:
1000ed90:	b402      	push	{r1}
1000ed92:	4671      	mov	r1, lr
1000ed94:	0849      	lsrs	r1, r1, #1
1000ed96:	0049      	lsls	r1, r1, #1
1000ed98:	5609      	ldrsb	r1, [r1, r0]
1000ed9a:	0049      	lsls	r1, r1, #1
1000ed9c:	448e      	add	lr, r1
1000ed9e:	bc02      	pop	{r1}
1000eda0:	4770      	bx	lr
1000eda2:	46c0      	nop			; (mov r8, r8)

1000eda4 <__gnu_thumb1_case_uqi>:
1000eda4:	b402      	push	{r1}
1000eda6:	4671      	mov	r1, lr
1000eda8:	0849      	lsrs	r1, r1, #1
1000edaa:	0049      	lsls	r1, r1, #1
1000edac:	5c09      	ldrb	r1, [r1, r0]
1000edae:	0049      	lsls	r1, r1, #1
1000edb0:	448e      	add	lr, r1
1000edb2:	bc02      	pop	{r1}
1000edb4:	4770      	bx	lr
1000edb6:	46c0      	nop			; (mov r8, r8)

1000edb8 <__aeabi_uidiv>:
1000edb8:	2200      	movs	r2, #0
1000edba:	0843      	lsrs	r3, r0, #1
1000edbc:	428b      	cmp	r3, r1
1000edbe:	d374      	bcc.n	1000eeaa <__aeabi_uidiv+0xf2>
1000edc0:	0903      	lsrs	r3, r0, #4
1000edc2:	428b      	cmp	r3, r1
1000edc4:	d35f      	bcc.n	1000ee86 <__aeabi_uidiv+0xce>
1000edc6:	0a03      	lsrs	r3, r0, #8
1000edc8:	428b      	cmp	r3, r1
1000edca:	d344      	bcc.n	1000ee56 <__aeabi_uidiv+0x9e>
1000edcc:	0b03      	lsrs	r3, r0, #12
1000edce:	428b      	cmp	r3, r1
1000edd0:	d328      	bcc.n	1000ee24 <__aeabi_uidiv+0x6c>
1000edd2:	0c03      	lsrs	r3, r0, #16
1000edd4:	428b      	cmp	r3, r1
1000edd6:	d30d      	bcc.n	1000edf4 <__aeabi_uidiv+0x3c>
1000edd8:	22ff      	movs	r2, #255	; 0xff
1000edda:	0209      	lsls	r1, r1, #8
1000eddc:	ba12      	rev	r2, r2
1000edde:	0c03      	lsrs	r3, r0, #16
1000ede0:	428b      	cmp	r3, r1
1000ede2:	d302      	bcc.n	1000edea <__aeabi_uidiv+0x32>
1000ede4:	1212      	asrs	r2, r2, #8
1000ede6:	0209      	lsls	r1, r1, #8
1000ede8:	d065      	beq.n	1000eeb6 <__aeabi_uidiv+0xfe>
1000edea:	0b03      	lsrs	r3, r0, #12
1000edec:	428b      	cmp	r3, r1
1000edee:	d319      	bcc.n	1000ee24 <__aeabi_uidiv+0x6c>
1000edf0:	e000      	b.n	1000edf4 <__aeabi_uidiv+0x3c>
1000edf2:	0a09      	lsrs	r1, r1, #8
1000edf4:	0bc3      	lsrs	r3, r0, #15
1000edf6:	428b      	cmp	r3, r1
1000edf8:	d301      	bcc.n	1000edfe <__aeabi_uidiv+0x46>
1000edfa:	03cb      	lsls	r3, r1, #15
1000edfc:	1ac0      	subs	r0, r0, r3
1000edfe:	4152      	adcs	r2, r2
1000ee00:	0b83      	lsrs	r3, r0, #14
1000ee02:	428b      	cmp	r3, r1
1000ee04:	d301      	bcc.n	1000ee0a <__aeabi_uidiv+0x52>
1000ee06:	038b      	lsls	r3, r1, #14
1000ee08:	1ac0      	subs	r0, r0, r3
1000ee0a:	4152      	adcs	r2, r2
1000ee0c:	0b43      	lsrs	r3, r0, #13
1000ee0e:	428b      	cmp	r3, r1
1000ee10:	d301      	bcc.n	1000ee16 <__aeabi_uidiv+0x5e>
1000ee12:	034b      	lsls	r3, r1, #13
1000ee14:	1ac0      	subs	r0, r0, r3
1000ee16:	4152      	adcs	r2, r2
1000ee18:	0b03      	lsrs	r3, r0, #12
1000ee1a:	428b      	cmp	r3, r1
1000ee1c:	d301      	bcc.n	1000ee22 <__aeabi_uidiv+0x6a>
1000ee1e:	030b      	lsls	r3, r1, #12
1000ee20:	1ac0      	subs	r0, r0, r3
1000ee22:	4152      	adcs	r2, r2
1000ee24:	0ac3      	lsrs	r3, r0, #11
1000ee26:	428b      	cmp	r3, r1
1000ee28:	d301      	bcc.n	1000ee2e <__aeabi_uidiv+0x76>
1000ee2a:	02cb      	lsls	r3, r1, #11
1000ee2c:	1ac0      	subs	r0, r0, r3
1000ee2e:	4152      	adcs	r2, r2
1000ee30:	0a83      	lsrs	r3, r0, #10
1000ee32:	428b      	cmp	r3, r1
1000ee34:	d301      	bcc.n	1000ee3a <__aeabi_uidiv+0x82>
1000ee36:	028b      	lsls	r3, r1, #10
1000ee38:	1ac0      	subs	r0, r0, r3
1000ee3a:	4152      	adcs	r2, r2
1000ee3c:	0a43      	lsrs	r3, r0, #9
1000ee3e:	428b      	cmp	r3, r1
1000ee40:	d301      	bcc.n	1000ee46 <__aeabi_uidiv+0x8e>
1000ee42:	024b      	lsls	r3, r1, #9
1000ee44:	1ac0      	subs	r0, r0, r3
1000ee46:	4152      	adcs	r2, r2
1000ee48:	0a03      	lsrs	r3, r0, #8
1000ee4a:	428b      	cmp	r3, r1
1000ee4c:	d301      	bcc.n	1000ee52 <__aeabi_uidiv+0x9a>
1000ee4e:	020b      	lsls	r3, r1, #8
1000ee50:	1ac0      	subs	r0, r0, r3
1000ee52:	4152      	adcs	r2, r2
1000ee54:	d2cd      	bcs.n	1000edf2 <__aeabi_uidiv+0x3a>
1000ee56:	09c3      	lsrs	r3, r0, #7
1000ee58:	428b      	cmp	r3, r1
1000ee5a:	d301      	bcc.n	1000ee60 <__aeabi_uidiv+0xa8>
1000ee5c:	01cb      	lsls	r3, r1, #7
1000ee5e:	1ac0      	subs	r0, r0, r3
1000ee60:	4152      	adcs	r2, r2
1000ee62:	0983      	lsrs	r3, r0, #6
1000ee64:	428b      	cmp	r3, r1
1000ee66:	d301      	bcc.n	1000ee6c <__aeabi_uidiv+0xb4>
1000ee68:	018b      	lsls	r3, r1, #6
1000ee6a:	1ac0      	subs	r0, r0, r3
1000ee6c:	4152      	adcs	r2, r2
1000ee6e:	0943      	lsrs	r3, r0, #5
1000ee70:	428b      	cmp	r3, r1
1000ee72:	d301      	bcc.n	1000ee78 <__aeabi_uidiv+0xc0>
1000ee74:	014b      	lsls	r3, r1, #5
1000ee76:	1ac0      	subs	r0, r0, r3
1000ee78:	4152      	adcs	r2, r2
1000ee7a:	0903      	lsrs	r3, r0, #4
1000ee7c:	428b      	cmp	r3, r1
1000ee7e:	d301      	bcc.n	1000ee84 <__aeabi_uidiv+0xcc>
1000ee80:	010b      	lsls	r3, r1, #4
1000ee82:	1ac0      	subs	r0, r0, r3
1000ee84:	4152      	adcs	r2, r2
1000ee86:	08c3      	lsrs	r3, r0, #3
1000ee88:	428b      	cmp	r3, r1
1000ee8a:	d301      	bcc.n	1000ee90 <__aeabi_uidiv+0xd8>
1000ee8c:	00cb      	lsls	r3, r1, #3
1000ee8e:	1ac0      	subs	r0, r0, r3
1000ee90:	4152      	adcs	r2, r2
1000ee92:	0883      	lsrs	r3, r0, #2
1000ee94:	428b      	cmp	r3, r1
1000ee96:	d301      	bcc.n	1000ee9c <__aeabi_uidiv+0xe4>
1000ee98:	008b      	lsls	r3, r1, #2
1000ee9a:	1ac0      	subs	r0, r0, r3
1000ee9c:	4152      	adcs	r2, r2
1000ee9e:	0843      	lsrs	r3, r0, #1
1000eea0:	428b      	cmp	r3, r1
1000eea2:	d301      	bcc.n	1000eea8 <__aeabi_uidiv+0xf0>
1000eea4:	004b      	lsls	r3, r1, #1
1000eea6:	1ac0      	subs	r0, r0, r3
1000eea8:	4152      	adcs	r2, r2
1000eeaa:	1a41      	subs	r1, r0, r1
1000eeac:	d200      	bcs.n	1000eeb0 <__aeabi_uidiv+0xf8>
1000eeae:	4601      	mov	r1, r0
1000eeb0:	4152      	adcs	r2, r2
1000eeb2:	4610      	mov	r0, r2
1000eeb4:	4770      	bx	lr
1000eeb6:	e7ff      	b.n	1000eeb8 <__aeabi_uidiv+0x100>
1000eeb8:	b501      	push	{r0, lr}
1000eeba:	2000      	movs	r0, #0
1000eebc:	f000 f806 	bl	1000eecc <__aeabi_idiv0>
1000eec0:	bd02      	pop	{r1, pc}
1000eec2:	46c0      	nop			; (mov r8, r8)

1000eec4 <__aeabi_uidivmod>:
1000eec4:	2900      	cmp	r1, #0
1000eec6:	d0f7      	beq.n	1000eeb8 <__aeabi_uidiv+0x100>
1000eec8:	e776      	b.n	1000edb8 <__aeabi_uidiv>
1000eeca:	4770      	bx	lr

1000eecc <__aeabi_idiv0>:
1000eecc:	4770      	bx	lr
1000eece:	46c0      	nop			; (mov r8, r8)

1000eed0 <__aeabi_f2uiz>:
1000eed0:	219e      	movs	r1, #158	; 0x9e
1000eed2:	b510      	push	{r4, lr}
1000eed4:	05c9      	lsls	r1, r1, #23
1000eed6:	1c04      	adds	r4, r0, #0
1000eed8:	f001 fa64 	bl	100103a4 <__aeabi_fcmpge>
1000eedc:	2800      	cmp	r0, #0
1000eede:	d103      	bne.n	1000eee8 <__aeabi_f2uiz+0x18>
1000eee0:	1c20      	adds	r0, r4, #0
1000eee2:	f000 fac5 	bl	1000f470 <__aeabi_f2iz>
1000eee6:	bd10      	pop	{r4, pc}
1000eee8:	219e      	movs	r1, #158	; 0x9e
1000eeea:	1c20      	adds	r0, r4, #0
1000eeec:	05c9      	lsls	r1, r1, #23
1000eeee:	f000 f939 	bl	1000f164 <__aeabi_fsub>
1000eef2:	f000 fabd 	bl	1000f470 <__aeabi_f2iz>
1000eef6:	2380      	movs	r3, #128	; 0x80
1000eef8:	061b      	lsls	r3, r3, #24
1000eefa:	469c      	mov	ip, r3
1000eefc:	4460      	add	r0, ip
1000eefe:	e7f2      	b.n	1000eee6 <__aeabi_f2uiz+0x16>

1000ef00 <__aeabi_d2uiz>:
1000ef00:	b570      	push	{r4, r5, r6, lr}
1000ef02:	2200      	movs	r2, #0
1000ef04:	4b0c      	ldr	r3, [pc, #48]	; (1000ef38 <__aeabi_d2uiz+0x38>)
1000ef06:	0004      	movs	r4, r0
1000ef08:	000d      	movs	r5, r1
1000ef0a:	f001 fa11 	bl	10010330 <__aeabi_dcmpge>
1000ef0e:	2800      	cmp	r0, #0
1000ef10:	d104      	bne.n	1000ef1c <__aeabi_d2uiz+0x1c>
1000ef12:	0020      	movs	r0, r4
1000ef14:	0029      	movs	r1, r5
1000ef16:	f001 f89b 	bl	10010050 <__aeabi_d2iz>
1000ef1a:	bd70      	pop	{r4, r5, r6, pc}
1000ef1c:	4b06      	ldr	r3, [pc, #24]	; (1000ef38 <__aeabi_d2uiz+0x38>)
1000ef1e:	2200      	movs	r2, #0
1000ef20:	0020      	movs	r0, r4
1000ef22:	0029      	movs	r1, r5
1000ef24:	f000 fd40 	bl	1000f9a8 <__aeabi_dsub>
1000ef28:	f001 f892 	bl	10010050 <__aeabi_d2iz>
1000ef2c:	2380      	movs	r3, #128	; 0x80
1000ef2e:	061b      	lsls	r3, r3, #24
1000ef30:	469c      	mov	ip, r3
1000ef32:	4460      	add	r0, ip
1000ef34:	e7f1      	b.n	1000ef1a <__aeabi_d2uiz+0x1a>
1000ef36:	46c0      	nop			; (mov r8, r8)
1000ef38:	41e00000 	.word	0x41e00000

1000ef3c <__aeabi_fmul>:
1000ef3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef3e:	4657      	mov	r7, sl
1000ef40:	464e      	mov	r6, r9
1000ef42:	4645      	mov	r5, r8
1000ef44:	0043      	lsls	r3, r0, #1
1000ef46:	b4e0      	push	{r5, r6, r7}
1000ef48:	0246      	lsls	r6, r0, #9
1000ef4a:	4688      	mov	r8, r1
1000ef4c:	0a76      	lsrs	r6, r6, #9
1000ef4e:	0e1f      	lsrs	r7, r3, #24
1000ef50:	0fc4      	lsrs	r4, r0, #31
1000ef52:	2f00      	cmp	r7, #0
1000ef54:	d047      	beq.n	1000efe6 <__aeabi_fmul+0xaa>
1000ef56:	2fff      	cmp	r7, #255	; 0xff
1000ef58:	d025      	beq.n	1000efa6 <__aeabi_fmul+0x6a>
1000ef5a:	2300      	movs	r3, #0
1000ef5c:	2580      	movs	r5, #128	; 0x80
1000ef5e:	469a      	mov	sl, r3
1000ef60:	4699      	mov	r9, r3
1000ef62:	00f6      	lsls	r6, r6, #3
1000ef64:	04ed      	lsls	r5, r5, #19
1000ef66:	432e      	orrs	r6, r5
1000ef68:	3f7f      	subs	r7, #127	; 0x7f
1000ef6a:	4643      	mov	r3, r8
1000ef6c:	4642      	mov	r2, r8
1000ef6e:	025d      	lsls	r5, r3, #9
1000ef70:	0fd2      	lsrs	r2, r2, #31
1000ef72:	005b      	lsls	r3, r3, #1
1000ef74:	0a6d      	lsrs	r5, r5, #9
1000ef76:	0e1b      	lsrs	r3, r3, #24
1000ef78:	4690      	mov	r8, r2
1000ef7a:	d040      	beq.n	1000effe <__aeabi_fmul+0xc2>
1000ef7c:	2bff      	cmp	r3, #255	; 0xff
1000ef7e:	d039      	beq.n	1000eff4 <__aeabi_fmul+0xb8>
1000ef80:	2280      	movs	r2, #128	; 0x80
1000ef82:	2000      	movs	r0, #0
1000ef84:	00ed      	lsls	r5, r5, #3
1000ef86:	04d2      	lsls	r2, r2, #19
1000ef88:	4315      	orrs	r5, r2
1000ef8a:	3b7f      	subs	r3, #127	; 0x7f
1000ef8c:	18fb      	adds	r3, r7, r3
1000ef8e:	4642      	mov	r2, r8
1000ef90:	4657      	mov	r7, sl
1000ef92:	1c59      	adds	r1, r3, #1
1000ef94:	4062      	eors	r2, r4
1000ef96:	468c      	mov	ip, r1
1000ef98:	4307      	orrs	r7, r0
1000ef9a:	2f0f      	cmp	r7, #15
1000ef9c:	d85c      	bhi.n	1000f058 <__aeabi_fmul+0x11c>
1000ef9e:	496f      	ldr	r1, [pc, #444]	; (1000f15c <__aeabi_fmul+0x220>)
1000efa0:	00bf      	lsls	r7, r7, #2
1000efa2:	59c9      	ldr	r1, [r1, r7]
1000efa4:	468f      	mov	pc, r1
1000efa6:	2e00      	cmp	r6, #0
1000efa8:	d145      	bne.n	1000f036 <__aeabi_fmul+0xfa>
1000efaa:	2308      	movs	r3, #8
1000efac:	469a      	mov	sl, r3
1000efae:	3b06      	subs	r3, #6
1000efb0:	4699      	mov	r9, r3
1000efb2:	e7da      	b.n	1000ef6a <__aeabi_fmul+0x2e>
1000efb4:	4642      	mov	r2, r8
1000efb6:	2802      	cmp	r0, #2
1000efb8:	d02d      	beq.n	1000f016 <__aeabi_fmul+0xda>
1000efba:	2803      	cmp	r0, #3
1000efbc:	d100      	bne.n	1000efc0 <__aeabi_fmul+0x84>
1000efbe:	e0c3      	b.n	1000f148 <__aeabi_fmul+0x20c>
1000efc0:	2801      	cmp	r0, #1
1000efc2:	d000      	beq.n	1000efc6 <__aeabi_fmul+0x8a>
1000efc4:	e0a2      	b.n	1000f10c <__aeabi_fmul+0x1d0>
1000efc6:	2500      	movs	r5, #0
1000efc8:	2600      	movs	r6, #0
1000efca:	4002      	ands	r2, r0
1000efcc:	b2d4      	uxtb	r4, r2
1000efce:	0276      	lsls	r6, r6, #9
1000efd0:	05ed      	lsls	r5, r5, #23
1000efd2:	0a76      	lsrs	r6, r6, #9
1000efd4:	432e      	orrs	r6, r5
1000efd6:	07e4      	lsls	r4, r4, #31
1000efd8:	4326      	orrs	r6, r4
1000efda:	0030      	movs	r0, r6
1000efdc:	bc1c      	pop	{r2, r3, r4}
1000efde:	4690      	mov	r8, r2
1000efe0:	4699      	mov	r9, r3
1000efe2:	46a2      	mov	sl, r4
1000efe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000efe6:	2e00      	cmp	r6, #0
1000efe8:	d11a      	bne.n	1000f020 <__aeabi_fmul+0xe4>
1000efea:	2304      	movs	r3, #4
1000efec:	469a      	mov	sl, r3
1000efee:	3b03      	subs	r3, #3
1000eff0:	4699      	mov	r9, r3
1000eff2:	e7ba      	b.n	1000ef6a <__aeabi_fmul+0x2e>
1000eff4:	002a      	movs	r2, r5
1000eff6:	1e51      	subs	r1, r2, #1
1000eff8:	418a      	sbcs	r2, r1
1000effa:	1c90      	adds	r0, r2, #2
1000effc:	e7c6      	b.n	1000ef8c <__aeabi_fmul+0x50>
1000effe:	2001      	movs	r0, #1
1000f000:	2d00      	cmp	r5, #0
1000f002:	d0c3      	beq.n	1000ef8c <__aeabi_fmul+0x50>
1000f004:	0028      	movs	r0, r5
1000f006:	f001 f9d7 	bl	100103b8 <__clzsi2>
1000f00a:	1f43      	subs	r3, r0, #5
1000f00c:	3076      	adds	r0, #118	; 0x76
1000f00e:	409d      	lsls	r5, r3
1000f010:	4243      	negs	r3, r0
1000f012:	2000      	movs	r0, #0
1000f014:	e7ba      	b.n	1000ef8c <__aeabi_fmul+0x50>
1000f016:	2401      	movs	r4, #1
1000f018:	25ff      	movs	r5, #255	; 0xff
1000f01a:	4014      	ands	r4, r2
1000f01c:	2600      	movs	r6, #0
1000f01e:	e7d6      	b.n	1000efce <__aeabi_fmul+0x92>
1000f020:	0030      	movs	r0, r6
1000f022:	f001 f9c9 	bl	100103b8 <__clzsi2>
1000f026:	1f43      	subs	r3, r0, #5
1000f028:	409e      	lsls	r6, r3
1000f02a:	2300      	movs	r3, #0
1000f02c:	3076      	adds	r0, #118	; 0x76
1000f02e:	4247      	negs	r7, r0
1000f030:	469a      	mov	sl, r3
1000f032:	4699      	mov	r9, r3
1000f034:	e799      	b.n	1000ef6a <__aeabi_fmul+0x2e>
1000f036:	230c      	movs	r3, #12
1000f038:	469a      	mov	sl, r3
1000f03a:	3b09      	subs	r3, #9
1000f03c:	4699      	mov	r9, r3
1000f03e:	e794      	b.n	1000ef6a <__aeabi_fmul+0x2e>
1000f040:	2680      	movs	r6, #128	; 0x80
1000f042:	2400      	movs	r4, #0
1000f044:	03f6      	lsls	r6, r6, #15
1000f046:	25ff      	movs	r5, #255	; 0xff
1000f048:	e7c1      	b.n	1000efce <__aeabi_fmul+0x92>
1000f04a:	0035      	movs	r5, r6
1000f04c:	4648      	mov	r0, r9
1000f04e:	e7b2      	b.n	1000efb6 <__aeabi_fmul+0x7a>
1000f050:	0035      	movs	r5, r6
1000f052:	0022      	movs	r2, r4
1000f054:	4648      	mov	r0, r9
1000f056:	e7ae      	b.n	1000efb6 <__aeabi_fmul+0x7a>
1000f058:	0429      	lsls	r1, r5, #16
1000f05a:	0c09      	lsrs	r1, r1, #16
1000f05c:	0008      	movs	r0, r1
1000f05e:	0c37      	lsrs	r7, r6, #16
1000f060:	0436      	lsls	r6, r6, #16
1000f062:	0c36      	lsrs	r6, r6, #16
1000f064:	0c2c      	lsrs	r4, r5, #16
1000f066:	4379      	muls	r1, r7
1000f068:	4370      	muls	r0, r6
1000f06a:	4367      	muls	r7, r4
1000f06c:	4374      	muls	r4, r6
1000f06e:	0c06      	lsrs	r6, r0, #16
1000f070:	1864      	adds	r4, r4, r1
1000f072:	1936      	adds	r6, r6, r4
1000f074:	42b1      	cmp	r1, r6
1000f076:	d903      	bls.n	1000f080 <__aeabi_fmul+0x144>
1000f078:	2180      	movs	r1, #128	; 0x80
1000f07a:	0249      	lsls	r1, r1, #9
1000f07c:	4688      	mov	r8, r1
1000f07e:	4447      	add	r7, r8
1000f080:	0400      	lsls	r0, r0, #16
1000f082:	0c00      	lsrs	r0, r0, #16
1000f084:	0431      	lsls	r1, r6, #16
1000f086:	1809      	adds	r1, r1, r0
1000f088:	018d      	lsls	r5, r1, #6
1000f08a:	1e68      	subs	r0, r5, #1
1000f08c:	4185      	sbcs	r5, r0
1000f08e:	0e89      	lsrs	r1, r1, #26
1000f090:	4329      	orrs	r1, r5
1000f092:	0c35      	lsrs	r5, r6, #16
1000f094:	19ed      	adds	r5, r5, r7
1000f096:	01ad      	lsls	r5, r5, #6
1000f098:	430d      	orrs	r5, r1
1000f09a:	0129      	lsls	r1, r5, #4
1000f09c:	d504      	bpl.n	1000f0a8 <__aeabi_fmul+0x16c>
1000f09e:	2301      	movs	r3, #1
1000f0a0:	0869      	lsrs	r1, r5, #1
1000f0a2:	401d      	ands	r5, r3
1000f0a4:	4663      	mov	r3, ip
1000f0a6:	430d      	orrs	r5, r1
1000f0a8:	0019      	movs	r1, r3
1000f0aa:	317f      	adds	r1, #127	; 0x7f
1000f0ac:	2900      	cmp	r1, #0
1000f0ae:	dd25      	ble.n	1000f0fc <__aeabi_fmul+0x1c0>
1000f0b0:	0768      	lsls	r0, r5, #29
1000f0b2:	d004      	beq.n	1000f0be <__aeabi_fmul+0x182>
1000f0b4:	200f      	movs	r0, #15
1000f0b6:	4028      	ands	r0, r5
1000f0b8:	2804      	cmp	r0, #4
1000f0ba:	d000      	beq.n	1000f0be <__aeabi_fmul+0x182>
1000f0bc:	3504      	adds	r5, #4
1000f0be:	0128      	lsls	r0, r5, #4
1000f0c0:	d503      	bpl.n	1000f0ca <__aeabi_fmul+0x18e>
1000f0c2:	4927      	ldr	r1, [pc, #156]	; (1000f160 <__aeabi_fmul+0x224>)
1000f0c4:	3380      	adds	r3, #128	; 0x80
1000f0c6:	400d      	ands	r5, r1
1000f0c8:	0019      	movs	r1, r3
1000f0ca:	29fe      	cmp	r1, #254	; 0xfe
1000f0cc:	dca3      	bgt.n	1000f016 <__aeabi_fmul+0xda>
1000f0ce:	2401      	movs	r4, #1
1000f0d0:	01ad      	lsls	r5, r5, #6
1000f0d2:	0a6e      	lsrs	r6, r5, #9
1000f0d4:	4014      	ands	r4, r2
1000f0d6:	b2cd      	uxtb	r5, r1
1000f0d8:	e779      	b.n	1000efce <__aeabi_fmul+0x92>
1000f0da:	2080      	movs	r0, #128	; 0x80
1000f0dc:	03c0      	lsls	r0, r0, #15
1000f0de:	4206      	tst	r6, r0
1000f0e0:	d007      	beq.n	1000f0f2 <__aeabi_fmul+0x1b6>
1000f0e2:	4205      	tst	r5, r0
1000f0e4:	d105      	bne.n	1000f0f2 <__aeabi_fmul+0x1b6>
1000f0e6:	4328      	orrs	r0, r5
1000f0e8:	0246      	lsls	r6, r0, #9
1000f0ea:	0a76      	lsrs	r6, r6, #9
1000f0ec:	4644      	mov	r4, r8
1000f0ee:	25ff      	movs	r5, #255	; 0xff
1000f0f0:	e76d      	b.n	1000efce <__aeabi_fmul+0x92>
1000f0f2:	4306      	orrs	r6, r0
1000f0f4:	0276      	lsls	r6, r6, #9
1000f0f6:	0a76      	lsrs	r6, r6, #9
1000f0f8:	25ff      	movs	r5, #255	; 0xff
1000f0fa:	e768      	b.n	1000efce <__aeabi_fmul+0x92>
1000f0fc:	2401      	movs	r4, #1
1000f0fe:	1a61      	subs	r1, r4, r1
1000f100:	291b      	cmp	r1, #27
1000f102:	dd05      	ble.n	1000f110 <__aeabi_fmul+0x1d4>
1000f104:	4014      	ands	r4, r2
1000f106:	2500      	movs	r5, #0
1000f108:	2600      	movs	r6, #0
1000f10a:	e760      	b.n	1000efce <__aeabi_fmul+0x92>
1000f10c:	4663      	mov	r3, ip
1000f10e:	e7cb      	b.n	1000f0a8 <__aeabi_fmul+0x16c>
1000f110:	002e      	movs	r6, r5
1000f112:	2320      	movs	r3, #32
1000f114:	40ce      	lsrs	r6, r1
1000f116:	1a59      	subs	r1, r3, r1
1000f118:	408d      	lsls	r5, r1
1000f11a:	1e6b      	subs	r3, r5, #1
1000f11c:	419d      	sbcs	r5, r3
1000f11e:	432e      	orrs	r6, r5
1000f120:	0773      	lsls	r3, r6, #29
1000f122:	d004      	beq.n	1000f12e <__aeabi_fmul+0x1f2>
1000f124:	230f      	movs	r3, #15
1000f126:	4033      	ands	r3, r6
1000f128:	2b04      	cmp	r3, #4
1000f12a:	d000      	beq.n	1000f12e <__aeabi_fmul+0x1f2>
1000f12c:	3604      	adds	r6, #4
1000f12e:	0173      	lsls	r3, r6, #5
1000f130:	d504      	bpl.n	1000f13c <__aeabi_fmul+0x200>
1000f132:	2401      	movs	r4, #1
1000f134:	2501      	movs	r5, #1
1000f136:	4014      	ands	r4, r2
1000f138:	2600      	movs	r6, #0
1000f13a:	e748      	b.n	1000efce <__aeabi_fmul+0x92>
1000f13c:	2401      	movs	r4, #1
1000f13e:	01b6      	lsls	r6, r6, #6
1000f140:	0a76      	lsrs	r6, r6, #9
1000f142:	4014      	ands	r4, r2
1000f144:	2500      	movs	r5, #0
1000f146:	e742      	b.n	1000efce <__aeabi_fmul+0x92>
1000f148:	2680      	movs	r6, #128	; 0x80
1000f14a:	2401      	movs	r4, #1
1000f14c:	03f6      	lsls	r6, r6, #15
1000f14e:	432e      	orrs	r6, r5
1000f150:	0276      	lsls	r6, r6, #9
1000f152:	0a76      	lsrs	r6, r6, #9
1000f154:	4014      	ands	r4, r2
1000f156:	25ff      	movs	r5, #255	; 0xff
1000f158:	e739      	b.n	1000efce <__aeabi_fmul+0x92>
1000f15a:	46c0      	nop			; (mov r8, r8)
1000f15c:	10015064 	.word	0x10015064
1000f160:	f7ffffff 	.word	0xf7ffffff

1000f164 <__aeabi_fsub>:
1000f164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f166:	024a      	lsls	r2, r1, #9
1000f168:	004e      	lsls	r6, r1, #1
1000f16a:	0243      	lsls	r3, r0, #9
1000f16c:	0044      	lsls	r4, r0, #1
1000f16e:	0e24      	lsrs	r4, r4, #24
1000f170:	0fc5      	lsrs	r5, r0, #31
1000f172:	099b      	lsrs	r3, r3, #6
1000f174:	0e36      	lsrs	r6, r6, #24
1000f176:	0fc9      	lsrs	r1, r1, #31
1000f178:	0992      	lsrs	r2, r2, #6
1000f17a:	2eff      	cmp	r6, #255	; 0xff
1000f17c:	d100      	bne.n	1000f180 <__aeabi_fsub+0x1c>
1000f17e:	e083      	b.n	1000f288 <__aeabi_fsub+0x124>
1000f180:	2001      	movs	r0, #1
1000f182:	4041      	eors	r1, r0
1000f184:	1ba0      	subs	r0, r4, r6
1000f186:	42a9      	cmp	r1, r5
1000f188:	d05c      	beq.n	1000f244 <__aeabi_fsub+0xe0>
1000f18a:	2800      	cmp	r0, #0
1000f18c:	dc00      	bgt.n	1000f190 <__aeabi_fsub+0x2c>
1000f18e:	e095      	b.n	1000f2bc <__aeabi_fsub+0x158>
1000f190:	2e00      	cmp	r6, #0
1000f192:	d11c      	bne.n	1000f1ce <__aeabi_fsub+0x6a>
1000f194:	2a00      	cmp	r2, #0
1000f196:	d000      	beq.n	1000f19a <__aeabi_fsub+0x36>
1000f198:	e081      	b.n	1000f29e <__aeabi_fsub+0x13a>
1000f19a:	075a      	lsls	r2, r3, #29
1000f19c:	d004      	beq.n	1000f1a8 <__aeabi_fsub+0x44>
1000f19e:	220f      	movs	r2, #15
1000f1a0:	401a      	ands	r2, r3
1000f1a2:	2a04      	cmp	r2, #4
1000f1a4:	d000      	beq.n	1000f1a8 <__aeabi_fsub+0x44>
1000f1a6:	3304      	adds	r3, #4
1000f1a8:	015a      	lsls	r2, r3, #5
1000f1aa:	d53b      	bpl.n	1000f224 <__aeabi_fsub+0xc0>
1000f1ac:	3401      	adds	r4, #1
1000f1ae:	2cff      	cmp	r4, #255	; 0xff
1000f1b0:	d100      	bne.n	1000f1b4 <__aeabi_fsub+0x50>
1000f1b2:	e091      	b.n	1000f2d8 <__aeabi_fsub+0x174>
1000f1b4:	2001      	movs	r0, #1
1000f1b6:	019b      	lsls	r3, r3, #6
1000f1b8:	0a5b      	lsrs	r3, r3, #9
1000f1ba:	b2e4      	uxtb	r4, r4
1000f1bc:	4005      	ands	r5, r0
1000f1be:	025b      	lsls	r3, r3, #9
1000f1c0:	05e4      	lsls	r4, r4, #23
1000f1c2:	0a5b      	lsrs	r3, r3, #9
1000f1c4:	07ed      	lsls	r5, r5, #31
1000f1c6:	4323      	orrs	r3, r4
1000f1c8:	432b      	orrs	r3, r5
1000f1ca:	0018      	movs	r0, r3
1000f1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f1ce:	2cff      	cmp	r4, #255	; 0xff
1000f1d0:	d0e3      	beq.n	1000f19a <__aeabi_fsub+0x36>
1000f1d2:	2180      	movs	r1, #128	; 0x80
1000f1d4:	04c9      	lsls	r1, r1, #19
1000f1d6:	430a      	orrs	r2, r1
1000f1d8:	281b      	cmp	r0, #27
1000f1da:	dd00      	ble.n	1000f1de <__aeabi_fsub+0x7a>
1000f1dc:	e090      	b.n	1000f300 <__aeabi_fsub+0x19c>
1000f1de:	0016      	movs	r6, r2
1000f1e0:	2120      	movs	r1, #32
1000f1e2:	40c6      	lsrs	r6, r0
1000f1e4:	1a08      	subs	r0, r1, r0
1000f1e6:	4082      	lsls	r2, r0
1000f1e8:	1e51      	subs	r1, r2, #1
1000f1ea:	418a      	sbcs	r2, r1
1000f1ec:	4332      	orrs	r2, r6
1000f1ee:	1a9b      	subs	r3, r3, r2
1000f1f0:	015a      	lsls	r2, r3, #5
1000f1f2:	d515      	bpl.n	1000f220 <__aeabi_fsub+0xbc>
1000f1f4:	019b      	lsls	r3, r3, #6
1000f1f6:	099e      	lsrs	r6, r3, #6
1000f1f8:	0030      	movs	r0, r6
1000f1fa:	f001 f8dd 	bl	100103b8 <__clzsi2>
1000f1fe:	3805      	subs	r0, #5
1000f200:	4086      	lsls	r6, r0
1000f202:	4284      	cmp	r4, r0
1000f204:	dc6c      	bgt.n	1000f2e0 <__aeabi_fsub+0x17c>
1000f206:	1b04      	subs	r4, r0, r4
1000f208:	0033      	movs	r3, r6
1000f20a:	2020      	movs	r0, #32
1000f20c:	3401      	adds	r4, #1
1000f20e:	40e3      	lsrs	r3, r4
1000f210:	1b04      	subs	r4, r0, r4
1000f212:	40a6      	lsls	r6, r4
1000f214:	1e72      	subs	r2, r6, #1
1000f216:	4196      	sbcs	r6, r2
1000f218:	2400      	movs	r4, #0
1000f21a:	4333      	orrs	r3, r6
1000f21c:	e7bd      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f21e:	000d      	movs	r5, r1
1000f220:	075a      	lsls	r2, r3, #29
1000f222:	d1bc      	bne.n	1000f19e <__aeabi_fsub+0x3a>
1000f224:	08df      	lsrs	r7, r3, #3
1000f226:	2301      	movs	r3, #1
1000f228:	401d      	ands	r5, r3
1000f22a:	2cff      	cmp	r4, #255	; 0xff
1000f22c:	d133      	bne.n	1000f296 <__aeabi_fsub+0x132>
1000f22e:	2f00      	cmp	r7, #0
1000f230:	d100      	bne.n	1000f234 <__aeabi_fsub+0xd0>
1000f232:	e090      	b.n	1000f356 <__aeabi_fsub+0x1f2>
1000f234:	2280      	movs	r2, #128	; 0x80
1000f236:	03d2      	lsls	r2, r2, #15
1000f238:	0013      	movs	r3, r2
1000f23a:	433b      	orrs	r3, r7
1000f23c:	025b      	lsls	r3, r3, #9
1000f23e:	0a5b      	lsrs	r3, r3, #9
1000f240:	24ff      	movs	r4, #255	; 0xff
1000f242:	e7bc      	b.n	1000f1be <__aeabi_fsub+0x5a>
1000f244:	2800      	cmp	r0, #0
1000f246:	dd4f      	ble.n	1000f2e8 <__aeabi_fsub+0x184>
1000f248:	2e00      	cmp	r6, #0
1000f24a:	d02e      	beq.n	1000f2aa <__aeabi_fsub+0x146>
1000f24c:	2cff      	cmp	r4, #255	; 0xff
1000f24e:	d0a4      	beq.n	1000f19a <__aeabi_fsub+0x36>
1000f250:	2580      	movs	r5, #128	; 0x80
1000f252:	04ed      	lsls	r5, r5, #19
1000f254:	432a      	orrs	r2, r5
1000f256:	281b      	cmp	r0, #27
1000f258:	dd00      	ble.n	1000f25c <__aeabi_fsub+0xf8>
1000f25a:	e097      	b.n	1000f38c <__aeabi_fsub+0x228>
1000f25c:	0016      	movs	r6, r2
1000f25e:	2520      	movs	r5, #32
1000f260:	40c6      	lsrs	r6, r0
1000f262:	1a28      	subs	r0, r5, r0
1000f264:	4082      	lsls	r2, r0
1000f266:	1e50      	subs	r0, r2, #1
1000f268:	4182      	sbcs	r2, r0
1000f26a:	4332      	orrs	r2, r6
1000f26c:	189b      	adds	r3, r3, r2
1000f26e:	015a      	lsls	r2, r3, #5
1000f270:	d5d5      	bpl.n	1000f21e <__aeabi_fsub+0xba>
1000f272:	3401      	adds	r4, #1
1000f274:	2cff      	cmp	r4, #255	; 0xff
1000f276:	d06d      	beq.n	1000f354 <__aeabi_fsub+0x1f0>
1000f278:	2201      	movs	r2, #1
1000f27a:	487b      	ldr	r0, [pc, #492]	; (1000f468 <__aeabi_fsub+0x304>)
1000f27c:	401a      	ands	r2, r3
1000f27e:	085b      	lsrs	r3, r3, #1
1000f280:	4003      	ands	r3, r0
1000f282:	4313      	orrs	r3, r2
1000f284:	000d      	movs	r5, r1
1000f286:	e788      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f288:	2a00      	cmp	r2, #0
1000f28a:	d000      	beq.n	1000f28e <__aeabi_fsub+0x12a>
1000f28c:	e77a      	b.n	1000f184 <__aeabi_fsub+0x20>
1000f28e:	e777      	b.n	1000f180 <__aeabi_fsub+0x1c>
1000f290:	1e03      	subs	r3, r0, #0
1000f292:	d1c5      	bne.n	1000f220 <__aeabi_fsub+0xbc>
1000f294:	2500      	movs	r5, #0
1000f296:	027b      	lsls	r3, r7, #9
1000f298:	0a5b      	lsrs	r3, r3, #9
1000f29a:	b2e4      	uxtb	r4, r4
1000f29c:	e78f      	b.n	1000f1be <__aeabi_fsub+0x5a>
1000f29e:	3801      	subs	r0, #1
1000f2a0:	2800      	cmp	r0, #0
1000f2a2:	d0a4      	beq.n	1000f1ee <__aeabi_fsub+0x8a>
1000f2a4:	2cff      	cmp	r4, #255	; 0xff
1000f2a6:	d197      	bne.n	1000f1d8 <__aeabi_fsub+0x74>
1000f2a8:	e777      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f2aa:	2a00      	cmp	r2, #0
1000f2ac:	d100      	bne.n	1000f2b0 <__aeabi_fsub+0x14c>
1000f2ae:	e774      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f2b0:	3801      	subs	r0, #1
1000f2b2:	2800      	cmp	r0, #0
1000f2b4:	d0da      	beq.n	1000f26c <__aeabi_fsub+0x108>
1000f2b6:	2cff      	cmp	r4, #255	; 0xff
1000f2b8:	d1cd      	bne.n	1000f256 <__aeabi_fsub+0xf2>
1000f2ba:	e76e      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f2bc:	2800      	cmp	r0, #0
1000f2be:	d121      	bne.n	1000f304 <__aeabi_fsub+0x1a0>
1000f2c0:	1c60      	adds	r0, r4, #1
1000f2c2:	b2c0      	uxtb	r0, r0
1000f2c4:	2801      	cmp	r0, #1
1000f2c6:	dd58      	ble.n	1000f37a <__aeabi_fsub+0x216>
1000f2c8:	2780      	movs	r7, #128	; 0x80
1000f2ca:	1a9e      	subs	r6, r3, r2
1000f2cc:	04ff      	lsls	r7, r7, #19
1000f2ce:	4037      	ands	r7, r6
1000f2d0:	d02f      	beq.n	1000f332 <__aeabi_fsub+0x1ce>
1000f2d2:	1ad6      	subs	r6, r2, r3
1000f2d4:	000d      	movs	r5, r1
1000f2d6:	e78f      	b.n	1000f1f8 <__aeabi_fsub+0x94>
1000f2d8:	2301      	movs	r3, #1
1000f2da:	401d      	ands	r5, r3
1000f2dc:	2300      	movs	r3, #0
1000f2de:	e76e      	b.n	1000f1be <__aeabi_fsub+0x5a>
1000f2e0:	4b62      	ldr	r3, [pc, #392]	; (1000f46c <__aeabi_fsub+0x308>)
1000f2e2:	1a24      	subs	r4, r4, r0
1000f2e4:	4033      	ands	r3, r6
1000f2e6:	e758      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f2e8:	2800      	cmp	r0, #0
1000f2ea:	d151      	bne.n	1000f390 <__aeabi_fsub+0x22c>
1000f2ec:	1c60      	adds	r0, r4, #1
1000f2ee:	b2c6      	uxtb	r6, r0
1000f2f0:	2e01      	cmp	r6, #1
1000f2f2:	dd33      	ble.n	1000f35c <__aeabi_fsub+0x1f8>
1000f2f4:	28ff      	cmp	r0, #255	; 0xff
1000f2f6:	d02d      	beq.n	1000f354 <__aeabi_fsub+0x1f0>
1000f2f8:	189b      	adds	r3, r3, r2
1000f2fa:	085b      	lsrs	r3, r3, #1
1000f2fc:	0004      	movs	r4, r0
1000f2fe:	e74c      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f300:	2201      	movs	r2, #1
1000f302:	e774      	b.n	1000f1ee <__aeabi_fsub+0x8a>
1000f304:	2c00      	cmp	r4, #0
1000f306:	d01a      	beq.n	1000f33e <__aeabi_fsub+0x1da>
1000f308:	2eff      	cmp	r6, #255	; 0xff
1000f30a:	d01f      	beq.n	1000f34c <__aeabi_fsub+0x1e8>
1000f30c:	2480      	movs	r4, #128	; 0x80
1000f30e:	04e4      	lsls	r4, r4, #19
1000f310:	4240      	negs	r0, r0
1000f312:	4323      	orrs	r3, r4
1000f314:	281b      	cmp	r0, #27
1000f316:	dd00      	ble.n	1000f31a <__aeabi_fsub+0x1b6>
1000f318:	e096      	b.n	1000f448 <__aeabi_fsub+0x2e4>
1000f31a:	001d      	movs	r5, r3
1000f31c:	2420      	movs	r4, #32
1000f31e:	40c5      	lsrs	r5, r0
1000f320:	1a20      	subs	r0, r4, r0
1000f322:	4083      	lsls	r3, r0
1000f324:	1e58      	subs	r0, r3, #1
1000f326:	4183      	sbcs	r3, r0
1000f328:	432b      	orrs	r3, r5
1000f32a:	1ad3      	subs	r3, r2, r3
1000f32c:	0034      	movs	r4, r6
1000f32e:	000d      	movs	r5, r1
1000f330:	e75e      	b.n	1000f1f0 <__aeabi_fsub+0x8c>
1000f332:	2e00      	cmp	r6, #0
1000f334:	d000      	beq.n	1000f338 <__aeabi_fsub+0x1d4>
1000f336:	e75f      	b.n	1000f1f8 <__aeabi_fsub+0x94>
1000f338:	2500      	movs	r5, #0
1000f33a:	2400      	movs	r4, #0
1000f33c:	e7ab      	b.n	1000f296 <__aeabi_fsub+0x132>
1000f33e:	2b00      	cmp	r3, #0
1000f340:	d044      	beq.n	1000f3cc <__aeabi_fsub+0x268>
1000f342:	43c0      	mvns	r0, r0
1000f344:	2800      	cmp	r0, #0
1000f346:	d0f0      	beq.n	1000f32a <__aeabi_fsub+0x1c6>
1000f348:	2eff      	cmp	r6, #255	; 0xff
1000f34a:	d1e3      	bne.n	1000f314 <__aeabi_fsub+0x1b0>
1000f34c:	0013      	movs	r3, r2
1000f34e:	24ff      	movs	r4, #255	; 0xff
1000f350:	000d      	movs	r5, r1
1000f352:	e722      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f354:	000d      	movs	r5, r1
1000f356:	24ff      	movs	r4, #255	; 0xff
1000f358:	2300      	movs	r3, #0
1000f35a:	e730      	b.n	1000f1be <__aeabi_fsub+0x5a>
1000f35c:	2c00      	cmp	r4, #0
1000f35e:	d15d      	bne.n	1000f41c <__aeabi_fsub+0x2b8>
1000f360:	2b00      	cmp	r3, #0
1000f362:	d07d      	beq.n	1000f460 <__aeabi_fsub+0x2fc>
1000f364:	2a00      	cmp	r2, #0
1000f366:	d100      	bne.n	1000f36a <__aeabi_fsub+0x206>
1000f368:	e717      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f36a:	189b      	adds	r3, r3, r2
1000f36c:	015a      	lsls	r2, r3, #5
1000f36e:	d400      	bmi.n	1000f372 <__aeabi_fsub+0x20e>
1000f370:	e756      	b.n	1000f220 <__aeabi_fsub+0xbc>
1000f372:	4a3e      	ldr	r2, [pc, #248]	; (1000f46c <__aeabi_fsub+0x308>)
1000f374:	0004      	movs	r4, r0
1000f376:	4013      	ands	r3, r2
1000f378:	e70f      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f37a:	2c00      	cmp	r4, #0
1000f37c:	d11e      	bne.n	1000f3bc <__aeabi_fsub+0x258>
1000f37e:	2b00      	cmp	r3, #0
1000f380:	d12f      	bne.n	1000f3e2 <__aeabi_fsub+0x27e>
1000f382:	2a00      	cmp	r2, #0
1000f384:	d065      	beq.n	1000f452 <__aeabi_fsub+0x2ee>
1000f386:	0013      	movs	r3, r2
1000f388:	000d      	movs	r5, r1
1000f38a:	e706      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f38c:	2201      	movs	r2, #1
1000f38e:	e76d      	b.n	1000f26c <__aeabi_fsub+0x108>
1000f390:	2c00      	cmp	r4, #0
1000f392:	d11f      	bne.n	1000f3d4 <__aeabi_fsub+0x270>
1000f394:	2b00      	cmp	r3, #0
1000f396:	d059      	beq.n	1000f44c <__aeabi_fsub+0x2e8>
1000f398:	43c0      	mvns	r0, r0
1000f39a:	2800      	cmp	r0, #0
1000f39c:	d00b      	beq.n	1000f3b6 <__aeabi_fsub+0x252>
1000f39e:	2eff      	cmp	r6, #255	; 0xff
1000f3a0:	d04f      	beq.n	1000f442 <__aeabi_fsub+0x2de>
1000f3a2:	281b      	cmp	r0, #27
1000f3a4:	dc5e      	bgt.n	1000f464 <__aeabi_fsub+0x300>
1000f3a6:	001d      	movs	r5, r3
1000f3a8:	2420      	movs	r4, #32
1000f3aa:	40c5      	lsrs	r5, r0
1000f3ac:	1a20      	subs	r0, r4, r0
1000f3ae:	4083      	lsls	r3, r0
1000f3b0:	1e58      	subs	r0, r3, #1
1000f3b2:	4183      	sbcs	r3, r0
1000f3b4:	432b      	orrs	r3, r5
1000f3b6:	189b      	adds	r3, r3, r2
1000f3b8:	0034      	movs	r4, r6
1000f3ba:	e758      	b.n	1000f26e <__aeabi_fsub+0x10a>
1000f3bc:	2b00      	cmp	r3, #0
1000f3be:	d11c      	bne.n	1000f3fa <__aeabi_fsub+0x296>
1000f3c0:	2a00      	cmp	r2, #0
1000f3c2:	d049      	beq.n	1000f458 <__aeabi_fsub+0x2f4>
1000f3c4:	0013      	movs	r3, r2
1000f3c6:	000d      	movs	r5, r1
1000f3c8:	24ff      	movs	r4, #255	; 0xff
1000f3ca:	e6e6      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f3cc:	0013      	movs	r3, r2
1000f3ce:	0034      	movs	r4, r6
1000f3d0:	000d      	movs	r5, r1
1000f3d2:	e6e2      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f3d4:	2eff      	cmp	r6, #255	; 0xff
1000f3d6:	d034      	beq.n	1000f442 <__aeabi_fsub+0x2de>
1000f3d8:	2480      	movs	r4, #128	; 0x80
1000f3da:	04e4      	lsls	r4, r4, #19
1000f3dc:	4240      	negs	r0, r0
1000f3de:	4323      	orrs	r3, r4
1000f3e0:	e7df      	b.n	1000f3a2 <__aeabi_fsub+0x23e>
1000f3e2:	2a00      	cmp	r2, #0
1000f3e4:	d100      	bne.n	1000f3e8 <__aeabi_fsub+0x284>
1000f3e6:	e6d8      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f3e8:	2780      	movs	r7, #128	; 0x80
1000f3ea:	1a98      	subs	r0, r3, r2
1000f3ec:	04ff      	lsls	r7, r7, #19
1000f3ee:	4007      	ands	r7, r0
1000f3f0:	d100      	bne.n	1000f3f4 <__aeabi_fsub+0x290>
1000f3f2:	e74d      	b.n	1000f290 <__aeabi_fsub+0x12c>
1000f3f4:	1ad3      	subs	r3, r2, r3
1000f3f6:	000d      	movs	r5, r1
1000f3f8:	e6cf      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f3fa:	24ff      	movs	r4, #255	; 0xff
1000f3fc:	2a00      	cmp	r2, #0
1000f3fe:	d100      	bne.n	1000f402 <__aeabi_fsub+0x29e>
1000f400:	e6cb      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f402:	2080      	movs	r0, #128	; 0x80
1000f404:	08db      	lsrs	r3, r3, #3
1000f406:	03c0      	lsls	r0, r0, #15
1000f408:	4203      	tst	r3, r0
1000f40a:	d004      	beq.n	1000f416 <__aeabi_fsub+0x2b2>
1000f40c:	08d2      	lsrs	r2, r2, #3
1000f40e:	4202      	tst	r2, r0
1000f410:	d101      	bne.n	1000f416 <__aeabi_fsub+0x2b2>
1000f412:	0013      	movs	r3, r2
1000f414:	000d      	movs	r5, r1
1000f416:	00db      	lsls	r3, r3, #3
1000f418:	24ff      	movs	r4, #255	; 0xff
1000f41a:	e6be      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f41c:	2b00      	cmp	r3, #0
1000f41e:	d010      	beq.n	1000f442 <__aeabi_fsub+0x2de>
1000f420:	24ff      	movs	r4, #255	; 0xff
1000f422:	2a00      	cmp	r2, #0
1000f424:	d100      	bne.n	1000f428 <__aeabi_fsub+0x2c4>
1000f426:	e6b8      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f428:	2080      	movs	r0, #128	; 0x80
1000f42a:	08db      	lsrs	r3, r3, #3
1000f42c:	03c0      	lsls	r0, r0, #15
1000f42e:	4203      	tst	r3, r0
1000f430:	d003      	beq.n	1000f43a <__aeabi_fsub+0x2d6>
1000f432:	08d2      	lsrs	r2, r2, #3
1000f434:	4202      	tst	r2, r0
1000f436:	d100      	bne.n	1000f43a <__aeabi_fsub+0x2d6>
1000f438:	0013      	movs	r3, r2
1000f43a:	00db      	lsls	r3, r3, #3
1000f43c:	000d      	movs	r5, r1
1000f43e:	24ff      	movs	r4, #255	; 0xff
1000f440:	e6ab      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f442:	0013      	movs	r3, r2
1000f444:	24ff      	movs	r4, #255	; 0xff
1000f446:	e6a8      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f448:	2301      	movs	r3, #1
1000f44a:	e76e      	b.n	1000f32a <__aeabi_fsub+0x1c6>
1000f44c:	0013      	movs	r3, r2
1000f44e:	0034      	movs	r4, r6
1000f450:	e6a3      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f452:	2700      	movs	r7, #0
1000f454:	2500      	movs	r5, #0
1000f456:	e71e      	b.n	1000f296 <__aeabi_fsub+0x132>
1000f458:	2780      	movs	r7, #128	; 0x80
1000f45a:	2500      	movs	r5, #0
1000f45c:	03ff      	lsls	r7, r7, #15
1000f45e:	e6e9      	b.n	1000f234 <__aeabi_fsub+0xd0>
1000f460:	0013      	movs	r3, r2
1000f462:	e69a      	b.n	1000f19a <__aeabi_fsub+0x36>
1000f464:	2301      	movs	r3, #1
1000f466:	e7a6      	b.n	1000f3b6 <__aeabi_fsub+0x252>
1000f468:	7dffffff 	.word	0x7dffffff
1000f46c:	fbffffff 	.word	0xfbffffff

1000f470 <__aeabi_f2iz>:
1000f470:	0243      	lsls	r3, r0, #9
1000f472:	0a59      	lsrs	r1, r3, #9
1000f474:	0043      	lsls	r3, r0, #1
1000f476:	0fc2      	lsrs	r2, r0, #31
1000f478:	0e1b      	lsrs	r3, r3, #24
1000f47a:	2000      	movs	r0, #0
1000f47c:	2b7e      	cmp	r3, #126	; 0x7e
1000f47e:	dd0e      	ble.n	1000f49e <__aeabi_f2iz+0x2e>
1000f480:	2b9d      	cmp	r3, #157	; 0x9d
1000f482:	dc0d      	bgt.n	1000f4a0 <__aeabi_f2iz+0x30>
1000f484:	2080      	movs	r0, #128	; 0x80
1000f486:	0400      	lsls	r0, r0, #16
1000f488:	4301      	orrs	r1, r0
1000f48a:	2b95      	cmp	r3, #149	; 0x95
1000f48c:	dc0b      	bgt.n	1000f4a6 <__aeabi_f2iz+0x36>
1000f48e:	2096      	movs	r0, #150	; 0x96
1000f490:	1ac3      	subs	r3, r0, r3
1000f492:	40d9      	lsrs	r1, r3
1000f494:	000b      	movs	r3, r1
1000f496:	4258      	negs	r0, r3
1000f498:	2a00      	cmp	r2, #0
1000f49a:	d100      	bne.n	1000f49e <__aeabi_f2iz+0x2e>
1000f49c:	0018      	movs	r0, r3
1000f49e:	4770      	bx	lr
1000f4a0:	4b03      	ldr	r3, [pc, #12]	; (1000f4b0 <__aeabi_f2iz+0x40>)
1000f4a2:	18d0      	adds	r0, r2, r3
1000f4a4:	e7fb      	b.n	1000f49e <__aeabi_f2iz+0x2e>
1000f4a6:	3b96      	subs	r3, #150	; 0x96
1000f4a8:	4099      	lsls	r1, r3
1000f4aa:	000b      	movs	r3, r1
1000f4ac:	e7f3      	b.n	1000f496 <__aeabi_f2iz+0x26>
1000f4ae:	46c0      	nop			; (mov r8, r8)
1000f4b0:	7fffffff 	.word	0x7fffffff

1000f4b4 <__aeabi_dmul>:
1000f4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4b6:	465f      	mov	r7, fp
1000f4b8:	4656      	mov	r6, sl
1000f4ba:	464d      	mov	r5, r9
1000f4bc:	4644      	mov	r4, r8
1000f4be:	b4f0      	push	{r4, r5, r6, r7}
1000f4c0:	030d      	lsls	r5, r1, #12
1000f4c2:	4699      	mov	r9, r3
1000f4c4:	004e      	lsls	r6, r1, #1
1000f4c6:	0b2b      	lsrs	r3, r5, #12
1000f4c8:	b087      	sub	sp, #28
1000f4ca:	0007      	movs	r7, r0
1000f4cc:	4692      	mov	sl, r2
1000f4ce:	4680      	mov	r8, r0
1000f4d0:	469b      	mov	fp, r3
1000f4d2:	0d76      	lsrs	r6, r6, #21
1000f4d4:	0fcc      	lsrs	r4, r1, #31
1000f4d6:	2e00      	cmp	r6, #0
1000f4d8:	d069      	beq.n	1000f5ae <__aeabi_dmul+0xfa>
1000f4da:	4b6d      	ldr	r3, [pc, #436]	; (1000f690 <__aeabi_dmul+0x1dc>)
1000f4dc:	429e      	cmp	r6, r3
1000f4de:	d035      	beq.n	1000f54c <__aeabi_dmul+0x98>
1000f4e0:	465b      	mov	r3, fp
1000f4e2:	2280      	movs	r2, #128	; 0x80
1000f4e4:	00dd      	lsls	r5, r3, #3
1000f4e6:	0412      	lsls	r2, r2, #16
1000f4e8:	0f43      	lsrs	r3, r0, #29
1000f4ea:	4313      	orrs	r3, r2
1000f4ec:	432b      	orrs	r3, r5
1000f4ee:	469b      	mov	fp, r3
1000f4f0:	00c3      	lsls	r3, r0, #3
1000f4f2:	4698      	mov	r8, r3
1000f4f4:	4b67      	ldr	r3, [pc, #412]	; (1000f694 <__aeabi_dmul+0x1e0>)
1000f4f6:	2700      	movs	r7, #0
1000f4f8:	469c      	mov	ip, r3
1000f4fa:	2300      	movs	r3, #0
1000f4fc:	4466      	add	r6, ip
1000f4fe:	9301      	str	r3, [sp, #4]
1000f500:	464a      	mov	r2, r9
1000f502:	0315      	lsls	r5, r2, #12
1000f504:	0050      	lsls	r0, r2, #1
1000f506:	0fd2      	lsrs	r2, r2, #31
1000f508:	4653      	mov	r3, sl
1000f50a:	0b2d      	lsrs	r5, r5, #12
1000f50c:	0d40      	lsrs	r0, r0, #21
1000f50e:	4691      	mov	r9, r2
1000f510:	d100      	bne.n	1000f514 <__aeabi_dmul+0x60>
1000f512:	e076      	b.n	1000f602 <__aeabi_dmul+0x14e>
1000f514:	4a5e      	ldr	r2, [pc, #376]	; (1000f690 <__aeabi_dmul+0x1dc>)
1000f516:	4290      	cmp	r0, r2
1000f518:	d06c      	beq.n	1000f5f4 <__aeabi_dmul+0x140>
1000f51a:	2280      	movs	r2, #128	; 0x80
1000f51c:	0f5b      	lsrs	r3, r3, #29
1000f51e:	0412      	lsls	r2, r2, #16
1000f520:	4313      	orrs	r3, r2
1000f522:	4a5c      	ldr	r2, [pc, #368]	; (1000f694 <__aeabi_dmul+0x1e0>)
1000f524:	00ed      	lsls	r5, r5, #3
1000f526:	4694      	mov	ip, r2
1000f528:	431d      	orrs	r5, r3
1000f52a:	4653      	mov	r3, sl
1000f52c:	2200      	movs	r2, #0
1000f52e:	00db      	lsls	r3, r3, #3
1000f530:	4460      	add	r0, ip
1000f532:	4649      	mov	r1, r9
1000f534:	1836      	adds	r6, r6, r0
1000f536:	1c70      	adds	r0, r6, #1
1000f538:	4061      	eors	r1, r4
1000f53a:	9002      	str	r0, [sp, #8]
1000f53c:	4317      	orrs	r7, r2
1000f53e:	2f0f      	cmp	r7, #15
1000f540:	d900      	bls.n	1000f544 <__aeabi_dmul+0x90>
1000f542:	e0af      	b.n	1000f6a4 <__aeabi_dmul+0x1f0>
1000f544:	4854      	ldr	r0, [pc, #336]	; (1000f698 <__aeabi_dmul+0x1e4>)
1000f546:	00bf      	lsls	r7, r7, #2
1000f548:	59c7      	ldr	r7, [r0, r7]
1000f54a:	46bf      	mov	pc, r7
1000f54c:	465b      	mov	r3, fp
1000f54e:	431f      	orrs	r7, r3
1000f550:	d000      	beq.n	1000f554 <__aeabi_dmul+0xa0>
1000f552:	e088      	b.n	1000f666 <__aeabi_dmul+0x1b2>
1000f554:	2300      	movs	r3, #0
1000f556:	469b      	mov	fp, r3
1000f558:	4698      	mov	r8, r3
1000f55a:	3302      	adds	r3, #2
1000f55c:	2708      	movs	r7, #8
1000f55e:	9301      	str	r3, [sp, #4]
1000f560:	e7ce      	b.n	1000f500 <__aeabi_dmul+0x4c>
1000f562:	4649      	mov	r1, r9
1000f564:	2a02      	cmp	r2, #2
1000f566:	d06a      	beq.n	1000f63e <__aeabi_dmul+0x18a>
1000f568:	2a03      	cmp	r2, #3
1000f56a:	d100      	bne.n	1000f56e <__aeabi_dmul+0xba>
1000f56c:	e209      	b.n	1000f982 <__aeabi_dmul+0x4ce>
1000f56e:	2a01      	cmp	r2, #1
1000f570:	d000      	beq.n	1000f574 <__aeabi_dmul+0xc0>
1000f572:	e1bb      	b.n	1000f8ec <__aeabi_dmul+0x438>
1000f574:	4011      	ands	r1, r2
1000f576:	2200      	movs	r2, #0
1000f578:	2300      	movs	r3, #0
1000f57a:	2500      	movs	r5, #0
1000f57c:	4690      	mov	r8, r2
1000f57e:	b2cc      	uxtb	r4, r1
1000f580:	2100      	movs	r1, #0
1000f582:	032d      	lsls	r5, r5, #12
1000f584:	0d0a      	lsrs	r2, r1, #20
1000f586:	0512      	lsls	r2, r2, #20
1000f588:	0b2d      	lsrs	r5, r5, #12
1000f58a:	4315      	orrs	r5, r2
1000f58c:	4a43      	ldr	r2, [pc, #268]	; (1000f69c <__aeabi_dmul+0x1e8>)
1000f58e:	051b      	lsls	r3, r3, #20
1000f590:	4015      	ands	r5, r2
1000f592:	431d      	orrs	r5, r3
1000f594:	006d      	lsls	r5, r5, #1
1000f596:	07e4      	lsls	r4, r4, #31
1000f598:	086d      	lsrs	r5, r5, #1
1000f59a:	4325      	orrs	r5, r4
1000f59c:	4640      	mov	r0, r8
1000f59e:	0029      	movs	r1, r5
1000f5a0:	b007      	add	sp, #28
1000f5a2:	bc3c      	pop	{r2, r3, r4, r5}
1000f5a4:	4690      	mov	r8, r2
1000f5a6:	4699      	mov	r9, r3
1000f5a8:	46a2      	mov	sl, r4
1000f5aa:	46ab      	mov	fp, r5
1000f5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f5ae:	4303      	orrs	r3, r0
1000f5b0:	d052      	beq.n	1000f658 <__aeabi_dmul+0x1a4>
1000f5b2:	465b      	mov	r3, fp
1000f5b4:	2b00      	cmp	r3, #0
1000f5b6:	d100      	bne.n	1000f5ba <__aeabi_dmul+0x106>
1000f5b8:	e18a      	b.n	1000f8d0 <__aeabi_dmul+0x41c>
1000f5ba:	4658      	mov	r0, fp
1000f5bc:	f000 fefc 	bl	100103b8 <__clzsi2>
1000f5c0:	0003      	movs	r3, r0
1000f5c2:	3b0b      	subs	r3, #11
1000f5c4:	2b1c      	cmp	r3, #28
1000f5c6:	dd00      	ble.n	1000f5ca <__aeabi_dmul+0x116>
1000f5c8:	e17b      	b.n	1000f8c2 <__aeabi_dmul+0x40e>
1000f5ca:	221d      	movs	r2, #29
1000f5cc:	1ad3      	subs	r3, r2, r3
1000f5ce:	003a      	movs	r2, r7
1000f5d0:	0001      	movs	r1, r0
1000f5d2:	465d      	mov	r5, fp
1000f5d4:	40da      	lsrs	r2, r3
1000f5d6:	3908      	subs	r1, #8
1000f5d8:	408d      	lsls	r5, r1
1000f5da:	0013      	movs	r3, r2
1000f5dc:	408f      	lsls	r7, r1
1000f5de:	432b      	orrs	r3, r5
1000f5e0:	469b      	mov	fp, r3
1000f5e2:	46b8      	mov	r8, r7
1000f5e4:	4b2e      	ldr	r3, [pc, #184]	; (1000f6a0 <__aeabi_dmul+0x1ec>)
1000f5e6:	2700      	movs	r7, #0
1000f5e8:	469c      	mov	ip, r3
1000f5ea:	2300      	movs	r3, #0
1000f5ec:	4460      	add	r0, ip
1000f5ee:	4246      	negs	r6, r0
1000f5f0:	9301      	str	r3, [sp, #4]
1000f5f2:	e785      	b.n	1000f500 <__aeabi_dmul+0x4c>
1000f5f4:	4652      	mov	r2, sl
1000f5f6:	432a      	orrs	r2, r5
1000f5f8:	d12c      	bne.n	1000f654 <__aeabi_dmul+0x1a0>
1000f5fa:	2500      	movs	r5, #0
1000f5fc:	2300      	movs	r3, #0
1000f5fe:	2202      	movs	r2, #2
1000f600:	e797      	b.n	1000f532 <__aeabi_dmul+0x7e>
1000f602:	4652      	mov	r2, sl
1000f604:	432a      	orrs	r2, r5
1000f606:	d021      	beq.n	1000f64c <__aeabi_dmul+0x198>
1000f608:	2d00      	cmp	r5, #0
1000f60a:	d100      	bne.n	1000f60e <__aeabi_dmul+0x15a>
1000f60c:	e154      	b.n	1000f8b8 <__aeabi_dmul+0x404>
1000f60e:	0028      	movs	r0, r5
1000f610:	f000 fed2 	bl	100103b8 <__clzsi2>
1000f614:	0003      	movs	r3, r0
1000f616:	3b0b      	subs	r3, #11
1000f618:	2b1c      	cmp	r3, #28
1000f61a:	dd00      	ble.n	1000f61e <__aeabi_dmul+0x16a>
1000f61c:	e146      	b.n	1000f8ac <__aeabi_dmul+0x3f8>
1000f61e:	211d      	movs	r1, #29
1000f620:	1acb      	subs	r3, r1, r3
1000f622:	4651      	mov	r1, sl
1000f624:	0002      	movs	r2, r0
1000f626:	40d9      	lsrs	r1, r3
1000f628:	4653      	mov	r3, sl
1000f62a:	3a08      	subs	r2, #8
1000f62c:	4095      	lsls	r5, r2
1000f62e:	4093      	lsls	r3, r2
1000f630:	430d      	orrs	r5, r1
1000f632:	4a1b      	ldr	r2, [pc, #108]	; (1000f6a0 <__aeabi_dmul+0x1ec>)
1000f634:	4694      	mov	ip, r2
1000f636:	4460      	add	r0, ip
1000f638:	4240      	negs	r0, r0
1000f63a:	2200      	movs	r2, #0
1000f63c:	e779      	b.n	1000f532 <__aeabi_dmul+0x7e>
1000f63e:	2401      	movs	r4, #1
1000f640:	2200      	movs	r2, #0
1000f642:	400c      	ands	r4, r1
1000f644:	4b12      	ldr	r3, [pc, #72]	; (1000f690 <__aeabi_dmul+0x1dc>)
1000f646:	2500      	movs	r5, #0
1000f648:	4690      	mov	r8, r2
1000f64a:	e799      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f64c:	2500      	movs	r5, #0
1000f64e:	2300      	movs	r3, #0
1000f650:	2201      	movs	r2, #1
1000f652:	e76e      	b.n	1000f532 <__aeabi_dmul+0x7e>
1000f654:	2203      	movs	r2, #3
1000f656:	e76c      	b.n	1000f532 <__aeabi_dmul+0x7e>
1000f658:	2300      	movs	r3, #0
1000f65a:	469b      	mov	fp, r3
1000f65c:	4698      	mov	r8, r3
1000f65e:	3301      	adds	r3, #1
1000f660:	2704      	movs	r7, #4
1000f662:	9301      	str	r3, [sp, #4]
1000f664:	e74c      	b.n	1000f500 <__aeabi_dmul+0x4c>
1000f666:	2303      	movs	r3, #3
1000f668:	270c      	movs	r7, #12
1000f66a:	9301      	str	r3, [sp, #4]
1000f66c:	e748      	b.n	1000f500 <__aeabi_dmul+0x4c>
1000f66e:	2300      	movs	r3, #0
1000f670:	2580      	movs	r5, #128	; 0x80
1000f672:	4698      	mov	r8, r3
1000f674:	2400      	movs	r4, #0
1000f676:	032d      	lsls	r5, r5, #12
1000f678:	4b05      	ldr	r3, [pc, #20]	; (1000f690 <__aeabi_dmul+0x1dc>)
1000f67a:	e781      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f67c:	465d      	mov	r5, fp
1000f67e:	4643      	mov	r3, r8
1000f680:	9a01      	ldr	r2, [sp, #4]
1000f682:	e76f      	b.n	1000f564 <__aeabi_dmul+0xb0>
1000f684:	465d      	mov	r5, fp
1000f686:	4643      	mov	r3, r8
1000f688:	0021      	movs	r1, r4
1000f68a:	9a01      	ldr	r2, [sp, #4]
1000f68c:	e76a      	b.n	1000f564 <__aeabi_dmul+0xb0>
1000f68e:	46c0      	nop			; (mov r8, r8)
1000f690:	000007ff 	.word	0x000007ff
1000f694:	fffffc01 	.word	0xfffffc01
1000f698:	100150a4 	.word	0x100150a4
1000f69c:	800fffff 	.word	0x800fffff
1000f6a0:	000003f3 	.word	0x000003f3
1000f6a4:	4642      	mov	r2, r8
1000f6a6:	0c12      	lsrs	r2, r2, #16
1000f6a8:	4691      	mov	r9, r2
1000f6aa:	0c1a      	lsrs	r2, r3, #16
1000f6ac:	4694      	mov	ip, r2
1000f6ae:	4642      	mov	r2, r8
1000f6b0:	0417      	lsls	r7, r2, #16
1000f6b2:	464a      	mov	r2, r9
1000f6b4:	041b      	lsls	r3, r3, #16
1000f6b6:	0c1b      	lsrs	r3, r3, #16
1000f6b8:	435a      	muls	r2, r3
1000f6ba:	4660      	mov	r0, ip
1000f6bc:	4690      	mov	r8, r2
1000f6be:	464a      	mov	r2, r9
1000f6c0:	4342      	muls	r2, r0
1000f6c2:	0010      	movs	r0, r2
1000f6c4:	9203      	str	r2, [sp, #12]
1000f6c6:	4662      	mov	r2, ip
1000f6c8:	001c      	movs	r4, r3
1000f6ca:	0c3f      	lsrs	r7, r7, #16
1000f6cc:	437a      	muls	r2, r7
1000f6ce:	437c      	muls	r4, r7
1000f6d0:	4442      	add	r2, r8
1000f6d2:	9201      	str	r2, [sp, #4]
1000f6d4:	0c22      	lsrs	r2, r4, #16
1000f6d6:	4692      	mov	sl, r2
1000f6d8:	9a01      	ldr	r2, [sp, #4]
1000f6da:	4452      	add	r2, sl
1000f6dc:	4590      	cmp	r8, r2
1000f6de:	d906      	bls.n	1000f6ee <__aeabi_dmul+0x23a>
1000f6e0:	4682      	mov	sl, r0
1000f6e2:	2080      	movs	r0, #128	; 0x80
1000f6e4:	0240      	lsls	r0, r0, #9
1000f6e6:	4680      	mov	r8, r0
1000f6e8:	44c2      	add	sl, r8
1000f6ea:	4650      	mov	r0, sl
1000f6ec:	9003      	str	r0, [sp, #12]
1000f6ee:	0c10      	lsrs	r0, r2, #16
1000f6f0:	9004      	str	r0, [sp, #16]
1000f6f2:	4648      	mov	r0, r9
1000f6f4:	0424      	lsls	r4, r4, #16
1000f6f6:	0c24      	lsrs	r4, r4, #16
1000f6f8:	0412      	lsls	r2, r2, #16
1000f6fa:	1912      	adds	r2, r2, r4
1000f6fc:	9205      	str	r2, [sp, #20]
1000f6fe:	0c2a      	lsrs	r2, r5, #16
1000f700:	042d      	lsls	r5, r5, #16
1000f702:	0c2d      	lsrs	r5, r5, #16
1000f704:	4368      	muls	r0, r5
1000f706:	002c      	movs	r4, r5
1000f708:	4682      	mov	sl, r0
1000f70a:	4648      	mov	r0, r9
1000f70c:	437c      	muls	r4, r7
1000f70e:	4350      	muls	r0, r2
1000f710:	4681      	mov	r9, r0
1000f712:	0c20      	lsrs	r0, r4, #16
1000f714:	4680      	mov	r8, r0
1000f716:	4357      	muls	r7, r2
1000f718:	4457      	add	r7, sl
1000f71a:	4447      	add	r7, r8
1000f71c:	45ba      	cmp	sl, r7
1000f71e:	d903      	bls.n	1000f728 <__aeabi_dmul+0x274>
1000f720:	2080      	movs	r0, #128	; 0x80
1000f722:	0240      	lsls	r0, r0, #9
1000f724:	4680      	mov	r8, r0
1000f726:	44c1      	add	r9, r8
1000f728:	0c38      	lsrs	r0, r7, #16
1000f72a:	043f      	lsls	r7, r7, #16
1000f72c:	46b8      	mov	r8, r7
1000f72e:	4448      	add	r0, r9
1000f730:	0424      	lsls	r4, r4, #16
1000f732:	0c24      	lsrs	r4, r4, #16
1000f734:	9001      	str	r0, [sp, #4]
1000f736:	9804      	ldr	r0, [sp, #16]
1000f738:	44a0      	add	r8, r4
1000f73a:	4440      	add	r0, r8
1000f73c:	9004      	str	r0, [sp, #16]
1000f73e:	4658      	mov	r0, fp
1000f740:	0c00      	lsrs	r0, r0, #16
1000f742:	4681      	mov	r9, r0
1000f744:	4658      	mov	r0, fp
1000f746:	0404      	lsls	r4, r0, #16
1000f748:	0c20      	lsrs	r0, r4, #16
1000f74a:	4682      	mov	sl, r0
1000f74c:	0007      	movs	r7, r0
1000f74e:	4648      	mov	r0, r9
1000f750:	435f      	muls	r7, r3
1000f752:	464c      	mov	r4, r9
1000f754:	4343      	muls	r3, r0
1000f756:	4660      	mov	r0, ip
1000f758:	4360      	muls	r0, r4
1000f75a:	4664      	mov	r4, ip
1000f75c:	4683      	mov	fp, r0
1000f75e:	4650      	mov	r0, sl
1000f760:	4344      	muls	r4, r0
1000f762:	0c38      	lsrs	r0, r7, #16
1000f764:	4684      	mov	ip, r0
1000f766:	18e4      	adds	r4, r4, r3
1000f768:	4464      	add	r4, ip
1000f76a:	42a3      	cmp	r3, r4
1000f76c:	d903      	bls.n	1000f776 <__aeabi_dmul+0x2c2>
1000f76e:	2380      	movs	r3, #128	; 0x80
1000f770:	025b      	lsls	r3, r3, #9
1000f772:	469c      	mov	ip, r3
1000f774:	44e3      	add	fp, ip
1000f776:	4648      	mov	r0, r9
1000f778:	043f      	lsls	r7, r7, #16
1000f77a:	0c23      	lsrs	r3, r4, #16
1000f77c:	0c3f      	lsrs	r7, r7, #16
1000f77e:	0424      	lsls	r4, r4, #16
1000f780:	19e4      	adds	r4, r4, r7
1000f782:	4657      	mov	r7, sl
1000f784:	4368      	muls	r0, r5
1000f786:	436f      	muls	r7, r5
1000f788:	4684      	mov	ip, r0
1000f78a:	464d      	mov	r5, r9
1000f78c:	4650      	mov	r0, sl
1000f78e:	4355      	muls	r5, r2
1000f790:	4342      	muls	r2, r0
1000f792:	0c38      	lsrs	r0, r7, #16
1000f794:	4681      	mov	r9, r0
1000f796:	4462      	add	r2, ip
1000f798:	444a      	add	r2, r9
1000f79a:	445b      	add	r3, fp
1000f79c:	4594      	cmp	ip, r2
1000f79e:	d903      	bls.n	1000f7a8 <__aeabi_dmul+0x2f4>
1000f7a0:	2080      	movs	r0, #128	; 0x80
1000f7a2:	0240      	lsls	r0, r0, #9
1000f7a4:	4684      	mov	ip, r0
1000f7a6:	4465      	add	r5, ip
1000f7a8:	9803      	ldr	r0, [sp, #12]
1000f7aa:	043f      	lsls	r7, r7, #16
1000f7ac:	4683      	mov	fp, r0
1000f7ae:	9804      	ldr	r0, [sp, #16]
1000f7b0:	0c3f      	lsrs	r7, r7, #16
1000f7b2:	4684      	mov	ip, r0
1000f7b4:	44e3      	add	fp, ip
1000f7b6:	45c3      	cmp	fp, r8
1000f7b8:	4180      	sbcs	r0, r0
1000f7ba:	4240      	negs	r0, r0
1000f7bc:	4682      	mov	sl, r0
1000f7be:	0410      	lsls	r0, r2, #16
1000f7c0:	4684      	mov	ip, r0
1000f7c2:	9801      	ldr	r0, [sp, #4]
1000f7c4:	4467      	add	r7, ip
1000f7c6:	4684      	mov	ip, r0
1000f7c8:	4467      	add	r7, ip
1000f7ca:	44a3      	add	fp, r4
1000f7cc:	46bc      	mov	ip, r7
1000f7ce:	45a3      	cmp	fp, r4
1000f7d0:	41a4      	sbcs	r4, r4
1000f7d2:	4699      	mov	r9, r3
1000f7d4:	44d4      	add	ip, sl
1000f7d6:	4264      	negs	r4, r4
1000f7d8:	4287      	cmp	r7, r0
1000f7da:	41bf      	sbcs	r7, r7
1000f7dc:	45d4      	cmp	ip, sl
1000f7de:	4180      	sbcs	r0, r0
1000f7e0:	44e1      	add	r9, ip
1000f7e2:	46a0      	mov	r8, r4
1000f7e4:	4599      	cmp	r9, r3
1000f7e6:	419b      	sbcs	r3, r3
1000f7e8:	427f      	negs	r7, r7
1000f7ea:	4240      	negs	r0, r0
1000f7ec:	44c8      	add	r8, r9
1000f7ee:	4307      	orrs	r7, r0
1000f7f0:	0c12      	lsrs	r2, r2, #16
1000f7f2:	18ba      	adds	r2, r7, r2
1000f7f4:	45a0      	cmp	r8, r4
1000f7f6:	41a4      	sbcs	r4, r4
1000f7f8:	425f      	negs	r7, r3
1000f7fa:	003b      	movs	r3, r7
1000f7fc:	4264      	negs	r4, r4
1000f7fe:	4323      	orrs	r3, r4
1000f800:	18d7      	adds	r7, r2, r3
1000f802:	4643      	mov	r3, r8
1000f804:	197d      	adds	r5, r7, r5
1000f806:	0ddb      	lsrs	r3, r3, #23
1000f808:	026d      	lsls	r5, r5, #9
1000f80a:	431d      	orrs	r5, r3
1000f80c:	465b      	mov	r3, fp
1000f80e:	025a      	lsls	r2, r3, #9
1000f810:	9b05      	ldr	r3, [sp, #20]
1000f812:	431a      	orrs	r2, r3
1000f814:	1e53      	subs	r3, r2, #1
1000f816:	419a      	sbcs	r2, r3
1000f818:	465b      	mov	r3, fp
1000f81a:	0ddb      	lsrs	r3, r3, #23
1000f81c:	431a      	orrs	r2, r3
1000f81e:	4643      	mov	r3, r8
1000f820:	025b      	lsls	r3, r3, #9
1000f822:	4313      	orrs	r3, r2
1000f824:	01ea      	lsls	r2, r5, #7
1000f826:	d507      	bpl.n	1000f838 <__aeabi_dmul+0x384>
1000f828:	2201      	movs	r2, #1
1000f82a:	085c      	lsrs	r4, r3, #1
1000f82c:	4013      	ands	r3, r2
1000f82e:	4323      	orrs	r3, r4
1000f830:	07ea      	lsls	r2, r5, #31
1000f832:	9e02      	ldr	r6, [sp, #8]
1000f834:	4313      	orrs	r3, r2
1000f836:	086d      	lsrs	r5, r5, #1
1000f838:	4a57      	ldr	r2, [pc, #348]	; (1000f998 <__aeabi_dmul+0x4e4>)
1000f83a:	18b2      	adds	r2, r6, r2
1000f83c:	2a00      	cmp	r2, #0
1000f83e:	dd4b      	ble.n	1000f8d8 <__aeabi_dmul+0x424>
1000f840:	0758      	lsls	r0, r3, #29
1000f842:	d009      	beq.n	1000f858 <__aeabi_dmul+0x3a4>
1000f844:	200f      	movs	r0, #15
1000f846:	4018      	ands	r0, r3
1000f848:	2804      	cmp	r0, #4
1000f84a:	d005      	beq.n	1000f858 <__aeabi_dmul+0x3a4>
1000f84c:	1d18      	adds	r0, r3, #4
1000f84e:	4298      	cmp	r0, r3
1000f850:	419b      	sbcs	r3, r3
1000f852:	425b      	negs	r3, r3
1000f854:	18ed      	adds	r5, r5, r3
1000f856:	0003      	movs	r3, r0
1000f858:	01e8      	lsls	r0, r5, #7
1000f85a:	d504      	bpl.n	1000f866 <__aeabi_dmul+0x3b2>
1000f85c:	4a4f      	ldr	r2, [pc, #316]	; (1000f99c <__aeabi_dmul+0x4e8>)
1000f85e:	4015      	ands	r5, r2
1000f860:	2280      	movs	r2, #128	; 0x80
1000f862:	00d2      	lsls	r2, r2, #3
1000f864:	18b2      	adds	r2, r6, r2
1000f866:	484e      	ldr	r0, [pc, #312]	; (1000f9a0 <__aeabi_dmul+0x4ec>)
1000f868:	4282      	cmp	r2, r0
1000f86a:	dd00      	ble.n	1000f86e <__aeabi_dmul+0x3ba>
1000f86c:	e6e7      	b.n	1000f63e <__aeabi_dmul+0x18a>
1000f86e:	2401      	movs	r4, #1
1000f870:	08db      	lsrs	r3, r3, #3
1000f872:	0768      	lsls	r0, r5, #29
1000f874:	4318      	orrs	r0, r3
1000f876:	026d      	lsls	r5, r5, #9
1000f878:	0553      	lsls	r3, r2, #21
1000f87a:	4680      	mov	r8, r0
1000f87c:	0b2d      	lsrs	r5, r5, #12
1000f87e:	0d5b      	lsrs	r3, r3, #21
1000f880:	400c      	ands	r4, r1
1000f882:	e67d      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f884:	2280      	movs	r2, #128	; 0x80
1000f886:	4659      	mov	r1, fp
1000f888:	0312      	lsls	r2, r2, #12
1000f88a:	4211      	tst	r1, r2
1000f88c:	d008      	beq.n	1000f8a0 <__aeabi_dmul+0x3ec>
1000f88e:	4215      	tst	r5, r2
1000f890:	d106      	bne.n	1000f8a0 <__aeabi_dmul+0x3ec>
1000f892:	4315      	orrs	r5, r2
1000f894:	032d      	lsls	r5, r5, #12
1000f896:	4698      	mov	r8, r3
1000f898:	0b2d      	lsrs	r5, r5, #12
1000f89a:	464c      	mov	r4, r9
1000f89c:	4b41      	ldr	r3, [pc, #260]	; (1000f9a4 <__aeabi_dmul+0x4f0>)
1000f89e:	e66f      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f8a0:	465d      	mov	r5, fp
1000f8a2:	4315      	orrs	r5, r2
1000f8a4:	032d      	lsls	r5, r5, #12
1000f8a6:	0b2d      	lsrs	r5, r5, #12
1000f8a8:	4b3e      	ldr	r3, [pc, #248]	; (1000f9a4 <__aeabi_dmul+0x4f0>)
1000f8aa:	e669      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f8ac:	0003      	movs	r3, r0
1000f8ae:	4655      	mov	r5, sl
1000f8b0:	3b28      	subs	r3, #40	; 0x28
1000f8b2:	409d      	lsls	r5, r3
1000f8b4:	2300      	movs	r3, #0
1000f8b6:	e6bc      	b.n	1000f632 <__aeabi_dmul+0x17e>
1000f8b8:	4650      	mov	r0, sl
1000f8ba:	f000 fd7d 	bl	100103b8 <__clzsi2>
1000f8be:	3020      	adds	r0, #32
1000f8c0:	e6a8      	b.n	1000f614 <__aeabi_dmul+0x160>
1000f8c2:	0003      	movs	r3, r0
1000f8c4:	3b28      	subs	r3, #40	; 0x28
1000f8c6:	409f      	lsls	r7, r3
1000f8c8:	2300      	movs	r3, #0
1000f8ca:	46bb      	mov	fp, r7
1000f8cc:	4698      	mov	r8, r3
1000f8ce:	e689      	b.n	1000f5e4 <__aeabi_dmul+0x130>
1000f8d0:	f000 fd72 	bl	100103b8 <__clzsi2>
1000f8d4:	3020      	adds	r0, #32
1000f8d6:	e673      	b.n	1000f5c0 <__aeabi_dmul+0x10c>
1000f8d8:	2401      	movs	r4, #1
1000f8da:	1aa6      	subs	r6, r4, r2
1000f8dc:	2e38      	cmp	r6, #56	; 0x38
1000f8de:	dd07      	ble.n	1000f8f0 <__aeabi_dmul+0x43c>
1000f8e0:	2200      	movs	r2, #0
1000f8e2:	400c      	ands	r4, r1
1000f8e4:	2300      	movs	r3, #0
1000f8e6:	2500      	movs	r5, #0
1000f8e8:	4690      	mov	r8, r2
1000f8ea:	e649      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f8ec:	9e02      	ldr	r6, [sp, #8]
1000f8ee:	e7a3      	b.n	1000f838 <__aeabi_dmul+0x384>
1000f8f0:	2e1f      	cmp	r6, #31
1000f8f2:	dc20      	bgt.n	1000f936 <__aeabi_dmul+0x482>
1000f8f4:	2220      	movs	r2, #32
1000f8f6:	002c      	movs	r4, r5
1000f8f8:	0018      	movs	r0, r3
1000f8fa:	1b92      	subs	r2, r2, r6
1000f8fc:	40f0      	lsrs	r0, r6
1000f8fe:	4094      	lsls	r4, r2
1000f900:	4093      	lsls	r3, r2
1000f902:	4304      	orrs	r4, r0
1000f904:	1e58      	subs	r0, r3, #1
1000f906:	4183      	sbcs	r3, r0
1000f908:	431c      	orrs	r4, r3
1000f90a:	40f5      	lsrs	r5, r6
1000f90c:	0763      	lsls	r3, r4, #29
1000f90e:	d009      	beq.n	1000f924 <__aeabi_dmul+0x470>
1000f910:	230f      	movs	r3, #15
1000f912:	4023      	ands	r3, r4
1000f914:	2b04      	cmp	r3, #4
1000f916:	d005      	beq.n	1000f924 <__aeabi_dmul+0x470>
1000f918:	0023      	movs	r3, r4
1000f91a:	1d1c      	adds	r4, r3, #4
1000f91c:	429c      	cmp	r4, r3
1000f91e:	4192      	sbcs	r2, r2
1000f920:	4252      	negs	r2, r2
1000f922:	18ad      	adds	r5, r5, r2
1000f924:	022b      	lsls	r3, r5, #8
1000f926:	d51f      	bpl.n	1000f968 <__aeabi_dmul+0x4b4>
1000f928:	2401      	movs	r4, #1
1000f92a:	2200      	movs	r2, #0
1000f92c:	400c      	ands	r4, r1
1000f92e:	2301      	movs	r3, #1
1000f930:	2500      	movs	r5, #0
1000f932:	4690      	mov	r8, r2
1000f934:	e624      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f936:	201f      	movs	r0, #31
1000f938:	002c      	movs	r4, r5
1000f93a:	4240      	negs	r0, r0
1000f93c:	1a82      	subs	r2, r0, r2
1000f93e:	40d4      	lsrs	r4, r2
1000f940:	2e20      	cmp	r6, #32
1000f942:	d01c      	beq.n	1000f97e <__aeabi_dmul+0x4ca>
1000f944:	2240      	movs	r2, #64	; 0x40
1000f946:	1b96      	subs	r6, r2, r6
1000f948:	40b5      	lsls	r5, r6
1000f94a:	432b      	orrs	r3, r5
1000f94c:	1e58      	subs	r0, r3, #1
1000f94e:	4183      	sbcs	r3, r0
1000f950:	2007      	movs	r0, #7
1000f952:	4323      	orrs	r3, r4
1000f954:	4018      	ands	r0, r3
1000f956:	2500      	movs	r5, #0
1000f958:	2800      	cmp	r0, #0
1000f95a:	d009      	beq.n	1000f970 <__aeabi_dmul+0x4bc>
1000f95c:	220f      	movs	r2, #15
1000f95e:	2500      	movs	r5, #0
1000f960:	401a      	ands	r2, r3
1000f962:	001c      	movs	r4, r3
1000f964:	2a04      	cmp	r2, #4
1000f966:	d1d8      	bne.n	1000f91a <__aeabi_dmul+0x466>
1000f968:	0023      	movs	r3, r4
1000f96a:	0768      	lsls	r0, r5, #29
1000f96c:	026d      	lsls	r5, r5, #9
1000f96e:	0b2d      	lsrs	r5, r5, #12
1000f970:	2401      	movs	r4, #1
1000f972:	08db      	lsrs	r3, r3, #3
1000f974:	4303      	orrs	r3, r0
1000f976:	4698      	mov	r8, r3
1000f978:	400c      	ands	r4, r1
1000f97a:	2300      	movs	r3, #0
1000f97c:	e600      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f97e:	2500      	movs	r5, #0
1000f980:	e7e3      	b.n	1000f94a <__aeabi_dmul+0x496>
1000f982:	2280      	movs	r2, #128	; 0x80
1000f984:	2401      	movs	r4, #1
1000f986:	0312      	lsls	r2, r2, #12
1000f988:	4315      	orrs	r5, r2
1000f98a:	032d      	lsls	r5, r5, #12
1000f98c:	4698      	mov	r8, r3
1000f98e:	0b2d      	lsrs	r5, r5, #12
1000f990:	400c      	ands	r4, r1
1000f992:	4b04      	ldr	r3, [pc, #16]	; (1000f9a4 <__aeabi_dmul+0x4f0>)
1000f994:	e5f4      	b.n	1000f580 <__aeabi_dmul+0xcc>
1000f996:	46c0      	nop			; (mov r8, r8)
1000f998:	000003ff 	.word	0x000003ff
1000f99c:	feffffff 	.word	0xfeffffff
1000f9a0:	000007fe 	.word	0x000007fe
1000f9a4:	000007ff 	.word	0x000007ff

1000f9a8 <__aeabi_dsub>:
1000f9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9aa:	4657      	mov	r7, sl
1000f9ac:	464e      	mov	r6, r9
1000f9ae:	4645      	mov	r5, r8
1000f9b0:	b4e0      	push	{r5, r6, r7}
1000f9b2:	000e      	movs	r6, r1
1000f9b4:	0011      	movs	r1, r2
1000f9b6:	0ff2      	lsrs	r2, r6, #31
1000f9b8:	4692      	mov	sl, r2
1000f9ba:	00c5      	lsls	r5, r0, #3
1000f9bc:	0f42      	lsrs	r2, r0, #29
1000f9be:	0318      	lsls	r0, r3, #12
1000f9c0:	0337      	lsls	r7, r6, #12
1000f9c2:	0074      	lsls	r4, r6, #1
1000f9c4:	0a40      	lsrs	r0, r0, #9
1000f9c6:	0f4e      	lsrs	r6, r1, #29
1000f9c8:	0a7f      	lsrs	r7, r7, #9
1000f9ca:	4330      	orrs	r0, r6
1000f9cc:	4ecf      	ldr	r6, [pc, #828]	; (1000fd0c <__aeabi_dsub+0x364>)
1000f9ce:	4317      	orrs	r7, r2
1000f9d0:	005a      	lsls	r2, r3, #1
1000f9d2:	0d64      	lsrs	r4, r4, #21
1000f9d4:	0d52      	lsrs	r2, r2, #21
1000f9d6:	0fdb      	lsrs	r3, r3, #31
1000f9d8:	00c9      	lsls	r1, r1, #3
1000f9da:	42b2      	cmp	r2, r6
1000f9dc:	d100      	bne.n	1000f9e0 <__aeabi_dsub+0x38>
1000f9de:	e0e5      	b.n	1000fbac <__aeabi_dsub+0x204>
1000f9e0:	2601      	movs	r6, #1
1000f9e2:	4073      	eors	r3, r6
1000f9e4:	1aa6      	subs	r6, r4, r2
1000f9e6:	46b4      	mov	ip, r6
1000f9e8:	4553      	cmp	r3, sl
1000f9ea:	d100      	bne.n	1000f9ee <__aeabi_dsub+0x46>
1000f9ec:	e0af      	b.n	1000fb4e <__aeabi_dsub+0x1a6>
1000f9ee:	2e00      	cmp	r6, #0
1000f9f0:	dc00      	bgt.n	1000f9f4 <__aeabi_dsub+0x4c>
1000f9f2:	e10d      	b.n	1000fc10 <__aeabi_dsub+0x268>
1000f9f4:	2a00      	cmp	r2, #0
1000f9f6:	d13a      	bne.n	1000fa6e <__aeabi_dsub+0xc6>
1000f9f8:	0003      	movs	r3, r0
1000f9fa:	430b      	orrs	r3, r1
1000f9fc:	d000      	beq.n	1000fa00 <__aeabi_dsub+0x58>
1000f9fe:	e0e4      	b.n	1000fbca <__aeabi_dsub+0x222>
1000fa00:	076b      	lsls	r3, r5, #29
1000fa02:	d009      	beq.n	1000fa18 <__aeabi_dsub+0x70>
1000fa04:	230f      	movs	r3, #15
1000fa06:	402b      	ands	r3, r5
1000fa08:	2b04      	cmp	r3, #4
1000fa0a:	d005      	beq.n	1000fa18 <__aeabi_dsub+0x70>
1000fa0c:	1d2b      	adds	r3, r5, #4
1000fa0e:	42ab      	cmp	r3, r5
1000fa10:	41ad      	sbcs	r5, r5
1000fa12:	426d      	negs	r5, r5
1000fa14:	197f      	adds	r7, r7, r5
1000fa16:	001d      	movs	r5, r3
1000fa18:	023b      	lsls	r3, r7, #8
1000fa1a:	d400      	bmi.n	1000fa1e <__aeabi_dsub+0x76>
1000fa1c:	e088      	b.n	1000fb30 <__aeabi_dsub+0x188>
1000fa1e:	4bbb      	ldr	r3, [pc, #748]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fa20:	3401      	adds	r4, #1
1000fa22:	429c      	cmp	r4, r3
1000fa24:	d100      	bne.n	1000fa28 <__aeabi_dsub+0x80>
1000fa26:	e110      	b.n	1000fc4a <__aeabi_dsub+0x2a2>
1000fa28:	003a      	movs	r2, r7
1000fa2a:	4bb9      	ldr	r3, [pc, #740]	; (1000fd10 <__aeabi_dsub+0x368>)
1000fa2c:	4651      	mov	r1, sl
1000fa2e:	401a      	ands	r2, r3
1000fa30:	2301      	movs	r3, #1
1000fa32:	0750      	lsls	r0, r2, #29
1000fa34:	08ed      	lsrs	r5, r5, #3
1000fa36:	0252      	lsls	r2, r2, #9
1000fa38:	0564      	lsls	r4, r4, #21
1000fa3a:	4305      	orrs	r5, r0
1000fa3c:	0b12      	lsrs	r2, r2, #12
1000fa3e:	0d64      	lsrs	r4, r4, #21
1000fa40:	400b      	ands	r3, r1
1000fa42:	2100      	movs	r1, #0
1000fa44:	0028      	movs	r0, r5
1000fa46:	0312      	lsls	r2, r2, #12
1000fa48:	0d0d      	lsrs	r5, r1, #20
1000fa4a:	0b12      	lsrs	r2, r2, #12
1000fa4c:	0564      	lsls	r4, r4, #21
1000fa4e:	052d      	lsls	r5, r5, #20
1000fa50:	4315      	orrs	r5, r2
1000fa52:	0862      	lsrs	r2, r4, #1
1000fa54:	4caf      	ldr	r4, [pc, #700]	; (1000fd14 <__aeabi_dsub+0x36c>)
1000fa56:	07db      	lsls	r3, r3, #31
1000fa58:	402c      	ands	r4, r5
1000fa5a:	4314      	orrs	r4, r2
1000fa5c:	0064      	lsls	r4, r4, #1
1000fa5e:	0864      	lsrs	r4, r4, #1
1000fa60:	431c      	orrs	r4, r3
1000fa62:	0021      	movs	r1, r4
1000fa64:	bc1c      	pop	{r2, r3, r4}
1000fa66:	4690      	mov	r8, r2
1000fa68:	4699      	mov	r9, r3
1000fa6a:	46a2      	mov	sl, r4
1000fa6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa6e:	4ba7      	ldr	r3, [pc, #668]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fa70:	429c      	cmp	r4, r3
1000fa72:	d0c5      	beq.n	1000fa00 <__aeabi_dsub+0x58>
1000fa74:	2380      	movs	r3, #128	; 0x80
1000fa76:	041b      	lsls	r3, r3, #16
1000fa78:	4318      	orrs	r0, r3
1000fa7a:	4663      	mov	r3, ip
1000fa7c:	2b38      	cmp	r3, #56	; 0x38
1000fa7e:	dd00      	ble.n	1000fa82 <__aeabi_dsub+0xda>
1000fa80:	e0fd      	b.n	1000fc7e <__aeabi_dsub+0x2d6>
1000fa82:	2b1f      	cmp	r3, #31
1000fa84:	dd00      	ble.n	1000fa88 <__aeabi_dsub+0xe0>
1000fa86:	e130      	b.n	1000fcea <__aeabi_dsub+0x342>
1000fa88:	4662      	mov	r2, ip
1000fa8a:	2320      	movs	r3, #32
1000fa8c:	1a9b      	subs	r3, r3, r2
1000fa8e:	0002      	movs	r2, r0
1000fa90:	409a      	lsls	r2, r3
1000fa92:	4666      	mov	r6, ip
1000fa94:	4690      	mov	r8, r2
1000fa96:	000a      	movs	r2, r1
1000fa98:	4099      	lsls	r1, r3
1000fa9a:	40f2      	lsrs	r2, r6
1000fa9c:	4646      	mov	r6, r8
1000fa9e:	1e4b      	subs	r3, r1, #1
1000faa0:	4199      	sbcs	r1, r3
1000faa2:	4332      	orrs	r2, r6
1000faa4:	4311      	orrs	r1, r2
1000faa6:	4663      	mov	r3, ip
1000faa8:	0002      	movs	r2, r0
1000faaa:	40da      	lsrs	r2, r3
1000faac:	1a69      	subs	r1, r5, r1
1000faae:	428d      	cmp	r5, r1
1000fab0:	419b      	sbcs	r3, r3
1000fab2:	000d      	movs	r5, r1
1000fab4:	1aba      	subs	r2, r7, r2
1000fab6:	425b      	negs	r3, r3
1000fab8:	1ad7      	subs	r7, r2, r3
1000faba:	023b      	lsls	r3, r7, #8
1000fabc:	d535      	bpl.n	1000fb2a <__aeabi_dsub+0x182>
1000fabe:	027a      	lsls	r2, r7, #9
1000fac0:	0a53      	lsrs	r3, r2, #9
1000fac2:	4698      	mov	r8, r3
1000fac4:	4643      	mov	r3, r8
1000fac6:	2b00      	cmp	r3, #0
1000fac8:	d100      	bne.n	1000facc <__aeabi_dsub+0x124>
1000faca:	e0c4      	b.n	1000fc56 <__aeabi_dsub+0x2ae>
1000facc:	4640      	mov	r0, r8
1000face:	f000 fc73 	bl	100103b8 <__clzsi2>
1000fad2:	0003      	movs	r3, r0
1000fad4:	3b08      	subs	r3, #8
1000fad6:	2b1f      	cmp	r3, #31
1000fad8:	dd00      	ble.n	1000fadc <__aeabi_dsub+0x134>
1000fada:	e0c5      	b.n	1000fc68 <__aeabi_dsub+0x2c0>
1000fadc:	2220      	movs	r2, #32
1000fade:	0029      	movs	r1, r5
1000fae0:	1ad2      	subs	r2, r2, r3
1000fae2:	4647      	mov	r7, r8
1000fae4:	40d1      	lsrs	r1, r2
1000fae6:	409f      	lsls	r7, r3
1000fae8:	000a      	movs	r2, r1
1000faea:	409d      	lsls	r5, r3
1000faec:	433a      	orrs	r2, r7
1000faee:	429c      	cmp	r4, r3
1000faf0:	dd00      	ble.n	1000faf4 <__aeabi_dsub+0x14c>
1000faf2:	e0c0      	b.n	1000fc76 <__aeabi_dsub+0x2ce>
1000faf4:	1b1c      	subs	r4, r3, r4
1000faf6:	1c63      	adds	r3, r4, #1
1000faf8:	2b1f      	cmp	r3, #31
1000fafa:	dd00      	ble.n	1000fafe <__aeabi_dsub+0x156>
1000fafc:	e0e4      	b.n	1000fcc8 <__aeabi_dsub+0x320>
1000fafe:	2120      	movs	r1, #32
1000fb00:	0014      	movs	r4, r2
1000fb02:	0028      	movs	r0, r5
1000fb04:	1ac9      	subs	r1, r1, r3
1000fb06:	40d8      	lsrs	r0, r3
1000fb08:	408c      	lsls	r4, r1
1000fb0a:	408d      	lsls	r5, r1
1000fb0c:	4304      	orrs	r4, r0
1000fb0e:	40da      	lsrs	r2, r3
1000fb10:	1e68      	subs	r0, r5, #1
1000fb12:	4185      	sbcs	r5, r0
1000fb14:	0017      	movs	r7, r2
1000fb16:	4325      	orrs	r5, r4
1000fb18:	2400      	movs	r4, #0
1000fb1a:	e771      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fb1c:	4642      	mov	r2, r8
1000fb1e:	4663      	mov	r3, ip
1000fb20:	431a      	orrs	r2, r3
1000fb22:	d100      	bne.n	1000fb26 <__aeabi_dsub+0x17e>
1000fb24:	e24c      	b.n	1000ffc0 <__aeabi_dsub+0x618>
1000fb26:	4667      	mov	r7, ip
1000fb28:	4645      	mov	r5, r8
1000fb2a:	076b      	lsls	r3, r5, #29
1000fb2c:	d000      	beq.n	1000fb30 <__aeabi_dsub+0x188>
1000fb2e:	e769      	b.n	1000fa04 <__aeabi_dsub+0x5c>
1000fb30:	2301      	movs	r3, #1
1000fb32:	4651      	mov	r1, sl
1000fb34:	0778      	lsls	r0, r7, #29
1000fb36:	08ed      	lsrs	r5, r5, #3
1000fb38:	08fa      	lsrs	r2, r7, #3
1000fb3a:	400b      	ands	r3, r1
1000fb3c:	4305      	orrs	r5, r0
1000fb3e:	4973      	ldr	r1, [pc, #460]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fb40:	428c      	cmp	r4, r1
1000fb42:	d038      	beq.n	1000fbb6 <__aeabi_dsub+0x20e>
1000fb44:	0312      	lsls	r2, r2, #12
1000fb46:	0564      	lsls	r4, r4, #21
1000fb48:	0b12      	lsrs	r2, r2, #12
1000fb4a:	0d64      	lsrs	r4, r4, #21
1000fb4c:	e779      	b.n	1000fa42 <__aeabi_dsub+0x9a>
1000fb4e:	2e00      	cmp	r6, #0
1000fb50:	dc00      	bgt.n	1000fb54 <__aeabi_dsub+0x1ac>
1000fb52:	e09a      	b.n	1000fc8a <__aeabi_dsub+0x2e2>
1000fb54:	2a00      	cmp	r2, #0
1000fb56:	d047      	beq.n	1000fbe8 <__aeabi_dsub+0x240>
1000fb58:	4a6c      	ldr	r2, [pc, #432]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fb5a:	4294      	cmp	r4, r2
1000fb5c:	d100      	bne.n	1000fb60 <__aeabi_dsub+0x1b8>
1000fb5e:	e74f      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fb60:	2280      	movs	r2, #128	; 0x80
1000fb62:	0412      	lsls	r2, r2, #16
1000fb64:	4310      	orrs	r0, r2
1000fb66:	4662      	mov	r2, ip
1000fb68:	2a38      	cmp	r2, #56	; 0x38
1000fb6a:	dc00      	bgt.n	1000fb6e <__aeabi_dsub+0x1c6>
1000fb6c:	e108      	b.n	1000fd80 <__aeabi_dsub+0x3d8>
1000fb6e:	4301      	orrs	r1, r0
1000fb70:	1e48      	subs	r0, r1, #1
1000fb72:	4181      	sbcs	r1, r0
1000fb74:	2200      	movs	r2, #0
1000fb76:	b2c9      	uxtb	r1, r1
1000fb78:	1949      	adds	r1, r1, r5
1000fb7a:	19d2      	adds	r2, r2, r7
1000fb7c:	42a9      	cmp	r1, r5
1000fb7e:	41bf      	sbcs	r7, r7
1000fb80:	000d      	movs	r5, r1
1000fb82:	427f      	negs	r7, r7
1000fb84:	18bf      	adds	r7, r7, r2
1000fb86:	023a      	lsls	r2, r7, #8
1000fb88:	d400      	bmi.n	1000fb8c <__aeabi_dsub+0x1e4>
1000fb8a:	e142      	b.n	1000fe12 <__aeabi_dsub+0x46a>
1000fb8c:	4a5f      	ldr	r2, [pc, #380]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fb8e:	3401      	adds	r4, #1
1000fb90:	4294      	cmp	r4, r2
1000fb92:	d100      	bne.n	1000fb96 <__aeabi_dsub+0x1ee>
1000fb94:	e14e      	b.n	1000fe34 <__aeabi_dsub+0x48c>
1000fb96:	2001      	movs	r0, #1
1000fb98:	4a5d      	ldr	r2, [pc, #372]	; (1000fd10 <__aeabi_dsub+0x368>)
1000fb9a:	0869      	lsrs	r1, r5, #1
1000fb9c:	403a      	ands	r2, r7
1000fb9e:	4028      	ands	r0, r5
1000fba0:	4308      	orrs	r0, r1
1000fba2:	07d5      	lsls	r5, r2, #31
1000fba4:	4305      	orrs	r5, r0
1000fba6:	0857      	lsrs	r7, r2, #1
1000fba8:	469a      	mov	sl, r3
1000fbaa:	e729      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fbac:	0006      	movs	r6, r0
1000fbae:	430e      	orrs	r6, r1
1000fbb0:	d000      	beq.n	1000fbb4 <__aeabi_dsub+0x20c>
1000fbb2:	e717      	b.n	1000f9e4 <__aeabi_dsub+0x3c>
1000fbb4:	e714      	b.n	1000f9e0 <__aeabi_dsub+0x38>
1000fbb6:	0029      	movs	r1, r5
1000fbb8:	4311      	orrs	r1, r2
1000fbba:	d100      	bne.n	1000fbbe <__aeabi_dsub+0x216>
1000fbbc:	e1f9      	b.n	1000ffb2 <__aeabi_dsub+0x60a>
1000fbbe:	2180      	movs	r1, #128	; 0x80
1000fbc0:	0309      	lsls	r1, r1, #12
1000fbc2:	430a      	orrs	r2, r1
1000fbc4:	0312      	lsls	r2, r2, #12
1000fbc6:	0b12      	lsrs	r2, r2, #12
1000fbc8:	e73b      	b.n	1000fa42 <__aeabi_dsub+0x9a>
1000fbca:	2301      	movs	r3, #1
1000fbcc:	425b      	negs	r3, r3
1000fbce:	4698      	mov	r8, r3
1000fbd0:	44c4      	add	ip, r8
1000fbd2:	4663      	mov	r3, ip
1000fbd4:	2b00      	cmp	r3, #0
1000fbd6:	d172      	bne.n	1000fcbe <__aeabi_dsub+0x316>
1000fbd8:	1a69      	subs	r1, r5, r1
1000fbda:	428d      	cmp	r5, r1
1000fbdc:	419b      	sbcs	r3, r3
1000fbde:	1a3f      	subs	r7, r7, r0
1000fbe0:	425b      	negs	r3, r3
1000fbe2:	1aff      	subs	r7, r7, r3
1000fbe4:	000d      	movs	r5, r1
1000fbe6:	e768      	b.n	1000faba <__aeabi_dsub+0x112>
1000fbe8:	0002      	movs	r2, r0
1000fbea:	430a      	orrs	r2, r1
1000fbec:	d100      	bne.n	1000fbf0 <__aeabi_dsub+0x248>
1000fbee:	e707      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fbf0:	2201      	movs	r2, #1
1000fbf2:	4252      	negs	r2, r2
1000fbf4:	4690      	mov	r8, r2
1000fbf6:	44c4      	add	ip, r8
1000fbf8:	4662      	mov	r2, ip
1000fbfa:	2a00      	cmp	r2, #0
1000fbfc:	d000      	beq.n	1000fc00 <__aeabi_dsub+0x258>
1000fbfe:	e0e6      	b.n	1000fdce <__aeabi_dsub+0x426>
1000fc00:	1869      	adds	r1, r5, r1
1000fc02:	42a9      	cmp	r1, r5
1000fc04:	41b6      	sbcs	r6, r6
1000fc06:	183f      	adds	r7, r7, r0
1000fc08:	4276      	negs	r6, r6
1000fc0a:	19f7      	adds	r7, r6, r7
1000fc0c:	000d      	movs	r5, r1
1000fc0e:	e7ba      	b.n	1000fb86 <__aeabi_dsub+0x1de>
1000fc10:	2e00      	cmp	r6, #0
1000fc12:	d000      	beq.n	1000fc16 <__aeabi_dsub+0x26e>
1000fc14:	e080      	b.n	1000fd18 <__aeabi_dsub+0x370>
1000fc16:	1c62      	adds	r2, r4, #1
1000fc18:	0552      	lsls	r2, r2, #21
1000fc1a:	0d52      	lsrs	r2, r2, #21
1000fc1c:	2a01      	cmp	r2, #1
1000fc1e:	dc00      	bgt.n	1000fc22 <__aeabi_dsub+0x27a>
1000fc20:	e0f9      	b.n	1000fe16 <__aeabi_dsub+0x46e>
1000fc22:	1a6a      	subs	r2, r5, r1
1000fc24:	4691      	mov	r9, r2
1000fc26:	454d      	cmp	r5, r9
1000fc28:	41b6      	sbcs	r6, r6
1000fc2a:	1a3a      	subs	r2, r7, r0
1000fc2c:	4276      	negs	r6, r6
1000fc2e:	1b92      	subs	r2, r2, r6
1000fc30:	4690      	mov	r8, r2
1000fc32:	0212      	lsls	r2, r2, #8
1000fc34:	d400      	bmi.n	1000fc38 <__aeabi_dsub+0x290>
1000fc36:	e099      	b.n	1000fd6c <__aeabi_dsub+0x3c4>
1000fc38:	1b4d      	subs	r5, r1, r5
1000fc3a:	42a9      	cmp	r1, r5
1000fc3c:	4189      	sbcs	r1, r1
1000fc3e:	1bc7      	subs	r7, r0, r7
1000fc40:	4249      	negs	r1, r1
1000fc42:	1a7a      	subs	r2, r7, r1
1000fc44:	4690      	mov	r8, r2
1000fc46:	469a      	mov	sl, r3
1000fc48:	e73c      	b.n	1000fac4 <__aeabi_dsub+0x11c>
1000fc4a:	4652      	mov	r2, sl
1000fc4c:	2301      	movs	r3, #1
1000fc4e:	2500      	movs	r5, #0
1000fc50:	4013      	ands	r3, r2
1000fc52:	2200      	movs	r2, #0
1000fc54:	e6f5      	b.n	1000fa42 <__aeabi_dsub+0x9a>
1000fc56:	0028      	movs	r0, r5
1000fc58:	f000 fbae 	bl	100103b8 <__clzsi2>
1000fc5c:	3020      	adds	r0, #32
1000fc5e:	0003      	movs	r3, r0
1000fc60:	3b08      	subs	r3, #8
1000fc62:	2b1f      	cmp	r3, #31
1000fc64:	dc00      	bgt.n	1000fc68 <__aeabi_dsub+0x2c0>
1000fc66:	e739      	b.n	1000fadc <__aeabi_dsub+0x134>
1000fc68:	002a      	movs	r2, r5
1000fc6a:	3828      	subs	r0, #40	; 0x28
1000fc6c:	4082      	lsls	r2, r0
1000fc6e:	2500      	movs	r5, #0
1000fc70:	429c      	cmp	r4, r3
1000fc72:	dc00      	bgt.n	1000fc76 <__aeabi_dsub+0x2ce>
1000fc74:	e73e      	b.n	1000faf4 <__aeabi_dsub+0x14c>
1000fc76:	4f26      	ldr	r7, [pc, #152]	; (1000fd10 <__aeabi_dsub+0x368>)
1000fc78:	1ae4      	subs	r4, r4, r3
1000fc7a:	4017      	ands	r7, r2
1000fc7c:	e6c0      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fc7e:	4301      	orrs	r1, r0
1000fc80:	1e48      	subs	r0, r1, #1
1000fc82:	4181      	sbcs	r1, r0
1000fc84:	2200      	movs	r2, #0
1000fc86:	b2c9      	uxtb	r1, r1
1000fc88:	e710      	b.n	1000faac <__aeabi_dsub+0x104>
1000fc8a:	2e00      	cmp	r6, #0
1000fc8c:	d000      	beq.n	1000fc90 <__aeabi_dsub+0x2e8>
1000fc8e:	e0f1      	b.n	1000fe74 <__aeabi_dsub+0x4cc>
1000fc90:	1c62      	adds	r2, r4, #1
1000fc92:	4694      	mov	ip, r2
1000fc94:	0552      	lsls	r2, r2, #21
1000fc96:	0d52      	lsrs	r2, r2, #21
1000fc98:	2a01      	cmp	r2, #1
1000fc9a:	dc00      	bgt.n	1000fc9e <__aeabi_dsub+0x2f6>
1000fc9c:	e0a0      	b.n	1000fde0 <__aeabi_dsub+0x438>
1000fc9e:	4a1b      	ldr	r2, [pc, #108]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fca0:	4594      	cmp	ip, r2
1000fca2:	d100      	bne.n	1000fca6 <__aeabi_dsub+0x2fe>
1000fca4:	e0c5      	b.n	1000fe32 <__aeabi_dsub+0x48a>
1000fca6:	1869      	adds	r1, r5, r1
1000fca8:	42a9      	cmp	r1, r5
1000fcaa:	4192      	sbcs	r2, r2
1000fcac:	183f      	adds	r7, r7, r0
1000fcae:	4252      	negs	r2, r2
1000fcb0:	19d2      	adds	r2, r2, r7
1000fcb2:	0849      	lsrs	r1, r1, #1
1000fcb4:	07d5      	lsls	r5, r2, #31
1000fcb6:	430d      	orrs	r5, r1
1000fcb8:	0857      	lsrs	r7, r2, #1
1000fcba:	4664      	mov	r4, ip
1000fcbc:	e6a0      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fcbe:	4b13      	ldr	r3, [pc, #76]	; (1000fd0c <__aeabi_dsub+0x364>)
1000fcc0:	429c      	cmp	r4, r3
1000fcc2:	d000      	beq.n	1000fcc6 <__aeabi_dsub+0x31e>
1000fcc4:	e6d9      	b.n	1000fa7a <__aeabi_dsub+0xd2>
1000fcc6:	e69b      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fcc8:	0011      	movs	r1, r2
1000fcca:	3c1f      	subs	r4, #31
1000fccc:	40e1      	lsrs	r1, r4
1000fcce:	000c      	movs	r4, r1
1000fcd0:	2b20      	cmp	r3, #32
1000fcd2:	d100      	bne.n	1000fcd6 <__aeabi_dsub+0x32e>
1000fcd4:	e080      	b.n	1000fdd8 <__aeabi_dsub+0x430>
1000fcd6:	2140      	movs	r1, #64	; 0x40
1000fcd8:	1acb      	subs	r3, r1, r3
1000fcda:	409a      	lsls	r2, r3
1000fcdc:	4315      	orrs	r5, r2
1000fcde:	1e6a      	subs	r2, r5, #1
1000fce0:	4195      	sbcs	r5, r2
1000fce2:	2700      	movs	r7, #0
1000fce4:	4325      	orrs	r5, r4
1000fce6:	2400      	movs	r4, #0
1000fce8:	e71f      	b.n	1000fb2a <__aeabi_dsub+0x182>
1000fcea:	4663      	mov	r3, ip
1000fcec:	0002      	movs	r2, r0
1000fcee:	3b20      	subs	r3, #32
1000fcf0:	40da      	lsrs	r2, r3
1000fcf2:	4663      	mov	r3, ip
1000fcf4:	2b20      	cmp	r3, #32
1000fcf6:	d071      	beq.n	1000fddc <__aeabi_dsub+0x434>
1000fcf8:	2340      	movs	r3, #64	; 0x40
1000fcfa:	4666      	mov	r6, ip
1000fcfc:	1b9b      	subs	r3, r3, r6
1000fcfe:	4098      	lsls	r0, r3
1000fd00:	4301      	orrs	r1, r0
1000fd02:	1e48      	subs	r0, r1, #1
1000fd04:	4181      	sbcs	r1, r0
1000fd06:	4311      	orrs	r1, r2
1000fd08:	2200      	movs	r2, #0
1000fd0a:	e6cf      	b.n	1000faac <__aeabi_dsub+0x104>
1000fd0c:	000007ff 	.word	0x000007ff
1000fd10:	ff7fffff 	.word	0xff7fffff
1000fd14:	800fffff 	.word	0x800fffff
1000fd18:	2c00      	cmp	r4, #0
1000fd1a:	d048      	beq.n	1000fdae <__aeabi_dsub+0x406>
1000fd1c:	4cca      	ldr	r4, [pc, #808]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fd1e:	42a2      	cmp	r2, r4
1000fd20:	d100      	bne.n	1000fd24 <__aeabi_dsub+0x37c>
1000fd22:	e0a2      	b.n	1000fe6a <__aeabi_dsub+0x4c2>
1000fd24:	4274      	negs	r4, r6
1000fd26:	46a1      	mov	r9, r4
1000fd28:	2480      	movs	r4, #128	; 0x80
1000fd2a:	0424      	lsls	r4, r4, #16
1000fd2c:	4327      	orrs	r7, r4
1000fd2e:	464c      	mov	r4, r9
1000fd30:	2c38      	cmp	r4, #56	; 0x38
1000fd32:	dd00      	ble.n	1000fd36 <__aeabi_dsub+0x38e>
1000fd34:	e0db      	b.n	1000feee <__aeabi_dsub+0x546>
1000fd36:	2c1f      	cmp	r4, #31
1000fd38:	dd00      	ble.n	1000fd3c <__aeabi_dsub+0x394>
1000fd3a:	e144      	b.n	1000ffc6 <__aeabi_dsub+0x61e>
1000fd3c:	464e      	mov	r6, r9
1000fd3e:	2420      	movs	r4, #32
1000fd40:	1ba4      	subs	r4, r4, r6
1000fd42:	003e      	movs	r6, r7
1000fd44:	40a6      	lsls	r6, r4
1000fd46:	46a2      	mov	sl, r4
1000fd48:	46b0      	mov	r8, r6
1000fd4a:	464c      	mov	r4, r9
1000fd4c:	002e      	movs	r6, r5
1000fd4e:	40e6      	lsrs	r6, r4
1000fd50:	46b4      	mov	ip, r6
1000fd52:	4646      	mov	r6, r8
1000fd54:	4664      	mov	r4, ip
1000fd56:	4326      	orrs	r6, r4
1000fd58:	4654      	mov	r4, sl
1000fd5a:	40a5      	lsls	r5, r4
1000fd5c:	1e6c      	subs	r4, r5, #1
1000fd5e:	41a5      	sbcs	r5, r4
1000fd60:	0034      	movs	r4, r6
1000fd62:	432c      	orrs	r4, r5
1000fd64:	464d      	mov	r5, r9
1000fd66:	40ef      	lsrs	r7, r5
1000fd68:	1b0d      	subs	r5, r1, r4
1000fd6a:	e028      	b.n	1000fdbe <__aeabi_dsub+0x416>
1000fd6c:	464a      	mov	r2, r9
1000fd6e:	4643      	mov	r3, r8
1000fd70:	464d      	mov	r5, r9
1000fd72:	431a      	orrs	r2, r3
1000fd74:	d000      	beq.n	1000fd78 <__aeabi_dsub+0x3d0>
1000fd76:	e6a5      	b.n	1000fac4 <__aeabi_dsub+0x11c>
1000fd78:	2300      	movs	r3, #0
1000fd7a:	2400      	movs	r4, #0
1000fd7c:	2500      	movs	r5, #0
1000fd7e:	e6de      	b.n	1000fb3e <__aeabi_dsub+0x196>
1000fd80:	2a1f      	cmp	r2, #31
1000fd82:	dc5a      	bgt.n	1000fe3a <__aeabi_dsub+0x492>
1000fd84:	4666      	mov	r6, ip
1000fd86:	2220      	movs	r2, #32
1000fd88:	1b92      	subs	r2, r2, r6
1000fd8a:	0006      	movs	r6, r0
1000fd8c:	4096      	lsls	r6, r2
1000fd8e:	4691      	mov	r9, r2
1000fd90:	46b0      	mov	r8, r6
1000fd92:	4662      	mov	r2, ip
1000fd94:	000e      	movs	r6, r1
1000fd96:	40d6      	lsrs	r6, r2
1000fd98:	4642      	mov	r2, r8
1000fd9a:	4316      	orrs	r6, r2
1000fd9c:	464a      	mov	r2, r9
1000fd9e:	4091      	lsls	r1, r2
1000fda0:	1e4a      	subs	r2, r1, #1
1000fda2:	4191      	sbcs	r1, r2
1000fda4:	0002      	movs	r2, r0
1000fda6:	4660      	mov	r0, ip
1000fda8:	4331      	orrs	r1, r6
1000fdaa:	40c2      	lsrs	r2, r0
1000fdac:	e6e4      	b.n	1000fb78 <__aeabi_dsub+0x1d0>
1000fdae:	003c      	movs	r4, r7
1000fdb0:	432c      	orrs	r4, r5
1000fdb2:	d05a      	beq.n	1000fe6a <__aeabi_dsub+0x4c2>
1000fdb4:	43f4      	mvns	r4, r6
1000fdb6:	46a1      	mov	r9, r4
1000fdb8:	2c00      	cmp	r4, #0
1000fdba:	d152      	bne.n	1000fe62 <__aeabi_dsub+0x4ba>
1000fdbc:	1b4d      	subs	r5, r1, r5
1000fdbe:	42a9      	cmp	r1, r5
1000fdc0:	4189      	sbcs	r1, r1
1000fdc2:	1bc7      	subs	r7, r0, r7
1000fdc4:	4249      	negs	r1, r1
1000fdc6:	1a7f      	subs	r7, r7, r1
1000fdc8:	0014      	movs	r4, r2
1000fdca:	469a      	mov	sl, r3
1000fdcc:	e675      	b.n	1000faba <__aeabi_dsub+0x112>
1000fdce:	4a9e      	ldr	r2, [pc, #632]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fdd0:	4294      	cmp	r4, r2
1000fdd2:	d000      	beq.n	1000fdd6 <__aeabi_dsub+0x42e>
1000fdd4:	e6c7      	b.n	1000fb66 <__aeabi_dsub+0x1be>
1000fdd6:	e613      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fdd8:	2200      	movs	r2, #0
1000fdda:	e77f      	b.n	1000fcdc <__aeabi_dsub+0x334>
1000fddc:	2000      	movs	r0, #0
1000fdde:	e78f      	b.n	1000fd00 <__aeabi_dsub+0x358>
1000fde0:	2c00      	cmp	r4, #0
1000fde2:	d000      	beq.n	1000fde6 <__aeabi_dsub+0x43e>
1000fde4:	e0c8      	b.n	1000ff78 <__aeabi_dsub+0x5d0>
1000fde6:	003b      	movs	r3, r7
1000fde8:	432b      	orrs	r3, r5
1000fdea:	d100      	bne.n	1000fdee <__aeabi_dsub+0x446>
1000fdec:	e10f      	b.n	1001000e <__aeabi_dsub+0x666>
1000fdee:	0003      	movs	r3, r0
1000fdf0:	430b      	orrs	r3, r1
1000fdf2:	d100      	bne.n	1000fdf6 <__aeabi_dsub+0x44e>
1000fdf4:	e604      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fdf6:	1869      	adds	r1, r5, r1
1000fdf8:	42a9      	cmp	r1, r5
1000fdfa:	419b      	sbcs	r3, r3
1000fdfc:	183f      	adds	r7, r7, r0
1000fdfe:	425b      	negs	r3, r3
1000fe00:	19df      	adds	r7, r3, r7
1000fe02:	023b      	lsls	r3, r7, #8
1000fe04:	d400      	bmi.n	1000fe08 <__aeabi_dsub+0x460>
1000fe06:	e11a      	b.n	1001003e <__aeabi_dsub+0x696>
1000fe08:	4b90      	ldr	r3, [pc, #576]	; (1001004c <__aeabi_dsub+0x6a4>)
1000fe0a:	000d      	movs	r5, r1
1000fe0c:	401f      	ands	r7, r3
1000fe0e:	4664      	mov	r4, ip
1000fe10:	e5f6      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fe12:	469a      	mov	sl, r3
1000fe14:	e689      	b.n	1000fb2a <__aeabi_dsub+0x182>
1000fe16:	003a      	movs	r2, r7
1000fe18:	432a      	orrs	r2, r5
1000fe1a:	2c00      	cmp	r4, #0
1000fe1c:	d15c      	bne.n	1000fed8 <__aeabi_dsub+0x530>
1000fe1e:	2a00      	cmp	r2, #0
1000fe20:	d175      	bne.n	1000ff0e <__aeabi_dsub+0x566>
1000fe22:	0002      	movs	r2, r0
1000fe24:	430a      	orrs	r2, r1
1000fe26:	d100      	bne.n	1000fe2a <__aeabi_dsub+0x482>
1000fe28:	e0ca      	b.n	1000ffc0 <__aeabi_dsub+0x618>
1000fe2a:	0007      	movs	r7, r0
1000fe2c:	000d      	movs	r5, r1
1000fe2e:	469a      	mov	sl, r3
1000fe30:	e5e6      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fe32:	4664      	mov	r4, ip
1000fe34:	2200      	movs	r2, #0
1000fe36:	2500      	movs	r5, #0
1000fe38:	e681      	b.n	1000fb3e <__aeabi_dsub+0x196>
1000fe3a:	4662      	mov	r2, ip
1000fe3c:	0006      	movs	r6, r0
1000fe3e:	3a20      	subs	r2, #32
1000fe40:	40d6      	lsrs	r6, r2
1000fe42:	4662      	mov	r2, ip
1000fe44:	46b0      	mov	r8, r6
1000fe46:	2a20      	cmp	r2, #32
1000fe48:	d100      	bne.n	1000fe4c <__aeabi_dsub+0x4a4>
1000fe4a:	e0b7      	b.n	1000ffbc <__aeabi_dsub+0x614>
1000fe4c:	2240      	movs	r2, #64	; 0x40
1000fe4e:	4666      	mov	r6, ip
1000fe50:	1b92      	subs	r2, r2, r6
1000fe52:	4090      	lsls	r0, r2
1000fe54:	4301      	orrs	r1, r0
1000fe56:	4642      	mov	r2, r8
1000fe58:	1e48      	subs	r0, r1, #1
1000fe5a:	4181      	sbcs	r1, r0
1000fe5c:	4311      	orrs	r1, r2
1000fe5e:	2200      	movs	r2, #0
1000fe60:	e68a      	b.n	1000fb78 <__aeabi_dsub+0x1d0>
1000fe62:	4c79      	ldr	r4, [pc, #484]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fe64:	42a2      	cmp	r2, r4
1000fe66:	d000      	beq.n	1000fe6a <__aeabi_dsub+0x4c2>
1000fe68:	e761      	b.n	1000fd2e <__aeabi_dsub+0x386>
1000fe6a:	0007      	movs	r7, r0
1000fe6c:	000d      	movs	r5, r1
1000fe6e:	0014      	movs	r4, r2
1000fe70:	469a      	mov	sl, r3
1000fe72:	e5c5      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000fe74:	2c00      	cmp	r4, #0
1000fe76:	d141      	bne.n	1000fefc <__aeabi_dsub+0x554>
1000fe78:	003c      	movs	r4, r7
1000fe7a:	432c      	orrs	r4, r5
1000fe7c:	d078      	beq.n	1000ff70 <__aeabi_dsub+0x5c8>
1000fe7e:	43f4      	mvns	r4, r6
1000fe80:	46a1      	mov	r9, r4
1000fe82:	2c00      	cmp	r4, #0
1000fe84:	d020      	beq.n	1000fec8 <__aeabi_dsub+0x520>
1000fe86:	4c70      	ldr	r4, [pc, #448]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fe88:	42a2      	cmp	r2, r4
1000fe8a:	d071      	beq.n	1000ff70 <__aeabi_dsub+0x5c8>
1000fe8c:	464c      	mov	r4, r9
1000fe8e:	2c38      	cmp	r4, #56	; 0x38
1000fe90:	dd00      	ble.n	1000fe94 <__aeabi_dsub+0x4ec>
1000fe92:	e0b2      	b.n	1000fffa <__aeabi_dsub+0x652>
1000fe94:	2c1f      	cmp	r4, #31
1000fe96:	dd00      	ble.n	1000fe9a <__aeabi_dsub+0x4f2>
1000fe98:	e0bc      	b.n	10010014 <__aeabi_dsub+0x66c>
1000fe9a:	2620      	movs	r6, #32
1000fe9c:	1b34      	subs	r4, r6, r4
1000fe9e:	46a2      	mov	sl, r4
1000fea0:	003c      	movs	r4, r7
1000fea2:	4656      	mov	r6, sl
1000fea4:	40b4      	lsls	r4, r6
1000fea6:	464e      	mov	r6, r9
1000fea8:	46a0      	mov	r8, r4
1000feaa:	002c      	movs	r4, r5
1000feac:	40f4      	lsrs	r4, r6
1000feae:	46a4      	mov	ip, r4
1000feb0:	4644      	mov	r4, r8
1000feb2:	4666      	mov	r6, ip
1000feb4:	4334      	orrs	r4, r6
1000feb6:	46a4      	mov	ip, r4
1000feb8:	4654      	mov	r4, sl
1000feba:	40a5      	lsls	r5, r4
1000febc:	4664      	mov	r4, ip
1000febe:	1e6e      	subs	r6, r5, #1
1000fec0:	41b5      	sbcs	r5, r6
1000fec2:	4325      	orrs	r5, r4
1000fec4:	464c      	mov	r4, r9
1000fec6:	40e7      	lsrs	r7, r4
1000fec8:	186d      	adds	r5, r5, r1
1000feca:	428d      	cmp	r5, r1
1000fecc:	4189      	sbcs	r1, r1
1000fece:	183f      	adds	r7, r7, r0
1000fed0:	4249      	negs	r1, r1
1000fed2:	19cf      	adds	r7, r1, r7
1000fed4:	0014      	movs	r4, r2
1000fed6:	e656      	b.n	1000fb86 <__aeabi_dsub+0x1de>
1000fed8:	2a00      	cmp	r2, #0
1000feda:	d12f      	bne.n	1000ff3c <__aeabi_dsub+0x594>
1000fedc:	0002      	movs	r2, r0
1000fede:	430a      	orrs	r2, r1
1000fee0:	d100      	bne.n	1000fee4 <__aeabi_dsub+0x53c>
1000fee2:	e084      	b.n	1000ffee <__aeabi_dsub+0x646>
1000fee4:	0007      	movs	r7, r0
1000fee6:	000d      	movs	r5, r1
1000fee8:	469a      	mov	sl, r3
1000feea:	4c57      	ldr	r4, [pc, #348]	; (10010048 <__aeabi_dsub+0x6a0>)
1000feec:	e588      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000feee:	433d      	orrs	r5, r7
1000fef0:	1e6f      	subs	r7, r5, #1
1000fef2:	41bd      	sbcs	r5, r7
1000fef4:	b2ec      	uxtb	r4, r5
1000fef6:	2700      	movs	r7, #0
1000fef8:	1b0d      	subs	r5, r1, r4
1000fefa:	e760      	b.n	1000fdbe <__aeabi_dsub+0x416>
1000fefc:	4c52      	ldr	r4, [pc, #328]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fefe:	42a2      	cmp	r2, r4
1000ff00:	d036      	beq.n	1000ff70 <__aeabi_dsub+0x5c8>
1000ff02:	4274      	negs	r4, r6
1000ff04:	2680      	movs	r6, #128	; 0x80
1000ff06:	0436      	lsls	r6, r6, #16
1000ff08:	46a1      	mov	r9, r4
1000ff0a:	4337      	orrs	r7, r6
1000ff0c:	e7be      	b.n	1000fe8c <__aeabi_dsub+0x4e4>
1000ff0e:	0002      	movs	r2, r0
1000ff10:	430a      	orrs	r2, r1
1000ff12:	d100      	bne.n	1000ff16 <__aeabi_dsub+0x56e>
1000ff14:	e574      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ff16:	1a6a      	subs	r2, r5, r1
1000ff18:	4690      	mov	r8, r2
1000ff1a:	4545      	cmp	r5, r8
1000ff1c:	41b6      	sbcs	r6, r6
1000ff1e:	1a3a      	subs	r2, r7, r0
1000ff20:	4276      	negs	r6, r6
1000ff22:	1b92      	subs	r2, r2, r6
1000ff24:	4694      	mov	ip, r2
1000ff26:	0212      	lsls	r2, r2, #8
1000ff28:	d400      	bmi.n	1000ff2c <__aeabi_dsub+0x584>
1000ff2a:	e5f7      	b.n	1000fb1c <__aeabi_dsub+0x174>
1000ff2c:	1b4d      	subs	r5, r1, r5
1000ff2e:	42a9      	cmp	r1, r5
1000ff30:	4189      	sbcs	r1, r1
1000ff32:	1bc7      	subs	r7, r0, r7
1000ff34:	4249      	negs	r1, r1
1000ff36:	1a7f      	subs	r7, r7, r1
1000ff38:	469a      	mov	sl, r3
1000ff3a:	e561      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ff3c:	0002      	movs	r2, r0
1000ff3e:	430a      	orrs	r2, r1
1000ff40:	d03a      	beq.n	1000ffb8 <__aeabi_dsub+0x610>
1000ff42:	08ed      	lsrs	r5, r5, #3
1000ff44:	077c      	lsls	r4, r7, #29
1000ff46:	432c      	orrs	r4, r5
1000ff48:	2580      	movs	r5, #128	; 0x80
1000ff4a:	08fa      	lsrs	r2, r7, #3
1000ff4c:	032d      	lsls	r5, r5, #12
1000ff4e:	422a      	tst	r2, r5
1000ff50:	d008      	beq.n	1000ff64 <__aeabi_dsub+0x5bc>
1000ff52:	08c7      	lsrs	r7, r0, #3
1000ff54:	422f      	tst	r7, r5
1000ff56:	d105      	bne.n	1000ff64 <__aeabi_dsub+0x5bc>
1000ff58:	0745      	lsls	r5, r0, #29
1000ff5a:	002c      	movs	r4, r5
1000ff5c:	003a      	movs	r2, r7
1000ff5e:	469a      	mov	sl, r3
1000ff60:	08c9      	lsrs	r1, r1, #3
1000ff62:	430c      	orrs	r4, r1
1000ff64:	0f67      	lsrs	r7, r4, #29
1000ff66:	00d2      	lsls	r2, r2, #3
1000ff68:	00e5      	lsls	r5, r4, #3
1000ff6a:	4317      	orrs	r7, r2
1000ff6c:	4c36      	ldr	r4, [pc, #216]	; (10010048 <__aeabi_dsub+0x6a0>)
1000ff6e:	e547      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ff70:	0007      	movs	r7, r0
1000ff72:	000d      	movs	r5, r1
1000ff74:	0014      	movs	r4, r2
1000ff76:	e543      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ff78:	003a      	movs	r2, r7
1000ff7a:	432a      	orrs	r2, r5
1000ff7c:	d043      	beq.n	10010006 <__aeabi_dsub+0x65e>
1000ff7e:	0002      	movs	r2, r0
1000ff80:	430a      	orrs	r2, r1
1000ff82:	d019      	beq.n	1000ffb8 <__aeabi_dsub+0x610>
1000ff84:	08ed      	lsrs	r5, r5, #3
1000ff86:	077c      	lsls	r4, r7, #29
1000ff88:	432c      	orrs	r4, r5
1000ff8a:	2580      	movs	r5, #128	; 0x80
1000ff8c:	08fa      	lsrs	r2, r7, #3
1000ff8e:	032d      	lsls	r5, r5, #12
1000ff90:	422a      	tst	r2, r5
1000ff92:	d007      	beq.n	1000ffa4 <__aeabi_dsub+0x5fc>
1000ff94:	08c6      	lsrs	r6, r0, #3
1000ff96:	422e      	tst	r6, r5
1000ff98:	d104      	bne.n	1000ffa4 <__aeabi_dsub+0x5fc>
1000ff9a:	0747      	lsls	r7, r0, #29
1000ff9c:	003c      	movs	r4, r7
1000ff9e:	0032      	movs	r2, r6
1000ffa0:	08c9      	lsrs	r1, r1, #3
1000ffa2:	430c      	orrs	r4, r1
1000ffa4:	00d7      	lsls	r7, r2, #3
1000ffa6:	0f62      	lsrs	r2, r4, #29
1000ffa8:	00e5      	lsls	r5, r4, #3
1000ffaa:	4317      	orrs	r7, r2
1000ffac:	469a      	mov	sl, r3
1000ffae:	4c26      	ldr	r4, [pc, #152]	; (10010048 <__aeabi_dsub+0x6a0>)
1000ffb0:	e526      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ffb2:	2200      	movs	r2, #0
1000ffb4:	2500      	movs	r5, #0
1000ffb6:	e544      	b.n	1000fa42 <__aeabi_dsub+0x9a>
1000ffb8:	4c23      	ldr	r4, [pc, #140]	; (10010048 <__aeabi_dsub+0x6a0>)
1000ffba:	e521      	b.n	1000fa00 <__aeabi_dsub+0x58>
1000ffbc:	2000      	movs	r0, #0
1000ffbe:	e749      	b.n	1000fe54 <__aeabi_dsub+0x4ac>
1000ffc0:	2300      	movs	r3, #0
1000ffc2:	2500      	movs	r5, #0
1000ffc4:	e5bb      	b.n	1000fb3e <__aeabi_dsub+0x196>
1000ffc6:	464c      	mov	r4, r9
1000ffc8:	003e      	movs	r6, r7
1000ffca:	3c20      	subs	r4, #32
1000ffcc:	40e6      	lsrs	r6, r4
1000ffce:	464c      	mov	r4, r9
1000ffd0:	46b4      	mov	ip, r6
1000ffd2:	2c20      	cmp	r4, #32
1000ffd4:	d031      	beq.n	1001003a <__aeabi_dsub+0x692>
1000ffd6:	2440      	movs	r4, #64	; 0x40
1000ffd8:	464e      	mov	r6, r9
1000ffda:	1ba6      	subs	r6, r4, r6
1000ffdc:	40b7      	lsls	r7, r6
1000ffde:	433d      	orrs	r5, r7
1000ffe0:	1e6c      	subs	r4, r5, #1
1000ffe2:	41a5      	sbcs	r5, r4
1000ffe4:	4664      	mov	r4, ip
1000ffe6:	432c      	orrs	r4, r5
1000ffe8:	2700      	movs	r7, #0
1000ffea:	1b0d      	subs	r5, r1, r4
1000ffec:	e6e7      	b.n	1000fdbe <__aeabi_dsub+0x416>
1000ffee:	2280      	movs	r2, #128	; 0x80
1000fff0:	2300      	movs	r3, #0
1000fff2:	0312      	lsls	r2, r2, #12
1000fff4:	4c14      	ldr	r4, [pc, #80]	; (10010048 <__aeabi_dsub+0x6a0>)
1000fff6:	2500      	movs	r5, #0
1000fff8:	e5a1      	b.n	1000fb3e <__aeabi_dsub+0x196>
1000fffa:	433d      	orrs	r5, r7
1000fffc:	1e6f      	subs	r7, r5, #1
1000fffe:	41bd      	sbcs	r5, r7
10010000:	2700      	movs	r7, #0
10010002:	b2ed      	uxtb	r5, r5
10010004:	e760      	b.n	1000fec8 <__aeabi_dsub+0x520>
10010006:	0007      	movs	r7, r0
10010008:	000d      	movs	r5, r1
1001000a:	4c0f      	ldr	r4, [pc, #60]	; (10010048 <__aeabi_dsub+0x6a0>)
1001000c:	e4f8      	b.n	1000fa00 <__aeabi_dsub+0x58>
1001000e:	0007      	movs	r7, r0
10010010:	000d      	movs	r5, r1
10010012:	e4f5      	b.n	1000fa00 <__aeabi_dsub+0x58>
10010014:	464e      	mov	r6, r9
10010016:	003c      	movs	r4, r7
10010018:	3e20      	subs	r6, #32
1001001a:	40f4      	lsrs	r4, r6
1001001c:	46a0      	mov	r8, r4
1001001e:	464c      	mov	r4, r9
10010020:	2c20      	cmp	r4, #32
10010022:	d00e      	beq.n	10010042 <__aeabi_dsub+0x69a>
10010024:	2440      	movs	r4, #64	; 0x40
10010026:	464e      	mov	r6, r9
10010028:	1ba4      	subs	r4, r4, r6
1001002a:	40a7      	lsls	r7, r4
1001002c:	433d      	orrs	r5, r7
1001002e:	1e6f      	subs	r7, r5, #1
10010030:	41bd      	sbcs	r5, r7
10010032:	4644      	mov	r4, r8
10010034:	2700      	movs	r7, #0
10010036:	4325      	orrs	r5, r4
10010038:	e746      	b.n	1000fec8 <__aeabi_dsub+0x520>
1001003a:	2700      	movs	r7, #0
1001003c:	e7cf      	b.n	1000ffde <__aeabi_dsub+0x636>
1001003e:	000d      	movs	r5, r1
10010040:	e573      	b.n	1000fb2a <__aeabi_dsub+0x182>
10010042:	2700      	movs	r7, #0
10010044:	e7f2      	b.n	1001002c <__aeabi_dsub+0x684>
10010046:	46c0      	nop			; (mov r8, r8)
10010048:	000007ff 	.word	0x000007ff
1001004c:	ff7fffff 	.word	0xff7fffff

10010050 <__aeabi_d2iz>:
10010050:	030b      	lsls	r3, r1, #12
10010052:	b530      	push	{r4, r5, lr}
10010054:	4d13      	ldr	r5, [pc, #76]	; (100100a4 <__aeabi_d2iz+0x54>)
10010056:	0b1a      	lsrs	r2, r3, #12
10010058:	004b      	lsls	r3, r1, #1
1001005a:	0d5b      	lsrs	r3, r3, #21
1001005c:	0fc9      	lsrs	r1, r1, #31
1001005e:	2400      	movs	r4, #0
10010060:	42ab      	cmp	r3, r5
10010062:	dd11      	ble.n	10010088 <__aeabi_d2iz+0x38>
10010064:	4c10      	ldr	r4, [pc, #64]	; (100100a8 <__aeabi_d2iz+0x58>)
10010066:	42a3      	cmp	r3, r4
10010068:	dc10      	bgt.n	1001008c <__aeabi_d2iz+0x3c>
1001006a:	2480      	movs	r4, #128	; 0x80
1001006c:	0364      	lsls	r4, r4, #13
1001006e:	4322      	orrs	r2, r4
10010070:	4c0e      	ldr	r4, [pc, #56]	; (100100ac <__aeabi_d2iz+0x5c>)
10010072:	1ae4      	subs	r4, r4, r3
10010074:	2c1f      	cmp	r4, #31
10010076:	dd0c      	ble.n	10010092 <__aeabi_d2iz+0x42>
10010078:	480d      	ldr	r0, [pc, #52]	; (100100b0 <__aeabi_d2iz+0x60>)
1001007a:	1ac3      	subs	r3, r0, r3
1001007c:	40da      	lsrs	r2, r3
1001007e:	0013      	movs	r3, r2
10010080:	425c      	negs	r4, r3
10010082:	2900      	cmp	r1, #0
10010084:	d100      	bne.n	10010088 <__aeabi_d2iz+0x38>
10010086:	001c      	movs	r4, r3
10010088:	0020      	movs	r0, r4
1001008a:	bd30      	pop	{r4, r5, pc}
1001008c:	4b09      	ldr	r3, [pc, #36]	; (100100b4 <__aeabi_d2iz+0x64>)
1001008e:	18cc      	adds	r4, r1, r3
10010090:	e7fa      	b.n	10010088 <__aeabi_d2iz+0x38>
10010092:	40e0      	lsrs	r0, r4
10010094:	4c08      	ldr	r4, [pc, #32]	; (100100b8 <__aeabi_d2iz+0x68>)
10010096:	46a4      	mov	ip, r4
10010098:	4463      	add	r3, ip
1001009a:	409a      	lsls	r2, r3
1001009c:	0013      	movs	r3, r2
1001009e:	4303      	orrs	r3, r0
100100a0:	e7ee      	b.n	10010080 <__aeabi_d2iz+0x30>
100100a2:	46c0      	nop			; (mov r8, r8)
100100a4:	000003fe 	.word	0x000003fe
100100a8:	0000041d 	.word	0x0000041d
100100ac:	00000433 	.word	0x00000433
100100b0:	00000413 	.word	0x00000413
100100b4:	7fffffff 	.word	0x7fffffff
100100b8:	fffffbed 	.word	0xfffffbed

100100bc <__aeabi_i2d>:
100100bc:	b570      	push	{r4, r5, r6, lr}
100100be:	2800      	cmp	r0, #0
100100c0:	d030      	beq.n	10010124 <__aeabi_i2d+0x68>
100100c2:	17c3      	asrs	r3, r0, #31
100100c4:	18c4      	adds	r4, r0, r3
100100c6:	405c      	eors	r4, r3
100100c8:	0fc5      	lsrs	r5, r0, #31
100100ca:	0020      	movs	r0, r4
100100cc:	f000 f974 	bl	100103b8 <__clzsi2>
100100d0:	4b17      	ldr	r3, [pc, #92]	; (10010130 <__aeabi_i2d+0x74>)
100100d2:	4a18      	ldr	r2, [pc, #96]	; (10010134 <__aeabi_i2d+0x78>)
100100d4:	1a1b      	subs	r3, r3, r0
100100d6:	1ad2      	subs	r2, r2, r3
100100d8:	2a1f      	cmp	r2, #31
100100da:	dd18      	ble.n	1001010e <__aeabi_i2d+0x52>
100100dc:	4a16      	ldr	r2, [pc, #88]	; (10010138 <__aeabi_i2d+0x7c>)
100100de:	1ad2      	subs	r2, r2, r3
100100e0:	4094      	lsls	r4, r2
100100e2:	2200      	movs	r2, #0
100100e4:	0324      	lsls	r4, r4, #12
100100e6:	055b      	lsls	r3, r3, #21
100100e8:	0b24      	lsrs	r4, r4, #12
100100ea:	0d5b      	lsrs	r3, r3, #21
100100ec:	2100      	movs	r1, #0
100100ee:	0010      	movs	r0, r2
100100f0:	0324      	lsls	r4, r4, #12
100100f2:	0d0a      	lsrs	r2, r1, #20
100100f4:	0512      	lsls	r2, r2, #20
100100f6:	0b24      	lsrs	r4, r4, #12
100100f8:	4314      	orrs	r4, r2
100100fa:	4a10      	ldr	r2, [pc, #64]	; (1001013c <__aeabi_i2d+0x80>)
100100fc:	051b      	lsls	r3, r3, #20
100100fe:	4014      	ands	r4, r2
10010100:	431c      	orrs	r4, r3
10010102:	0064      	lsls	r4, r4, #1
10010104:	07ed      	lsls	r5, r5, #31
10010106:	0864      	lsrs	r4, r4, #1
10010108:	432c      	orrs	r4, r5
1001010a:	0021      	movs	r1, r4
1001010c:	bd70      	pop	{r4, r5, r6, pc}
1001010e:	0021      	movs	r1, r4
10010110:	4091      	lsls	r1, r2
10010112:	000a      	movs	r2, r1
10010114:	210b      	movs	r1, #11
10010116:	1a08      	subs	r0, r1, r0
10010118:	40c4      	lsrs	r4, r0
1001011a:	055b      	lsls	r3, r3, #21
1001011c:	0324      	lsls	r4, r4, #12
1001011e:	0b24      	lsrs	r4, r4, #12
10010120:	0d5b      	lsrs	r3, r3, #21
10010122:	e7e3      	b.n	100100ec <__aeabi_i2d+0x30>
10010124:	2500      	movs	r5, #0
10010126:	2300      	movs	r3, #0
10010128:	2400      	movs	r4, #0
1001012a:	2200      	movs	r2, #0
1001012c:	e7de      	b.n	100100ec <__aeabi_i2d+0x30>
1001012e:	46c0      	nop			; (mov r8, r8)
10010130:	0000041e 	.word	0x0000041e
10010134:	00000433 	.word	0x00000433
10010138:	00000413 	.word	0x00000413
1001013c:	800fffff 	.word	0x800fffff

10010140 <__aeabi_ui2d>:
10010140:	b570      	push	{r4, r5, r6, lr}
10010142:	1e05      	subs	r5, r0, #0
10010144:	d028      	beq.n	10010198 <__aeabi_ui2d+0x58>
10010146:	f000 f937 	bl	100103b8 <__clzsi2>
1001014a:	4b15      	ldr	r3, [pc, #84]	; (100101a0 <__aeabi_ui2d+0x60>)
1001014c:	4a15      	ldr	r2, [pc, #84]	; (100101a4 <__aeabi_ui2d+0x64>)
1001014e:	1a1b      	subs	r3, r3, r0
10010150:	1ad2      	subs	r2, r2, r3
10010152:	2a1f      	cmp	r2, #31
10010154:	dd16      	ble.n	10010184 <__aeabi_ui2d+0x44>
10010156:	002c      	movs	r4, r5
10010158:	4a13      	ldr	r2, [pc, #76]	; (100101a8 <__aeabi_ui2d+0x68>)
1001015a:	2500      	movs	r5, #0
1001015c:	1ad2      	subs	r2, r2, r3
1001015e:	4094      	lsls	r4, r2
10010160:	055a      	lsls	r2, r3, #21
10010162:	0324      	lsls	r4, r4, #12
10010164:	0b24      	lsrs	r4, r4, #12
10010166:	0d52      	lsrs	r2, r2, #21
10010168:	2100      	movs	r1, #0
1001016a:	0324      	lsls	r4, r4, #12
1001016c:	0d0b      	lsrs	r3, r1, #20
1001016e:	0b24      	lsrs	r4, r4, #12
10010170:	051b      	lsls	r3, r3, #20
10010172:	4323      	orrs	r3, r4
10010174:	4c0d      	ldr	r4, [pc, #52]	; (100101ac <__aeabi_ui2d+0x6c>)
10010176:	0512      	lsls	r2, r2, #20
10010178:	4023      	ands	r3, r4
1001017a:	4313      	orrs	r3, r2
1001017c:	005b      	lsls	r3, r3, #1
1001017e:	0028      	movs	r0, r5
10010180:	0859      	lsrs	r1, r3, #1
10010182:	bd70      	pop	{r4, r5, r6, pc}
10010184:	210b      	movs	r1, #11
10010186:	002c      	movs	r4, r5
10010188:	1a08      	subs	r0, r1, r0
1001018a:	40c4      	lsrs	r4, r0
1001018c:	4095      	lsls	r5, r2
1001018e:	0324      	lsls	r4, r4, #12
10010190:	055a      	lsls	r2, r3, #21
10010192:	0b24      	lsrs	r4, r4, #12
10010194:	0d52      	lsrs	r2, r2, #21
10010196:	e7e7      	b.n	10010168 <__aeabi_ui2d+0x28>
10010198:	2200      	movs	r2, #0
1001019a:	2400      	movs	r4, #0
1001019c:	e7e4      	b.n	10010168 <__aeabi_ui2d+0x28>
1001019e:	46c0      	nop			; (mov r8, r8)
100101a0:	0000041e 	.word	0x0000041e
100101a4:	00000433 	.word	0x00000433
100101a8:	00000413 	.word	0x00000413
100101ac:	800fffff 	.word	0x800fffff

100101b0 <__aeabi_d2f>:
100101b0:	004b      	lsls	r3, r1, #1
100101b2:	b570      	push	{r4, r5, r6, lr}
100101b4:	0d5e      	lsrs	r6, r3, #21
100101b6:	030c      	lsls	r4, r1, #12
100101b8:	1c75      	adds	r5, r6, #1
100101ba:	0a64      	lsrs	r4, r4, #9
100101bc:	0f42      	lsrs	r2, r0, #29
100101be:	056d      	lsls	r5, r5, #21
100101c0:	4322      	orrs	r2, r4
100101c2:	0fc9      	lsrs	r1, r1, #31
100101c4:	00c4      	lsls	r4, r0, #3
100101c6:	0d6d      	lsrs	r5, r5, #21
100101c8:	2d01      	cmp	r5, #1
100101ca:	dd2a      	ble.n	10010222 <__aeabi_d2f+0x72>
100101cc:	4b3b      	ldr	r3, [pc, #236]	; (100102bc <__aeabi_d2f+0x10c>)
100101ce:	18f3      	adds	r3, r6, r3
100101d0:	2bfe      	cmp	r3, #254	; 0xfe
100101d2:	dc1a      	bgt.n	1001020a <__aeabi_d2f+0x5a>
100101d4:	2b00      	cmp	r3, #0
100101d6:	dd42      	ble.n	1001025e <__aeabi_d2f+0xae>
100101d8:	0180      	lsls	r0, r0, #6
100101da:	1e45      	subs	r5, r0, #1
100101dc:	41a8      	sbcs	r0, r5
100101de:	00d2      	lsls	r2, r2, #3
100101e0:	4310      	orrs	r0, r2
100101e2:	0f62      	lsrs	r2, r4, #29
100101e4:	4302      	orrs	r2, r0
100101e6:	0750      	lsls	r0, r2, #29
100101e8:	d004      	beq.n	100101f4 <__aeabi_d2f+0x44>
100101ea:	200f      	movs	r0, #15
100101ec:	4010      	ands	r0, r2
100101ee:	2804      	cmp	r0, #4
100101f0:	d000      	beq.n	100101f4 <__aeabi_d2f+0x44>
100101f2:	3204      	adds	r2, #4
100101f4:	2080      	movs	r0, #128	; 0x80
100101f6:	04c0      	lsls	r0, r0, #19
100101f8:	4010      	ands	r0, r2
100101fa:	d021      	beq.n	10010240 <__aeabi_d2f+0x90>
100101fc:	3301      	adds	r3, #1
100101fe:	2bff      	cmp	r3, #255	; 0xff
10010200:	d003      	beq.n	1001020a <__aeabi_d2f+0x5a>
10010202:	0192      	lsls	r2, r2, #6
10010204:	0a52      	lsrs	r2, r2, #9
10010206:	b2db      	uxtb	r3, r3
10010208:	e001      	b.n	1001020e <__aeabi_d2f+0x5e>
1001020a:	23ff      	movs	r3, #255	; 0xff
1001020c:	2200      	movs	r2, #0
1001020e:	0252      	lsls	r2, r2, #9
10010210:	0a52      	lsrs	r2, r2, #9
10010212:	05db      	lsls	r3, r3, #23
10010214:	4313      	orrs	r3, r2
10010216:	005b      	lsls	r3, r3, #1
10010218:	07c9      	lsls	r1, r1, #31
1001021a:	085b      	lsrs	r3, r3, #1
1001021c:	430b      	orrs	r3, r1
1001021e:	0018      	movs	r0, r3
10010220:	bd70      	pop	{r4, r5, r6, pc}
10010222:	2e00      	cmp	r6, #0
10010224:	d007      	beq.n	10010236 <__aeabi_d2f+0x86>
10010226:	4314      	orrs	r4, r2
10010228:	d0ef      	beq.n	1001020a <__aeabi_d2f+0x5a>
1001022a:	2080      	movs	r0, #128	; 0x80
1001022c:	00d2      	lsls	r2, r2, #3
1001022e:	0480      	lsls	r0, r0, #18
10010230:	4302      	orrs	r2, r0
10010232:	23ff      	movs	r3, #255	; 0xff
10010234:	e7d7      	b.n	100101e6 <__aeabi_d2f+0x36>
10010236:	4322      	orrs	r2, r4
10010238:	2300      	movs	r3, #0
1001023a:	2a00      	cmp	r2, #0
1001023c:	d003      	beq.n	10010246 <__aeabi_d2f+0x96>
1001023e:	2205      	movs	r2, #5
10010240:	08d2      	lsrs	r2, r2, #3
10010242:	2bff      	cmp	r3, #255	; 0xff
10010244:	d003      	beq.n	1001024e <__aeabi_d2f+0x9e>
10010246:	0252      	lsls	r2, r2, #9
10010248:	0a52      	lsrs	r2, r2, #9
1001024a:	b2db      	uxtb	r3, r3
1001024c:	e7df      	b.n	1001020e <__aeabi_d2f+0x5e>
1001024e:	2a00      	cmp	r2, #0
10010250:	d032      	beq.n	100102b8 <__aeabi_d2f+0x108>
10010252:	2080      	movs	r0, #128	; 0x80
10010254:	03c0      	lsls	r0, r0, #15
10010256:	4302      	orrs	r2, r0
10010258:	0252      	lsls	r2, r2, #9
1001025a:	0a52      	lsrs	r2, r2, #9
1001025c:	e7d7      	b.n	1001020e <__aeabi_d2f+0x5e>
1001025e:	0018      	movs	r0, r3
10010260:	3017      	adds	r0, #23
10010262:	db14      	blt.n	1001028e <__aeabi_d2f+0xde>
10010264:	2080      	movs	r0, #128	; 0x80
10010266:	0400      	lsls	r0, r0, #16
10010268:	4302      	orrs	r2, r0
1001026a:	201e      	movs	r0, #30
1001026c:	1ac0      	subs	r0, r0, r3
1001026e:	281f      	cmp	r0, #31
10010270:	dc0f      	bgt.n	10010292 <__aeabi_d2f+0xe2>
10010272:	0025      	movs	r5, r4
10010274:	4b12      	ldr	r3, [pc, #72]	; (100102c0 <__aeabi_d2f+0x110>)
10010276:	18f3      	adds	r3, r6, r3
10010278:	409d      	lsls	r5, r3
1001027a:	1e6e      	subs	r6, r5, #1
1001027c:	41b5      	sbcs	r5, r6
1001027e:	409a      	lsls	r2, r3
10010280:	002b      	movs	r3, r5
10010282:	4313      	orrs	r3, r2
10010284:	0022      	movs	r2, r4
10010286:	40c2      	lsrs	r2, r0
10010288:	431a      	orrs	r2, r3
1001028a:	2300      	movs	r3, #0
1001028c:	e7ab      	b.n	100101e6 <__aeabi_d2f+0x36>
1001028e:	2300      	movs	r3, #0
10010290:	e7d5      	b.n	1001023e <__aeabi_d2f+0x8e>
10010292:	2502      	movs	r5, #2
10010294:	426d      	negs	r5, r5
10010296:	1aeb      	subs	r3, r5, r3
10010298:	0015      	movs	r5, r2
1001029a:	40dd      	lsrs	r5, r3
1001029c:	2820      	cmp	r0, #32
1001029e:	d009      	beq.n	100102b4 <__aeabi_d2f+0x104>
100102a0:	4b08      	ldr	r3, [pc, #32]	; (100102c4 <__aeabi_d2f+0x114>)
100102a2:	18f3      	adds	r3, r6, r3
100102a4:	409a      	lsls	r2, r3
100102a6:	4314      	orrs	r4, r2
100102a8:	1e62      	subs	r2, r4, #1
100102aa:	4194      	sbcs	r4, r2
100102ac:	0022      	movs	r2, r4
100102ae:	2300      	movs	r3, #0
100102b0:	432a      	orrs	r2, r5
100102b2:	e798      	b.n	100101e6 <__aeabi_d2f+0x36>
100102b4:	2200      	movs	r2, #0
100102b6:	e7f6      	b.n	100102a6 <__aeabi_d2f+0xf6>
100102b8:	2200      	movs	r2, #0
100102ba:	e7a8      	b.n	1001020e <__aeabi_d2f+0x5e>
100102bc:	fffffc80 	.word	0xfffffc80
100102c0:	fffffc82 	.word	0xfffffc82
100102c4:	fffffca2 	.word	0xfffffca2

100102c8 <__aeabi_cdrcmple>:
100102c8:	4684      	mov	ip, r0
100102ca:	1c10      	adds	r0, r2, #0
100102cc:	4662      	mov	r2, ip
100102ce:	468c      	mov	ip, r1
100102d0:	1c19      	adds	r1, r3, #0
100102d2:	4663      	mov	r3, ip
100102d4:	e000      	b.n	100102d8 <__aeabi_cdcmpeq>
100102d6:	46c0      	nop			; (mov r8, r8)

100102d8 <__aeabi_cdcmpeq>:
100102d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100102da:	f000 f9df 	bl	1001069c <__ledf2>
100102de:	2800      	cmp	r0, #0
100102e0:	d401      	bmi.n	100102e6 <__aeabi_cdcmpeq+0xe>
100102e2:	2100      	movs	r1, #0
100102e4:	42c8      	cmn	r0, r1
100102e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100102e8 <__aeabi_dcmpeq>:
100102e8:	b510      	push	{r4, lr}
100102ea:	f000 f933 	bl	10010554 <__eqdf2>
100102ee:	4240      	negs	r0, r0
100102f0:	3001      	adds	r0, #1
100102f2:	bd10      	pop	{r4, pc}

100102f4 <__aeabi_dcmplt>:
100102f4:	b510      	push	{r4, lr}
100102f6:	f000 f9d1 	bl	1001069c <__ledf2>
100102fa:	2800      	cmp	r0, #0
100102fc:	db01      	blt.n	10010302 <__aeabi_dcmplt+0xe>
100102fe:	2000      	movs	r0, #0
10010300:	bd10      	pop	{r4, pc}
10010302:	2001      	movs	r0, #1
10010304:	bd10      	pop	{r4, pc}
10010306:	46c0      	nop			; (mov r8, r8)

10010308 <__aeabi_dcmple>:
10010308:	b510      	push	{r4, lr}
1001030a:	f000 f9c7 	bl	1001069c <__ledf2>
1001030e:	2800      	cmp	r0, #0
10010310:	dd01      	ble.n	10010316 <__aeabi_dcmple+0xe>
10010312:	2000      	movs	r0, #0
10010314:	bd10      	pop	{r4, pc}
10010316:	2001      	movs	r0, #1
10010318:	bd10      	pop	{r4, pc}
1001031a:	46c0      	nop			; (mov r8, r8)

1001031c <__aeabi_dcmpgt>:
1001031c:	b510      	push	{r4, lr}
1001031e:	f000 f959 	bl	100105d4 <__gedf2>
10010322:	2800      	cmp	r0, #0
10010324:	dc01      	bgt.n	1001032a <__aeabi_dcmpgt+0xe>
10010326:	2000      	movs	r0, #0
10010328:	bd10      	pop	{r4, pc}
1001032a:	2001      	movs	r0, #1
1001032c:	bd10      	pop	{r4, pc}
1001032e:	46c0      	nop			; (mov r8, r8)

10010330 <__aeabi_dcmpge>:
10010330:	b510      	push	{r4, lr}
10010332:	f000 f94f 	bl	100105d4 <__gedf2>
10010336:	2800      	cmp	r0, #0
10010338:	da01      	bge.n	1001033e <__aeabi_dcmpge+0xe>
1001033a:	2000      	movs	r0, #0
1001033c:	bd10      	pop	{r4, pc}
1001033e:	2001      	movs	r0, #1
10010340:	bd10      	pop	{r4, pc}
10010342:	46c0      	nop			; (mov r8, r8)

10010344 <__aeabi_cfrcmple>:
10010344:	4684      	mov	ip, r0
10010346:	1c08      	adds	r0, r1, #0
10010348:	4661      	mov	r1, ip
1001034a:	e7ff      	b.n	1001034c <__aeabi_cfcmpeq>

1001034c <__aeabi_cfcmpeq>:
1001034c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001034e:	f000 f8bd 	bl	100104cc <__lesf2>
10010352:	2800      	cmp	r0, #0
10010354:	d401      	bmi.n	1001035a <__aeabi_cfcmpeq+0xe>
10010356:	2100      	movs	r1, #0
10010358:	42c8      	cmn	r0, r1
1001035a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001035c <__aeabi_fcmpeq>:
1001035c:	b510      	push	{r4, lr}
1001035e:	f000 f849 	bl	100103f4 <__eqsf2>
10010362:	4240      	negs	r0, r0
10010364:	3001      	adds	r0, #1
10010366:	bd10      	pop	{r4, pc}

10010368 <__aeabi_fcmplt>:
10010368:	b510      	push	{r4, lr}
1001036a:	f000 f8af 	bl	100104cc <__lesf2>
1001036e:	2800      	cmp	r0, #0
10010370:	db01      	blt.n	10010376 <__aeabi_fcmplt+0xe>
10010372:	2000      	movs	r0, #0
10010374:	bd10      	pop	{r4, pc}
10010376:	2001      	movs	r0, #1
10010378:	bd10      	pop	{r4, pc}
1001037a:	46c0      	nop			; (mov r8, r8)

1001037c <__aeabi_fcmple>:
1001037c:	b510      	push	{r4, lr}
1001037e:	f000 f8a5 	bl	100104cc <__lesf2>
10010382:	2800      	cmp	r0, #0
10010384:	dd01      	ble.n	1001038a <__aeabi_fcmple+0xe>
10010386:	2000      	movs	r0, #0
10010388:	bd10      	pop	{r4, pc}
1001038a:	2001      	movs	r0, #1
1001038c:	bd10      	pop	{r4, pc}
1001038e:	46c0      	nop			; (mov r8, r8)

10010390 <__aeabi_fcmpgt>:
10010390:	b510      	push	{r4, lr}
10010392:	f000 f857 	bl	10010444 <__gesf2>
10010396:	2800      	cmp	r0, #0
10010398:	dc01      	bgt.n	1001039e <__aeabi_fcmpgt+0xe>
1001039a:	2000      	movs	r0, #0
1001039c:	bd10      	pop	{r4, pc}
1001039e:	2001      	movs	r0, #1
100103a0:	bd10      	pop	{r4, pc}
100103a2:	46c0      	nop			; (mov r8, r8)

100103a4 <__aeabi_fcmpge>:
100103a4:	b510      	push	{r4, lr}
100103a6:	f000 f84d 	bl	10010444 <__gesf2>
100103aa:	2800      	cmp	r0, #0
100103ac:	da01      	bge.n	100103b2 <__aeabi_fcmpge+0xe>
100103ae:	2000      	movs	r0, #0
100103b0:	bd10      	pop	{r4, pc}
100103b2:	2001      	movs	r0, #1
100103b4:	bd10      	pop	{r4, pc}
100103b6:	46c0      	nop			; (mov r8, r8)

100103b8 <__clzsi2>:
100103b8:	211c      	movs	r1, #28
100103ba:	2301      	movs	r3, #1
100103bc:	041b      	lsls	r3, r3, #16
100103be:	4298      	cmp	r0, r3
100103c0:	d301      	bcc.n	100103c6 <__clzsi2+0xe>
100103c2:	0c00      	lsrs	r0, r0, #16
100103c4:	3910      	subs	r1, #16
100103c6:	0a1b      	lsrs	r3, r3, #8
100103c8:	4298      	cmp	r0, r3
100103ca:	d301      	bcc.n	100103d0 <__clzsi2+0x18>
100103cc:	0a00      	lsrs	r0, r0, #8
100103ce:	3908      	subs	r1, #8
100103d0:	091b      	lsrs	r3, r3, #4
100103d2:	4298      	cmp	r0, r3
100103d4:	d301      	bcc.n	100103da <__clzsi2+0x22>
100103d6:	0900      	lsrs	r0, r0, #4
100103d8:	3904      	subs	r1, #4
100103da:	a202      	add	r2, pc, #8	; (adr r2, 100103e4 <__clzsi2+0x2c>)
100103dc:	5c10      	ldrb	r0, [r2, r0]
100103de:	1840      	adds	r0, r0, r1
100103e0:	4770      	bx	lr
100103e2:	46c0      	nop			; (mov r8, r8)
100103e4:	02020304 	.word	0x02020304
100103e8:	01010101 	.word	0x01010101
	...

100103f4 <__eqsf2>:
100103f4:	0243      	lsls	r3, r0, #9
100103f6:	b570      	push	{r4, r5, r6, lr}
100103f8:	0042      	lsls	r2, r0, #1
100103fa:	004c      	lsls	r4, r1, #1
100103fc:	0a5d      	lsrs	r5, r3, #9
100103fe:	0fc3      	lsrs	r3, r0, #31
10010400:	0248      	lsls	r0, r1, #9
10010402:	0e12      	lsrs	r2, r2, #24
10010404:	0a46      	lsrs	r6, r0, #9
10010406:	0e24      	lsrs	r4, r4, #24
10010408:	0fc9      	lsrs	r1, r1, #31
1001040a:	2aff      	cmp	r2, #255	; 0xff
1001040c:	d00f      	beq.n	1001042e <__eqsf2+0x3a>
1001040e:	2cff      	cmp	r4, #255	; 0xff
10010410:	d011      	beq.n	10010436 <__eqsf2+0x42>
10010412:	2001      	movs	r0, #1
10010414:	42a2      	cmp	r2, r4
10010416:	d000      	beq.n	1001041a <__eqsf2+0x26>
10010418:	bd70      	pop	{r4, r5, r6, pc}
1001041a:	42b5      	cmp	r5, r6
1001041c:	d1fc      	bne.n	10010418 <__eqsf2+0x24>
1001041e:	428b      	cmp	r3, r1
10010420:	d00d      	beq.n	1001043e <__eqsf2+0x4a>
10010422:	2a00      	cmp	r2, #0
10010424:	d1f8      	bne.n	10010418 <__eqsf2+0x24>
10010426:	0028      	movs	r0, r5
10010428:	1e43      	subs	r3, r0, #1
1001042a:	4198      	sbcs	r0, r3
1001042c:	e7f4      	b.n	10010418 <__eqsf2+0x24>
1001042e:	2001      	movs	r0, #1
10010430:	2d00      	cmp	r5, #0
10010432:	d1f1      	bne.n	10010418 <__eqsf2+0x24>
10010434:	e7eb      	b.n	1001040e <__eqsf2+0x1a>
10010436:	2001      	movs	r0, #1
10010438:	2e00      	cmp	r6, #0
1001043a:	d1ed      	bne.n	10010418 <__eqsf2+0x24>
1001043c:	e7e9      	b.n	10010412 <__eqsf2+0x1e>
1001043e:	2000      	movs	r0, #0
10010440:	e7ea      	b.n	10010418 <__eqsf2+0x24>
10010442:	46c0      	nop			; (mov r8, r8)

10010444 <__gesf2>:
10010444:	0243      	lsls	r3, r0, #9
10010446:	b5f0      	push	{r4, r5, r6, r7, lr}
10010448:	0042      	lsls	r2, r0, #1
1001044a:	0a5d      	lsrs	r5, r3, #9
1001044c:	0fc3      	lsrs	r3, r0, #31
1001044e:	0248      	lsls	r0, r1, #9
10010450:	0a44      	lsrs	r4, r0, #9
10010452:	0048      	lsls	r0, r1, #1
10010454:	0e12      	lsrs	r2, r2, #24
10010456:	0e00      	lsrs	r0, r0, #24
10010458:	0fc9      	lsrs	r1, r1, #31
1001045a:	2aff      	cmp	r2, #255	; 0xff
1001045c:	d01f      	beq.n	1001049e <__gesf2+0x5a>
1001045e:	28ff      	cmp	r0, #255	; 0xff
10010460:	d022      	beq.n	100104a8 <__gesf2+0x64>
10010462:	2a00      	cmp	r2, #0
10010464:	d109      	bne.n	1001047a <__gesf2+0x36>
10010466:	426e      	negs	r6, r5
10010468:	416e      	adcs	r6, r5
1001046a:	2800      	cmp	r0, #0
1001046c:	d10f      	bne.n	1001048e <__gesf2+0x4a>
1001046e:	2c00      	cmp	r4, #0
10010470:	d10d      	bne.n	1001048e <__gesf2+0x4a>
10010472:	2000      	movs	r0, #0
10010474:	2d00      	cmp	r5, #0
10010476:	d009      	beq.n	1001048c <__gesf2+0x48>
10010478:	e005      	b.n	10010486 <__gesf2+0x42>
1001047a:	2800      	cmp	r0, #0
1001047c:	d101      	bne.n	10010482 <__gesf2+0x3e>
1001047e:	2c00      	cmp	r4, #0
10010480:	d001      	beq.n	10010486 <__gesf2+0x42>
10010482:	428b      	cmp	r3, r1
10010484:	d013      	beq.n	100104ae <__gesf2+0x6a>
10010486:	4258      	negs	r0, r3
10010488:	2301      	movs	r3, #1
1001048a:	4318      	orrs	r0, r3
1001048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001048e:	2e00      	cmp	r6, #0
10010490:	d0f7      	beq.n	10010482 <__gesf2+0x3e>
10010492:	4248      	negs	r0, r1
10010494:	4141      	adcs	r1, r0
10010496:	2001      	movs	r0, #1
10010498:	4249      	negs	r1, r1
1001049a:	4308      	orrs	r0, r1
1001049c:	e7f6      	b.n	1001048c <__gesf2+0x48>
1001049e:	2d00      	cmp	r5, #0
100104a0:	d0dd      	beq.n	1001045e <__gesf2+0x1a>
100104a2:	2002      	movs	r0, #2
100104a4:	4240      	negs	r0, r0
100104a6:	e7f1      	b.n	1001048c <__gesf2+0x48>
100104a8:	2c00      	cmp	r4, #0
100104aa:	d0da      	beq.n	10010462 <__gesf2+0x1e>
100104ac:	e7f9      	b.n	100104a2 <__gesf2+0x5e>
100104ae:	4282      	cmp	r2, r0
100104b0:	dce9      	bgt.n	10010486 <__gesf2+0x42>
100104b2:	db04      	blt.n	100104be <__gesf2+0x7a>
100104b4:	42a5      	cmp	r5, r4
100104b6:	d8e6      	bhi.n	10010486 <__gesf2+0x42>
100104b8:	2000      	movs	r0, #0
100104ba:	42a5      	cmp	r5, r4
100104bc:	d2e6      	bcs.n	1001048c <__gesf2+0x48>
100104be:	4258      	negs	r0, r3
100104c0:	4143      	adcs	r3, r0
100104c2:	2001      	movs	r0, #1
100104c4:	425b      	negs	r3, r3
100104c6:	4318      	orrs	r0, r3
100104c8:	e7e0      	b.n	1001048c <__gesf2+0x48>
100104ca:	46c0      	nop			; (mov r8, r8)

100104cc <__lesf2>:
100104cc:	0243      	lsls	r3, r0, #9
100104ce:	b5f0      	push	{r4, r5, r6, r7, lr}
100104d0:	0042      	lsls	r2, r0, #1
100104d2:	004c      	lsls	r4, r1, #1
100104d4:	0a5e      	lsrs	r6, r3, #9
100104d6:	0fc3      	lsrs	r3, r0, #31
100104d8:	0248      	lsls	r0, r1, #9
100104da:	0e12      	lsrs	r2, r2, #24
100104dc:	0a45      	lsrs	r5, r0, #9
100104de:	0e24      	lsrs	r4, r4, #24
100104e0:	0fc9      	lsrs	r1, r1, #31
100104e2:	2aff      	cmp	r2, #255	; 0xff
100104e4:	d017      	beq.n	10010516 <__lesf2+0x4a>
100104e6:	2cff      	cmp	r4, #255	; 0xff
100104e8:	d019      	beq.n	1001051e <__lesf2+0x52>
100104ea:	2a00      	cmp	r2, #0
100104ec:	d10b      	bne.n	10010506 <__lesf2+0x3a>
100104ee:	4270      	negs	r0, r6
100104f0:	4170      	adcs	r0, r6
100104f2:	2c00      	cmp	r4, #0
100104f4:	d017      	beq.n	10010526 <__lesf2+0x5a>
100104f6:	2800      	cmp	r0, #0
100104f8:	d007      	beq.n	1001050a <__lesf2+0x3e>
100104fa:	4248      	negs	r0, r1
100104fc:	4141      	adcs	r1, r0
100104fe:	2001      	movs	r0, #1
10010500:	4249      	negs	r1, r1
10010502:	4308      	orrs	r0, r1
10010504:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010506:	2c00      	cmp	r4, #0
10010508:	d013      	beq.n	10010532 <__lesf2+0x66>
1001050a:	428b      	cmp	r3, r1
1001050c:	d014      	beq.n	10010538 <__lesf2+0x6c>
1001050e:	4258      	negs	r0, r3
10010510:	2301      	movs	r3, #1
10010512:	4318      	orrs	r0, r3
10010514:	e7f6      	b.n	10010504 <__lesf2+0x38>
10010516:	2002      	movs	r0, #2
10010518:	2e00      	cmp	r6, #0
1001051a:	d1f3      	bne.n	10010504 <__lesf2+0x38>
1001051c:	e7e3      	b.n	100104e6 <__lesf2+0x1a>
1001051e:	2002      	movs	r0, #2
10010520:	2d00      	cmp	r5, #0
10010522:	d1ef      	bne.n	10010504 <__lesf2+0x38>
10010524:	e7e1      	b.n	100104ea <__lesf2+0x1e>
10010526:	2d00      	cmp	r5, #0
10010528:	d1e5      	bne.n	100104f6 <__lesf2+0x2a>
1001052a:	2000      	movs	r0, #0
1001052c:	2e00      	cmp	r6, #0
1001052e:	d0e9      	beq.n	10010504 <__lesf2+0x38>
10010530:	e7ed      	b.n	1001050e <__lesf2+0x42>
10010532:	2d00      	cmp	r5, #0
10010534:	d1e9      	bne.n	1001050a <__lesf2+0x3e>
10010536:	e7ea      	b.n	1001050e <__lesf2+0x42>
10010538:	42a2      	cmp	r2, r4
1001053a:	dce8      	bgt.n	1001050e <__lesf2+0x42>
1001053c:	db04      	blt.n	10010548 <__lesf2+0x7c>
1001053e:	42ae      	cmp	r6, r5
10010540:	d8e5      	bhi.n	1001050e <__lesf2+0x42>
10010542:	2000      	movs	r0, #0
10010544:	42ae      	cmp	r6, r5
10010546:	d2dd      	bcs.n	10010504 <__lesf2+0x38>
10010548:	4258      	negs	r0, r3
1001054a:	4143      	adcs	r3, r0
1001054c:	2001      	movs	r0, #1
1001054e:	425b      	negs	r3, r3
10010550:	4318      	orrs	r0, r3
10010552:	e7d7      	b.n	10010504 <__lesf2+0x38>

10010554 <__eqdf2>:
10010554:	b5f0      	push	{r4, r5, r6, r7, lr}
10010556:	465f      	mov	r7, fp
10010558:	4656      	mov	r6, sl
1001055a:	464d      	mov	r5, r9
1001055c:	4644      	mov	r4, r8
1001055e:	b4f0      	push	{r4, r5, r6, r7}
10010560:	031f      	lsls	r7, r3, #12
10010562:	005c      	lsls	r4, r3, #1
10010564:	0fdb      	lsrs	r3, r3, #31
10010566:	469a      	mov	sl, r3
10010568:	4b19      	ldr	r3, [pc, #100]	; (100105d0 <__eqdf2+0x7c>)
1001056a:	030e      	lsls	r6, r1, #12
1001056c:	004d      	lsls	r5, r1, #1
1001056e:	0fc9      	lsrs	r1, r1, #31
10010570:	4680      	mov	r8, r0
10010572:	0b36      	lsrs	r6, r6, #12
10010574:	0d6d      	lsrs	r5, r5, #21
10010576:	468b      	mov	fp, r1
10010578:	4691      	mov	r9, r2
1001057a:	0b3f      	lsrs	r7, r7, #12
1001057c:	0d64      	lsrs	r4, r4, #21
1001057e:	429d      	cmp	r5, r3
10010580:	d019      	beq.n	100105b6 <__eqdf2+0x62>
10010582:	4b13      	ldr	r3, [pc, #76]	; (100105d0 <__eqdf2+0x7c>)
10010584:	429c      	cmp	r4, r3
10010586:	d01b      	beq.n	100105c0 <__eqdf2+0x6c>
10010588:	2301      	movs	r3, #1
1001058a:	42a5      	cmp	r5, r4
1001058c:	d006      	beq.n	1001059c <__eqdf2+0x48>
1001058e:	0018      	movs	r0, r3
10010590:	bc3c      	pop	{r2, r3, r4, r5}
10010592:	4690      	mov	r8, r2
10010594:	4699      	mov	r9, r3
10010596:	46a2      	mov	sl, r4
10010598:	46ab      	mov	fp, r5
1001059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001059c:	42be      	cmp	r6, r7
1001059e:	d1f6      	bne.n	1001058e <__eqdf2+0x3a>
100105a0:	45c8      	cmp	r8, r9
100105a2:	d1f4      	bne.n	1001058e <__eqdf2+0x3a>
100105a4:	45d3      	cmp	fp, sl
100105a6:	d010      	beq.n	100105ca <__eqdf2+0x76>
100105a8:	2d00      	cmp	r5, #0
100105aa:	d1f0      	bne.n	1001058e <__eqdf2+0x3a>
100105ac:	4330      	orrs	r0, r6
100105ae:	0003      	movs	r3, r0
100105b0:	1e5a      	subs	r2, r3, #1
100105b2:	4193      	sbcs	r3, r2
100105b4:	e7eb      	b.n	1001058e <__eqdf2+0x3a>
100105b6:	0031      	movs	r1, r6
100105b8:	2301      	movs	r3, #1
100105ba:	4301      	orrs	r1, r0
100105bc:	d1e7      	bne.n	1001058e <__eqdf2+0x3a>
100105be:	e7e0      	b.n	10010582 <__eqdf2+0x2e>
100105c0:	433a      	orrs	r2, r7
100105c2:	2301      	movs	r3, #1
100105c4:	2a00      	cmp	r2, #0
100105c6:	d1e2      	bne.n	1001058e <__eqdf2+0x3a>
100105c8:	e7de      	b.n	10010588 <__eqdf2+0x34>
100105ca:	2300      	movs	r3, #0
100105cc:	e7df      	b.n	1001058e <__eqdf2+0x3a>
100105ce:	46c0      	nop			; (mov r8, r8)
100105d0:	000007ff 	.word	0x000007ff

100105d4 <__gedf2>:
100105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100105d6:	465f      	mov	r7, fp
100105d8:	4644      	mov	r4, r8
100105da:	4656      	mov	r6, sl
100105dc:	464d      	mov	r5, r9
100105de:	b4f0      	push	{r4, r5, r6, r7}
100105e0:	031f      	lsls	r7, r3, #12
100105e2:	0b3c      	lsrs	r4, r7, #12
100105e4:	4f2c      	ldr	r7, [pc, #176]	; (10010698 <__gedf2+0xc4>)
100105e6:	030e      	lsls	r6, r1, #12
100105e8:	004d      	lsls	r5, r1, #1
100105ea:	46a3      	mov	fp, r4
100105ec:	005c      	lsls	r4, r3, #1
100105ee:	4684      	mov	ip, r0
100105f0:	0b36      	lsrs	r6, r6, #12
100105f2:	0d6d      	lsrs	r5, r5, #21
100105f4:	0fc9      	lsrs	r1, r1, #31
100105f6:	4690      	mov	r8, r2
100105f8:	0d64      	lsrs	r4, r4, #21
100105fa:	0fdb      	lsrs	r3, r3, #31
100105fc:	42bd      	cmp	r5, r7
100105fe:	d02b      	beq.n	10010658 <__gedf2+0x84>
10010600:	4f25      	ldr	r7, [pc, #148]	; (10010698 <__gedf2+0xc4>)
10010602:	42bc      	cmp	r4, r7
10010604:	d02e      	beq.n	10010664 <__gedf2+0x90>
10010606:	2d00      	cmp	r5, #0
10010608:	d10e      	bne.n	10010628 <__gedf2+0x54>
1001060a:	4330      	orrs	r0, r6
1001060c:	0007      	movs	r7, r0
1001060e:	4681      	mov	r9, r0
10010610:	4278      	negs	r0, r7
10010612:	4178      	adcs	r0, r7
10010614:	2c00      	cmp	r4, #0
10010616:	d117      	bne.n	10010648 <__gedf2+0x74>
10010618:	465f      	mov	r7, fp
1001061a:	433a      	orrs	r2, r7
1001061c:	d114      	bne.n	10010648 <__gedf2+0x74>
1001061e:	464b      	mov	r3, r9
10010620:	2000      	movs	r0, #0
10010622:	2b00      	cmp	r3, #0
10010624:	d00a      	beq.n	1001063c <__gedf2+0x68>
10010626:	e006      	b.n	10010636 <__gedf2+0x62>
10010628:	2c00      	cmp	r4, #0
1001062a:	d102      	bne.n	10010632 <__gedf2+0x5e>
1001062c:	4658      	mov	r0, fp
1001062e:	4302      	orrs	r2, r0
10010630:	d001      	beq.n	10010636 <__gedf2+0x62>
10010632:	4299      	cmp	r1, r3
10010634:	d01a      	beq.n	1001066c <__gedf2+0x98>
10010636:	2301      	movs	r3, #1
10010638:	4248      	negs	r0, r1
1001063a:	4318      	orrs	r0, r3
1001063c:	bc3c      	pop	{r2, r3, r4, r5}
1001063e:	4690      	mov	r8, r2
10010640:	4699      	mov	r9, r3
10010642:	46a2      	mov	sl, r4
10010644:	46ab      	mov	fp, r5
10010646:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010648:	2800      	cmp	r0, #0
1001064a:	d0f2      	beq.n	10010632 <__gedf2+0x5e>
1001064c:	4258      	negs	r0, r3
1001064e:	4158      	adcs	r0, r3
10010650:	2201      	movs	r2, #1
10010652:	4240      	negs	r0, r0
10010654:	4310      	orrs	r0, r2
10010656:	e7f1      	b.n	1001063c <__gedf2+0x68>
10010658:	0037      	movs	r7, r6
1001065a:	4307      	orrs	r7, r0
1001065c:	d0d0      	beq.n	10010600 <__gedf2+0x2c>
1001065e:	2002      	movs	r0, #2
10010660:	4240      	negs	r0, r0
10010662:	e7eb      	b.n	1001063c <__gedf2+0x68>
10010664:	465f      	mov	r7, fp
10010666:	4317      	orrs	r7, r2
10010668:	d0cd      	beq.n	10010606 <__gedf2+0x32>
1001066a:	e7f8      	b.n	1001065e <__gedf2+0x8a>
1001066c:	42a5      	cmp	r5, r4
1001066e:	dce2      	bgt.n	10010636 <__gedf2+0x62>
10010670:	db05      	blt.n	1001067e <__gedf2+0xaa>
10010672:	455e      	cmp	r6, fp
10010674:	d8df      	bhi.n	10010636 <__gedf2+0x62>
10010676:	d008      	beq.n	1001068a <__gedf2+0xb6>
10010678:	2000      	movs	r0, #0
1001067a:	455e      	cmp	r6, fp
1001067c:	d2de      	bcs.n	1001063c <__gedf2+0x68>
1001067e:	4248      	negs	r0, r1
10010680:	4148      	adcs	r0, r1
10010682:	2301      	movs	r3, #1
10010684:	4240      	negs	r0, r0
10010686:	4318      	orrs	r0, r3
10010688:	e7d8      	b.n	1001063c <__gedf2+0x68>
1001068a:	45c4      	cmp	ip, r8
1001068c:	d8d3      	bhi.n	10010636 <__gedf2+0x62>
1001068e:	2000      	movs	r0, #0
10010690:	45c4      	cmp	ip, r8
10010692:	d3f4      	bcc.n	1001067e <__gedf2+0xaa>
10010694:	e7d2      	b.n	1001063c <__gedf2+0x68>
10010696:	46c0      	nop			; (mov r8, r8)
10010698:	000007ff 	.word	0x000007ff

1001069c <__ledf2>:
1001069c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001069e:	465f      	mov	r7, fp
100106a0:	464d      	mov	r5, r9
100106a2:	4644      	mov	r4, r8
100106a4:	4656      	mov	r6, sl
100106a6:	b4f0      	push	{r4, r5, r6, r7}
100106a8:	031c      	lsls	r4, r3, #12
100106aa:	0b24      	lsrs	r4, r4, #12
100106ac:	46a4      	mov	ip, r4
100106ae:	4c2f      	ldr	r4, [pc, #188]	; (1001076c <__ledf2+0xd0>)
100106b0:	030f      	lsls	r7, r1, #12
100106b2:	004d      	lsls	r5, r1, #1
100106b4:	005e      	lsls	r6, r3, #1
100106b6:	0fc9      	lsrs	r1, r1, #31
100106b8:	4680      	mov	r8, r0
100106ba:	0b3f      	lsrs	r7, r7, #12
100106bc:	0d6d      	lsrs	r5, r5, #21
100106be:	468b      	mov	fp, r1
100106c0:	4691      	mov	r9, r2
100106c2:	0d76      	lsrs	r6, r6, #21
100106c4:	0fdb      	lsrs	r3, r3, #31
100106c6:	42a5      	cmp	r5, r4
100106c8:	d020      	beq.n	1001070c <__ledf2+0x70>
100106ca:	4c28      	ldr	r4, [pc, #160]	; (1001076c <__ledf2+0xd0>)
100106cc:	42a6      	cmp	r6, r4
100106ce:	d022      	beq.n	10010716 <__ledf2+0x7a>
100106d0:	2d00      	cmp	r5, #0
100106d2:	d112      	bne.n	100106fa <__ledf2+0x5e>
100106d4:	4338      	orrs	r0, r7
100106d6:	4244      	negs	r4, r0
100106d8:	4144      	adcs	r4, r0
100106da:	2e00      	cmp	r6, #0
100106dc:	d020      	beq.n	10010720 <__ledf2+0x84>
100106de:	2c00      	cmp	r4, #0
100106e0:	d00d      	beq.n	100106fe <__ledf2+0x62>
100106e2:	425c      	negs	r4, r3
100106e4:	4163      	adcs	r3, r4
100106e6:	2401      	movs	r4, #1
100106e8:	425b      	negs	r3, r3
100106ea:	431c      	orrs	r4, r3
100106ec:	0020      	movs	r0, r4
100106ee:	bc3c      	pop	{r2, r3, r4, r5}
100106f0:	4690      	mov	r8, r2
100106f2:	4699      	mov	r9, r3
100106f4:	46a2      	mov	sl, r4
100106f6:	46ab      	mov	fp, r5
100106f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100106fa:	2e00      	cmp	r6, #0
100106fc:	d017      	beq.n	1001072e <__ledf2+0x92>
100106fe:	455b      	cmp	r3, fp
10010700:	d019      	beq.n	10010736 <__ledf2+0x9a>
10010702:	465b      	mov	r3, fp
10010704:	425c      	negs	r4, r3
10010706:	2301      	movs	r3, #1
10010708:	431c      	orrs	r4, r3
1001070a:	e7ef      	b.n	100106ec <__ledf2+0x50>
1001070c:	0039      	movs	r1, r7
1001070e:	2402      	movs	r4, #2
10010710:	4301      	orrs	r1, r0
10010712:	d1eb      	bne.n	100106ec <__ledf2+0x50>
10010714:	e7d9      	b.n	100106ca <__ledf2+0x2e>
10010716:	4661      	mov	r1, ip
10010718:	2402      	movs	r4, #2
1001071a:	4311      	orrs	r1, r2
1001071c:	d1e6      	bne.n	100106ec <__ledf2+0x50>
1001071e:	e7d7      	b.n	100106d0 <__ledf2+0x34>
10010720:	4661      	mov	r1, ip
10010722:	430a      	orrs	r2, r1
10010724:	d1db      	bne.n	100106de <__ledf2+0x42>
10010726:	2400      	movs	r4, #0
10010728:	2800      	cmp	r0, #0
1001072a:	d0df      	beq.n	100106ec <__ledf2+0x50>
1001072c:	e7e9      	b.n	10010702 <__ledf2+0x66>
1001072e:	4661      	mov	r1, ip
10010730:	430a      	orrs	r2, r1
10010732:	d1e4      	bne.n	100106fe <__ledf2+0x62>
10010734:	e7e5      	b.n	10010702 <__ledf2+0x66>
10010736:	42b5      	cmp	r5, r6
10010738:	dd03      	ble.n	10010742 <__ledf2+0xa6>
1001073a:	2201      	movs	r2, #1
1001073c:	425c      	negs	r4, r3
1001073e:	4314      	orrs	r4, r2
10010740:	e7d4      	b.n	100106ec <__ledf2+0x50>
10010742:	42b5      	cmp	r5, r6
10010744:	dbcd      	blt.n	100106e2 <__ledf2+0x46>
10010746:	4567      	cmp	r7, ip
10010748:	d8db      	bhi.n	10010702 <__ledf2+0x66>
1001074a:	d009      	beq.n	10010760 <__ledf2+0xc4>
1001074c:	2400      	movs	r4, #0
1001074e:	4567      	cmp	r7, ip
10010750:	d2cc      	bcs.n	100106ec <__ledf2+0x50>
10010752:	4659      	mov	r1, fp
10010754:	424c      	negs	r4, r1
10010756:	4161      	adcs	r1, r4
10010758:	2401      	movs	r4, #1
1001075a:	4249      	negs	r1, r1
1001075c:	430c      	orrs	r4, r1
1001075e:	e7c5      	b.n	100106ec <__ledf2+0x50>
10010760:	45c8      	cmp	r8, r9
10010762:	d8ce      	bhi.n	10010702 <__ledf2+0x66>
10010764:	2400      	movs	r4, #0
10010766:	45c8      	cmp	r8, r9
10010768:	d3f3      	bcc.n	10010752 <__ledf2+0xb6>
1001076a:	e7bf      	b.n	100106ec <__ledf2+0x50>
1001076c:	000007ff 	.word	0x000007ff

10010770 <atof>:
10010770:	b510      	push	{r4, lr}
10010772:	2100      	movs	r1, #0
10010774:	f001 f828 	bl	100117c8 <strtod>
10010778:	bd10      	pop	{r4, pc}
	...

1001077c <__libc_init_array>:
1001077c:	4b0e      	ldr	r3, [pc, #56]	; (100107b8 <__libc_init_array+0x3c>)
1001077e:	b570      	push	{r4, r5, r6, lr}
10010780:	2500      	movs	r5, #0
10010782:	001e      	movs	r6, r3
10010784:	4c0d      	ldr	r4, [pc, #52]	; (100107bc <__libc_init_array+0x40>)
10010786:	1ae4      	subs	r4, r4, r3
10010788:	10a4      	asrs	r4, r4, #2
1001078a:	42a5      	cmp	r5, r4
1001078c:	d004      	beq.n	10010798 <__libc_init_array+0x1c>
1001078e:	00ab      	lsls	r3, r5, #2
10010790:	58f3      	ldr	r3, [r6, r3]
10010792:	4798      	blx	r3
10010794:	3501      	adds	r5, #1
10010796:	e7f8      	b.n	1001078a <__libc_init_array+0xe>
10010798:	f004 fdc2 	bl	10015320 <_init>
1001079c:	4b08      	ldr	r3, [pc, #32]	; (100107c0 <__libc_init_array+0x44>)
1001079e:	2500      	movs	r5, #0
100107a0:	001e      	movs	r6, r3
100107a2:	4c08      	ldr	r4, [pc, #32]	; (100107c4 <__libc_init_array+0x48>)
100107a4:	1ae4      	subs	r4, r4, r3
100107a6:	10a4      	asrs	r4, r4, #2
100107a8:	42a5      	cmp	r5, r4
100107aa:	d004      	beq.n	100107b6 <__libc_init_array+0x3a>
100107ac:	00ab      	lsls	r3, r5, #2
100107ae:	58f3      	ldr	r3, [r6, r3]
100107b0:	4798      	blx	r3
100107b2:	3501      	adds	r5, #1
100107b4:	e7f8      	b.n	100107a8 <__libc_init_array+0x2c>
100107b6:	bd70      	pop	{r4, r5, r6, pc}
100107b8:	1001532c 	.word	0x1001532c
100107bc:	1001532c 	.word	0x1001532c
100107c0:	1001532c 	.word	0x1001532c
100107c4:	10015330 	.word	0x10015330

100107c8 <memcmp>:
100107c8:	b530      	push	{r4, r5, lr}
100107ca:	2400      	movs	r4, #0
100107cc:	42a2      	cmp	r2, r4
100107ce:	d008      	beq.n	100107e2 <memcmp+0x1a>
100107d0:	5d03      	ldrb	r3, [r0, r4]
100107d2:	1c65      	adds	r5, r4, #1
100107d4:	5d0c      	ldrb	r4, [r1, r4]
100107d6:	42a3      	cmp	r3, r4
100107d8:	d001      	beq.n	100107de <memcmp+0x16>
100107da:	1b18      	subs	r0, r3, r4
100107dc:	e002      	b.n	100107e4 <memcmp+0x1c>
100107de:	002c      	movs	r4, r5
100107e0:	e7f4      	b.n	100107cc <memcmp+0x4>
100107e2:	2000      	movs	r0, #0
100107e4:	bd30      	pop	{r4, r5, pc}

100107e6 <memcpy>:
100107e6:	2300      	movs	r3, #0
100107e8:	b510      	push	{r4, lr}
100107ea:	429a      	cmp	r2, r3
100107ec:	d003      	beq.n	100107f6 <memcpy+0x10>
100107ee:	5ccc      	ldrb	r4, [r1, r3]
100107f0:	54c4      	strb	r4, [r0, r3]
100107f2:	3301      	adds	r3, #1
100107f4:	e7f9      	b.n	100107ea <memcpy+0x4>
100107f6:	bd10      	pop	{r4, pc}

100107f8 <memset>:
100107f8:	0003      	movs	r3, r0
100107fa:	1882      	adds	r2, r0, r2
100107fc:	4293      	cmp	r3, r2
100107fe:	d002      	beq.n	10010806 <memset+0xe>
10010800:	7019      	strb	r1, [r3, #0]
10010802:	3301      	adds	r3, #1
10010804:	e7fa      	b.n	100107fc <memset+0x4>
10010806:	4770      	bx	lr

10010808 <iprintf>:
10010808:	b40f      	push	{r0, r1, r2, r3}
1001080a:	4b0b      	ldr	r3, [pc, #44]	; (10010838 <iprintf+0x30>)
1001080c:	b513      	push	{r0, r1, r4, lr}
1001080e:	681c      	ldr	r4, [r3, #0]
10010810:	2c00      	cmp	r4, #0
10010812:	d005      	beq.n	10010820 <iprintf+0x18>
10010814:	69a3      	ldr	r3, [r4, #24]
10010816:	2b00      	cmp	r3, #0
10010818:	d102      	bne.n	10010820 <iprintf+0x18>
1001081a:	0020      	movs	r0, r4
1001081c:	f001 f9a0 	bl	10011b60 <__sinit>
10010820:	ab05      	add	r3, sp, #20
10010822:	9a04      	ldr	r2, [sp, #16]
10010824:	68a1      	ldr	r1, [r4, #8]
10010826:	0020      	movs	r0, r4
10010828:	9301      	str	r3, [sp, #4]
1001082a:	f002 fa99 	bl	10012d60 <_vfiprintf_r>
1001082e:	bc16      	pop	{r1, r2, r4}
10010830:	bc08      	pop	{r3}
10010832:	b004      	add	sp, #16
10010834:	4718      	bx	r3
10010836:	46c0      	nop			; (mov r8, r8)
10010838:	100153b4 	.word	0x100153b4

1001083c <putchar>:
1001083c:	4b08      	ldr	r3, [pc, #32]	; (10010860 <putchar+0x24>)
1001083e:	b570      	push	{r4, r5, r6, lr}
10010840:	681c      	ldr	r4, [r3, #0]
10010842:	0005      	movs	r5, r0
10010844:	2c00      	cmp	r4, #0
10010846:	d005      	beq.n	10010854 <putchar+0x18>
10010848:	69a3      	ldr	r3, [r4, #24]
1001084a:	2b00      	cmp	r3, #0
1001084c:	d102      	bne.n	10010854 <putchar+0x18>
1001084e:	0020      	movs	r0, r4
10010850:	f001 f986 	bl	10011b60 <__sinit>
10010854:	0029      	movs	r1, r5
10010856:	68a2      	ldr	r2, [r4, #8]
10010858:	0020      	movs	r0, r4
1001085a:	f002 fd2d 	bl	100132b8 <_putc_r>
1001085e:	bd70      	pop	{r4, r5, r6, pc}
10010860:	100153b4 	.word	0x100153b4

10010864 <_puts_r>:
10010864:	b570      	push	{r4, r5, r6, lr}
10010866:	0005      	movs	r5, r0
10010868:	000e      	movs	r6, r1
1001086a:	2800      	cmp	r0, #0
1001086c:	d004      	beq.n	10010878 <_puts_r+0x14>
1001086e:	6983      	ldr	r3, [r0, #24]
10010870:	2b00      	cmp	r3, #0
10010872:	d101      	bne.n	10010878 <_puts_r+0x14>
10010874:	f001 f974 	bl	10011b60 <__sinit>
10010878:	69ab      	ldr	r3, [r5, #24]
1001087a:	68ac      	ldr	r4, [r5, #8]
1001087c:	2b00      	cmp	r3, #0
1001087e:	d102      	bne.n	10010886 <_puts_r+0x22>
10010880:	0028      	movs	r0, r5
10010882:	f001 f96d 	bl	10011b60 <__sinit>
10010886:	4b25      	ldr	r3, [pc, #148]	; (1001091c <_puts_r+0xb8>)
10010888:	429c      	cmp	r4, r3
1001088a:	d101      	bne.n	10010890 <_puts_r+0x2c>
1001088c:	686c      	ldr	r4, [r5, #4]
1001088e:	e008      	b.n	100108a2 <_puts_r+0x3e>
10010890:	4b23      	ldr	r3, [pc, #140]	; (10010920 <_puts_r+0xbc>)
10010892:	429c      	cmp	r4, r3
10010894:	d101      	bne.n	1001089a <_puts_r+0x36>
10010896:	68ac      	ldr	r4, [r5, #8]
10010898:	e003      	b.n	100108a2 <_puts_r+0x3e>
1001089a:	4b22      	ldr	r3, [pc, #136]	; (10010924 <_puts_r+0xc0>)
1001089c:	429c      	cmp	r4, r3
1001089e:	d100      	bne.n	100108a2 <_puts_r+0x3e>
100108a0:	68ec      	ldr	r4, [r5, #12]
100108a2:	89a3      	ldrh	r3, [r4, #12]
100108a4:	071b      	lsls	r3, r3, #28
100108a6:	d502      	bpl.n	100108ae <_puts_r+0x4a>
100108a8:	6923      	ldr	r3, [r4, #16]
100108aa:	2b00      	cmp	r3, #0
100108ac:	d111      	bne.n	100108d2 <_puts_r+0x6e>
100108ae:	0021      	movs	r1, r4
100108b0:	0028      	movs	r0, r5
100108b2:	f000 ffeb 	bl	1001188c <__swsetup_r>
100108b6:	2800      	cmp	r0, #0
100108b8:	d00b      	beq.n	100108d2 <_puts_r+0x6e>
100108ba:	2001      	movs	r0, #1
100108bc:	4240      	negs	r0, r0
100108be:	e02b      	b.n	10010918 <_puts_r+0xb4>
100108c0:	3b01      	subs	r3, #1
100108c2:	3601      	adds	r6, #1
100108c4:	60a3      	str	r3, [r4, #8]
100108c6:	2b00      	cmp	r3, #0
100108c8:	db08      	blt.n	100108dc <_puts_r+0x78>
100108ca:	6823      	ldr	r3, [r4, #0]
100108cc:	1c5a      	adds	r2, r3, #1
100108ce:	6022      	str	r2, [r4, #0]
100108d0:	7019      	strb	r1, [r3, #0]
100108d2:	7831      	ldrb	r1, [r6, #0]
100108d4:	68a3      	ldr	r3, [r4, #8]
100108d6:	2900      	cmp	r1, #0
100108d8:	d1f2      	bne.n	100108c0 <_puts_r+0x5c>
100108da:	e00b      	b.n	100108f4 <_puts_r+0x90>
100108dc:	69a2      	ldr	r2, [r4, #24]
100108de:	4293      	cmp	r3, r2
100108e0:	db01      	blt.n	100108e6 <_puts_r+0x82>
100108e2:	290a      	cmp	r1, #10
100108e4:	d1f1      	bne.n	100108ca <_puts_r+0x66>
100108e6:	0022      	movs	r2, r4
100108e8:	0028      	movs	r0, r5
100108ea:	f000 ff77 	bl	100117dc <__swbuf_r>
100108ee:	1c43      	adds	r3, r0, #1
100108f0:	d1ef      	bne.n	100108d2 <_puts_r+0x6e>
100108f2:	e7e2      	b.n	100108ba <_puts_r+0x56>
100108f4:	3b01      	subs	r3, #1
100108f6:	60a3      	str	r3, [r4, #8]
100108f8:	2b00      	cmp	r3, #0
100108fa:	da08      	bge.n	1001090e <_puts_r+0xaa>
100108fc:	0022      	movs	r2, r4
100108fe:	310a      	adds	r1, #10
10010900:	0028      	movs	r0, r5
10010902:	f000 ff6b 	bl	100117dc <__swbuf_r>
10010906:	1c43      	adds	r3, r0, #1
10010908:	d0d7      	beq.n	100108ba <_puts_r+0x56>
1001090a:	200a      	movs	r0, #10
1001090c:	e004      	b.n	10010918 <_puts_r+0xb4>
1001090e:	200a      	movs	r0, #10
10010910:	6823      	ldr	r3, [r4, #0]
10010912:	1c5a      	adds	r2, r3, #1
10010914:	6022      	str	r2, [r4, #0]
10010916:	7018      	strb	r0, [r3, #0]
10010918:	bd70      	pop	{r4, r5, r6, pc}
1001091a:	46c0      	nop			; (mov r8, r8)
1001091c:	10015148 	.word	0x10015148
10010920:	10015168 	.word	0x10015168
10010924:	10015188 	.word	0x10015188

10010928 <puts>:
10010928:	b510      	push	{r4, lr}
1001092a:	4b03      	ldr	r3, [pc, #12]	; (10010938 <puts+0x10>)
1001092c:	0001      	movs	r1, r0
1001092e:	6818      	ldr	r0, [r3, #0]
10010930:	f7ff ff98 	bl	10010864 <_puts_r>
10010934:	bd10      	pop	{r4, pc}
10010936:	46c0      	nop			; (mov r8, r8)
10010938:	100153b4 	.word	0x100153b4

1001093c <rand>:
1001093c:	4b15      	ldr	r3, [pc, #84]	; (10010994 <rand+0x58>)
1001093e:	b510      	push	{r4, lr}
10010940:	681c      	ldr	r4, [r3, #0]
10010942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010944:	2b00      	cmp	r3, #0
10010946:	d115      	bne.n	10010974 <rand+0x38>
10010948:	2018      	movs	r0, #24
1001094a:	f001 fd35 	bl	100123b8 <malloc>
1001094e:	4b12      	ldr	r3, [pc, #72]	; (10010998 <rand+0x5c>)
10010950:	63a0      	str	r0, [r4, #56]	; 0x38
10010952:	8003      	strh	r3, [r0, #0]
10010954:	4b11      	ldr	r3, [pc, #68]	; (1001099c <rand+0x60>)
10010956:	2201      	movs	r2, #1
10010958:	8043      	strh	r3, [r0, #2]
1001095a:	4b11      	ldr	r3, [pc, #68]	; (100109a0 <rand+0x64>)
1001095c:	8083      	strh	r3, [r0, #4]
1001095e:	4b11      	ldr	r3, [pc, #68]	; (100109a4 <rand+0x68>)
10010960:	80c3      	strh	r3, [r0, #6]
10010962:	4b11      	ldr	r3, [pc, #68]	; (100109a8 <rand+0x6c>)
10010964:	8103      	strh	r3, [r0, #8]
10010966:	2305      	movs	r3, #5
10010968:	8143      	strh	r3, [r0, #10]
1001096a:	3306      	adds	r3, #6
1001096c:	8183      	strh	r3, [r0, #12]
1001096e:	2300      	movs	r3, #0
10010970:	6102      	str	r2, [r0, #16]
10010972:	6143      	str	r3, [r0, #20]
10010974:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10010976:	4a0d      	ldr	r2, [pc, #52]	; (100109ac <rand+0x70>)
10010978:	6920      	ldr	r0, [r4, #16]
1001097a:	6961      	ldr	r1, [r4, #20]
1001097c:	4b0c      	ldr	r3, [pc, #48]	; (100109b0 <rand+0x74>)
1001097e:	f002 feb1 	bl	100136e4 <__aeabi_lmul>
10010982:	2201      	movs	r2, #1
10010984:	2300      	movs	r3, #0
10010986:	1880      	adds	r0, r0, r2
10010988:	4159      	adcs	r1, r3
1001098a:	6120      	str	r0, [r4, #16]
1001098c:	6161      	str	r1, [r4, #20]
1001098e:	0048      	lsls	r0, r1, #1
10010990:	0840      	lsrs	r0, r0, #1
10010992:	bd10      	pop	{r4, pc}
10010994:	100153b4 	.word	0x100153b4
10010998:	0000330e 	.word	0x0000330e
1001099c:	ffffabcd 	.word	0xffffabcd
100109a0:	00001234 	.word	0x00001234
100109a4:	ffffe66d 	.word	0xffffe66d
100109a8:	ffffdeec 	.word	0xffffdeec
100109ac:	4c957f2d 	.word	0x4c957f2d
100109b0:	5851f42d 	.word	0x5851f42d

100109b4 <setbuf>:
100109b4:	424a      	negs	r2, r1
100109b6:	414a      	adcs	r2, r1
100109b8:	2380      	movs	r3, #128	; 0x80
100109ba:	b510      	push	{r4, lr}
100109bc:	0052      	lsls	r2, r2, #1
100109be:	00db      	lsls	r3, r3, #3
100109c0:	f000 f802 	bl	100109c8 <setvbuf>
100109c4:	bd10      	pop	{r4, pc}
	...

100109c8 <setvbuf>:
100109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100109ca:	001d      	movs	r5, r3
100109cc:	4b51      	ldr	r3, [pc, #324]	; (10010b14 <setvbuf+0x14c>)
100109ce:	b085      	sub	sp, #20
100109d0:	681e      	ldr	r6, [r3, #0]
100109d2:	0004      	movs	r4, r0
100109d4:	000f      	movs	r7, r1
100109d6:	9200      	str	r2, [sp, #0]
100109d8:	2e00      	cmp	r6, #0
100109da:	d005      	beq.n	100109e8 <setvbuf+0x20>
100109dc:	69b3      	ldr	r3, [r6, #24]
100109de:	2b00      	cmp	r3, #0
100109e0:	d102      	bne.n	100109e8 <setvbuf+0x20>
100109e2:	0030      	movs	r0, r6
100109e4:	f001 f8bc 	bl	10011b60 <__sinit>
100109e8:	4b4b      	ldr	r3, [pc, #300]	; (10010b18 <setvbuf+0x150>)
100109ea:	429c      	cmp	r4, r3
100109ec:	d101      	bne.n	100109f2 <setvbuf+0x2a>
100109ee:	6874      	ldr	r4, [r6, #4]
100109f0:	e008      	b.n	10010a04 <setvbuf+0x3c>
100109f2:	4b4a      	ldr	r3, [pc, #296]	; (10010b1c <setvbuf+0x154>)
100109f4:	429c      	cmp	r4, r3
100109f6:	d101      	bne.n	100109fc <setvbuf+0x34>
100109f8:	68b4      	ldr	r4, [r6, #8]
100109fa:	e003      	b.n	10010a04 <setvbuf+0x3c>
100109fc:	4b48      	ldr	r3, [pc, #288]	; (10010b20 <setvbuf+0x158>)
100109fe:	429c      	cmp	r4, r3
10010a00:	d100      	bne.n	10010a04 <setvbuf+0x3c>
10010a02:	68f4      	ldr	r4, [r6, #12]
10010a04:	9b00      	ldr	r3, [sp, #0]
10010a06:	2b02      	cmp	r3, #2
10010a08:	d005      	beq.n	10010a16 <setvbuf+0x4e>
10010a0a:	2b01      	cmp	r3, #1
10010a0c:	d900      	bls.n	10010a10 <setvbuf+0x48>
10010a0e:	e07c      	b.n	10010b0a <setvbuf+0x142>
10010a10:	2d00      	cmp	r5, #0
10010a12:	da00      	bge.n	10010a16 <setvbuf+0x4e>
10010a14:	e079      	b.n	10010b0a <setvbuf+0x142>
10010a16:	0021      	movs	r1, r4
10010a18:	0030      	movs	r0, r6
10010a1a:	f001 f833 	bl	10011a84 <_fflush_r>
10010a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010a20:	2900      	cmp	r1, #0
10010a22:	d008      	beq.n	10010a36 <setvbuf+0x6e>
10010a24:	0023      	movs	r3, r4
10010a26:	3344      	adds	r3, #68	; 0x44
10010a28:	4299      	cmp	r1, r3
10010a2a:	d002      	beq.n	10010a32 <setvbuf+0x6a>
10010a2c:	0030      	movs	r0, r6
10010a2e:	f002 f8d3 	bl	10012bd8 <_free_r>
10010a32:	2300      	movs	r3, #0
10010a34:	6363      	str	r3, [r4, #52]	; 0x34
10010a36:	2300      	movs	r3, #0
10010a38:	61a3      	str	r3, [r4, #24]
10010a3a:	6063      	str	r3, [r4, #4]
10010a3c:	89a3      	ldrh	r3, [r4, #12]
10010a3e:	061b      	lsls	r3, r3, #24
10010a40:	d503      	bpl.n	10010a4a <setvbuf+0x82>
10010a42:	6921      	ldr	r1, [r4, #16]
10010a44:	0030      	movs	r0, r6
10010a46:	f002 f8c7 	bl	10012bd8 <_free_r>
10010a4a:	89a2      	ldrh	r2, [r4, #12]
10010a4c:	4b35      	ldr	r3, [pc, #212]	; (10010b24 <setvbuf+0x15c>)
10010a4e:	4013      	ands	r3, r2
10010a50:	81a3      	strh	r3, [r4, #12]
10010a52:	9b00      	ldr	r3, [sp, #0]
10010a54:	2b02      	cmp	r3, #2
10010a56:	d021      	beq.n	10010a9c <setvbuf+0xd4>
10010a58:	ab03      	add	r3, sp, #12
10010a5a:	aa02      	add	r2, sp, #8
10010a5c:	0021      	movs	r1, r4
10010a5e:	0030      	movs	r0, r6
10010a60:	f001 fc46 	bl	100122f0 <__swhatbuf_r>
10010a64:	89a3      	ldrh	r3, [r4, #12]
10010a66:	4318      	orrs	r0, r3
10010a68:	81a0      	strh	r0, [r4, #12]
10010a6a:	2d00      	cmp	r5, #0
10010a6c:	d101      	bne.n	10010a72 <setvbuf+0xaa>
10010a6e:	9d02      	ldr	r5, [sp, #8]
10010a70:	e001      	b.n	10010a76 <setvbuf+0xae>
10010a72:	2f00      	cmp	r7, #0
10010a74:	d125      	bne.n	10010ac2 <setvbuf+0xfa>
10010a76:	0028      	movs	r0, r5
10010a78:	f001 fc9e 	bl	100123b8 <malloc>
10010a7c:	9501      	str	r5, [sp, #4]
10010a7e:	1e07      	subs	r7, r0, #0
10010a80:	d11a      	bne.n	10010ab8 <setvbuf+0xf0>
10010a82:	9b02      	ldr	r3, [sp, #8]
10010a84:	9301      	str	r3, [sp, #4]
10010a86:	42ab      	cmp	r3, r5
10010a88:	d102      	bne.n	10010a90 <setvbuf+0xc8>
10010a8a:	2001      	movs	r0, #1
10010a8c:	4240      	negs	r0, r0
10010a8e:	e006      	b.n	10010a9e <setvbuf+0xd6>
10010a90:	9801      	ldr	r0, [sp, #4]
10010a92:	f001 fc91 	bl	100123b8 <malloc>
10010a96:	1e07      	subs	r7, r0, #0
10010a98:	d10e      	bne.n	10010ab8 <setvbuf+0xf0>
10010a9a:	e7f6      	b.n	10010a8a <setvbuf+0xc2>
10010a9c:	2000      	movs	r0, #0
10010a9e:	2202      	movs	r2, #2
10010aa0:	89a3      	ldrh	r3, [r4, #12]
10010aa2:	4313      	orrs	r3, r2
10010aa4:	81a3      	strh	r3, [r4, #12]
10010aa6:	2300      	movs	r3, #0
10010aa8:	60a3      	str	r3, [r4, #8]
10010aaa:	0023      	movs	r3, r4
10010aac:	3347      	adds	r3, #71	; 0x47
10010aae:	6023      	str	r3, [r4, #0]
10010ab0:	6123      	str	r3, [r4, #16]
10010ab2:	2301      	movs	r3, #1
10010ab4:	6163      	str	r3, [r4, #20]
10010ab6:	e02a      	b.n	10010b0e <setvbuf+0x146>
10010ab8:	2280      	movs	r2, #128	; 0x80
10010aba:	89a3      	ldrh	r3, [r4, #12]
10010abc:	9d01      	ldr	r5, [sp, #4]
10010abe:	4313      	orrs	r3, r2
10010ac0:	81a3      	strh	r3, [r4, #12]
10010ac2:	69b3      	ldr	r3, [r6, #24]
10010ac4:	2b00      	cmp	r3, #0
10010ac6:	d102      	bne.n	10010ace <setvbuf+0x106>
10010ac8:	0030      	movs	r0, r6
10010aca:	f001 f849 	bl	10011b60 <__sinit>
10010ace:	9b00      	ldr	r3, [sp, #0]
10010ad0:	2b01      	cmp	r3, #1
10010ad2:	d103      	bne.n	10010adc <setvbuf+0x114>
10010ad4:	89a3      	ldrh	r3, [r4, #12]
10010ad6:	9a00      	ldr	r2, [sp, #0]
10010ad8:	431a      	orrs	r2, r3
10010ada:	81a2      	strh	r2, [r4, #12]
10010adc:	2308      	movs	r3, #8
10010ade:	89a2      	ldrh	r2, [r4, #12]
10010ae0:	6027      	str	r7, [r4, #0]
10010ae2:	4013      	ands	r3, r2
10010ae4:	6127      	str	r7, [r4, #16]
10010ae6:	6165      	str	r5, [r4, #20]
10010ae8:	1e18      	subs	r0, r3, #0
10010aea:	d00c      	beq.n	10010b06 <setvbuf+0x13e>
10010aec:	2301      	movs	r3, #1
10010aee:	401a      	ands	r2, r3
10010af0:	2300      	movs	r3, #0
10010af2:	1e10      	subs	r0, r2, #0
10010af4:	4298      	cmp	r0, r3
10010af6:	d004      	beq.n	10010b02 <setvbuf+0x13a>
10010af8:	426d      	negs	r5, r5
10010afa:	60a3      	str	r3, [r4, #8]
10010afc:	61a5      	str	r5, [r4, #24]
10010afe:	0018      	movs	r0, r3
10010b00:	e005      	b.n	10010b0e <setvbuf+0x146>
10010b02:	60a5      	str	r5, [r4, #8]
10010b04:	e003      	b.n	10010b0e <setvbuf+0x146>
10010b06:	60a3      	str	r3, [r4, #8]
10010b08:	e001      	b.n	10010b0e <setvbuf+0x146>
10010b0a:	2001      	movs	r0, #1
10010b0c:	4240      	negs	r0, r0
10010b0e:	b005      	add	sp, #20
10010b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b12:	46c0      	nop			; (mov r8, r8)
10010b14:	100153b4 	.word	0x100153b4
10010b18:	10015148 	.word	0x10015148
10010b1c:	10015168 	.word	0x10015168
10010b20:	10015188 	.word	0x10015188
10010b24:	fffff35c 	.word	0xfffff35c

10010b28 <strcpy>:
10010b28:	1c03      	adds	r3, r0, #0
10010b2a:	780a      	ldrb	r2, [r1, #0]
10010b2c:	3101      	adds	r1, #1
10010b2e:	701a      	strb	r2, [r3, #0]
10010b30:	3301      	adds	r3, #1
10010b32:	2a00      	cmp	r2, #0
10010b34:	d1f9      	bne.n	10010b2a <strcpy+0x2>
10010b36:	4770      	bx	lr

10010b38 <sulp>:
10010b38:	b570      	push	{r4, r5, r6, lr}
10010b3a:	0016      	movs	r6, r2
10010b3c:	000d      	movs	r5, r1
10010b3e:	f001 ff19 	bl	10012974 <__ulp>
10010b42:	2e00      	cmp	r6, #0
10010b44:	d00d      	beq.n	10010b62 <sulp+0x2a>
10010b46:	226b      	movs	r2, #107	; 0x6b
10010b48:	006b      	lsls	r3, r5, #1
10010b4a:	0d5b      	lsrs	r3, r3, #21
10010b4c:	1ad3      	subs	r3, r2, r3
10010b4e:	2b00      	cmp	r3, #0
10010b50:	dd07      	ble.n	10010b62 <sulp+0x2a>
10010b52:	2400      	movs	r4, #0
10010b54:	4a03      	ldr	r2, [pc, #12]	; (10010b64 <sulp+0x2c>)
10010b56:	051b      	lsls	r3, r3, #20
10010b58:	189d      	adds	r5, r3, r2
10010b5a:	002b      	movs	r3, r5
10010b5c:	0022      	movs	r2, r4
10010b5e:	f7fe fca9 	bl	1000f4b4 <__aeabi_dmul>
10010b62:	bd70      	pop	{r4, r5, r6, pc}
10010b64:	3ff00000 	.word	0x3ff00000

10010b68 <_strtod_r>:
10010b68:	2300      	movs	r3, #0
10010b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b6c:	b0a3      	sub	sp, #140	; 0x8c
10010b6e:	931e      	str	r3, [sp, #120]	; 0x78
10010b70:	2600      	movs	r6, #0
10010b72:	2700      	movs	r7, #0
10010b74:	000b      	movs	r3, r1
10010b76:	9002      	str	r0, [sp, #8]
10010b78:	9104      	str	r1, [sp, #16]
10010b7a:	9218      	str	r2, [sp, #96]	; 0x60
10010b7c:	931d      	str	r3, [sp, #116]	; 0x74
10010b7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010b80:	781a      	ldrb	r2, [r3, #0]
10010b82:	2a0d      	cmp	r2, #13
10010b84:	d805      	bhi.n	10010b92 <_strtod_r+0x2a>
10010b86:	2a09      	cmp	r2, #9
10010b88:	d214      	bcs.n	10010bb4 <_strtod_r+0x4c>
10010b8a:	2a00      	cmp	r2, #0
10010b8c:	d100      	bne.n	10010b90 <_strtod_r+0x28>
10010b8e:	e1bd      	b.n	10010f0c <_strtod_r+0x3a4>
10010b90:	e012      	b.n	10010bb8 <_strtod_r+0x50>
10010b92:	2a2b      	cmp	r2, #43	; 0x2b
10010b94:	d004      	beq.n	10010ba0 <_strtod_r+0x38>
10010b96:	2a2d      	cmp	r2, #45	; 0x2d
10010b98:	d004      	beq.n	10010ba4 <_strtod_r+0x3c>
10010b9a:	2a20      	cmp	r2, #32
10010b9c:	d10c      	bne.n	10010bb8 <_strtod_r+0x50>
10010b9e:	e009      	b.n	10010bb4 <_strtod_r+0x4c>
10010ba0:	2200      	movs	r2, #0
10010ba2:	e000      	b.n	10010ba6 <_strtod_r+0x3e>
10010ba4:	2201      	movs	r2, #1
10010ba6:	9210      	str	r2, [sp, #64]	; 0x40
10010ba8:	1c5a      	adds	r2, r3, #1
10010baa:	921d      	str	r2, [sp, #116]	; 0x74
10010bac:	785b      	ldrb	r3, [r3, #1]
10010bae:	2b00      	cmp	r3, #0
10010bb0:	d104      	bne.n	10010bbc <_strtod_r+0x54>
10010bb2:	e1ab      	b.n	10010f0c <_strtod_r+0x3a4>
10010bb4:	3301      	adds	r3, #1
10010bb6:	e7e1      	b.n	10010b7c <_strtod_r+0x14>
10010bb8:	2300      	movs	r3, #0
10010bba:	9310      	str	r3, [sp, #64]	; 0x40
10010bbc:	2200      	movs	r2, #0
10010bbe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
10010bc0:	9209      	str	r2, [sp, #36]	; 0x24
10010bc2:	782b      	ldrb	r3, [r5, #0]
10010bc4:	2b30      	cmp	r3, #48	; 0x30
10010bc6:	d15d      	bne.n	10010c84 <_strtod_r+0x11c>
10010bc8:	786b      	ldrb	r3, [r5, #1]
10010bca:	2b58      	cmp	r3, #88	; 0x58
10010bcc:	d001      	beq.n	10010bd2 <_strtod_r+0x6a>
10010bce:	2b78      	cmp	r3, #120	; 0x78
10010bd0:	d14c      	bne.n	10010c6c <_strtod_r+0x104>
10010bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
10010bd4:	4ac2      	ldr	r2, [pc, #776]	; (10010ee0 <_strtod_r+0x378>)
10010bd6:	9301      	str	r3, [sp, #4]
10010bd8:	ab1e      	add	r3, sp, #120	; 0x78
10010bda:	9300      	str	r3, [sp, #0]
10010bdc:	a91d      	add	r1, sp, #116	; 0x74
10010bde:	ab1f      	add	r3, sp, #124	; 0x7c
10010be0:	9802      	ldr	r0, [sp, #8]
10010be2:	f001 f899 	bl	10011d18 <__gethex>
10010be6:	2407      	movs	r4, #7
10010be8:	9003      	str	r0, [sp, #12]
10010bea:	4004      	ands	r4, r0
10010bec:	d101      	bne.n	10010bf2 <_strtod_r+0x8a>
10010bee:	f000 fdbc 	bl	1001176a <_strtod_r+0xc02>
10010bf2:	2c06      	cmp	r4, #6
10010bf4:	d105      	bne.n	10010c02 <_strtod_r+0x9a>
10010bf6:	2300      	movs	r3, #0
10010bf8:	3501      	adds	r5, #1
10010bfa:	951d      	str	r5, [sp, #116]	; 0x74
10010bfc:	9310      	str	r3, [sp, #64]	; 0x40
10010bfe:	f000 fdb4 	bl	1001176a <_strtod_r+0xc02>
10010c02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
10010c04:	2a00      	cmp	r2, #0
10010c06:	d007      	beq.n	10010c18 <_strtod_r+0xb0>
10010c08:	2135      	movs	r1, #53	; 0x35
10010c0a:	a820      	add	r0, sp, #128	; 0x80
10010c0c:	f001 ff9e 	bl	10012b4c <__copybits>
10010c10:	991e      	ldr	r1, [sp, #120]	; 0x78
10010c12:	9802      	ldr	r0, [sp, #8]
10010c14:	f001 fc12 	bl	1001243c <_Bfree>
10010c18:	2c06      	cmp	r4, #6
10010c1a:	d81d      	bhi.n	10010c58 <_strtod_r+0xf0>
10010c1c:	0020      	movs	r0, r4
10010c1e:	f7fe f8c1 	bl	1000eda4 <__gnu_thumb1_case_uqi>
10010c22:	0a04      	.short	0x0a04
10010c24:	0a181507 	.word	0x0a181507
10010c28:	04          	.byte	0x04
10010c29:	00          	.byte	0x00
10010c2a:	2700      	movs	r7, #0
10010c2c:	003e      	movs	r6, r7
10010c2e:	e013      	b.n	10010c58 <_strtod_r+0xf0>
10010c30:	9e20      	ldr	r6, [sp, #128]	; 0x80
10010c32:	9f21      	ldr	r7, [sp, #132]	; 0x84
10010c34:	e010      	b.n	10010c58 <_strtod_r+0xf0>
10010c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010c38:	4aaa      	ldr	r2, [pc, #680]	; (10010ee4 <_strtod_r+0x37c>)
10010c3a:	49ab      	ldr	r1, [pc, #684]	; (10010ee8 <_strtod_r+0x380>)
10010c3c:	401a      	ands	r2, r3
10010c3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10010c40:	9e20      	ldr	r6, [sp, #128]	; 0x80
10010c42:	185b      	adds	r3, r3, r1
10010c44:	051b      	lsls	r3, r3, #20
10010c46:	431a      	orrs	r2, r3
10010c48:	0017      	movs	r7, r2
10010c4a:	e005      	b.n	10010c58 <_strtod_r+0xf0>
10010c4c:	4fa7      	ldr	r7, [pc, #668]	; (10010eec <_strtod_r+0x384>)
10010c4e:	2600      	movs	r6, #0
10010c50:	e002      	b.n	10010c58 <_strtod_r+0xf0>
10010c52:	2601      	movs	r6, #1
10010c54:	4fa6      	ldr	r7, [pc, #664]	; (10010ef0 <_strtod_r+0x388>)
10010c56:	4276      	negs	r6, r6
10010c58:	9b03      	ldr	r3, [sp, #12]
10010c5a:	071b      	lsls	r3, r3, #28
10010c5c:	d401      	bmi.n	10010c62 <_strtod_r+0xfa>
10010c5e:	f000 fd84 	bl	1001176a <_strtod_r+0xc02>
10010c62:	2380      	movs	r3, #128	; 0x80
10010c64:	061b      	lsls	r3, r3, #24
10010c66:	431f      	orrs	r7, r3
10010c68:	f000 fd7f 	bl	1001176a <_strtod_r+0xc02>
10010c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010c6e:	1c5a      	adds	r2, r3, #1
10010c70:	921d      	str	r2, [sp, #116]	; 0x74
10010c72:	785b      	ldrb	r3, [r3, #1]
10010c74:	2b30      	cmp	r3, #48	; 0x30
10010c76:	d0f9      	beq.n	10010c6c <_strtod_r+0x104>
10010c78:	2b00      	cmp	r3, #0
10010c7a:	d101      	bne.n	10010c80 <_strtod_r+0x118>
10010c7c:	f000 fd75 	bl	1001176a <_strtod_r+0xc02>
10010c80:	2301      	movs	r3, #1
10010c82:	9309      	str	r3, [sp, #36]	; 0x24
10010c84:	2500      	movs	r5, #0
10010c86:	220a      	movs	r2, #10
10010c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010c8a:	9508      	str	r5, [sp, #32]
10010c8c:	930c      	str	r3, [sp, #48]	; 0x30
10010c8e:	9506      	str	r5, [sp, #24]
10010c90:	9c1d      	ldr	r4, [sp, #116]	; 0x74
10010c92:	7823      	ldrb	r3, [r4, #0]
10010c94:	9303      	str	r3, [sp, #12]
10010c96:	3b30      	subs	r3, #48	; 0x30
10010c98:	b2d9      	uxtb	r1, r3
10010c9a:	2909      	cmp	r1, #9
10010c9c:	d810      	bhi.n	10010cc0 <_strtod_r+0x158>
10010c9e:	9906      	ldr	r1, [sp, #24]
10010ca0:	2908      	cmp	r1, #8
10010ca2:	dc04      	bgt.n	10010cae <_strtod_r+0x146>
10010ca4:	9908      	ldr	r1, [sp, #32]
10010ca6:	4351      	muls	r1, r2
10010ca8:	185b      	adds	r3, r3, r1
10010caa:	9308      	str	r3, [sp, #32]
10010cac:	e002      	b.n	10010cb4 <_strtod_r+0x14c>
10010cae:	0029      	movs	r1, r5
10010cb0:	4351      	muls	r1, r2
10010cb2:	185d      	adds	r5, r3, r1
10010cb4:	9b06      	ldr	r3, [sp, #24]
10010cb6:	3401      	adds	r4, #1
10010cb8:	3301      	adds	r3, #1
10010cba:	9306      	str	r3, [sp, #24]
10010cbc:	941d      	str	r4, [sp, #116]	; 0x74
10010cbe:	e7e7      	b.n	10010c90 <_strtod_r+0x128>
10010cc0:	9802      	ldr	r0, [sp, #8]
10010cc2:	f001 fb11 	bl	100122e8 <_localeconv_r>
10010cc6:	6803      	ldr	r3, [r0, #0]
10010cc8:	9802      	ldr	r0, [sp, #8]
10010cca:	9305      	str	r3, [sp, #20]
10010ccc:	f001 fb0c 	bl	100122e8 <_localeconv_r>
10010cd0:	6800      	ldr	r0, [r0, #0]
10010cd2:	f002 fb85 	bl	100133e0 <strlen>
10010cd6:	9905      	ldr	r1, [sp, #20]
10010cd8:	0002      	movs	r2, r0
10010cda:	0020      	movs	r0, r4
10010cdc:	f002 fb87 	bl	100133ee <strncmp>
10010ce0:	1e04      	subs	r4, r0, #0
10010ce2:	d006      	beq.n	10010cf2 <_strtod_r+0x18a>
10010ce4:	2000      	movs	r0, #0
10010ce6:	9a06      	ldr	r2, [sp, #24]
10010ce8:	9b03      	ldr	r3, [sp, #12]
10010cea:	4684      	mov	ip, r0
10010cec:	9203      	str	r2, [sp, #12]
10010cee:	9005      	str	r0, [sp, #20]
10010cf0:	e05a      	b.n	10010da8 <_strtod_r+0x240>
10010cf2:	9802      	ldr	r0, [sp, #8]
10010cf4:	f001 faf8 	bl	100122e8 <_localeconv_r>
10010cf8:	6800      	ldr	r0, [r0, #0]
10010cfa:	f002 fb71 	bl	100133e0 <strlen>
10010cfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010d00:	9a06      	ldr	r2, [sp, #24]
10010d02:	1818      	adds	r0, r3, r0
10010d04:	901d      	str	r0, [sp, #116]	; 0x74
10010d06:	7803      	ldrb	r3, [r0, #0]
10010d08:	1e10      	subs	r0, r2, #0
10010d0a:	d13e      	bne.n	10010d8a <_strtod_r+0x222>
10010d0c:	2b30      	cmp	r3, #48	; 0x30
10010d0e:	d105      	bne.n	10010d1c <_strtod_r+0x1b4>
10010d10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010d12:	3001      	adds	r0, #1
10010d14:	1c5a      	adds	r2, r3, #1
10010d16:	921d      	str	r2, [sp, #116]	; 0x74
10010d18:	785b      	ldrb	r3, [r3, #1]
10010d1a:	e7f7      	b.n	10010d0c <_strtod_r+0x1a4>
10010d1c:	001a      	movs	r2, r3
10010d1e:	3a31      	subs	r2, #49	; 0x31
10010d20:	2a08      	cmp	r2, #8
10010d22:	d83c      	bhi.n	10010d9e <_strtod_r+0x236>
10010d24:	4684      	mov	ip, r0
10010d26:	2000      	movs	r0, #0
10010d28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
10010d2a:	9003      	str	r0, [sp, #12]
10010d2c:	920c      	str	r2, [sp, #48]	; 0x30
10010d2e:	3b30      	subs	r3, #48	; 0x30
10010d30:	1c42      	adds	r2, r0, #1
10010d32:	2b00      	cmp	r3, #0
10010d34:	d023      	beq.n	10010d7e <_strtod_r+0x216>
10010d36:	210a      	movs	r1, #10
10010d38:	4494      	add	ip, r2
10010d3a:	9a03      	ldr	r2, [sp, #12]
10010d3c:	1810      	adds	r0, r2, r0
10010d3e:	4282      	cmp	r2, r0
10010d40:	d00b      	beq.n	10010d5a <_strtod_r+0x1f2>
10010d42:	3201      	adds	r2, #1
10010d44:	1e54      	subs	r4, r2, #1
10010d46:	2c08      	cmp	r4, #8
10010d48:	d803      	bhi.n	10010d52 <_strtod_r+0x1ea>
10010d4a:	9c08      	ldr	r4, [sp, #32]
10010d4c:	434c      	muls	r4, r1
10010d4e:	9408      	str	r4, [sp, #32]
10010d50:	e7f5      	b.n	10010d3e <_strtod_r+0x1d6>
10010d52:	2a10      	cmp	r2, #16
10010d54:	dcf3      	bgt.n	10010d3e <_strtod_r+0x1d6>
10010d56:	434d      	muls	r5, r1
10010d58:	e7f1      	b.n	10010d3e <_strtod_r+0x1d6>
10010d5a:	1c51      	adds	r1, r2, #1
10010d5c:	9103      	str	r1, [sp, #12]
10010d5e:	2a08      	cmp	r2, #8
10010d60:	dc06      	bgt.n	10010d70 <_strtod_r+0x208>
10010d62:	220a      	movs	r2, #10
10010d64:	9908      	ldr	r1, [sp, #32]
10010d66:	434a      	muls	r2, r1
10010d68:	189b      	adds	r3, r3, r2
10010d6a:	9308      	str	r3, [sp, #32]
10010d6c:	2200      	movs	r2, #0
10010d6e:	e006      	b.n	10010d7e <_strtod_r+0x216>
10010d70:	9903      	ldr	r1, [sp, #12]
10010d72:	2200      	movs	r2, #0
10010d74:	2910      	cmp	r1, #16
10010d76:	dc02      	bgt.n	10010d7e <_strtod_r+0x216>
10010d78:	210a      	movs	r1, #10
10010d7a:	4369      	muls	r1, r5
10010d7c:	185d      	adds	r5, r3, r1
10010d7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010d80:	0010      	movs	r0, r2
10010d82:	1c59      	adds	r1, r3, #1
10010d84:	911d      	str	r1, [sp, #116]	; 0x74
10010d86:	785b      	ldrb	r3, [r3, #1]
10010d88:	e003      	b.n	10010d92 <_strtod_r+0x22a>
10010d8a:	0020      	movs	r0, r4
10010d8c:	46a4      	mov	ip, r4
10010d8e:	9a06      	ldr	r2, [sp, #24]
10010d90:	9203      	str	r2, [sp, #12]
10010d92:	001a      	movs	r2, r3
10010d94:	3a30      	subs	r2, #48	; 0x30
10010d96:	2a09      	cmp	r2, #9
10010d98:	d9c9      	bls.n	10010d2e <_strtod_r+0x1c6>
10010d9a:	2201      	movs	r2, #1
10010d9c:	e003      	b.n	10010da6 <_strtod_r+0x23e>
10010d9e:	2200      	movs	r2, #0
10010da0:	9203      	str	r2, [sp, #12]
10010da2:	4694      	mov	ip, r2
10010da4:	3201      	adds	r2, #1
10010da6:	9205      	str	r2, [sp, #20]
10010da8:	2220      	movs	r2, #32
10010daa:	0019      	movs	r1, r3
10010dac:	4391      	bics	r1, r2
10010dae:	000a      	movs	r2, r1
10010db0:	2100      	movs	r1, #0
10010db2:	2a45      	cmp	r2, #69	; 0x45
10010db4:	d14d      	bne.n	10010e52 <_strtod_r+0x2ea>
10010db6:	9b03      	ldr	r3, [sp, #12]
10010db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010dba:	4303      	orrs	r3, r0
10010dbc:	4313      	orrs	r3, r2
10010dbe:	428b      	cmp	r3, r1
10010dc0:	d100      	bne.n	10010dc4 <_strtod_r+0x25c>
10010dc2:	e0a3      	b.n	10010f0c <_strtod_r+0x3a4>
10010dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010dc6:	9304      	str	r3, [sp, #16]
10010dc8:	3301      	adds	r3, #1
10010dca:	931d      	str	r3, [sp, #116]	; 0x74
10010dcc:	9b04      	ldr	r3, [sp, #16]
10010dce:	785b      	ldrb	r3, [r3, #1]
10010dd0:	2b2b      	cmp	r3, #43	; 0x2b
10010dd2:	d004      	beq.n	10010dde <_strtod_r+0x276>
10010dd4:	000c      	movs	r4, r1
10010dd6:	2b2d      	cmp	r3, #45	; 0x2d
10010dd8:	d107      	bne.n	10010dea <_strtod_r+0x282>
10010dda:	2401      	movs	r4, #1
10010ddc:	e000      	b.n	10010de0 <_strtod_r+0x278>
10010dde:	000c      	movs	r4, r1
10010de0:	9b04      	ldr	r3, [sp, #16]
10010de2:	3302      	adds	r3, #2
10010de4:	931d      	str	r3, [sp, #116]	; 0x74
10010de6:	9b04      	ldr	r3, [sp, #16]
10010de8:	789b      	ldrb	r3, [r3, #2]
10010dea:	001a      	movs	r2, r3
10010dec:	3a30      	subs	r2, #48	; 0x30
10010dee:	2a09      	cmp	r2, #9
10010df0:	d82c      	bhi.n	10010e4c <_strtod_r+0x2e4>
10010df2:	2b30      	cmp	r3, #48	; 0x30
10010df4:	d104      	bne.n	10010e00 <_strtod_r+0x298>
10010df6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010df8:	1c5a      	adds	r2, r3, #1
10010dfa:	921d      	str	r2, [sp, #116]	; 0x74
10010dfc:	785b      	ldrb	r3, [r3, #1]
10010dfe:	e7f8      	b.n	10010df2 <_strtod_r+0x28a>
10010e00:	001a      	movs	r2, r3
10010e02:	3a31      	subs	r2, #49	; 0x31
10010e04:	2100      	movs	r1, #0
10010e06:	2a08      	cmp	r2, #8
10010e08:	d823      	bhi.n	10010e52 <_strtod_r+0x2ea>
10010e0a:	3b30      	subs	r3, #48	; 0x30
10010e0c:	930a      	str	r3, [sp, #40]	; 0x28
10010e0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010e10:	9311      	str	r3, [sp, #68]	; 0x44
10010e12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010e14:	1c59      	adds	r1, r3, #1
10010e16:	911d      	str	r1, [sp, #116]	; 0x74
10010e18:	785b      	ldrb	r3, [r3, #1]
10010e1a:	001a      	movs	r2, r3
10010e1c:	3a30      	subs	r2, #48	; 0x30
10010e1e:	2a09      	cmp	r2, #9
10010e20:	d806      	bhi.n	10010e30 <_strtod_r+0x2c8>
10010e22:	220a      	movs	r2, #10
10010e24:	990a      	ldr	r1, [sp, #40]	; 0x28
10010e26:	434a      	muls	r2, r1
10010e28:	18d2      	adds	r2, r2, r3
10010e2a:	3a30      	subs	r2, #48	; 0x30
10010e2c:	920a      	str	r2, [sp, #40]	; 0x28
10010e2e:	e7f0      	b.n	10010e12 <_strtod_r+0x2aa>
10010e30:	9a11      	ldr	r2, [sp, #68]	; 0x44
10010e32:	1a8a      	subs	r2, r1, r2
10010e34:	492f      	ldr	r1, [pc, #188]	; (10010ef4 <_strtod_r+0x38c>)
10010e36:	2a08      	cmp	r2, #8
10010e38:	dc04      	bgt.n	10010e44 <_strtod_r+0x2dc>
10010e3a:	990a      	ldr	r1, [sp, #40]	; 0x28
10010e3c:	4a2d      	ldr	r2, [pc, #180]	; (10010ef4 <_strtod_r+0x38c>)
10010e3e:	4291      	cmp	r1, r2
10010e40:	dd00      	ble.n	10010e44 <_strtod_r+0x2dc>
10010e42:	0011      	movs	r1, r2
10010e44:	2c00      	cmp	r4, #0
10010e46:	d004      	beq.n	10010e52 <_strtod_r+0x2ea>
10010e48:	4249      	negs	r1, r1
10010e4a:	e002      	b.n	10010e52 <_strtod_r+0x2ea>
10010e4c:	2100      	movs	r1, #0
10010e4e:	9a04      	ldr	r2, [sp, #16]
10010e50:	921d      	str	r2, [sp, #116]	; 0x74
10010e52:	9a03      	ldr	r2, [sp, #12]
10010e54:	2a00      	cmp	r2, #0
10010e56:	d164      	bne.n	10010f22 <_strtod_r+0x3ba>
10010e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010e5a:	4310      	orrs	r0, r2
10010e5c:	d001      	beq.n	10010e62 <_strtod_r+0x2fa>
10010e5e:	f000 fc84 	bl	1001176a <_strtod_r+0xc02>
10010e62:	9a05      	ldr	r2, [sp, #20]
10010e64:	2a00      	cmp	r2, #0
10010e66:	d151      	bne.n	10010f0c <_strtod_r+0x3a4>
10010e68:	2b4e      	cmp	r3, #78	; 0x4e
10010e6a:	d01c      	beq.n	10010ea6 <_strtod_r+0x33e>
10010e6c:	dc02      	bgt.n	10010e74 <_strtod_r+0x30c>
10010e6e:	2b49      	cmp	r3, #73	; 0x49
10010e70:	d005      	beq.n	10010e7e <_strtod_r+0x316>
10010e72:	e04b      	b.n	10010f0c <_strtod_r+0x3a4>
10010e74:	2b69      	cmp	r3, #105	; 0x69
10010e76:	d002      	beq.n	10010e7e <_strtod_r+0x316>
10010e78:	2b6e      	cmp	r3, #110	; 0x6e
10010e7a:	d014      	beq.n	10010ea6 <_strtod_r+0x33e>
10010e7c:	e046      	b.n	10010f0c <_strtod_r+0x3a4>
10010e7e:	491e      	ldr	r1, [pc, #120]	; (10010ef8 <_strtod_r+0x390>)
10010e80:	a81d      	add	r0, sp, #116	; 0x74
10010e82:	f001 f985 	bl	10012190 <__match>
10010e86:	2800      	cmp	r0, #0
10010e88:	d040      	beq.n	10010f0c <_strtod_r+0x3a4>
10010e8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010e8c:	491b      	ldr	r1, [pc, #108]	; (10010efc <_strtod_r+0x394>)
10010e8e:	3b01      	subs	r3, #1
10010e90:	a81d      	add	r0, sp, #116	; 0x74
10010e92:	931d      	str	r3, [sp, #116]	; 0x74
10010e94:	f001 f97c 	bl	10012190 <__match>
10010e98:	2800      	cmp	r0, #0
10010e9a:	d102      	bne.n	10010ea2 <_strtod_r+0x33a>
10010e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010e9e:	3301      	adds	r3, #1
10010ea0:	931d      	str	r3, [sp, #116]	; 0x74
10010ea2:	4f12      	ldr	r7, [pc, #72]	; (10010eec <_strtod_r+0x384>)
10010ea4:	e018      	b.n	10010ed8 <_strtod_r+0x370>
10010ea6:	4916      	ldr	r1, [pc, #88]	; (10010f00 <_strtod_r+0x398>)
10010ea8:	a81d      	add	r0, sp, #116	; 0x74
10010eaa:	f001 f971 	bl	10012190 <__match>
10010eae:	2800      	cmp	r0, #0
10010eb0:	d02c      	beq.n	10010f0c <_strtod_r+0x3a4>
10010eb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10010eb4:	781b      	ldrb	r3, [r3, #0]
10010eb6:	2b28      	cmp	r3, #40	; 0x28
10010eb8:	d10d      	bne.n	10010ed6 <_strtod_r+0x36e>
10010eba:	aa20      	add	r2, sp, #128	; 0x80
10010ebc:	4911      	ldr	r1, [pc, #68]	; (10010f04 <_strtod_r+0x39c>)
10010ebe:	a81d      	add	r0, sp, #116	; 0x74
10010ec0:	f001 f97a 	bl	100121b8 <__hexnan>
10010ec4:	2805      	cmp	r0, #5
10010ec6:	d106      	bne.n	10010ed6 <_strtod_r+0x36e>
10010ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
10010eca:	4a08      	ldr	r2, [pc, #32]	; (10010eec <_strtod_r+0x384>)
10010ecc:	9e20      	ldr	r6, [sp, #128]	; 0x80
10010ece:	431a      	orrs	r2, r3
10010ed0:	0017      	movs	r7, r2
10010ed2:	f000 fc4a 	bl	1001176a <_strtod_r+0xc02>
10010ed6:	4f0c      	ldr	r7, [pc, #48]	; (10010f08 <_strtod_r+0x3a0>)
10010ed8:	2600      	movs	r6, #0
10010eda:	f000 fc46 	bl	1001176a <_strtod_r+0xc02>
10010ede:	46c0      	nop			; (mov r8, r8)
10010ee0:	100150ec 	.word	0x100150ec
10010ee4:	ffefffff 	.word	0xffefffff
10010ee8:	00000433 	.word	0x00000433
10010eec:	7ff00000 	.word	0x7ff00000
10010ef0:	7fffffff 	.word	0x7fffffff
10010ef4:	00004e1f 	.word	0x00004e1f
10010ef8:	10015100 	.word	0x10015100
10010efc:	10015103 	.word	0x10015103
10010f00:	10015109 	.word	0x10015109
10010f04:	1001510c 	.word	0x1001510c
10010f08:	fff80000 	.word	0xfff80000
10010f0c:	9b04      	ldr	r3, [sp, #16]
10010f0e:	931d      	str	r3, [sp, #116]	; 0x74
10010f10:	2300      	movs	r3, #0
10010f12:	9310      	str	r3, [sp, #64]	; 0x40
10010f14:	9b18      	ldr	r3, [sp, #96]	; 0x60
10010f16:	2b00      	cmp	r3, #0
10010f18:	d001      	beq.n	10010f1e <_strtod_r+0x3b6>
10010f1a:	f000 fc29 	bl	10011770 <_strtod_r+0xc08>
10010f1e:	f000 fc32 	bl	10011786 <_strtod_r+0xc1e>
10010f22:	4663      	mov	r3, ip
10010f24:	1acb      	subs	r3, r1, r3
10010f26:	9305      	str	r3, [sp, #20]
10010f28:	9b06      	ldr	r3, [sp, #24]
10010f2a:	2b00      	cmp	r3, #0
10010f2c:	d101      	bne.n	10010f32 <_strtod_r+0x3ca>
10010f2e:	9b03      	ldr	r3, [sp, #12]
10010f30:	9306      	str	r3, [sp, #24]
10010f32:	9c03      	ldr	r4, [sp, #12]
10010f34:	2c10      	cmp	r4, #16
10010f36:	dd00      	ble.n	10010f3a <_strtod_r+0x3d2>
10010f38:	2410      	movs	r4, #16
10010f3a:	9808      	ldr	r0, [sp, #32]
10010f3c:	f7ff f900 	bl	10010140 <__aeabi_ui2d>
10010f40:	0006      	movs	r6, r0
10010f42:	000f      	movs	r7, r1
10010f44:	2c09      	cmp	r4, #9
10010f46:	dd15      	ble.n	10010f74 <_strtod_r+0x40c>
10010f48:	0023      	movs	r3, r4
10010f4a:	4a87      	ldr	r2, [pc, #540]	; (10011168 <_strtod_r+0x600>)
10010f4c:	3b09      	subs	r3, #9
10010f4e:	00db      	lsls	r3, r3, #3
10010f50:	18d3      	adds	r3, r2, r3
10010f52:	681a      	ldr	r2, [r3, #0]
10010f54:	685b      	ldr	r3, [r3, #4]
10010f56:	f7fe faad 	bl	1000f4b4 <__aeabi_dmul>
10010f5a:	0006      	movs	r6, r0
10010f5c:	0028      	movs	r0, r5
10010f5e:	000f      	movs	r7, r1
10010f60:	f7ff f8ee 	bl	10010140 <__aeabi_ui2d>
10010f64:	0002      	movs	r2, r0
10010f66:	000b      	movs	r3, r1
10010f68:	0030      	movs	r0, r6
10010f6a:	0039      	movs	r1, r7
10010f6c:	f002 fbe6 	bl	1001373c <__aeabi_dadd>
10010f70:	0006      	movs	r6, r0
10010f72:	000f      	movs	r7, r1
10010f74:	9b03      	ldr	r3, [sp, #12]
10010f76:	2b0f      	cmp	r3, #15
10010f78:	dc3a      	bgt.n	10010ff0 <_strtod_r+0x488>
10010f7a:	9b05      	ldr	r3, [sp, #20]
10010f7c:	2b00      	cmp	r3, #0
10010f7e:	d101      	bne.n	10010f84 <_strtod_r+0x41c>
10010f80:	f000 fbf3 	bl	1001176a <_strtod_r+0xc02>
10010f84:	dd26      	ble.n	10010fd4 <_strtod_r+0x46c>
10010f86:	2b16      	cmp	r3, #22
10010f88:	dc07      	bgt.n	10010f9a <_strtod_r+0x432>
10010f8a:	4977      	ldr	r1, [pc, #476]	; (10011168 <_strtod_r+0x600>)
10010f8c:	00db      	lsls	r3, r3, #3
10010f8e:	18c9      	adds	r1, r1, r3
10010f90:	0032      	movs	r2, r6
10010f92:	6808      	ldr	r0, [r1, #0]
10010f94:	6849      	ldr	r1, [r1, #4]
10010f96:	003b      	movs	r3, r7
10010f98:	e017      	b.n	10010fca <_strtod_r+0x462>
10010f9a:	2325      	movs	r3, #37	; 0x25
10010f9c:	9a03      	ldr	r2, [sp, #12]
10010f9e:	1a9b      	subs	r3, r3, r2
10010fa0:	9a05      	ldr	r2, [sp, #20]
10010fa2:	429a      	cmp	r2, r3
10010fa4:	dc24      	bgt.n	10010ff0 <_strtod_r+0x488>
10010fa6:	240f      	movs	r4, #15
10010fa8:	9b03      	ldr	r3, [sp, #12]
10010faa:	4d6f      	ldr	r5, [pc, #444]	; (10011168 <_strtod_r+0x600>)
10010fac:	1ae4      	subs	r4, r4, r3
10010fae:	00e1      	lsls	r1, r4, #3
10010fb0:	1869      	adds	r1, r5, r1
10010fb2:	0032      	movs	r2, r6
10010fb4:	6808      	ldr	r0, [r1, #0]
10010fb6:	6849      	ldr	r1, [r1, #4]
10010fb8:	003b      	movs	r3, r7
10010fba:	f7fe fa7b 	bl	1000f4b4 <__aeabi_dmul>
10010fbe:	9b05      	ldr	r3, [sp, #20]
10010fc0:	1b1c      	subs	r4, r3, r4
10010fc2:	00e4      	lsls	r4, r4, #3
10010fc4:	192d      	adds	r5, r5, r4
10010fc6:	682a      	ldr	r2, [r5, #0]
10010fc8:	686b      	ldr	r3, [r5, #4]
10010fca:	f7fe fa73 	bl	1000f4b4 <__aeabi_dmul>
10010fce:	0006      	movs	r6, r0
10010fd0:	000f      	movs	r7, r1
10010fd2:	e3ca      	b.n	1001176a <_strtod_r+0xc02>
10010fd4:	9b05      	ldr	r3, [sp, #20]
10010fd6:	3316      	adds	r3, #22
10010fd8:	db0a      	blt.n	10010ff0 <_strtod_r+0x488>
10010fda:	9b05      	ldr	r3, [sp, #20]
10010fdc:	0030      	movs	r0, r6
10010fde:	00da      	lsls	r2, r3, #3
10010fe0:	4b61      	ldr	r3, [pc, #388]	; (10011168 <_strtod_r+0x600>)
10010fe2:	0039      	movs	r1, r7
10010fe4:	1a9b      	subs	r3, r3, r2
10010fe6:	681a      	ldr	r2, [r3, #0]
10010fe8:	685b      	ldr	r3, [r3, #4]
10010fea:	f002 fed3 	bl	10013d94 <__aeabi_ddiv>
10010fee:	e7ee      	b.n	10010fce <_strtod_r+0x466>
10010ff0:	9b03      	ldr	r3, [sp, #12]
10010ff2:	1b1c      	subs	r4, r3, r4
10010ff4:	9b05      	ldr	r3, [sp, #20]
10010ff6:	18e4      	adds	r4, r4, r3
10010ff8:	2c00      	cmp	r4, #0
10010ffa:	dd59      	ble.n	100110b0 <_strtod_r+0x548>
10010ffc:	230f      	movs	r3, #15
10010ffe:	4023      	ands	r3, r4
10011000:	d00a      	beq.n	10011018 <_strtod_r+0x4b0>
10011002:	4959      	ldr	r1, [pc, #356]	; (10011168 <_strtod_r+0x600>)
10011004:	00db      	lsls	r3, r3, #3
10011006:	18c9      	adds	r1, r1, r3
10011008:	0032      	movs	r2, r6
1001100a:	6808      	ldr	r0, [r1, #0]
1001100c:	6849      	ldr	r1, [r1, #4]
1001100e:	003b      	movs	r3, r7
10011010:	f7fe fa50 	bl	1000f4b4 <__aeabi_dmul>
10011014:	0006      	movs	r6, r0
10011016:	000f      	movs	r7, r1
10011018:	230f      	movs	r3, #15
1001101a:	439c      	bics	r4, r3
1001101c:	d100      	bne.n	10011020 <_strtod_r+0x4b8>
1001101e:	e0b3      	b.n	10011188 <_strtod_r+0x620>
10011020:	3326      	adds	r3, #38	; 0x26
10011022:	33ff      	adds	r3, #255	; 0xff
10011024:	429c      	cmp	r4, r3
10011026:	dd0d      	ble.n	10011044 <_strtod_r+0x4dc>
10011028:	2400      	movs	r4, #0
1001102a:	9403      	str	r4, [sp, #12]
1001102c:	9408      	str	r4, [sp, #32]
1001102e:	9405      	str	r4, [sp, #20]
10011030:	2322      	movs	r3, #34	; 0x22
10011032:	2600      	movs	r6, #0
10011034:	9a02      	ldr	r2, [sp, #8]
10011036:	4f4d      	ldr	r7, [pc, #308]	; (1001116c <_strtod_r+0x604>)
10011038:	6013      	str	r3, [r2, #0]
1001103a:	9b08      	ldr	r3, [sp, #32]
1001103c:	42b3      	cmp	r3, r6
1001103e:	d000      	beq.n	10011042 <_strtod_r+0x4da>
10011040:	e37f      	b.n	10011742 <_strtod_r+0xbda>
10011042:	e392      	b.n	1001176a <_strtod_r+0xc02>
10011044:	2300      	movs	r3, #0
10011046:	0030      	movs	r0, r6
10011048:	0039      	movs	r1, r7
1001104a:	001d      	movs	r5, r3
1001104c:	1124      	asrs	r4, r4, #4
1001104e:	2c01      	cmp	r4, #1
10011050:	dd0d      	ble.n	1001106e <_strtod_r+0x506>
10011052:	2201      	movs	r2, #1
10011054:	4214      	tst	r4, r2
10011056:	d007      	beq.n	10011068 <_strtod_r+0x500>
10011058:	4a45      	ldr	r2, [pc, #276]	; (10011170 <_strtod_r+0x608>)
1001105a:	00eb      	lsls	r3, r5, #3
1001105c:	189b      	adds	r3, r3, r2
1001105e:	681a      	ldr	r2, [r3, #0]
10011060:	685b      	ldr	r3, [r3, #4]
10011062:	f7fe fa27 	bl	1000f4b4 <__aeabi_dmul>
10011066:	2301      	movs	r3, #1
10011068:	3501      	adds	r5, #1
1001106a:	1064      	asrs	r4, r4, #1
1001106c:	e7ef      	b.n	1001104e <_strtod_r+0x4e6>
1001106e:	2b00      	cmp	r3, #0
10011070:	d001      	beq.n	10011076 <_strtod_r+0x50e>
10011072:	0006      	movs	r6, r0
10011074:	000f      	movs	r7, r1
10011076:	4b3f      	ldr	r3, [pc, #252]	; (10011174 <_strtod_r+0x60c>)
10011078:	00ed      	lsls	r5, r5, #3
1001107a:	18ff      	adds	r7, r7, r3
1001107c:	4b3c      	ldr	r3, [pc, #240]	; (10011170 <_strtod_r+0x608>)
1001107e:	0032      	movs	r2, r6
10011080:	195d      	adds	r5, r3, r5
10011082:	6828      	ldr	r0, [r5, #0]
10011084:	6869      	ldr	r1, [r5, #4]
10011086:	003b      	movs	r3, r7
10011088:	f7fe fa14 	bl	1000f4b4 <__aeabi_dmul>
1001108c:	4b37      	ldr	r3, [pc, #220]	; (1001116c <_strtod_r+0x604>)
1001108e:	000f      	movs	r7, r1
10011090:	400b      	ands	r3, r1
10011092:	4939      	ldr	r1, [pc, #228]	; (10011178 <_strtod_r+0x610>)
10011094:	0006      	movs	r6, r0
10011096:	428b      	cmp	r3, r1
10011098:	d8c6      	bhi.n	10011028 <_strtod_r+0x4c0>
1001109a:	4938      	ldr	r1, [pc, #224]	; (1001117c <_strtod_r+0x614>)
1001109c:	428b      	cmp	r3, r1
1001109e:	d903      	bls.n	100110a8 <_strtod_r+0x540>
100110a0:	2601      	movs	r6, #1
100110a2:	4f37      	ldr	r7, [pc, #220]	; (10011180 <_strtod_r+0x618>)
100110a4:	4276      	negs	r6, r6
100110a6:	e06f      	b.n	10011188 <_strtod_r+0x620>
100110a8:	23d4      	movs	r3, #212	; 0xd4
100110aa:	049b      	lsls	r3, r3, #18
100110ac:	18ff      	adds	r7, r7, r3
100110ae:	e06b      	b.n	10011188 <_strtod_r+0x620>
100110b0:	2c00      	cmp	r4, #0
100110b2:	d069      	beq.n	10011188 <_strtod_r+0x620>
100110b4:	230f      	movs	r3, #15
100110b6:	4264      	negs	r4, r4
100110b8:	4023      	ands	r3, r4
100110ba:	d00a      	beq.n	100110d2 <_strtod_r+0x56a>
100110bc:	4a2a      	ldr	r2, [pc, #168]	; (10011168 <_strtod_r+0x600>)
100110be:	00db      	lsls	r3, r3, #3
100110c0:	18d3      	adds	r3, r2, r3
100110c2:	0030      	movs	r0, r6
100110c4:	681a      	ldr	r2, [r3, #0]
100110c6:	685b      	ldr	r3, [r3, #4]
100110c8:	0039      	movs	r1, r7
100110ca:	f002 fe63 	bl	10013d94 <__aeabi_ddiv>
100110ce:	0006      	movs	r6, r0
100110d0:	000f      	movs	r7, r1
100110d2:	1124      	asrs	r4, r4, #4
100110d4:	d058      	beq.n	10011188 <_strtod_r+0x620>
100110d6:	2c1f      	cmp	r4, #31
100110d8:	dd04      	ble.n	100110e4 <_strtod_r+0x57c>
100110da:	2400      	movs	r4, #0
100110dc:	9403      	str	r4, [sp, #12]
100110de:	9408      	str	r4, [sp, #32]
100110e0:	9405      	str	r4, [sp, #20]
100110e2:	e126      	b.n	10011332 <_strtod_r+0x7ca>
100110e4:	2300      	movs	r3, #0
100110e6:	9304      	str	r3, [sp, #16]
100110e8:	06e3      	lsls	r3, r4, #27
100110ea:	d501      	bpl.n	100110f0 <_strtod_r+0x588>
100110ec:	236a      	movs	r3, #106	; 0x6a
100110ee:	9304      	str	r3, [sp, #16]
100110f0:	0030      	movs	r0, r6
100110f2:	0039      	movs	r1, r7
100110f4:	2300      	movs	r3, #0
100110f6:	4d23      	ldr	r5, [pc, #140]	; (10011184 <_strtod_r+0x61c>)
100110f8:	2c00      	cmp	r4, #0
100110fa:	dd0a      	ble.n	10011112 <_strtod_r+0x5aa>
100110fc:	2201      	movs	r2, #1
100110fe:	4214      	tst	r4, r2
10011100:	d004      	beq.n	1001110c <_strtod_r+0x5a4>
10011102:	682a      	ldr	r2, [r5, #0]
10011104:	686b      	ldr	r3, [r5, #4]
10011106:	f7fe f9d5 	bl	1000f4b4 <__aeabi_dmul>
1001110a:	2301      	movs	r3, #1
1001110c:	1064      	asrs	r4, r4, #1
1001110e:	3508      	adds	r5, #8
10011110:	e7f2      	b.n	100110f8 <_strtod_r+0x590>
10011112:	2b00      	cmp	r3, #0
10011114:	d001      	beq.n	1001111a <_strtod_r+0x5b2>
10011116:	0006      	movs	r6, r0
10011118:	000f      	movs	r7, r1
1001111a:	9b04      	ldr	r3, [sp, #16]
1001111c:	2b00      	cmp	r3, #0
1001111e:	d019      	beq.n	10011154 <_strtod_r+0x5ec>
10011120:	226b      	movs	r2, #107	; 0x6b
10011122:	007b      	lsls	r3, r7, #1
10011124:	0d5b      	lsrs	r3, r3, #21
10011126:	0039      	movs	r1, r7
10011128:	1ad3      	subs	r3, r2, r3
1001112a:	2b00      	cmp	r3, #0
1001112c:	dd12      	ble.n	10011154 <_strtod_r+0x5ec>
1001112e:	2b1f      	cmp	r3, #31
10011130:	dd0c      	ble.n	1001114c <_strtod_r+0x5e4>
10011132:	2600      	movs	r6, #0
10011134:	2b34      	cmp	r3, #52	; 0x34
10011136:	dd02      	ble.n	1001113e <_strtod_r+0x5d6>
10011138:	27dc      	movs	r7, #220	; 0xdc
1001113a:	04bf      	lsls	r7, r7, #18
1001113c:	e00a      	b.n	10011154 <_strtod_r+0x5ec>
1001113e:	2201      	movs	r2, #1
10011140:	3b20      	subs	r3, #32
10011142:	4252      	negs	r2, r2
10011144:	409a      	lsls	r2, r3
10011146:	4011      	ands	r1, r2
10011148:	000f      	movs	r7, r1
1001114a:	e003      	b.n	10011154 <_strtod_r+0x5ec>
1001114c:	2201      	movs	r2, #1
1001114e:	4252      	negs	r2, r2
10011150:	409a      	lsls	r2, r3
10011152:	4016      	ands	r6, r2
10011154:	2200      	movs	r2, #0
10011156:	2300      	movs	r3, #0
10011158:	0030      	movs	r0, r6
1001115a:	0039      	movs	r1, r7
1001115c:	f7ff f8c4 	bl	100102e8 <__aeabi_dcmpeq>
10011160:	2800      	cmp	r0, #0
10011162:	d1ba      	bne.n	100110da <_strtod_r+0x572>
10011164:	e012      	b.n	1001118c <_strtod_r+0x624>
10011166:	46c0      	nop			; (mov r8, r8)
10011168:	100151b0 	.word	0x100151b0
1001116c:	7ff00000 	.word	0x7ff00000
10011170:	10015278 	.word	0x10015278
10011174:	fcb00000 	.word	0xfcb00000
10011178:	7ca00000 	.word	0x7ca00000
1001117c:	7c900000 	.word	0x7c900000
10011180:	7fefffff 	.word	0x7fefffff
10011184:	10015120 	.word	0x10015120
10011188:	2300      	movs	r3, #0
1001118a:	9304      	str	r3, [sp, #16]
1001118c:	9b08      	ldr	r3, [sp, #32]
1001118e:	9a06      	ldr	r2, [sp, #24]
10011190:	9300      	str	r3, [sp, #0]
10011192:	990c      	ldr	r1, [sp, #48]	; 0x30
10011194:	9b03      	ldr	r3, [sp, #12]
10011196:	9802      	ldr	r0, [sp, #8]
10011198:	f001 f9a6 	bl	100124e8 <__s2b>
1001119c:	9008      	str	r0, [sp, #32]
1001119e:	2800      	cmp	r0, #0
100111a0:	d100      	bne.n	100111a4 <_strtod_r+0x63c>
100111a2:	e741      	b.n	10011028 <_strtod_r+0x4c0>
100111a4:	9b05      	ldr	r3, [sp, #20]
100111a6:	2400      	movs	r4, #0
100111a8:	425a      	negs	r2, r3
100111aa:	17db      	asrs	r3, r3, #31
100111ac:	401a      	ands	r2, r3
100111ae:	9b05      	ldr	r3, [sp, #20]
100111b0:	9213      	str	r2, [sp, #76]	; 0x4c
100111b2:	43db      	mvns	r3, r3
100111b4:	9a05      	ldr	r2, [sp, #20]
100111b6:	17db      	asrs	r3, r3, #31
100111b8:	401a      	ands	r2, r3
100111ba:	9211      	str	r2, [sp, #68]	; 0x44
100111bc:	9403      	str	r4, [sp, #12]
100111be:	9b08      	ldr	r3, [sp, #32]
100111c0:	9802      	ldr	r0, [sp, #8]
100111c2:	6859      	ldr	r1, [r3, #4]
100111c4:	f001 f902 	bl	100123cc <_Balloc>
100111c8:	9005      	str	r0, [sp, #20]
100111ca:	2800      	cmp	r0, #0
100111cc:	d100      	bne.n	100111d0 <_strtod_r+0x668>
100111ce:	e72f      	b.n	10011030 <_strtod_r+0x4c8>
100111d0:	9b08      	ldr	r3, [sp, #32]
100111d2:	9908      	ldr	r1, [sp, #32]
100111d4:	691b      	ldr	r3, [r3, #16]
100111d6:	310c      	adds	r1, #12
100111d8:	1c9a      	adds	r2, r3, #2
100111da:	0092      	lsls	r2, r2, #2
100111dc:	300c      	adds	r0, #12
100111de:	9306      	str	r3, [sp, #24]
100111e0:	f7ff fb01 	bl	100107e6 <memcpy>
100111e4:	ab20      	add	r3, sp, #128	; 0x80
100111e6:	9301      	str	r3, [sp, #4]
100111e8:	ab1f      	add	r3, sp, #124	; 0x7c
100111ea:	9300      	str	r3, [sp, #0]
100111ec:	0032      	movs	r2, r6
100111ee:	003b      	movs	r3, r7
100111f0:	9802      	ldr	r0, [sp, #8]
100111f2:	960c      	str	r6, [sp, #48]	; 0x30
100111f4:	970d      	str	r7, [sp, #52]	; 0x34
100111f6:	f001 fc2d 	bl	10012a54 <__d2b>
100111fa:	901e      	str	r0, [sp, #120]	; 0x78
100111fc:	2800      	cmp	r0, #0
100111fe:	d100      	bne.n	10011202 <_strtod_r+0x69a>
10011200:	e716      	b.n	10011030 <_strtod_r+0x4c8>
10011202:	2101      	movs	r1, #1
10011204:	9802      	ldr	r0, [sp, #8]
10011206:	f001 f9f7 	bl	100125f8 <__i2b>
1001120a:	9003      	str	r0, [sp, #12]
1001120c:	2800      	cmp	r0, #0
1001120e:	d100      	bne.n	10011212 <_strtod_r+0x6aa>
10011210:	e70e      	b.n	10011030 <_strtod_r+0x4c8>
10011212:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10011214:	2b00      	cmp	r3, #0
10011216:	da00      	bge.n	1001121a <_strtod_r+0x6b2>
10011218:	e095      	b.n	10011346 <_strtod_r+0x7de>
1001121a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1001121c:	18d5      	adds	r5, r2, r3
1001121e:	9a11      	ldr	r2, [sp, #68]	; 0x44
10011220:	9209      	str	r2, [sp, #36]	; 0x24
10011222:	9904      	ldr	r1, [sp, #16]
10011224:	9820      	ldr	r0, [sp, #128]	; 0x80
10011226:	1a5b      	subs	r3, r3, r1
10011228:	2136      	movs	r1, #54	; 0x36
1001122a:	1a09      	subs	r1, r1, r0
1001122c:	181b      	adds	r3, r3, r0
1001122e:	468c      	mov	ip, r1
10011230:	49c5      	ldr	r1, [pc, #788]	; (10011548 <_strtod_r+0x9e0>)
10011232:	3b01      	subs	r3, #1
10011234:	2001      	movs	r0, #1
10011236:	428b      	cmp	r3, r1
10011238:	db00      	blt.n	1001123c <_strtod_r+0x6d4>
1001123a:	e08f      	b.n	1001135c <_strtod_r+0x7f4>
1001123c:	4662      	mov	r2, ip
1001123e:	1ac9      	subs	r1, r1, r3
10011240:	1a52      	subs	r2, r2, r1
10011242:	4694      	mov	ip, r2
10011244:	291f      	cmp	r1, #31
10011246:	dd00      	ble.n	1001124a <_strtod_r+0x6e2>
10011248:	e082      	b.n	10011350 <_strtod_r+0x7e8>
1001124a:	4088      	lsls	r0, r1
1001124c:	2300      	movs	r3, #0
1001124e:	9012      	str	r0, [sp, #72]	; 0x48
10011250:	930a      	str	r3, [sp, #40]	; 0x28
10011252:	002b      	movs	r3, r5
10011254:	4463      	add	r3, ip
10011256:	9306      	str	r3, [sp, #24]
10011258:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001125a:	9a04      	ldr	r2, [sp, #16]
1001125c:	4463      	add	r3, ip
1001125e:	18d3      	adds	r3, r2, r3
10011260:	9309      	str	r3, [sp, #36]	; 0x24
10011262:	9b06      	ldr	r3, [sp, #24]
10011264:	1e2a      	subs	r2, r5, #0
10011266:	429a      	cmp	r2, r3
10011268:	dd00      	ble.n	1001126c <_strtod_r+0x704>
1001126a:	001a      	movs	r2, r3
1001126c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001126e:	4293      	cmp	r3, r2
10011270:	dd00      	ble.n	10011274 <_strtod_r+0x70c>
10011272:	0013      	movs	r3, r2
10011274:	2b00      	cmp	r3, #0
10011276:	dd06      	ble.n	10011286 <_strtod_r+0x71e>
10011278:	9a06      	ldr	r2, [sp, #24]
1001127a:	1aed      	subs	r5, r5, r3
1001127c:	1ad2      	subs	r2, r2, r3
1001127e:	9206      	str	r2, [sp, #24]
10011280:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011282:	1ad2      	subs	r2, r2, r3
10011284:	9209      	str	r2, [sp, #36]	; 0x24
10011286:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10011288:	2b00      	cmp	r3, #0
1001128a:	d16b      	bne.n	10011364 <_strtod_r+0x7fc>
1001128c:	9b06      	ldr	r3, [sp, #24]
1001128e:	2b00      	cmp	r3, #0
10011290:	dd00      	ble.n	10011294 <_strtod_r+0x72c>
10011292:	e080      	b.n	10011396 <_strtod_r+0x82e>
10011294:	9b11      	ldr	r3, [sp, #68]	; 0x44
10011296:	2b00      	cmp	r3, #0
10011298:	d000      	beq.n	1001129c <_strtod_r+0x734>
1001129a:	e086      	b.n	100113aa <_strtod_r+0x842>
1001129c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001129e:	2b00      	cmp	r3, #0
100112a0:	dd00      	ble.n	100112a4 <_strtod_r+0x73c>
100112a2:	e08c      	b.n	100113be <_strtod_r+0x856>
100112a4:	2d00      	cmp	r5, #0
100112a6:	dd00      	ble.n	100112aa <_strtod_r+0x742>
100112a8:	e093      	b.n	100113d2 <_strtod_r+0x86a>
100112aa:	9a05      	ldr	r2, [sp, #20]
100112ac:	991e      	ldr	r1, [sp, #120]	; 0x78
100112ae:	9802      	ldr	r0, [sp, #8]
100112b0:	f001 faf5 	bl	1001289e <__mdiff>
100112b4:	1e04      	subs	r4, r0, #0
100112b6:	d100      	bne.n	100112ba <_strtod_r+0x752>
100112b8:	e6ba      	b.n	10011030 <_strtod_r+0x4c8>
100112ba:	2500      	movs	r5, #0
100112bc:	68c3      	ldr	r3, [r0, #12]
100112be:	9903      	ldr	r1, [sp, #12]
100112c0:	60c5      	str	r5, [r0, #12]
100112c2:	9309      	str	r3, [sp, #36]	; 0x24
100112c4:	f001 fad0 	bl	10012868 <__mcmp>
100112c8:	42a8      	cmp	r0, r5
100112ca:	db00      	blt.n	100112ce <_strtod_r+0x766>
100112cc:	e08f      	b.n	100113ee <_strtod_r+0x886>
100112ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
100112d0:	42ab      	cmp	r3, r5
100112d2:	d000      	beq.n	100112d6 <_strtod_r+0x76e>
100112d4:	e220      	b.n	10011718 <_strtod_r+0xbb0>
100112d6:	42ae      	cmp	r6, r5
100112d8:	d000      	beq.n	100112dc <_strtod_r+0x774>
100112da:	e21d      	b.n	10011718 <_strtod_r+0xbb0>
100112dc:	033b      	lsls	r3, r7, #12
100112de:	42ab      	cmp	r3, r5
100112e0:	d000      	beq.n	100112e4 <_strtod_r+0x77c>
100112e2:	e219      	b.n	10011718 <_strtod_r+0xbb0>
100112e4:	22d6      	movs	r2, #214	; 0xd6
100112e6:	4b99      	ldr	r3, [pc, #612]	; (1001154c <_strtod_r+0x9e4>)
100112e8:	04d2      	lsls	r2, r2, #19
100112ea:	403b      	ands	r3, r7
100112ec:	4293      	cmp	r3, r2
100112ee:	d800      	bhi.n	100112f2 <_strtod_r+0x78a>
100112f0:	e212      	b.n	10011718 <_strtod_r+0xbb0>
100112f2:	6963      	ldr	r3, [r4, #20]
100112f4:	42ab      	cmp	r3, r5
100112f6:	d076      	beq.n	100113e6 <_strtod_r+0x87e>
100112f8:	0021      	movs	r1, r4
100112fa:	2201      	movs	r2, #1
100112fc:	9802      	ldr	r0, [sp, #8]
100112fe:	f001 fa61 	bl	100127c4 <__lshift>
10011302:	9903      	ldr	r1, [sp, #12]
10011304:	0004      	movs	r4, r0
10011306:	f001 faaf 	bl	10012868 <__mcmp>
1001130a:	2800      	cmp	r0, #0
1001130c:	dc00      	bgt.n	10011310 <_strtod_r+0x7a8>
1001130e:	e203      	b.n	10011718 <_strtod_r+0xbb0>
10011310:	9a04      	ldr	r2, [sp, #16]
10011312:	4b8e      	ldr	r3, [pc, #568]	; (1001154c <_strtod_r+0x9e4>)
10011314:	2a00      	cmp	r2, #0
10011316:	d100      	bne.n	1001131a <_strtod_r+0x7b2>
10011318:	e099      	b.n	1001144e <_strtod_r+0x8e6>
1001131a:	001a      	movs	r2, r3
1001131c:	21d6      	movs	r1, #214	; 0xd6
1001131e:	403a      	ands	r2, r7
10011320:	04c9      	lsls	r1, r1, #19
10011322:	428a      	cmp	r2, r1
10011324:	dd00      	ble.n	10011328 <_strtod_r+0x7c0>
10011326:	e092      	b.n	1001144e <_strtod_r+0x8e6>
10011328:	23dc      	movs	r3, #220	; 0xdc
1001132a:	049b      	lsls	r3, r3, #18
1001132c:	429a      	cmp	r2, r3
1001132e:	dd00      	ble.n	10011332 <_strtod_r+0x7ca>
10011330:	e1f5      	b.n	1001171e <_strtod_r+0xbb6>
10011332:	2322      	movs	r3, #34	; 0x22
10011334:	9a02      	ldr	r2, [sp, #8]
10011336:	2600      	movs	r6, #0
10011338:	6013      	str	r3, [r2, #0]
1001133a:	9b08      	ldr	r3, [sp, #32]
1001133c:	2700      	movs	r7, #0
1001133e:	2b00      	cmp	r3, #0
10011340:	d000      	beq.n	10011344 <_strtod_r+0x7dc>
10011342:	e1fe      	b.n	10011742 <_strtod_r+0xbda>
10011344:	e211      	b.n	1001176a <_strtod_r+0xc02>
10011346:	9a11      	ldr	r2, [sp, #68]	; 0x44
10011348:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1001134a:	1ad2      	subs	r2, r2, r3
1001134c:	9209      	str	r2, [sp, #36]	; 0x24
1001134e:	e768      	b.n	10011222 <_strtod_r+0x6ba>
10011350:	497f      	ldr	r1, [pc, #508]	; (10011550 <_strtod_r+0x9e8>)
10011352:	1acb      	subs	r3, r1, r3
10011354:	0001      	movs	r1, r0
10011356:	4099      	lsls	r1, r3
10011358:	910a      	str	r1, [sp, #40]	; 0x28
1001135a:	e001      	b.n	10011360 <_strtod_r+0x7f8>
1001135c:	2300      	movs	r3, #0
1001135e:	930a      	str	r3, [sp, #40]	; 0x28
10011360:	9012      	str	r0, [sp, #72]	; 0x48
10011362:	e776      	b.n	10011252 <_strtod_r+0x6ea>
10011364:	001a      	movs	r2, r3
10011366:	9903      	ldr	r1, [sp, #12]
10011368:	9802      	ldr	r0, [sp, #8]
1001136a:	f001 f9d7 	bl	1001271c <__pow5mult>
1001136e:	9003      	str	r0, [sp, #12]
10011370:	2800      	cmp	r0, #0
10011372:	d100      	bne.n	10011376 <_strtod_r+0x80e>
10011374:	e65c      	b.n	10011030 <_strtod_r+0x4c8>
10011376:	0001      	movs	r1, r0
10011378:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1001137a:	9802      	ldr	r0, [sp, #8]
1001137c:	f001 f945 	bl	1001260a <__multiply>
10011380:	9019      	str	r0, [sp, #100]	; 0x64
10011382:	2800      	cmp	r0, #0
10011384:	d100      	bne.n	10011388 <_strtod_r+0x820>
10011386:	e653      	b.n	10011030 <_strtod_r+0x4c8>
10011388:	991e      	ldr	r1, [sp, #120]	; 0x78
1001138a:	9802      	ldr	r0, [sp, #8]
1001138c:	f001 f856 	bl	1001243c <_Bfree>
10011390:	9b19      	ldr	r3, [sp, #100]	; 0x64
10011392:	931e      	str	r3, [sp, #120]	; 0x78
10011394:	e77a      	b.n	1001128c <_strtod_r+0x724>
10011396:	9a06      	ldr	r2, [sp, #24]
10011398:	991e      	ldr	r1, [sp, #120]	; 0x78
1001139a:	9802      	ldr	r0, [sp, #8]
1001139c:	f001 fa12 	bl	100127c4 <__lshift>
100113a0:	901e      	str	r0, [sp, #120]	; 0x78
100113a2:	2800      	cmp	r0, #0
100113a4:	d000      	beq.n	100113a8 <_strtod_r+0x840>
100113a6:	e775      	b.n	10011294 <_strtod_r+0x72c>
100113a8:	e642      	b.n	10011030 <_strtod_r+0x4c8>
100113aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
100113ac:	9905      	ldr	r1, [sp, #20]
100113ae:	9802      	ldr	r0, [sp, #8]
100113b0:	f001 f9b4 	bl	1001271c <__pow5mult>
100113b4:	9005      	str	r0, [sp, #20]
100113b6:	2800      	cmp	r0, #0
100113b8:	d000      	beq.n	100113bc <_strtod_r+0x854>
100113ba:	e76f      	b.n	1001129c <_strtod_r+0x734>
100113bc:	e638      	b.n	10011030 <_strtod_r+0x4c8>
100113be:	001a      	movs	r2, r3
100113c0:	9905      	ldr	r1, [sp, #20]
100113c2:	9802      	ldr	r0, [sp, #8]
100113c4:	f001 f9fe 	bl	100127c4 <__lshift>
100113c8:	9005      	str	r0, [sp, #20]
100113ca:	2800      	cmp	r0, #0
100113cc:	d000      	beq.n	100113d0 <_strtod_r+0x868>
100113ce:	e769      	b.n	100112a4 <_strtod_r+0x73c>
100113d0:	e62e      	b.n	10011030 <_strtod_r+0x4c8>
100113d2:	002a      	movs	r2, r5
100113d4:	9903      	ldr	r1, [sp, #12]
100113d6:	9802      	ldr	r0, [sp, #8]
100113d8:	f001 f9f4 	bl	100127c4 <__lshift>
100113dc:	9003      	str	r0, [sp, #12]
100113de:	2800      	cmp	r0, #0
100113e0:	d000      	beq.n	100113e4 <_strtod_r+0x87c>
100113e2:	e762      	b.n	100112aa <_strtod_r+0x742>
100113e4:	e624      	b.n	10011030 <_strtod_r+0x4c8>
100113e6:	6923      	ldr	r3, [r4, #16]
100113e8:	2b01      	cmp	r3, #1
100113ea:	dc85      	bgt.n	100112f8 <_strtod_r+0x790>
100113ec:	e194      	b.n	10011718 <_strtod_r+0xbb0>
100113ee:	2800      	cmp	r0, #0
100113f0:	d164      	bne.n	100114bc <_strtod_r+0x954>
100113f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100113f4:	033b      	lsls	r3, r7, #12
100113f6:	2a00      	cmp	r2, #0
100113f8:	d024      	beq.n	10011444 <_strtod_r+0x8dc>
100113fa:	4a56      	ldr	r2, [pc, #344]	; (10011554 <_strtod_r+0x9ec>)
100113fc:	0039      	movs	r1, r7
100113fe:	0b1b      	lsrs	r3, r3, #12
10011400:	4293      	cmp	r3, r2
10011402:	d12d      	bne.n	10011460 <_strtod_r+0x8f8>
10011404:	9b04      	ldr	r3, [sp, #16]
10011406:	3801      	subs	r0, #1
10011408:	46b4      	mov	ip, r6
1001140a:	0002      	movs	r2, r0
1001140c:	2b00      	cmp	r3, #0
1001140e:	d00a      	beq.n	10011426 <_strtod_r+0x8be>
10011410:	25d4      	movs	r5, #212	; 0xd4
10011412:	4b4e      	ldr	r3, [pc, #312]	; (1001154c <_strtod_r+0x9e4>)
10011414:	04ed      	lsls	r5, r5, #19
10011416:	403b      	ands	r3, r7
10011418:	42ab      	cmp	r3, r5
1001141a:	d804      	bhi.n	10011426 <_strtod_r+0x8be>
1001141c:	326c      	adds	r2, #108	; 0x6c
1001141e:	0d1b      	lsrs	r3, r3, #20
10011420:	1ad3      	subs	r3, r2, r3
10011422:	0002      	movs	r2, r0
10011424:	409a      	lsls	r2, r3
10011426:	4562      	cmp	r2, ip
10011428:	d11a      	bne.n	10011460 <_strtod_r+0x8f8>
1001142a:	4b4b      	ldr	r3, [pc, #300]	; (10011558 <_strtod_r+0x9f0>)
1001142c:	4299      	cmp	r1, r3
1001142e:	d102      	bne.n	10011436 <_strtod_r+0x8ce>
10011430:	1c53      	adds	r3, r2, #1
10011432:	d100      	bne.n	10011436 <_strtod_r+0x8ce>
10011434:	e5fc      	b.n	10011030 <_strtod_r+0x4c8>
10011436:	4b45      	ldr	r3, [pc, #276]	; (1001154c <_strtod_r+0x9e4>)
10011438:	2600      	movs	r6, #0
1001143a:	4019      	ands	r1, r3
1001143c:	2380      	movs	r3, #128	; 0x80
1001143e:	035b      	lsls	r3, r3, #13
10011440:	18cf      	adds	r7, r1, r3
10011442:	e169      	b.n	10011718 <_strtod_r+0xbb0>
10011444:	2b00      	cmp	r3, #0
10011446:	d10b      	bne.n	10011460 <_strtod_r+0x8f8>
10011448:	2e00      	cmp	r6, #0
1001144a:	d109      	bne.n	10011460 <_strtod_r+0x8f8>
1001144c:	e760      	b.n	10011310 <_strtod_r+0x7a8>
1001144e:	2601      	movs	r6, #1
10011450:	4a42      	ldr	r2, [pc, #264]	; (1001155c <_strtod_r+0x9f4>)
10011452:	403b      	ands	r3, r7
10011454:	189b      	adds	r3, r3, r2
10011456:	4a3f      	ldr	r2, [pc, #252]	; (10011554 <_strtod_r+0x9ec>)
10011458:	4276      	negs	r6, r6
1001145a:	431a      	orrs	r2, r3
1001145c:	0017      	movs	r7, r2
1001145e:	e15b      	b.n	10011718 <_strtod_r+0xbb0>
10011460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10011462:	2b00      	cmp	r3, #0
10011464:	d003      	beq.n	1001146e <_strtod_r+0x906>
10011466:	423b      	tst	r3, r7
10011468:	d100      	bne.n	1001146c <_strtod_r+0x904>
1001146a:	e155      	b.n	10011718 <_strtod_r+0xbb0>
1001146c:	e003      	b.n	10011476 <_strtod_r+0x90e>
1001146e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10011470:	4233      	tst	r3, r6
10011472:	d100      	bne.n	10011476 <_strtod_r+0x90e>
10011474:	e150      	b.n	10011718 <_strtod_r+0xbb0>
10011476:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011478:	9a04      	ldr	r2, [sp, #16]
1001147a:	0030      	movs	r0, r6
1001147c:	0039      	movs	r1, r7
1001147e:	2b00      	cmp	r3, #0
10011480:	d00a      	beq.n	10011498 <_strtod_r+0x930>
10011482:	f7ff fb59 	bl	10010b38 <sulp>
10011486:	0002      	movs	r2, r0
10011488:	000b      	movs	r3, r1
1001148a:	980c      	ldr	r0, [sp, #48]	; 0x30
1001148c:	990d      	ldr	r1, [sp, #52]	; 0x34
1001148e:	f002 f955 	bl	1001373c <__aeabi_dadd>
10011492:	0006      	movs	r6, r0
10011494:	000f      	movs	r7, r1
10011496:	e13f      	b.n	10011718 <_strtod_r+0xbb0>
10011498:	f7ff fb4e 	bl	10010b38 <sulp>
1001149c:	0002      	movs	r2, r0
1001149e:	000b      	movs	r3, r1
100114a0:	980c      	ldr	r0, [sp, #48]	; 0x30
100114a2:	990d      	ldr	r1, [sp, #52]	; 0x34
100114a4:	f7fe fa80 	bl	1000f9a8 <__aeabi_dsub>
100114a8:	2200      	movs	r2, #0
100114aa:	2300      	movs	r3, #0
100114ac:	0006      	movs	r6, r0
100114ae:	000f      	movs	r7, r1
100114b0:	f7fe ff1a 	bl	100102e8 <__aeabi_dcmpeq>
100114b4:	2800      	cmp	r0, #0
100114b6:	d000      	beq.n	100114ba <_strtod_r+0x952>
100114b8:	e73b      	b.n	10011332 <_strtod_r+0x7ca>
100114ba:	e12d      	b.n	10011718 <_strtod_r+0xbb0>
100114bc:	9903      	ldr	r1, [sp, #12]
100114be:	0020      	movs	r0, r4
100114c0:	f001 fb1c 	bl	10012afc <__ratio>
100114c4:	2380      	movs	r3, #128	; 0x80
100114c6:	2200      	movs	r2, #0
100114c8:	05db      	lsls	r3, r3, #23
100114ca:	9006      	str	r0, [sp, #24]
100114cc:	9107      	str	r1, [sp, #28]
100114ce:	f7fe ff1b 	bl	10010308 <__aeabi_dcmple>
100114d2:	2800      	cmp	r0, #0
100114d4:	d04a      	beq.n	1001156c <_strtod_r+0xa04>
100114d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100114d8:	2b00      	cmp	r3, #0
100114da:	d004      	beq.n	100114e6 <_strtod_r+0x97e>
100114dc:	2200      	movs	r2, #0
100114de:	4b20      	ldr	r3, [pc, #128]	; (10011560 <_strtod_r+0x9f8>)
100114e0:	920a      	str	r2, [sp, #40]	; 0x28
100114e2:	930b      	str	r3, [sp, #44]	; 0x2c
100114e4:	e00e      	b.n	10011504 <_strtod_r+0x99c>
100114e6:	2e00      	cmp	r6, #0
100114e8:	d102      	bne.n	100114f0 <_strtod_r+0x988>
100114ea:	033b      	lsls	r3, r7, #12
100114ec:	d105      	bne.n	100114fa <_strtod_r+0x992>
100114ee:	e00c      	b.n	1001150a <_strtod_r+0x9a2>
100114f0:	2e01      	cmp	r6, #1
100114f2:	d102      	bne.n	100114fa <_strtod_r+0x992>
100114f4:	2f00      	cmp	r7, #0
100114f6:	d100      	bne.n	100114fa <_strtod_r+0x992>
100114f8:	e71b      	b.n	10011332 <_strtod_r+0x7ca>
100114fa:	2200      	movs	r2, #0
100114fc:	2500      	movs	r5, #0
100114fe:	4b19      	ldr	r3, [pc, #100]	; (10011564 <_strtod_r+0x9fc>)
10011500:	920a      	str	r2, [sp, #40]	; 0x28
10011502:	930b      	str	r3, [sp, #44]	; 0x2c
10011504:	4b16      	ldr	r3, [pc, #88]	; (10011560 <_strtod_r+0x9f8>)
10011506:	9306      	str	r3, [sp, #24]
10011508:	e049      	b.n	1001159e <_strtod_r+0xa36>
1001150a:	2200      	movs	r2, #0
1001150c:	9806      	ldr	r0, [sp, #24]
1001150e:	9907      	ldr	r1, [sp, #28]
10011510:	4b13      	ldr	r3, [pc, #76]	; (10011560 <_strtod_r+0x9f8>)
10011512:	f7fe feef 	bl	100102f4 <__aeabi_dcmplt>
10011516:	2800      	cmp	r0, #0
10011518:	d108      	bne.n	1001152c <_strtod_r+0x9c4>
1001151a:	9806      	ldr	r0, [sp, #24]
1001151c:	9907      	ldr	r1, [sp, #28]
1001151e:	2200      	movs	r2, #0
10011520:	4b11      	ldr	r3, [pc, #68]	; (10011568 <_strtod_r+0xa00>)
10011522:	f7fd ffc7 	bl	1000f4b4 <__aeabi_dmul>
10011526:	0005      	movs	r5, r0
10011528:	9106      	str	r1, [sp, #24]
1001152a:	e002      	b.n	10011532 <_strtod_r+0x9ca>
1001152c:	4b0e      	ldr	r3, [pc, #56]	; (10011568 <_strtod_r+0xa00>)
1001152e:	9d09      	ldr	r5, [sp, #36]	; 0x24
10011530:	9306      	str	r3, [sp, #24]
10011532:	2280      	movs	r2, #128	; 0x80
10011534:	0612      	lsls	r2, r2, #24
10011536:	4694      	mov	ip, r2
10011538:	9b06      	ldr	r3, [sp, #24]
1001153a:	951a      	str	r5, [sp, #104]	; 0x68
1001153c:	4463      	add	r3, ip
1001153e:	931b      	str	r3, [sp, #108]	; 0x6c
10011540:	9a1a      	ldr	r2, [sp, #104]	; 0x68
10011542:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10011544:	e029      	b.n	1001159a <_strtod_r+0xa32>
10011546:	46c0      	nop			; (mov r8, r8)
10011548:	fffffc02 	.word	0xfffffc02
1001154c:	7ff00000 	.word	0x7ff00000
10011550:	fffffbe2 	.word	0xfffffbe2
10011554:	000fffff 	.word	0x000fffff
10011558:	7fefffff 	.word	0x7fefffff
1001155c:	fff00000 	.word	0xfff00000
10011560:	3ff00000 	.word	0x3ff00000
10011564:	bff00000 	.word	0xbff00000
10011568:	3fe00000 	.word	0x3fe00000
1001156c:	4b89      	ldr	r3, [pc, #548]	; (10011794 <_strtod_r+0xc2c>)
1001156e:	9806      	ldr	r0, [sp, #24]
10011570:	9907      	ldr	r1, [sp, #28]
10011572:	2200      	movs	r2, #0
10011574:	f7fd ff9e 	bl	1000f4b4 <__aeabi_dmul>
10011578:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001157a:	0005      	movs	r5, r0
1001157c:	9106      	str	r1, [sp, #24]
1001157e:	2b00      	cmp	r3, #0
10011580:	d105      	bne.n	1001158e <_strtod_r+0xa26>
10011582:	2380      	movs	r3, #128	; 0x80
10011584:	061b      	lsls	r3, r3, #24
10011586:	18cb      	adds	r3, r1, r3
10011588:	9014      	str	r0, [sp, #80]	; 0x50
1001158a:	9315      	str	r3, [sp, #84]	; 0x54
1001158c:	e003      	b.n	10011596 <_strtod_r+0xa2e>
1001158e:	0002      	movs	r2, r0
10011590:	9b06      	ldr	r3, [sp, #24]
10011592:	9214      	str	r2, [sp, #80]	; 0x50
10011594:	9315      	str	r3, [sp, #84]	; 0x54
10011596:	9a14      	ldr	r2, [sp, #80]	; 0x50
10011598:	9b15      	ldr	r3, [sp, #84]	; 0x54
1001159a:	920a      	str	r2, [sp, #40]	; 0x28
1001159c:	930b      	str	r3, [sp, #44]	; 0x2c
1001159e:	4b7e      	ldr	r3, [pc, #504]	; (10011798 <_strtod_r+0xc30>)
100115a0:	403b      	ands	r3, r7
100115a2:	9312      	str	r3, [sp, #72]	; 0x48
100115a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
100115a6:	4b7d      	ldr	r3, [pc, #500]	; (1001179c <_strtod_r+0xc34>)
100115a8:	429a      	cmp	r2, r3
100115aa:	d129      	bne.n	10011600 <_strtod_r+0xa98>
100115ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100115ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100115b0:	920e      	str	r2, [sp, #56]	; 0x38
100115b2:	930f      	str	r3, [sp, #60]	; 0x3c
100115b4:	4b7a      	ldr	r3, [pc, #488]	; (100117a0 <_strtod_r+0xc38>)
100115b6:	0030      	movs	r0, r6
100115b8:	18ff      	adds	r7, r7, r3
100115ba:	0039      	movs	r1, r7
100115bc:	f001 f9da 	bl	10012974 <__ulp>
100115c0:	0002      	movs	r2, r0
100115c2:	000b      	movs	r3, r1
100115c4:	980a      	ldr	r0, [sp, #40]	; 0x28
100115c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
100115c8:	f7fd ff74 	bl	1000f4b4 <__aeabi_dmul>
100115cc:	0032      	movs	r2, r6
100115ce:	003b      	movs	r3, r7
100115d0:	f002 f8b4 	bl	1001373c <__aeabi_dadd>
100115d4:	4a70      	ldr	r2, [pc, #448]	; (10011798 <_strtod_r+0xc30>)
100115d6:	4b73      	ldr	r3, [pc, #460]	; (100117a4 <_strtod_r+0xc3c>)
100115d8:	0006      	movs	r6, r0
100115da:	400a      	ands	r2, r1
100115dc:	429a      	cmp	r2, r3
100115de:	d90b      	bls.n	100115f8 <_strtod_r+0xa90>
100115e0:	4b71      	ldr	r3, [pc, #452]	; (100117a8 <_strtod_r+0xc40>)
100115e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100115e4:	429a      	cmp	r2, r3
100115e6:	d103      	bne.n	100115f0 <_strtod_r+0xa88>
100115e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100115ea:	3301      	adds	r3, #1
100115ec:	d100      	bne.n	100115f0 <_strtod_r+0xa88>
100115ee:	e51f      	b.n	10011030 <_strtod_r+0x4c8>
100115f0:	2601      	movs	r6, #1
100115f2:	4f6d      	ldr	r7, [pc, #436]	; (100117a8 <_strtod_r+0xc40>)
100115f4:	4276      	negs	r6, r6
100115f6:	e07e      	b.n	100116f6 <_strtod_r+0xb8e>
100115f8:	23d4      	movs	r3, #212	; 0xd4
100115fa:	049b      	lsls	r3, r3, #18
100115fc:	18cf      	adds	r7, r1, r3
100115fe:	e044      	b.n	1001168a <_strtod_r+0xb22>
10011600:	9b04      	ldr	r3, [sp, #16]
10011602:	2b00      	cmp	r3, #0
10011604:	d02f      	beq.n	10011666 <_strtod_r+0xafe>
10011606:	23d4      	movs	r3, #212	; 0xd4
10011608:	9a12      	ldr	r2, [sp, #72]	; 0x48
1001160a:	04db      	lsls	r3, r3, #19
1001160c:	429a      	cmp	r2, r3
1001160e:	d82a      	bhi.n	10011666 <_strtod_r+0xafe>
10011610:	4a66      	ldr	r2, [pc, #408]	; (100117ac <_strtod_r+0xc44>)
10011612:	4b67      	ldr	r3, [pc, #412]	; (100117b0 <_strtod_r+0xc48>)
10011614:	0028      	movs	r0, r5
10011616:	9906      	ldr	r1, [sp, #24]
10011618:	f7fe fe76 	bl	10010308 <__aeabi_dcmple>
1001161c:	2800      	cmp	r0, #0
1001161e:	d01b      	beq.n	10011658 <_strtod_r+0xaf0>
10011620:	0028      	movs	r0, r5
10011622:	9906      	ldr	r1, [sp, #24]
10011624:	f7fd fc6c 	bl	1000ef00 <__aeabi_d2uiz>
10011628:	2800      	cmp	r0, #0
1001162a:	d100      	bne.n	1001162e <_strtod_r+0xac6>
1001162c:	3001      	adds	r0, #1
1001162e:	f7fe fd87 	bl	10010140 <__aeabi_ui2d>
10011632:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011634:	0005      	movs	r5, r0
10011636:	9106      	str	r1, [sp, #24]
10011638:	2b00      	cmp	r3, #0
1001163a:	d105      	bne.n	10011648 <_strtod_r+0xae0>
1001163c:	2380      	movs	r3, #128	; 0x80
1001163e:	061b      	lsls	r3, r3, #24
10011640:	18cb      	adds	r3, r1, r3
10011642:	9016      	str	r0, [sp, #88]	; 0x58
10011644:	9317      	str	r3, [sp, #92]	; 0x5c
10011646:	e003      	b.n	10011650 <_strtod_r+0xae8>
10011648:	0002      	movs	r2, r0
1001164a:	9b06      	ldr	r3, [sp, #24]
1001164c:	9216      	str	r2, [sp, #88]	; 0x58
1001164e:	9317      	str	r3, [sp, #92]	; 0x5c
10011650:	9a16      	ldr	r2, [sp, #88]	; 0x58
10011652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
10011654:	920a      	str	r2, [sp, #40]	; 0x28
10011656:	930b      	str	r3, [sp, #44]	; 0x2c
10011658:	22d6      	movs	r2, #214	; 0xd6
1001165a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1001165c:	04d2      	lsls	r2, r2, #19
1001165e:	189b      	adds	r3, r3, r2
10011660:	9a12      	ldr	r2, [sp, #72]	; 0x48
10011662:	1a9b      	subs	r3, r3, r2
10011664:	930b      	str	r3, [sp, #44]	; 0x2c
10011666:	980c      	ldr	r0, [sp, #48]	; 0x30
10011668:	990d      	ldr	r1, [sp, #52]	; 0x34
1001166a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1001166c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1001166e:	f001 f981 	bl	10012974 <__ulp>
10011672:	0002      	movs	r2, r0
10011674:	000b      	movs	r3, r1
10011676:	0030      	movs	r0, r6
10011678:	0039      	movs	r1, r7
1001167a:	f7fd ff1b 	bl	1000f4b4 <__aeabi_dmul>
1001167e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10011682:	f002 f85b 	bl	1001373c <__aeabi_dadd>
10011686:	0006      	movs	r6, r0
10011688:	000f      	movs	r7, r1
1001168a:	9b04      	ldr	r3, [sp, #16]
1001168c:	2b00      	cmp	r3, #0
1001168e:	d132      	bne.n	100116f6 <_strtod_r+0xb8e>
10011690:	4b41      	ldr	r3, [pc, #260]	; (10011798 <_strtod_r+0xc30>)
10011692:	9a12      	ldr	r2, [sp, #72]	; 0x48
10011694:	970a      	str	r7, [sp, #40]	; 0x28
10011696:	403b      	ands	r3, r7
10011698:	429a      	cmp	r2, r3
1001169a:	d12c      	bne.n	100116f6 <_strtod_r+0xb8e>
1001169c:	9906      	ldr	r1, [sp, #24]
1001169e:	0028      	movs	r0, r5
100116a0:	f7fe fcd6 	bl	10010050 <__aeabi_d2iz>
100116a4:	f7fe fd0a 	bl	100100bc <__aeabi_i2d>
100116a8:	000b      	movs	r3, r1
100116aa:	0002      	movs	r2, r0
100116ac:	9906      	ldr	r1, [sp, #24]
100116ae:	0028      	movs	r0, r5
100116b0:	f7fe f97a 	bl	1000f9a8 <__aeabi_dsub>
100116b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100116b6:	9006      	str	r0, [sp, #24]
100116b8:	9107      	str	r1, [sp, #28]
100116ba:	2b00      	cmp	r3, #0
100116bc:	d104      	bne.n	100116c8 <_strtod_r+0xb60>
100116be:	2e00      	cmp	r6, #0
100116c0:	d102      	bne.n	100116c8 <_strtod_r+0xb60>
100116c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100116c4:	031b      	lsls	r3, r3, #12
100116c6:	d00e      	beq.n	100116e6 <_strtod_r+0xb7e>
100116c8:	9806      	ldr	r0, [sp, #24]
100116ca:	9907      	ldr	r1, [sp, #28]
100116cc:	4a39      	ldr	r2, [pc, #228]	; (100117b4 <_strtod_r+0xc4c>)
100116ce:	4b3a      	ldr	r3, [pc, #232]	; (100117b8 <_strtod_r+0xc50>)
100116d0:	f7fe fe10 	bl	100102f4 <__aeabi_dcmplt>
100116d4:	2800      	cmp	r0, #0
100116d6:	d134      	bne.n	10011742 <_strtod_r+0xbda>
100116d8:	9806      	ldr	r0, [sp, #24]
100116da:	9907      	ldr	r1, [sp, #28]
100116dc:	4a37      	ldr	r2, [pc, #220]	; (100117bc <_strtod_r+0xc54>)
100116de:	4b2d      	ldr	r3, [pc, #180]	; (10011794 <_strtod_r+0xc2c>)
100116e0:	f7fe fe1c 	bl	1001031c <__aeabi_dcmpgt>
100116e4:	e005      	b.n	100116f2 <_strtod_r+0xb8a>
100116e6:	4a33      	ldr	r2, [pc, #204]	; (100117b4 <_strtod_r+0xc4c>)
100116e8:	4b35      	ldr	r3, [pc, #212]	; (100117c0 <_strtod_r+0xc58>)
100116ea:	9806      	ldr	r0, [sp, #24]
100116ec:	9907      	ldr	r1, [sp, #28]
100116ee:	f7fe fe01 	bl	100102f4 <__aeabi_dcmplt>
100116f2:	2800      	cmp	r0, #0
100116f4:	d125      	bne.n	10011742 <_strtod_r+0xbda>
100116f6:	991e      	ldr	r1, [sp, #120]	; 0x78
100116f8:	9802      	ldr	r0, [sp, #8]
100116fa:	f000 fe9f 	bl	1001243c <_Bfree>
100116fe:	9905      	ldr	r1, [sp, #20]
10011700:	9802      	ldr	r0, [sp, #8]
10011702:	f000 fe9b 	bl	1001243c <_Bfree>
10011706:	9903      	ldr	r1, [sp, #12]
10011708:	9802      	ldr	r0, [sp, #8]
1001170a:	f000 fe97 	bl	1001243c <_Bfree>
1001170e:	0021      	movs	r1, r4
10011710:	9802      	ldr	r0, [sp, #8]
10011712:	f000 fe93 	bl	1001243c <_Bfree>
10011716:	e552      	b.n	100111be <_strtod_r+0x656>
10011718:	9b04      	ldr	r3, [sp, #16]
1001171a:	2b00      	cmp	r3, #0
1001171c:	d011      	beq.n	10011742 <_strtod_r+0xbda>
1001171e:	4b29      	ldr	r3, [pc, #164]	; (100117c4 <_strtod_r+0xc5c>)
10011720:	0030      	movs	r0, r6
10011722:	930f      	str	r3, [sp, #60]	; 0x3c
10011724:	2300      	movs	r3, #0
10011726:	930e      	str	r3, [sp, #56]	; 0x38
10011728:	0039      	movs	r1, r7
1001172a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1001172c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1001172e:	f7fd fec1 	bl	1000f4b4 <__aeabi_dmul>
10011732:	0006      	movs	r6, r0
10011734:	1e0f      	subs	r7, r1, #0
10011736:	d104      	bne.n	10011742 <_strtod_r+0xbda>
10011738:	2800      	cmp	r0, #0
1001173a:	d102      	bne.n	10011742 <_strtod_r+0xbda>
1001173c:	2322      	movs	r3, #34	; 0x22
1001173e:	9a02      	ldr	r2, [sp, #8]
10011740:	6013      	str	r3, [r2, #0]
10011742:	991e      	ldr	r1, [sp, #120]	; 0x78
10011744:	9802      	ldr	r0, [sp, #8]
10011746:	f000 fe79 	bl	1001243c <_Bfree>
1001174a:	9905      	ldr	r1, [sp, #20]
1001174c:	9802      	ldr	r0, [sp, #8]
1001174e:	f000 fe75 	bl	1001243c <_Bfree>
10011752:	9903      	ldr	r1, [sp, #12]
10011754:	9802      	ldr	r0, [sp, #8]
10011756:	f000 fe71 	bl	1001243c <_Bfree>
1001175a:	9908      	ldr	r1, [sp, #32]
1001175c:	9802      	ldr	r0, [sp, #8]
1001175e:	f000 fe6d 	bl	1001243c <_Bfree>
10011762:	0021      	movs	r1, r4
10011764:	9802      	ldr	r0, [sp, #8]
10011766:	f000 fe69 	bl	1001243c <_Bfree>
1001176a:	9b18      	ldr	r3, [sp, #96]	; 0x60
1001176c:	2b00      	cmp	r3, #0
1001176e:	d002      	beq.n	10011776 <_strtod_r+0xc0e>
10011770:	9b18      	ldr	r3, [sp, #96]	; 0x60
10011772:	9a1d      	ldr	r2, [sp, #116]	; 0x74
10011774:	601a      	str	r2, [r3, #0]
10011776:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011778:	2b00      	cmp	r3, #0
1001177a:	d004      	beq.n	10011786 <_strtod_r+0xc1e>
1001177c:	2380      	movs	r3, #128	; 0x80
1001177e:	061b      	lsls	r3, r3, #24
10011780:	0032      	movs	r2, r6
10011782:	18fb      	adds	r3, r7, r3
10011784:	e001      	b.n	1001178a <_strtod_r+0xc22>
10011786:	0032      	movs	r2, r6
10011788:	003b      	movs	r3, r7
1001178a:	0010      	movs	r0, r2
1001178c:	0019      	movs	r1, r3
1001178e:	b023      	add	sp, #140	; 0x8c
10011790:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011792:	46c0      	nop			; (mov r8, r8)
10011794:	3fe00000 	.word	0x3fe00000
10011798:	7ff00000 	.word	0x7ff00000
1001179c:	7fe00000 	.word	0x7fe00000
100117a0:	fcb00000 	.word	0xfcb00000
100117a4:	7c9fffff 	.word	0x7c9fffff
100117a8:	7fefffff 	.word	0x7fefffff
100117ac:	ffc00000 	.word	0xffc00000
100117b0:	41dfffff 	.word	0x41dfffff
100117b4:	94a03595 	.word	0x94a03595
100117b8:	3fdfffff 	.word	0x3fdfffff
100117bc:	35afe535 	.word	0x35afe535
100117c0:	3fcfffff 	.word	0x3fcfffff
100117c4:	39500000 	.word	0x39500000

100117c8 <strtod>:
100117c8:	b510      	push	{r4, lr}
100117ca:	4b03      	ldr	r3, [pc, #12]	; (100117d8 <strtod+0x10>)
100117cc:	000a      	movs	r2, r1
100117ce:	0001      	movs	r1, r0
100117d0:	6818      	ldr	r0, [r3, #0]
100117d2:	f7ff f9c9 	bl	10010b68 <_strtod_r>
100117d6:	bd10      	pop	{r4, pc}
100117d8:	100153b4 	.word	0x100153b4

100117dc <__swbuf_r>:
100117dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100117de:	0005      	movs	r5, r0
100117e0:	000f      	movs	r7, r1
100117e2:	0014      	movs	r4, r2
100117e4:	2800      	cmp	r0, #0
100117e6:	d004      	beq.n	100117f2 <__swbuf_r+0x16>
100117e8:	6983      	ldr	r3, [r0, #24]
100117ea:	2b00      	cmp	r3, #0
100117ec:	d101      	bne.n	100117f2 <__swbuf_r+0x16>
100117ee:	f000 f9b7 	bl	10011b60 <__sinit>
100117f2:	4b23      	ldr	r3, [pc, #140]	; (10011880 <__swbuf_r+0xa4>)
100117f4:	429c      	cmp	r4, r3
100117f6:	d101      	bne.n	100117fc <__swbuf_r+0x20>
100117f8:	686c      	ldr	r4, [r5, #4]
100117fa:	e008      	b.n	1001180e <__swbuf_r+0x32>
100117fc:	4b21      	ldr	r3, [pc, #132]	; (10011884 <__swbuf_r+0xa8>)
100117fe:	429c      	cmp	r4, r3
10011800:	d101      	bne.n	10011806 <__swbuf_r+0x2a>
10011802:	68ac      	ldr	r4, [r5, #8]
10011804:	e003      	b.n	1001180e <__swbuf_r+0x32>
10011806:	4b20      	ldr	r3, [pc, #128]	; (10011888 <__swbuf_r+0xac>)
10011808:	429c      	cmp	r4, r3
1001180a:	d100      	bne.n	1001180e <__swbuf_r+0x32>
1001180c:	68ec      	ldr	r4, [r5, #12]
1001180e:	69a3      	ldr	r3, [r4, #24]
10011810:	60a3      	str	r3, [r4, #8]
10011812:	89a3      	ldrh	r3, [r4, #12]
10011814:	071b      	lsls	r3, r3, #28
10011816:	d50a      	bpl.n	1001182e <__swbuf_r+0x52>
10011818:	6923      	ldr	r3, [r4, #16]
1001181a:	2b00      	cmp	r3, #0
1001181c:	d007      	beq.n	1001182e <__swbuf_r+0x52>
1001181e:	6823      	ldr	r3, [r4, #0]
10011820:	6922      	ldr	r2, [r4, #16]
10011822:	b2fe      	uxtb	r6, r7
10011824:	1a98      	subs	r0, r3, r2
10011826:	6963      	ldr	r3, [r4, #20]
10011828:	4298      	cmp	r0, r3
1001182a:	db0f      	blt.n	1001184c <__swbuf_r+0x70>
1001182c:	e008      	b.n	10011840 <__swbuf_r+0x64>
1001182e:	0021      	movs	r1, r4
10011830:	0028      	movs	r0, r5
10011832:	f000 f82b 	bl	1001188c <__swsetup_r>
10011836:	2800      	cmp	r0, #0
10011838:	d0f1      	beq.n	1001181e <__swbuf_r+0x42>
1001183a:	2001      	movs	r0, #1
1001183c:	4240      	negs	r0, r0
1001183e:	e01d      	b.n	1001187c <__swbuf_r+0xa0>
10011840:	0021      	movs	r1, r4
10011842:	0028      	movs	r0, r5
10011844:	f000 f91e 	bl	10011a84 <_fflush_r>
10011848:	2800      	cmp	r0, #0
1001184a:	d1f6      	bne.n	1001183a <__swbuf_r+0x5e>
1001184c:	68a3      	ldr	r3, [r4, #8]
1001184e:	3001      	adds	r0, #1
10011850:	3b01      	subs	r3, #1
10011852:	60a3      	str	r3, [r4, #8]
10011854:	6823      	ldr	r3, [r4, #0]
10011856:	1c5a      	adds	r2, r3, #1
10011858:	6022      	str	r2, [r4, #0]
1001185a:	701f      	strb	r7, [r3, #0]
1001185c:	6963      	ldr	r3, [r4, #20]
1001185e:	4298      	cmp	r0, r3
10011860:	d005      	beq.n	1001186e <__swbuf_r+0x92>
10011862:	89a3      	ldrh	r3, [r4, #12]
10011864:	0030      	movs	r0, r6
10011866:	07db      	lsls	r3, r3, #31
10011868:	d508      	bpl.n	1001187c <__swbuf_r+0xa0>
1001186a:	2e0a      	cmp	r6, #10
1001186c:	d106      	bne.n	1001187c <__swbuf_r+0xa0>
1001186e:	0021      	movs	r1, r4
10011870:	0028      	movs	r0, r5
10011872:	f000 f907 	bl	10011a84 <_fflush_r>
10011876:	2800      	cmp	r0, #0
10011878:	d1df      	bne.n	1001183a <__swbuf_r+0x5e>
1001187a:	0030      	movs	r0, r6
1001187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001187e:	46c0      	nop			; (mov r8, r8)
10011880:	10015148 	.word	0x10015148
10011884:	10015168 	.word	0x10015168
10011888:	10015188 	.word	0x10015188

1001188c <__swsetup_r>:
1001188c:	4b36      	ldr	r3, [pc, #216]	; (10011968 <__swsetup_r+0xdc>)
1001188e:	b570      	push	{r4, r5, r6, lr}
10011890:	681d      	ldr	r5, [r3, #0]
10011892:	0006      	movs	r6, r0
10011894:	000c      	movs	r4, r1
10011896:	2d00      	cmp	r5, #0
10011898:	d005      	beq.n	100118a6 <__swsetup_r+0x1a>
1001189a:	69ab      	ldr	r3, [r5, #24]
1001189c:	2b00      	cmp	r3, #0
1001189e:	d102      	bne.n	100118a6 <__swsetup_r+0x1a>
100118a0:	0028      	movs	r0, r5
100118a2:	f000 f95d 	bl	10011b60 <__sinit>
100118a6:	4b31      	ldr	r3, [pc, #196]	; (1001196c <__swsetup_r+0xe0>)
100118a8:	429c      	cmp	r4, r3
100118aa:	d101      	bne.n	100118b0 <__swsetup_r+0x24>
100118ac:	686c      	ldr	r4, [r5, #4]
100118ae:	e008      	b.n	100118c2 <__swsetup_r+0x36>
100118b0:	4b2f      	ldr	r3, [pc, #188]	; (10011970 <__swsetup_r+0xe4>)
100118b2:	429c      	cmp	r4, r3
100118b4:	d101      	bne.n	100118ba <__swsetup_r+0x2e>
100118b6:	68ac      	ldr	r4, [r5, #8]
100118b8:	e003      	b.n	100118c2 <__swsetup_r+0x36>
100118ba:	4b2e      	ldr	r3, [pc, #184]	; (10011974 <__swsetup_r+0xe8>)
100118bc:	429c      	cmp	r4, r3
100118be:	d100      	bne.n	100118c2 <__swsetup_r+0x36>
100118c0:	68ec      	ldr	r4, [r5, #12]
100118c2:	220c      	movs	r2, #12
100118c4:	5ea3      	ldrsh	r3, [r4, r2]
100118c6:	b29a      	uxth	r2, r3
100118c8:	0711      	lsls	r1, r2, #28
100118ca:	d423      	bmi.n	10011914 <__swsetup_r+0x88>
100118cc:	06d1      	lsls	r1, r2, #27
100118ce:	d407      	bmi.n	100118e0 <__swsetup_r+0x54>
100118d0:	2209      	movs	r2, #9
100118d2:	2001      	movs	r0, #1
100118d4:	6032      	str	r2, [r6, #0]
100118d6:	3237      	adds	r2, #55	; 0x37
100118d8:	4313      	orrs	r3, r2
100118da:	81a3      	strh	r3, [r4, #12]
100118dc:	4240      	negs	r0, r0
100118de:	e042      	b.n	10011966 <__swsetup_r+0xda>
100118e0:	0753      	lsls	r3, r2, #29
100118e2:	d513      	bpl.n	1001190c <__swsetup_r+0x80>
100118e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
100118e6:	2900      	cmp	r1, #0
100118e8:	d008      	beq.n	100118fc <__swsetup_r+0x70>
100118ea:	0023      	movs	r3, r4
100118ec:	3344      	adds	r3, #68	; 0x44
100118ee:	4299      	cmp	r1, r3
100118f0:	d002      	beq.n	100118f8 <__swsetup_r+0x6c>
100118f2:	0030      	movs	r0, r6
100118f4:	f001 f970 	bl	10012bd8 <_free_r>
100118f8:	2300      	movs	r3, #0
100118fa:	6363      	str	r3, [r4, #52]	; 0x34
100118fc:	2224      	movs	r2, #36	; 0x24
100118fe:	89a3      	ldrh	r3, [r4, #12]
10011900:	4393      	bics	r3, r2
10011902:	81a3      	strh	r3, [r4, #12]
10011904:	2300      	movs	r3, #0
10011906:	6063      	str	r3, [r4, #4]
10011908:	6923      	ldr	r3, [r4, #16]
1001190a:	6023      	str	r3, [r4, #0]
1001190c:	2208      	movs	r2, #8
1001190e:	89a3      	ldrh	r3, [r4, #12]
10011910:	4313      	orrs	r3, r2
10011912:	81a3      	strh	r3, [r4, #12]
10011914:	6923      	ldr	r3, [r4, #16]
10011916:	2b00      	cmp	r3, #0
10011918:	d10b      	bne.n	10011932 <__swsetup_r+0xa6>
1001191a:	23a0      	movs	r3, #160	; 0xa0
1001191c:	89a2      	ldrh	r2, [r4, #12]
1001191e:	009b      	lsls	r3, r3, #2
10011920:	4013      	ands	r3, r2
10011922:	2280      	movs	r2, #128	; 0x80
10011924:	0092      	lsls	r2, r2, #2
10011926:	4293      	cmp	r3, r2
10011928:	d003      	beq.n	10011932 <__swsetup_r+0xa6>
1001192a:	0021      	movs	r1, r4
1001192c:	0030      	movs	r0, r6
1001192e:	f000 fd05 	bl	1001233c <__smakebuf_r>
10011932:	2301      	movs	r3, #1
10011934:	89a2      	ldrh	r2, [r4, #12]
10011936:	4013      	ands	r3, r2
10011938:	d005      	beq.n	10011946 <__swsetup_r+0xba>
1001193a:	2300      	movs	r3, #0
1001193c:	60a3      	str	r3, [r4, #8]
1001193e:	6963      	ldr	r3, [r4, #20]
10011940:	425b      	negs	r3, r3
10011942:	61a3      	str	r3, [r4, #24]
10011944:	e003      	b.n	1001194e <__swsetup_r+0xc2>
10011946:	0792      	lsls	r2, r2, #30
10011948:	d400      	bmi.n	1001194c <__swsetup_r+0xc0>
1001194a:	6963      	ldr	r3, [r4, #20]
1001194c:	60a3      	str	r3, [r4, #8]
1001194e:	2000      	movs	r0, #0
10011950:	6923      	ldr	r3, [r4, #16]
10011952:	4283      	cmp	r3, r0
10011954:	d107      	bne.n	10011966 <__swsetup_r+0xda>
10011956:	220c      	movs	r2, #12
10011958:	5ea3      	ldrsh	r3, [r4, r2]
1001195a:	061a      	lsls	r2, r3, #24
1001195c:	d503      	bpl.n	10011966 <__swsetup_r+0xda>
1001195e:	2240      	movs	r2, #64	; 0x40
10011960:	4313      	orrs	r3, r2
10011962:	81a3      	strh	r3, [r4, #12]
10011964:	3801      	subs	r0, #1
10011966:	bd70      	pop	{r4, r5, r6, pc}
10011968:	100153b4 	.word	0x100153b4
1001196c:	10015148 	.word	0x10015148
10011970:	10015168 	.word	0x10015168
10011974:	10015188 	.word	0x10015188

10011978 <__sflush_r>:
10011978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001197a:	898a      	ldrh	r2, [r1, #12]
1001197c:	0005      	movs	r5, r0
1001197e:	000c      	movs	r4, r1
10011980:	0713      	lsls	r3, r2, #28
10011982:	d45a      	bmi.n	10011a3a <__sflush_r+0xc2>
10011984:	684b      	ldr	r3, [r1, #4]
10011986:	2b00      	cmp	r3, #0
10011988:	dc02      	bgt.n	10011990 <__sflush_r+0x18>
1001198a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1001198c:	2b00      	cmp	r3, #0
1001198e:	dd19      	ble.n	100119c4 <__sflush_r+0x4c>
10011990:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011992:	2f00      	cmp	r7, #0
10011994:	d016      	beq.n	100119c4 <__sflush_r+0x4c>
10011996:	2300      	movs	r3, #0
10011998:	682e      	ldr	r6, [r5, #0]
1001199a:	602b      	str	r3, [r5, #0]
1001199c:	2380      	movs	r3, #128	; 0x80
1001199e:	015b      	lsls	r3, r3, #5
100119a0:	401a      	ands	r2, r3
100119a2:	d001      	beq.n	100119a8 <__sflush_r+0x30>
100119a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
100119a6:	e014      	b.n	100119d2 <__sflush_r+0x5a>
100119a8:	2301      	movs	r3, #1
100119aa:	6a21      	ldr	r1, [r4, #32]
100119ac:	0028      	movs	r0, r5
100119ae:	47b8      	blx	r7
100119b0:	1c43      	adds	r3, r0, #1
100119b2:	d10e      	bne.n	100119d2 <__sflush_r+0x5a>
100119b4:	682b      	ldr	r3, [r5, #0]
100119b6:	2b00      	cmp	r3, #0
100119b8:	d00b      	beq.n	100119d2 <__sflush_r+0x5a>
100119ba:	2b1d      	cmp	r3, #29
100119bc:	d001      	beq.n	100119c2 <__sflush_r+0x4a>
100119be:	2b16      	cmp	r3, #22
100119c0:	d102      	bne.n	100119c8 <__sflush_r+0x50>
100119c2:	602e      	str	r6, [r5, #0]
100119c4:	2000      	movs	r0, #0
100119c6:	e05a      	b.n	10011a7e <__sflush_r+0x106>
100119c8:	2240      	movs	r2, #64	; 0x40
100119ca:	89a3      	ldrh	r3, [r4, #12]
100119cc:	4313      	orrs	r3, r2
100119ce:	81a3      	strh	r3, [r4, #12]
100119d0:	e055      	b.n	10011a7e <__sflush_r+0x106>
100119d2:	89a3      	ldrh	r3, [r4, #12]
100119d4:	075b      	lsls	r3, r3, #29
100119d6:	d506      	bpl.n	100119e6 <__sflush_r+0x6e>
100119d8:	6863      	ldr	r3, [r4, #4]
100119da:	1ac0      	subs	r0, r0, r3
100119dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
100119de:	2b00      	cmp	r3, #0
100119e0:	d001      	beq.n	100119e6 <__sflush_r+0x6e>
100119e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
100119e4:	1ac0      	subs	r0, r0, r3
100119e6:	2300      	movs	r3, #0
100119e8:	0002      	movs	r2, r0
100119ea:	6a21      	ldr	r1, [r4, #32]
100119ec:	0028      	movs	r0, r5
100119ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100119f0:	47b8      	blx	r7
100119f2:	89a3      	ldrh	r3, [r4, #12]
100119f4:	1c42      	adds	r2, r0, #1
100119f6:	d106      	bne.n	10011a06 <__sflush_r+0x8e>
100119f8:	6829      	ldr	r1, [r5, #0]
100119fa:	291d      	cmp	r1, #29
100119fc:	d83a      	bhi.n	10011a74 <__sflush_r+0xfc>
100119fe:	4a20      	ldr	r2, [pc, #128]	; (10011a80 <__sflush_r+0x108>)
10011a00:	40ca      	lsrs	r2, r1
10011a02:	07d2      	lsls	r2, r2, #31
10011a04:	d536      	bpl.n	10011a74 <__sflush_r+0xfc>
10011a06:	2200      	movs	r2, #0
10011a08:	6062      	str	r2, [r4, #4]
10011a0a:	6922      	ldr	r2, [r4, #16]
10011a0c:	6022      	str	r2, [r4, #0]
10011a0e:	04db      	lsls	r3, r3, #19
10011a10:	d505      	bpl.n	10011a1e <__sflush_r+0xa6>
10011a12:	1c43      	adds	r3, r0, #1
10011a14:	d102      	bne.n	10011a1c <__sflush_r+0xa4>
10011a16:	682b      	ldr	r3, [r5, #0]
10011a18:	2b00      	cmp	r3, #0
10011a1a:	d100      	bne.n	10011a1e <__sflush_r+0xa6>
10011a1c:	6560      	str	r0, [r4, #84]	; 0x54
10011a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011a20:	602e      	str	r6, [r5, #0]
10011a22:	2900      	cmp	r1, #0
10011a24:	d0ce      	beq.n	100119c4 <__sflush_r+0x4c>
10011a26:	0023      	movs	r3, r4
10011a28:	3344      	adds	r3, #68	; 0x44
10011a2a:	4299      	cmp	r1, r3
10011a2c:	d002      	beq.n	10011a34 <__sflush_r+0xbc>
10011a2e:	0028      	movs	r0, r5
10011a30:	f001 f8d2 	bl	10012bd8 <_free_r>
10011a34:	2000      	movs	r0, #0
10011a36:	6360      	str	r0, [r4, #52]	; 0x34
10011a38:	e021      	b.n	10011a7e <__sflush_r+0x106>
10011a3a:	690f      	ldr	r7, [r1, #16]
10011a3c:	2f00      	cmp	r7, #0
10011a3e:	d0c1      	beq.n	100119c4 <__sflush_r+0x4c>
10011a40:	680b      	ldr	r3, [r1, #0]
10011a42:	600f      	str	r7, [r1, #0]
10011a44:	1bdb      	subs	r3, r3, r7
10011a46:	9301      	str	r3, [sp, #4]
10011a48:	2300      	movs	r3, #0
10011a4a:	0792      	lsls	r2, r2, #30
10011a4c:	d100      	bne.n	10011a50 <__sflush_r+0xd8>
10011a4e:	694b      	ldr	r3, [r1, #20]
10011a50:	60a3      	str	r3, [r4, #8]
10011a52:	e003      	b.n	10011a5c <__sflush_r+0xe4>
10011a54:	9b01      	ldr	r3, [sp, #4]
10011a56:	183f      	adds	r7, r7, r0
10011a58:	1a1b      	subs	r3, r3, r0
10011a5a:	9301      	str	r3, [sp, #4]
10011a5c:	9b01      	ldr	r3, [sp, #4]
10011a5e:	2b00      	cmp	r3, #0
10011a60:	ddb0      	ble.n	100119c4 <__sflush_r+0x4c>
10011a62:	9b01      	ldr	r3, [sp, #4]
10011a64:	003a      	movs	r2, r7
10011a66:	6a21      	ldr	r1, [r4, #32]
10011a68:	0028      	movs	r0, r5
10011a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011a6c:	47b0      	blx	r6
10011a6e:	2800      	cmp	r0, #0
10011a70:	dcf0      	bgt.n	10011a54 <__sflush_r+0xdc>
10011a72:	89a3      	ldrh	r3, [r4, #12]
10011a74:	2240      	movs	r2, #64	; 0x40
10011a76:	2001      	movs	r0, #1
10011a78:	4313      	orrs	r3, r2
10011a7a:	81a3      	strh	r3, [r4, #12]
10011a7c:	4240      	negs	r0, r0
10011a7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011a80:	20400001 	.word	0x20400001

10011a84 <_fflush_r>:
10011a84:	690b      	ldr	r3, [r1, #16]
10011a86:	b570      	push	{r4, r5, r6, lr}
10011a88:	0005      	movs	r5, r0
10011a8a:	000c      	movs	r4, r1
10011a8c:	2b00      	cmp	r3, #0
10011a8e:	d101      	bne.n	10011a94 <_fflush_r+0x10>
10011a90:	2000      	movs	r0, #0
10011a92:	e01c      	b.n	10011ace <_fflush_r+0x4a>
10011a94:	2800      	cmp	r0, #0
10011a96:	d004      	beq.n	10011aa2 <_fflush_r+0x1e>
10011a98:	6983      	ldr	r3, [r0, #24]
10011a9a:	2b00      	cmp	r3, #0
10011a9c:	d101      	bne.n	10011aa2 <_fflush_r+0x1e>
10011a9e:	f000 f85f 	bl	10011b60 <__sinit>
10011aa2:	4b0b      	ldr	r3, [pc, #44]	; (10011ad0 <_fflush_r+0x4c>)
10011aa4:	429c      	cmp	r4, r3
10011aa6:	d101      	bne.n	10011aac <_fflush_r+0x28>
10011aa8:	686c      	ldr	r4, [r5, #4]
10011aaa:	e008      	b.n	10011abe <_fflush_r+0x3a>
10011aac:	4b09      	ldr	r3, [pc, #36]	; (10011ad4 <_fflush_r+0x50>)
10011aae:	429c      	cmp	r4, r3
10011ab0:	d101      	bne.n	10011ab6 <_fflush_r+0x32>
10011ab2:	68ac      	ldr	r4, [r5, #8]
10011ab4:	e003      	b.n	10011abe <_fflush_r+0x3a>
10011ab6:	4b08      	ldr	r3, [pc, #32]	; (10011ad8 <_fflush_r+0x54>)
10011ab8:	429c      	cmp	r4, r3
10011aba:	d100      	bne.n	10011abe <_fflush_r+0x3a>
10011abc:	68ec      	ldr	r4, [r5, #12]
10011abe:	220c      	movs	r2, #12
10011ac0:	5ea3      	ldrsh	r3, [r4, r2]
10011ac2:	2b00      	cmp	r3, #0
10011ac4:	d0e4      	beq.n	10011a90 <_fflush_r+0xc>
10011ac6:	0021      	movs	r1, r4
10011ac8:	0028      	movs	r0, r5
10011aca:	f7ff ff55 	bl	10011978 <__sflush_r>
10011ace:	bd70      	pop	{r4, r5, r6, pc}
10011ad0:	10015148 	.word	0x10015148
10011ad4:	10015168 	.word	0x10015168
10011ad8:	10015188 	.word	0x10015188

10011adc <_cleanup_r>:
10011adc:	b510      	push	{r4, lr}
10011ade:	4902      	ldr	r1, [pc, #8]	; (10011ae8 <_cleanup_r+0xc>)
10011ae0:	f000 f8b0 	bl	10011c44 <_fwalk_reent>
10011ae4:	bd10      	pop	{r4, pc}
10011ae6:	46c0      	nop			; (mov r8, r8)
10011ae8:	10011a85 	.word	0x10011a85

10011aec <std.isra.0>:
10011aec:	2300      	movs	r3, #0
10011aee:	b510      	push	{r4, lr}
10011af0:	0004      	movs	r4, r0
10011af2:	6003      	str	r3, [r0, #0]
10011af4:	6043      	str	r3, [r0, #4]
10011af6:	6083      	str	r3, [r0, #8]
10011af8:	8181      	strh	r1, [r0, #12]
10011afa:	6643      	str	r3, [r0, #100]	; 0x64
10011afc:	81c2      	strh	r2, [r0, #14]
10011afe:	6103      	str	r3, [r0, #16]
10011b00:	6143      	str	r3, [r0, #20]
10011b02:	6183      	str	r3, [r0, #24]
10011b04:	0019      	movs	r1, r3
10011b06:	2208      	movs	r2, #8
10011b08:	305c      	adds	r0, #92	; 0x5c
10011b0a:	f7fe fe75 	bl	100107f8 <memset>
10011b0e:	4b05      	ldr	r3, [pc, #20]	; (10011b24 <std.isra.0+0x38>)
10011b10:	6224      	str	r4, [r4, #32]
10011b12:	6263      	str	r3, [r4, #36]	; 0x24
10011b14:	4b04      	ldr	r3, [pc, #16]	; (10011b28 <std.isra.0+0x3c>)
10011b16:	62a3      	str	r3, [r4, #40]	; 0x28
10011b18:	4b04      	ldr	r3, [pc, #16]	; (10011b2c <std.isra.0+0x40>)
10011b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
10011b1c:	4b04      	ldr	r3, [pc, #16]	; (10011b30 <std.isra.0+0x44>)
10011b1e:	6323      	str	r3, [r4, #48]	; 0x30
10011b20:	bd10      	pop	{r4, pc}
10011b22:	46c0      	nop			; (mov r8, r8)
10011b24:	10013349 	.word	0x10013349
10011b28:	10013371 	.word	0x10013371
10011b2c:	100133a9 	.word	0x100133a9
10011b30:	100133d5 	.word	0x100133d5

10011b34 <__sfmoreglue>:
10011b34:	b570      	push	{r4, r5, r6, lr}
10011b36:	2568      	movs	r5, #104	; 0x68
10011b38:	1e4b      	subs	r3, r1, #1
10011b3a:	435d      	muls	r5, r3
10011b3c:	000e      	movs	r6, r1
10011b3e:	0029      	movs	r1, r5
10011b40:	3174      	adds	r1, #116	; 0x74
10011b42:	f001 f88f 	bl	10012c64 <_malloc_r>
10011b46:	1e04      	subs	r4, r0, #0
10011b48:	d008      	beq.n	10011b5c <__sfmoreglue+0x28>
10011b4a:	2100      	movs	r1, #0
10011b4c:	002a      	movs	r2, r5
10011b4e:	6001      	str	r1, [r0, #0]
10011b50:	6046      	str	r6, [r0, #4]
10011b52:	300c      	adds	r0, #12
10011b54:	60a0      	str	r0, [r4, #8]
10011b56:	3268      	adds	r2, #104	; 0x68
10011b58:	f7fe fe4e 	bl	100107f8 <memset>
10011b5c:	0020      	movs	r0, r4
10011b5e:	bd70      	pop	{r4, r5, r6, pc}

10011b60 <__sinit>:
10011b60:	6983      	ldr	r3, [r0, #24]
10011b62:	b513      	push	{r0, r1, r4, lr}
10011b64:	0004      	movs	r4, r0
10011b66:	2b00      	cmp	r3, #0
10011b68:	d128      	bne.n	10011bbc <__sinit+0x5c>
10011b6a:	6483      	str	r3, [r0, #72]	; 0x48
10011b6c:	64c3      	str	r3, [r0, #76]	; 0x4c
10011b6e:	6503      	str	r3, [r0, #80]	; 0x50
10011b70:	4b13      	ldr	r3, [pc, #76]	; (10011bc0 <__sinit+0x60>)
10011b72:	4a14      	ldr	r2, [pc, #80]	; (10011bc4 <__sinit+0x64>)
10011b74:	681b      	ldr	r3, [r3, #0]
10011b76:	6282      	str	r2, [r0, #40]	; 0x28
10011b78:	9301      	str	r3, [sp, #4]
10011b7a:	4298      	cmp	r0, r3
10011b7c:	d101      	bne.n	10011b82 <__sinit+0x22>
10011b7e:	2301      	movs	r3, #1
10011b80:	6183      	str	r3, [r0, #24]
10011b82:	0020      	movs	r0, r4
10011b84:	f000 f820 	bl	10011bc8 <__sfp>
10011b88:	6060      	str	r0, [r4, #4]
10011b8a:	0020      	movs	r0, r4
10011b8c:	f000 f81c 	bl	10011bc8 <__sfp>
10011b90:	60a0      	str	r0, [r4, #8]
10011b92:	0020      	movs	r0, r4
10011b94:	f000 f818 	bl	10011bc8 <__sfp>
10011b98:	2200      	movs	r2, #0
10011b9a:	60e0      	str	r0, [r4, #12]
10011b9c:	2104      	movs	r1, #4
10011b9e:	6860      	ldr	r0, [r4, #4]
10011ba0:	f7ff ffa4 	bl	10011aec <std.isra.0>
10011ba4:	2201      	movs	r2, #1
10011ba6:	2109      	movs	r1, #9
10011ba8:	68a0      	ldr	r0, [r4, #8]
10011baa:	f7ff ff9f 	bl	10011aec <std.isra.0>
10011bae:	2202      	movs	r2, #2
10011bb0:	2112      	movs	r1, #18
10011bb2:	68e0      	ldr	r0, [r4, #12]
10011bb4:	f7ff ff9a 	bl	10011aec <std.isra.0>
10011bb8:	2301      	movs	r3, #1
10011bba:	61a3      	str	r3, [r4, #24]
10011bbc:	bd13      	pop	{r0, r1, r4, pc}
10011bbe:	46c0      	nop			; (mov r8, r8)
10011bc0:	100150e8 	.word	0x100150e8
10011bc4:	10011add 	.word	0x10011add

10011bc8 <__sfp>:
10011bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011bca:	4b1d      	ldr	r3, [pc, #116]	; (10011c40 <__sfp+0x78>)
10011bcc:	0006      	movs	r6, r0
10011bce:	681d      	ldr	r5, [r3, #0]
10011bd0:	69ab      	ldr	r3, [r5, #24]
10011bd2:	2b00      	cmp	r3, #0
10011bd4:	d102      	bne.n	10011bdc <__sfp+0x14>
10011bd6:	0028      	movs	r0, r5
10011bd8:	f7ff ffc2 	bl	10011b60 <__sinit>
10011bdc:	3548      	adds	r5, #72	; 0x48
10011bde:	68ac      	ldr	r4, [r5, #8]
10011be0:	686b      	ldr	r3, [r5, #4]
10011be2:	3b01      	subs	r3, #1
10011be4:	d405      	bmi.n	10011bf2 <__sfp+0x2a>
10011be6:	220c      	movs	r2, #12
10011be8:	5ea7      	ldrsh	r7, [r4, r2]
10011bea:	2f00      	cmp	r7, #0
10011bec:	d010      	beq.n	10011c10 <__sfp+0x48>
10011bee:	3468      	adds	r4, #104	; 0x68
10011bf0:	e7f7      	b.n	10011be2 <__sfp+0x1a>
10011bf2:	682b      	ldr	r3, [r5, #0]
10011bf4:	2b00      	cmp	r3, #0
10011bf6:	d001      	beq.n	10011bfc <__sfp+0x34>
10011bf8:	682d      	ldr	r5, [r5, #0]
10011bfa:	e7f0      	b.n	10011bde <__sfp+0x16>
10011bfc:	2104      	movs	r1, #4
10011bfe:	0030      	movs	r0, r6
10011c00:	f7ff ff98 	bl	10011b34 <__sfmoreglue>
10011c04:	6028      	str	r0, [r5, #0]
10011c06:	2800      	cmp	r0, #0
10011c08:	d1f6      	bne.n	10011bf8 <__sfp+0x30>
10011c0a:	230c      	movs	r3, #12
10011c0c:	6033      	str	r3, [r6, #0]
10011c0e:	e016      	b.n	10011c3e <__sfp+0x76>
10011c10:	2301      	movs	r3, #1
10011c12:	0020      	movs	r0, r4
10011c14:	425b      	negs	r3, r3
10011c16:	81e3      	strh	r3, [r4, #14]
10011c18:	3302      	adds	r3, #2
10011c1a:	81a3      	strh	r3, [r4, #12]
10011c1c:	6667      	str	r7, [r4, #100]	; 0x64
10011c1e:	6027      	str	r7, [r4, #0]
10011c20:	60a7      	str	r7, [r4, #8]
10011c22:	6067      	str	r7, [r4, #4]
10011c24:	6127      	str	r7, [r4, #16]
10011c26:	6167      	str	r7, [r4, #20]
10011c28:	61a7      	str	r7, [r4, #24]
10011c2a:	305c      	adds	r0, #92	; 0x5c
10011c2c:	2208      	movs	r2, #8
10011c2e:	0039      	movs	r1, r7
10011c30:	f7fe fde2 	bl	100107f8 <memset>
10011c34:	0020      	movs	r0, r4
10011c36:	6367      	str	r7, [r4, #52]	; 0x34
10011c38:	63a7      	str	r7, [r4, #56]	; 0x38
10011c3a:	64a7      	str	r7, [r4, #72]	; 0x48
10011c3c:	64e7      	str	r7, [r4, #76]	; 0x4c
10011c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011c40:	100150e8 	.word	0x100150e8

10011c44 <_fwalk_reent>:
10011c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011c46:	0004      	movs	r4, r0
10011c48:	0007      	movs	r7, r0
10011c4a:	2600      	movs	r6, #0
10011c4c:	9101      	str	r1, [sp, #4]
10011c4e:	3448      	adds	r4, #72	; 0x48
10011c50:	2c00      	cmp	r4, #0
10011c52:	d016      	beq.n	10011c82 <_fwalk_reent+0x3e>
10011c54:	6863      	ldr	r3, [r4, #4]
10011c56:	68a5      	ldr	r5, [r4, #8]
10011c58:	9300      	str	r3, [sp, #0]
10011c5a:	9b00      	ldr	r3, [sp, #0]
10011c5c:	3b01      	subs	r3, #1
10011c5e:	9300      	str	r3, [sp, #0]
10011c60:	d40d      	bmi.n	10011c7e <_fwalk_reent+0x3a>
10011c62:	89ab      	ldrh	r3, [r5, #12]
10011c64:	2b01      	cmp	r3, #1
10011c66:	d908      	bls.n	10011c7a <_fwalk_reent+0x36>
10011c68:	220e      	movs	r2, #14
10011c6a:	5eab      	ldrsh	r3, [r5, r2]
10011c6c:	3301      	adds	r3, #1
10011c6e:	d004      	beq.n	10011c7a <_fwalk_reent+0x36>
10011c70:	0029      	movs	r1, r5
10011c72:	0038      	movs	r0, r7
10011c74:	9b01      	ldr	r3, [sp, #4]
10011c76:	4798      	blx	r3
10011c78:	4306      	orrs	r6, r0
10011c7a:	3568      	adds	r5, #104	; 0x68
10011c7c:	e7ed      	b.n	10011c5a <_fwalk_reent+0x16>
10011c7e:	6824      	ldr	r4, [r4, #0]
10011c80:	e7e6      	b.n	10011c50 <_fwalk_reent+0xc>
10011c82:	0030      	movs	r0, r6
10011c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10011c86 <rshift>:
10011c86:	b5f0      	push	{r4, r5, r6, r7, lr}
10011c88:	0006      	movs	r6, r0
10011c8a:	6905      	ldr	r5, [r0, #16]
10011c8c:	3614      	adds	r6, #20
10011c8e:	114a      	asrs	r2, r1, #5
10011c90:	0034      	movs	r4, r6
10011c92:	42aa      	cmp	r2, r5
10011c94:	da25      	bge.n	10011ce2 <rshift+0x5c>
10011c96:	231f      	movs	r3, #31
10011c98:	00ad      	lsls	r5, r5, #2
10011c9a:	0092      	lsls	r2, r2, #2
10011c9c:	4019      	ands	r1, r3
10011c9e:	1975      	adds	r5, r6, r5
10011ca0:	18b2      	adds	r2, r6, r2
10011ca2:	0033      	movs	r3, r6
10011ca4:	2900      	cmp	r1, #0
10011ca6:	d016      	beq.n	10011cd6 <rshift+0x50>
10011ca8:	0013      	movs	r3, r2
10011caa:	cb04      	ldmia	r3!, {r2}
10011cac:	2720      	movs	r7, #32
10011cae:	40ca      	lsrs	r2, r1
10011cb0:	46b4      	mov	ip, r6
10011cb2:	1a7f      	subs	r7, r7, r1
10011cb4:	4664      	mov	r4, ip
10011cb6:	429d      	cmp	r5, r3
10011cb8:	d908      	bls.n	10011ccc <rshift+0x46>
10011cba:	681c      	ldr	r4, [r3, #0]
10011cbc:	40bc      	lsls	r4, r7
10011cbe:	4322      	orrs	r2, r4
10011cc0:	4664      	mov	r4, ip
10011cc2:	c404      	stmia	r4!, {r2}
10011cc4:	cb04      	ldmia	r3!, {r2}
10011cc6:	46a4      	mov	ip, r4
10011cc8:	40ca      	lsrs	r2, r1
10011cca:	e7f3      	b.n	10011cb4 <rshift+0x2e>
10011ccc:	6022      	str	r2, [r4, #0]
10011cce:	2a00      	cmp	r2, #0
10011cd0:	d007      	beq.n	10011ce2 <rshift+0x5c>
10011cd2:	3404      	adds	r4, #4
10011cd4:	e005      	b.n	10011ce2 <rshift+0x5c>
10011cd6:	001c      	movs	r4, r3
10011cd8:	4295      	cmp	r5, r2
10011cda:	d902      	bls.n	10011ce2 <rshift+0x5c>
10011cdc:	ca02      	ldmia	r2!, {r1}
10011cde:	c302      	stmia	r3!, {r1}
10011ce0:	e7f9      	b.n	10011cd6 <rshift+0x50>
10011ce2:	1ba3      	subs	r3, r4, r6
10011ce4:	109b      	asrs	r3, r3, #2
10011ce6:	6103      	str	r3, [r0, #16]
10011ce8:	d100      	bne.n	10011cec <rshift+0x66>
10011cea:	6143      	str	r3, [r0, #20]
10011cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

10011cee <__hexdig_fun>:
10011cee:	0003      	movs	r3, r0
10011cf0:	3b30      	subs	r3, #48	; 0x30
10011cf2:	2b09      	cmp	r3, #9
10011cf4:	d801      	bhi.n	10011cfa <__hexdig_fun+0xc>
10011cf6:	3820      	subs	r0, #32
10011cf8:	e00b      	b.n	10011d12 <__hexdig_fun+0x24>
10011cfa:	0003      	movs	r3, r0
10011cfc:	3b61      	subs	r3, #97	; 0x61
10011cfe:	2b05      	cmp	r3, #5
10011d00:	d801      	bhi.n	10011d06 <__hexdig_fun+0x18>
10011d02:	3847      	subs	r0, #71	; 0x47
10011d04:	e005      	b.n	10011d12 <__hexdig_fun+0x24>
10011d06:	0002      	movs	r2, r0
10011d08:	3a41      	subs	r2, #65	; 0x41
10011d0a:	2300      	movs	r3, #0
10011d0c:	2a05      	cmp	r2, #5
10011d0e:	d801      	bhi.n	10011d14 <__hexdig_fun+0x26>
10011d10:	3827      	subs	r0, #39	; 0x27
10011d12:	b2c3      	uxtb	r3, r0
10011d14:	0018      	movs	r0, r3
10011d16:	4770      	bx	lr

10011d18 <__gethex>:
10011d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d1a:	b08d      	sub	sp, #52	; 0x34
10011d1c:	9109      	str	r1, [sp, #36]	; 0x24
10011d1e:	9202      	str	r2, [sp, #8]
10011d20:	930a      	str	r3, [sp, #40]	; 0x28
10011d22:	9005      	str	r0, [sp, #20]
10011d24:	f000 fae0 	bl	100122e8 <_localeconv_r>
10011d28:	6803      	ldr	r3, [r0, #0]
10011d2a:	0018      	movs	r0, r3
10011d2c:	9307      	str	r3, [sp, #28]
10011d2e:	f001 fb57 	bl	100133e0 <strlen>
10011d32:	2202      	movs	r2, #2
10011d34:	9b07      	ldr	r3, [sp, #28]
10011d36:	4252      	negs	r2, r2
10011d38:	181b      	adds	r3, r3, r0
10011d3a:	3b01      	subs	r3, #1
10011d3c:	781b      	ldrb	r3, [r3, #0]
10011d3e:	9004      	str	r0, [sp, #16]
10011d40:	930b      	str	r3, [sp, #44]	; 0x2c
10011d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011d44:	6819      	ldr	r1, [r3, #0]
10011d46:	1c8b      	adds	r3, r1, #2
10011d48:	1a52      	subs	r2, r2, r1
10011d4a:	18d1      	adds	r1, r2, r3
10011d4c:	9301      	str	r3, [sp, #4]
10011d4e:	9108      	str	r1, [sp, #32]
10011d50:	9901      	ldr	r1, [sp, #4]
10011d52:	3301      	adds	r3, #1
10011d54:	7808      	ldrb	r0, [r1, #0]
10011d56:	2830      	cmp	r0, #48	; 0x30
10011d58:	d0f7      	beq.n	10011d4a <__gethex+0x32>
10011d5a:	f7ff ffc8 	bl	10011cee <__hexdig_fun>
10011d5e:	1e06      	subs	r6, r0, #0
10011d60:	d120      	bne.n	10011da4 <__gethex+0x8c>
10011d62:	9a04      	ldr	r2, [sp, #16]
10011d64:	9907      	ldr	r1, [sp, #28]
10011d66:	9801      	ldr	r0, [sp, #4]
10011d68:	f001 fb41 	bl	100133ee <strncmp>
10011d6c:	2800      	cmp	r0, #0
10011d6e:	d13c      	bne.n	10011dea <__gethex+0xd2>
10011d70:	9b01      	ldr	r3, [sp, #4]
10011d72:	9a04      	ldr	r2, [sp, #16]
10011d74:	189c      	adds	r4, r3, r2
10011d76:	7820      	ldrb	r0, [r4, #0]
10011d78:	f7ff ffb9 	bl	10011cee <__hexdig_fun>
10011d7c:	2800      	cmp	r0, #0
10011d7e:	d037      	beq.n	10011df0 <__gethex+0xd8>
10011d80:	9401      	str	r4, [sp, #4]
10011d82:	9b01      	ldr	r3, [sp, #4]
10011d84:	7818      	ldrb	r0, [r3, #0]
10011d86:	2830      	cmp	r0, #48	; 0x30
10011d88:	d103      	bne.n	10011d92 <__gethex+0x7a>
10011d8a:	9b01      	ldr	r3, [sp, #4]
10011d8c:	3301      	adds	r3, #1
10011d8e:	9301      	str	r3, [sp, #4]
10011d90:	e7f7      	b.n	10011d82 <__gethex+0x6a>
10011d92:	f7ff ffac 	bl	10011cee <__hexdig_fun>
10011d96:	4243      	negs	r3, r0
10011d98:	4143      	adcs	r3, r0
10011d9a:	9303      	str	r3, [sp, #12]
10011d9c:	2301      	movs	r3, #1
10011d9e:	0026      	movs	r6, r4
10011da0:	9308      	str	r3, [sp, #32]
10011da2:	e002      	b.n	10011daa <__gethex+0x92>
10011da4:	2300      	movs	r3, #0
10011da6:	001e      	movs	r6, r3
10011da8:	9303      	str	r3, [sp, #12]
10011daa:	9c01      	ldr	r4, [sp, #4]
10011dac:	7820      	ldrb	r0, [r4, #0]
10011dae:	f7ff ff9e 	bl	10011cee <__hexdig_fun>
10011db2:	2800      	cmp	r0, #0
10011db4:	d001      	beq.n	10011dba <__gethex+0xa2>
10011db6:	3401      	adds	r4, #1
10011db8:	e7f8      	b.n	10011dac <__gethex+0x94>
10011dba:	9a04      	ldr	r2, [sp, #16]
10011dbc:	9907      	ldr	r1, [sp, #28]
10011dbe:	0020      	movs	r0, r4
10011dc0:	f001 fb15 	bl	100133ee <strncmp>
10011dc4:	2800      	cmp	r0, #0
10011dc6:	d10b      	bne.n	10011de0 <__gethex+0xc8>
10011dc8:	2e00      	cmp	r6, #0
10011dca:	d10b      	bne.n	10011de4 <__gethex+0xcc>
10011dcc:	9b04      	ldr	r3, [sp, #16]
10011dce:	18e4      	adds	r4, r4, r3
10011dd0:	0026      	movs	r6, r4
10011dd2:	7820      	ldrb	r0, [r4, #0]
10011dd4:	f7ff ff8b 	bl	10011cee <__hexdig_fun>
10011dd8:	2800      	cmp	r0, #0
10011dda:	d001      	beq.n	10011de0 <__gethex+0xc8>
10011ddc:	3401      	adds	r4, #1
10011dde:	e7f8      	b.n	10011dd2 <__gethex+0xba>
10011de0:	1e37      	subs	r7, r6, #0
10011de2:	d008      	beq.n	10011df6 <__gethex+0xde>
10011de4:	1b36      	subs	r6, r6, r4
10011de6:	00b7      	lsls	r7, r6, #2
10011de8:	e005      	b.n	10011df6 <__gethex+0xde>
10011dea:	9c01      	ldr	r4, [sp, #4]
10011dec:	0037      	movs	r7, r6
10011dee:	e000      	b.n	10011df2 <__gethex+0xda>
10011df0:	0007      	movs	r7, r0
10011df2:	2301      	movs	r3, #1
10011df4:	9303      	str	r3, [sp, #12]
10011df6:	7823      	ldrb	r3, [r4, #0]
10011df8:	2b50      	cmp	r3, #80	; 0x50
10011dfa:	d001      	beq.n	10011e00 <__gethex+0xe8>
10011dfc:	2b70      	cmp	r3, #112	; 0x70
10011dfe:	d128      	bne.n	10011e52 <__gethex+0x13a>
10011e00:	7863      	ldrb	r3, [r4, #1]
10011e02:	2b2b      	cmp	r3, #43	; 0x2b
10011e04:	d007      	beq.n	10011e16 <__gethex+0xfe>
10011e06:	2b2d      	cmp	r3, #45	; 0x2d
10011e08:	d003      	beq.n	10011e12 <__gethex+0xfa>
10011e0a:	2300      	movs	r3, #0
10011e0c:	1c66      	adds	r6, r4, #1
10011e0e:	9306      	str	r3, [sp, #24]
10011e10:	e004      	b.n	10011e1c <__gethex+0x104>
10011e12:	2301      	movs	r3, #1
10011e14:	e000      	b.n	10011e18 <__gethex+0x100>
10011e16:	2300      	movs	r3, #0
10011e18:	9306      	str	r3, [sp, #24]
10011e1a:	1ca6      	adds	r6, r4, #2
10011e1c:	7830      	ldrb	r0, [r6, #0]
10011e1e:	f7ff ff66 	bl	10011cee <__hexdig_fun>
10011e22:	1e43      	subs	r3, r0, #1
10011e24:	b2db      	uxtb	r3, r3
10011e26:	2b18      	cmp	r3, #24
10011e28:	d813      	bhi.n	10011e52 <__gethex+0x13a>
10011e2a:	3810      	subs	r0, #16
10011e2c:	3601      	adds	r6, #1
10011e2e:	0005      	movs	r5, r0
10011e30:	7830      	ldrb	r0, [r6, #0]
10011e32:	f7ff ff5c 	bl	10011cee <__hexdig_fun>
10011e36:	1e43      	subs	r3, r0, #1
10011e38:	b2db      	uxtb	r3, r3
10011e3a:	2b18      	cmp	r3, #24
10011e3c:	d803      	bhi.n	10011e46 <__gethex+0x12e>
10011e3e:	230a      	movs	r3, #10
10011e40:	435d      	muls	r5, r3
10011e42:	1828      	adds	r0, r5, r0
10011e44:	e7f1      	b.n	10011e2a <__gethex+0x112>
10011e46:	9b06      	ldr	r3, [sp, #24]
10011e48:	2b00      	cmp	r3, #0
10011e4a:	d000      	beq.n	10011e4e <__gethex+0x136>
10011e4c:	426d      	negs	r5, r5
10011e4e:	197f      	adds	r7, r7, r5
10011e50:	e000      	b.n	10011e54 <__gethex+0x13c>
10011e52:	0026      	movs	r6, r4
10011e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011e56:	601e      	str	r6, [r3, #0]
10011e58:	9b03      	ldr	r3, [sp, #12]
10011e5a:	2b00      	cmp	r3, #0
10011e5c:	d006      	beq.n	10011e6c <__gethex+0x154>
10011e5e:	2000      	movs	r0, #0
10011e60:	9b08      	ldr	r3, [sp, #32]
10011e62:	4283      	cmp	r3, r0
10011e64:	d000      	beq.n	10011e68 <__gethex+0x150>
10011e66:	e17f      	b.n	10012168 <__gethex+0x450>
10011e68:	3006      	adds	r0, #6
10011e6a:	e17d      	b.n	10012168 <__gethex+0x450>
10011e6c:	9b01      	ldr	r3, [sp, #4]
10011e6e:	9903      	ldr	r1, [sp, #12]
10011e70:	1ae3      	subs	r3, r4, r3
10011e72:	3b01      	subs	r3, #1
10011e74:	2b07      	cmp	r3, #7
10011e76:	dd02      	ble.n	10011e7e <__gethex+0x166>
10011e78:	3101      	adds	r1, #1
10011e7a:	105b      	asrs	r3, r3, #1
10011e7c:	e7fa      	b.n	10011e74 <__gethex+0x15c>
10011e7e:	9805      	ldr	r0, [sp, #20]
10011e80:	f000 faa4 	bl	100123cc <_Balloc>
10011e84:	0003      	movs	r3, r0
10011e86:	2600      	movs	r6, #0
10011e88:	0005      	movs	r5, r0
10011e8a:	3314      	adds	r3, #20
10011e8c:	9303      	str	r3, [sp, #12]
10011e8e:	9308      	str	r3, [sp, #32]
10011e90:	9606      	str	r6, [sp, #24]
10011e92:	9b01      	ldr	r3, [sp, #4]
10011e94:	42a3      	cmp	r3, r4
10011e96:	d22b      	bcs.n	10011ef0 <__gethex+0x1d8>
10011e98:	1e63      	subs	r3, r4, #1
10011e9a:	9309      	str	r3, [sp, #36]	; 0x24
10011e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10011e9e:	781b      	ldrb	r3, [r3, #0]
10011ea0:	4293      	cmp	r3, r2
10011ea2:	d009      	beq.n	10011eb8 <__gethex+0x1a0>
10011ea4:	9b06      	ldr	r3, [sp, #24]
10011ea6:	2b20      	cmp	r3, #32
10011ea8:	d115      	bne.n	10011ed6 <__gethex+0x1be>
10011eaa:	9b08      	ldr	r3, [sp, #32]
10011eac:	601e      	str	r6, [r3, #0]
10011eae:	2600      	movs	r6, #0
10011eb0:	3304      	adds	r3, #4
10011eb2:	9308      	str	r3, [sp, #32]
10011eb4:	9606      	str	r6, [sp, #24]
10011eb6:	e00e      	b.n	10011ed6 <__gethex+0x1be>
10011eb8:	2301      	movs	r3, #1
10011eba:	9a04      	ldr	r2, [sp, #16]
10011ebc:	1a9c      	subs	r4, r3, r2
10011ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011ec0:	191c      	adds	r4, r3, r4
10011ec2:	9b01      	ldr	r3, [sp, #4]
10011ec4:	42a3      	cmp	r3, r4
10011ec6:	d8ed      	bhi.n	10011ea4 <__gethex+0x18c>
10011ec8:	9907      	ldr	r1, [sp, #28]
10011eca:	0020      	movs	r0, r4
10011ecc:	f001 fa8f 	bl	100133ee <strncmp>
10011ed0:	2800      	cmp	r0, #0
10011ed2:	d0de      	beq.n	10011e92 <__gethex+0x17a>
10011ed4:	e7e6      	b.n	10011ea4 <__gethex+0x18c>
10011ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011ed8:	7818      	ldrb	r0, [r3, #0]
10011eda:	f7ff ff08 	bl	10011cee <__hexdig_fun>
10011ede:	230f      	movs	r3, #15
10011ee0:	4018      	ands	r0, r3
10011ee2:	9b06      	ldr	r3, [sp, #24]
10011ee4:	9c09      	ldr	r4, [sp, #36]	; 0x24
10011ee6:	4098      	lsls	r0, r3
10011ee8:	3304      	adds	r3, #4
10011eea:	4306      	orrs	r6, r0
10011eec:	9306      	str	r3, [sp, #24]
10011eee:	e7d0      	b.n	10011e92 <__gethex+0x17a>
10011ef0:	9c08      	ldr	r4, [sp, #32]
10011ef2:	9b03      	ldr	r3, [sp, #12]
10011ef4:	c440      	stmia	r4!, {r6}
10011ef6:	1ae4      	subs	r4, r4, r3
10011ef8:	10a4      	asrs	r4, r4, #2
10011efa:	612c      	str	r4, [r5, #16]
10011efc:	0030      	movs	r0, r6
10011efe:	f000 fb31 	bl	10012564 <__hi0bits>
10011f02:	9b02      	ldr	r3, [sp, #8]
10011f04:	0164      	lsls	r4, r4, #5
10011f06:	681b      	ldr	r3, [r3, #0]
10011f08:	1a26      	subs	r6, r4, r0
10011f0a:	9301      	str	r3, [sp, #4]
10011f0c:	429e      	cmp	r6, r3
10011f0e:	dd25      	ble.n	10011f5c <__gethex+0x244>
10011f10:	1af6      	subs	r6, r6, r3
10011f12:	0031      	movs	r1, r6
10011f14:	0028      	movs	r0, r5
10011f16:	f000 fe2f 	bl	10012b78 <__any_on>
10011f1a:	2400      	movs	r4, #0
10011f1c:	42a0      	cmp	r0, r4
10011f1e:	d017      	beq.n	10011f50 <__gethex+0x238>
10011f20:	211f      	movs	r1, #31
10011f22:	3401      	adds	r4, #1
10011f24:	0020      	movs	r0, r4
10011f26:	1e73      	subs	r3, r6, #1
10011f28:	4019      	ands	r1, r3
10011f2a:	4088      	lsls	r0, r1
10011f2c:	0001      	movs	r1, r0
10011f2e:	115a      	asrs	r2, r3, #5
10011f30:	9803      	ldr	r0, [sp, #12]
10011f32:	0092      	lsls	r2, r2, #2
10011f34:	5812      	ldr	r2, [r2, r0]
10011f36:	420a      	tst	r2, r1
10011f38:	d00a      	beq.n	10011f50 <__gethex+0x238>
10011f3a:	42a3      	cmp	r3, r4
10011f3c:	dc01      	bgt.n	10011f42 <__gethex+0x22a>
10011f3e:	2402      	movs	r4, #2
10011f40:	e006      	b.n	10011f50 <__gethex+0x238>
10011f42:	1eb1      	subs	r1, r6, #2
10011f44:	0028      	movs	r0, r5
10011f46:	f000 fe17 	bl	10012b78 <__any_on>
10011f4a:	2800      	cmp	r0, #0
10011f4c:	d0f7      	beq.n	10011f3e <__gethex+0x226>
10011f4e:	2403      	movs	r4, #3
10011f50:	0031      	movs	r1, r6
10011f52:	0028      	movs	r0, r5
10011f54:	f7ff fe97 	bl	10011c86 <rshift>
10011f58:	19bf      	adds	r7, r7, r6
10011f5a:	e00e      	b.n	10011f7a <__gethex+0x262>
10011f5c:	9b01      	ldr	r3, [sp, #4]
10011f5e:	2400      	movs	r4, #0
10011f60:	429e      	cmp	r6, r3
10011f62:	da0a      	bge.n	10011f7a <__gethex+0x262>
10011f64:	1b9e      	subs	r6, r3, r6
10011f66:	0029      	movs	r1, r5
10011f68:	0032      	movs	r2, r6
10011f6a:	9805      	ldr	r0, [sp, #20]
10011f6c:	f000 fc2a 	bl	100127c4 <__lshift>
10011f70:	0003      	movs	r3, r0
10011f72:	0005      	movs	r5, r0
10011f74:	3314      	adds	r3, #20
10011f76:	1bbf      	subs	r7, r7, r6
10011f78:	9303      	str	r3, [sp, #12]
10011f7a:	9b02      	ldr	r3, [sp, #8]
10011f7c:	689b      	ldr	r3, [r3, #8]
10011f7e:	9304      	str	r3, [sp, #16]
10011f80:	429f      	cmp	r7, r3
10011f82:	dd08      	ble.n	10011f96 <__gethex+0x27e>
10011f84:	9805      	ldr	r0, [sp, #20]
10011f86:	0029      	movs	r1, r5
10011f88:	f000 fa58 	bl	1001243c <_Bfree>
10011f8c:	2300      	movs	r3, #0
10011f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
10011f90:	20a3      	movs	r0, #163	; 0xa3
10011f92:	6013      	str	r3, [r2, #0]
10011f94:	e0e8      	b.n	10012168 <__gethex+0x450>
10011f96:	9b02      	ldr	r3, [sp, #8]
10011f98:	685e      	ldr	r6, [r3, #4]
10011f9a:	42b7      	cmp	r7, r6
10011f9c:	da59      	bge.n	10012052 <__gethex+0x33a>
10011f9e:	9b01      	ldr	r3, [sp, #4]
10011fa0:	1bf6      	subs	r6, r6, r7
10011fa2:	42b3      	cmp	r3, r6
10011fa4:	dc32      	bgt.n	1001200c <__gethex+0x2f4>
10011fa6:	9b02      	ldr	r3, [sp, #8]
10011fa8:	68db      	ldr	r3, [r3, #12]
10011faa:	2b02      	cmp	r3, #2
10011fac:	d01e      	beq.n	10011fec <__gethex+0x2d4>
10011fae:	2b03      	cmp	r3, #3
10011fb0:	d020      	beq.n	10011ff4 <__gethex+0x2dc>
10011fb2:	2b01      	cmp	r3, #1
10011fb4:	d121      	bne.n	10011ffa <__gethex+0x2e2>
10011fb6:	9b01      	ldr	r3, [sp, #4]
10011fb8:	42b3      	cmp	r3, r6
10011fba:	d11e      	bne.n	10011ffa <__gethex+0x2e2>
10011fbc:	2b01      	cmp	r3, #1
10011fbe:	dc0d      	bgt.n	10011fdc <__gethex+0x2c4>
10011fc0:	9b02      	ldr	r3, [sp, #8]
10011fc2:	2062      	movs	r0, #98	; 0x62
10011fc4:	685b      	ldr	r3, [r3, #4]
10011fc6:	9301      	str	r3, [sp, #4]
10011fc8:	9a01      	ldr	r2, [sp, #4]
10011fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10011fcc:	601a      	str	r2, [r3, #0]
10011fce:	2301      	movs	r3, #1
10011fd0:	9a03      	ldr	r2, [sp, #12]
10011fd2:	612b      	str	r3, [r5, #16]
10011fd4:	6013      	str	r3, [r2, #0]
10011fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
10011fd8:	601d      	str	r5, [r3, #0]
10011fda:	e0c5      	b.n	10012168 <__gethex+0x450>
10011fdc:	9901      	ldr	r1, [sp, #4]
10011fde:	0028      	movs	r0, r5
10011fe0:	3901      	subs	r1, #1
10011fe2:	f000 fdc9 	bl	10012b78 <__any_on>
10011fe6:	2800      	cmp	r0, #0
10011fe8:	d1ea      	bne.n	10011fc0 <__gethex+0x2a8>
10011fea:	e006      	b.n	10011ffa <__gethex+0x2e2>
10011fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10011fee:	2b00      	cmp	r3, #0
10011ff0:	d0e6      	beq.n	10011fc0 <__gethex+0x2a8>
10011ff2:	e002      	b.n	10011ffa <__gethex+0x2e2>
10011ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10011ff6:	2b00      	cmp	r3, #0
10011ff8:	d1e2      	bne.n	10011fc0 <__gethex+0x2a8>
10011ffa:	9805      	ldr	r0, [sp, #20]
10011ffc:	0029      	movs	r1, r5
10011ffe:	f000 fa1d 	bl	1001243c <_Bfree>
10012002:	2300      	movs	r3, #0
10012004:	9a12      	ldr	r2, [sp, #72]	; 0x48
10012006:	2050      	movs	r0, #80	; 0x50
10012008:	6013      	str	r3, [r2, #0]
1001200a:	e0ad      	b.n	10012168 <__gethex+0x450>
1001200c:	1e77      	subs	r7, r6, #1
1001200e:	2c00      	cmp	r4, #0
10012010:	d107      	bne.n	10012022 <__gethex+0x30a>
10012012:	2f00      	cmp	r7, #0
10012014:	d006      	beq.n	10012024 <__gethex+0x30c>
10012016:	0039      	movs	r1, r7
10012018:	0028      	movs	r0, r5
1001201a:	f000 fdad 	bl	10012b78 <__any_on>
1001201e:	0004      	movs	r4, r0
10012020:	e000      	b.n	10012024 <__gethex+0x30c>
10012022:	2401      	movs	r4, #1
10012024:	231f      	movs	r3, #31
10012026:	117a      	asrs	r2, r7, #5
10012028:	401f      	ands	r7, r3
1001202a:	3b1e      	subs	r3, #30
1001202c:	40bb      	lsls	r3, r7
1001202e:	9903      	ldr	r1, [sp, #12]
10012030:	0092      	lsls	r2, r2, #2
10012032:	5852      	ldr	r2, [r2, r1]
10012034:	421a      	tst	r2, r3
10012036:	d001      	beq.n	1001203c <__gethex+0x324>
10012038:	2302      	movs	r3, #2
1001203a:	431c      	orrs	r4, r3
1001203c:	9b01      	ldr	r3, [sp, #4]
1001203e:	0031      	movs	r1, r6
10012040:	1b9b      	subs	r3, r3, r6
10012042:	0028      	movs	r0, r5
10012044:	9301      	str	r3, [sp, #4]
10012046:	f7ff fe1e 	bl	10011c86 <rshift>
1001204a:	9b02      	ldr	r3, [sp, #8]
1001204c:	2602      	movs	r6, #2
1001204e:	685f      	ldr	r7, [r3, #4]
10012050:	e000      	b.n	10012054 <__gethex+0x33c>
10012052:	2601      	movs	r6, #1
10012054:	2c00      	cmp	r4, #0
10012056:	d100      	bne.n	1001205a <__gethex+0x342>
10012058:	e081      	b.n	1001215e <__gethex+0x446>
1001205a:	9b02      	ldr	r3, [sp, #8]
1001205c:	68db      	ldr	r3, [r3, #12]
1001205e:	2b02      	cmp	r3, #2
10012060:	d00b      	beq.n	1001207a <__gethex+0x362>
10012062:	2b03      	cmp	r3, #3
10012064:	d00d      	beq.n	10012082 <__gethex+0x36a>
10012066:	2b01      	cmp	r3, #1
10012068:	d177      	bne.n	1001215a <__gethex+0x442>
1001206a:	07a2      	lsls	r2, r4, #30
1001206c:	d575      	bpl.n	1001215a <__gethex+0x442>
1001206e:	9a03      	ldr	r2, [sp, #12]
10012070:	6812      	ldr	r2, [r2, #0]
10012072:	4314      	orrs	r4, r2
10012074:	421c      	tst	r4, r3
10012076:	d107      	bne.n	10012088 <__gethex+0x370>
10012078:	e06f      	b.n	1001215a <__gethex+0x442>
1001207a:	2301      	movs	r3, #1
1001207c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1001207e:	1a9b      	subs	r3, r3, r2
10012080:	9313      	str	r3, [sp, #76]	; 0x4c
10012082:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10012084:	2b00      	cmp	r3, #0
10012086:	d068      	beq.n	1001215a <__gethex+0x442>
10012088:	692c      	ldr	r4, [r5, #16]
1001208a:	00a3      	lsls	r3, r4, #2
1001208c:	9304      	str	r3, [sp, #16]
1001208e:	002b      	movs	r3, r5
10012090:	00a2      	lsls	r2, r4, #2
10012092:	3314      	adds	r3, #20
10012094:	1899      	adds	r1, r3, r2
10012096:	2200      	movs	r2, #0
10012098:	4694      	mov	ip, r2
1001209a:	681a      	ldr	r2, [r3, #0]
1001209c:	1c50      	adds	r0, r2, #1
1001209e:	d002      	beq.n	100120a6 <__gethex+0x38e>
100120a0:	3201      	adds	r2, #1
100120a2:	601a      	str	r2, [r3, #0]
100120a4:	e021      	b.n	100120ea <__gethex+0x3d2>
100120a6:	4662      	mov	r2, ip
100120a8:	c304      	stmia	r3!, {r2}
100120aa:	4299      	cmp	r1, r3
100120ac:	d8f5      	bhi.n	1001209a <__gethex+0x382>
100120ae:	68ab      	ldr	r3, [r5, #8]
100120b0:	429c      	cmp	r4, r3
100120b2:	db12      	blt.n	100120da <__gethex+0x3c2>
100120b4:	686b      	ldr	r3, [r5, #4]
100120b6:	9805      	ldr	r0, [sp, #20]
100120b8:	1c59      	adds	r1, r3, #1
100120ba:	f000 f987 	bl	100123cc <_Balloc>
100120be:	0029      	movs	r1, r5
100120c0:	692b      	ldr	r3, [r5, #16]
100120c2:	9003      	str	r0, [sp, #12]
100120c4:	1c9a      	adds	r2, r3, #2
100120c6:	0092      	lsls	r2, r2, #2
100120c8:	310c      	adds	r1, #12
100120ca:	300c      	adds	r0, #12
100120cc:	f7fe fb8b 	bl	100107e6 <memcpy>
100120d0:	0029      	movs	r1, r5
100120d2:	9805      	ldr	r0, [sp, #20]
100120d4:	f000 f9b2 	bl	1001243c <_Bfree>
100120d8:	9d03      	ldr	r5, [sp, #12]
100120da:	692b      	ldr	r3, [r5, #16]
100120dc:	1c5a      	adds	r2, r3, #1
100120de:	612a      	str	r2, [r5, #16]
100120e0:	2201      	movs	r2, #1
100120e2:	3304      	adds	r3, #4
100120e4:	009b      	lsls	r3, r3, #2
100120e6:	18eb      	adds	r3, r5, r3
100120e8:	605a      	str	r2, [r3, #4]
100120ea:	002b      	movs	r3, r5
100120ec:	3314      	adds	r3, #20
100120ee:	2e02      	cmp	r6, #2
100120f0:	d112      	bne.n	10012118 <__gethex+0x400>
100120f2:	9a02      	ldr	r2, [sp, #8]
100120f4:	9901      	ldr	r1, [sp, #4]
100120f6:	6812      	ldr	r2, [r2, #0]
100120f8:	3a01      	subs	r2, #1
100120fa:	4291      	cmp	r1, r2
100120fc:	d12b      	bne.n	10012156 <__gethex+0x43e>
100120fe:	114a      	asrs	r2, r1, #5
10012100:	211f      	movs	r1, #31
10012102:	9801      	ldr	r0, [sp, #4]
10012104:	0092      	lsls	r2, r2, #2
10012106:	4001      	ands	r1, r0
10012108:	2001      	movs	r0, #1
1001210a:	0004      	movs	r4, r0
1001210c:	408c      	lsls	r4, r1
1001210e:	58d3      	ldr	r3, [r2, r3]
10012110:	4223      	tst	r3, r4
10012112:	d020      	beq.n	10012156 <__gethex+0x43e>
10012114:	0006      	movs	r6, r0
10012116:	e01e      	b.n	10012156 <__gethex+0x43e>
10012118:	692a      	ldr	r2, [r5, #16]
1001211a:	4294      	cmp	r4, r2
1001211c:	da0b      	bge.n	10012136 <__gethex+0x41e>
1001211e:	2101      	movs	r1, #1
10012120:	0028      	movs	r0, r5
10012122:	f7ff fdb0 	bl	10011c86 <rshift>
10012126:	9b02      	ldr	r3, [sp, #8]
10012128:	3701      	adds	r7, #1
1001212a:	689b      	ldr	r3, [r3, #8]
1001212c:	2601      	movs	r6, #1
1001212e:	429f      	cmp	r7, r3
10012130:	dd00      	ble.n	10012134 <__gethex+0x41c>
10012132:	e727      	b.n	10011f84 <__gethex+0x26c>
10012134:	e00f      	b.n	10012156 <__gethex+0x43e>
10012136:	241f      	movs	r4, #31
10012138:	9a01      	ldr	r2, [sp, #4]
1001213a:	2601      	movs	r6, #1
1001213c:	4022      	ands	r2, r4
1001213e:	1e14      	subs	r4, r2, #0
10012140:	d009      	beq.n	10012156 <__gethex+0x43e>
10012142:	9a04      	ldr	r2, [sp, #16]
10012144:	189b      	adds	r3, r3, r2
10012146:	3b04      	subs	r3, #4
10012148:	6818      	ldr	r0, [r3, #0]
1001214a:	f000 fa0b 	bl	10012564 <__hi0bits>
1001214e:	2120      	movs	r1, #32
10012150:	1b0c      	subs	r4, r1, r4
10012152:	42a0      	cmp	r0, r4
10012154:	dbe3      	blt.n	1001211e <__gethex+0x406>
10012156:	2320      	movs	r3, #32
10012158:	e000      	b.n	1001215c <__gethex+0x444>
1001215a:	2310      	movs	r3, #16
1001215c:	431e      	orrs	r6, r3
1001215e:	0030      	movs	r0, r6
10012160:	9b12      	ldr	r3, [sp, #72]	; 0x48
10012162:	601d      	str	r5, [r3, #0]
10012164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012166:	601f      	str	r7, [r3, #0]
10012168:	b00d      	add	sp, #52	; 0x34
1001216a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001216c <L_shift>:
1001216c:	2308      	movs	r3, #8
1001216e:	b570      	push	{r4, r5, r6, lr}
10012170:	2520      	movs	r5, #32
10012172:	1a9a      	subs	r2, r3, r2
10012174:	0092      	lsls	r2, r2, #2
10012176:	1aad      	subs	r5, r5, r2
10012178:	6843      	ldr	r3, [r0, #4]
1001217a:	6806      	ldr	r6, [r0, #0]
1001217c:	001c      	movs	r4, r3
1001217e:	40ac      	lsls	r4, r5
10012180:	40d3      	lsrs	r3, r2
10012182:	4334      	orrs	r4, r6
10012184:	6004      	str	r4, [r0, #0]
10012186:	6043      	str	r3, [r0, #4]
10012188:	3004      	adds	r0, #4
1001218a:	4288      	cmp	r0, r1
1001218c:	d3f4      	bcc.n	10012178 <L_shift+0xc>
1001218e:	bd70      	pop	{r4, r5, r6, pc}

10012190 <__match>:
10012190:	b530      	push	{r4, r5, lr}
10012192:	6803      	ldr	r3, [r0, #0]
10012194:	780c      	ldrb	r4, [r1, #0]
10012196:	3301      	adds	r3, #1
10012198:	2c00      	cmp	r4, #0
1001219a:	d00a      	beq.n	100121b2 <__match+0x22>
1001219c:	781a      	ldrb	r2, [r3, #0]
1001219e:	0015      	movs	r5, r2
100121a0:	3d41      	subs	r5, #65	; 0x41
100121a2:	2d19      	cmp	r5, #25
100121a4:	d800      	bhi.n	100121a8 <__match+0x18>
100121a6:	3220      	adds	r2, #32
100121a8:	3101      	adds	r1, #1
100121aa:	42a2      	cmp	r2, r4
100121ac:	d0f2      	beq.n	10012194 <__match+0x4>
100121ae:	2000      	movs	r0, #0
100121b0:	e001      	b.n	100121b6 <__match+0x26>
100121b2:	6003      	str	r3, [r0, #0]
100121b4:	2001      	movs	r0, #1
100121b6:	bd30      	pop	{r4, r5, pc}

100121b8 <__hexnan>:
100121b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100121ba:	b089      	sub	sp, #36	; 0x24
100121bc:	9200      	str	r2, [sp, #0]
100121be:	680a      	ldr	r2, [r1, #0]
100121c0:	9900      	ldr	r1, [sp, #0]
100121c2:	1153      	asrs	r3, r2, #5
100121c4:	009b      	lsls	r3, r3, #2
100121c6:	18cb      	adds	r3, r1, r3
100121c8:	9302      	str	r3, [sp, #8]
100121ca:	231f      	movs	r3, #31
100121cc:	401a      	ands	r2, r3
100121ce:	9007      	str	r0, [sp, #28]
100121d0:	9205      	str	r2, [sp, #20]
100121d2:	d002      	beq.n	100121da <__hexnan+0x22>
100121d4:	9b02      	ldr	r3, [sp, #8]
100121d6:	3304      	adds	r3, #4
100121d8:	9302      	str	r3, [sp, #8]
100121da:	9b02      	ldr	r3, [sp, #8]
100121dc:	2500      	movs	r5, #0
100121de:	1f1e      	subs	r6, r3, #4
100121e0:	0037      	movs	r7, r6
100121e2:	0034      	movs	r4, r6
100121e4:	9b07      	ldr	r3, [sp, #28]
100121e6:	6035      	str	r5, [r6, #0]
100121e8:	681b      	ldr	r3, [r3, #0]
100121ea:	9506      	str	r5, [sp, #24]
100121ec:	9303      	str	r3, [sp, #12]
100121ee:	9501      	str	r5, [sp, #4]
100121f0:	9b03      	ldr	r3, [sp, #12]
100121f2:	3301      	adds	r3, #1
100121f4:	9303      	str	r3, [sp, #12]
100121f6:	781b      	ldrb	r3, [r3, #0]
100121f8:	9304      	str	r3, [sp, #16]
100121fa:	2b00      	cmp	r3, #0
100121fc:	d03b      	beq.n	10012276 <__hexnan+0xbe>
100121fe:	9804      	ldr	r0, [sp, #16]
10012200:	f7ff fd75 	bl	10011cee <__hexdig_fun>
10012204:	2800      	cmp	r0, #0
10012206:	d122      	bne.n	1001224e <__hexnan+0x96>
10012208:	9b04      	ldr	r3, [sp, #16]
1001220a:	2b20      	cmp	r3, #32
1001220c:	d817      	bhi.n	1001223e <__hexnan+0x86>
1001220e:	9b01      	ldr	r3, [sp, #4]
10012210:	9a06      	ldr	r2, [sp, #24]
10012212:	4293      	cmp	r3, r2
10012214:	ddec      	ble.n	100121f0 <__hexnan+0x38>
10012216:	42bc      	cmp	r4, r7
10012218:	d206      	bcs.n	10012228 <__hexnan+0x70>
1001221a:	2d07      	cmp	r5, #7
1001221c:	dc04      	bgt.n	10012228 <__hexnan+0x70>
1001221e:	002a      	movs	r2, r5
10012220:	0039      	movs	r1, r7
10012222:	0020      	movs	r0, r4
10012224:	f7ff ffa2 	bl	1001216c <L_shift>
10012228:	9b00      	ldr	r3, [sp, #0]
1001222a:	2508      	movs	r5, #8
1001222c:	429c      	cmp	r4, r3
1001222e:	d9df      	bls.n	100121f0 <__hexnan+0x38>
10012230:	2500      	movs	r5, #0
10012232:	9b01      	ldr	r3, [sp, #4]
10012234:	1f27      	subs	r7, r4, #4
10012236:	603d      	str	r5, [r7, #0]
10012238:	9306      	str	r3, [sp, #24]
1001223a:	003c      	movs	r4, r7
1001223c:	e7d8      	b.n	100121f0 <__hexnan+0x38>
1001223e:	9b04      	ldr	r3, [sp, #16]
10012240:	2b29      	cmp	r3, #41	; 0x29
10012242:	d14b      	bne.n	100122dc <__hexnan+0x124>
10012244:	9b03      	ldr	r3, [sp, #12]
10012246:	9a07      	ldr	r2, [sp, #28]
10012248:	3301      	adds	r3, #1
1001224a:	6013      	str	r3, [r2, #0]
1001224c:	e013      	b.n	10012276 <__hexnan+0xbe>
1001224e:	9b01      	ldr	r3, [sp, #4]
10012250:	3501      	adds	r5, #1
10012252:	3301      	adds	r3, #1
10012254:	9301      	str	r3, [sp, #4]
10012256:	2d08      	cmp	r5, #8
10012258:	dd06      	ble.n	10012268 <__hexnan+0xb0>
1001225a:	9b00      	ldr	r3, [sp, #0]
1001225c:	429c      	cmp	r4, r3
1001225e:	d9c7      	bls.n	100121f0 <__hexnan+0x38>
10012260:	2300      	movs	r3, #0
10012262:	2501      	movs	r5, #1
10012264:	3c04      	subs	r4, #4
10012266:	6023      	str	r3, [r4, #0]
10012268:	220f      	movs	r2, #15
1001226a:	6823      	ldr	r3, [r4, #0]
1001226c:	4010      	ands	r0, r2
1001226e:	011b      	lsls	r3, r3, #4
10012270:	4318      	orrs	r0, r3
10012272:	6020      	str	r0, [r4, #0]
10012274:	e7bc      	b.n	100121f0 <__hexnan+0x38>
10012276:	9b01      	ldr	r3, [sp, #4]
10012278:	2b00      	cmp	r3, #0
1001227a:	d02f      	beq.n	100122dc <__hexnan+0x124>
1001227c:	42bc      	cmp	r4, r7
1001227e:	d206      	bcs.n	1001228e <__hexnan+0xd6>
10012280:	2d07      	cmp	r5, #7
10012282:	dc04      	bgt.n	1001228e <__hexnan+0xd6>
10012284:	002a      	movs	r2, r5
10012286:	0039      	movs	r1, r7
10012288:	0020      	movs	r0, r4
1001228a:	f7ff ff6f 	bl	1001216c <L_shift>
1001228e:	9b00      	ldr	r3, [sp, #0]
10012290:	429c      	cmp	r4, r3
10012292:	d90a      	bls.n	100122aa <__hexnan+0xf2>
10012294:	3304      	adds	r3, #4
10012296:	cc02      	ldmia	r4!, {r1}
10012298:	1f1a      	subs	r2, r3, #4
1001229a:	6011      	str	r1, [r2, #0]
1001229c:	42a6      	cmp	r6, r4
1001229e:	d2f9      	bcs.n	10012294 <__hexnan+0xdc>
100122a0:	2200      	movs	r2, #0
100122a2:	c304      	stmia	r3!, {r2}
100122a4:	429e      	cmp	r6, r3
100122a6:	d2fc      	bcs.n	100122a2 <__hexnan+0xea>
100122a8:	e00d      	b.n	100122c6 <__hexnan+0x10e>
100122aa:	9b05      	ldr	r3, [sp, #20]
100122ac:	2b00      	cmp	r3, #0
100122ae:	d00a      	beq.n	100122c6 <__hexnan+0x10e>
100122b0:	2120      	movs	r1, #32
100122b2:	9a05      	ldr	r2, [sp, #20]
100122b4:	9b02      	ldr	r3, [sp, #8]
100122b6:	1a89      	subs	r1, r1, r2
100122b8:	2201      	movs	r2, #1
100122ba:	4252      	negs	r2, r2
100122bc:	40ca      	lsrs	r2, r1
100122be:	3b04      	subs	r3, #4
100122c0:	6819      	ldr	r1, [r3, #0]
100122c2:	400a      	ands	r2, r1
100122c4:	601a      	str	r2, [r3, #0]
100122c6:	6833      	ldr	r3, [r6, #0]
100122c8:	2b00      	cmp	r3, #0
100122ca:	d109      	bne.n	100122e0 <__hexnan+0x128>
100122cc:	9b00      	ldr	r3, [sp, #0]
100122ce:	429e      	cmp	r6, r3
100122d0:	d102      	bne.n	100122d8 <__hexnan+0x120>
100122d2:	2301      	movs	r3, #1
100122d4:	6033      	str	r3, [r6, #0]
100122d6:	e003      	b.n	100122e0 <__hexnan+0x128>
100122d8:	3e04      	subs	r6, #4
100122da:	e7f4      	b.n	100122c6 <__hexnan+0x10e>
100122dc:	2004      	movs	r0, #4
100122de:	e000      	b.n	100122e2 <__hexnan+0x12a>
100122e0:	2005      	movs	r0, #5
100122e2:	b009      	add	sp, #36	; 0x24
100122e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100122e8 <_localeconv_r>:
100122e8:	4800      	ldr	r0, [pc, #0]	; (100122ec <_localeconv_r+0x4>)
100122ea:	4770      	bx	lr
100122ec:	100153b8 	.word	0x100153b8

100122f0 <__swhatbuf_r>:
100122f0:	b570      	push	{r4, r5, r6, lr}
100122f2:	000e      	movs	r6, r1
100122f4:	001d      	movs	r5, r3
100122f6:	230e      	movs	r3, #14
100122f8:	5ec9      	ldrsh	r1, [r1, r3]
100122fa:	b090      	sub	sp, #64	; 0x40
100122fc:	0014      	movs	r4, r2
100122fe:	2900      	cmp	r1, #0
10012300:	da06      	bge.n	10012310 <__swhatbuf_r+0x20>
10012302:	2300      	movs	r3, #0
10012304:	602b      	str	r3, [r5, #0]
10012306:	89b3      	ldrh	r3, [r6, #12]
10012308:	061b      	lsls	r3, r3, #24
1001230a:	d50f      	bpl.n	1001232c <__swhatbuf_r+0x3c>
1001230c:	2340      	movs	r3, #64	; 0x40
1001230e:	e00f      	b.n	10012330 <__swhatbuf_r+0x40>
10012310:	aa01      	add	r2, sp, #4
10012312:	f001 f8a5 	bl	10013460 <_fstat_r>
10012316:	2800      	cmp	r0, #0
10012318:	dbf3      	blt.n	10012302 <__swhatbuf_r+0x12>
1001231a:	23f0      	movs	r3, #240	; 0xf0
1001231c:	9a02      	ldr	r2, [sp, #8]
1001231e:	021b      	lsls	r3, r3, #8
10012320:	4013      	ands	r3, r2
10012322:	4a05      	ldr	r2, [pc, #20]	; (10012338 <__swhatbuf_r+0x48>)
10012324:	189b      	adds	r3, r3, r2
10012326:	425a      	negs	r2, r3
10012328:	4153      	adcs	r3, r2
1001232a:	602b      	str	r3, [r5, #0]
1001232c:	2380      	movs	r3, #128	; 0x80
1001232e:	00db      	lsls	r3, r3, #3
10012330:	2000      	movs	r0, #0
10012332:	6023      	str	r3, [r4, #0]
10012334:	b010      	add	sp, #64	; 0x40
10012336:	bd70      	pop	{r4, r5, r6, pc}
10012338:	ffffe000 	.word	0xffffe000

1001233c <__smakebuf_r>:
1001233c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001233e:	2602      	movs	r6, #2
10012340:	898b      	ldrh	r3, [r1, #12]
10012342:	0005      	movs	r5, r0
10012344:	000c      	movs	r4, r1
10012346:	4233      	tst	r3, r6
10012348:	d110      	bne.n	1001236c <__smakebuf_r+0x30>
1001234a:	ab01      	add	r3, sp, #4
1001234c:	466a      	mov	r2, sp
1001234e:	f7ff ffcf 	bl	100122f0 <__swhatbuf_r>
10012352:	9900      	ldr	r1, [sp, #0]
10012354:	0007      	movs	r7, r0
10012356:	0028      	movs	r0, r5
10012358:	f000 fc84 	bl	10012c64 <_malloc_r>
1001235c:	2800      	cmp	r0, #0
1001235e:	d10c      	bne.n	1001237a <__smakebuf_r+0x3e>
10012360:	220c      	movs	r2, #12
10012362:	5ea3      	ldrsh	r3, [r4, r2]
10012364:	059a      	lsls	r2, r3, #22
10012366:	d423      	bmi.n	100123b0 <__smakebuf_r+0x74>
10012368:	4333      	orrs	r3, r6
1001236a:	81a3      	strh	r3, [r4, #12]
1001236c:	0023      	movs	r3, r4
1001236e:	3347      	adds	r3, #71	; 0x47
10012370:	6023      	str	r3, [r4, #0]
10012372:	6123      	str	r3, [r4, #16]
10012374:	2301      	movs	r3, #1
10012376:	6163      	str	r3, [r4, #20]
10012378:	e01a      	b.n	100123b0 <__smakebuf_r+0x74>
1001237a:	2280      	movs	r2, #128	; 0x80
1001237c:	4b0d      	ldr	r3, [pc, #52]	; (100123b4 <__smakebuf_r+0x78>)
1001237e:	62ab      	str	r3, [r5, #40]	; 0x28
10012380:	89a3      	ldrh	r3, [r4, #12]
10012382:	6020      	str	r0, [r4, #0]
10012384:	4313      	orrs	r3, r2
10012386:	81a3      	strh	r3, [r4, #12]
10012388:	9b00      	ldr	r3, [sp, #0]
1001238a:	6120      	str	r0, [r4, #16]
1001238c:	6163      	str	r3, [r4, #20]
1001238e:	9b01      	ldr	r3, [sp, #4]
10012390:	2b00      	cmp	r3, #0
10012392:	d00a      	beq.n	100123aa <__smakebuf_r+0x6e>
10012394:	230e      	movs	r3, #14
10012396:	5ee1      	ldrsh	r1, [r4, r3]
10012398:	0028      	movs	r0, r5
1001239a:	f001 f873 	bl	10013484 <_isatty_r>
1001239e:	2800      	cmp	r0, #0
100123a0:	d003      	beq.n	100123aa <__smakebuf_r+0x6e>
100123a2:	2201      	movs	r2, #1
100123a4:	89a3      	ldrh	r3, [r4, #12]
100123a6:	4313      	orrs	r3, r2
100123a8:	81a3      	strh	r3, [r4, #12]
100123aa:	89a3      	ldrh	r3, [r4, #12]
100123ac:	431f      	orrs	r7, r3
100123ae:	81a7      	strh	r7, [r4, #12]
100123b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100123b2:	46c0      	nop			; (mov r8, r8)
100123b4:	10011add 	.word	0x10011add

100123b8 <malloc>:
100123b8:	b510      	push	{r4, lr}
100123ba:	4b03      	ldr	r3, [pc, #12]	; (100123c8 <malloc+0x10>)
100123bc:	0001      	movs	r1, r0
100123be:	6818      	ldr	r0, [r3, #0]
100123c0:	f000 fc50 	bl	10012c64 <_malloc_r>
100123c4:	bd10      	pop	{r4, pc}
100123c6:	46c0      	nop			; (mov r8, r8)
100123c8:	100153b4 	.word	0x100153b4

100123cc <_Balloc>:
100123cc:	b570      	push	{r4, r5, r6, lr}
100123ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
100123d0:	0004      	movs	r4, r0
100123d2:	000d      	movs	r5, r1
100123d4:	2e00      	cmp	r6, #0
100123d6:	d107      	bne.n	100123e8 <_Balloc+0x1c>
100123d8:	2010      	movs	r0, #16
100123da:	f7ff ffed 	bl	100123b8 <malloc>
100123de:	6260      	str	r0, [r4, #36]	; 0x24
100123e0:	6046      	str	r6, [r0, #4]
100123e2:	6086      	str	r6, [r0, #8]
100123e4:	6006      	str	r6, [r0, #0]
100123e6:	60c6      	str	r6, [r0, #12]
100123e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
100123ea:	68f3      	ldr	r3, [r6, #12]
100123ec:	2b00      	cmp	r3, #0
100123ee:	d009      	beq.n	10012404 <_Balloc+0x38>
100123f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
100123f2:	00aa      	lsls	r2, r5, #2
100123f4:	68db      	ldr	r3, [r3, #12]
100123f6:	189b      	adds	r3, r3, r2
100123f8:	6818      	ldr	r0, [r3, #0]
100123fa:	2800      	cmp	r0, #0
100123fc:	d00e      	beq.n	1001241c <_Balloc+0x50>
100123fe:	6802      	ldr	r2, [r0, #0]
10012400:	601a      	str	r2, [r3, #0]
10012402:	e017      	b.n	10012434 <_Balloc+0x68>
10012404:	2221      	movs	r2, #33	; 0x21
10012406:	2104      	movs	r1, #4
10012408:	0020      	movs	r0, r4
1001240a:	f000 fbd6 	bl	10012bba <_calloc_r>
1001240e:	6a63      	ldr	r3, [r4, #36]	; 0x24
10012410:	60f0      	str	r0, [r6, #12]
10012412:	68db      	ldr	r3, [r3, #12]
10012414:	2b00      	cmp	r3, #0
10012416:	d1eb      	bne.n	100123f0 <_Balloc+0x24>
10012418:	2000      	movs	r0, #0
1001241a:	e00e      	b.n	1001243a <_Balloc+0x6e>
1001241c:	2101      	movs	r1, #1
1001241e:	000e      	movs	r6, r1
10012420:	40ae      	lsls	r6, r5
10012422:	1d72      	adds	r2, r6, #5
10012424:	0092      	lsls	r2, r2, #2
10012426:	0020      	movs	r0, r4
10012428:	f000 fbc7 	bl	10012bba <_calloc_r>
1001242c:	2800      	cmp	r0, #0
1001242e:	d0f3      	beq.n	10012418 <_Balloc+0x4c>
10012430:	6045      	str	r5, [r0, #4]
10012432:	6086      	str	r6, [r0, #8]
10012434:	2300      	movs	r3, #0
10012436:	6103      	str	r3, [r0, #16]
10012438:	60c3      	str	r3, [r0, #12]
1001243a:	bd70      	pop	{r4, r5, r6, pc}

1001243c <_Bfree>:
1001243c:	b570      	push	{r4, r5, r6, lr}
1001243e:	6a45      	ldr	r5, [r0, #36]	; 0x24
10012440:	0006      	movs	r6, r0
10012442:	000c      	movs	r4, r1
10012444:	2d00      	cmp	r5, #0
10012446:	d107      	bne.n	10012458 <_Bfree+0x1c>
10012448:	2010      	movs	r0, #16
1001244a:	f7ff ffb5 	bl	100123b8 <malloc>
1001244e:	6270      	str	r0, [r6, #36]	; 0x24
10012450:	6045      	str	r5, [r0, #4]
10012452:	6085      	str	r5, [r0, #8]
10012454:	6005      	str	r5, [r0, #0]
10012456:	60c5      	str	r5, [r0, #12]
10012458:	2c00      	cmp	r4, #0
1001245a:	d007      	beq.n	1001246c <_Bfree+0x30>
1001245c:	6a72      	ldr	r2, [r6, #36]	; 0x24
1001245e:	6863      	ldr	r3, [r4, #4]
10012460:	68d2      	ldr	r2, [r2, #12]
10012462:	009b      	lsls	r3, r3, #2
10012464:	18d3      	adds	r3, r2, r3
10012466:	681a      	ldr	r2, [r3, #0]
10012468:	6022      	str	r2, [r4, #0]
1001246a:	601c      	str	r4, [r3, #0]
1001246c:	bd70      	pop	{r4, r5, r6, pc}

1001246e <__multadd>:
1001246e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012470:	0007      	movs	r7, r0
10012472:	0008      	movs	r0, r1
10012474:	000c      	movs	r4, r1
10012476:	690d      	ldr	r5, [r1, #16]
10012478:	001e      	movs	r6, r3
1001247a:	2100      	movs	r1, #0
1001247c:	9201      	str	r2, [sp, #4]
1001247e:	3014      	adds	r0, #20
10012480:	9a01      	ldr	r2, [sp, #4]
10012482:	8803      	ldrh	r3, [r0, #0]
10012484:	3101      	adds	r1, #1
10012486:	4353      	muls	r3, r2
10012488:	199b      	adds	r3, r3, r6
1001248a:	6806      	ldr	r6, [r0, #0]
1001248c:	0c36      	lsrs	r6, r6, #16
1001248e:	4356      	muls	r6, r2
10012490:	0c1a      	lsrs	r2, r3, #16
10012492:	4694      	mov	ip, r2
10012494:	44b4      	add	ip, r6
10012496:	4662      	mov	r2, ip
10012498:	0c16      	lsrs	r6, r2, #16
1001249a:	0412      	lsls	r2, r2, #16
1001249c:	4694      	mov	ip, r2
1001249e:	b29b      	uxth	r3, r3
100124a0:	4463      	add	r3, ip
100124a2:	c008      	stmia	r0!, {r3}
100124a4:	428d      	cmp	r5, r1
100124a6:	dceb      	bgt.n	10012480 <__multadd+0x12>
100124a8:	2e00      	cmp	r6, #0
100124aa:	d01b      	beq.n	100124e4 <__multadd+0x76>
100124ac:	68a3      	ldr	r3, [r4, #8]
100124ae:	429d      	cmp	r5, r3
100124b0:	db12      	blt.n	100124d8 <__multadd+0x6a>
100124b2:	6863      	ldr	r3, [r4, #4]
100124b4:	0038      	movs	r0, r7
100124b6:	1c59      	adds	r1, r3, #1
100124b8:	f7ff ff88 	bl	100123cc <_Balloc>
100124bc:	0021      	movs	r1, r4
100124be:	6923      	ldr	r3, [r4, #16]
100124c0:	9001      	str	r0, [sp, #4]
100124c2:	1c9a      	adds	r2, r3, #2
100124c4:	0092      	lsls	r2, r2, #2
100124c6:	310c      	adds	r1, #12
100124c8:	300c      	adds	r0, #12
100124ca:	f7fe f98c 	bl	100107e6 <memcpy>
100124ce:	0021      	movs	r1, r4
100124d0:	0038      	movs	r0, r7
100124d2:	f7ff ffb3 	bl	1001243c <_Bfree>
100124d6:	9c01      	ldr	r4, [sp, #4]
100124d8:	1d2b      	adds	r3, r5, #4
100124da:	009b      	lsls	r3, r3, #2
100124dc:	18e3      	adds	r3, r4, r3
100124de:	3501      	adds	r5, #1
100124e0:	605e      	str	r6, [r3, #4]
100124e2:	6125      	str	r5, [r4, #16]
100124e4:	0020      	movs	r0, r4
100124e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100124e8 <__s2b>:
100124e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124ea:	0006      	movs	r6, r0
100124ec:	0018      	movs	r0, r3
100124ee:	000c      	movs	r4, r1
100124f0:	3008      	adds	r0, #8
100124f2:	2109      	movs	r1, #9
100124f4:	9301      	str	r3, [sp, #4]
100124f6:	0015      	movs	r5, r2
100124f8:	f001 f80a 	bl	10013510 <__aeabi_idiv>
100124fc:	2301      	movs	r3, #1
100124fe:	2100      	movs	r1, #0
10012500:	4283      	cmp	r3, r0
10012502:	da02      	bge.n	1001250a <__s2b+0x22>
10012504:	005b      	lsls	r3, r3, #1
10012506:	3101      	adds	r1, #1
10012508:	e7fa      	b.n	10012500 <__s2b+0x18>
1001250a:	0030      	movs	r0, r6
1001250c:	f7ff ff5e 	bl	100123cc <_Balloc>
10012510:	9b08      	ldr	r3, [sp, #32]
10012512:	6143      	str	r3, [r0, #20]
10012514:	2301      	movs	r3, #1
10012516:	6103      	str	r3, [r0, #16]
10012518:	2d09      	cmp	r5, #9
1001251a:	dd12      	ble.n	10012542 <__s2b+0x5a>
1001251c:	0023      	movs	r3, r4
1001251e:	3309      	adds	r3, #9
10012520:	001f      	movs	r7, r3
10012522:	9300      	str	r3, [sp, #0]
10012524:	1964      	adds	r4, r4, r5
10012526:	783b      	ldrb	r3, [r7, #0]
10012528:	0001      	movs	r1, r0
1001252a:	3b30      	subs	r3, #48	; 0x30
1001252c:	220a      	movs	r2, #10
1001252e:	0030      	movs	r0, r6
10012530:	3701      	adds	r7, #1
10012532:	f7ff ff9c 	bl	1001246e <__multadd>
10012536:	42a7      	cmp	r7, r4
10012538:	d1f5      	bne.n	10012526 <__s2b+0x3e>
1001253a:	9b00      	ldr	r3, [sp, #0]
1001253c:	195c      	adds	r4, r3, r5
1001253e:	3c08      	subs	r4, #8
10012540:	e001      	b.n	10012546 <__s2b+0x5e>
10012542:	2509      	movs	r5, #9
10012544:	340a      	adds	r4, #10
10012546:	002f      	movs	r7, r5
10012548:	9b01      	ldr	r3, [sp, #4]
1001254a:	429f      	cmp	r7, r3
1001254c:	da09      	bge.n	10012562 <__s2b+0x7a>
1001254e:	1b63      	subs	r3, r4, r5
10012550:	5ddb      	ldrb	r3, [r3, r7]
10012552:	0001      	movs	r1, r0
10012554:	3b30      	subs	r3, #48	; 0x30
10012556:	220a      	movs	r2, #10
10012558:	0030      	movs	r0, r6
1001255a:	f7ff ff88 	bl	1001246e <__multadd>
1001255e:	3701      	adds	r7, #1
10012560:	e7f2      	b.n	10012548 <__s2b+0x60>
10012562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012564 <__hi0bits>:
10012564:	2200      	movs	r2, #0
10012566:	0003      	movs	r3, r0
10012568:	0c01      	lsrs	r1, r0, #16
1001256a:	4291      	cmp	r1, r2
1001256c:	d101      	bne.n	10012572 <__hi0bits+0xe>
1001256e:	0403      	lsls	r3, r0, #16
10012570:	3210      	adds	r2, #16
10012572:	0e19      	lsrs	r1, r3, #24
10012574:	d101      	bne.n	1001257a <__hi0bits+0x16>
10012576:	3208      	adds	r2, #8
10012578:	021b      	lsls	r3, r3, #8
1001257a:	0f19      	lsrs	r1, r3, #28
1001257c:	d101      	bne.n	10012582 <__hi0bits+0x1e>
1001257e:	3204      	adds	r2, #4
10012580:	011b      	lsls	r3, r3, #4
10012582:	0f99      	lsrs	r1, r3, #30
10012584:	d101      	bne.n	1001258a <__hi0bits+0x26>
10012586:	3202      	adds	r2, #2
10012588:	009b      	lsls	r3, r3, #2
1001258a:	0010      	movs	r0, r2
1001258c:	2b00      	cmp	r3, #0
1001258e:	db03      	blt.n	10012598 <__hi0bits+0x34>
10012590:	2020      	movs	r0, #32
10012592:	005b      	lsls	r3, r3, #1
10012594:	d500      	bpl.n	10012598 <__hi0bits+0x34>
10012596:	1c50      	adds	r0, r2, #1
10012598:	4770      	bx	lr

1001259a <__lo0bits>:
1001259a:	2207      	movs	r2, #7
1001259c:	6803      	ldr	r3, [r0, #0]
1001259e:	b510      	push	{r4, lr}
100125a0:	0001      	movs	r1, r0
100125a2:	401a      	ands	r2, r3
100125a4:	d00c      	beq.n	100125c0 <__lo0bits+0x26>
100125a6:	2401      	movs	r4, #1
100125a8:	2000      	movs	r0, #0
100125aa:	4223      	tst	r3, r4
100125ac:	d123      	bne.n	100125f6 <__lo0bits+0x5c>
100125ae:	2202      	movs	r2, #2
100125b0:	4213      	tst	r3, r2
100125b2:	d003      	beq.n	100125bc <__lo0bits+0x22>
100125b4:	40e3      	lsrs	r3, r4
100125b6:	0020      	movs	r0, r4
100125b8:	600b      	str	r3, [r1, #0]
100125ba:	e01c      	b.n	100125f6 <__lo0bits+0x5c>
100125bc:	089b      	lsrs	r3, r3, #2
100125be:	e018      	b.n	100125f2 <__lo0bits+0x58>
100125c0:	b298      	uxth	r0, r3
100125c2:	2800      	cmp	r0, #0
100125c4:	d101      	bne.n	100125ca <__lo0bits+0x30>
100125c6:	2210      	movs	r2, #16
100125c8:	0c1b      	lsrs	r3, r3, #16
100125ca:	b2d8      	uxtb	r0, r3
100125cc:	2800      	cmp	r0, #0
100125ce:	d101      	bne.n	100125d4 <__lo0bits+0x3a>
100125d0:	3208      	adds	r2, #8
100125d2:	0a1b      	lsrs	r3, r3, #8
100125d4:	0718      	lsls	r0, r3, #28
100125d6:	d101      	bne.n	100125dc <__lo0bits+0x42>
100125d8:	3204      	adds	r2, #4
100125da:	091b      	lsrs	r3, r3, #4
100125dc:	0798      	lsls	r0, r3, #30
100125de:	d101      	bne.n	100125e4 <__lo0bits+0x4a>
100125e0:	3202      	adds	r2, #2
100125e2:	089b      	lsrs	r3, r3, #2
100125e4:	07d8      	lsls	r0, r3, #31
100125e6:	d404      	bmi.n	100125f2 <__lo0bits+0x58>
100125e8:	085b      	lsrs	r3, r3, #1
100125ea:	2020      	movs	r0, #32
100125ec:	2b00      	cmp	r3, #0
100125ee:	d002      	beq.n	100125f6 <__lo0bits+0x5c>
100125f0:	3201      	adds	r2, #1
100125f2:	0010      	movs	r0, r2
100125f4:	600b      	str	r3, [r1, #0]
100125f6:	bd10      	pop	{r4, pc}

100125f8 <__i2b>:
100125f8:	b510      	push	{r4, lr}
100125fa:	000c      	movs	r4, r1
100125fc:	2101      	movs	r1, #1
100125fe:	f7ff fee5 	bl	100123cc <_Balloc>
10012602:	2301      	movs	r3, #1
10012604:	6144      	str	r4, [r0, #20]
10012606:	6103      	str	r3, [r0, #16]
10012608:	bd10      	pop	{r4, pc}

1001260a <__multiply>:
1001260a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001260c:	690b      	ldr	r3, [r1, #16]
1001260e:	0014      	movs	r4, r2
10012610:	6912      	ldr	r2, [r2, #16]
10012612:	b089      	sub	sp, #36	; 0x24
10012614:	000d      	movs	r5, r1
10012616:	4293      	cmp	r3, r2
10012618:	da01      	bge.n	1001261e <__multiply+0x14>
1001261a:	0025      	movs	r5, r4
1001261c:	000c      	movs	r4, r1
1001261e:	692f      	ldr	r7, [r5, #16]
10012620:	6926      	ldr	r6, [r4, #16]
10012622:	68aa      	ldr	r2, [r5, #8]
10012624:	19bb      	adds	r3, r7, r6
10012626:	6869      	ldr	r1, [r5, #4]
10012628:	9301      	str	r3, [sp, #4]
1001262a:	4293      	cmp	r3, r2
1001262c:	dd00      	ble.n	10012630 <__multiply+0x26>
1001262e:	3101      	adds	r1, #1
10012630:	f7ff fecc 	bl	100123cc <_Balloc>
10012634:	0002      	movs	r2, r0
10012636:	19bb      	adds	r3, r7, r6
10012638:	3214      	adds	r2, #20
1001263a:	009b      	lsls	r3, r3, #2
1001263c:	18d3      	adds	r3, r2, r3
1001263e:	469c      	mov	ip, r3
10012640:	2100      	movs	r1, #0
10012642:	0013      	movs	r3, r2
10012644:	9002      	str	r0, [sp, #8]
10012646:	4563      	cmp	r3, ip
10012648:	d201      	bcs.n	1001264e <__multiply+0x44>
1001264a:	c302      	stmia	r3!, {r1}
1001264c:	e7fb      	b.n	10012646 <__multiply+0x3c>
1001264e:	3514      	adds	r5, #20
10012650:	00bf      	lsls	r7, r7, #2
10012652:	19eb      	adds	r3, r5, r7
10012654:	3414      	adds	r4, #20
10012656:	00b6      	lsls	r6, r6, #2
10012658:	9305      	str	r3, [sp, #20]
1001265a:	19a3      	adds	r3, r4, r6
1001265c:	9503      	str	r5, [sp, #12]
1001265e:	9307      	str	r3, [sp, #28]
10012660:	9b07      	ldr	r3, [sp, #28]
10012662:	429c      	cmp	r4, r3
10012664:	d251      	bcs.n	1001270a <__multiply+0x100>
10012666:	8820      	ldrh	r0, [r4, #0]
10012668:	2800      	cmp	r0, #0
1001266a:	d01e      	beq.n	100126aa <__multiply+0xa0>
1001266c:	0015      	movs	r5, r2
1001266e:	2600      	movs	r6, #0
10012670:	9f03      	ldr	r7, [sp, #12]
10012672:	cf08      	ldmia	r7!, {r3}
10012674:	9506      	str	r5, [sp, #24]
10012676:	9304      	str	r3, [sp, #16]
10012678:	466b      	mov	r3, sp
1001267a:	8a1b      	ldrh	r3, [r3, #16]
1001267c:	4343      	muls	r3, r0
1001267e:	0019      	movs	r1, r3
10012680:	882b      	ldrh	r3, [r5, #0]
10012682:	18cb      	adds	r3, r1, r3
10012684:	9904      	ldr	r1, [sp, #16]
10012686:	199b      	adds	r3, r3, r6
10012688:	0c09      	lsrs	r1, r1, #16
1001268a:	4341      	muls	r1, r0
1001268c:	682e      	ldr	r6, [r5, #0]
1001268e:	0c36      	lsrs	r6, r6, #16
10012690:	1989      	adds	r1, r1, r6
10012692:	0c1e      	lsrs	r6, r3, #16
10012694:	1989      	adds	r1, r1, r6
10012696:	0c0e      	lsrs	r6, r1, #16
10012698:	b29b      	uxth	r3, r3
1001269a:	0409      	lsls	r1, r1, #16
1001269c:	430b      	orrs	r3, r1
1001269e:	c508      	stmia	r5!, {r3}
100126a0:	9b05      	ldr	r3, [sp, #20]
100126a2:	42bb      	cmp	r3, r7
100126a4:	d8e5      	bhi.n	10012672 <__multiply+0x68>
100126a6:	9b06      	ldr	r3, [sp, #24]
100126a8:	605e      	str	r6, [r3, #4]
100126aa:	6823      	ldr	r3, [r4, #0]
100126ac:	0c1d      	lsrs	r5, r3, #16
100126ae:	d01f      	beq.n	100126f0 <__multiply+0xe6>
100126b0:	2100      	movs	r1, #0
100126b2:	0010      	movs	r0, r2
100126b4:	6813      	ldr	r3, [r2, #0]
100126b6:	9f03      	ldr	r7, [sp, #12]
100126b8:	9104      	str	r1, [sp, #16]
100126ba:	883e      	ldrh	r6, [r7, #0]
100126bc:	6801      	ldr	r1, [r0, #0]
100126be:	436e      	muls	r6, r5
100126c0:	0c09      	lsrs	r1, r1, #16
100126c2:	1871      	adds	r1, r6, r1
100126c4:	9e04      	ldr	r6, [sp, #16]
100126c6:	b29b      	uxth	r3, r3
100126c8:	1989      	adds	r1, r1, r6
100126ca:	040e      	lsls	r6, r1, #16
100126cc:	4333      	orrs	r3, r6
100126ce:	6003      	str	r3, [r0, #0]
100126d0:	cf08      	ldmia	r7!, {r3}
100126d2:	8886      	ldrh	r6, [r0, #4]
100126d4:	0c1b      	lsrs	r3, r3, #16
100126d6:	436b      	muls	r3, r5
100126d8:	0c09      	lsrs	r1, r1, #16
100126da:	199b      	adds	r3, r3, r6
100126dc:	185b      	adds	r3, r3, r1
100126de:	0c19      	lsrs	r1, r3, #16
100126e0:	9104      	str	r1, [sp, #16]
100126e2:	9905      	ldr	r1, [sp, #20]
100126e4:	9006      	str	r0, [sp, #24]
100126e6:	3004      	adds	r0, #4
100126e8:	42b9      	cmp	r1, r7
100126ea:	d8e6      	bhi.n	100126ba <__multiply+0xb0>
100126ec:	9906      	ldr	r1, [sp, #24]
100126ee:	604b      	str	r3, [r1, #4]
100126f0:	3404      	adds	r4, #4
100126f2:	3204      	adds	r2, #4
100126f4:	e7b4      	b.n	10012660 <__multiply+0x56>
100126f6:	2304      	movs	r3, #4
100126f8:	425b      	negs	r3, r3
100126fa:	449c      	add	ip, r3
100126fc:	4663      	mov	r3, ip
100126fe:	681b      	ldr	r3, [r3, #0]
10012700:	2b00      	cmp	r3, #0
10012702:	d105      	bne.n	10012710 <__multiply+0x106>
10012704:	9b01      	ldr	r3, [sp, #4]
10012706:	3b01      	subs	r3, #1
10012708:	9301      	str	r3, [sp, #4]
1001270a:	9b01      	ldr	r3, [sp, #4]
1001270c:	2b00      	cmp	r3, #0
1001270e:	dcf2      	bgt.n	100126f6 <__multiply+0xec>
10012710:	9b02      	ldr	r3, [sp, #8]
10012712:	9a01      	ldr	r2, [sp, #4]
10012714:	0018      	movs	r0, r3
10012716:	611a      	str	r2, [r3, #16]
10012718:	b009      	add	sp, #36	; 0x24
1001271a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1001271c <__pow5mult>:
1001271c:	2303      	movs	r3, #3
1001271e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012720:	4013      	ands	r3, r2
10012722:	0005      	movs	r5, r0
10012724:	000e      	movs	r6, r1
10012726:	0014      	movs	r4, r2
10012728:	2b00      	cmp	r3, #0
1001272a:	d008      	beq.n	1001273e <__pow5mult+0x22>
1001272c:	4923      	ldr	r1, [pc, #140]	; (100127bc <__pow5mult+0xa0>)
1001272e:	3b01      	subs	r3, #1
10012730:	009a      	lsls	r2, r3, #2
10012732:	5852      	ldr	r2, [r2, r1]
10012734:	2300      	movs	r3, #0
10012736:	0031      	movs	r1, r6
10012738:	f7ff fe99 	bl	1001246e <__multadd>
1001273c:	0006      	movs	r6, r0
1001273e:	10a3      	asrs	r3, r4, #2
10012740:	9301      	str	r3, [sp, #4]
10012742:	d038      	beq.n	100127b6 <__pow5mult+0x9a>
10012744:	6a6c      	ldr	r4, [r5, #36]	; 0x24
10012746:	2c00      	cmp	r4, #0
10012748:	d107      	bne.n	1001275a <__pow5mult+0x3e>
1001274a:	2010      	movs	r0, #16
1001274c:	f7ff fe34 	bl	100123b8 <malloc>
10012750:	6268      	str	r0, [r5, #36]	; 0x24
10012752:	6044      	str	r4, [r0, #4]
10012754:	6084      	str	r4, [r0, #8]
10012756:	6004      	str	r4, [r0, #0]
10012758:	60c4      	str	r4, [r0, #12]
1001275a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1001275c:	68bc      	ldr	r4, [r7, #8]
1001275e:	2c00      	cmp	r4, #0
10012760:	d110      	bne.n	10012784 <__pow5mult+0x68>
10012762:	4917      	ldr	r1, [pc, #92]	; (100127c0 <__pow5mult+0xa4>)
10012764:	0028      	movs	r0, r5
10012766:	f7ff ff47 	bl	100125f8 <__i2b>
1001276a:	2300      	movs	r3, #0
1001276c:	60b8      	str	r0, [r7, #8]
1001276e:	0004      	movs	r4, r0
10012770:	6003      	str	r3, [r0, #0]
10012772:	e007      	b.n	10012784 <__pow5mult+0x68>
10012774:	9b01      	ldr	r3, [sp, #4]
10012776:	105b      	asrs	r3, r3, #1
10012778:	9301      	str	r3, [sp, #4]
1001277a:	d01c      	beq.n	100127b6 <__pow5mult+0x9a>
1001277c:	6820      	ldr	r0, [r4, #0]
1001277e:	2800      	cmp	r0, #0
10012780:	d010      	beq.n	100127a4 <__pow5mult+0x88>
10012782:	0004      	movs	r4, r0
10012784:	2201      	movs	r2, #1
10012786:	9b01      	ldr	r3, [sp, #4]
10012788:	4213      	tst	r3, r2
1001278a:	d0f3      	beq.n	10012774 <__pow5mult+0x58>
1001278c:	0031      	movs	r1, r6
1001278e:	0022      	movs	r2, r4
10012790:	0028      	movs	r0, r5
10012792:	f7ff ff3a 	bl	1001260a <__multiply>
10012796:	0007      	movs	r7, r0
10012798:	0031      	movs	r1, r6
1001279a:	0028      	movs	r0, r5
1001279c:	f7ff fe4e 	bl	1001243c <_Bfree>
100127a0:	003e      	movs	r6, r7
100127a2:	e7e7      	b.n	10012774 <__pow5mult+0x58>
100127a4:	0022      	movs	r2, r4
100127a6:	0021      	movs	r1, r4
100127a8:	0028      	movs	r0, r5
100127aa:	f7ff ff2e 	bl	1001260a <__multiply>
100127ae:	2300      	movs	r3, #0
100127b0:	6020      	str	r0, [r4, #0]
100127b2:	6003      	str	r3, [r0, #0]
100127b4:	e7e5      	b.n	10012782 <__pow5mult+0x66>
100127b6:	0030      	movs	r0, r6
100127b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100127ba:	46c0      	nop			; (mov r8, r8)
100127bc:	100152a0 	.word	0x100152a0
100127c0:	00000271 	.word	0x00000271

100127c4 <__lshift>:
100127c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100127c6:	000c      	movs	r4, r1
100127c8:	0017      	movs	r7, r2
100127ca:	6923      	ldr	r3, [r4, #16]
100127cc:	1155      	asrs	r5, r2, #5
100127ce:	b085      	sub	sp, #20
100127d0:	18eb      	adds	r3, r5, r3
100127d2:	9301      	str	r3, [sp, #4]
100127d4:	3301      	adds	r3, #1
100127d6:	9300      	str	r3, [sp, #0]
100127d8:	6849      	ldr	r1, [r1, #4]
100127da:	68a3      	ldr	r3, [r4, #8]
100127dc:	9002      	str	r0, [sp, #8]
100127de:	9a00      	ldr	r2, [sp, #0]
100127e0:	4293      	cmp	r3, r2
100127e2:	da02      	bge.n	100127ea <__lshift+0x26>
100127e4:	3101      	adds	r1, #1
100127e6:	005b      	lsls	r3, r3, #1
100127e8:	e7f9      	b.n	100127de <__lshift+0x1a>
100127ea:	9802      	ldr	r0, [sp, #8]
100127ec:	f7ff fdee 	bl	100123cc <_Balloc>
100127f0:	2300      	movs	r3, #0
100127f2:	0002      	movs	r2, r0
100127f4:	0006      	movs	r6, r0
100127f6:	0019      	movs	r1, r3
100127f8:	3214      	adds	r2, #20
100127fa:	42ab      	cmp	r3, r5
100127fc:	da03      	bge.n	10012806 <__lshift+0x42>
100127fe:	0098      	lsls	r0, r3, #2
10012800:	5011      	str	r1, [r2, r0]
10012802:	3301      	adds	r3, #1
10012804:	e7f9      	b.n	100127fa <__lshift+0x36>
10012806:	43eb      	mvns	r3, r5
10012808:	17db      	asrs	r3, r3, #31
1001280a:	401d      	ands	r5, r3
1001280c:	0023      	movs	r3, r4
1001280e:	00ad      	lsls	r5, r5, #2
10012810:	1955      	adds	r5, r2, r5
10012812:	6922      	ldr	r2, [r4, #16]
10012814:	3314      	adds	r3, #20
10012816:	0092      	lsls	r2, r2, #2
10012818:	189a      	adds	r2, r3, r2
1001281a:	4694      	mov	ip, r2
1001281c:	221f      	movs	r2, #31
1001281e:	4017      	ands	r7, r2
10012820:	d014      	beq.n	1001284c <__lshift+0x88>
10012822:	3201      	adds	r2, #1
10012824:	1bd2      	subs	r2, r2, r7
10012826:	9203      	str	r2, [sp, #12]
10012828:	2200      	movs	r2, #0
1001282a:	6819      	ldr	r1, [r3, #0]
1001282c:	0028      	movs	r0, r5
1001282e:	40b9      	lsls	r1, r7
10012830:	430a      	orrs	r2, r1
10012832:	c504      	stmia	r5!, {r2}
10012834:	cb04      	ldmia	r3!, {r2}
10012836:	9903      	ldr	r1, [sp, #12]
10012838:	40ca      	lsrs	r2, r1
1001283a:	459c      	cmp	ip, r3
1001283c:	d8f5      	bhi.n	1001282a <__lshift+0x66>
1001283e:	6042      	str	r2, [r0, #4]
10012840:	2a00      	cmp	r2, #0
10012842:	d007      	beq.n	10012854 <__lshift+0x90>
10012844:	9b01      	ldr	r3, [sp, #4]
10012846:	3302      	adds	r3, #2
10012848:	9300      	str	r3, [sp, #0]
1001284a:	e003      	b.n	10012854 <__lshift+0x90>
1001284c:	cb04      	ldmia	r3!, {r2}
1001284e:	c504      	stmia	r5!, {r2}
10012850:	459c      	cmp	ip, r3
10012852:	d8fb      	bhi.n	1001284c <__lshift+0x88>
10012854:	9b00      	ldr	r3, [sp, #0]
10012856:	9802      	ldr	r0, [sp, #8]
10012858:	3b01      	subs	r3, #1
1001285a:	6133      	str	r3, [r6, #16]
1001285c:	0021      	movs	r1, r4
1001285e:	f7ff fded 	bl	1001243c <_Bfree>
10012862:	0030      	movs	r0, r6
10012864:	b005      	add	sp, #20
10012866:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012868 <__mcmp>:
10012868:	6903      	ldr	r3, [r0, #16]
1001286a:	690a      	ldr	r2, [r1, #16]
1001286c:	b510      	push	{r4, lr}
1001286e:	1a9b      	subs	r3, r3, r2
10012870:	0004      	movs	r4, r0
10012872:	1e18      	subs	r0, r3, #0
10012874:	d112      	bne.n	1001289c <__mcmp+0x34>
10012876:	0093      	lsls	r3, r2, #2
10012878:	3414      	adds	r4, #20
1001287a:	3114      	adds	r1, #20
1001287c:	18e2      	adds	r2, r4, r3
1001287e:	18c9      	adds	r1, r1, r3
10012880:	3a04      	subs	r2, #4
10012882:	3904      	subs	r1, #4
10012884:	6813      	ldr	r3, [r2, #0]
10012886:	6808      	ldr	r0, [r1, #0]
10012888:	4283      	cmp	r3, r0
1001288a:	d004      	beq.n	10012896 <__mcmp+0x2e>
1001288c:	4283      	cmp	r3, r0
1001288e:	419b      	sbcs	r3, r3
10012890:	2001      	movs	r0, #1
10012892:	4318      	orrs	r0, r3
10012894:	e002      	b.n	1001289c <__mcmp+0x34>
10012896:	4294      	cmp	r4, r2
10012898:	d3f2      	bcc.n	10012880 <__mcmp+0x18>
1001289a:	2000      	movs	r0, #0
1001289c:	bd10      	pop	{r4, pc}

1001289e <__mdiff>:
1001289e:	b5f0      	push	{r4, r5, r6, r7, lr}
100128a0:	000c      	movs	r4, r1
100128a2:	b085      	sub	sp, #20
100128a4:	0007      	movs	r7, r0
100128a6:	0011      	movs	r1, r2
100128a8:	0020      	movs	r0, r4
100128aa:	0015      	movs	r5, r2
100128ac:	f7ff ffdc 	bl	10012868 <__mcmp>
100128b0:	1e06      	subs	r6, r0, #0
100128b2:	d107      	bne.n	100128c4 <__mdiff+0x26>
100128b4:	0001      	movs	r1, r0
100128b6:	0038      	movs	r0, r7
100128b8:	f7ff fd88 	bl	100123cc <_Balloc>
100128bc:	2301      	movs	r3, #1
100128be:	6146      	str	r6, [r0, #20]
100128c0:	6103      	str	r3, [r0, #16]
100128c2:	e055      	b.n	10012970 <__mdiff+0xd2>
100128c4:	2300      	movs	r3, #0
100128c6:	9301      	str	r3, [sp, #4]
100128c8:	4298      	cmp	r0, r3
100128ca:	da04      	bge.n	100128d6 <__mdiff+0x38>
100128cc:	0023      	movs	r3, r4
100128ce:	002c      	movs	r4, r5
100128d0:	001d      	movs	r5, r3
100128d2:	2301      	movs	r3, #1
100128d4:	9301      	str	r3, [sp, #4]
100128d6:	6861      	ldr	r1, [r4, #4]
100128d8:	0038      	movs	r0, r7
100128da:	f7ff fd77 	bl	100123cc <_Balloc>
100128de:	9b01      	ldr	r3, [sp, #4]
100128e0:	6926      	ldr	r6, [r4, #16]
100128e2:	002f      	movs	r7, r5
100128e4:	60c3      	str	r3, [r0, #12]
100128e6:	3414      	adds	r4, #20
100128e8:	00b3      	lsls	r3, r6, #2
100128ea:	18e3      	adds	r3, r4, r3
100128ec:	0002      	movs	r2, r0
100128ee:	9302      	str	r3, [sp, #8]
100128f0:	692b      	ldr	r3, [r5, #16]
100128f2:	2500      	movs	r5, #0
100128f4:	3714      	adds	r7, #20
100128f6:	009b      	lsls	r3, r3, #2
100128f8:	18fb      	adds	r3, r7, r3
100128fa:	9303      	str	r3, [sp, #12]
100128fc:	3214      	adds	r2, #20
100128fe:	cc08      	ldmia	r4!, {r3}
10012900:	4669      	mov	r1, sp
10012902:	469c      	mov	ip, r3
10012904:	cf08      	ldmia	r7!, {r3}
10012906:	3204      	adds	r2, #4
10012908:	9300      	str	r3, [sp, #0]
1001290a:	4663      	mov	r3, ip
1001290c:	808b      	strh	r3, [r1, #4]
1001290e:	888b      	ldrh	r3, [r1, #4]
10012910:	195d      	adds	r5, r3, r5
10012912:	9b00      	ldr	r3, [sp, #0]
10012914:	b29b      	uxth	r3, r3
10012916:	1aeb      	subs	r3, r5, r3
10012918:	4665      	mov	r5, ip
1001291a:	9301      	str	r3, [sp, #4]
1001291c:	9b00      	ldr	r3, [sp, #0]
1001291e:	0c2d      	lsrs	r5, r5, #16
10012920:	0c19      	lsrs	r1, r3, #16
10012922:	9b01      	ldr	r3, [sp, #4]
10012924:	1a69      	subs	r1, r5, r1
10012926:	141d      	asrs	r5, r3, #16
10012928:	1f13      	subs	r3, r2, #4
1001292a:	469c      	mov	ip, r3
1001292c:	466b      	mov	r3, sp
1001292e:	1949      	adds	r1, r1, r5
10012930:	889b      	ldrh	r3, [r3, #4]
10012932:	140d      	asrs	r5, r1, #16
10012934:	0409      	lsls	r1, r1, #16
10012936:	430b      	orrs	r3, r1
10012938:	4661      	mov	r1, ip
1001293a:	600b      	str	r3, [r1, #0]
1001293c:	9b03      	ldr	r3, [sp, #12]
1001293e:	42bb      	cmp	r3, r7
10012940:	d8dd      	bhi.n	100128fe <__mdiff+0x60>
10012942:	9902      	ldr	r1, [sp, #8]
10012944:	0013      	movs	r3, r2
10012946:	428c      	cmp	r4, r1
10012948:	d20b      	bcs.n	10012962 <__mdiff+0xc4>
1001294a:	cc02      	ldmia	r4!, {r1}
1001294c:	b28b      	uxth	r3, r1
1001294e:	195b      	adds	r3, r3, r5
10012950:	141d      	asrs	r5, r3, #16
10012952:	0c09      	lsrs	r1, r1, #16
10012954:	1949      	adds	r1, r1, r5
10012956:	140d      	asrs	r5, r1, #16
10012958:	b29b      	uxth	r3, r3
1001295a:	0409      	lsls	r1, r1, #16
1001295c:	430b      	orrs	r3, r1
1001295e:	c208      	stmia	r2!, {r3}
10012960:	e7ef      	b.n	10012942 <__mdiff+0xa4>
10012962:	3b04      	subs	r3, #4
10012964:	681a      	ldr	r2, [r3, #0]
10012966:	2a00      	cmp	r2, #0
10012968:	d101      	bne.n	1001296e <__mdiff+0xd0>
1001296a:	3e01      	subs	r6, #1
1001296c:	e7f9      	b.n	10012962 <__mdiff+0xc4>
1001296e:	6106      	str	r6, [r0, #16]
10012970:	b005      	add	sp, #20
10012972:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012974 <__ulp>:
10012974:	4b0f      	ldr	r3, [pc, #60]	; (100129b4 <__ulp+0x40>)
10012976:	b510      	push	{r4, lr}
10012978:	4019      	ands	r1, r3
1001297a:	4b0f      	ldr	r3, [pc, #60]	; (100129b8 <__ulp+0x44>)
1001297c:	18c9      	adds	r1, r1, r3
1001297e:	2900      	cmp	r1, #0
10012980:	dd02      	ble.n	10012988 <__ulp+0x14>
10012982:	2200      	movs	r2, #0
10012984:	000b      	movs	r3, r1
10012986:	e012      	b.n	100129ae <__ulp+0x3a>
10012988:	4249      	negs	r1, r1
1001298a:	1509      	asrs	r1, r1, #20
1001298c:	2200      	movs	r2, #0
1001298e:	2300      	movs	r3, #0
10012990:	2913      	cmp	r1, #19
10012992:	dc04      	bgt.n	1001299e <__ulp+0x2a>
10012994:	2080      	movs	r0, #128	; 0x80
10012996:	0300      	lsls	r0, r0, #12
10012998:	4108      	asrs	r0, r1
1001299a:	0003      	movs	r3, r0
1001299c:	e007      	b.n	100129ae <__ulp+0x3a>
1001299e:	3914      	subs	r1, #20
100129a0:	2001      	movs	r0, #1
100129a2:	291e      	cmp	r1, #30
100129a4:	dc02      	bgt.n	100129ac <__ulp+0x38>
100129a6:	241f      	movs	r4, #31
100129a8:	1a61      	subs	r1, r4, r1
100129aa:	4088      	lsls	r0, r1
100129ac:	0002      	movs	r2, r0
100129ae:	0010      	movs	r0, r2
100129b0:	0019      	movs	r1, r3
100129b2:	bd10      	pop	{r4, pc}
100129b4:	7ff00000 	.word	0x7ff00000
100129b8:	fcc00000 	.word	0xfcc00000

100129bc <__b2d>:
100129bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100129be:	0006      	movs	r6, r0
100129c0:	6903      	ldr	r3, [r0, #16]
100129c2:	3614      	adds	r6, #20
100129c4:	009b      	lsls	r3, r3, #2
100129c6:	18f3      	adds	r3, r6, r3
100129c8:	1f1d      	subs	r5, r3, #4
100129ca:	682c      	ldr	r4, [r5, #0]
100129cc:	000f      	movs	r7, r1
100129ce:	0020      	movs	r0, r4
100129d0:	9301      	str	r3, [sp, #4]
100129d2:	f7ff fdc7 	bl	10012564 <__hi0bits>
100129d6:	2320      	movs	r3, #32
100129d8:	1a1b      	subs	r3, r3, r0
100129da:	603b      	str	r3, [r7, #0]
100129dc:	491c      	ldr	r1, [pc, #112]	; (10012a50 <__b2d+0x94>)
100129de:	280a      	cmp	r0, #10
100129e0:	dc13      	bgt.n	10012a0a <__b2d+0x4e>
100129e2:	230b      	movs	r3, #11
100129e4:	0027      	movs	r7, r4
100129e6:	1a1b      	subs	r3, r3, r0
100129e8:	40df      	lsrs	r7, r3
100129ea:	4339      	orrs	r1, r7
100129ec:	469c      	mov	ip, r3
100129ee:	000b      	movs	r3, r1
100129f0:	2100      	movs	r1, #0
100129f2:	42ae      	cmp	r6, r5
100129f4:	d202      	bcs.n	100129fc <__b2d+0x40>
100129f6:	9901      	ldr	r1, [sp, #4]
100129f8:	3908      	subs	r1, #8
100129fa:	6809      	ldr	r1, [r1, #0]
100129fc:	3015      	adds	r0, #21
100129fe:	4084      	lsls	r4, r0
10012a00:	4660      	mov	r0, ip
10012a02:	40c1      	lsrs	r1, r0
10012a04:	430c      	orrs	r4, r1
10012a06:	0022      	movs	r2, r4
10012a08:	e01e      	b.n	10012a48 <__b2d+0x8c>
10012a0a:	2700      	movs	r7, #0
10012a0c:	42ae      	cmp	r6, r5
10012a0e:	d202      	bcs.n	10012a16 <__b2d+0x5a>
10012a10:	9d01      	ldr	r5, [sp, #4]
10012a12:	3d08      	subs	r5, #8
10012a14:	682f      	ldr	r7, [r5, #0]
10012a16:	380b      	subs	r0, #11
10012a18:	4684      	mov	ip, r0
10012a1a:	1e03      	subs	r3, r0, #0
10012a1c:	d011      	beq.n	10012a42 <__b2d+0x86>
10012a1e:	409c      	lsls	r4, r3
10012a20:	2020      	movs	r0, #32
10012a22:	4321      	orrs	r1, r4
10012a24:	003c      	movs	r4, r7
10012a26:	1ac0      	subs	r0, r0, r3
10012a28:	40c4      	lsrs	r4, r0
10012a2a:	4321      	orrs	r1, r4
10012a2c:	000b      	movs	r3, r1
10012a2e:	2100      	movs	r1, #0
10012a30:	42b5      	cmp	r5, r6
10012a32:	d901      	bls.n	10012a38 <__b2d+0x7c>
10012a34:	3d04      	subs	r5, #4
10012a36:	6829      	ldr	r1, [r5, #0]
10012a38:	4664      	mov	r4, ip
10012a3a:	40c1      	lsrs	r1, r0
10012a3c:	40a7      	lsls	r7, r4
10012a3e:	430f      	orrs	r7, r1
10012a40:	e001      	b.n	10012a46 <__b2d+0x8a>
10012a42:	4321      	orrs	r1, r4
10012a44:	000b      	movs	r3, r1
10012a46:	003a      	movs	r2, r7
10012a48:	0010      	movs	r0, r2
10012a4a:	0019      	movs	r1, r3
10012a4c:	b003      	add	sp, #12
10012a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012a50:	3ff00000 	.word	0x3ff00000

10012a54 <__d2b>:
10012a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012a56:	001d      	movs	r5, r3
10012a58:	2101      	movs	r1, #1
10012a5a:	9f08      	ldr	r7, [sp, #32]
10012a5c:	0014      	movs	r4, r2
10012a5e:	f7ff fcb5 	bl	100123cc <_Balloc>
10012a62:	032b      	lsls	r3, r5, #12
10012a64:	006d      	lsls	r5, r5, #1
10012a66:	0006      	movs	r6, r0
10012a68:	0b1b      	lsrs	r3, r3, #12
10012a6a:	0d6d      	lsrs	r5, r5, #21
10012a6c:	d002      	beq.n	10012a74 <__d2b+0x20>
10012a6e:	2280      	movs	r2, #128	; 0x80
10012a70:	0352      	lsls	r2, r2, #13
10012a72:	4313      	orrs	r3, r2
10012a74:	9301      	str	r3, [sp, #4]
10012a76:	2c00      	cmp	r4, #0
10012a78:	d018      	beq.n	10012aac <__d2b+0x58>
10012a7a:	4668      	mov	r0, sp
10012a7c:	9400      	str	r4, [sp, #0]
10012a7e:	f7ff fd8c 	bl	1001259a <__lo0bits>
10012a82:	9c00      	ldr	r4, [sp, #0]
10012a84:	2800      	cmp	r0, #0
10012a86:	d009      	beq.n	10012a9c <__d2b+0x48>
10012a88:	9b01      	ldr	r3, [sp, #4]
10012a8a:	2120      	movs	r1, #32
10012a8c:	001a      	movs	r2, r3
10012a8e:	1a09      	subs	r1, r1, r0
10012a90:	408a      	lsls	r2, r1
10012a92:	40c3      	lsrs	r3, r0
10012a94:	4322      	orrs	r2, r4
10012a96:	6172      	str	r2, [r6, #20]
10012a98:	9301      	str	r3, [sp, #4]
10012a9a:	e000      	b.n	10012a9e <__d2b+0x4a>
10012a9c:	6174      	str	r4, [r6, #20]
10012a9e:	9c01      	ldr	r4, [sp, #4]
10012aa0:	61b4      	str	r4, [r6, #24]
10012aa2:	1e63      	subs	r3, r4, #1
10012aa4:	419c      	sbcs	r4, r3
10012aa6:	3401      	adds	r4, #1
10012aa8:	6134      	str	r4, [r6, #16]
10012aaa:	e007      	b.n	10012abc <__d2b+0x68>
10012aac:	a801      	add	r0, sp, #4
10012aae:	f7ff fd74 	bl	1001259a <__lo0bits>
10012ab2:	2401      	movs	r4, #1
10012ab4:	9b01      	ldr	r3, [sp, #4]
10012ab6:	6134      	str	r4, [r6, #16]
10012ab8:	6173      	str	r3, [r6, #20]
10012aba:	3020      	adds	r0, #32
10012abc:	2d00      	cmp	r5, #0
10012abe:	d006      	beq.n	10012ace <__d2b+0x7a>
10012ac0:	4b0b      	ldr	r3, [pc, #44]	; (10012af0 <__d2b+0x9c>)
10012ac2:	18ed      	adds	r5, r5, r3
10012ac4:	2335      	movs	r3, #53	; 0x35
10012ac6:	182d      	adds	r5, r5, r0
10012ac8:	603d      	str	r5, [r7, #0]
10012aca:	1a18      	subs	r0, r3, r0
10012acc:	e00b      	b.n	10012ae6 <__d2b+0x92>
10012ace:	4b09      	ldr	r3, [pc, #36]	; (10012af4 <__d2b+0xa0>)
10012ad0:	18c0      	adds	r0, r0, r3
10012ad2:	4b09      	ldr	r3, [pc, #36]	; (10012af8 <__d2b+0xa4>)
10012ad4:	6038      	str	r0, [r7, #0]
10012ad6:	18e3      	adds	r3, r4, r3
10012ad8:	009b      	lsls	r3, r3, #2
10012ada:	18f3      	adds	r3, r6, r3
10012adc:	6958      	ldr	r0, [r3, #20]
10012ade:	f7ff fd41 	bl	10012564 <__hi0bits>
10012ae2:	0164      	lsls	r4, r4, #5
10012ae4:	1a20      	subs	r0, r4, r0
10012ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012ae8:	6018      	str	r0, [r3, #0]
10012aea:	0030      	movs	r0, r6
10012aec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012aee:	46c0      	nop			; (mov r8, r8)
10012af0:	fffffbcd 	.word	0xfffffbcd
10012af4:	fffffbce 	.word	0xfffffbce
10012af8:	3fffffff 	.word	0x3fffffff

10012afc <__ratio>:
10012afc:	b5f0      	push	{r4, r5, r6, r7, lr}
10012afe:	b085      	sub	sp, #20
10012b00:	000e      	movs	r6, r1
10012b02:	a902      	add	r1, sp, #8
10012b04:	0007      	movs	r7, r0
10012b06:	f7ff ff59 	bl	100129bc <__b2d>
10012b0a:	0004      	movs	r4, r0
10012b0c:	000d      	movs	r5, r1
10012b0e:	0030      	movs	r0, r6
10012b10:	a903      	add	r1, sp, #12
10012b12:	9400      	str	r4, [sp, #0]
10012b14:	9501      	str	r5, [sp, #4]
10012b16:	f7ff ff51 	bl	100129bc <__b2d>
10012b1a:	6936      	ldr	r6, [r6, #16]
10012b1c:	693f      	ldr	r7, [r7, #16]
10012b1e:	0002      	movs	r2, r0
10012b20:	1bbf      	subs	r7, r7, r6
10012b22:	017e      	lsls	r6, r7, #5
10012b24:	46b4      	mov	ip, r6
10012b26:	9f03      	ldr	r7, [sp, #12]
10012b28:	9e02      	ldr	r6, [sp, #8]
10012b2a:	000b      	movs	r3, r1
10012b2c:	1bf6      	subs	r6, r6, r7
10012b2e:	4466      	add	r6, ip
10012b30:	2e00      	cmp	r6, #0
10012b32:	dd03      	ble.n	10012b3c <__ratio+0x40>
10012b34:	0536      	lsls	r6, r6, #20
10012b36:	1971      	adds	r1, r6, r5
10012b38:	9101      	str	r1, [sp, #4]
10012b3a:	e001      	b.n	10012b40 <__ratio+0x44>
10012b3c:	0536      	lsls	r6, r6, #20
10012b3e:	1b8b      	subs	r3, r1, r6
10012b40:	9800      	ldr	r0, [sp, #0]
10012b42:	9901      	ldr	r1, [sp, #4]
10012b44:	f001 f926 	bl	10013d94 <__aeabi_ddiv>
10012b48:	b005      	add	sp, #20
10012b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10012b4c <__copybits>:
10012b4c:	0013      	movs	r3, r2
10012b4e:	3901      	subs	r1, #1
10012b50:	b510      	push	{r4, lr}
10012b52:	1149      	asrs	r1, r1, #5
10012b54:	6912      	ldr	r2, [r2, #16]
10012b56:	3101      	adds	r1, #1
10012b58:	0089      	lsls	r1, r1, #2
10012b5a:	3314      	adds	r3, #20
10012b5c:	0092      	lsls	r2, r2, #2
10012b5e:	1841      	adds	r1, r0, r1
10012b60:	189a      	adds	r2, r3, r2
10012b62:	429a      	cmp	r2, r3
10012b64:	d902      	bls.n	10012b6c <__copybits+0x20>
10012b66:	cb10      	ldmia	r3!, {r4}
10012b68:	c010      	stmia	r0!, {r4}
10012b6a:	e7fa      	b.n	10012b62 <__copybits+0x16>
10012b6c:	2300      	movs	r3, #0
10012b6e:	4281      	cmp	r1, r0
10012b70:	d901      	bls.n	10012b76 <__copybits+0x2a>
10012b72:	c008      	stmia	r0!, {r3}
10012b74:	e7fb      	b.n	10012b6e <__copybits+0x22>
10012b76:	bd10      	pop	{r4, pc}

10012b78 <__any_on>:
10012b78:	b530      	push	{r4, r5, lr}
10012b7a:	0004      	movs	r4, r0
10012b7c:	6902      	ldr	r2, [r0, #16]
10012b7e:	3414      	adds	r4, #20
10012b80:	114b      	asrs	r3, r1, #5
10012b82:	429a      	cmp	r2, r3
10012b84:	db0c      	blt.n	10012ba0 <__any_on+0x28>
10012b86:	dd0c      	ble.n	10012ba2 <__any_on+0x2a>
10012b88:	221f      	movs	r2, #31
10012b8a:	4011      	ands	r1, r2
10012b8c:	d009      	beq.n	10012ba2 <__any_on+0x2a>
10012b8e:	009a      	lsls	r2, r3, #2
10012b90:	5915      	ldr	r5, [r2, r4]
10012b92:	2001      	movs	r0, #1
10012b94:	002a      	movs	r2, r5
10012b96:	40ca      	lsrs	r2, r1
10012b98:	408a      	lsls	r2, r1
10012b9a:	4295      	cmp	r5, r2
10012b9c:	d10c      	bne.n	10012bb8 <__any_on+0x40>
10012b9e:	e000      	b.n	10012ba2 <__any_on+0x2a>
10012ba0:	0013      	movs	r3, r2
10012ba2:	009b      	lsls	r3, r3, #2
10012ba4:	18e3      	adds	r3, r4, r3
10012ba6:	42a3      	cmp	r3, r4
10012ba8:	d905      	bls.n	10012bb6 <__any_on+0x3e>
10012baa:	3b04      	subs	r3, #4
10012bac:	681a      	ldr	r2, [r3, #0]
10012bae:	2a00      	cmp	r2, #0
10012bb0:	d0f9      	beq.n	10012ba6 <__any_on+0x2e>
10012bb2:	2001      	movs	r0, #1
10012bb4:	e000      	b.n	10012bb8 <__any_on+0x40>
10012bb6:	2000      	movs	r0, #0
10012bb8:	bd30      	pop	{r4, r5, pc}

10012bba <_calloc_r>:
10012bba:	434a      	muls	r2, r1
10012bbc:	b570      	push	{r4, r5, r6, lr}
10012bbe:	0011      	movs	r1, r2
10012bc0:	0014      	movs	r4, r2
10012bc2:	f000 f84f 	bl	10012c64 <_malloc_r>
10012bc6:	1e05      	subs	r5, r0, #0
10012bc8:	d003      	beq.n	10012bd2 <_calloc_r+0x18>
10012bca:	0022      	movs	r2, r4
10012bcc:	2100      	movs	r1, #0
10012bce:	f7fd fe13 	bl	100107f8 <memset>
10012bd2:	0028      	movs	r0, r5
10012bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

10012bd8 <_free_r>:
10012bd8:	b530      	push	{r4, r5, lr}
10012bda:	2900      	cmp	r1, #0
10012bdc:	d03e      	beq.n	10012c5c <_free_r+0x84>
10012bde:	3904      	subs	r1, #4
10012be0:	680b      	ldr	r3, [r1, #0]
10012be2:	2b00      	cmp	r3, #0
10012be4:	da00      	bge.n	10012be8 <_free_r+0x10>
10012be6:	18c9      	adds	r1, r1, r3
10012be8:	4a1d      	ldr	r2, [pc, #116]	; (10012c60 <_free_r+0x88>)
10012bea:	6813      	ldr	r3, [r2, #0]
10012bec:	0014      	movs	r4, r2
10012bee:	2b00      	cmp	r3, #0
10012bf0:	d102      	bne.n	10012bf8 <_free_r+0x20>
10012bf2:	604b      	str	r3, [r1, #4]
10012bf4:	6011      	str	r1, [r2, #0]
10012bf6:	e031      	b.n	10012c5c <_free_r+0x84>
10012bf8:	428b      	cmp	r3, r1
10012bfa:	d90d      	bls.n	10012c18 <_free_r+0x40>
10012bfc:	680a      	ldr	r2, [r1, #0]
10012bfe:	1888      	adds	r0, r1, r2
10012c00:	4283      	cmp	r3, r0
10012c02:	d103      	bne.n	10012c0c <_free_r+0x34>
10012c04:	6818      	ldr	r0, [r3, #0]
10012c06:	685b      	ldr	r3, [r3, #4]
10012c08:	1882      	adds	r2, r0, r2
10012c0a:	600a      	str	r2, [r1, #0]
10012c0c:	604b      	str	r3, [r1, #4]
10012c0e:	6021      	str	r1, [r4, #0]
10012c10:	e024      	b.n	10012c5c <_free_r+0x84>
10012c12:	428a      	cmp	r2, r1
10012c14:	d803      	bhi.n	10012c1e <_free_r+0x46>
10012c16:	0013      	movs	r3, r2
10012c18:	685a      	ldr	r2, [r3, #4]
10012c1a:	2a00      	cmp	r2, #0
10012c1c:	d1f9      	bne.n	10012c12 <_free_r+0x3a>
10012c1e:	681d      	ldr	r5, [r3, #0]
10012c20:	195c      	adds	r4, r3, r5
10012c22:	428c      	cmp	r4, r1
10012c24:	d10b      	bne.n	10012c3e <_free_r+0x66>
10012c26:	6809      	ldr	r1, [r1, #0]
10012c28:	1869      	adds	r1, r5, r1
10012c2a:	1858      	adds	r0, r3, r1
10012c2c:	6019      	str	r1, [r3, #0]
10012c2e:	4282      	cmp	r2, r0
10012c30:	d114      	bne.n	10012c5c <_free_r+0x84>
10012c32:	6810      	ldr	r0, [r2, #0]
10012c34:	6852      	ldr	r2, [r2, #4]
10012c36:	1841      	adds	r1, r0, r1
10012c38:	6019      	str	r1, [r3, #0]
10012c3a:	605a      	str	r2, [r3, #4]
10012c3c:	e00e      	b.n	10012c5c <_free_r+0x84>
10012c3e:	428c      	cmp	r4, r1
10012c40:	d902      	bls.n	10012c48 <_free_r+0x70>
10012c42:	230c      	movs	r3, #12
10012c44:	6003      	str	r3, [r0, #0]
10012c46:	e009      	b.n	10012c5c <_free_r+0x84>
10012c48:	6808      	ldr	r0, [r1, #0]
10012c4a:	180c      	adds	r4, r1, r0
10012c4c:	42a2      	cmp	r2, r4
10012c4e:	d103      	bne.n	10012c58 <_free_r+0x80>
10012c50:	6814      	ldr	r4, [r2, #0]
10012c52:	6852      	ldr	r2, [r2, #4]
10012c54:	1820      	adds	r0, r4, r0
10012c56:	6008      	str	r0, [r1, #0]
10012c58:	604a      	str	r2, [r1, #4]
10012c5a:	6059      	str	r1, [r3, #4]
10012c5c:	bd30      	pop	{r4, r5, pc}
10012c5e:	46c0      	nop			; (mov r8, r8)
10012c60:	10016ed8 	.word	0x10016ed8

10012c64 <_malloc_r>:
10012c64:	2303      	movs	r3, #3
10012c66:	b570      	push	{r4, r5, r6, lr}
10012c68:	1ccd      	adds	r5, r1, #3
10012c6a:	439d      	bics	r5, r3
10012c6c:	3508      	adds	r5, #8
10012c6e:	0006      	movs	r6, r0
10012c70:	2d0c      	cmp	r5, #12
10012c72:	d201      	bcs.n	10012c78 <_malloc_r+0x14>
10012c74:	250c      	movs	r5, #12
10012c76:	e005      	b.n	10012c84 <_malloc_r+0x20>
10012c78:	2d00      	cmp	r5, #0
10012c7a:	da03      	bge.n	10012c84 <_malloc_r+0x20>
10012c7c:	230c      	movs	r3, #12
10012c7e:	2000      	movs	r0, #0
10012c80:	6033      	str	r3, [r6, #0]
10012c82:	e040      	b.n	10012d06 <_malloc_r+0xa2>
10012c84:	42a9      	cmp	r1, r5
10012c86:	d8f9      	bhi.n	10012c7c <_malloc_r+0x18>
10012c88:	4b1f      	ldr	r3, [pc, #124]	; (10012d08 <_malloc_r+0xa4>)
10012c8a:	681c      	ldr	r4, [r3, #0]
10012c8c:	001a      	movs	r2, r3
10012c8e:	0021      	movs	r1, r4
10012c90:	2900      	cmp	r1, #0
10012c92:	d013      	beq.n	10012cbc <_malloc_r+0x58>
10012c94:	680b      	ldr	r3, [r1, #0]
10012c96:	1b5b      	subs	r3, r3, r5
10012c98:	d40d      	bmi.n	10012cb6 <_malloc_r+0x52>
10012c9a:	2b0b      	cmp	r3, #11
10012c9c:	d902      	bls.n	10012ca4 <_malloc_r+0x40>
10012c9e:	600b      	str	r3, [r1, #0]
10012ca0:	18cc      	adds	r4, r1, r3
10012ca2:	e01e      	b.n	10012ce2 <_malloc_r+0x7e>
10012ca4:	428c      	cmp	r4, r1
10012ca6:	d102      	bne.n	10012cae <_malloc_r+0x4a>
10012ca8:	6863      	ldr	r3, [r4, #4]
10012caa:	6013      	str	r3, [r2, #0]
10012cac:	e01a      	b.n	10012ce4 <_malloc_r+0x80>
10012cae:	684b      	ldr	r3, [r1, #4]
10012cb0:	6063      	str	r3, [r4, #4]
10012cb2:	000c      	movs	r4, r1
10012cb4:	e016      	b.n	10012ce4 <_malloc_r+0x80>
10012cb6:	000c      	movs	r4, r1
10012cb8:	6849      	ldr	r1, [r1, #4]
10012cba:	e7e9      	b.n	10012c90 <_malloc_r+0x2c>
10012cbc:	4c13      	ldr	r4, [pc, #76]	; (10012d0c <_malloc_r+0xa8>)
10012cbe:	6823      	ldr	r3, [r4, #0]
10012cc0:	2b00      	cmp	r3, #0
10012cc2:	d103      	bne.n	10012ccc <_malloc_r+0x68>
10012cc4:	0030      	movs	r0, r6
10012cc6:	f000 fb2d 	bl	10013324 <_sbrk_r>
10012cca:	6020      	str	r0, [r4, #0]
10012ccc:	0029      	movs	r1, r5
10012cce:	0030      	movs	r0, r6
10012cd0:	f000 fb28 	bl	10013324 <_sbrk_r>
10012cd4:	1c43      	adds	r3, r0, #1
10012cd6:	d0d1      	beq.n	10012c7c <_malloc_r+0x18>
10012cd8:	2303      	movs	r3, #3
10012cda:	1cc4      	adds	r4, r0, #3
10012cdc:	439c      	bics	r4, r3
10012cde:	42a0      	cmp	r0, r4
10012ce0:	d10a      	bne.n	10012cf8 <_malloc_r+0x94>
10012ce2:	6025      	str	r5, [r4, #0]
10012ce4:	0020      	movs	r0, r4
10012ce6:	2207      	movs	r2, #7
10012ce8:	300b      	adds	r0, #11
10012cea:	1d23      	adds	r3, r4, #4
10012cec:	4390      	bics	r0, r2
10012cee:	1ac3      	subs	r3, r0, r3
10012cf0:	d009      	beq.n	10012d06 <_malloc_r+0xa2>
10012cf2:	425a      	negs	r2, r3
10012cf4:	50e2      	str	r2, [r4, r3]
10012cf6:	e006      	b.n	10012d06 <_malloc_r+0xa2>
10012cf8:	1a21      	subs	r1, r4, r0
10012cfa:	0030      	movs	r0, r6
10012cfc:	f000 fb12 	bl	10013324 <_sbrk_r>
10012d00:	1c43      	adds	r3, r0, #1
10012d02:	d1ee      	bne.n	10012ce2 <_malloc_r+0x7e>
10012d04:	e7ba      	b.n	10012c7c <_malloc_r+0x18>
10012d06:	bd70      	pop	{r4, r5, r6, pc}
10012d08:	10016ed8 	.word	0x10016ed8
10012d0c:	10016ed4 	.word	0x10016ed4

10012d10 <__sfputc_r>:
10012d10:	6893      	ldr	r3, [r2, #8]
10012d12:	b510      	push	{r4, lr}
10012d14:	3b01      	subs	r3, #1
10012d16:	6093      	str	r3, [r2, #8]
10012d18:	2b00      	cmp	r3, #0
10012d1a:	da05      	bge.n	10012d28 <__sfputc_r+0x18>
10012d1c:	6994      	ldr	r4, [r2, #24]
10012d1e:	42a3      	cmp	r3, r4
10012d20:	db08      	blt.n	10012d34 <__sfputc_r+0x24>
10012d22:	b2cb      	uxtb	r3, r1
10012d24:	2b0a      	cmp	r3, #10
10012d26:	d005      	beq.n	10012d34 <__sfputc_r+0x24>
10012d28:	6813      	ldr	r3, [r2, #0]
10012d2a:	1c58      	adds	r0, r3, #1
10012d2c:	6010      	str	r0, [r2, #0]
10012d2e:	7019      	strb	r1, [r3, #0]
10012d30:	b2c8      	uxtb	r0, r1
10012d32:	e001      	b.n	10012d38 <__sfputc_r+0x28>
10012d34:	f7fe fd52 	bl	100117dc <__swbuf_r>
10012d38:	bd10      	pop	{r4, pc}

10012d3a <__sfputs_r>:
10012d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012d3c:	0006      	movs	r6, r0
10012d3e:	000f      	movs	r7, r1
10012d40:	0014      	movs	r4, r2
10012d42:	18d5      	adds	r5, r2, r3
10012d44:	42ac      	cmp	r4, r5
10012d46:	d008      	beq.n	10012d5a <__sfputs_r+0x20>
10012d48:	7821      	ldrb	r1, [r4, #0]
10012d4a:	003a      	movs	r2, r7
10012d4c:	0030      	movs	r0, r6
10012d4e:	f7ff ffdf 	bl	10012d10 <__sfputc_r>
10012d52:	3401      	adds	r4, #1
10012d54:	1c43      	adds	r3, r0, #1
10012d56:	d1f5      	bne.n	10012d44 <__sfputs_r+0xa>
10012d58:	e000      	b.n	10012d5c <__sfputs_r+0x22>
10012d5a:	2000      	movs	r0, #0
10012d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012d60 <_vfiprintf_r>:
10012d60:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d62:	b09f      	sub	sp, #124	; 0x7c
10012d64:	0006      	movs	r6, r0
10012d66:	000f      	movs	r7, r1
10012d68:	9202      	str	r2, [sp, #8]
10012d6a:	9305      	str	r3, [sp, #20]
10012d6c:	2800      	cmp	r0, #0
10012d6e:	d004      	beq.n	10012d7a <_vfiprintf_r+0x1a>
10012d70:	6983      	ldr	r3, [r0, #24]
10012d72:	2b00      	cmp	r3, #0
10012d74:	d101      	bne.n	10012d7a <_vfiprintf_r+0x1a>
10012d76:	f7fe fef3 	bl	10011b60 <__sinit>
10012d7a:	4b7f      	ldr	r3, [pc, #508]	; (10012f78 <_vfiprintf_r+0x218>)
10012d7c:	429f      	cmp	r7, r3
10012d7e:	d101      	bne.n	10012d84 <_vfiprintf_r+0x24>
10012d80:	6877      	ldr	r7, [r6, #4]
10012d82:	e008      	b.n	10012d96 <_vfiprintf_r+0x36>
10012d84:	4b7d      	ldr	r3, [pc, #500]	; (10012f7c <_vfiprintf_r+0x21c>)
10012d86:	429f      	cmp	r7, r3
10012d88:	d101      	bne.n	10012d8e <_vfiprintf_r+0x2e>
10012d8a:	68b7      	ldr	r7, [r6, #8]
10012d8c:	e003      	b.n	10012d96 <_vfiprintf_r+0x36>
10012d8e:	4b7c      	ldr	r3, [pc, #496]	; (10012f80 <_vfiprintf_r+0x220>)
10012d90:	429f      	cmp	r7, r3
10012d92:	d100      	bne.n	10012d96 <_vfiprintf_r+0x36>
10012d94:	68f7      	ldr	r7, [r6, #12]
10012d96:	89bb      	ldrh	r3, [r7, #12]
10012d98:	071b      	lsls	r3, r3, #28
10012d9a:	d50a      	bpl.n	10012db2 <_vfiprintf_r+0x52>
10012d9c:	693b      	ldr	r3, [r7, #16]
10012d9e:	2b00      	cmp	r3, #0
10012da0:	d007      	beq.n	10012db2 <_vfiprintf_r+0x52>
10012da2:	2300      	movs	r3, #0
10012da4:	ad06      	add	r5, sp, #24
10012da6:	616b      	str	r3, [r5, #20]
10012da8:	3320      	adds	r3, #32
10012daa:	766b      	strb	r3, [r5, #25]
10012dac:	3310      	adds	r3, #16
10012dae:	76ab      	strb	r3, [r5, #26]
10012db0:	e03d      	b.n	10012e2e <_vfiprintf_r+0xce>
10012db2:	0039      	movs	r1, r7
10012db4:	0030      	movs	r0, r6
10012db6:	f7fe fd69 	bl	1001188c <__swsetup_r>
10012dba:	2800      	cmp	r0, #0
10012dbc:	d0f1      	beq.n	10012da2 <_vfiprintf_r+0x42>
10012dbe:	2001      	movs	r0, #1
10012dc0:	4240      	negs	r0, r0
10012dc2:	e0d6      	b.n	10012f72 <_vfiprintf_r+0x212>
10012dc4:	9a05      	ldr	r2, [sp, #20]
10012dc6:	1d11      	adds	r1, r2, #4
10012dc8:	6812      	ldr	r2, [r2, #0]
10012dca:	9105      	str	r1, [sp, #20]
10012dcc:	2a00      	cmp	r2, #0
10012dce:	da00      	bge.n	10012dd2 <_vfiprintf_r+0x72>
10012dd0:	e07f      	b.n	10012ed2 <_vfiprintf_r+0x172>
10012dd2:	9209      	str	r2, [sp, #36]	; 0x24
10012dd4:	3401      	adds	r4, #1
10012dd6:	7823      	ldrb	r3, [r4, #0]
10012dd8:	2b2e      	cmp	r3, #46	; 0x2e
10012dda:	d100      	bne.n	10012dde <_vfiprintf_r+0x7e>
10012ddc:	e08d      	b.n	10012efa <_vfiprintf_r+0x19a>
10012dde:	7821      	ldrb	r1, [r4, #0]
10012de0:	2203      	movs	r2, #3
10012de2:	4868      	ldr	r0, [pc, #416]	; (10012f84 <_vfiprintf_r+0x224>)
10012de4:	f000 fb74 	bl	100134d0 <memchr>
10012de8:	2800      	cmp	r0, #0
10012dea:	d007      	beq.n	10012dfc <_vfiprintf_r+0x9c>
10012dec:	4b65      	ldr	r3, [pc, #404]	; (10012f84 <_vfiprintf_r+0x224>)
10012dee:	682a      	ldr	r2, [r5, #0]
10012df0:	1ac0      	subs	r0, r0, r3
10012df2:	2340      	movs	r3, #64	; 0x40
10012df4:	4083      	lsls	r3, r0
10012df6:	4313      	orrs	r3, r2
10012df8:	602b      	str	r3, [r5, #0]
10012dfa:	3401      	adds	r4, #1
10012dfc:	7821      	ldrb	r1, [r4, #0]
10012dfe:	1c63      	adds	r3, r4, #1
10012e00:	2206      	movs	r2, #6
10012e02:	4861      	ldr	r0, [pc, #388]	; (10012f88 <_vfiprintf_r+0x228>)
10012e04:	9302      	str	r3, [sp, #8]
10012e06:	7629      	strb	r1, [r5, #24]
10012e08:	f000 fb62 	bl	100134d0 <memchr>
10012e0c:	2800      	cmp	r0, #0
10012e0e:	d100      	bne.n	10012e12 <_vfiprintf_r+0xb2>
10012e10:	e09d      	b.n	10012f4e <_vfiprintf_r+0x1ee>
10012e12:	4b5e      	ldr	r3, [pc, #376]	; (10012f8c <_vfiprintf_r+0x22c>)
10012e14:	2b00      	cmp	r3, #0
10012e16:	d000      	beq.n	10012e1a <_vfiprintf_r+0xba>
10012e18:	e090      	b.n	10012f3c <_vfiprintf_r+0x1dc>
10012e1a:	2207      	movs	r2, #7
10012e1c:	9b05      	ldr	r3, [sp, #20]
10012e1e:	3307      	adds	r3, #7
10012e20:	4393      	bics	r3, r2
10012e22:	3308      	adds	r3, #8
10012e24:	9305      	str	r3, [sp, #20]
10012e26:	696b      	ldr	r3, [r5, #20]
10012e28:	9a03      	ldr	r2, [sp, #12]
10012e2a:	189b      	adds	r3, r3, r2
10012e2c:	616b      	str	r3, [r5, #20]
10012e2e:	9c02      	ldr	r4, [sp, #8]
10012e30:	7823      	ldrb	r3, [r4, #0]
10012e32:	2b00      	cmp	r3, #0
10012e34:	d104      	bne.n	10012e40 <_vfiprintf_r+0xe0>
10012e36:	9b02      	ldr	r3, [sp, #8]
10012e38:	1ae3      	subs	r3, r4, r3
10012e3a:	9304      	str	r3, [sp, #16]
10012e3c:	d012      	beq.n	10012e64 <_vfiprintf_r+0x104>
10012e3e:	e003      	b.n	10012e48 <_vfiprintf_r+0xe8>
10012e40:	2b25      	cmp	r3, #37	; 0x25
10012e42:	d0f8      	beq.n	10012e36 <_vfiprintf_r+0xd6>
10012e44:	3401      	adds	r4, #1
10012e46:	e7f3      	b.n	10012e30 <_vfiprintf_r+0xd0>
10012e48:	9b04      	ldr	r3, [sp, #16]
10012e4a:	9a02      	ldr	r2, [sp, #8]
10012e4c:	0039      	movs	r1, r7
10012e4e:	0030      	movs	r0, r6
10012e50:	f7ff ff73 	bl	10012d3a <__sfputs_r>
10012e54:	1c43      	adds	r3, r0, #1
10012e56:	d100      	bne.n	10012e5a <_vfiprintf_r+0xfa>
10012e58:	e086      	b.n	10012f68 <_vfiprintf_r+0x208>
10012e5a:	696a      	ldr	r2, [r5, #20]
10012e5c:	9b04      	ldr	r3, [sp, #16]
10012e5e:	4694      	mov	ip, r2
10012e60:	4463      	add	r3, ip
10012e62:	616b      	str	r3, [r5, #20]
10012e64:	7823      	ldrb	r3, [r4, #0]
10012e66:	2b00      	cmp	r3, #0
10012e68:	d07e      	beq.n	10012f68 <_vfiprintf_r+0x208>
10012e6a:	2201      	movs	r2, #1
10012e6c:	2300      	movs	r3, #0
10012e6e:	4252      	negs	r2, r2
10012e70:	606a      	str	r2, [r5, #4]
10012e72:	a902      	add	r1, sp, #8
10012e74:	3254      	adds	r2, #84	; 0x54
10012e76:	1852      	adds	r2, r2, r1
10012e78:	3401      	adds	r4, #1
10012e7a:	602b      	str	r3, [r5, #0]
10012e7c:	60eb      	str	r3, [r5, #12]
10012e7e:	60ab      	str	r3, [r5, #8]
10012e80:	7013      	strb	r3, [r2, #0]
10012e82:	65ab      	str	r3, [r5, #88]	; 0x58
10012e84:	7821      	ldrb	r1, [r4, #0]
10012e86:	2205      	movs	r2, #5
10012e88:	4841      	ldr	r0, [pc, #260]	; (10012f90 <_vfiprintf_r+0x230>)
10012e8a:	f000 fb21 	bl	100134d0 <memchr>
10012e8e:	2800      	cmp	r0, #0
10012e90:	d008      	beq.n	10012ea4 <_vfiprintf_r+0x144>
10012e92:	4b3f      	ldr	r3, [pc, #252]	; (10012f90 <_vfiprintf_r+0x230>)
10012e94:	682a      	ldr	r2, [r5, #0]
10012e96:	1ac0      	subs	r0, r0, r3
10012e98:	2301      	movs	r3, #1
10012e9a:	4083      	lsls	r3, r0
10012e9c:	4313      	orrs	r3, r2
10012e9e:	602b      	str	r3, [r5, #0]
10012ea0:	3401      	adds	r4, #1
10012ea2:	e7ef      	b.n	10012e84 <_vfiprintf_r+0x124>
10012ea4:	682b      	ldr	r3, [r5, #0]
10012ea6:	06da      	lsls	r2, r3, #27
10012ea8:	d504      	bpl.n	10012eb4 <_vfiprintf_r+0x154>
10012eaa:	2253      	movs	r2, #83	; 0x53
10012eac:	2120      	movs	r1, #32
10012eae:	a802      	add	r0, sp, #8
10012eb0:	1812      	adds	r2, r2, r0
10012eb2:	7011      	strb	r1, [r2, #0]
10012eb4:	071a      	lsls	r2, r3, #28
10012eb6:	d504      	bpl.n	10012ec2 <_vfiprintf_r+0x162>
10012eb8:	2253      	movs	r2, #83	; 0x53
10012eba:	212b      	movs	r1, #43	; 0x2b
10012ebc:	a802      	add	r0, sp, #8
10012ebe:	1812      	adds	r2, r2, r0
10012ec0:	7011      	strb	r1, [r2, #0]
10012ec2:	7822      	ldrb	r2, [r4, #0]
10012ec4:	2a2a      	cmp	r2, #42	; 0x2a
10012ec6:	d100      	bne.n	10012eca <_vfiprintf_r+0x16a>
10012ec8:	e77c      	b.n	10012dc4 <_vfiprintf_r+0x64>
10012eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012ecc:	2000      	movs	r0, #0
10012ece:	210a      	movs	r1, #10
10012ed0:	e005      	b.n	10012ede <_vfiprintf_r+0x17e>
10012ed2:	4252      	negs	r2, r2
10012ed4:	60ea      	str	r2, [r5, #12]
10012ed6:	2202      	movs	r2, #2
10012ed8:	4313      	orrs	r3, r2
10012eda:	602b      	str	r3, [r5, #0]
10012edc:	e77a      	b.n	10012dd4 <_vfiprintf_r+0x74>
10012ede:	7822      	ldrb	r2, [r4, #0]
10012ee0:	3a30      	subs	r2, #48	; 0x30
10012ee2:	2a09      	cmp	r2, #9
10012ee4:	d804      	bhi.n	10012ef0 <_vfiprintf_r+0x190>
10012ee6:	434b      	muls	r3, r1
10012ee8:	3401      	adds	r4, #1
10012eea:	189b      	adds	r3, r3, r2
10012eec:	2001      	movs	r0, #1
10012eee:	e7f6      	b.n	10012ede <_vfiprintf_r+0x17e>
10012ef0:	2800      	cmp	r0, #0
10012ef2:	d100      	bne.n	10012ef6 <_vfiprintf_r+0x196>
10012ef4:	e76f      	b.n	10012dd6 <_vfiprintf_r+0x76>
10012ef6:	9309      	str	r3, [sp, #36]	; 0x24
10012ef8:	e76d      	b.n	10012dd6 <_vfiprintf_r+0x76>
10012efa:	7863      	ldrb	r3, [r4, #1]
10012efc:	2b2a      	cmp	r3, #42	; 0x2a
10012efe:	d10a      	bne.n	10012f16 <_vfiprintf_r+0x1b6>
10012f00:	9b05      	ldr	r3, [sp, #20]
10012f02:	3402      	adds	r4, #2
10012f04:	1d1a      	adds	r2, r3, #4
10012f06:	681b      	ldr	r3, [r3, #0]
10012f08:	9205      	str	r2, [sp, #20]
10012f0a:	2b00      	cmp	r3, #0
10012f0c:	da01      	bge.n	10012f12 <_vfiprintf_r+0x1b2>
10012f0e:	2301      	movs	r3, #1
10012f10:	425b      	negs	r3, r3
10012f12:	9307      	str	r3, [sp, #28]
10012f14:	e763      	b.n	10012dde <_vfiprintf_r+0x7e>
10012f16:	2300      	movs	r3, #0
10012f18:	200a      	movs	r0, #10
10012f1a:	001a      	movs	r2, r3
10012f1c:	3401      	adds	r4, #1
10012f1e:	606b      	str	r3, [r5, #4]
10012f20:	7821      	ldrb	r1, [r4, #0]
10012f22:	3930      	subs	r1, #48	; 0x30
10012f24:	2909      	cmp	r1, #9
10012f26:	d804      	bhi.n	10012f32 <_vfiprintf_r+0x1d2>
10012f28:	4342      	muls	r2, r0
10012f2a:	3401      	adds	r4, #1
10012f2c:	1852      	adds	r2, r2, r1
10012f2e:	2301      	movs	r3, #1
10012f30:	e7f6      	b.n	10012f20 <_vfiprintf_r+0x1c0>
10012f32:	2b00      	cmp	r3, #0
10012f34:	d100      	bne.n	10012f38 <_vfiprintf_r+0x1d8>
10012f36:	e752      	b.n	10012dde <_vfiprintf_r+0x7e>
10012f38:	9207      	str	r2, [sp, #28]
10012f3a:	e750      	b.n	10012dde <_vfiprintf_r+0x7e>
10012f3c:	ab05      	add	r3, sp, #20
10012f3e:	9300      	str	r3, [sp, #0]
10012f40:	003a      	movs	r2, r7
10012f42:	4b14      	ldr	r3, [pc, #80]	; (10012f94 <_vfiprintf_r+0x234>)
10012f44:	0029      	movs	r1, r5
10012f46:	0030      	movs	r0, r6
10012f48:	e000      	b.n	10012f4c <_vfiprintf_r+0x1ec>
10012f4a:	bf00      	nop
10012f4c:	e007      	b.n	10012f5e <_vfiprintf_r+0x1fe>
10012f4e:	ab05      	add	r3, sp, #20
10012f50:	9300      	str	r3, [sp, #0]
10012f52:	003a      	movs	r2, r7
10012f54:	4b0f      	ldr	r3, [pc, #60]	; (10012f94 <_vfiprintf_r+0x234>)
10012f56:	0029      	movs	r1, r5
10012f58:	0030      	movs	r0, r6
10012f5a:	f000 f88b 	bl	10013074 <_printf_i>
10012f5e:	9003      	str	r0, [sp, #12]
10012f60:	9b03      	ldr	r3, [sp, #12]
10012f62:	3301      	adds	r3, #1
10012f64:	d000      	beq.n	10012f68 <_vfiprintf_r+0x208>
10012f66:	e75e      	b.n	10012e26 <_vfiprintf_r+0xc6>
10012f68:	89bb      	ldrh	r3, [r7, #12]
10012f6a:	065b      	lsls	r3, r3, #25
10012f6c:	d500      	bpl.n	10012f70 <_vfiprintf_r+0x210>
10012f6e:	e726      	b.n	10012dbe <_vfiprintf_r+0x5e>
10012f70:	980b      	ldr	r0, [sp, #44]	; 0x2c
10012f72:	b01f      	add	sp, #124	; 0x7c
10012f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f76:	46c0      	nop			; (mov r8, r8)
10012f78:	10015148 	.word	0x10015148
10012f7c:	10015168 	.word	0x10015168
10012f80:	10015188 	.word	0x10015188
10012f84:	100152b2 	.word	0x100152b2
10012f88:	100152b6 	.word	0x100152b6
10012f8c:	00000000 	.word	0x00000000
10012f90:	100152ac 	.word	0x100152ac
10012f94:	10012d3b 	.word	0x10012d3b

10012f98 <_printf_common>:
10012f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012f9a:	0017      	movs	r7, r2
10012f9c:	9301      	str	r3, [sp, #4]
10012f9e:	688a      	ldr	r2, [r1, #8]
10012fa0:	690b      	ldr	r3, [r1, #16]
10012fa2:	9000      	str	r0, [sp, #0]
10012fa4:	000c      	movs	r4, r1
10012fa6:	4293      	cmp	r3, r2
10012fa8:	da00      	bge.n	10012fac <_printf_common+0x14>
10012faa:	0013      	movs	r3, r2
10012fac:	0022      	movs	r2, r4
10012fae:	603b      	str	r3, [r7, #0]
10012fb0:	3243      	adds	r2, #67	; 0x43
10012fb2:	7812      	ldrb	r2, [r2, #0]
10012fb4:	2a00      	cmp	r2, #0
10012fb6:	d001      	beq.n	10012fbc <_printf_common+0x24>
10012fb8:	3301      	adds	r3, #1
10012fba:	603b      	str	r3, [r7, #0]
10012fbc:	6823      	ldr	r3, [r4, #0]
10012fbe:	069b      	lsls	r3, r3, #26
10012fc0:	d502      	bpl.n	10012fc8 <_printf_common+0x30>
10012fc2:	683b      	ldr	r3, [r7, #0]
10012fc4:	3302      	adds	r3, #2
10012fc6:	603b      	str	r3, [r7, #0]
10012fc8:	2506      	movs	r5, #6
10012fca:	6823      	ldr	r3, [r4, #0]
10012fcc:	401d      	ands	r5, r3
10012fce:	d01e      	beq.n	1001300e <_printf_common+0x76>
10012fd0:	0023      	movs	r3, r4
10012fd2:	3343      	adds	r3, #67	; 0x43
10012fd4:	781b      	ldrb	r3, [r3, #0]
10012fd6:	1e5a      	subs	r2, r3, #1
10012fd8:	4193      	sbcs	r3, r2
10012fda:	6822      	ldr	r2, [r4, #0]
10012fdc:	0692      	lsls	r2, r2, #26
10012fde:	d51c      	bpl.n	1001301a <_printf_common+0x82>
10012fe0:	2030      	movs	r0, #48	; 0x30
10012fe2:	18e1      	adds	r1, r4, r3
10012fe4:	3143      	adds	r1, #67	; 0x43
10012fe6:	7008      	strb	r0, [r1, #0]
10012fe8:	0021      	movs	r1, r4
10012fea:	1c5a      	adds	r2, r3, #1
10012fec:	3145      	adds	r1, #69	; 0x45
10012fee:	7809      	ldrb	r1, [r1, #0]
10012ff0:	18a2      	adds	r2, r4, r2
10012ff2:	3243      	adds	r2, #67	; 0x43
10012ff4:	3302      	adds	r3, #2
10012ff6:	7011      	strb	r1, [r2, #0]
10012ff8:	e00f      	b.n	1001301a <_printf_common+0x82>
10012ffa:	0022      	movs	r2, r4
10012ffc:	2301      	movs	r3, #1
10012ffe:	3219      	adds	r2, #25
10013000:	9901      	ldr	r1, [sp, #4]
10013002:	9800      	ldr	r0, [sp, #0]
10013004:	9e08      	ldr	r6, [sp, #32]
10013006:	47b0      	blx	r6
10013008:	1c43      	adds	r3, r0, #1
1001300a:	d00e      	beq.n	1001302a <_printf_common+0x92>
1001300c:	3501      	adds	r5, #1
1001300e:	68e3      	ldr	r3, [r4, #12]
10013010:	683a      	ldr	r2, [r7, #0]
10013012:	1a9b      	subs	r3, r3, r2
10013014:	429d      	cmp	r5, r3
10013016:	dbf0      	blt.n	10012ffa <_printf_common+0x62>
10013018:	e7da      	b.n	10012fd0 <_printf_common+0x38>
1001301a:	0022      	movs	r2, r4
1001301c:	9901      	ldr	r1, [sp, #4]
1001301e:	3243      	adds	r2, #67	; 0x43
10013020:	9800      	ldr	r0, [sp, #0]
10013022:	9d08      	ldr	r5, [sp, #32]
10013024:	47a8      	blx	r5
10013026:	1c43      	adds	r3, r0, #1
10013028:	d102      	bne.n	10013030 <_printf_common+0x98>
1001302a:	2001      	movs	r0, #1
1001302c:	4240      	negs	r0, r0
1001302e:	e020      	b.n	10013072 <_printf_common+0xda>
10013030:	2306      	movs	r3, #6
10013032:	6820      	ldr	r0, [r4, #0]
10013034:	68e1      	ldr	r1, [r4, #12]
10013036:	683a      	ldr	r2, [r7, #0]
10013038:	4003      	ands	r3, r0
1001303a:	2500      	movs	r5, #0
1001303c:	2b04      	cmp	r3, #4
1001303e:	d103      	bne.n	10013048 <_printf_common+0xb0>
10013040:	1a8d      	subs	r5, r1, r2
10013042:	43eb      	mvns	r3, r5
10013044:	17db      	asrs	r3, r3, #31
10013046:	401d      	ands	r5, r3
10013048:	68a3      	ldr	r3, [r4, #8]
1001304a:	6922      	ldr	r2, [r4, #16]
1001304c:	4293      	cmp	r3, r2
1001304e:	dd01      	ble.n	10013054 <_printf_common+0xbc>
10013050:	1a9b      	subs	r3, r3, r2
10013052:	18ed      	adds	r5, r5, r3
10013054:	2700      	movs	r7, #0
10013056:	42bd      	cmp	r5, r7
10013058:	d00a      	beq.n	10013070 <_printf_common+0xd8>
1001305a:	0022      	movs	r2, r4
1001305c:	2301      	movs	r3, #1
1001305e:	321a      	adds	r2, #26
10013060:	9901      	ldr	r1, [sp, #4]
10013062:	9800      	ldr	r0, [sp, #0]
10013064:	9e08      	ldr	r6, [sp, #32]
10013066:	47b0      	blx	r6
10013068:	1c43      	adds	r3, r0, #1
1001306a:	d0de      	beq.n	1001302a <_printf_common+0x92>
1001306c:	3701      	adds	r7, #1
1001306e:	e7f2      	b.n	10013056 <_printf_common+0xbe>
10013070:	2000      	movs	r0, #0
10013072:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10013074 <_printf_i>:
10013074:	b5f0      	push	{r4, r5, r6, r7, lr}
10013076:	b08b      	sub	sp, #44	; 0x2c
10013078:	9206      	str	r2, [sp, #24]
1001307a:	000a      	movs	r2, r1
1001307c:	3243      	adds	r2, #67	; 0x43
1001307e:	9307      	str	r3, [sp, #28]
10013080:	9005      	str	r0, [sp, #20]
10013082:	9204      	str	r2, [sp, #16]
10013084:	7e0a      	ldrb	r2, [r1, #24]
10013086:	000c      	movs	r4, r1
10013088:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001308a:	2a6e      	cmp	r2, #110	; 0x6e
1001308c:	d100      	bne.n	10013090 <_printf_i+0x1c>
1001308e:	e0ab      	b.n	100131e8 <_printf_i+0x174>
10013090:	d811      	bhi.n	100130b6 <_printf_i+0x42>
10013092:	2a63      	cmp	r2, #99	; 0x63
10013094:	d022      	beq.n	100130dc <_printf_i+0x68>
10013096:	d809      	bhi.n	100130ac <_printf_i+0x38>
10013098:	2a00      	cmp	r2, #0
1001309a:	d100      	bne.n	1001309e <_printf_i+0x2a>
1001309c:	e0b5      	b.n	1001320a <_printf_i+0x196>
1001309e:	2a58      	cmp	r2, #88	; 0x58
100130a0:	d000      	beq.n	100130a4 <_printf_i+0x30>
100130a2:	e0c5      	b.n	10013230 <_printf_i+0x1bc>
100130a4:	3145      	adds	r1, #69	; 0x45
100130a6:	700a      	strb	r2, [r1, #0]
100130a8:	4a81      	ldr	r2, [pc, #516]	; (100132b0 <_printf_i+0x23c>)
100130aa:	e04f      	b.n	1001314c <_printf_i+0xd8>
100130ac:	2a64      	cmp	r2, #100	; 0x64
100130ae:	d01d      	beq.n	100130ec <_printf_i+0x78>
100130b0:	2a69      	cmp	r2, #105	; 0x69
100130b2:	d01b      	beq.n	100130ec <_printf_i+0x78>
100130b4:	e0bc      	b.n	10013230 <_printf_i+0x1bc>
100130b6:	2a73      	cmp	r2, #115	; 0x73
100130b8:	d100      	bne.n	100130bc <_printf_i+0x48>
100130ba:	e0aa      	b.n	10013212 <_printf_i+0x19e>
100130bc:	d809      	bhi.n	100130d2 <_printf_i+0x5e>
100130be:	2a6f      	cmp	r2, #111	; 0x6f
100130c0:	d029      	beq.n	10013116 <_printf_i+0xa2>
100130c2:	2a70      	cmp	r2, #112	; 0x70
100130c4:	d000      	beq.n	100130c8 <_printf_i+0x54>
100130c6:	e0b3      	b.n	10013230 <_printf_i+0x1bc>
100130c8:	2220      	movs	r2, #32
100130ca:	6809      	ldr	r1, [r1, #0]
100130cc:	430a      	orrs	r2, r1
100130ce:	6022      	str	r2, [r4, #0]
100130d0:	e037      	b.n	10013142 <_printf_i+0xce>
100130d2:	2a75      	cmp	r2, #117	; 0x75
100130d4:	d01f      	beq.n	10013116 <_printf_i+0xa2>
100130d6:	2a78      	cmp	r2, #120	; 0x78
100130d8:	d033      	beq.n	10013142 <_printf_i+0xce>
100130da:	e0a9      	b.n	10013230 <_printf_i+0x1bc>
100130dc:	000e      	movs	r6, r1
100130de:	681a      	ldr	r2, [r3, #0]
100130e0:	3642      	adds	r6, #66	; 0x42
100130e2:	1d11      	adds	r1, r2, #4
100130e4:	6019      	str	r1, [r3, #0]
100130e6:	6813      	ldr	r3, [r2, #0]
100130e8:	7033      	strb	r3, [r6, #0]
100130ea:	e0a4      	b.n	10013236 <_printf_i+0x1c2>
100130ec:	6821      	ldr	r1, [r4, #0]
100130ee:	681a      	ldr	r2, [r3, #0]
100130f0:	0608      	lsls	r0, r1, #24
100130f2:	d406      	bmi.n	10013102 <_printf_i+0x8e>
100130f4:	0649      	lsls	r1, r1, #25
100130f6:	d504      	bpl.n	10013102 <_printf_i+0x8e>
100130f8:	1d11      	adds	r1, r2, #4
100130fa:	6019      	str	r1, [r3, #0]
100130fc:	2300      	movs	r3, #0
100130fe:	5ed5      	ldrsh	r5, [r2, r3]
10013100:	e002      	b.n	10013108 <_printf_i+0x94>
10013102:	1d11      	adds	r1, r2, #4
10013104:	6019      	str	r1, [r3, #0]
10013106:	6815      	ldr	r5, [r2, #0]
10013108:	2d00      	cmp	r5, #0
1001310a:	da3b      	bge.n	10013184 <_printf_i+0x110>
1001310c:	232d      	movs	r3, #45	; 0x2d
1001310e:	9a04      	ldr	r2, [sp, #16]
10013110:	426d      	negs	r5, r5
10013112:	7013      	strb	r3, [r2, #0]
10013114:	e036      	b.n	10013184 <_printf_i+0x110>
10013116:	6821      	ldr	r1, [r4, #0]
10013118:	681a      	ldr	r2, [r3, #0]
1001311a:	0608      	lsls	r0, r1, #24
1001311c:	d406      	bmi.n	1001312c <_printf_i+0xb8>
1001311e:	0649      	lsls	r1, r1, #25
10013120:	d504      	bpl.n	1001312c <_printf_i+0xb8>
10013122:	6815      	ldr	r5, [r2, #0]
10013124:	1d11      	adds	r1, r2, #4
10013126:	6019      	str	r1, [r3, #0]
10013128:	b2ad      	uxth	r5, r5
1001312a:	e002      	b.n	10013132 <_printf_i+0xbe>
1001312c:	1d11      	adds	r1, r2, #4
1001312e:	6019      	str	r1, [r3, #0]
10013130:	6815      	ldr	r5, [r2, #0]
10013132:	4b5f      	ldr	r3, [pc, #380]	; (100132b0 <_printf_i+0x23c>)
10013134:	7e22      	ldrb	r2, [r4, #24]
10013136:	9303      	str	r3, [sp, #12]
10013138:	2708      	movs	r7, #8
1001313a:	2a6f      	cmp	r2, #111	; 0x6f
1001313c:	d01d      	beq.n	1001317a <_printf_i+0x106>
1001313e:	270a      	movs	r7, #10
10013140:	e01b      	b.n	1001317a <_printf_i+0x106>
10013142:	0022      	movs	r2, r4
10013144:	2178      	movs	r1, #120	; 0x78
10013146:	3245      	adds	r2, #69	; 0x45
10013148:	7011      	strb	r1, [r2, #0]
1001314a:	4a5a      	ldr	r2, [pc, #360]	; (100132b4 <_printf_i+0x240>)
1001314c:	6819      	ldr	r1, [r3, #0]
1001314e:	9203      	str	r2, [sp, #12]
10013150:	1d08      	adds	r0, r1, #4
10013152:	6822      	ldr	r2, [r4, #0]
10013154:	6018      	str	r0, [r3, #0]
10013156:	680d      	ldr	r5, [r1, #0]
10013158:	0610      	lsls	r0, r2, #24
1001315a:	d402      	bmi.n	10013162 <_printf_i+0xee>
1001315c:	0650      	lsls	r0, r2, #25
1001315e:	d500      	bpl.n	10013162 <_printf_i+0xee>
10013160:	b2ad      	uxth	r5, r5
10013162:	07d3      	lsls	r3, r2, #31
10013164:	d502      	bpl.n	1001316c <_printf_i+0xf8>
10013166:	2320      	movs	r3, #32
10013168:	431a      	orrs	r2, r3
1001316a:	6022      	str	r2, [r4, #0]
1001316c:	2710      	movs	r7, #16
1001316e:	2d00      	cmp	r5, #0
10013170:	d103      	bne.n	1001317a <_printf_i+0x106>
10013172:	2320      	movs	r3, #32
10013174:	6822      	ldr	r2, [r4, #0]
10013176:	439a      	bics	r2, r3
10013178:	6022      	str	r2, [r4, #0]
1001317a:	0023      	movs	r3, r4
1001317c:	2200      	movs	r2, #0
1001317e:	3343      	adds	r3, #67	; 0x43
10013180:	701a      	strb	r2, [r3, #0]
10013182:	e002      	b.n	1001318a <_printf_i+0x116>
10013184:	270a      	movs	r7, #10
10013186:	4b4a      	ldr	r3, [pc, #296]	; (100132b0 <_printf_i+0x23c>)
10013188:	9303      	str	r3, [sp, #12]
1001318a:	6863      	ldr	r3, [r4, #4]
1001318c:	60a3      	str	r3, [r4, #8]
1001318e:	2b00      	cmp	r3, #0
10013190:	db09      	blt.n	100131a6 <_printf_i+0x132>
10013192:	2204      	movs	r2, #4
10013194:	6821      	ldr	r1, [r4, #0]
10013196:	4391      	bics	r1, r2
10013198:	6021      	str	r1, [r4, #0]
1001319a:	2d00      	cmp	r5, #0
1001319c:	d105      	bne.n	100131aa <_printf_i+0x136>
1001319e:	9e04      	ldr	r6, [sp, #16]
100131a0:	2b00      	cmp	r3, #0
100131a2:	d011      	beq.n	100131c8 <_printf_i+0x154>
100131a4:	e07b      	b.n	1001329e <_printf_i+0x22a>
100131a6:	2d00      	cmp	r5, #0
100131a8:	d079      	beq.n	1001329e <_printf_i+0x22a>
100131aa:	9e04      	ldr	r6, [sp, #16]
100131ac:	0028      	movs	r0, r5
100131ae:	0039      	movs	r1, r7
100131b0:	f7fb fe88 	bl	1000eec4 <__aeabi_uidivmod>
100131b4:	9b03      	ldr	r3, [sp, #12]
100131b6:	3e01      	subs	r6, #1
100131b8:	5c5b      	ldrb	r3, [r3, r1]
100131ba:	0028      	movs	r0, r5
100131bc:	7033      	strb	r3, [r6, #0]
100131be:	0039      	movs	r1, r7
100131c0:	f7fb fdfa 	bl	1000edb8 <__aeabi_uidiv>
100131c4:	1e05      	subs	r5, r0, #0
100131c6:	d1f1      	bne.n	100131ac <_printf_i+0x138>
100131c8:	2f08      	cmp	r7, #8
100131ca:	d109      	bne.n	100131e0 <_printf_i+0x16c>
100131cc:	6823      	ldr	r3, [r4, #0]
100131ce:	07db      	lsls	r3, r3, #31
100131d0:	d506      	bpl.n	100131e0 <_printf_i+0x16c>
100131d2:	6863      	ldr	r3, [r4, #4]
100131d4:	6922      	ldr	r2, [r4, #16]
100131d6:	4293      	cmp	r3, r2
100131d8:	dc02      	bgt.n	100131e0 <_printf_i+0x16c>
100131da:	2330      	movs	r3, #48	; 0x30
100131dc:	3e01      	subs	r6, #1
100131de:	7033      	strb	r3, [r6, #0]
100131e0:	9b04      	ldr	r3, [sp, #16]
100131e2:	1b9b      	subs	r3, r3, r6
100131e4:	6123      	str	r3, [r4, #16]
100131e6:	e02b      	b.n	10013240 <_printf_i+0x1cc>
100131e8:	6809      	ldr	r1, [r1, #0]
100131ea:	681a      	ldr	r2, [r3, #0]
100131ec:	0608      	lsls	r0, r1, #24
100131ee:	d407      	bmi.n	10013200 <_printf_i+0x18c>
100131f0:	0649      	lsls	r1, r1, #25
100131f2:	d505      	bpl.n	10013200 <_printf_i+0x18c>
100131f4:	1d11      	adds	r1, r2, #4
100131f6:	6019      	str	r1, [r3, #0]
100131f8:	6813      	ldr	r3, [r2, #0]
100131fa:	8aa2      	ldrh	r2, [r4, #20]
100131fc:	801a      	strh	r2, [r3, #0]
100131fe:	e004      	b.n	1001320a <_printf_i+0x196>
10013200:	1d11      	adds	r1, r2, #4
10013202:	6019      	str	r1, [r3, #0]
10013204:	6813      	ldr	r3, [r2, #0]
10013206:	6962      	ldr	r2, [r4, #20]
10013208:	601a      	str	r2, [r3, #0]
1001320a:	2300      	movs	r3, #0
1001320c:	9e04      	ldr	r6, [sp, #16]
1001320e:	6123      	str	r3, [r4, #16]
10013210:	e016      	b.n	10013240 <_printf_i+0x1cc>
10013212:	681a      	ldr	r2, [r3, #0]
10013214:	1d11      	adds	r1, r2, #4
10013216:	6019      	str	r1, [r3, #0]
10013218:	6816      	ldr	r6, [r2, #0]
1001321a:	2100      	movs	r1, #0
1001321c:	6862      	ldr	r2, [r4, #4]
1001321e:	0030      	movs	r0, r6
10013220:	f000 f956 	bl	100134d0 <memchr>
10013224:	2800      	cmp	r0, #0
10013226:	d001      	beq.n	1001322c <_printf_i+0x1b8>
10013228:	1b80      	subs	r0, r0, r6
1001322a:	6060      	str	r0, [r4, #4]
1001322c:	6863      	ldr	r3, [r4, #4]
1001322e:	e003      	b.n	10013238 <_printf_i+0x1c4>
10013230:	0026      	movs	r6, r4
10013232:	3642      	adds	r6, #66	; 0x42
10013234:	7032      	strb	r2, [r6, #0]
10013236:	2301      	movs	r3, #1
10013238:	6123      	str	r3, [r4, #16]
1001323a:	2300      	movs	r3, #0
1001323c:	9a04      	ldr	r2, [sp, #16]
1001323e:	7013      	strb	r3, [r2, #0]
10013240:	9b07      	ldr	r3, [sp, #28]
10013242:	aa09      	add	r2, sp, #36	; 0x24
10013244:	9300      	str	r3, [sp, #0]
10013246:	0021      	movs	r1, r4
10013248:	9b06      	ldr	r3, [sp, #24]
1001324a:	9805      	ldr	r0, [sp, #20]
1001324c:	f7ff fea4 	bl	10012f98 <_printf_common>
10013250:	1c43      	adds	r3, r0, #1
10013252:	d102      	bne.n	1001325a <_printf_i+0x1e6>
10013254:	2001      	movs	r0, #1
10013256:	4240      	negs	r0, r0
10013258:	e027      	b.n	100132aa <_printf_i+0x236>
1001325a:	6923      	ldr	r3, [r4, #16]
1001325c:	0032      	movs	r2, r6
1001325e:	9906      	ldr	r1, [sp, #24]
10013260:	9805      	ldr	r0, [sp, #20]
10013262:	9d07      	ldr	r5, [sp, #28]
10013264:	47a8      	blx	r5
10013266:	1c43      	adds	r3, r0, #1
10013268:	d0f4      	beq.n	10013254 <_printf_i+0x1e0>
1001326a:	6823      	ldr	r3, [r4, #0]
1001326c:	2500      	movs	r5, #0
1001326e:	079b      	lsls	r3, r3, #30
10013270:	d40f      	bmi.n	10013292 <_printf_i+0x21e>
10013272:	9b09      	ldr	r3, [sp, #36]	; 0x24
10013274:	68e0      	ldr	r0, [r4, #12]
10013276:	4298      	cmp	r0, r3
10013278:	da17      	bge.n	100132aa <_printf_i+0x236>
1001327a:	0018      	movs	r0, r3
1001327c:	e015      	b.n	100132aa <_printf_i+0x236>
1001327e:	0022      	movs	r2, r4
10013280:	2301      	movs	r3, #1
10013282:	3219      	adds	r2, #25
10013284:	9906      	ldr	r1, [sp, #24]
10013286:	9805      	ldr	r0, [sp, #20]
10013288:	9e07      	ldr	r6, [sp, #28]
1001328a:	47b0      	blx	r6
1001328c:	1c43      	adds	r3, r0, #1
1001328e:	d0e1      	beq.n	10013254 <_printf_i+0x1e0>
10013290:	3501      	adds	r5, #1
10013292:	68e3      	ldr	r3, [r4, #12]
10013294:	9a09      	ldr	r2, [sp, #36]	; 0x24
10013296:	1a9b      	subs	r3, r3, r2
10013298:	429d      	cmp	r5, r3
1001329a:	dbf0      	blt.n	1001327e <_printf_i+0x20a>
1001329c:	e7e9      	b.n	10013272 <_printf_i+0x1fe>
1001329e:	0026      	movs	r6, r4
100132a0:	9b03      	ldr	r3, [sp, #12]
100132a2:	3642      	adds	r6, #66	; 0x42
100132a4:	781b      	ldrb	r3, [r3, #0]
100132a6:	7033      	strb	r3, [r6, #0]
100132a8:	e78e      	b.n	100131c8 <_printf_i+0x154>
100132aa:	b00b      	add	sp, #44	; 0x2c
100132ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100132ae:	46c0      	nop			; (mov r8, r8)
100132b0:	100152bd 	.word	0x100152bd
100132b4:	100152ce 	.word	0x100152ce

100132b8 <_putc_r>:
100132b8:	b570      	push	{r4, r5, r6, lr}
100132ba:	0006      	movs	r6, r0
100132bc:	000d      	movs	r5, r1
100132be:	0014      	movs	r4, r2
100132c0:	2800      	cmp	r0, #0
100132c2:	d004      	beq.n	100132ce <_putc_r+0x16>
100132c4:	6983      	ldr	r3, [r0, #24]
100132c6:	2b00      	cmp	r3, #0
100132c8:	d101      	bne.n	100132ce <_putc_r+0x16>
100132ca:	f7fe fc49 	bl	10011b60 <__sinit>
100132ce:	4b12      	ldr	r3, [pc, #72]	; (10013318 <_putc_r+0x60>)
100132d0:	429c      	cmp	r4, r3
100132d2:	d101      	bne.n	100132d8 <_putc_r+0x20>
100132d4:	6874      	ldr	r4, [r6, #4]
100132d6:	e008      	b.n	100132ea <_putc_r+0x32>
100132d8:	4b10      	ldr	r3, [pc, #64]	; (1001331c <_putc_r+0x64>)
100132da:	429c      	cmp	r4, r3
100132dc:	d101      	bne.n	100132e2 <_putc_r+0x2a>
100132de:	68b4      	ldr	r4, [r6, #8]
100132e0:	e003      	b.n	100132ea <_putc_r+0x32>
100132e2:	4b0f      	ldr	r3, [pc, #60]	; (10013320 <_putc_r+0x68>)
100132e4:	429c      	cmp	r4, r3
100132e6:	d100      	bne.n	100132ea <_putc_r+0x32>
100132e8:	68f4      	ldr	r4, [r6, #12]
100132ea:	68a3      	ldr	r3, [r4, #8]
100132ec:	3b01      	subs	r3, #1
100132ee:	60a3      	str	r3, [r4, #8]
100132f0:	2b00      	cmp	r3, #0
100132f2:	da05      	bge.n	10013300 <_putc_r+0x48>
100132f4:	69a2      	ldr	r2, [r4, #24]
100132f6:	4293      	cmp	r3, r2
100132f8:	db08      	blt.n	1001330c <_putc_r+0x54>
100132fa:	b2eb      	uxtb	r3, r5
100132fc:	2b0a      	cmp	r3, #10
100132fe:	d005      	beq.n	1001330c <_putc_r+0x54>
10013300:	6823      	ldr	r3, [r4, #0]
10013302:	b2e8      	uxtb	r0, r5
10013304:	1c5a      	adds	r2, r3, #1
10013306:	6022      	str	r2, [r4, #0]
10013308:	701d      	strb	r5, [r3, #0]
1001330a:	e004      	b.n	10013316 <_putc_r+0x5e>
1001330c:	0022      	movs	r2, r4
1001330e:	0029      	movs	r1, r5
10013310:	0030      	movs	r0, r6
10013312:	f7fe fa63 	bl	100117dc <__swbuf_r>
10013316:	bd70      	pop	{r4, r5, r6, pc}
10013318:	10015148 	.word	0x10015148
1001331c:	10015168 	.word	0x10015168
10013320:	10015188 	.word	0x10015188

10013324 <_sbrk_r>:
10013324:	2300      	movs	r3, #0
10013326:	b570      	push	{r4, r5, r6, lr}
10013328:	4c06      	ldr	r4, [pc, #24]	; (10013344 <_sbrk_r+0x20>)
1001332a:	0005      	movs	r5, r0
1001332c:	0008      	movs	r0, r1
1001332e:	6023      	str	r3, [r4, #0]
10013330:	f7f6 fd76 	bl	10009e20 <_sbrk>
10013334:	1c43      	adds	r3, r0, #1
10013336:	d103      	bne.n	10013340 <_sbrk_r+0x1c>
10013338:	6823      	ldr	r3, [r4, #0]
1001333a:	2b00      	cmp	r3, #0
1001333c:	d000      	beq.n	10013340 <_sbrk_r+0x1c>
1001333e:	602b      	str	r3, [r5, #0]
10013340:	bd70      	pop	{r4, r5, r6, pc}
10013342:	46c0      	nop			; (mov r8, r8)
10013344:	100180c4 	.word	0x100180c4

10013348 <__sread>:
10013348:	b570      	push	{r4, r5, r6, lr}
1001334a:	000c      	movs	r4, r1
1001334c:	250e      	movs	r5, #14
1001334e:	5f49      	ldrsh	r1, [r1, r5]
10013350:	f000 f8ca 	bl	100134e8 <_read_r>
10013354:	2800      	cmp	r0, #0
10013356:	db03      	blt.n	10013360 <__sread+0x18>
10013358:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001335a:	181b      	adds	r3, r3, r0
1001335c:	6563      	str	r3, [r4, #84]	; 0x54
1001335e:	e003      	b.n	10013368 <__sread+0x20>
10013360:	89a2      	ldrh	r2, [r4, #12]
10013362:	4b02      	ldr	r3, [pc, #8]	; (1001336c <__sread+0x24>)
10013364:	4013      	ands	r3, r2
10013366:	81a3      	strh	r3, [r4, #12]
10013368:	bd70      	pop	{r4, r5, r6, pc}
1001336a:	46c0      	nop			; (mov r8, r8)
1001336c:	ffffefff 	.word	0xffffefff

10013370 <__swrite>:
10013370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013372:	001f      	movs	r7, r3
10013374:	898b      	ldrh	r3, [r1, #12]
10013376:	0005      	movs	r5, r0
10013378:	000c      	movs	r4, r1
1001337a:	0016      	movs	r6, r2
1001337c:	05db      	lsls	r3, r3, #23
1001337e:	d505      	bpl.n	1001338c <__swrite+0x1c>
10013380:	230e      	movs	r3, #14
10013382:	5ec9      	ldrsh	r1, [r1, r3]
10013384:	2200      	movs	r2, #0
10013386:	2302      	movs	r3, #2
10013388:	f000 f88e 	bl	100134a8 <_lseek_r>
1001338c:	89a2      	ldrh	r2, [r4, #12]
1001338e:	4b05      	ldr	r3, [pc, #20]	; (100133a4 <__swrite+0x34>)
10013390:	0028      	movs	r0, r5
10013392:	4013      	ands	r3, r2
10013394:	81a3      	strh	r3, [r4, #12]
10013396:	0032      	movs	r2, r6
10013398:	230e      	movs	r3, #14
1001339a:	5ee1      	ldrsh	r1, [r4, r3]
1001339c:	003b      	movs	r3, r7
1001339e:	f000 f839 	bl	10013414 <_write_r>
100133a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100133a4:	ffffefff 	.word	0xffffefff

100133a8 <__sseek>:
100133a8:	b570      	push	{r4, r5, r6, lr}
100133aa:	000c      	movs	r4, r1
100133ac:	250e      	movs	r5, #14
100133ae:	5f49      	ldrsh	r1, [r1, r5]
100133b0:	f000 f87a 	bl	100134a8 <_lseek_r>
100133b4:	89a3      	ldrh	r3, [r4, #12]
100133b6:	1c42      	adds	r2, r0, #1
100133b8:	d103      	bne.n	100133c2 <__sseek+0x1a>
100133ba:	4a05      	ldr	r2, [pc, #20]	; (100133d0 <__sseek+0x28>)
100133bc:	4013      	ands	r3, r2
100133be:	81a3      	strh	r3, [r4, #12]
100133c0:	e004      	b.n	100133cc <__sseek+0x24>
100133c2:	2280      	movs	r2, #128	; 0x80
100133c4:	0152      	lsls	r2, r2, #5
100133c6:	4313      	orrs	r3, r2
100133c8:	81a3      	strh	r3, [r4, #12]
100133ca:	6560      	str	r0, [r4, #84]	; 0x54
100133cc:	bd70      	pop	{r4, r5, r6, pc}
100133ce:	46c0      	nop			; (mov r8, r8)
100133d0:	ffffefff 	.word	0xffffefff

100133d4 <__sclose>:
100133d4:	b510      	push	{r4, lr}
100133d6:	230e      	movs	r3, #14
100133d8:	5ec9      	ldrsh	r1, [r1, r3]
100133da:	f000 f82f 	bl	1001343c <_close_r>
100133de:	bd10      	pop	{r4, pc}

100133e0 <strlen>:
100133e0:	2300      	movs	r3, #0
100133e2:	5cc2      	ldrb	r2, [r0, r3]
100133e4:	3301      	adds	r3, #1
100133e6:	2a00      	cmp	r2, #0
100133e8:	d1fb      	bne.n	100133e2 <strlen+0x2>
100133ea:	1e58      	subs	r0, r3, #1
100133ec:	4770      	bx	lr

100133ee <strncmp>:
100133ee:	2300      	movs	r3, #0
100133f0:	b530      	push	{r4, r5, lr}
100133f2:	429a      	cmp	r2, r3
100133f4:	d00b      	beq.n	1001340e <strncmp+0x20>
100133f6:	3a01      	subs	r2, #1
100133f8:	5cc4      	ldrb	r4, [r0, r3]
100133fa:	5ccd      	ldrb	r5, [r1, r3]
100133fc:	42ac      	cmp	r4, r5
100133fe:	d105      	bne.n	1001340c <strncmp+0x1e>
10013400:	429a      	cmp	r2, r3
10013402:	d002      	beq.n	1001340a <strncmp+0x1c>
10013404:	3301      	adds	r3, #1
10013406:	2c00      	cmp	r4, #0
10013408:	d1f6      	bne.n	100133f8 <strncmp+0xa>
1001340a:	0025      	movs	r5, r4
1001340c:	1b63      	subs	r3, r4, r5
1001340e:	0018      	movs	r0, r3
10013410:	bd30      	pop	{r4, r5, pc}
	...

10013414 <_write_r>:
10013414:	b570      	push	{r4, r5, r6, lr}
10013416:	0005      	movs	r5, r0
10013418:	0008      	movs	r0, r1
1001341a:	0011      	movs	r1, r2
1001341c:	2200      	movs	r2, #0
1001341e:	4c06      	ldr	r4, [pc, #24]	; (10013438 <_write_r+0x24>)
10013420:	6022      	str	r2, [r4, #0]
10013422:	001a      	movs	r2, r3
10013424:	f7f6 fcd4 	bl	10009dd0 <_write>
10013428:	1c43      	adds	r3, r0, #1
1001342a:	d103      	bne.n	10013434 <_write_r+0x20>
1001342c:	6823      	ldr	r3, [r4, #0]
1001342e:	2b00      	cmp	r3, #0
10013430:	d000      	beq.n	10013434 <_write_r+0x20>
10013432:	602b      	str	r3, [r5, #0]
10013434:	bd70      	pop	{r4, r5, r6, pc}
10013436:	46c0      	nop			; (mov r8, r8)
10013438:	100180c4 	.word	0x100180c4

1001343c <_close_r>:
1001343c:	2300      	movs	r3, #0
1001343e:	b570      	push	{r4, r5, r6, lr}
10013440:	4c06      	ldr	r4, [pc, #24]	; (1001345c <_close_r+0x20>)
10013442:	0005      	movs	r5, r0
10013444:	0008      	movs	r0, r1
10013446:	6023      	str	r3, [r4, #0]
10013448:	f7f6 fcfc 	bl	10009e44 <_close>
1001344c:	1c43      	adds	r3, r0, #1
1001344e:	d103      	bne.n	10013458 <_close_r+0x1c>
10013450:	6823      	ldr	r3, [r4, #0]
10013452:	2b00      	cmp	r3, #0
10013454:	d000      	beq.n	10013458 <_close_r+0x1c>
10013456:	602b      	str	r3, [r5, #0]
10013458:	bd70      	pop	{r4, r5, r6, pc}
1001345a:	46c0      	nop			; (mov r8, r8)
1001345c:	100180c4 	.word	0x100180c4

10013460 <_fstat_r>:
10013460:	2300      	movs	r3, #0
10013462:	b570      	push	{r4, r5, r6, lr}
10013464:	4c06      	ldr	r4, [pc, #24]	; (10013480 <_fstat_r+0x20>)
10013466:	0005      	movs	r5, r0
10013468:	0008      	movs	r0, r1
1001346a:	0011      	movs	r1, r2
1001346c:	6023      	str	r3, [r4, #0]
1001346e:	f7f6 fced 	bl	10009e4c <_fstat>
10013472:	1c43      	adds	r3, r0, #1
10013474:	d103      	bne.n	1001347e <_fstat_r+0x1e>
10013476:	6823      	ldr	r3, [r4, #0]
10013478:	2b00      	cmp	r3, #0
1001347a:	d000      	beq.n	1001347e <_fstat_r+0x1e>
1001347c:	602b      	str	r3, [r5, #0]
1001347e:	bd70      	pop	{r4, r5, r6, pc}
10013480:	100180c4 	.word	0x100180c4

10013484 <_isatty_r>:
10013484:	2300      	movs	r3, #0
10013486:	b570      	push	{r4, r5, r6, lr}
10013488:	4c06      	ldr	r4, [pc, #24]	; (100134a4 <_isatty_r+0x20>)
1001348a:	0005      	movs	r5, r0
1001348c:	0008      	movs	r0, r1
1001348e:	6023      	str	r3, [r4, #0]
10013490:	f7f6 fce2 	bl	10009e58 <_isatty>
10013494:	1c43      	adds	r3, r0, #1
10013496:	d103      	bne.n	100134a0 <_isatty_r+0x1c>
10013498:	6823      	ldr	r3, [r4, #0]
1001349a:	2b00      	cmp	r3, #0
1001349c:	d000      	beq.n	100134a0 <_isatty_r+0x1c>
1001349e:	602b      	str	r3, [r5, #0]
100134a0:	bd70      	pop	{r4, r5, r6, pc}
100134a2:	46c0      	nop			; (mov r8, r8)
100134a4:	100180c4 	.word	0x100180c4

100134a8 <_lseek_r>:
100134a8:	b570      	push	{r4, r5, r6, lr}
100134aa:	0005      	movs	r5, r0
100134ac:	0008      	movs	r0, r1
100134ae:	0011      	movs	r1, r2
100134b0:	2200      	movs	r2, #0
100134b2:	4c06      	ldr	r4, [pc, #24]	; (100134cc <_lseek_r+0x24>)
100134b4:	6022      	str	r2, [r4, #0]
100134b6:	001a      	movs	r2, r3
100134b8:	f7f6 fcd0 	bl	10009e5c <_lseek>
100134bc:	1c43      	adds	r3, r0, #1
100134be:	d103      	bne.n	100134c8 <_lseek_r+0x20>
100134c0:	6823      	ldr	r3, [r4, #0]
100134c2:	2b00      	cmp	r3, #0
100134c4:	d000      	beq.n	100134c8 <_lseek_r+0x20>
100134c6:	602b      	str	r3, [r5, #0]
100134c8:	bd70      	pop	{r4, r5, r6, pc}
100134ca:	46c0      	nop			; (mov r8, r8)
100134cc:	100180c4 	.word	0x100180c4

100134d0 <memchr>:
100134d0:	b2c9      	uxtb	r1, r1
100134d2:	1882      	adds	r2, r0, r2
100134d4:	4290      	cmp	r0, r2
100134d6:	d004      	beq.n	100134e2 <memchr+0x12>
100134d8:	7803      	ldrb	r3, [r0, #0]
100134da:	428b      	cmp	r3, r1
100134dc:	d002      	beq.n	100134e4 <memchr+0x14>
100134de:	3001      	adds	r0, #1
100134e0:	e7f8      	b.n	100134d4 <memchr+0x4>
100134e2:	2000      	movs	r0, #0
100134e4:	4770      	bx	lr
	...

100134e8 <_read_r>:
100134e8:	b570      	push	{r4, r5, r6, lr}
100134ea:	0005      	movs	r5, r0
100134ec:	0008      	movs	r0, r1
100134ee:	0011      	movs	r1, r2
100134f0:	2200      	movs	r2, #0
100134f2:	4c06      	ldr	r4, [pc, #24]	; (1001350c <_read_r+0x24>)
100134f4:	6022      	str	r2, [r4, #0]
100134f6:	001a      	movs	r2, r3
100134f8:	f7f6 fc4a 	bl	10009d90 <_read>
100134fc:	1c43      	adds	r3, r0, #1
100134fe:	d103      	bne.n	10013508 <_read_r+0x20>
10013500:	6823      	ldr	r3, [r4, #0]
10013502:	2b00      	cmp	r3, #0
10013504:	d000      	beq.n	10013508 <_read_r+0x20>
10013506:	602b      	str	r3, [r5, #0]
10013508:	bd70      	pop	{r4, r5, r6, pc}
1001350a:	46c0      	nop			; (mov r8, r8)
1001350c:	100180c4 	.word	0x100180c4

10013510 <__aeabi_idiv>:
10013510:	4603      	mov	r3, r0
10013512:	430b      	orrs	r3, r1
10013514:	d47f      	bmi.n	10013616 <__aeabi_idiv+0x106>
10013516:	2200      	movs	r2, #0
10013518:	0843      	lsrs	r3, r0, #1
1001351a:	428b      	cmp	r3, r1
1001351c:	d374      	bcc.n	10013608 <__aeabi_idiv+0xf8>
1001351e:	0903      	lsrs	r3, r0, #4
10013520:	428b      	cmp	r3, r1
10013522:	d35f      	bcc.n	100135e4 <__aeabi_idiv+0xd4>
10013524:	0a03      	lsrs	r3, r0, #8
10013526:	428b      	cmp	r3, r1
10013528:	d344      	bcc.n	100135b4 <__aeabi_idiv+0xa4>
1001352a:	0b03      	lsrs	r3, r0, #12
1001352c:	428b      	cmp	r3, r1
1001352e:	d328      	bcc.n	10013582 <__aeabi_idiv+0x72>
10013530:	0c03      	lsrs	r3, r0, #16
10013532:	428b      	cmp	r3, r1
10013534:	d30d      	bcc.n	10013552 <__aeabi_idiv+0x42>
10013536:	22ff      	movs	r2, #255	; 0xff
10013538:	0209      	lsls	r1, r1, #8
1001353a:	ba12      	rev	r2, r2
1001353c:	0c03      	lsrs	r3, r0, #16
1001353e:	428b      	cmp	r3, r1
10013540:	d302      	bcc.n	10013548 <__aeabi_idiv+0x38>
10013542:	1212      	asrs	r2, r2, #8
10013544:	0209      	lsls	r1, r1, #8
10013546:	d065      	beq.n	10013614 <__aeabi_idiv+0x104>
10013548:	0b03      	lsrs	r3, r0, #12
1001354a:	428b      	cmp	r3, r1
1001354c:	d319      	bcc.n	10013582 <__aeabi_idiv+0x72>
1001354e:	e000      	b.n	10013552 <__aeabi_idiv+0x42>
10013550:	0a09      	lsrs	r1, r1, #8
10013552:	0bc3      	lsrs	r3, r0, #15
10013554:	428b      	cmp	r3, r1
10013556:	d301      	bcc.n	1001355c <__aeabi_idiv+0x4c>
10013558:	03cb      	lsls	r3, r1, #15
1001355a:	1ac0      	subs	r0, r0, r3
1001355c:	4152      	adcs	r2, r2
1001355e:	0b83      	lsrs	r3, r0, #14
10013560:	428b      	cmp	r3, r1
10013562:	d301      	bcc.n	10013568 <__aeabi_idiv+0x58>
10013564:	038b      	lsls	r3, r1, #14
10013566:	1ac0      	subs	r0, r0, r3
10013568:	4152      	adcs	r2, r2
1001356a:	0b43      	lsrs	r3, r0, #13
1001356c:	428b      	cmp	r3, r1
1001356e:	d301      	bcc.n	10013574 <__aeabi_idiv+0x64>
10013570:	034b      	lsls	r3, r1, #13
10013572:	1ac0      	subs	r0, r0, r3
10013574:	4152      	adcs	r2, r2
10013576:	0b03      	lsrs	r3, r0, #12
10013578:	428b      	cmp	r3, r1
1001357a:	d301      	bcc.n	10013580 <__aeabi_idiv+0x70>
1001357c:	030b      	lsls	r3, r1, #12
1001357e:	1ac0      	subs	r0, r0, r3
10013580:	4152      	adcs	r2, r2
10013582:	0ac3      	lsrs	r3, r0, #11
10013584:	428b      	cmp	r3, r1
10013586:	d301      	bcc.n	1001358c <__aeabi_idiv+0x7c>
10013588:	02cb      	lsls	r3, r1, #11
1001358a:	1ac0      	subs	r0, r0, r3
1001358c:	4152      	adcs	r2, r2
1001358e:	0a83      	lsrs	r3, r0, #10
10013590:	428b      	cmp	r3, r1
10013592:	d301      	bcc.n	10013598 <__aeabi_idiv+0x88>
10013594:	028b      	lsls	r3, r1, #10
10013596:	1ac0      	subs	r0, r0, r3
10013598:	4152      	adcs	r2, r2
1001359a:	0a43      	lsrs	r3, r0, #9
1001359c:	428b      	cmp	r3, r1
1001359e:	d301      	bcc.n	100135a4 <__aeabi_idiv+0x94>
100135a0:	024b      	lsls	r3, r1, #9
100135a2:	1ac0      	subs	r0, r0, r3
100135a4:	4152      	adcs	r2, r2
100135a6:	0a03      	lsrs	r3, r0, #8
100135a8:	428b      	cmp	r3, r1
100135aa:	d301      	bcc.n	100135b0 <__aeabi_idiv+0xa0>
100135ac:	020b      	lsls	r3, r1, #8
100135ae:	1ac0      	subs	r0, r0, r3
100135b0:	4152      	adcs	r2, r2
100135b2:	d2cd      	bcs.n	10013550 <__aeabi_idiv+0x40>
100135b4:	09c3      	lsrs	r3, r0, #7
100135b6:	428b      	cmp	r3, r1
100135b8:	d301      	bcc.n	100135be <__aeabi_idiv+0xae>
100135ba:	01cb      	lsls	r3, r1, #7
100135bc:	1ac0      	subs	r0, r0, r3
100135be:	4152      	adcs	r2, r2
100135c0:	0983      	lsrs	r3, r0, #6
100135c2:	428b      	cmp	r3, r1
100135c4:	d301      	bcc.n	100135ca <__aeabi_idiv+0xba>
100135c6:	018b      	lsls	r3, r1, #6
100135c8:	1ac0      	subs	r0, r0, r3
100135ca:	4152      	adcs	r2, r2
100135cc:	0943      	lsrs	r3, r0, #5
100135ce:	428b      	cmp	r3, r1
100135d0:	d301      	bcc.n	100135d6 <__aeabi_idiv+0xc6>
100135d2:	014b      	lsls	r3, r1, #5
100135d4:	1ac0      	subs	r0, r0, r3
100135d6:	4152      	adcs	r2, r2
100135d8:	0903      	lsrs	r3, r0, #4
100135da:	428b      	cmp	r3, r1
100135dc:	d301      	bcc.n	100135e2 <__aeabi_idiv+0xd2>
100135de:	010b      	lsls	r3, r1, #4
100135e0:	1ac0      	subs	r0, r0, r3
100135e2:	4152      	adcs	r2, r2
100135e4:	08c3      	lsrs	r3, r0, #3
100135e6:	428b      	cmp	r3, r1
100135e8:	d301      	bcc.n	100135ee <__aeabi_idiv+0xde>
100135ea:	00cb      	lsls	r3, r1, #3
100135ec:	1ac0      	subs	r0, r0, r3
100135ee:	4152      	adcs	r2, r2
100135f0:	0883      	lsrs	r3, r0, #2
100135f2:	428b      	cmp	r3, r1
100135f4:	d301      	bcc.n	100135fa <__aeabi_idiv+0xea>
100135f6:	008b      	lsls	r3, r1, #2
100135f8:	1ac0      	subs	r0, r0, r3
100135fa:	4152      	adcs	r2, r2
100135fc:	0843      	lsrs	r3, r0, #1
100135fe:	428b      	cmp	r3, r1
10013600:	d301      	bcc.n	10013606 <__aeabi_idiv+0xf6>
10013602:	004b      	lsls	r3, r1, #1
10013604:	1ac0      	subs	r0, r0, r3
10013606:	4152      	adcs	r2, r2
10013608:	1a41      	subs	r1, r0, r1
1001360a:	d200      	bcs.n	1001360e <__aeabi_idiv+0xfe>
1001360c:	4601      	mov	r1, r0
1001360e:	4152      	adcs	r2, r2
10013610:	4610      	mov	r0, r2
10013612:	4770      	bx	lr
10013614:	e05d      	b.n	100136d2 <__aeabi_idiv+0x1c2>
10013616:	0fca      	lsrs	r2, r1, #31
10013618:	d000      	beq.n	1001361c <__aeabi_idiv+0x10c>
1001361a:	4249      	negs	r1, r1
1001361c:	1003      	asrs	r3, r0, #32
1001361e:	d300      	bcc.n	10013622 <__aeabi_idiv+0x112>
10013620:	4240      	negs	r0, r0
10013622:	4053      	eors	r3, r2
10013624:	2200      	movs	r2, #0
10013626:	469c      	mov	ip, r3
10013628:	0903      	lsrs	r3, r0, #4
1001362a:	428b      	cmp	r3, r1
1001362c:	d32d      	bcc.n	1001368a <__aeabi_idiv+0x17a>
1001362e:	0a03      	lsrs	r3, r0, #8
10013630:	428b      	cmp	r3, r1
10013632:	d312      	bcc.n	1001365a <__aeabi_idiv+0x14a>
10013634:	22fc      	movs	r2, #252	; 0xfc
10013636:	0189      	lsls	r1, r1, #6
10013638:	ba12      	rev	r2, r2
1001363a:	0a03      	lsrs	r3, r0, #8
1001363c:	428b      	cmp	r3, r1
1001363e:	d30c      	bcc.n	1001365a <__aeabi_idiv+0x14a>
10013640:	0189      	lsls	r1, r1, #6
10013642:	1192      	asrs	r2, r2, #6
10013644:	428b      	cmp	r3, r1
10013646:	d308      	bcc.n	1001365a <__aeabi_idiv+0x14a>
10013648:	0189      	lsls	r1, r1, #6
1001364a:	1192      	asrs	r2, r2, #6
1001364c:	428b      	cmp	r3, r1
1001364e:	d304      	bcc.n	1001365a <__aeabi_idiv+0x14a>
10013650:	0189      	lsls	r1, r1, #6
10013652:	d03a      	beq.n	100136ca <__aeabi_idiv+0x1ba>
10013654:	1192      	asrs	r2, r2, #6
10013656:	e000      	b.n	1001365a <__aeabi_idiv+0x14a>
10013658:	0989      	lsrs	r1, r1, #6
1001365a:	09c3      	lsrs	r3, r0, #7
1001365c:	428b      	cmp	r3, r1
1001365e:	d301      	bcc.n	10013664 <__aeabi_idiv+0x154>
10013660:	01cb      	lsls	r3, r1, #7
10013662:	1ac0      	subs	r0, r0, r3
10013664:	4152      	adcs	r2, r2
10013666:	0983      	lsrs	r3, r0, #6
10013668:	428b      	cmp	r3, r1
1001366a:	d301      	bcc.n	10013670 <__aeabi_idiv+0x160>
1001366c:	018b      	lsls	r3, r1, #6
1001366e:	1ac0      	subs	r0, r0, r3
10013670:	4152      	adcs	r2, r2
10013672:	0943      	lsrs	r3, r0, #5
10013674:	428b      	cmp	r3, r1
10013676:	d301      	bcc.n	1001367c <__aeabi_idiv+0x16c>
10013678:	014b      	lsls	r3, r1, #5
1001367a:	1ac0      	subs	r0, r0, r3
1001367c:	4152      	adcs	r2, r2
1001367e:	0903      	lsrs	r3, r0, #4
10013680:	428b      	cmp	r3, r1
10013682:	d301      	bcc.n	10013688 <__aeabi_idiv+0x178>
10013684:	010b      	lsls	r3, r1, #4
10013686:	1ac0      	subs	r0, r0, r3
10013688:	4152      	adcs	r2, r2
1001368a:	08c3      	lsrs	r3, r0, #3
1001368c:	428b      	cmp	r3, r1
1001368e:	d301      	bcc.n	10013694 <__aeabi_idiv+0x184>
10013690:	00cb      	lsls	r3, r1, #3
10013692:	1ac0      	subs	r0, r0, r3
10013694:	4152      	adcs	r2, r2
10013696:	0883      	lsrs	r3, r0, #2
10013698:	428b      	cmp	r3, r1
1001369a:	d301      	bcc.n	100136a0 <__aeabi_idiv+0x190>
1001369c:	008b      	lsls	r3, r1, #2
1001369e:	1ac0      	subs	r0, r0, r3
100136a0:	4152      	adcs	r2, r2
100136a2:	d2d9      	bcs.n	10013658 <__aeabi_idiv+0x148>
100136a4:	0843      	lsrs	r3, r0, #1
100136a6:	428b      	cmp	r3, r1
100136a8:	d301      	bcc.n	100136ae <__aeabi_idiv+0x19e>
100136aa:	004b      	lsls	r3, r1, #1
100136ac:	1ac0      	subs	r0, r0, r3
100136ae:	4152      	adcs	r2, r2
100136b0:	1a41      	subs	r1, r0, r1
100136b2:	d200      	bcs.n	100136b6 <__aeabi_idiv+0x1a6>
100136b4:	4601      	mov	r1, r0
100136b6:	4663      	mov	r3, ip
100136b8:	4152      	adcs	r2, r2
100136ba:	105b      	asrs	r3, r3, #1
100136bc:	4610      	mov	r0, r2
100136be:	d301      	bcc.n	100136c4 <__aeabi_idiv+0x1b4>
100136c0:	4240      	negs	r0, r0
100136c2:	2b00      	cmp	r3, #0
100136c4:	d500      	bpl.n	100136c8 <__aeabi_idiv+0x1b8>
100136c6:	4249      	negs	r1, r1
100136c8:	4770      	bx	lr
100136ca:	4663      	mov	r3, ip
100136cc:	105b      	asrs	r3, r3, #1
100136ce:	d300      	bcc.n	100136d2 <__aeabi_idiv+0x1c2>
100136d0:	4240      	negs	r0, r0
100136d2:	b501      	push	{r0, lr}
100136d4:	2000      	movs	r0, #0
100136d6:	f7fb fbf9 	bl	1000eecc <__aeabi_idiv0>
100136da:	bd02      	pop	{r1, pc}

100136dc <__aeabi_idivmod>:
100136dc:	2900      	cmp	r1, #0
100136de:	d0f8      	beq.n	100136d2 <__aeabi_idiv+0x1c2>
100136e0:	e716      	b.n	10013510 <__aeabi_idiv>
100136e2:	4770      	bx	lr

100136e4 <__aeabi_lmul>:
100136e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100136e6:	464f      	mov	r7, r9
100136e8:	4646      	mov	r6, r8
100136ea:	b4c0      	push	{r6, r7}
100136ec:	0416      	lsls	r6, r2, #16
100136ee:	0c36      	lsrs	r6, r6, #16
100136f0:	4699      	mov	r9, r3
100136f2:	0033      	movs	r3, r6
100136f4:	0405      	lsls	r5, r0, #16
100136f6:	0c2c      	lsrs	r4, r5, #16
100136f8:	0c07      	lsrs	r7, r0, #16
100136fa:	0c15      	lsrs	r5, r2, #16
100136fc:	4363      	muls	r3, r4
100136fe:	437e      	muls	r6, r7
10013700:	436f      	muls	r7, r5
10013702:	4365      	muls	r5, r4
10013704:	0c1c      	lsrs	r4, r3, #16
10013706:	19ad      	adds	r5, r5, r6
10013708:	1964      	adds	r4, r4, r5
1001370a:	469c      	mov	ip, r3
1001370c:	42a6      	cmp	r6, r4
1001370e:	d903      	bls.n	10013718 <__aeabi_lmul+0x34>
10013710:	2380      	movs	r3, #128	; 0x80
10013712:	025b      	lsls	r3, r3, #9
10013714:	4698      	mov	r8, r3
10013716:	4447      	add	r7, r8
10013718:	4663      	mov	r3, ip
1001371a:	0c25      	lsrs	r5, r4, #16
1001371c:	19ef      	adds	r7, r5, r7
1001371e:	041d      	lsls	r5, r3, #16
10013720:	464b      	mov	r3, r9
10013722:	434a      	muls	r2, r1
10013724:	4343      	muls	r3, r0
10013726:	0c2d      	lsrs	r5, r5, #16
10013728:	0424      	lsls	r4, r4, #16
1001372a:	1964      	adds	r4, r4, r5
1001372c:	1899      	adds	r1, r3, r2
1001372e:	19c9      	adds	r1, r1, r7
10013730:	0020      	movs	r0, r4
10013732:	bc0c      	pop	{r2, r3}
10013734:	4690      	mov	r8, r2
10013736:	4699      	mov	r9, r3
10013738:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001373a:	46c0      	nop			; (mov r8, r8)

1001373c <__aeabi_dadd>:
1001373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001373e:	4656      	mov	r6, sl
10013740:	465f      	mov	r7, fp
10013742:	464d      	mov	r5, r9
10013744:	4644      	mov	r4, r8
10013746:	b4f0      	push	{r4, r5, r6, r7}
10013748:	000f      	movs	r7, r1
1001374a:	0ffd      	lsrs	r5, r7, #31
1001374c:	46aa      	mov	sl, r5
1001374e:	0309      	lsls	r1, r1, #12
10013750:	007c      	lsls	r4, r7, #1
10013752:	002e      	movs	r6, r5
10013754:	005f      	lsls	r7, r3, #1
10013756:	0f45      	lsrs	r5, r0, #29
10013758:	0a49      	lsrs	r1, r1, #9
1001375a:	0d7f      	lsrs	r7, r7, #21
1001375c:	4329      	orrs	r1, r5
1001375e:	00c5      	lsls	r5, r0, #3
10013760:	0318      	lsls	r0, r3, #12
10013762:	46bc      	mov	ip, r7
10013764:	0a40      	lsrs	r0, r0, #9
10013766:	0f57      	lsrs	r7, r2, #29
10013768:	0d64      	lsrs	r4, r4, #21
1001376a:	0fdb      	lsrs	r3, r3, #31
1001376c:	4338      	orrs	r0, r7
1001376e:	00d2      	lsls	r2, r2, #3
10013770:	459a      	cmp	sl, r3
10013772:	d100      	bne.n	10013776 <__aeabi_dadd+0x3a>
10013774:	e0aa      	b.n	100138cc <__aeabi_dadd+0x190>
10013776:	4666      	mov	r6, ip
10013778:	1ba6      	subs	r6, r4, r6
1001377a:	2e00      	cmp	r6, #0
1001377c:	dc00      	bgt.n	10013780 <__aeabi_dadd+0x44>
1001377e:	e0ff      	b.n	10013980 <__aeabi_dadd+0x244>
10013780:	4663      	mov	r3, ip
10013782:	2b00      	cmp	r3, #0
10013784:	d139      	bne.n	100137fa <__aeabi_dadd+0xbe>
10013786:	0003      	movs	r3, r0
10013788:	4313      	orrs	r3, r2
1001378a:	d000      	beq.n	1001378e <__aeabi_dadd+0x52>
1001378c:	e0d9      	b.n	10013942 <__aeabi_dadd+0x206>
1001378e:	076b      	lsls	r3, r5, #29
10013790:	d009      	beq.n	100137a6 <__aeabi_dadd+0x6a>
10013792:	230f      	movs	r3, #15
10013794:	402b      	ands	r3, r5
10013796:	2b04      	cmp	r3, #4
10013798:	d005      	beq.n	100137a6 <__aeabi_dadd+0x6a>
1001379a:	1d2b      	adds	r3, r5, #4
1001379c:	42ab      	cmp	r3, r5
1001379e:	41ad      	sbcs	r5, r5
100137a0:	426d      	negs	r5, r5
100137a2:	1949      	adds	r1, r1, r5
100137a4:	001d      	movs	r5, r3
100137a6:	020b      	lsls	r3, r1, #8
100137a8:	d400      	bmi.n	100137ac <__aeabi_dadd+0x70>
100137aa:	e082      	b.n	100138b2 <__aeabi_dadd+0x176>
100137ac:	4bca      	ldr	r3, [pc, #808]	; (10013ad8 <__aeabi_dadd+0x39c>)
100137ae:	3401      	adds	r4, #1
100137b0:	429c      	cmp	r4, r3
100137b2:	d100      	bne.n	100137b6 <__aeabi_dadd+0x7a>
100137b4:	e0fe      	b.n	100139b4 <__aeabi_dadd+0x278>
100137b6:	000a      	movs	r2, r1
100137b8:	4656      	mov	r6, sl
100137ba:	4bc8      	ldr	r3, [pc, #800]	; (10013adc <__aeabi_dadd+0x3a0>)
100137bc:	08ed      	lsrs	r5, r5, #3
100137be:	401a      	ands	r2, r3
100137c0:	0750      	lsls	r0, r2, #29
100137c2:	0564      	lsls	r4, r4, #21
100137c4:	0252      	lsls	r2, r2, #9
100137c6:	4305      	orrs	r5, r0
100137c8:	0b12      	lsrs	r2, r2, #12
100137ca:	0d64      	lsrs	r4, r4, #21
100137cc:	2100      	movs	r1, #0
100137ce:	0312      	lsls	r2, r2, #12
100137d0:	0d0b      	lsrs	r3, r1, #20
100137d2:	051b      	lsls	r3, r3, #20
100137d4:	0564      	lsls	r4, r4, #21
100137d6:	0b12      	lsrs	r2, r2, #12
100137d8:	431a      	orrs	r2, r3
100137da:	0863      	lsrs	r3, r4, #1
100137dc:	4cc0      	ldr	r4, [pc, #768]	; (10013ae0 <__aeabi_dadd+0x3a4>)
100137de:	07f6      	lsls	r6, r6, #31
100137e0:	4014      	ands	r4, r2
100137e2:	431c      	orrs	r4, r3
100137e4:	0064      	lsls	r4, r4, #1
100137e6:	0864      	lsrs	r4, r4, #1
100137e8:	4334      	orrs	r4, r6
100137ea:	0028      	movs	r0, r5
100137ec:	0021      	movs	r1, r4
100137ee:	bc3c      	pop	{r2, r3, r4, r5}
100137f0:	4690      	mov	r8, r2
100137f2:	4699      	mov	r9, r3
100137f4:	46a2      	mov	sl, r4
100137f6:	46ab      	mov	fp, r5
100137f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100137fa:	4bb7      	ldr	r3, [pc, #732]	; (10013ad8 <__aeabi_dadd+0x39c>)
100137fc:	429c      	cmp	r4, r3
100137fe:	d0c6      	beq.n	1001378e <__aeabi_dadd+0x52>
10013800:	2380      	movs	r3, #128	; 0x80
10013802:	041b      	lsls	r3, r3, #16
10013804:	4318      	orrs	r0, r3
10013806:	2e38      	cmp	r6, #56	; 0x38
10013808:	dd00      	ble.n	1001380c <__aeabi_dadd+0xd0>
1001380a:	e0eb      	b.n	100139e4 <__aeabi_dadd+0x2a8>
1001380c:	2e1f      	cmp	r6, #31
1001380e:	dd00      	ble.n	10013812 <__aeabi_dadd+0xd6>
10013810:	e11e      	b.n	10013a50 <__aeabi_dadd+0x314>
10013812:	2320      	movs	r3, #32
10013814:	1b9b      	subs	r3, r3, r6
10013816:	469c      	mov	ip, r3
10013818:	0003      	movs	r3, r0
1001381a:	4667      	mov	r7, ip
1001381c:	40bb      	lsls	r3, r7
1001381e:	4698      	mov	r8, r3
10013820:	0013      	movs	r3, r2
10013822:	4647      	mov	r7, r8
10013824:	40f3      	lsrs	r3, r6
10013826:	433b      	orrs	r3, r7
10013828:	4667      	mov	r7, ip
1001382a:	40ba      	lsls	r2, r7
1001382c:	1e57      	subs	r7, r2, #1
1001382e:	41ba      	sbcs	r2, r7
10013830:	4313      	orrs	r3, r2
10013832:	0002      	movs	r2, r0
10013834:	40f2      	lsrs	r2, r6
10013836:	1aeb      	subs	r3, r5, r3
10013838:	429d      	cmp	r5, r3
1001383a:	41b6      	sbcs	r6, r6
1001383c:	001d      	movs	r5, r3
1001383e:	1a8a      	subs	r2, r1, r2
10013840:	4276      	negs	r6, r6
10013842:	1b91      	subs	r1, r2, r6
10013844:	020b      	lsls	r3, r1, #8
10013846:	d531      	bpl.n	100138ac <__aeabi_dadd+0x170>
10013848:	024a      	lsls	r2, r1, #9
1001384a:	0a56      	lsrs	r6, r2, #9
1001384c:	2e00      	cmp	r6, #0
1001384e:	d100      	bne.n	10013852 <__aeabi_dadd+0x116>
10013850:	e0b4      	b.n	100139bc <__aeabi_dadd+0x280>
10013852:	0030      	movs	r0, r6
10013854:	f7fc fdb0 	bl	100103b8 <__clzsi2>
10013858:	0003      	movs	r3, r0
1001385a:	3b08      	subs	r3, #8
1001385c:	2b1f      	cmp	r3, #31
1001385e:	dd00      	ble.n	10013862 <__aeabi_dadd+0x126>
10013860:	e0b5      	b.n	100139ce <__aeabi_dadd+0x292>
10013862:	2220      	movs	r2, #32
10013864:	0029      	movs	r1, r5
10013866:	1ad2      	subs	r2, r2, r3
10013868:	40d1      	lsrs	r1, r2
1001386a:	409e      	lsls	r6, r3
1001386c:	000a      	movs	r2, r1
1001386e:	409d      	lsls	r5, r3
10013870:	4332      	orrs	r2, r6
10013872:	429c      	cmp	r4, r3
10013874:	dd00      	ble.n	10013878 <__aeabi_dadd+0x13c>
10013876:	e0b1      	b.n	100139dc <__aeabi_dadd+0x2a0>
10013878:	1b1c      	subs	r4, r3, r4
1001387a:	1c63      	adds	r3, r4, #1
1001387c:	2b1f      	cmp	r3, #31
1001387e:	dd00      	ble.n	10013882 <__aeabi_dadd+0x146>
10013880:	e0d5      	b.n	10013a2e <__aeabi_dadd+0x2f2>
10013882:	2120      	movs	r1, #32
10013884:	0014      	movs	r4, r2
10013886:	0028      	movs	r0, r5
10013888:	1ac9      	subs	r1, r1, r3
1001388a:	408c      	lsls	r4, r1
1001388c:	40d8      	lsrs	r0, r3
1001388e:	408d      	lsls	r5, r1
10013890:	4304      	orrs	r4, r0
10013892:	40da      	lsrs	r2, r3
10013894:	1e68      	subs	r0, r5, #1
10013896:	4185      	sbcs	r5, r0
10013898:	0011      	movs	r1, r2
1001389a:	4325      	orrs	r5, r4
1001389c:	2400      	movs	r4, #0
1001389e:	e776      	b.n	1001378e <__aeabi_dadd+0x52>
100138a0:	4641      	mov	r1, r8
100138a2:	4331      	orrs	r1, r6
100138a4:	d100      	bne.n	100138a8 <__aeabi_dadd+0x16c>
100138a6:	e234      	b.n	10013d12 <__aeabi_dadd+0x5d6>
100138a8:	0031      	movs	r1, r6
100138aa:	4645      	mov	r5, r8
100138ac:	076b      	lsls	r3, r5, #29
100138ae:	d000      	beq.n	100138b2 <__aeabi_dadd+0x176>
100138b0:	e76f      	b.n	10013792 <__aeabi_dadd+0x56>
100138b2:	4656      	mov	r6, sl
100138b4:	0748      	lsls	r0, r1, #29
100138b6:	08ed      	lsrs	r5, r5, #3
100138b8:	08c9      	lsrs	r1, r1, #3
100138ba:	4305      	orrs	r5, r0
100138bc:	4b86      	ldr	r3, [pc, #536]	; (10013ad8 <__aeabi_dadd+0x39c>)
100138be:	429c      	cmp	r4, r3
100138c0:	d035      	beq.n	1001392e <__aeabi_dadd+0x1f2>
100138c2:	030a      	lsls	r2, r1, #12
100138c4:	0564      	lsls	r4, r4, #21
100138c6:	0b12      	lsrs	r2, r2, #12
100138c8:	0d64      	lsrs	r4, r4, #21
100138ca:	e77f      	b.n	100137cc <__aeabi_dadd+0x90>
100138cc:	4663      	mov	r3, ip
100138ce:	1ae3      	subs	r3, r4, r3
100138d0:	469b      	mov	fp, r3
100138d2:	2b00      	cmp	r3, #0
100138d4:	dc00      	bgt.n	100138d8 <__aeabi_dadd+0x19c>
100138d6:	e08b      	b.n	100139f0 <__aeabi_dadd+0x2b4>
100138d8:	4667      	mov	r7, ip
100138da:	2f00      	cmp	r7, #0
100138dc:	d03c      	beq.n	10013958 <__aeabi_dadd+0x21c>
100138de:	4f7e      	ldr	r7, [pc, #504]	; (10013ad8 <__aeabi_dadd+0x39c>)
100138e0:	42bc      	cmp	r4, r7
100138e2:	d100      	bne.n	100138e6 <__aeabi_dadd+0x1aa>
100138e4:	e753      	b.n	1001378e <__aeabi_dadd+0x52>
100138e6:	2780      	movs	r7, #128	; 0x80
100138e8:	043f      	lsls	r7, r7, #16
100138ea:	4338      	orrs	r0, r7
100138ec:	465b      	mov	r3, fp
100138ee:	2b38      	cmp	r3, #56	; 0x38
100138f0:	dc00      	bgt.n	100138f4 <__aeabi_dadd+0x1b8>
100138f2:	e0f7      	b.n	10013ae4 <__aeabi_dadd+0x3a8>
100138f4:	4302      	orrs	r2, r0
100138f6:	1e50      	subs	r0, r2, #1
100138f8:	4182      	sbcs	r2, r0
100138fa:	2000      	movs	r0, #0
100138fc:	b2d2      	uxtb	r2, r2
100138fe:	1953      	adds	r3, r2, r5
10013900:	1842      	adds	r2, r0, r1
10013902:	42ab      	cmp	r3, r5
10013904:	4189      	sbcs	r1, r1
10013906:	001d      	movs	r5, r3
10013908:	4249      	negs	r1, r1
1001390a:	1889      	adds	r1, r1, r2
1001390c:	020b      	lsls	r3, r1, #8
1001390e:	d5cd      	bpl.n	100138ac <__aeabi_dadd+0x170>
10013910:	4b71      	ldr	r3, [pc, #452]	; (10013ad8 <__aeabi_dadd+0x39c>)
10013912:	3401      	adds	r4, #1
10013914:	429c      	cmp	r4, r3
10013916:	d100      	bne.n	1001391a <__aeabi_dadd+0x1de>
10013918:	e13d      	b.n	10013b96 <__aeabi_dadd+0x45a>
1001391a:	2001      	movs	r0, #1
1001391c:	4a6f      	ldr	r2, [pc, #444]	; (10013adc <__aeabi_dadd+0x3a0>)
1001391e:	086b      	lsrs	r3, r5, #1
10013920:	400a      	ands	r2, r1
10013922:	4028      	ands	r0, r5
10013924:	4318      	orrs	r0, r3
10013926:	07d5      	lsls	r5, r2, #31
10013928:	4305      	orrs	r5, r0
1001392a:	0851      	lsrs	r1, r2, #1
1001392c:	e72f      	b.n	1001378e <__aeabi_dadd+0x52>
1001392e:	002b      	movs	r3, r5
10013930:	430b      	orrs	r3, r1
10013932:	d100      	bne.n	10013936 <__aeabi_dadd+0x1fa>
10013934:	e1cb      	b.n	10013cce <__aeabi_dadd+0x592>
10013936:	2380      	movs	r3, #128	; 0x80
10013938:	031b      	lsls	r3, r3, #12
1001393a:	430b      	orrs	r3, r1
1001393c:	031a      	lsls	r2, r3, #12
1001393e:	0b12      	lsrs	r2, r2, #12
10013940:	e744      	b.n	100137cc <__aeabi_dadd+0x90>
10013942:	3e01      	subs	r6, #1
10013944:	2e00      	cmp	r6, #0
10013946:	d16d      	bne.n	10013a24 <__aeabi_dadd+0x2e8>
10013948:	1aae      	subs	r6, r5, r2
1001394a:	42b5      	cmp	r5, r6
1001394c:	419b      	sbcs	r3, r3
1001394e:	1a09      	subs	r1, r1, r0
10013950:	425b      	negs	r3, r3
10013952:	1ac9      	subs	r1, r1, r3
10013954:	0035      	movs	r5, r6
10013956:	e775      	b.n	10013844 <__aeabi_dadd+0x108>
10013958:	0007      	movs	r7, r0
1001395a:	4317      	orrs	r7, r2
1001395c:	d100      	bne.n	10013960 <__aeabi_dadd+0x224>
1001395e:	e716      	b.n	1001378e <__aeabi_dadd+0x52>
10013960:	2301      	movs	r3, #1
10013962:	425b      	negs	r3, r3
10013964:	469c      	mov	ip, r3
10013966:	44e3      	add	fp, ip
10013968:	465b      	mov	r3, fp
1001396a:	2b00      	cmp	r3, #0
1001396c:	d000      	beq.n	10013970 <__aeabi_dadd+0x234>
1001396e:	e0e0      	b.n	10013b32 <__aeabi_dadd+0x3f6>
10013970:	18aa      	adds	r2, r5, r2
10013972:	42aa      	cmp	r2, r5
10013974:	419b      	sbcs	r3, r3
10013976:	1809      	adds	r1, r1, r0
10013978:	425b      	negs	r3, r3
1001397a:	1859      	adds	r1, r3, r1
1001397c:	0015      	movs	r5, r2
1001397e:	e7c5      	b.n	1001390c <__aeabi_dadd+0x1d0>
10013980:	2e00      	cmp	r6, #0
10013982:	d175      	bne.n	10013a70 <__aeabi_dadd+0x334>
10013984:	1c66      	adds	r6, r4, #1
10013986:	0576      	lsls	r6, r6, #21
10013988:	0d76      	lsrs	r6, r6, #21
1001398a:	2e01      	cmp	r6, #1
1001398c:	dc00      	bgt.n	10013990 <__aeabi_dadd+0x254>
1001398e:	e0f3      	b.n	10013b78 <__aeabi_dadd+0x43c>
10013990:	1aae      	subs	r6, r5, r2
10013992:	46b0      	mov	r8, r6
10013994:	4545      	cmp	r5, r8
10013996:	41bf      	sbcs	r7, r7
10013998:	1a0e      	subs	r6, r1, r0
1001399a:	427f      	negs	r7, r7
1001399c:	1bf6      	subs	r6, r6, r7
1001399e:	0237      	lsls	r7, r6, #8
100139a0:	d400      	bmi.n	100139a4 <__aeabi_dadd+0x268>
100139a2:	e08f      	b.n	10013ac4 <__aeabi_dadd+0x388>
100139a4:	1b55      	subs	r5, r2, r5
100139a6:	42aa      	cmp	r2, r5
100139a8:	41b6      	sbcs	r6, r6
100139aa:	1a41      	subs	r1, r0, r1
100139ac:	4276      	negs	r6, r6
100139ae:	1b8e      	subs	r6, r1, r6
100139b0:	469a      	mov	sl, r3
100139b2:	e74b      	b.n	1001384c <__aeabi_dadd+0x110>
100139b4:	4656      	mov	r6, sl
100139b6:	2200      	movs	r2, #0
100139b8:	2500      	movs	r5, #0
100139ba:	e707      	b.n	100137cc <__aeabi_dadd+0x90>
100139bc:	0028      	movs	r0, r5
100139be:	f7fc fcfb 	bl	100103b8 <__clzsi2>
100139c2:	3020      	adds	r0, #32
100139c4:	0003      	movs	r3, r0
100139c6:	3b08      	subs	r3, #8
100139c8:	2b1f      	cmp	r3, #31
100139ca:	dc00      	bgt.n	100139ce <__aeabi_dadd+0x292>
100139cc:	e749      	b.n	10013862 <__aeabi_dadd+0x126>
100139ce:	002a      	movs	r2, r5
100139d0:	3828      	subs	r0, #40	; 0x28
100139d2:	4082      	lsls	r2, r0
100139d4:	2500      	movs	r5, #0
100139d6:	429c      	cmp	r4, r3
100139d8:	dc00      	bgt.n	100139dc <__aeabi_dadd+0x2a0>
100139da:	e74d      	b.n	10013878 <__aeabi_dadd+0x13c>
100139dc:	493f      	ldr	r1, [pc, #252]	; (10013adc <__aeabi_dadd+0x3a0>)
100139de:	1ae4      	subs	r4, r4, r3
100139e0:	4011      	ands	r1, r2
100139e2:	e6d4      	b.n	1001378e <__aeabi_dadd+0x52>
100139e4:	4302      	orrs	r2, r0
100139e6:	1e50      	subs	r0, r2, #1
100139e8:	4182      	sbcs	r2, r0
100139ea:	b2d3      	uxtb	r3, r2
100139ec:	2200      	movs	r2, #0
100139ee:	e722      	b.n	10013836 <__aeabi_dadd+0xfa>
100139f0:	2b00      	cmp	r3, #0
100139f2:	d000      	beq.n	100139f6 <__aeabi_dadd+0x2ba>
100139f4:	e0f3      	b.n	10013bde <__aeabi_dadd+0x4a2>
100139f6:	1c63      	adds	r3, r4, #1
100139f8:	469c      	mov	ip, r3
100139fa:	055b      	lsls	r3, r3, #21
100139fc:	0d5b      	lsrs	r3, r3, #21
100139fe:	2b01      	cmp	r3, #1
10013a00:	dc00      	bgt.n	10013a04 <__aeabi_dadd+0x2c8>
10013a02:	e09f      	b.n	10013b44 <__aeabi_dadd+0x408>
10013a04:	4b34      	ldr	r3, [pc, #208]	; (10013ad8 <__aeabi_dadd+0x39c>)
10013a06:	459c      	cmp	ip, r3
10013a08:	d100      	bne.n	10013a0c <__aeabi_dadd+0x2d0>
10013a0a:	e0c3      	b.n	10013b94 <__aeabi_dadd+0x458>
10013a0c:	18aa      	adds	r2, r5, r2
10013a0e:	1809      	adds	r1, r1, r0
10013a10:	42aa      	cmp	r2, r5
10013a12:	4180      	sbcs	r0, r0
10013a14:	4240      	negs	r0, r0
10013a16:	1841      	adds	r1, r0, r1
10013a18:	07cd      	lsls	r5, r1, #31
10013a1a:	0852      	lsrs	r2, r2, #1
10013a1c:	4315      	orrs	r5, r2
10013a1e:	0849      	lsrs	r1, r1, #1
10013a20:	4664      	mov	r4, ip
10013a22:	e6b4      	b.n	1001378e <__aeabi_dadd+0x52>
10013a24:	4b2c      	ldr	r3, [pc, #176]	; (10013ad8 <__aeabi_dadd+0x39c>)
10013a26:	429c      	cmp	r4, r3
10013a28:	d000      	beq.n	10013a2c <__aeabi_dadd+0x2f0>
10013a2a:	e6ec      	b.n	10013806 <__aeabi_dadd+0xca>
10013a2c:	e6af      	b.n	1001378e <__aeabi_dadd+0x52>
10013a2e:	0011      	movs	r1, r2
10013a30:	3c1f      	subs	r4, #31
10013a32:	40e1      	lsrs	r1, r4
10013a34:	000c      	movs	r4, r1
10013a36:	2b20      	cmp	r3, #32
10013a38:	d100      	bne.n	10013a3c <__aeabi_dadd+0x300>
10013a3a:	e07f      	b.n	10013b3c <__aeabi_dadd+0x400>
10013a3c:	2140      	movs	r1, #64	; 0x40
10013a3e:	1acb      	subs	r3, r1, r3
10013a40:	409a      	lsls	r2, r3
10013a42:	4315      	orrs	r5, r2
10013a44:	1e6a      	subs	r2, r5, #1
10013a46:	4195      	sbcs	r5, r2
10013a48:	2100      	movs	r1, #0
10013a4a:	4325      	orrs	r5, r4
10013a4c:	2400      	movs	r4, #0
10013a4e:	e72d      	b.n	100138ac <__aeabi_dadd+0x170>
10013a50:	0033      	movs	r3, r6
10013a52:	0007      	movs	r7, r0
10013a54:	3b20      	subs	r3, #32
10013a56:	40df      	lsrs	r7, r3
10013a58:	003b      	movs	r3, r7
10013a5a:	2e20      	cmp	r6, #32
10013a5c:	d070      	beq.n	10013b40 <__aeabi_dadd+0x404>
10013a5e:	2740      	movs	r7, #64	; 0x40
10013a60:	1bbe      	subs	r6, r7, r6
10013a62:	40b0      	lsls	r0, r6
10013a64:	4302      	orrs	r2, r0
10013a66:	1e50      	subs	r0, r2, #1
10013a68:	4182      	sbcs	r2, r0
10013a6a:	4313      	orrs	r3, r2
10013a6c:	2200      	movs	r2, #0
10013a6e:	e6e2      	b.n	10013836 <__aeabi_dadd+0xfa>
10013a70:	2c00      	cmp	r4, #0
10013a72:	d04f      	beq.n	10013b14 <__aeabi_dadd+0x3d8>
10013a74:	4c18      	ldr	r4, [pc, #96]	; (10013ad8 <__aeabi_dadd+0x39c>)
10013a76:	45a4      	cmp	ip, r4
10013a78:	d100      	bne.n	10013a7c <__aeabi_dadd+0x340>
10013a7a:	e0ab      	b.n	10013bd4 <__aeabi_dadd+0x498>
10013a7c:	2480      	movs	r4, #128	; 0x80
10013a7e:	0424      	lsls	r4, r4, #16
10013a80:	4276      	negs	r6, r6
10013a82:	4321      	orrs	r1, r4
10013a84:	2e38      	cmp	r6, #56	; 0x38
10013a86:	dd00      	ble.n	10013a8a <__aeabi_dadd+0x34e>
10013a88:	e0df      	b.n	10013c4a <__aeabi_dadd+0x50e>
10013a8a:	2e1f      	cmp	r6, #31
10013a8c:	dd00      	ble.n	10013a90 <__aeabi_dadd+0x354>
10013a8e:	e143      	b.n	10013d18 <__aeabi_dadd+0x5dc>
10013a90:	2720      	movs	r7, #32
10013a92:	1bbc      	subs	r4, r7, r6
10013a94:	46a1      	mov	r9, r4
10013a96:	000c      	movs	r4, r1
10013a98:	464f      	mov	r7, r9
10013a9a:	40bc      	lsls	r4, r7
10013a9c:	46a0      	mov	r8, r4
10013a9e:	002c      	movs	r4, r5
10013aa0:	4647      	mov	r7, r8
10013aa2:	40f4      	lsrs	r4, r6
10013aa4:	433c      	orrs	r4, r7
10013aa6:	464f      	mov	r7, r9
10013aa8:	40bd      	lsls	r5, r7
10013aaa:	1e6f      	subs	r7, r5, #1
10013aac:	41bd      	sbcs	r5, r7
10013aae:	40f1      	lsrs	r1, r6
10013ab0:	432c      	orrs	r4, r5
10013ab2:	1b15      	subs	r5, r2, r4
10013ab4:	42aa      	cmp	r2, r5
10013ab6:	4192      	sbcs	r2, r2
10013ab8:	1a41      	subs	r1, r0, r1
10013aba:	4252      	negs	r2, r2
10013abc:	1a89      	subs	r1, r1, r2
10013abe:	4664      	mov	r4, ip
10013ac0:	469a      	mov	sl, r3
10013ac2:	e6bf      	b.n	10013844 <__aeabi_dadd+0x108>
10013ac4:	4641      	mov	r1, r8
10013ac6:	4645      	mov	r5, r8
10013ac8:	4331      	orrs	r1, r6
10013aca:	d000      	beq.n	10013ace <__aeabi_dadd+0x392>
10013acc:	e6be      	b.n	1001384c <__aeabi_dadd+0x110>
10013ace:	2600      	movs	r6, #0
10013ad0:	2400      	movs	r4, #0
10013ad2:	2500      	movs	r5, #0
10013ad4:	e6f2      	b.n	100138bc <__aeabi_dadd+0x180>
10013ad6:	46c0      	nop			; (mov r8, r8)
10013ad8:	000007ff 	.word	0x000007ff
10013adc:	ff7fffff 	.word	0xff7fffff
10013ae0:	800fffff 	.word	0x800fffff
10013ae4:	2b1f      	cmp	r3, #31
10013ae6:	dc59      	bgt.n	10013b9c <__aeabi_dadd+0x460>
10013ae8:	2720      	movs	r7, #32
10013aea:	1aff      	subs	r7, r7, r3
10013aec:	46bc      	mov	ip, r7
10013aee:	0007      	movs	r7, r0
10013af0:	4663      	mov	r3, ip
10013af2:	409f      	lsls	r7, r3
10013af4:	465b      	mov	r3, fp
10013af6:	46b9      	mov	r9, r7
10013af8:	0017      	movs	r7, r2
10013afa:	40df      	lsrs	r7, r3
10013afc:	46b8      	mov	r8, r7
10013afe:	464f      	mov	r7, r9
10013b00:	4643      	mov	r3, r8
10013b02:	431f      	orrs	r7, r3
10013b04:	4663      	mov	r3, ip
10013b06:	409a      	lsls	r2, r3
10013b08:	1e53      	subs	r3, r2, #1
10013b0a:	419a      	sbcs	r2, r3
10013b0c:	465b      	mov	r3, fp
10013b0e:	433a      	orrs	r2, r7
10013b10:	40d8      	lsrs	r0, r3
10013b12:	e6f4      	b.n	100138fe <__aeabi_dadd+0x1c2>
10013b14:	000c      	movs	r4, r1
10013b16:	432c      	orrs	r4, r5
10013b18:	d05c      	beq.n	10013bd4 <__aeabi_dadd+0x498>
10013b1a:	43f6      	mvns	r6, r6
10013b1c:	2e00      	cmp	r6, #0
10013b1e:	d155      	bne.n	10013bcc <__aeabi_dadd+0x490>
10013b20:	1b55      	subs	r5, r2, r5
10013b22:	42aa      	cmp	r2, r5
10013b24:	41a4      	sbcs	r4, r4
10013b26:	1a41      	subs	r1, r0, r1
10013b28:	4264      	negs	r4, r4
10013b2a:	1b09      	subs	r1, r1, r4
10013b2c:	469a      	mov	sl, r3
10013b2e:	4664      	mov	r4, ip
10013b30:	e688      	b.n	10013844 <__aeabi_dadd+0x108>
10013b32:	4f96      	ldr	r7, [pc, #600]	; (10013d8c <__aeabi_dadd+0x650>)
10013b34:	42bc      	cmp	r4, r7
10013b36:	d000      	beq.n	10013b3a <__aeabi_dadd+0x3fe>
10013b38:	e6d8      	b.n	100138ec <__aeabi_dadd+0x1b0>
10013b3a:	e628      	b.n	1001378e <__aeabi_dadd+0x52>
10013b3c:	2200      	movs	r2, #0
10013b3e:	e780      	b.n	10013a42 <__aeabi_dadd+0x306>
10013b40:	2000      	movs	r0, #0
10013b42:	e78f      	b.n	10013a64 <__aeabi_dadd+0x328>
10013b44:	000b      	movs	r3, r1
10013b46:	432b      	orrs	r3, r5
10013b48:	2c00      	cmp	r4, #0
10013b4a:	d000      	beq.n	10013b4e <__aeabi_dadd+0x412>
10013b4c:	e0c2      	b.n	10013cd4 <__aeabi_dadd+0x598>
10013b4e:	2b00      	cmp	r3, #0
10013b50:	d100      	bne.n	10013b54 <__aeabi_dadd+0x418>
10013b52:	e101      	b.n	10013d58 <__aeabi_dadd+0x61c>
10013b54:	0003      	movs	r3, r0
10013b56:	4313      	orrs	r3, r2
10013b58:	d100      	bne.n	10013b5c <__aeabi_dadd+0x420>
10013b5a:	e618      	b.n	1001378e <__aeabi_dadd+0x52>
10013b5c:	18ab      	adds	r3, r5, r2
10013b5e:	42ab      	cmp	r3, r5
10013b60:	41b6      	sbcs	r6, r6
10013b62:	1809      	adds	r1, r1, r0
10013b64:	4276      	negs	r6, r6
10013b66:	1871      	adds	r1, r6, r1
10013b68:	020a      	lsls	r2, r1, #8
10013b6a:	d400      	bmi.n	10013b6e <__aeabi_dadd+0x432>
10013b6c:	e109      	b.n	10013d82 <__aeabi_dadd+0x646>
10013b6e:	4a88      	ldr	r2, [pc, #544]	; (10013d90 <__aeabi_dadd+0x654>)
10013b70:	001d      	movs	r5, r3
10013b72:	4011      	ands	r1, r2
10013b74:	4664      	mov	r4, ip
10013b76:	e60a      	b.n	1001378e <__aeabi_dadd+0x52>
10013b78:	2c00      	cmp	r4, #0
10013b7a:	d15b      	bne.n	10013c34 <__aeabi_dadd+0x4f8>
10013b7c:	000e      	movs	r6, r1
10013b7e:	432e      	orrs	r6, r5
10013b80:	d000      	beq.n	10013b84 <__aeabi_dadd+0x448>
10013b82:	e08a      	b.n	10013c9a <__aeabi_dadd+0x55e>
10013b84:	0001      	movs	r1, r0
10013b86:	4311      	orrs	r1, r2
10013b88:	d100      	bne.n	10013b8c <__aeabi_dadd+0x450>
10013b8a:	e0c2      	b.n	10013d12 <__aeabi_dadd+0x5d6>
10013b8c:	0001      	movs	r1, r0
10013b8e:	0015      	movs	r5, r2
10013b90:	469a      	mov	sl, r3
10013b92:	e5fc      	b.n	1001378e <__aeabi_dadd+0x52>
10013b94:	4664      	mov	r4, ip
10013b96:	2100      	movs	r1, #0
10013b98:	2500      	movs	r5, #0
10013b9a:	e68f      	b.n	100138bc <__aeabi_dadd+0x180>
10013b9c:	2320      	movs	r3, #32
10013b9e:	425b      	negs	r3, r3
10013ba0:	469c      	mov	ip, r3
10013ba2:	44dc      	add	ip, fp
10013ba4:	4663      	mov	r3, ip
10013ba6:	0007      	movs	r7, r0
10013ba8:	40df      	lsrs	r7, r3
10013baa:	465b      	mov	r3, fp
10013bac:	46bc      	mov	ip, r7
10013bae:	2b20      	cmp	r3, #32
10013bb0:	d100      	bne.n	10013bb4 <__aeabi_dadd+0x478>
10013bb2:	e0ac      	b.n	10013d0e <__aeabi_dadd+0x5d2>
10013bb4:	2340      	movs	r3, #64	; 0x40
10013bb6:	465f      	mov	r7, fp
10013bb8:	1bdb      	subs	r3, r3, r7
10013bba:	4098      	lsls	r0, r3
10013bbc:	4302      	orrs	r2, r0
10013bbe:	1e50      	subs	r0, r2, #1
10013bc0:	4182      	sbcs	r2, r0
10013bc2:	4663      	mov	r3, ip
10013bc4:	4313      	orrs	r3, r2
10013bc6:	001a      	movs	r2, r3
10013bc8:	2000      	movs	r0, #0
10013bca:	e698      	b.n	100138fe <__aeabi_dadd+0x1c2>
10013bcc:	4c6f      	ldr	r4, [pc, #444]	; (10013d8c <__aeabi_dadd+0x650>)
10013bce:	45a4      	cmp	ip, r4
10013bd0:	d000      	beq.n	10013bd4 <__aeabi_dadd+0x498>
10013bd2:	e757      	b.n	10013a84 <__aeabi_dadd+0x348>
10013bd4:	0001      	movs	r1, r0
10013bd6:	0015      	movs	r5, r2
10013bd8:	4664      	mov	r4, ip
10013bda:	469a      	mov	sl, r3
10013bdc:	e5d7      	b.n	1001378e <__aeabi_dadd+0x52>
10013bde:	2c00      	cmp	r4, #0
10013be0:	d139      	bne.n	10013c56 <__aeabi_dadd+0x51a>
10013be2:	000c      	movs	r4, r1
10013be4:	432c      	orrs	r4, r5
10013be6:	d06e      	beq.n	10013cc6 <__aeabi_dadd+0x58a>
10013be8:	43db      	mvns	r3, r3
10013bea:	2b00      	cmp	r3, #0
10013bec:	d01a      	beq.n	10013c24 <__aeabi_dadd+0x4e8>
10013bee:	4c67      	ldr	r4, [pc, #412]	; (10013d8c <__aeabi_dadd+0x650>)
10013bf0:	45a4      	cmp	ip, r4
10013bf2:	d068      	beq.n	10013cc6 <__aeabi_dadd+0x58a>
10013bf4:	2b38      	cmp	r3, #56	; 0x38
10013bf6:	dd00      	ble.n	10013bfa <__aeabi_dadd+0x4be>
10013bf8:	e0a4      	b.n	10013d44 <__aeabi_dadd+0x608>
10013bfa:	2b1f      	cmp	r3, #31
10013bfc:	dd00      	ble.n	10013c00 <__aeabi_dadd+0x4c4>
10013bfe:	e0ae      	b.n	10013d5e <__aeabi_dadd+0x622>
10013c00:	2420      	movs	r4, #32
10013c02:	000f      	movs	r7, r1
10013c04:	1ae4      	subs	r4, r4, r3
10013c06:	40a7      	lsls	r7, r4
10013c08:	46b9      	mov	r9, r7
10013c0a:	002f      	movs	r7, r5
10013c0c:	40df      	lsrs	r7, r3
10013c0e:	46b8      	mov	r8, r7
10013c10:	46a3      	mov	fp, r4
10013c12:	464f      	mov	r7, r9
10013c14:	4644      	mov	r4, r8
10013c16:	4327      	orrs	r7, r4
10013c18:	465c      	mov	r4, fp
10013c1a:	40a5      	lsls	r5, r4
10013c1c:	1e6c      	subs	r4, r5, #1
10013c1e:	41a5      	sbcs	r5, r4
10013c20:	40d9      	lsrs	r1, r3
10013c22:	433d      	orrs	r5, r7
10013c24:	18ad      	adds	r5, r5, r2
10013c26:	4295      	cmp	r5, r2
10013c28:	419b      	sbcs	r3, r3
10013c2a:	1809      	adds	r1, r1, r0
10013c2c:	425b      	negs	r3, r3
10013c2e:	1859      	adds	r1, r3, r1
10013c30:	4664      	mov	r4, ip
10013c32:	e66b      	b.n	1001390c <__aeabi_dadd+0x1d0>
10013c34:	000c      	movs	r4, r1
10013c36:	432c      	orrs	r4, r5
10013c38:	d115      	bne.n	10013c66 <__aeabi_dadd+0x52a>
10013c3a:	0001      	movs	r1, r0
10013c3c:	4311      	orrs	r1, r2
10013c3e:	d07b      	beq.n	10013d38 <__aeabi_dadd+0x5fc>
10013c40:	0001      	movs	r1, r0
10013c42:	0015      	movs	r5, r2
10013c44:	469a      	mov	sl, r3
10013c46:	4c51      	ldr	r4, [pc, #324]	; (10013d8c <__aeabi_dadd+0x650>)
10013c48:	e5a1      	b.n	1001378e <__aeabi_dadd+0x52>
10013c4a:	430d      	orrs	r5, r1
10013c4c:	1e69      	subs	r1, r5, #1
10013c4e:	418d      	sbcs	r5, r1
10013c50:	2100      	movs	r1, #0
10013c52:	b2ec      	uxtb	r4, r5
10013c54:	e72d      	b.n	10013ab2 <__aeabi_dadd+0x376>
10013c56:	4c4d      	ldr	r4, [pc, #308]	; (10013d8c <__aeabi_dadd+0x650>)
10013c58:	45a4      	cmp	ip, r4
10013c5a:	d034      	beq.n	10013cc6 <__aeabi_dadd+0x58a>
10013c5c:	2480      	movs	r4, #128	; 0x80
10013c5e:	0424      	lsls	r4, r4, #16
10013c60:	425b      	negs	r3, r3
10013c62:	4321      	orrs	r1, r4
10013c64:	e7c6      	b.n	10013bf4 <__aeabi_dadd+0x4b8>
10013c66:	0004      	movs	r4, r0
10013c68:	4314      	orrs	r4, r2
10013c6a:	d04e      	beq.n	10013d0a <__aeabi_dadd+0x5ce>
10013c6c:	08ed      	lsrs	r5, r5, #3
10013c6e:	074c      	lsls	r4, r1, #29
10013c70:	432c      	orrs	r4, r5
10013c72:	2580      	movs	r5, #128	; 0x80
10013c74:	08c9      	lsrs	r1, r1, #3
10013c76:	032d      	lsls	r5, r5, #12
10013c78:	4229      	tst	r1, r5
10013c7a:	d008      	beq.n	10013c8e <__aeabi_dadd+0x552>
10013c7c:	08c6      	lsrs	r6, r0, #3
10013c7e:	422e      	tst	r6, r5
10013c80:	d105      	bne.n	10013c8e <__aeabi_dadd+0x552>
10013c82:	08d2      	lsrs	r2, r2, #3
10013c84:	0741      	lsls	r1, r0, #29
10013c86:	4311      	orrs	r1, r2
10013c88:	000c      	movs	r4, r1
10013c8a:	469a      	mov	sl, r3
10013c8c:	0031      	movs	r1, r6
10013c8e:	0f62      	lsrs	r2, r4, #29
10013c90:	00c9      	lsls	r1, r1, #3
10013c92:	00e5      	lsls	r5, r4, #3
10013c94:	4311      	orrs	r1, r2
10013c96:	4c3d      	ldr	r4, [pc, #244]	; (10013d8c <__aeabi_dadd+0x650>)
10013c98:	e579      	b.n	1001378e <__aeabi_dadd+0x52>
10013c9a:	0006      	movs	r6, r0
10013c9c:	4316      	orrs	r6, r2
10013c9e:	d100      	bne.n	10013ca2 <__aeabi_dadd+0x566>
10013ca0:	e575      	b.n	1001378e <__aeabi_dadd+0x52>
10013ca2:	1aae      	subs	r6, r5, r2
10013ca4:	46b0      	mov	r8, r6
10013ca6:	4545      	cmp	r5, r8
10013ca8:	41bf      	sbcs	r7, r7
10013caa:	1a0e      	subs	r6, r1, r0
10013cac:	427f      	negs	r7, r7
10013cae:	1bf6      	subs	r6, r6, r7
10013cb0:	0237      	lsls	r7, r6, #8
10013cb2:	d400      	bmi.n	10013cb6 <__aeabi_dadd+0x57a>
10013cb4:	e5f4      	b.n	100138a0 <__aeabi_dadd+0x164>
10013cb6:	1b55      	subs	r5, r2, r5
10013cb8:	42aa      	cmp	r2, r5
10013cba:	41b6      	sbcs	r6, r6
10013cbc:	1a41      	subs	r1, r0, r1
10013cbe:	4276      	negs	r6, r6
10013cc0:	1b89      	subs	r1, r1, r6
10013cc2:	469a      	mov	sl, r3
10013cc4:	e563      	b.n	1001378e <__aeabi_dadd+0x52>
10013cc6:	0001      	movs	r1, r0
10013cc8:	0015      	movs	r5, r2
10013cca:	4664      	mov	r4, ip
10013ccc:	e55f      	b.n	1001378e <__aeabi_dadd+0x52>
10013cce:	2200      	movs	r2, #0
10013cd0:	2500      	movs	r5, #0
10013cd2:	e57b      	b.n	100137cc <__aeabi_dadd+0x90>
10013cd4:	2b00      	cmp	r3, #0
10013cd6:	d03b      	beq.n	10013d50 <__aeabi_dadd+0x614>
10013cd8:	0003      	movs	r3, r0
10013cda:	4313      	orrs	r3, r2
10013cdc:	d015      	beq.n	10013d0a <__aeabi_dadd+0x5ce>
10013cde:	08ed      	lsrs	r5, r5, #3
10013ce0:	074b      	lsls	r3, r1, #29
10013ce2:	432b      	orrs	r3, r5
10013ce4:	2580      	movs	r5, #128	; 0x80
10013ce6:	08c9      	lsrs	r1, r1, #3
10013ce8:	032d      	lsls	r5, r5, #12
10013cea:	4229      	tst	r1, r5
10013cec:	d007      	beq.n	10013cfe <__aeabi_dadd+0x5c2>
10013cee:	08c4      	lsrs	r4, r0, #3
10013cf0:	422c      	tst	r4, r5
10013cf2:	d104      	bne.n	10013cfe <__aeabi_dadd+0x5c2>
10013cf4:	0741      	lsls	r1, r0, #29
10013cf6:	000b      	movs	r3, r1
10013cf8:	0021      	movs	r1, r4
10013cfa:	08d2      	lsrs	r2, r2, #3
10013cfc:	4313      	orrs	r3, r2
10013cfe:	00c9      	lsls	r1, r1, #3
10013d00:	0f5a      	lsrs	r2, r3, #29
10013d02:	4311      	orrs	r1, r2
10013d04:	00dd      	lsls	r5, r3, #3
10013d06:	4c21      	ldr	r4, [pc, #132]	; (10013d8c <__aeabi_dadd+0x650>)
10013d08:	e541      	b.n	1001378e <__aeabi_dadd+0x52>
10013d0a:	4c20      	ldr	r4, [pc, #128]	; (10013d8c <__aeabi_dadd+0x650>)
10013d0c:	e53f      	b.n	1001378e <__aeabi_dadd+0x52>
10013d0e:	2000      	movs	r0, #0
10013d10:	e754      	b.n	10013bbc <__aeabi_dadd+0x480>
10013d12:	2600      	movs	r6, #0
10013d14:	2500      	movs	r5, #0
10013d16:	e5d1      	b.n	100138bc <__aeabi_dadd+0x180>
10013d18:	0034      	movs	r4, r6
10013d1a:	000f      	movs	r7, r1
10013d1c:	3c20      	subs	r4, #32
10013d1e:	40e7      	lsrs	r7, r4
10013d20:	003c      	movs	r4, r7
10013d22:	2e20      	cmp	r6, #32
10013d24:	d02b      	beq.n	10013d7e <__aeabi_dadd+0x642>
10013d26:	2740      	movs	r7, #64	; 0x40
10013d28:	1bbe      	subs	r6, r7, r6
10013d2a:	40b1      	lsls	r1, r6
10013d2c:	430d      	orrs	r5, r1
10013d2e:	1e69      	subs	r1, r5, #1
10013d30:	418d      	sbcs	r5, r1
10013d32:	2100      	movs	r1, #0
10013d34:	432c      	orrs	r4, r5
10013d36:	e6bc      	b.n	10013ab2 <__aeabi_dadd+0x376>
10013d38:	2180      	movs	r1, #128	; 0x80
10013d3a:	2600      	movs	r6, #0
10013d3c:	0309      	lsls	r1, r1, #12
10013d3e:	4c13      	ldr	r4, [pc, #76]	; (10013d8c <__aeabi_dadd+0x650>)
10013d40:	2500      	movs	r5, #0
10013d42:	e5bb      	b.n	100138bc <__aeabi_dadd+0x180>
10013d44:	430d      	orrs	r5, r1
10013d46:	1e69      	subs	r1, r5, #1
10013d48:	418d      	sbcs	r5, r1
10013d4a:	2100      	movs	r1, #0
10013d4c:	b2ed      	uxtb	r5, r5
10013d4e:	e769      	b.n	10013c24 <__aeabi_dadd+0x4e8>
10013d50:	0001      	movs	r1, r0
10013d52:	0015      	movs	r5, r2
10013d54:	4c0d      	ldr	r4, [pc, #52]	; (10013d8c <__aeabi_dadd+0x650>)
10013d56:	e51a      	b.n	1001378e <__aeabi_dadd+0x52>
10013d58:	0001      	movs	r1, r0
10013d5a:	0015      	movs	r5, r2
10013d5c:	e517      	b.n	1001378e <__aeabi_dadd+0x52>
10013d5e:	001c      	movs	r4, r3
10013d60:	000f      	movs	r7, r1
10013d62:	3c20      	subs	r4, #32
10013d64:	40e7      	lsrs	r7, r4
10013d66:	003c      	movs	r4, r7
10013d68:	2b20      	cmp	r3, #32
10013d6a:	d00c      	beq.n	10013d86 <__aeabi_dadd+0x64a>
10013d6c:	2740      	movs	r7, #64	; 0x40
10013d6e:	1afb      	subs	r3, r7, r3
10013d70:	4099      	lsls	r1, r3
10013d72:	430d      	orrs	r5, r1
10013d74:	1e69      	subs	r1, r5, #1
10013d76:	418d      	sbcs	r5, r1
10013d78:	2100      	movs	r1, #0
10013d7a:	4325      	orrs	r5, r4
10013d7c:	e752      	b.n	10013c24 <__aeabi_dadd+0x4e8>
10013d7e:	2100      	movs	r1, #0
10013d80:	e7d4      	b.n	10013d2c <__aeabi_dadd+0x5f0>
10013d82:	001d      	movs	r5, r3
10013d84:	e592      	b.n	100138ac <__aeabi_dadd+0x170>
10013d86:	2100      	movs	r1, #0
10013d88:	e7f3      	b.n	10013d72 <__aeabi_dadd+0x636>
10013d8a:	46c0      	nop			; (mov r8, r8)
10013d8c:	000007ff 	.word	0x000007ff
10013d90:	ff7fffff 	.word	0xff7fffff

10013d94 <__aeabi_ddiv>:
10013d94:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d96:	4656      	mov	r6, sl
10013d98:	464d      	mov	r5, r9
10013d9a:	4644      	mov	r4, r8
10013d9c:	465f      	mov	r7, fp
10013d9e:	b4f0      	push	{r4, r5, r6, r7}
10013da0:	001d      	movs	r5, r3
10013da2:	030e      	lsls	r6, r1, #12
10013da4:	004c      	lsls	r4, r1, #1
10013da6:	0fcb      	lsrs	r3, r1, #31
10013da8:	b087      	sub	sp, #28
10013daa:	0007      	movs	r7, r0
10013dac:	4692      	mov	sl, r2
10013dae:	4681      	mov	r9, r0
10013db0:	0b36      	lsrs	r6, r6, #12
10013db2:	0d64      	lsrs	r4, r4, #21
10013db4:	4698      	mov	r8, r3
10013db6:	d06a      	beq.n	10013e8e <__aeabi_ddiv+0xfa>
10013db8:	4b6d      	ldr	r3, [pc, #436]	; (10013f70 <__aeabi_ddiv+0x1dc>)
10013dba:	429c      	cmp	r4, r3
10013dbc:	d035      	beq.n	10013e2a <__aeabi_ddiv+0x96>
10013dbe:	2280      	movs	r2, #128	; 0x80
10013dc0:	0f43      	lsrs	r3, r0, #29
10013dc2:	0412      	lsls	r2, r2, #16
10013dc4:	4313      	orrs	r3, r2
10013dc6:	00f6      	lsls	r6, r6, #3
10013dc8:	431e      	orrs	r6, r3
10013dca:	00c3      	lsls	r3, r0, #3
10013dcc:	4699      	mov	r9, r3
10013dce:	4b69      	ldr	r3, [pc, #420]	; (10013f74 <__aeabi_ddiv+0x1e0>)
10013dd0:	2700      	movs	r7, #0
10013dd2:	469c      	mov	ip, r3
10013dd4:	2300      	movs	r3, #0
10013dd6:	4464      	add	r4, ip
10013dd8:	9302      	str	r3, [sp, #8]
10013dda:	032b      	lsls	r3, r5, #12
10013ddc:	0068      	lsls	r0, r5, #1
10013dde:	0b1b      	lsrs	r3, r3, #12
10013de0:	0fed      	lsrs	r5, r5, #31
10013de2:	4651      	mov	r1, sl
10013de4:	469b      	mov	fp, r3
10013de6:	0d40      	lsrs	r0, r0, #21
10013de8:	9500      	str	r5, [sp, #0]
10013dea:	d100      	bne.n	10013dee <__aeabi_ddiv+0x5a>
10013dec:	e078      	b.n	10013ee0 <__aeabi_ddiv+0x14c>
10013dee:	4b60      	ldr	r3, [pc, #384]	; (10013f70 <__aeabi_ddiv+0x1dc>)
10013df0:	4298      	cmp	r0, r3
10013df2:	d06c      	beq.n	10013ece <__aeabi_ddiv+0x13a>
10013df4:	465b      	mov	r3, fp
10013df6:	00da      	lsls	r2, r3, #3
10013df8:	0f4b      	lsrs	r3, r1, #29
10013dfa:	2180      	movs	r1, #128	; 0x80
10013dfc:	0409      	lsls	r1, r1, #16
10013dfe:	430b      	orrs	r3, r1
10013e00:	4313      	orrs	r3, r2
10013e02:	469b      	mov	fp, r3
10013e04:	4653      	mov	r3, sl
10013e06:	00d9      	lsls	r1, r3, #3
10013e08:	4b5a      	ldr	r3, [pc, #360]	; (10013f74 <__aeabi_ddiv+0x1e0>)
10013e0a:	469c      	mov	ip, r3
10013e0c:	2300      	movs	r3, #0
10013e0e:	4460      	add	r0, ip
10013e10:	4642      	mov	r2, r8
10013e12:	1a20      	subs	r0, r4, r0
10013e14:	406a      	eors	r2, r5
10013e16:	4692      	mov	sl, r2
10013e18:	9001      	str	r0, [sp, #4]
10013e1a:	431f      	orrs	r7, r3
10013e1c:	2f0f      	cmp	r7, #15
10013e1e:	d900      	bls.n	10013e22 <__aeabi_ddiv+0x8e>
10013e20:	e0b0      	b.n	10013f84 <__aeabi_ddiv+0x1f0>
10013e22:	4855      	ldr	r0, [pc, #340]	; (10013f78 <__aeabi_ddiv+0x1e4>)
10013e24:	00bf      	lsls	r7, r7, #2
10013e26:	59c0      	ldr	r0, [r0, r7]
10013e28:	4687      	mov	pc, r0
10013e2a:	4337      	orrs	r7, r6
10013e2c:	d000      	beq.n	10013e30 <__aeabi_ddiv+0x9c>
10013e2e:	e088      	b.n	10013f42 <__aeabi_ddiv+0x1ae>
10013e30:	2300      	movs	r3, #0
10013e32:	4699      	mov	r9, r3
10013e34:	3302      	adds	r3, #2
10013e36:	2708      	movs	r7, #8
10013e38:	2600      	movs	r6, #0
10013e3a:	9302      	str	r3, [sp, #8]
10013e3c:	e7cd      	b.n	10013dda <__aeabi_ddiv+0x46>
10013e3e:	4643      	mov	r3, r8
10013e40:	46b3      	mov	fp, r6
10013e42:	4649      	mov	r1, r9
10013e44:	9300      	str	r3, [sp, #0]
10013e46:	9b02      	ldr	r3, [sp, #8]
10013e48:	9a00      	ldr	r2, [sp, #0]
10013e4a:	4692      	mov	sl, r2
10013e4c:	2b02      	cmp	r3, #2
10013e4e:	d000      	beq.n	10013e52 <__aeabi_ddiv+0xbe>
10013e50:	e1bf      	b.n	100141d2 <__aeabi_ddiv+0x43e>
10013e52:	2100      	movs	r1, #0
10013e54:	4653      	mov	r3, sl
10013e56:	2201      	movs	r2, #1
10013e58:	2600      	movs	r6, #0
10013e5a:	4689      	mov	r9, r1
10013e5c:	401a      	ands	r2, r3
10013e5e:	4b44      	ldr	r3, [pc, #272]	; (10013f70 <__aeabi_ddiv+0x1dc>)
10013e60:	2100      	movs	r1, #0
10013e62:	0336      	lsls	r6, r6, #12
10013e64:	0d0c      	lsrs	r4, r1, #20
10013e66:	0524      	lsls	r4, r4, #20
10013e68:	0b36      	lsrs	r6, r6, #12
10013e6a:	4326      	orrs	r6, r4
10013e6c:	4c43      	ldr	r4, [pc, #268]	; (10013f7c <__aeabi_ddiv+0x1e8>)
10013e6e:	051b      	lsls	r3, r3, #20
10013e70:	4026      	ands	r6, r4
10013e72:	431e      	orrs	r6, r3
10013e74:	0076      	lsls	r6, r6, #1
10013e76:	07d2      	lsls	r2, r2, #31
10013e78:	0876      	lsrs	r6, r6, #1
10013e7a:	4316      	orrs	r6, r2
10013e7c:	4648      	mov	r0, r9
10013e7e:	0031      	movs	r1, r6
10013e80:	b007      	add	sp, #28
10013e82:	bc3c      	pop	{r2, r3, r4, r5}
10013e84:	4690      	mov	r8, r2
10013e86:	4699      	mov	r9, r3
10013e88:	46a2      	mov	sl, r4
10013e8a:	46ab      	mov	fp, r5
10013e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013e8e:	0033      	movs	r3, r6
10013e90:	4303      	orrs	r3, r0
10013e92:	d04f      	beq.n	10013f34 <__aeabi_ddiv+0x1a0>
10013e94:	2e00      	cmp	r6, #0
10013e96:	d100      	bne.n	10013e9a <__aeabi_ddiv+0x106>
10013e98:	e1bc      	b.n	10014214 <__aeabi_ddiv+0x480>
10013e9a:	0030      	movs	r0, r6
10013e9c:	f7fc fa8c 	bl	100103b8 <__clzsi2>
10013ea0:	0003      	movs	r3, r0
10013ea2:	3b0b      	subs	r3, #11
10013ea4:	2b1c      	cmp	r3, #28
10013ea6:	dd00      	ble.n	10013eaa <__aeabi_ddiv+0x116>
10013ea8:	e1ad      	b.n	10014206 <__aeabi_ddiv+0x472>
10013eaa:	221d      	movs	r2, #29
10013eac:	0001      	movs	r1, r0
10013eae:	1ad3      	subs	r3, r2, r3
10013eb0:	3908      	subs	r1, #8
10013eb2:	003a      	movs	r2, r7
10013eb4:	408f      	lsls	r7, r1
10013eb6:	408e      	lsls	r6, r1
10013eb8:	40da      	lsrs	r2, r3
10013eba:	46b9      	mov	r9, r7
10013ebc:	4316      	orrs	r6, r2
10013ebe:	4b30      	ldr	r3, [pc, #192]	; (10013f80 <__aeabi_ddiv+0x1ec>)
10013ec0:	2700      	movs	r7, #0
10013ec2:	469c      	mov	ip, r3
10013ec4:	2300      	movs	r3, #0
10013ec6:	4460      	add	r0, ip
10013ec8:	4244      	negs	r4, r0
10013eca:	9302      	str	r3, [sp, #8]
10013ecc:	e785      	b.n	10013dda <__aeabi_ddiv+0x46>
10013ece:	4653      	mov	r3, sl
10013ed0:	465a      	mov	r2, fp
10013ed2:	4313      	orrs	r3, r2
10013ed4:	d12c      	bne.n	10013f30 <__aeabi_ddiv+0x19c>
10013ed6:	2300      	movs	r3, #0
10013ed8:	2100      	movs	r1, #0
10013eda:	469b      	mov	fp, r3
10013edc:	3302      	adds	r3, #2
10013ede:	e797      	b.n	10013e10 <__aeabi_ddiv+0x7c>
10013ee0:	430b      	orrs	r3, r1
10013ee2:	d020      	beq.n	10013f26 <__aeabi_ddiv+0x192>
10013ee4:	465b      	mov	r3, fp
10013ee6:	2b00      	cmp	r3, #0
10013ee8:	d100      	bne.n	10013eec <__aeabi_ddiv+0x158>
10013eea:	e19e      	b.n	1001422a <__aeabi_ddiv+0x496>
10013eec:	4658      	mov	r0, fp
10013eee:	f7fc fa63 	bl	100103b8 <__clzsi2>
10013ef2:	0003      	movs	r3, r0
10013ef4:	3b0b      	subs	r3, #11
10013ef6:	2b1c      	cmp	r3, #28
10013ef8:	dd00      	ble.n	10013efc <__aeabi_ddiv+0x168>
10013efa:	e18f      	b.n	1001421c <__aeabi_ddiv+0x488>
10013efc:	0002      	movs	r2, r0
10013efe:	4659      	mov	r1, fp
10013f00:	3a08      	subs	r2, #8
10013f02:	4091      	lsls	r1, r2
10013f04:	468b      	mov	fp, r1
10013f06:	211d      	movs	r1, #29
10013f08:	1acb      	subs	r3, r1, r3
10013f0a:	4651      	mov	r1, sl
10013f0c:	40d9      	lsrs	r1, r3
10013f0e:	000b      	movs	r3, r1
10013f10:	4659      	mov	r1, fp
10013f12:	430b      	orrs	r3, r1
10013f14:	4651      	mov	r1, sl
10013f16:	469b      	mov	fp, r3
10013f18:	4091      	lsls	r1, r2
10013f1a:	4b19      	ldr	r3, [pc, #100]	; (10013f80 <__aeabi_ddiv+0x1ec>)
10013f1c:	469c      	mov	ip, r3
10013f1e:	4460      	add	r0, ip
10013f20:	4240      	negs	r0, r0
10013f22:	2300      	movs	r3, #0
10013f24:	e774      	b.n	10013e10 <__aeabi_ddiv+0x7c>
10013f26:	2300      	movs	r3, #0
10013f28:	2100      	movs	r1, #0
10013f2a:	469b      	mov	fp, r3
10013f2c:	3301      	adds	r3, #1
10013f2e:	e76f      	b.n	10013e10 <__aeabi_ddiv+0x7c>
10013f30:	2303      	movs	r3, #3
10013f32:	e76d      	b.n	10013e10 <__aeabi_ddiv+0x7c>
10013f34:	2300      	movs	r3, #0
10013f36:	4699      	mov	r9, r3
10013f38:	3301      	adds	r3, #1
10013f3a:	2704      	movs	r7, #4
10013f3c:	2600      	movs	r6, #0
10013f3e:	9302      	str	r3, [sp, #8]
10013f40:	e74b      	b.n	10013dda <__aeabi_ddiv+0x46>
10013f42:	2303      	movs	r3, #3
10013f44:	270c      	movs	r7, #12
10013f46:	9302      	str	r3, [sp, #8]
10013f48:	e747      	b.n	10013dda <__aeabi_ddiv+0x46>
10013f4a:	2201      	movs	r2, #1
10013f4c:	1ad5      	subs	r5, r2, r3
10013f4e:	2d38      	cmp	r5, #56	; 0x38
10013f50:	dc00      	bgt.n	10013f54 <__aeabi_ddiv+0x1c0>
10013f52:	e1b0      	b.n	100142b6 <__aeabi_ddiv+0x522>
10013f54:	4653      	mov	r3, sl
10013f56:	401a      	ands	r2, r3
10013f58:	2100      	movs	r1, #0
10013f5a:	2300      	movs	r3, #0
10013f5c:	2600      	movs	r6, #0
10013f5e:	4689      	mov	r9, r1
10013f60:	e77e      	b.n	10013e60 <__aeabi_ddiv+0xcc>
10013f62:	2300      	movs	r3, #0
10013f64:	2680      	movs	r6, #128	; 0x80
10013f66:	4699      	mov	r9, r3
10013f68:	2200      	movs	r2, #0
10013f6a:	0336      	lsls	r6, r6, #12
10013f6c:	4b00      	ldr	r3, [pc, #0]	; (10013f70 <__aeabi_ddiv+0x1dc>)
10013f6e:	e777      	b.n	10013e60 <__aeabi_ddiv+0xcc>
10013f70:	000007ff 	.word	0x000007ff
10013f74:	fffffc01 	.word	0xfffffc01
10013f78:	100152e0 	.word	0x100152e0
10013f7c:	800fffff 	.word	0x800fffff
10013f80:	000003f3 	.word	0x000003f3
10013f84:	455e      	cmp	r6, fp
10013f86:	d900      	bls.n	10013f8a <__aeabi_ddiv+0x1f6>
10013f88:	e172      	b.n	10014270 <__aeabi_ddiv+0x4dc>
10013f8a:	d100      	bne.n	10013f8e <__aeabi_ddiv+0x1fa>
10013f8c:	e16d      	b.n	1001426a <__aeabi_ddiv+0x4d6>
10013f8e:	9b01      	ldr	r3, [sp, #4]
10013f90:	464d      	mov	r5, r9
10013f92:	3b01      	subs	r3, #1
10013f94:	9301      	str	r3, [sp, #4]
10013f96:	2300      	movs	r3, #0
10013f98:	0034      	movs	r4, r6
10013f9a:	9302      	str	r3, [sp, #8]
10013f9c:	465b      	mov	r3, fp
10013f9e:	021e      	lsls	r6, r3, #8
10013fa0:	0e0b      	lsrs	r3, r1, #24
10013fa2:	431e      	orrs	r6, r3
10013fa4:	020b      	lsls	r3, r1, #8
10013fa6:	9303      	str	r3, [sp, #12]
10013fa8:	0c33      	lsrs	r3, r6, #16
10013faa:	4699      	mov	r9, r3
10013fac:	0433      	lsls	r3, r6, #16
10013fae:	0c1b      	lsrs	r3, r3, #16
10013fb0:	4649      	mov	r1, r9
10013fb2:	0020      	movs	r0, r4
10013fb4:	9300      	str	r3, [sp, #0]
10013fb6:	f7fa feff 	bl	1000edb8 <__aeabi_uidiv>
10013fba:	9b00      	ldr	r3, [sp, #0]
10013fbc:	0037      	movs	r7, r6
10013fbe:	4343      	muls	r3, r0
10013fc0:	0006      	movs	r6, r0
10013fc2:	4649      	mov	r1, r9
10013fc4:	0020      	movs	r0, r4
10013fc6:	4698      	mov	r8, r3
10013fc8:	f7fa ff7c 	bl	1000eec4 <__aeabi_uidivmod>
10013fcc:	0c2c      	lsrs	r4, r5, #16
10013fce:	0409      	lsls	r1, r1, #16
10013fd0:	430c      	orrs	r4, r1
10013fd2:	45a0      	cmp	r8, r4
10013fd4:	d909      	bls.n	10013fea <__aeabi_ddiv+0x256>
10013fd6:	19e4      	adds	r4, r4, r7
10013fd8:	1e73      	subs	r3, r6, #1
10013fda:	42a7      	cmp	r7, r4
10013fdc:	d900      	bls.n	10013fe0 <__aeabi_ddiv+0x24c>
10013fde:	e15c      	b.n	1001429a <__aeabi_ddiv+0x506>
10013fe0:	45a0      	cmp	r8, r4
10013fe2:	d800      	bhi.n	10013fe6 <__aeabi_ddiv+0x252>
10013fe4:	e159      	b.n	1001429a <__aeabi_ddiv+0x506>
10013fe6:	3e02      	subs	r6, #2
10013fe8:	19e4      	adds	r4, r4, r7
10013fea:	4643      	mov	r3, r8
10013fec:	1ae4      	subs	r4, r4, r3
10013fee:	4649      	mov	r1, r9
10013ff0:	0020      	movs	r0, r4
10013ff2:	f7fa fee1 	bl	1000edb8 <__aeabi_uidiv>
10013ff6:	0003      	movs	r3, r0
10013ff8:	9a00      	ldr	r2, [sp, #0]
10013ffa:	4680      	mov	r8, r0
10013ffc:	4353      	muls	r3, r2
10013ffe:	4649      	mov	r1, r9
10014000:	0020      	movs	r0, r4
10014002:	469b      	mov	fp, r3
10014004:	f7fa ff5e 	bl	1000eec4 <__aeabi_uidivmod>
10014008:	042a      	lsls	r2, r5, #16
1001400a:	0409      	lsls	r1, r1, #16
1001400c:	0c12      	lsrs	r2, r2, #16
1001400e:	430a      	orrs	r2, r1
10014010:	4593      	cmp	fp, r2
10014012:	d90d      	bls.n	10014030 <__aeabi_ddiv+0x29c>
10014014:	4643      	mov	r3, r8
10014016:	19d2      	adds	r2, r2, r7
10014018:	3b01      	subs	r3, #1
1001401a:	4297      	cmp	r7, r2
1001401c:	d900      	bls.n	10014020 <__aeabi_ddiv+0x28c>
1001401e:	e13a      	b.n	10014296 <__aeabi_ddiv+0x502>
10014020:	4593      	cmp	fp, r2
10014022:	d800      	bhi.n	10014026 <__aeabi_ddiv+0x292>
10014024:	e137      	b.n	10014296 <__aeabi_ddiv+0x502>
10014026:	2302      	movs	r3, #2
10014028:	425b      	negs	r3, r3
1001402a:	469c      	mov	ip, r3
1001402c:	19d2      	adds	r2, r2, r7
1001402e:	44e0      	add	r8, ip
10014030:	465b      	mov	r3, fp
10014032:	1ad2      	subs	r2, r2, r3
10014034:	4643      	mov	r3, r8
10014036:	0436      	lsls	r6, r6, #16
10014038:	4333      	orrs	r3, r6
1001403a:	469b      	mov	fp, r3
1001403c:	9903      	ldr	r1, [sp, #12]
1001403e:	0c18      	lsrs	r0, r3, #16
10014040:	0c0b      	lsrs	r3, r1, #16
10014042:	001d      	movs	r5, r3
10014044:	9305      	str	r3, [sp, #20]
10014046:	0409      	lsls	r1, r1, #16
10014048:	465b      	mov	r3, fp
1001404a:	0c09      	lsrs	r1, r1, #16
1001404c:	000c      	movs	r4, r1
1001404e:	041b      	lsls	r3, r3, #16
10014050:	0c1b      	lsrs	r3, r3, #16
10014052:	4344      	muls	r4, r0
10014054:	9104      	str	r1, [sp, #16]
10014056:	4359      	muls	r1, r3
10014058:	436b      	muls	r3, r5
1001405a:	4368      	muls	r0, r5
1001405c:	191b      	adds	r3, r3, r4
1001405e:	0c0d      	lsrs	r5, r1, #16
10014060:	18eb      	adds	r3, r5, r3
10014062:	429c      	cmp	r4, r3
10014064:	d903      	bls.n	1001406e <__aeabi_ddiv+0x2da>
10014066:	2480      	movs	r4, #128	; 0x80
10014068:	0264      	lsls	r4, r4, #9
1001406a:	46a4      	mov	ip, r4
1001406c:	4460      	add	r0, ip
1001406e:	0c1c      	lsrs	r4, r3, #16
10014070:	0409      	lsls	r1, r1, #16
10014072:	041b      	lsls	r3, r3, #16
10014074:	0c09      	lsrs	r1, r1, #16
10014076:	1820      	adds	r0, r4, r0
10014078:	185d      	adds	r5, r3, r1
1001407a:	4282      	cmp	r2, r0
1001407c:	d200      	bcs.n	10014080 <__aeabi_ddiv+0x2ec>
1001407e:	e0de      	b.n	1001423e <__aeabi_ddiv+0x4aa>
10014080:	d100      	bne.n	10014084 <__aeabi_ddiv+0x2f0>
10014082:	e0d7      	b.n	10014234 <__aeabi_ddiv+0x4a0>
10014084:	1a16      	subs	r6, r2, r0
10014086:	9b02      	ldr	r3, [sp, #8]
10014088:	469c      	mov	ip, r3
1001408a:	1b5d      	subs	r5, r3, r5
1001408c:	45ac      	cmp	ip, r5
1001408e:	419b      	sbcs	r3, r3
10014090:	425b      	negs	r3, r3
10014092:	1af6      	subs	r6, r6, r3
10014094:	42b7      	cmp	r7, r6
10014096:	d100      	bne.n	1001409a <__aeabi_ddiv+0x306>
10014098:	e106      	b.n	100142a8 <__aeabi_ddiv+0x514>
1001409a:	4649      	mov	r1, r9
1001409c:	0030      	movs	r0, r6
1001409e:	f7fa fe8b 	bl	1000edb8 <__aeabi_uidiv>
100140a2:	9b00      	ldr	r3, [sp, #0]
100140a4:	0004      	movs	r4, r0
100140a6:	4343      	muls	r3, r0
100140a8:	4649      	mov	r1, r9
100140aa:	0030      	movs	r0, r6
100140ac:	4698      	mov	r8, r3
100140ae:	f7fa ff09 	bl	1000eec4 <__aeabi_uidivmod>
100140b2:	0c2e      	lsrs	r6, r5, #16
100140b4:	0409      	lsls	r1, r1, #16
100140b6:	430e      	orrs	r6, r1
100140b8:	45b0      	cmp	r8, r6
100140ba:	d909      	bls.n	100140d0 <__aeabi_ddiv+0x33c>
100140bc:	19f6      	adds	r6, r6, r7
100140be:	1e63      	subs	r3, r4, #1
100140c0:	42b7      	cmp	r7, r6
100140c2:	d900      	bls.n	100140c6 <__aeabi_ddiv+0x332>
100140c4:	e0f3      	b.n	100142ae <__aeabi_ddiv+0x51a>
100140c6:	45b0      	cmp	r8, r6
100140c8:	d800      	bhi.n	100140cc <__aeabi_ddiv+0x338>
100140ca:	e0f0      	b.n	100142ae <__aeabi_ddiv+0x51a>
100140cc:	3c02      	subs	r4, #2
100140ce:	19f6      	adds	r6, r6, r7
100140d0:	4643      	mov	r3, r8
100140d2:	1af3      	subs	r3, r6, r3
100140d4:	4649      	mov	r1, r9
100140d6:	0018      	movs	r0, r3
100140d8:	9302      	str	r3, [sp, #8]
100140da:	f7fa fe6d 	bl	1000edb8 <__aeabi_uidiv>
100140de:	9b00      	ldr	r3, [sp, #0]
100140e0:	0006      	movs	r6, r0
100140e2:	4343      	muls	r3, r0
100140e4:	4649      	mov	r1, r9
100140e6:	9802      	ldr	r0, [sp, #8]
100140e8:	4698      	mov	r8, r3
100140ea:	f7fa feeb 	bl	1000eec4 <__aeabi_uidivmod>
100140ee:	042d      	lsls	r5, r5, #16
100140f0:	0409      	lsls	r1, r1, #16
100140f2:	0c2d      	lsrs	r5, r5, #16
100140f4:	430d      	orrs	r5, r1
100140f6:	45a8      	cmp	r8, r5
100140f8:	d909      	bls.n	1001410e <__aeabi_ddiv+0x37a>
100140fa:	19ed      	adds	r5, r5, r7
100140fc:	1e73      	subs	r3, r6, #1
100140fe:	42af      	cmp	r7, r5
10014100:	d900      	bls.n	10014104 <__aeabi_ddiv+0x370>
10014102:	e0d6      	b.n	100142b2 <__aeabi_ddiv+0x51e>
10014104:	45a8      	cmp	r8, r5
10014106:	d800      	bhi.n	1001410a <__aeabi_ddiv+0x376>
10014108:	e0d3      	b.n	100142b2 <__aeabi_ddiv+0x51e>
1001410a:	3e02      	subs	r6, #2
1001410c:	19ed      	adds	r5, r5, r7
1001410e:	0424      	lsls	r4, r4, #16
10014110:	0021      	movs	r1, r4
10014112:	4643      	mov	r3, r8
10014114:	4331      	orrs	r1, r6
10014116:	9e04      	ldr	r6, [sp, #16]
10014118:	9a05      	ldr	r2, [sp, #20]
1001411a:	0030      	movs	r0, r6
1001411c:	1aed      	subs	r5, r5, r3
1001411e:	040b      	lsls	r3, r1, #16
10014120:	0c0c      	lsrs	r4, r1, #16
10014122:	0c1b      	lsrs	r3, r3, #16
10014124:	4358      	muls	r0, r3
10014126:	4366      	muls	r6, r4
10014128:	4353      	muls	r3, r2
1001412a:	4354      	muls	r4, r2
1001412c:	199a      	adds	r2, r3, r6
1001412e:	0c03      	lsrs	r3, r0, #16
10014130:	189b      	adds	r3, r3, r2
10014132:	429e      	cmp	r6, r3
10014134:	d903      	bls.n	1001413e <__aeabi_ddiv+0x3aa>
10014136:	2280      	movs	r2, #128	; 0x80
10014138:	0252      	lsls	r2, r2, #9
1001413a:	4694      	mov	ip, r2
1001413c:	4464      	add	r4, ip
1001413e:	0c1a      	lsrs	r2, r3, #16
10014140:	0400      	lsls	r0, r0, #16
10014142:	041b      	lsls	r3, r3, #16
10014144:	0c00      	lsrs	r0, r0, #16
10014146:	1914      	adds	r4, r2, r4
10014148:	181b      	adds	r3, r3, r0
1001414a:	42a5      	cmp	r5, r4
1001414c:	d350      	bcc.n	100141f0 <__aeabi_ddiv+0x45c>
1001414e:	d04d      	beq.n	100141ec <__aeabi_ddiv+0x458>
10014150:	2301      	movs	r3, #1
10014152:	4319      	orrs	r1, r3
10014154:	4a96      	ldr	r2, [pc, #600]	; (100143b0 <__aeabi_ddiv+0x61c>)
10014156:	9b01      	ldr	r3, [sp, #4]
10014158:	4694      	mov	ip, r2
1001415a:	4463      	add	r3, ip
1001415c:	2b00      	cmp	r3, #0
1001415e:	dc00      	bgt.n	10014162 <__aeabi_ddiv+0x3ce>
10014160:	e6f3      	b.n	10013f4a <__aeabi_ddiv+0x1b6>
10014162:	074a      	lsls	r2, r1, #29
10014164:	d009      	beq.n	1001417a <__aeabi_ddiv+0x3e6>
10014166:	220f      	movs	r2, #15
10014168:	400a      	ands	r2, r1
1001416a:	2a04      	cmp	r2, #4
1001416c:	d005      	beq.n	1001417a <__aeabi_ddiv+0x3e6>
1001416e:	1d0a      	adds	r2, r1, #4
10014170:	428a      	cmp	r2, r1
10014172:	4189      	sbcs	r1, r1
10014174:	4249      	negs	r1, r1
10014176:	448b      	add	fp, r1
10014178:	0011      	movs	r1, r2
1001417a:	465a      	mov	r2, fp
1001417c:	01d2      	lsls	r2, r2, #7
1001417e:	d508      	bpl.n	10014192 <__aeabi_ddiv+0x3fe>
10014180:	465a      	mov	r2, fp
10014182:	4b8c      	ldr	r3, [pc, #560]	; (100143b4 <__aeabi_ddiv+0x620>)
10014184:	401a      	ands	r2, r3
10014186:	4693      	mov	fp, r2
10014188:	2280      	movs	r2, #128	; 0x80
1001418a:	00d2      	lsls	r2, r2, #3
1001418c:	4694      	mov	ip, r2
1001418e:	9b01      	ldr	r3, [sp, #4]
10014190:	4463      	add	r3, ip
10014192:	4a89      	ldr	r2, [pc, #548]	; (100143b8 <__aeabi_ddiv+0x624>)
10014194:	4293      	cmp	r3, r2
10014196:	dd00      	ble.n	1001419a <__aeabi_ddiv+0x406>
10014198:	e65b      	b.n	10013e52 <__aeabi_ddiv+0xbe>
1001419a:	465a      	mov	r2, fp
1001419c:	08c9      	lsrs	r1, r1, #3
1001419e:	0750      	lsls	r0, r2, #29
100141a0:	4308      	orrs	r0, r1
100141a2:	0256      	lsls	r6, r2, #9
100141a4:	4651      	mov	r1, sl
100141a6:	2201      	movs	r2, #1
100141a8:	055b      	lsls	r3, r3, #21
100141aa:	4681      	mov	r9, r0
100141ac:	0b36      	lsrs	r6, r6, #12
100141ae:	0d5b      	lsrs	r3, r3, #21
100141b0:	400a      	ands	r2, r1
100141b2:	e655      	b.n	10013e60 <__aeabi_ddiv+0xcc>
100141b4:	2380      	movs	r3, #128	; 0x80
100141b6:	031b      	lsls	r3, r3, #12
100141b8:	421e      	tst	r6, r3
100141ba:	d011      	beq.n	100141e0 <__aeabi_ddiv+0x44c>
100141bc:	465a      	mov	r2, fp
100141be:	421a      	tst	r2, r3
100141c0:	d10e      	bne.n	100141e0 <__aeabi_ddiv+0x44c>
100141c2:	465e      	mov	r6, fp
100141c4:	431e      	orrs	r6, r3
100141c6:	0336      	lsls	r6, r6, #12
100141c8:	0b36      	lsrs	r6, r6, #12
100141ca:	002a      	movs	r2, r5
100141cc:	4689      	mov	r9, r1
100141ce:	4b7b      	ldr	r3, [pc, #492]	; (100143bc <__aeabi_ddiv+0x628>)
100141d0:	e646      	b.n	10013e60 <__aeabi_ddiv+0xcc>
100141d2:	2b03      	cmp	r3, #3
100141d4:	d100      	bne.n	100141d8 <__aeabi_ddiv+0x444>
100141d6:	e0e1      	b.n	1001439c <__aeabi_ddiv+0x608>
100141d8:	2b01      	cmp	r3, #1
100141da:	d1bb      	bne.n	10014154 <__aeabi_ddiv+0x3c0>
100141dc:	401a      	ands	r2, r3
100141de:	e6bb      	b.n	10013f58 <__aeabi_ddiv+0x1c4>
100141e0:	431e      	orrs	r6, r3
100141e2:	0336      	lsls	r6, r6, #12
100141e4:	0b36      	lsrs	r6, r6, #12
100141e6:	4642      	mov	r2, r8
100141e8:	4b74      	ldr	r3, [pc, #464]	; (100143bc <__aeabi_ddiv+0x628>)
100141ea:	e639      	b.n	10013e60 <__aeabi_ddiv+0xcc>
100141ec:	2b00      	cmp	r3, #0
100141ee:	d0b1      	beq.n	10014154 <__aeabi_ddiv+0x3c0>
100141f0:	197d      	adds	r5, r7, r5
100141f2:	1e4a      	subs	r2, r1, #1
100141f4:	42af      	cmp	r7, r5
100141f6:	d952      	bls.n	1001429e <__aeabi_ddiv+0x50a>
100141f8:	0011      	movs	r1, r2
100141fa:	42a5      	cmp	r5, r4
100141fc:	d1a8      	bne.n	10014150 <__aeabi_ddiv+0x3bc>
100141fe:	9a03      	ldr	r2, [sp, #12]
10014200:	429a      	cmp	r2, r3
10014202:	d1a5      	bne.n	10014150 <__aeabi_ddiv+0x3bc>
10014204:	e7a6      	b.n	10014154 <__aeabi_ddiv+0x3c0>
10014206:	0003      	movs	r3, r0
10014208:	003e      	movs	r6, r7
1001420a:	3b28      	subs	r3, #40	; 0x28
1001420c:	409e      	lsls	r6, r3
1001420e:	2300      	movs	r3, #0
10014210:	4699      	mov	r9, r3
10014212:	e654      	b.n	10013ebe <__aeabi_ddiv+0x12a>
10014214:	f7fc f8d0 	bl	100103b8 <__clzsi2>
10014218:	3020      	adds	r0, #32
1001421a:	e641      	b.n	10013ea0 <__aeabi_ddiv+0x10c>
1001421c:	0003      	movs	r3, r0
1001421e:	4652      	mov	r2, sl
10014220:	3b28      	subs	r3, #40	; 0x28
10014222:	409a      	lsls	r2, r3
10014224:	2100      	movs	r1, #0
10014226:	4693      	mov	fp, r2
10014228:	e677      	b.n	10013f1a <__aeabi_ddiv+0x186>
1001422a:	4650      	mov	r0, sl
1001422c:	f7fc f8c4 	bl	100103b8 <__clzsi2>
10014230:	3020      	adds	r0, #32
10014232:	e65e      	b.n	10013ef2 <__aeabi_ddiv+0x15e>
10014234:	9b02      	ldr	r3, [sp, #8]
10014236:	2600      	movs	r6, #0
10014238:	42ab      	cmp	r3, r5
1001423a:	d300      	bcc.n	1001423e <__aeabi_ddiv+0x4aa>
1001423c:	e723      	b.n	10014086 <__aeabi_ddiv+0x2f2>
1001423e:	9e03      	ldr	r6, [sp, #12]
10014240:	9902      	ldr	r1, [sp, #8]
10014242:	46b4      	mov	ip, r6
10014244:	4461      	add	r1, ip
10014246:	4688      	mov	r8, r1
10014248:	45b0      	cmp	r8, r6
1001424a:	41b6      	sbcs	r6, r6
1001424c:	465b      	mov	r3, fp
1001424e:	4276      	negs	r6, r6
10014250:	19f6      	adds	r6, r6, r7
10014252:	18b2      	adds	r2, r6, r2
10014254:	3b01      	subs	r3, #1
10014256:	9102      	str	r1, [sp, #8]
10014258:	4297      	cmp	r7, r2
1001425a:	d213      	bcs.n	10014284 <__aeabi_ddiv+0x4f0>
1001425c:	4290      	cmp	r0, r2
1001425e:	d84f      	bhi.n	10014300 <__aeabi_ddiv+0x56c>
10014260:	d100      	bne.n	10014264 <__aeabi_ddiv+0x4d0>
10014262:	e08e      	b.n	10014382 <__aeabi_ddiv+0x5ee>
10014264:	1a16      	subs	r6, r2, r0
10014266:	469b      	mov	fp, r3
10014268:	e70d      	b.n	10014086 <__aeabi_ddiv+0x2f2>
1001426a:	4589      	cmp	r9, r1
1001426c:	d200      	bcs.n	10014270 <__aeabi_ddiv+0x4dc>
1001426e:	e68e      	b.n	10013f8e <__aeabi_ddiv+0x1fa>
10014270:	0874      	lsrs	r4, r6, #1
10014272:	464b      	mov	r3, r9
10014274:	07f6      	lsls	r6, r6, #31
10014276:	0035      	movs	r5, r6
10014278:	085b      	lsrs	r3, r3, #1
1001427a:	431d      	orrs	r5, r3
1001427c:	464b      	mov	r3, r9
1001427e:	07db      	lsls	r3, r3, #31
10014280:	9302      	str	r3, [sp, #8]
10014282:	e68b      	b.n	10013f9c <__aeabi_ddiv+0x208>
10014284:	4297      	cmp	r7, r2
10014286:	d1ed      	bne.n	10014264 <__aeabi_ddiv+0x4d0>
10014288:	9903      	ldr	r1, [sp, #12]
1001428a:	9c02      	ldr	r4, [sp, #8]
1001428c:	42a1      	cmp	r1, r4
1001428e:	d9e5      	bls.n	1001425c <__aeabi_ddiv+0x4c8>
10014290:	1a3e      	subs	r6, r7, r0
10014292:	469b      	mov	fp, r3
10014294:	e6f7      	b.n	10014086 <__aeabi_ddiv+0x2f2>
10014296:	4698      	mov	r8, r3
10014298:	e6ca      	b.n	10014030 <__aeabi_ddiv+0x29c>
1001429a:	001e      	movs	r6, r3
1001429c:	e6a5      	b.n	10013fea <__aeabi_ddiv+0x256>
1001429e:	42ac      	cmp	r4, r5
100142a0:	d83e      	bhi.n	10014320 <__aeabi_ddiv+0x58c>
100142a2:	d074      	beq.n	1001438e <__aeabi_ddiv+0x5fa>
100142a4:	0011      	movs	r1, r2
100142a6:	e753      	b.n	10014150 <__aeabi_ddiv+0x3bc>
100142a8:	2101      	movs	r1, #1
100142aa:	4249      	negs	r1, r1
100142ac:	e752      	b.n	10014154 <__aeabi_ddiv+0x3c0>
100142ae:	001c      	movs	r4, r3
100142b0:	e70e      	b.n	100140d0 <__aeabi_ddiv+0x33c>
100142b2:	001e      	movs	r6, r3
100142b4:	e72b      	b.n	1001410e <__aeabi_ddiv+0x37a>
100142b6:	2d1f      	cmp	r5, #31
100142b8:	dc3c      	bgt.n	10014334 <__aeabi_ddiv+0x5a0>
100142ba:	2320      	movs	r3, #32
100142bc:	000a      	movs	r2, r1
100142be:	4658      	mov	r0, fp
100142c0:	1b5b      	subs	r3, r3, r5
100142c2:	4098      	lsls	r0, r3
100142c4:	40ea      	lsrs	r2, r5
100142c6:	4099      	lsls	r1, r3
100142c8:	4302      	orrs	r2, r0
100142ca:	1e48      	subs	r0, r1, #1
100142cc:	4181      	sbcs	r1, r0
100142ce:	465e      	mov	r6, fp
100142d0:	4311      	orrs	r1, r2
100142d2:	40ee      	lsrs	r6, r5
100142d4:	074b      	lsls	r3, r1, #29
100142d6:	d009      	beq.n	100142ec <__aeabi_ddiv+0x558>
100142d8:	230f      	movs	r3, #15
100142da:	400b      	ands	r3, r1
100142dc:	2b04      	cmp	r3, #4
100142de:	d005      	beq.n	100142ec <__aeabi_ddiv+0x558>
100142e0:	000b      	movs	r3, r1
100142e2:	1d19      	adds	r1, r3, #4
100142e4:	4299      	cmp	r1, r3
100142e6:	419b      	sbcs	r3, r3
100142e8:	425b      	negs	r3, r3
100142ea:	18f6      	adds	r6, r6, r3
100142ec:	0233      	lsls	r3, r6, #8
100142ee:	d53c      	bpl.n	1001436a <__aeabi_ddiv+0x5d6>
100142f0:	4653      	mov	r3, sl
100142f2:	2201      	movs	r2, #1
100142f4:	2100      	movs	r1, #0
100142f6:	401a      	ands	r2, r3
100142f8:	2600      	movs	r6, #0
100142fa:	2301      	movs	r3, #1
100142fc:	4689      	mov	r9, r1
100142fe:	e5af      	b.n	10013e60 <__aeabi_ddiv+0xcc>
10014300:	2302      	movs	r3, #2
10014302:	425b      	negs	r3, r3
10014304:	469c      	mov	ip, r3
10014306:	9c03      	ldr	r4, [sp, #12]
10014308:	44e3      	add	fp, ip
1001430a:	46a4      	mov	ip, r4
1001430c:	9b02      	ldr	r3, [sp, #8]
1001430e:	4463      	add	r3, ip
10014310:	4698      	mov	r8, r3
10014312:	45a0      	cmp	r8, r4
10014314:	41b6      	sbcs	r6, r6
10014316:	4276      	negs	r6, r6
10014318:	19f6      	adds	r6, r6, r7
1001431a:	9302      	str	r3, [sp, #8]
1001431c:	18b2      	adds	r2, r6, r2
1001431e:	e6b1      	b.n	10014084 <__aeabi_ddiv+0x2f0>
10014320:	9803      	ldr	r0, [sp, #12]
10014322:	1e8a      	subs	r2, r1, #2
10014324:	0041      	lsls	r1, r0, #1
10014326:	4281      	cmp	r1, r0
10014328:	41b6      	sbcs	r6, r6
1001432a:	4276      	negs	r6, r6
1001432c:	19f6      	adds	r6, r6, r7
1001432e:	19ad      	adds	r5, r5, r6
10014330:	9103      	str	r1, [sp, #12]
10014332:	e761      	b.n	100141f8 <__aeabi_ddiv+0x464>
10014334:	221f      	movs	r2, #31
10014336:	4252      	negs	r2, r2
10014338:	1ad3      	subs	r3, r2, r3
1001433a:	465a      	mov	r2, fp
1001433c:	40da      	lsrs	r2, r3
1001433e:	0013      	movs	r3, r2
10014340:	2d20      	cmp	r5, #32
10014342:	d029      	beq.n	10014398 <__aeabi_ddiv+0x604>
10014344:	2240      	movs	r2, #64	; 0x40
10014346:	4658      	mov	r0, fp
10014348:	1b55      	subs	r5, r2, r5
1001434a:	40a8      	lsls	r0, r5
1001434c:	4301      	orrs	r1, r0
1001434e:	1e48      	subs	r0, r1, #1
10014350:	4181      	sbcs	r1, r0
10014352:	2007      	movs	r0, #7
10014354:	430b      	orrs	r3, r1
10014356:	4018      	ands	r0, r3
10014358:	2600      	movs	r6, #0
1001435a:	2800      	cmp	r0, #0
1001435c:	d009      	beq.n	10014372 <__aeabi_ddiv+0x5de>
1001435e:	220f      	movs	r2, #15
10014360:	2600      	movs	r6, #0
10014362:	401a      	ands	r2, r3
10014364:	0019      	movs	r1, r3
10014366:	2a04      	cmp	r2, #4
10014368:	d1bb      	bne.n	100142e2 <__aeabi_ddiv+0x54e>
1001436a:	000b      	movs	r3, r1
1001436c:	0770      	lsls	r0, r6, #29
1001436e:	0276      	lsls	r6, r6, #9
10014370:	0b36      	lsrs	r6, r6, #12
10014372:	08db      	lsrs	r3, r3, #3
10014374:	4303      	orrs	r3, r0
10014376:	4699      	mov	r9, r3
10014378:	2201      	movs	r2, #1
1001437a:	4653      	mov	r3, sl
1001437c:	401a      	ands	r2, r3
1001437e:	2300      	movs	r3, #0
10014380:	e56e      	b.n	10013e60 <__aeabi_ddiv+0xcc>
10014382:	9902      	ldr	r1, [sp, #8]
10014384:	428d      	cmp	r5, r1
10014386:	d8bb      	bhi.n	10014300 <__aeabi_ddiv+0x56c>
10014388:	469b      	mov	fp, r3
1001438a:	2600      	movs	r6, #0
1001438c:	e67b      	b.n	10014086 <__aeabi_ddiv+0x2f2>
1001438e:	9803      	ldr	r0, [sp, #12]
10014390:	4298      	cmp	r0, r3
10014392:	d3c5      	bcc.n	10014320 <__aeabi_ddiv+0x58c>
10014394:	0011      	movs	r1, r2
10014396:	e732      	b.n	100141fe <__aeabi_ddiv+0x46a>
10014398:	2000      	movs	r0, #0
1001439a:	e7d7      	b.n	1001434c <__aeabi_ddiv+0x5b8>
1001439c:	2680      	movs	r6, #128	; 0x80
1001439e:	465b      	mov	r3, fp
100143a0:	0336      	lsls	r6, r6, #12
100143a2:	431e      	orrs	r6, r3
100143a4:	0336      	lsls	r6, r6, #12
100143a6:	0b36      	lsrs	r6, r6, #12
100143a8:	9a00      	ldr	r2, [sp, #0]
100143aa:	4689      	mov	r9, r1
100143ac:	4b03      	ldr	r3, [pc, #12]	; (100143bc <__aeabi_ddiv+0x628>)
100143ae:	e557      	b.n	10013e60 <__aeabi_ddiv+0xcc>
100143b0:	000003ff 	.word	0x000003ff
100143b4:	feffffff 	.word	0xfeffffff
100143b8:	000007fe 	.word	0x000007fe
100143bc:	000007ff 	.word	0x000007ff
100143c0:	100090ac 	.word	0x100090ac
100143c4:	100090ba 	.word	0x100090ba
100143c8:	100090c8 	.word	0x100090c8
100143cc:	100090d6 	.word	0x100090d6
100143d0:	100090e4 	.word	0x100090e4
100143d4:	100090f2 	.word	0x100090f2
100143d8:	10009100 	.word	0x10009100
100143dc:	10009110 	.word	0x10009110
100143e0:	10009120 	.word	0x10009120
100143e4:	10009130 	.word	0x10009130
100143e8:	10009140 	.word	0x10009140
100143ec:	10009150 	.word	0x10009150
100143f0:	10009160 	.word	0x10009160
100143f4:	10009170 	.word	0x10009170
100143f8:	10009180 	.word	0x10009180
100143fc:	10009190 	.word	0x10009190
10014400:	100091a0 	.word	0x100091a0
10014404:	100091b0 	.word	0x100091b0
10014408:	100091c0 	.word	0x100091c0
1001440c:	100091d0 	.word	0x100091d0
10014410:	100091e0 	.word	0x100091e0
10014414:	100091f0 	.word	0x100091f0
10014418:	10009200 	.word	0x10009200
1001441c:	10009210 	.word	0x10009210
10014420:	10009220 	.word	0x10009220
10014424:	10009230 	.word	0x10009230
10014428:	10009240 	.word	0x10009240
1001442c:	10009250 	.word	0x10009250
10014430:	1000925e 	.word	0x1000925e
10014434:	1000926c 	.word	0x1000926c
10014438:	1000927a 	.word	0x1000927a
1001443c:	10009288 	.word	0x10009288
10014440:	10009296 	.word	0x10009296
10014444:	100092a4 	.word	0x100092a4
10014448:	100092b2 	.word	0x100092b2
1001444c:	100092c0 	.word	0x100092c0
10014450:	100092d0 	.word	0x100092d0
10014454:	100092e0 	.word	0x100092e0
10014458:	100092f0 	.word	0x100092f0
1001445c:	10009300 	.word	0x10009300
10014460:	10009310 	.word	0x10009310
10014464:	10009320 	.word	0x10009320
10014468:	10009330 	.word	0x10009330
1001446c:	10009340 	.word	0x10009340
10014470:	10009350 	.word	0x10009350
10014474:	10009360 	.word	0x10009360
10014478:	10009370 	.word	0x10009370
1001447c:	10009380 	.word	0x10009380
10014480:	10009390 	.word	0x10009390
10014484:	100093a0 	.word	0x100093a0
10014488:	100093b0 	.word	0x100093b0
1001448c:	100093c0 	.word	0x100093c0
10014490:	100093ce 	.word	0x100093ce
10014494:	100093dc 	.word	0x100093dc
10014498:	1000941c 	.word	0x1000941c
1001449c:	10009444 	.word	0x10009444
100144a0:	1000946c 	.word	0x1000946c
100144a4:	10009494 	.word	0x10009494
100144a8:	100096d4 	.word	0x100096d4
100144ac:	100094c4 	.word	0x100094c4
100144b0:	100094dc 	.word	0x100094dc
100144b4:	10009554 	.word	0x10009554
100144b8:	1000956c 	.word	0x1000956c
100144bc:	100094f4 	.word	0x100094f4
100144c0:	1000950c 	.word	0x1000950c
100144c4:	10009524 	.word	0x10009524
100144c8:	1000953c 	.word	0x1000953c
100144cc:	10009584 	.word	0x10009584
100144d0:	10009848 	.word	0x10009848
100144d4:	10009848 	.word	0x10009848
100144d8:	10009848 	.word	0x10009848
100144dc:	10009848 	.word	0x10009848
100144e0:	10009848 	.word	0x10009848
100144e4:	10009848 	.word	0x10009848
100144e8:	10009848 	.word	0x10009848
100144ec:	10009848 	.word	0x10009848
100144f0:	1000962c 	.word	0x1000962c
100144f4:	10009644 	.word	0x10009644
100144f8:	1000965c 	.word	0x1000965c
100144fc:	100096ea 	.word	0x100096ea
10014500:	100095b4 	.word	0x100095b4
10014504:	10009848 	.word	0x10009848
10014508:	10009848 	.word	0x10009848
1001450c:	10009848 	.word	0x10009848
10014510:	10009848 	.word	0x10009848
10014514:	10009848 	.word	0x10009848
10014518:	10009848 	.word	0x10009848
1001451c:	10009674 	.word	0x10009674
10014520:	1000968c 	.word	0x1000968c
10014524:	100096a4 	.word	0x100096a4
10014528:	100096bc 	.word	0x100096bc
1001452c:	10009848 	.word	0x10009848
10014530:	10009800 	.word	0x10009800
10014534:	10009818 	.word	0x10009818
10014538:	10009848 	.word	0x10009848
1001453c:	10009848 	.word	0x10009848
10014540:	10009716 	.word	0x10009716
10014544:	1000972c 	.word	0x1000972c
10014548:	10009742 	.word	0x10009742
1001454c:	10009758 	.word	0x10009758
10014550:	10009848 	.word	0x10009848
10014554:	10009848 	.word	0x10009848
10014558:	10009848 	.word	0x10009848
1001455c:	10009848 	.word	0x10009848
10014560:	10009848 	.word	0x10009848
10014564:	10009848 	.word	0x10009848
10014568:	10009848 	.word	0x10009848
1001456c:	10009848 	.word	0x10009848
10014570:	10009408 	.word	0x10009408
10014574:	10009430 	.word	0x10009430
10014578:	10009458 	.word	0x10009458
1001457c:	10009480 	.word	0x10009480
10014580:	100094ac 	.word	0x100094ac
10014584:	1000959c 	.word	0x1000959c
10014588:	100095cc 	.word	0x100095cc
1001458c:	100095e4 	.word	0x100095e4
10014590:	100095fc 	.word	0x100095fc
10014594:	10009614 	.word	0x10009614
10014598:	10009700 	.word	0x10009700
1001459c:	1000976e 	.word	0x1000976e
100145a0:	100097e8 	.word	0x100097e8
100145a4:	10009830 	.word	0x10009830
100145a8:	10009f20 	.word	0x10009f20
100145ac:	10009f22 	.word	0x10009f22
100145b0:	10009f08 	.word	0x10009f08
100145b4:	10009f08 	.word	0x10009f08
100145b8:	10009f08 	.word	0x10009f08
100145bc:	10009f20 	.word	0x10009f20
100145c0:	10009f08 	.word	0x10009f08
100145c4:	10009f08 	.word	0x10009f08
100145c8:	1000a76e 	.word	0x1000a76e
100145cc:	1000a7e2 	.word	0x1000a7e2
100145d0:	1000a756 	.word	0x1000a756
100145d4:	1000a7e8 	.word	0x1000a7e8
100145d8:	1000a75c 	.word	0x1000a75c
100145dc:	1000a762 	.word	0x1000a762
100145e0:	1000a768 	.word	0x1000a768
100145e4:	1000ae40 	.word	0x1000ae40
100145e8:	1000ae40 	.word	0x1000ae40
100145ec:	1000ae40 	.word	0x1000ae40
100145f0:	1000ae40 	.word	0x1000ae40
100145f4:	1000ae40 	.word	0x1000ae40
100145f8:	1000ae40 	.word	0x1000ae40
100145fc:	1000ae40 	.word	0x1000ae40
10014600:	1000ae40 	.word	0x1000ae40
10014604:	1000ae40 	.word	0x1000ae40
10014608:	1000ae40 	.word	0x1000ae40
1001460c:	1000ae40 	.word	0x1000ae40
10014610:	1000ae40 	.word	0x1000ae40
10014614:	1000ae40 	.word	0x1000ae40
10014618:	1000ae40 	.word	0x1000ae40
1001461c:	1000ae40 	.word	0x1000ae40
10014620:	1000ae40 	.word	0x1000ae40
10014624:	1000ae40 	.word	0x1000ae40
10014628:	1000ae40 	.word	0x1000ae40
1001462c:	1000ae40 	.word	0x1000ae40
10014630:	1000ae5e 	.word	0x1000ae5e
10014634:	1000ae5e 	.word	0x1000ae5e
10014638:	1000ae5e 	.word	0x1000ae5e
1001463c:	1000ae5e 	.word	0x1000ae5e
10014640:	1000ae5e 	.word	0x1000ae5e
10014644:	1000ae5e 	.word	0x1000ae5e
10014648:	1000ae5e 	.word	0x1000ae5e
1001464c:	1000ae5e 	.word	0x1000ae5e
10014650:	1000ae5e 	.word	0x1000ae5e
10014654:	1000ae5e 	.word	0x1000ae5e
10014658:	1000ae80 	.word	0x1000ae80
1001465c:	1000ae80 	.word	0x1000ae80
10014660:	1000ae80 	.word	0x1000ae80
10014664:	1000ae80 	.word	0x1000ae80
10014668:	1000ae80 	.word	0x1000ae80
1001466c:	1000ae80 	.word	0x1000ae80
10014670:	1000ae80 	.word	0x1000ae80
10014674:	1000ae80 	.word	0x1000ae80
10014678:	1000ae80 	.word	0x1000ae80
1001467c:	1000ae80 	.word	0x1000ae80
10014680:	1000aea2 	.word	0x1000aea2
10014684:	1000aea2 	.word	0x1000aea2
10014688:	1000aea2 	.word	0x1000aea2
1001468c:	1000aea2 	.word	0x1000aea2
10014690:	1000aea2 	.word	0x1000aea2
10014694:	1000aea2 	.word	0x1000aea2
10014698:	1000aebc 	.word	0x1000aebc
1001469c:	1000aebc 	.word	0x1000aebc
100146a0:	1000aebc 	.word	0x1000aebc
100146a4:	1000aebc 	.word	0x1000aebc
100146a8:	1000aebc 	.word	0x1000aebc
100146ac:	1000aebc 	.word	0x1000aebc
100146b0:	1000aebc 	.word	0x1000aebc
100146b4:	1000aebc 	.word	0x1000aebc
100146b8:	1000aebc 	.word	0x1000aebc
100146bc:	1000aed6 	.word	0x1000aed6
100146c0:	1000aed6 	.word	0x1000aed6
100146c4:	1000aef8 	.word	0x1000aef8
100146c8:	1000aef8 	.word	0x1000aef8
100146cc:	1000af12 	.word	0x1000af12
100146d0:	1000aef8 	.word	0x1000aef8
100146d4:	34333231 	.word	0x34333231
100146d8:	00003635 	.word	0x00003635
100146dc:	efcdab00 	.word	0xefcdab00
100146e0:	00efcdab 	.word	0x00efcdab
100146e4:	b2d60600 	.word	0xb2d60600
100146e8:	f8f005f0 	.word	0xf8f005f0
100146ec:	00000000 	.word	0x00000000

100146f0 <ble_mgr_gatt_server_handle>:
	...
10014708:	10009e65 10009ea1 10009e69 00000000     e.......i.......
10014718:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
10014728:	64656c69 00000000 2055544d 6e616843     iled....MTU Chan
10014738:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10014748:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10014758:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10014768:	69766544 64206563 6f637369 63656e6e     Device disconnec
10014778:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10014788:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10014798:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100147a8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100147b8:	6c706d6f 64657465 63757320 73736563     ompleted success
100147c8:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100147d8:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100147e8:	74707972 206e6f69 6f666e69 00000000     ryption info....
100147f8:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10014808:	7320666f 206e6163 69766564 72206563     of scan device r
10014818:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10014828:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10014838:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10014848:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10014858:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10014868:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10014878:	46207473 656c6961 00000064 72696150     st Failed...Pair
10014888:	20676e69 636f7270 72756465 6f632065     ing procedure co
10014898:	656c706d 20646574 63637573 66737365     mpleted successf
100148a8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100148b8:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100148c8:	726f7473 68742065 61702065 6e697269     store the pairin
100148d8:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
100148e8:	4e206e6f 7320746f 74726174 00006465     on Not started..
100148f8:	76616c53 65532065 69727563 52207974     Slave Security R
10014908:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10014918:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10014928:	71655220 74736575 41202d20 65687475      Request - Authe
10014938:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10014948:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10014958:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10014968:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10014978:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10014988:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10014998:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100149a8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100149b8:	206e6f28 6568746f 65442072 65636976     (on other Device
100149c8:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
100149d8:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
100149e8:	74616546 20657275 20746f4e 70707573     Feature Not supp
100149f8:	6574726f 00000064 65746e45 20646572     orted...Entered 
10014a08:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10014a18:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10014a28:	7020666f 20726565 69766564 69206563     of peer device i
10014a38:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10014a48:	00000000 61656c50 75206573 6961706e     ....Please unpai
10014a58:	68742072 65642065 65636976 6f726620     r the device fro
10014a68:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10014a78:	656c6962 65732029 6e697474 6d207367     bile) settings m
10014a88:	20756e65 20646e61 72617473 61702074     enu and start pa
10014a98:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10014aa8:	69747079 52206e6f 65757165 52207473     yption Request R
10014ab8:	796c7065 69614620 0064656c 74696e49     eply Failed.Init
10014ac8:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10014ad8:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10014ae8:	6f697461 6166206e 64656c69 00000000     ation failed....
10014af8:	61656c50 63206573 6b636568 65687420     Please check the
10014b08:	776f7020 61207265 6320646e 656e6e6f      power and conne
10014b18:	6f697463 202f206e 64726168 65726177     ction / hardware
10014b28:	6e6f6320 7463656e 0000726f 454d5441      connector..ATME
10014b38:	4c422d4c 00000045 69766544 6e206563     L-BLE...Device n
10014b48:	20656d61 20746573 6c696166 00006465     ame set failed..
10014b58:	61204442 65726464 67207373 66207465     BD address get f
10014b68:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10014b78:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10014b88:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10014b98:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10014ba8:	20746553 20454c42 69766544 63206563     Set BLE Device c
10014bb8:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10014bc8:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10014bd8:	41206563 65726464 66207373 656c6961     ce Address faile
10014be8:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10014bf8:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10014c08:	76616c53 65732065 69727563 72207974     Slave security r
10014c18:	65757165 66207473 656c6961 00000064     equest failed...
10014c28:	6e6e6f43 65746365 6f742064 65657020     Connected to pee
10014c38:	65642072 65636976 74697720 64612068     r device with ad
10014c48:	73657264 78302073 78323025 78323025     dress 0x%02x%02x
10014c58:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10014c68:	00000000 6e6e6f43 69746365 48206e6f     ....Connection H
10014c78:	6c646e61 64252065 00000000 6f736552     andle %d....Reso
10014c88:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10014c98:	73736572 69616620 2a64656c 0000002a     ress failed**...
10014ca8:	2078614d 626d756e 6f207265 6f632066     Max number of co
10014cb8:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10014cc8:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10014cd8:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10014ce8:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10014cf8:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10014d08:	00000064 20454c42 65766441 73697472     d...BLE Advertis
10014d18:	6e656d65 61642074 73206174 66207465     ement data set f
10014d28:	656c6961 00000064                       ailed...

10014d30 <ble_mgr_gap_handle>:
10014d30:	10009e61 1000a01d 10009e79 00000000     a.......y.......
10014d40:	00000000 1000ab09 10009ed1 10009e75     ............u...
10014d50:	1000a1bd 1000a09d 1000a3c1 1000a1d5     ................
10014d60:	1000a515 1000a659 10009f59 1000ad45     ....Y...Y...E...
	...

10014d7c <app_gap_cb>:
	...
10014d94:	1000bc29 00000000 00000000 1000bb6d     )...........m...
	...
10014dc8:	72617453 20646574 20505448 706d6554     Started HTP Temp
10014dd8:	74617265 20657275 69746f4e 61636966     erature Notifica
10014de8:	6e6f6974 00000000 20505448 706d6554     tion....HTP Temp
10014df8:	74617265 20657275 69746f4e 61636966     erature Notifica
10014e08:	6e6f6974 6f745320 64657070 00000000     tion Stopped....
10014e18:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10014e28:	70704120 6163696c 6e6f6974 69617020      Application pai
10014e38:	20646572 00000000 7373410a 6d6e6769     red .....Assignm
10014e48:	20746e65 3a312e34 616e6520 20656c62     ent 4.1: enable 
10014e58:	6c616568 74206874 65706d65 75746172     health temperatu
10014e68:	73206572 69767265 00206563 202a2a2a     re service .*** 
10014e78:	6c696146 20657275 48206e69 50205054     Failure in HTP P
10014e88:	69666f72 4520656c 6c62616e 00000065     rofile Enable...
10014e98:	7373410a 6d6e6769 20746e65 20312e32     .Assignment 2.1 
10014ea8:	7453203a 20747261 65766441 73697472     : Start Advertis
10014eb8:	00676e69 23230d0a 76644120 69747265     ing...## Adverti
10014ec8:	656d6573 6420746e 20617461 20746573     sement data set 
10014ed8:	6c696166 3a206465 72726520 2520726f     failed : error %
10014ee8:	00000078 7373410a 6d6e6769 20746e65     x....Assignment 
10014ef8:	3a322e33 70704120 6163696c 6e6f6974     3.2: Application
10014f08:	73696420 6e6e6f63 65746365 00002064      disconnected ..
10014f18:	706d6554 74617265 3a657275 20642520     Temperature: %d 
10014f28:	20676544 736c6543 00737569 7373410a     Deg Celsius..Ass
10014f38:	6d6e6769 20746e65 3a312e34 696e4920     ignment 4.1: Ini
10014f48:	65482074 68746c61 6d657420 61726570     t Health tempera
10014f58:	65727574 72657320 65636976 00000020     ture service ...
10014f68:	20505448 61746144 73614220 72632065     HTP Data Base cr
10014f78:	69746165 66206e6f 656c6961 00000064     eation failed...
10014f88:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10014f98:	67655220 65747369 6c622072 6f746575      Register blueto
10014fa8:	2068746f 6e657665 63207374 626c6c61     oth events callb
10014fb8:	736b6361 00000000 4523230a 726f7272     acks.....##Error
10014fc8:	65687720 6552206e 74736967 6e697265      when Registerin
10014fd8:	53202067 31424d41 61672031 61632070     g  SAMB11 gap ca
10014fe8:	61626c6c 00736b63 4523230a 726f7272     llbacks..##Error
10014ff8:	65687720 6552206e 74736967 6e697265      when Registerin
10015008:	53202067 31424d41 74682031 63207470     g  SAMB11 htpt c
10015018:	626c6c61 736b6361 00000000              allbacks....

10015024 <app_htpt_handle>:
	...
10015038:	1000bb35 00000000 00000000 00000000     5...............
10015048:	656d7441 6f43206c 002e7072                       Atmel Corp.

10015053 <CSWTCH.47>:
10015053:	03010300 03030303 03030303 00020303     ................
10015063:	00f05800 00efb610 00efb610 00efb410     .X..............
10015073:	00f04a10 00f04a10 00f04010 00efb410     .J...J...@......
10015083:	00f04a10 00f04010 00f04a10 00efb410     .J...@...J......
10015093:	00f05010 00f05010 00f05010 00f0da10     .P...P...P......
100150a3:	00f6a410 00f56410 00f56410 00f56210     .....d...d...b..
100150b3:	00f67c10 00f67c10 00f66e10 00f56210     .|...|...n...b..
100150c3:	00f67c10 00f66e10 00f67c10 00f56210     .|...n...|...b..
100150d3:	00f68410 00f68410 00f68410 00f88410     ................
100150e3:	00004310 01535400                                .C...

100150e8 <_global_impure_ptr>:
100150e8:	10015354                                TS..

100150ec <fpi.5342>:
100150ec:	00000035 fffffbce 000003cb 00000001     5...............
100150fc:	00000000 6900666e 7974696e 006e6100     ....nf.inity.an.

1001510c <fpinan.5378>:
1001510c:	00000034 fffffbce 000003cb 00000001     4...............
1001511c:	00000000                                ....

10015120 <tinytens>:
10015120:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
10015130:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
10015140:	64ac6f43 11680628                       Co.d(.h.

10015148 <__sf_fake_stdin>:
	...

10015168 <__sf_fake_stdout>:
	...

10015188 <__sf_fake_stderr>:
	...
100151a8:	49534f50 002e0058                       POSIX...

100151b0 <__mprec_tens>:
100151b0:	00000000 3ff00000 00000000 40240000     .......?......$@
100151c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
100151d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
100151e0:	00000000 412e8480 00000000 416312d0     .......A......cA
100151f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
10015200:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
10015210:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
10015220:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
10015230:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
10015240:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
10015250:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
10015260:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
10015270:	79d99db4 44ea7843                       ...yCx.D

10015278 <__mprec_bigtens>:
10015278:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
10015288:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
10015298:	7f73bf3c 75154fdd                       <.s..O.u

100152a0 <p05.5385>:
100152a0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
100152b0:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
100152c0:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
100152d0:	35343332 39383736 64636261 00006665     23456789abcdef..
100152e0:	10013f84 10013e52 10013f58 10013e48     .?..R>..X?..H>..
100152f0:	10013f58 10013f62 10013f58 10013e48     X?..b?..X?..H>..
10015300:	10013e52 10013e52 10013f62 10013e48     R>..R>..b?..H>..
10015310:	10013e3e 10013e3e 10013e3e 100141b4     >>..>>..>>...A..

10015320 <_init>:
10015320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015322:	46c0      	nop			; (mov r8, r8)
10015324:	bcf8      	pop	{r3, r4, r5, r6, r7}
10015326:	bc08      	pop	{r3}
10015328:	469e      	mov	lr, r3
1001532a:	4770      	bx	lr

1001532c <__init_array_start>:
1001532c:	100080b1 	.word	0x100080b1

10015330 <_fini>:
10015330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015332:	46c0      	nop			; (mov r8, r8)
10015334:	bcf8      	pop	{r3, r4, r5, r6, r7}
10015336:	bc08      	pop	{r3}
10015338:	469e      	mov	lr, r3
1001533a:	4770      	bx	lr

1001533c <__fini_array_start>:
1001533c:	10008089 	.word	0x10008089
