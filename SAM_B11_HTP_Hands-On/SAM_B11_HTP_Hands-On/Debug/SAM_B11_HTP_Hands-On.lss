
SAM_B11_HTP_Hands-On.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a51c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  1001251c  1001251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ccc  10012594  10012594  00012594  2**2
                  ALLOC
  3 .stack        00000800  10015260  10015260  00012594  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00012594  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000125bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e811  00000000  00000000  00012670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003565  00000000  00000000  00040e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007d82  00000000  00000000  000443e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000808  00000000  00000000  0004c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000848  00000000  00000000  0004c970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d968  00000000  00000000  0004d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ce62  00000000  00000000  0006ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010c3b9  00000000  00000000  00077982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002004  00000000  00000000  00183d3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001251c 	.word	0x1001251c
10008068:	1001251c 	.word	0x1001251c
1000806c:	10012594 	.word	0x10012594
10008070:	10015260 	.word	0x10015260
10008074:	10012594 	.word	0x10012594
10008078:	10012520 	.word	0x10012520
1000807c:	10012598 	.word	0x10012598
10008080:	100104ad 	.word	0x100104ad
10008084:	1000ba29 	.word	0x1000ba29

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10012594 	.word	0x10012594
100080a8:	00000000 	.word	0x00000000
100080ac:	1001251c 	.word	0x1001251c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10012598 	.word	0x10012598
100080dc:	1001251c 	.word	0x1001251c
100080e0:	1001251c 	.word	0x1001251c
100080e4:	00000000 	.word	0x00000000

100080e8 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
100080e8:	b510      	push	{r4, lr}
100080ea:	b086      	sub	sp, #24
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
100080ec:	a801      	add	r0, sp, #4
100080ee:	4b0c      	ldr	r3, [pc, #48]	; (10008120 <at30tse_init+0x38>)
100080f0:	4798      	blx	r3

	conf.pin_number_pad0 = AT30TSE_PIN_PAD0;
100080f2:	2308      	movs	r3, #8
100080f4:	9302      	str	r3, [sp, #8]
	conf.pin_number_pad1 = AT30TSE_PIN_PAD1;
100080f6:	3301      	adds	r3, #1
100080f8:	9304      	str	r3, [sp, #16]
	
	conf.pinmux_sel_pad0 = AT30TSE_MUX_PAD0;
100080fa:	3b07      	subs	r3, #7
100080fc:	9303      	str	r3, [sp, #12]
	conf.pinmux_sel_pad1 = AT30TSE_MUX_PAD1;
100080fe:	9305      	str	r3, [sp, #20]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_I2C_MODULE, &conf);
10008100:	4c08      	ldr	r4, [pc, #32]	; (10008124 <at30tse_init+0x3c>)
10008102:	aa01      	add	r2, sp, #4
10008104:	4908      	ldr	r1, [pc, #32]	; (10008128 <at30tse_init+0x40>)
10008106:	0020      	movs	r0, r4
10008108:	4b08      	ldr	r3, [pc, #32]	; (1000812c <at30tse_init+0x44>)
1000810a:	4798      	blx	r3
	i2c_enable(dev_inst_at30tse75x.hw);
1000810c:	6822      	ldr	r2, [r4, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000810e:	2128      	movs	r1, #40	; 0x28
10008110:	5c53      	ldrb	r3, [r2, r1]
10008112:	07db      	lsls	r3, r3, #31
10008114:	d4fc      	bmi.n	10008110 <at30tse_init+0x28>
static inline void i2c_enable(I2C *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
10008116:	2301      	movs	r3, #1
10008118:	7513      	strb	r3, [r2, #20]
}
1000811a:	b006      	add	sp, #24
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	10008779 	.word	0x10008779
10008124:	10014074 	.word	0x10014074
10008128:	40003000 	.word	0x40003000
1000812c:	10008791 	.word	0x10008791

10008130 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
10008130:	b570      	push	{r4, r5, r6, lr}
10008132:	b086      	sub	sp, #24
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
10008134:	ac05      	add	r4, sp, #20
10008136:	4301      	orrs	r1, r0
10008138:	7021      	strb	r1, [r4, #0]
	buffer[1] = 0;
1000813a:	2300      	movs	r3, #0
1000813c:	7063      	strb	r3, [r4, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
1000813e:	a903      	add	r1, sp, #12
10008140:	3348      	adds	r3, #72	; 0x48
10008142:	800b      	strh	r3, [r1, #0]
10008144:	2001      	movs	r0, #1
10008146:	8048      	strh	r0, [r1, #2]
10008148:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1,
		.data        = buffer,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
1000814a:	ad01      	add	r5, sp, #4
1000814c:	802b      	strh	r3, [r5, #0]
1000814e:	806a      	strh	r2, [r5, #2]
10008150:	9402      	str	r4, [sp, #8]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = reg_size,
		.data        = buffer,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
10008152:	4e07      	ldr	r6, [pc, #28]	; (10008170 <at30tse_read_register+0x40>)
10008154:	0030      	movs	r0, r6
10008156:	4b07      	ldr	r3, [pc, #28]	; (10008174 <at30tse_read_register+0x44>)
10008158:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
1000815a:	0029      	movs	r1, r5
1000815c:	0030      	movs	r0, r6
1000815e:	4b06      	ldr	r3, [pc, #24]	; (10008178 <at30tse_read_register+0x48>)
10008160:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
10008162:	7820      	ldrb	r0, [r4, #0]
10008164:	0200      	lsls	r0, r0, #8
10008166:	7863      	ldrb	r3, [r4, #1]
10008168:	4318      	orrs	r0, r3
}
1000816a:	b006      	add	sp, #24
1000816c:	bd70      	pop	{r4, r5, r6, pc}
1000816e:	46c0      	nop			; (mov r8, r8)
10008170:	10014074 	.word	0x10014074
10008174:	100088d5 	.word	0x100088d5
10008178:	10008875 	.word	0x10008875

1000817c <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
1000817c:	b510      	push	{r4, lr}
1000817e:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
10008180:	ac03      	add	r4, sp, #12
10008182:	4301      	orrs	r1, r0
10008184:	7021      	strb	r1, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
10008186:	0a19      	lsrs	r1, r3, #8
10008188:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
1000818a:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
1000818c:	a901      	add	r1, sp, #4
1000818e:	2348      	movs	r3, #72	; 0x48
10008190:	800b      	strh	r3, [r1, #0]
10008192:	3201      	adds	r2, #1
10008194:	804a      	strh	r2, [r1, #2]
10008196:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1 + reg_size,
		.data        = data,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
10008198:	4802      	ldr	r0, [pc, #8]	; (100081a4 <at30tse_write_register+0x28>)
1000819a:	4b03      	ldr	r3, [pc, #12]	; (100081a8 <at30tse_write_register+0x2c>)
1000819c:	4798      	blx	r3
}
1000819e:	b004      	add	sp, #16
100081a0:	bd10      	pop	{r4, pc}
100081a2:	46c0      	nop			; (mov r8, r8)
100081a4:	10014074 	.word	0x10014074
100081a8:	100088a5 	.word	0x100088a5

100081ac <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
100081ac:	b570      	push	{r4, r5, r6, lr}
100081ae:	0004      	movs	r4, r0
	at30tse_write_register(AT30TSE_CONFIG_REG,
100081b0:	0003      	movs	r3, r0
100081b2:	2201      	movs	r2, #1
100081b4:	2100      	movs	r1, #0
100081b6:	2001      	movs	r0, #1
100081b8:	4d03      	ldr	r5, [pc, #12]	; (100081c8 <at30tse_write_config_register+0x1c>)
100081ba:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
100081bc:	0464      	lsls	r4, r4, #17
100081be:	0fa4      	lsrs	r4, r4, #30
100081c0:	4b02      	ldr	r3, [pc, #8]	; (100081cc <at30tse_write_config_register+0x20>)
100081c2:	701c      	strb	r4, [r3, #0]

}
100081c4:	bd70      	pop	{r4, r5, r6, pc}
100081c6:	46c0      	nop			; (mov r8, r8)
100081c8:	1000817d 	.word	0x1000817d
100081cc:	100125b0 	.word	0x100125b0

100081d0 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature(void)
{
100081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
100081d2:	2202      	movs	r2, #2
100081d4:	2100      	movs	r1, #0
100081d6:	2000      	movs	r0, #0
100081d8:	4b21      	ldr	r3, [pc, #132]	; (10008260 <at30tse_read_temperature+0x90>)
100081da:	4798      	blx	r3
100081dc:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
100081de:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
100081e0:	0402      	lsls	r2, r0, #16
100081e2:	d502      	bpl.n	100081ea <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
100081e4:	0440      	lsls	r0, r0, #17
100081e6:	0c43      	lsrs	r3, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
100081e8:	3f02      	subs	r7, #2
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
100081ea:	4a1e      	ldr	r2, [pc, #120]	; (10008264 <at30tse_read_temperature+0x94>)
100081ec:	7816      	ldrb	r6, [r2, #0]
100081ee:	2e01      	cmp	r6, #1
100081f0:	d011      	beq.n	10008216 <at30tse_read_temperature+0x46>
100081f2:	2e00      	cmp	r6, #0
100081f4:	d004      	beq.n	10008200 <at30tse_read_temperature+0x30>
100081f6:	2e02      	cmp	r6, #2
100081f8:	d018      	beq.n	1000822c <at30tse_read_temperature+0x5c>
100081fa:	2e03      	cmp	r6, #3
100081fc:	d022      	beq.n	10008244 <at30tse_read_temperature+0x74>
100081fe:	e02c      	b.n	1000825a <at30tse_read_temperature+0x8a>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
10008200:	09db      	lsrs	r3, r3, #7
10008202:	b29d      	uxth	r5, r3
10008204:	0038      	movs	r0, r7
10008206:	4368      	muls	r0, r5
10008208:	4b17      	ldr	r3, [pc, #92]	; (10008268 <at30tse_read_temperature+0x98>)
1000820a:	4798      	blx	r3
1000820c:	2200      	movs	r2, #0
1000820e:	4b17      	ldr	r3, [pc, #92]	; (1000826c <at30tse_read_temperature+0x9c>)
10008210:	4c17      	ldr	r4, [pc, #92]	; (10008270 <at30tse_read_temperature+0xa0>)
10008212:	47a0      	blx	r4
			break;
10008214:	e023      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
10008216:	099b      	lsrs	r3, r3, #6
10008218:	b29c      	uxth	r4, r3
1000821a:	0038      	movs	r0, r7
1000821c:	4360      	muls	r0, r4
1000821e:	4b12      	ldr	r3, [pc, #72]	; (10008268 <at30tse_read_temperature+0x98>)
10008220:	4798      	blx	r3
10008222:	2200      	movs	r2, #0
10008224:	4b13      	ldr	r3, [pc, #76]	; (10008274 <at30tse_read_temperature+0xa4>)
10008226:	4c12      	ldr	r4, [pc, #72]	; (10008270 <at30tse_read_temperature+0xa0>)
10008228:	47a0      	blx	r4
			break;
1000822a:	e018      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
1000822c:	095b      	lsrs	r3, r3, #5
1000822e:	b299      	uxth	r1, r3
10008230:	0038      	movs	r0, r7
10008232:	4348      	muls	r0, r1
10008234:	4b0c      	ldr	r3, [pc, #48]	; (10008268 <at30tse_read_temperature+0x98>)
10008236:	4798      	blx	r3
10008238:	2200      	movs	r2, #0
1000823a:	23ff      	movs	r3, #255	; 0xff
1000823c:	059b      	lsls	r3, r3, #22
1000823e:	4c0c      	ldr	r4, [pc, #48]	; (10008270 <at30tse_read_temperature+0xa0>)
10008240:	47a0      	blx	r4
			break;
10008242:	e00c      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
10008244:	091b      	lsrs	r3, r3, #4
10008246:	b29a      	uxth	r2, r3
10008248:	0038      	movs	r0, r7
1000824a:	4350      	muls	r0, r2
1000824c:	4b06      	ldr	r3, [pc, #24]	; (10008268 <at30tse_read_temperature+0x98>)
1000824e:	4798      	blx	r3
10008250:	2200      	movs	r2, #0
10008252:	4b09      	ldr	r3, [pc, #36]	; (10008278 <at30tse_read_temperature+0xa8>)
10008254:	4c06      	ldr	r4, [pc, #24]	; (10008270 <at30tse_read_temperature+0xa0>)
10008256:	47a0      	blx	r4
			break;
10008258:	e001      	b.n	1000825e <at30tse_read_temperature+0x8e>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
1000825a:	2000      	movs	r0, #0
1000825c:	2100      	movs	r1, #0
			break;
		default:
			break;
	}
	return temperature;
}
1000825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008260:	10008131 	.word	0x10008131
10008264:	100125b0 	.word	0x100125b0
10008268:	1000fdf9 	.word	0x1000fdf9
1000826c:	3fe00000 	.word	0x3fe00000
10008270:	1000f1f1 	.word	0x1000f1f1
10008274:	3fd00000 	.word	0x3fd00000
10008278:	3fb00000 	.word	0x3fb00000

1000827c <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
1000827c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000827e:	4647      	mov	r7, r8
10008280:	b480      	push	{r7}
10008282:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
10008284:	2380      	movs	r3, #128	; 0x80
10008286:	011b      	lsls	r3, r3, #4
10008288:	4a3a      	ldr	r2, [pc, #232]	; (10008374 <dma_isr_handler+0xf8>)
1000828a:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
1000828c:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000828e:	230f      	movs	r3, #15
10008290:	401c      	ands	r4, r3
10008292:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008294:	4b38      	ldr	r3, [pc, #224]	; (10008378 <dma_isr_handler+0xfc>)
10008296:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008298:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000829a:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
1000829c:	2100      	movs	r1, #0
1000829e:	e000      	b.n	100082a2 <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
100082a0:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
100082a2:	0852      	lsrs	r2, r2, #1
		index++;
100082a4:	1c4b      	adds	r3, r1, #1
100082a6:	b2db      	uxtb	r3, r3
	} while (channel);
100082a8:	2a00      	cmp	r2, #0
100082aa:	d1f9      	bne.n	100082a0 <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
100082ac:	0089      	lsls	r1, r1, #2
100082ae:	4643      	mov	r3, r8
100082b0:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082b2:	7803      	ldrb	r3, [r0, #0]
100082b4:	021b      	lsls	r3, r3, #8
100082b6:	4a31      	ldr	r2, [pc, #196]	; (1000837c <dma_isr_handler+0x100>)
100082b8:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100082ba:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082bc:	4a30      	ldr	r2, [pc, #192]	; (10008380 <dma_isr_handler+0x104>)
100082be:	589a      	ldr	r2, [r3, r2]
100082c0:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
100082c2:	22ff      	movs	r2, #255	; 0xff
100082c4:	4022      	ands	r2, r4
100082c6:	4215      	tst	r5, r2
100082c8:	d003      	beq.n	100082d2 <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
100082ca:	2600      	movs	r6, #0
100082cc:	2225      	movs	r2, #37	; 0x25
100082ce:	5486      	strb	r6, [r0, r2]
100082d0:	e02f      	b.n	10008332 <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
100082d2:	0797      	lsls	r7, r2, #30
100082d4:	d504      	bpl.n	100082e0 <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082d6:	2610      	movs	r6, #16
100082d8:	2225      	movs	r2, #37	; 0x25
100082da:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
100082dc:	002e      	movs	r6, r5
100082de:	e028      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
100082e0:	0757      	lsls	r7, r2, #29
100082e2:	d504      	bpl.n	100082ee <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082e4:	2610      	movs	r6, #16
100082e6:	2225      	movs	r2, #37	; 0x25
100082e8:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
100082ea:	3e0e      	subs	r6, #14
100082ec:	e021      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
100082ee:	0717      	lsls	r7, r2, #28
100082f0:	d504      	bpl.n	100082fc <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082f2:	2610      	movs	r6, #16
100082f4:	2225      	movs	r2, #37	; 0x25
100082f6:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
100082f8:	3e0d      	subs	r6, #13
100082fa:	e01a      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
100082fc:	06d7      	lsls	r7, r2, #27
100082fe:	d504      	bpl.n	1000830a <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008300:	2610      	movs	r6, #16
10008302:	2225      	movs	r2, #37	; 0x25
10008304:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
10008306:	3e0c      	subs	r6, #12
10008308:	e013      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
1000830a:	0697      	lsls	r7, r2, #26
1000830c:	d504      	bpl.n	10008318 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000830e:	2610      	movs	r6, #16
10008310:	2225      	movs	r2, #37	; 0x25
10008312:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
10008314:	3e0b      	subs	r6, #11
10008316:	e00c      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008318:	0652      	lsls	r2, r2, #25
1000831a:	d504      	bpl.n	10008326 <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000831c:	2610      	movs	r6, #16
1000831e:	2225      	movs	r2, #37	; 0x25
10008320:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
10008322:	3e0a      	subs	r6, #10
10008324:	e005      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
10008326:	0622      	lsls	r2, r4, #24
10008328:	d503      	bpl.n	10008332 <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000832a:	2610      	movs	r6, #16
1000832c:	2225      	movs	r2, #37	; 0x25
1000832e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
10008330:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
10008332:	2900      	cmp	r1, #0
10008334:	d00e      	beq.n	10008354 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008336:	4913      	ldr	r1, [pc, #76]	; (10008384 <dma_isr_handler+0x108>)
10008338:	002a      	movs	r2, r5
1000833a:	40b2      	lsls	r2, r6
1000833c:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000833e:	2324      	movs	r3, #36	; 0x24
10008340:	5cc3      	ldrb	r3, [r0, r3]
10008342:	4133      	asrs	r3, r6
10008344:	421d      	tst	r5, r3
10008346:	d005      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
10008348:	00b3      	lsls	r3, r6, #2
1000834a:	18c3      	adds	r3, r0, r3
1000834c:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000834e:	2b00      	cmp	r3, #0
10008350:	d000      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
10008352:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
10008354:	002b      	movs	r3, r5
10008356:	40b3      	lsls	r3, r6
10008358:	439c      	bics	r4, r3
1000835a:	b263      	sxtb	r3, r4
1000835c:	2b00      	cmp	r3, #0
1000835e:	d19c      	bne.n	1000829a <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008360:	2180      	movs	r1, #128	; 0x80
10008362:	0209      	lsls	r1, r1, #8
10008364:	3381      	adds	r3, #129	; 0x81
10008366:	33ff      	adds	r3, #255	; 0xff
10008368:	4a07      	ldr	r2, [pc, #28]	; (10008388 <dma_isr_handler+0x10c>)
1000836a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
1000836c:	b002      	add	sp, #8
1000836e:	bc04      	pop	{r2}
10008370:	4690      	mov	r8, r2
10008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008374:	40002000 	.word	0x40002000
10008378:	100125b4 	.word	0x100125b4
1000837c:	400020ac 	.word	0x400020ac
10008380:	40002050 	.word	0x40002050
10008384:	400020a4 	.word	0x400020a4
10008388:	e000e100 	.word	0xe000e100

1000838c <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
1000838c:	2201      	movs	r2, #1
1000838e:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
10008390:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
10008392:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008394:	2300      	movs	r3, #0
10008396:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
10008398:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
1000839a:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
1000839c:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
1000839e:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
100083a0:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
100083a2:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
100083a4:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
100083a6:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
100083a8:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
100083aa:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
100083ac:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
100083ae:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
100083b0:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
100083b2:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
100083b4:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
100083b6:	74c3      	strb	r3, [r0, #19]
}
100083b8:	4770      	bx	lr
100083ba:	46c0      	nop			; (mov r8, r8)

100083bc <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
100083bc:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
100083be:	2325      	movs	r3, #37	; 0x25
100083c0:	5cc3      	ldrb	r3, [r0, r3]
100083c2:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
100083c4:	2b05      	cmp	r3, #5
100083c6:	d042      	beq.n	1000844e <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
100083c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
100083ca:	2a00      	cmp	r2, #0
100083cc:	d007      	beq.n	100083de <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
100083ce:	2303      	movs	r3, #3
100083d0:	68d4      	ldr	r4, [r2, #12]
100083d2:	439c      	bics	r4, r3
100083d4:	0023      	movs	r3, r4
100083d6:	2403      	movs	r4, #3
100083d8:	2b00      	cmp	r3, #0
100083da:	d11f      	bne.n	1000841c <dma_add_descriptor+0x60>
100083dc:	e02d      	b.n	1000843a <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
100083de:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083e0:	7803      	ldrb	r3, [r0, #0]
100083e2:	021b      	lsls	r3, r3, #8
100083e4:	4a1b      	ldr	r2, [pc, #108]	; (10008454 <dma_add_descriptor+0x98>)
100083e6:	4694      	mov	ip, r2
100083e8:	4463      	add	r3, ip
100083ea:	680a      	ldr	r2, [r1, #0]
100083ec:	601a      	str	r2, [r3, #0]
100083ee:	7803      	ldrb	r3, [r0, #0]
100083f0:	021b      	lsls	r3, r3, #8
100083f2:	4a19      	ldr	r2, [pc, #100]	; (10008458 <dma_add_descriptor+0x9c>)
100083f4:	4694      	mov	ip, r2
100083f6:	4463      	add	r3, ip
100083f8:	684a      	ldr	r2, [r1, #4]
100083fa:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
100083fc:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083fe:	7803      	ldrb	r3, [r0, #0]
10008400:	021b      	lsls	r3, r3, #8
10008402:	4916      	ldr	r1, [pc, #88]	; (1000845c <dma_add_descriptor+0xa0>)
10008404:	468c      	mov	ip, r1
10008406:	4463      	add	r3, ip
10008408:	601a      	str	r2, [r3, #0]
1000840a:	7803      	ldrb	r3, [r0, #0]
1000840c:	021b      	lsls	r3, r3, #8
1000840e:	4a14      	ldr	r2, [pc, #80]	; (10008460 <dma_add_descriptor+0xa4>)
10008410:	4694      	mov	ip, r2
10008412:	4463      	add	r3, ip
10008414:	2203      	movs	r2, #3
10008416:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008418:	2300      	movs	r3, #0
1000841a:	e018      	b.n	1000844e <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
1000841c:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000841e:	68d3      	ldr	r3, [r2, #12]
10008420:	43a3      	bics	r3, r4
10008422:	d1fb      	bne.n	1000841c <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
10008424:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008426:	2303      	movs	r3, #3
10008428:	68ca      	ldr	r2, [r1, #12]
1000842a:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
1000842c:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000842e:	2a00      	cmp	r2, #0
10008430:	d00d      	beq.n	1000844e <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
10008432:	3303      	adds	r3, #3
10008434:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
10008436:	2300      	movs	r3, #0
10008438:	e009      	b.n	1000844e <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000843a:	7803      	ldrb	r3, [r0, #0]
1000843c:	021b      	lsls	r3, r3, #8
1000843e:	4808      	ldr	r0, [pc, #32]	; (10008460 <dma_add_descriptor+0xa4>)
10008440:	4684      	mov	ip, r0
10008442:	4463      	add	r3, ip
10008444:	2003      	movs	r0, #3
10008446:	000c      	movs	r4, r1
10008448:	4384      	bics	r4, r0
1000844a:	601c      	str	r4, [r3, #0]
1000844c:	e7ea      	b.n	10008424 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
1000844e:	0018      	movs	r0, r3
10008450:	bd10      	pop	{r4, pc}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	40002000 	.word	0x40002000
10008458:	40002004 	.word	0x40002004
1000845c:	40002008 	.word	0x40002008
10008460:	4000200c 	.word	0x4000200c

10008464 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
10008464:	b082      	sub	sp, #8
10008466:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
10008468:	2325      	movs	r3, #37	; 0x25
1000846a:	5cc3      	ldrb	r3, [r0, r3]
1000846c:	b2d8      	uxtb	r0, r3
1000846e:	2805      	cmp	r0, #5
10008470:	d027      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008472:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
10008474:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
10008476:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008478:	2b00      	cmp	r3, #0
1000847a:	d022      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
1000847c:	7813      	ldrb	r3, [r2, #0]
1000847e:	021b      	lsls	r3, r3, #8
10008480:	4911      	ldr	r1, [pc, #68]	; (100084c8 <dma_start_transfer_job+0x64>)
10008482:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008484:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
10008486:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008488:	4910      	ldr	r1, [pc, #64]	; (100084cc <dma_start_transfer_job+0x68>)
1000848a:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
1000848c:	2324      	movs	r3, #36	; 0x24
1000848e:	5cd3      	ldrb	r3, [r2, r3]
10008490:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
10008492:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008494:	7813      	ldrb	r3, [r2, #0]
10008496:	021b      	lsls	r3, r3, #8
10008498:	480d      	ldr	r0, [pc, #52]	; (100084d0 <dma_start_transfer_job+0x6c>)
1000849a:	4684      	mov	ip, r0
1000849c:	4463      	add	r3, ip
1000849e:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
100084a0:	2105      	movs	r1, #5
100084a2:	2325      	movs	r3, #37	; 0x25
100084a4:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100084a6:	7813      	ldrb	r3, [r2, #0]
100084a8:	021b      	lsls	r3, r3, #8
100084aa:	490a      	ldr	r1, [pc, #40]	; (100084d4 <dma_start_transfer_job+0x70>)
100084ac:	468c      	mov	ip, r1
100084ae:	4463      	add	r3, ip
100084b0:	2101      	movs	r1, #1
100084b2:	6019      	str	r1, [r3, #0]
100084b4:	7813      	ldrb	r3, [r2, #0]
100084b6:	021b      	lsls	r3, r3, #8
100084b8:	4a07      	ldr	r2, [pc, #28]	; (100084d8 <dma_start_transfer_job+0x74>)
100084ba:	4694      	mov	ip, r2
100084bc:	4463      	add	r3, ip
100084be:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
100084c0:	2000      	movs	r0, #0
}
100084c2:	b002      	add	sp, #8
100084c4:	4770      	bx	lr
100084c6:	46c0      	nop			; (mov r8, r8)
100084c8:	400020ac 	.word	0x400020ac
100084cc:	400020a4 	.word	0x400020a4
100084d0:	400020a8 	.word	0x400020a8
100084d4:	40002040 	.word	0x40002040
100084d8:	40002044 	.word	0x40002044

100084dc <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
100084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100084de:	0004      	movs	r4, r0
100084e0:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
100084e2:	4b62      	ldr	r3, [pc, #392]	; (1000866c <dma_allocate+0x190>)
100084e4:	781b      	ldrb	r3, [r3, #0]
100084e6:	2b00      	cmp	r3, #0
100084e8:	d112      	bne.n	10008510 <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
100084ea:	2043      	movs	r0, #67	; 0x43
100084ec:	4b60      	ldr	r3, [pc, #384]	; (10008670 <dma_allocate+0x194>)
100084ee:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
100084f0:	4960      	ldr	r1, [pc, #384]	; (10008674 <dma_allocate+0x198>)
100084f2:	22cc      	movs	r2, #204	; 0xcc
100084f4:	5888      	ldr	r0, [r1, r2]
100084f6:	4b60      	ldr	r3, [pc, #384]	; (10008678 <dma_allocate+0x19c>)
100084f8:	4003      	ands	r3, r0
100084fa:	2080      	movs	r0, #128	; 0x80
100084fc:	0540      	lsls	r0, r0, #21
100084fe:	4303      	orrs	r3, r0
10008500:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
10008502:	495e      	ldr	r1, [pc, #376]	; (1000867c <dma_allocate+0x1a0>)
10008504:	201f      	movs	r0, #31
10008506:	4b5e      	ldr	r3, [pc, #376]	; (10008680 <dma_allocate+0x1a4>)
10008508:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
1000850a:	2201      	movs	r2, #1
1000850c:	4b57      	ldr	r3, [pc, #348]	; (1000866c <dma_allocate+0x190>)
1000850e:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
10008510:	4b56      	ldr	r3, [pc, #344]	; (1000866c <dma_allocate+0x190>)
10008512:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008514:	07d3      	lsls	r3, r2, #31
10008516:	d500      	bpl.n	1000851a <dma_allocate+0x3e>
10008518:	e0a2      	b.n	10008660 <dma_allocate+0x184>
1000851a:	e002      	b.n	10008522 <dma_allocate+0x46>
1000851c:	4211      	tst	r1, r2
1000851e:	d10e      	bne.n	1000853e <dma_allocate+0x62>
10008520:	e000      	b.n	10008524 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008522:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008524:	4a51      	ldr	r2, [pc, #324]	; (1000866c <dma_allocate+0x190>)
10008526:	6850      	ldr	r0, [r2, #4]
10008528:	2101      	movs	r1, #1
1000852a:	4099      	lsls	r1, r3
1000852c:	4301      	orrs	r1, r0
1000852e:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
10008530:	7a11      	ldrb	r1, [r2, #8]
10008532:	3901      	subs	r1, #1
10008534:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008536:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
10008538:	2bff      	cmp	r3, #255	; 0xff
1000853a:	d107      	bne.n	1000854c <dma_allocate+0x70>
1000853c:	e094      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
1000853e:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008540:	3301      	adds	r3, #1
10008542:	b2db      	uxtb	r3, r3
10008544:	2b05      	cmp	r3, #5
10008546:	d1e9      	bne.n	1000851c <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008548:	2014      	movs	r0, #20
1000854a:	e08d      	b.n	10008668 <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
1000854c:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000854e:	021b      	lsls	r3, r3, #8
10008550:	4a4c      	ldr	r2, [pc, #304]	; (10008684 <dma_allocate+0x1a8>)
10008552:	4694      	mov	ip, r2
10008554:	4463      	add	r3, ip
10008556:	782a      	ldrb	r2, [r5, #0]
10008558:	267f      	movs	r6, #127	; 0x7f
1000855a:	4032      	ands	r2, r6
1000855c:	78a9      	ldrb	r1, [r5, #2]
1000855e:	07c9      	lsls	r1, r1, #31
10008560:	430a      	orrs	r2, r1
10008562:	7869      	ldrb	r1, [r5, #1]
10008564:	0409      	lsls	r1, r1, #16
10008566:	20fc      	movs	r0, #252	; 0xfc
10008568:	0380      	lsls	r0, r0, #14
1000856a:	4001      	ands	r1, r0
1000856c:	430a      	orrs	r2, r1
1000856e:	601a      	str	r2, [r3, #0]
10008570:	7823      	ldrb	r3, [r4, #0]
10008572:	021b      	lsls	r3, r3, #8
10008574:	4a44      	ldr	r2, [pc, #272]	; (10008688 <dma_allocate+0x1ac>)
10008576:	4694      	mov	ip, r2
10008578:	4463      	add	r3, ip
1000857a:	7a6a      	ldrb	r2, [r5, #9]
1000857c:	4032      	ands	r2, r6
1000857e:	7ae9      	ldrb	r1, [r5, #11]
10008580:	07c9      	lsls	r1, r1, #31
10008582:	430a      	orrs	r2, r1
10008584:	7aa9      	ldrb	r1, [r5, #10]
10008586:	0409      	lsls	r1, r1, #16
10008588:	4008      	ands	r0, r1
1000858a:	4310      	orrs	r0, r2
1000858c:	6018      	str	r0, [r3, #0]
1000858e:	7823      	ldrb	r3, [r4, #0]
10008590:	021b      	lsls	r3, r3, #8
10008592:	4a3e      	ldr	r2, [pc, #248]	; (1000868c <dma_allocate+0x1b0>)
10008594:	4694      	mov	ip, r2
10008596:	4463      	add	r3, ip
10008598:	7cea      	ldrb	r2, [r5, #19]
1000859a:	0712      	lsls	r2, r2, #28
1000859c:	21c0      	movs	r1, #192	; 0xc0
1000859e:	0589      	lsls	r1, r1, #22
100085a0:	400a      	ands	r2, r1
100085a2:	7ca9      	ldrb	r1, [r5, #18]
100085a4:	0409      	lsls	r1, r1, #16
100085a6:	430a      	orrs	r2, r1
100085a8:	601a      	str	r2, [r3, #0]
100085aa:	7823      	ldrb	r3, [r4, #0]
100085ac:	021b      	lsls	r3, r3, #8
100085ae:	4a38      	ldr	r2, [pc, #224]	; (10008690 <dma_allocate+0x1b4>)
100085b0:	4694      	mov	ip, r2
100085b2:	4463      	add	r3, ip
100085b4:	792f      	ldrb	r7, [r5, #4]
100085b6:	023f      	lsls	r7, r7, #8
100085b8:	21e0      	movs	r1, #224	; 0xe0
100085ba:	00c9      	lsls	r1, r1, #3
100085bc:	003a      	movs	r2, r7
100085be:	400a      	ands	r2, r1
100085c0:	7b2e      	ldrb	r6, [r5, #12]
100085c2:	0436      	lsls	r6, r6, #16
100085c4:	20f8      	movs	r0, #248	; 0xf8
100085c6:	0340      	lsls	r0, r0, #13
100085c8:	4006      	ands	r6, r0
100085ca:	4332      	orrs	r2, r6
100085cc:	0017      	movs	r7, r2
100085ce:	78e8      	ldrb	r0, [r5, #3]
100085d0:	221f      	movs	r2, #31
100085d2:	4002      	ands	r2, r0
100085d4:	003e      	movs	r6, r7
100085d6:	4316      	orrs	r6, r2
100085d8:	7b6a      	ldrb	r2, [r5, #13]
100085da:	0612      	lsls	r2, r2, #24
100085dc:	20e0      	movs	r0, #224	; 0xe0
100085de:	04c0      	lsls	r0, r0, #19
100085e0:	4002      	ands	r2, r0
100085e2:	4332      	orrs	r2, r6
100085e4:	601a      	str	r2, [r3, #0]
100085e6:	7820      	ldrb	r0, [r4, #0]
100085e8:	0200      	lsls	r0, r0, #8
100085ea:	4b2a      	ldr	r3, [pc, #168]	; (10008694 <dma_allocate+0x1b8>)
100085ec:	469c      	mov	ip, r3
100085ee:	4460      	add	r0, ip
100085f0:	79ab      	ldrb	r3, [r5, #6]
100085f2:	2607      	movs	r6, #7
100085f4:	4033      	ands	r3, r6
100085f6:	796e      	ldrb	r6, [r5, #5]
100085f8:	2208      	movs	r2, #8
100085fa:	40b2      	lsls	r2, r6
100085fc:	4313      	orrs	r3, r2
100085fe:	79ee      	ldrb	r6, [r5, #7]
10008600:	2280      	movs	r2, #128	; 0x80
10008602:	40b2      	lsls	r2, r6
10008604:	4313      	orrs	r3, r2
10008606:	7bae      	ldrb	r6, [r5, #14]
10008608:	2280      	movs	r2, #128	; 0x80
1000860a:	0112      	lsls	r2, r2, #4
1000860c:	40b2      	lsls	r2, r6
1000860e:	4313      	orrs	r3, r2
10008610:	7c2e      	ldrb	r6, [r5, #16]
10008612:	2280      	movs	r2, #128	; 0x80
10008614:	0212      	lsls	r2, r2, #8
10008616:	40b2      	lsls	r2, r6
10008618:	4313      	orrs	r3, r2
1000861a:	001e      	movs	r6, r3
1000861c:	7a2a      	ldrb	r2, [r5, #8]
1000861e:	0112      	lsls	r2, r2, #4
10008620:	2370      	movs	r3, #112	; 0x70
10008622:	401a      	ands	r2, r3
10008624:	0033      	movs	r3, r6
10008626:	4313      	orrs	r3, r2
10008628:	7bea      	ldrb	r2, [r5, #15]
1000862a:	0212      	lsls	r2, r2, #8
1000862c:	4011      	ands	r1, r2
1000862e:	430b      	orrs	r3, r1
10008630:	7c69      	ldrb	r1, [r5, #17]
10008632:	0309      	lsls	r1, r1, #12
10008634:	22e0      	movs	r2, #224	; 0xe0
10008636:	01d2      	lsls	r2, r2, #7
10008638:	4011      	ands	r1, r2
1000863a:	430b      	orrs	r3, r1
1000863c:	6003      	str	r3, [r0, #0]
1000863e:	1d23      	adds	r3, r4, #4
10008640:	0021      	movs	r1, r4
10008642:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
10008644:	2200      	movs	r2, #0
10008646:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
10008648:	428b      	cmp	r3, r1
1000864a:	d1fc      	bne.n	10008646 <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
1000864c:	2300      	movs	r3, #0
1000864e:	2224      	movs	r2, #36	; 0x24
10008650:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
10008652:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
10008654:	7823      	ldrb	r3, [r4, #0]
10008656:	009b      	lsls	r3, r3, #2
10008658:	4a0f      	ldr	r2, [pc, #60]	; (10008698 <dma_allocate+0x1bc>)
1000865a:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
1000865c:	2000      	movs	r0, #0
1000865e:	e003      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
10008660:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008662:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
10008664:	2101      	movs	r1, #1
10008666:	e759      	b.n	1000851c <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
10008668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000866a:	46c0      	nop			; (mov r8, r8)
1000866c:	1001251c 	.word	0x1001251c
10008670:	100091a5 	.word	0x100091a5
10008674:	4000b000 	.word	0x4000b000
10008678:	e0ffffff 	.word	0xe0ffffff
1000867c:	1000827d 	.word	0x1000827d
10008680:	1000960d 	.word	0x1000960d
10008684:	40002010 	.word	0x40002010
10008688:	40002014 	.word	0x40002014
1000868c:	40002018 	.word	0x40002018
10008690:	40002020 	.word	0x40002020
10008694:	40002838 	.word	0x40002838
10008698:	100125b4 	.word	0x100125b4

1000869c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000869c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000869e:	464f      	mov	r7, r9
100086a0:	4646      	mov	r6, r8
100086a2:	b4c0      	push	{r6, r7}
100086a4:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100086a6:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100086a8:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100086aa:	2d00      	cmp	r5, #0
100086ac:	d02f      	beq.n	1000870e <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
100086ae:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100086b0:	2428      	movs	r4, #40	; 0x28
100086b2:	5d13      	ldrb	r3, [r2, r4]
100086b4:	07db      	lsls	r3, r3, #31
100086b6:	d4fc      	bmi.n	100086b2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100086b8:	2301      	movs	r3, #1
100086ba:	2434      	movs	r4, #52	; 0x34
100086bc:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
100086be:	3c14      	subs	r4, #20
100086c0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100086c2:	880b      	ldrh	r3, [r1, #0]
100086c4:	005b      	lsls	r3, r3, #1
100086c6:	2402      	movs	r4, #2
100086c8:	34ff      	adds	r4, #255	; 0xff
100086ca:	4323      	orrs	r3, r4
100086cc:	b29b      	uxth	r3, r3
100086ce:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100086d0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086d2:	2301      	movs	r3, #1
100086d4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100086d6:	7b13      	ldrb	r3, [r2, #12]
100086d8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086da:	4640      	mov	r0, r8
100086dc:	4218      	tst	r0, r3
100086de:	d006      	beq.n	100086ee <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100086e0:	1c67      	adds	r7, r4, #1
100086e2:	7910      	ldrb	r0, [r2, #4]
100086e4:	4684      	mov	ip, r0
100086e6:	6848      	ldr	r0, [r1, #4]
100086e8:	4666      	mov	r6, ip
100086ea:	5506      	strb	r6, [r0, r4]
100086ec:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100086ee:	42ac      	cmp	r4, r5
100086f0:	d3f1      	bcc.n	100086d6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086f2:	06db      	lsls	r3, r3, #27
100086f4:	d403      	bmi.n	100086fe <_i2c_master_read_packet+0x62>
100086f6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100086f8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086fa:	420b      	tst	r3, r1
100086fc:	d0fc      	beq.n	100086f8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100086fe:	464b      	mov	r3, r9
10008700:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008702:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008704:	2900      	cmp	r1, #0
10008706:	d102      	bne.n	1000870e <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008708:	3320      	adds	r3, #32
1000870a:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000870c:	2300      	movs	r3, #0
}
1000870e:	0018      	movs	r0, r3
10008710:	bc0c      	pop	{r2, r3}
10008712:	4690      	mov	r8, r2
10008714:	4699      	mov	r9, r3
10008716:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008718 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008718:	b5f0      	push	{r4, r5, r6, r7, lr}
1000871a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
1000871c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000871e:	884e      	ldrh	r6, [r1, #2]
10008720:	2428      	movs	r4, #40	; 0x28
10008722:	5d13      	ldrb	r3, [r2, r4]
10008724:	07db      	lsls	r3, r3, #31
10008726:	d4fc      	bmi.n	10008722 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008728:	2301      	movs	r3, #1
1000872a:	2434      	movs	r4, #52	; 0x34
1000872c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000872e:	3c14      	subs	r4, #20
10008730:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008732:	880b      	ldrh	r3, [r1, #0]
10008734:	005b      	lsls	r3, r3, #1
10008736:	34e0      	adds	r4, #224	; 0xe0
10008738:	4323      	orrs	r3, r4
1000873a:	b29b      	uxth	r3, r3
1000873c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000873e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008740:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008742:	7a13      	ldrb	r3, [r2, #8]
10008744:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008746:	421d      	tst	r5, r3
10008748:	d004      	beq.n	10008754 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000874a:	1c67      	adds	r7, r4, #1
1000874c:	6848      	ldr	r0, [r1, #4]
1000874e:	5d04      	ldrb	r4, [r0, r4]
10008750:	8014      	strh	r4, [r2, #0]
10008752:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008754:	42b4      	cmp	r4, r6
10008756:	d3f4      	bcc.n	10008742 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008758:	06db      	lsls	r3, r3, #27
1000875a:	d403      	bmi.n	10008764 <_i2c_master_write_packet+0x4c>
1000875c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000875e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008760:	420b      	tst	r3, r1
10008762:	d0fc      	beq.n	1000875e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008764:	4663      	mov	r3, ip
10008766:	795b      	ldrb	r3, [r3, #5]
10008768:	2b00      	cmp	r3, #0
1000876a:	d102      	bne.n	10008772 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000876c:	2100      	movs	r1, #0
1000876e:	3320      	adds	r3, #32
10008770:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008772:	2000      	movs	r0, #0
10008774:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008776:	46c0      	nop			; (mov r8, r8)

10008778 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008778:	2303      	movs	r3, #3
1000877a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000877c:	330d      	adds	r3, #13
1000877e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
10008780:	3b08      	subs	r3, #8
10008782:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
10008784:	3301      	adds	r3, #1
10008786:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
10008788:	3b07      	subs	r3, #7
1000878a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
1000878c:	6103      	str	r3, [r0, #16]
}
1000878e:	4770      	bx	lr

10008790 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
10008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008792:	0004      	movs	r4, r0
10008794:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008796:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008798:	2800      	cmp	r0, #0
1000879a:	d056      	beq.n	1000884a <i2c_master_init+0xba>
1000879c:	2a00      	cmp	r2, #0
1000879e:	d056      	beq.n	1000884e <i2c_master_init+0xbe>
100087a0:	2228      	movs	r2, #40	; 0x28
100087a2:	5c8b      	ldrb	r3, [r1, r2]
100087a4:	07db      	lsls	r3, r3, #31
100087a6:	d4fc      	bmi.n	100087a2 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100087a8:	2300      	movs	r3, #0
100087aa:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100087ac:	6823      	ldr	r3, [r4, #0]
100087ae:	4a29      	ldr	r2, [pc, #164]	; (10008854 <i2c_master_init+0xc4>)
100087b0:	4293      	cmp	r3, r2
100087b2:	d103      	bne.n	100087bc <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100087b4:	2003      	movs	r0, #3
100087b6:	4b28      	ldr	r3, [pc, #160]	; (10008858 <i2c_master_init+0xc8>)
100087b8:	4798      	blx	r3
100087ba:	e006      	b.n	100087ca <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100087bc:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100087be:	4a27      	ldr	r2, [pc, #156]	; (1000885c <i2c_master_init+0xcc>)
100087c0:	4293      	cmp	r3, r2
100087c2:	d145      	bne.n	10008850 <i2c_master_init+0xc0>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100087c4:	3002      	adds	r0, #2
100087c6:	4b24      	ldr	r3, [pc, #144]	; (10008858 <i2c_master_init+0xc8>)
100087c8:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
100087ca:	2300      	movs	r3, #0
100087cc:	7423      	strb	r3, [r4, #16]
	module->enabled_callback    = 0;
100087ce:	7463      	strb	r3, [r4, #17]
	module->buffer_length       = 0;
100087d0:	8263      	strh	r3, [r4, #18]
	module->buffer_remaining    = 0;
100087d2:	82a3      	strh	r3, [r4, #20]
	module->status              = STATUS_OK;
100087d4:	2200      	movs	r2, #0
100087d6:	7762      	strb	r2, [r4, #29]
	module->buffer              = NULL;
100087d8:	61a3      	str	r3, [r4, #24]

	_i2c_instances = (void*)module;
100087da:	4b21      	ldr	r3, [pc, #132]	; (10008860 <i2c_master_init+0xd0>)
100087dc:	601c      	str	r4, [r3, #0]
	if (module->hw == I2C0) {
100087de:	6823      	ldr	r3, [r4, #0]
100087e0:	4a1c      	ldr	r2, [pc, #112]	; (10008854 <i2c_master_init+0xc4>)
100087e2:	4293      	cmp	r3, r2
100087e4:	d10f      	bne.n	10008806 <i2c_master_init+0x76>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087e6:	4f1f      	ldr	r7, [pc, #124]	; (10008864 <i2c_master_init+0xd4>)
100087e8:	0039      	movs	r1, r7
100087ea:	2018      	movs	r0, #24
100087ec:	4e1e      	ldr	r6, [pc, #120]	; (10008868 <i2c_master_init+0xd8>)
100087ee:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087f0:	0039      	movs	r1, r7
100087f2:	2019      	movs	r0, #25
100087f4:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100087f6:	4b1d      	ldr	r3, [pc, #116]	; (1000886c <i2c_master_init+0xdc>)
100087f8:	2280      	movs	r2, #128	; 0x80
100087fa:	0052      	lsls	r2, r2, #1
100087fc:	601a      	str	r2, [r3, #0]
100087fe:	3201      	adds	r2, #1
10008800:	32ff      	adds	r2, #255	; 0xff
10008802:	601a      	str	r2, [r3, #0]
10008804:	e011      	b.n	1000882a <i2c_master_init+0x9a>
		NVIC_EnableIRQ(I2C0_RX_IRQn);
		NVIC_EnableIRQ(I2C0_TX_IRQn);
	} else if (module->hw == I2C1) {
10008806:	4a15      	ldr	r2, [pc, #84]	; (1000885c <i2c_master_init+0xcc>)
10008808:	4293      	cmp	r3, r2
1000880a:	d10e      	bne.n	1000882a <i2c_master_init+0x9a>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000880c:	4f15      	ldr	r7, [pc, #84]	; (10008864 <i2c_master_init+0xd4>)
1000880e:	0039      	movs	r1, r7
10008810:	201a      	movs	r0, #26
10008812:	4e15      	ldr	r6, [pc, #84]	; (10008868 <i2c_master_init+0xd8>)
10008814:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
10008816:	0039      	movs	r1, r7
10008818:	201b      	movs	r0, #27
1000881a:	47b0      	blx	r6
1000881c:	4b13      	ldr	r3, [pc, #76]	; (1000886c <i2c_master_init+0xdc>)
1000881e:	2280      	movs	r2, #128	; 0x80
10008820:	00d2      	lsls	r2, r2, #3
10008822:	601a      	str	r2, [r3, #0]
10008824:	2280      	movs	r2, #128	; 0x80
10008826:	0112      	lsls	r2, r2, #4
10008828:	601a      	str	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000882a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000882c:	8929      	ldrh	r1, [r5, #8]
1000882e:	7928      	ldrb	r0, [r5, #4]
10008830:	4e0f      	ldr	r6, [pc, #60]	; (10008870 <i2c_master_init+0xe0>)
10008832:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008834:	8a29      	ldrh	r1, [r5, #16]
10008836:	7b28      	ldrb	r0, [r5, #12]
10008838:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000883a:	782b      	ldrb	r3, [r5, #0]
1000883c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000883e:	886b      	ldrh	r3, [r5, #2]
10008840:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
10008842:	2301      	movs	r3, #1
10008844:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008846:	2000      	movs	r0, #0
10008848:	e002      	b.n	10008850 <i2c_master_init+0xc0>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000884a:	2017      	movs	r0, #23
1000884c:	e000      	b.n	10008850 <i2c_master_init+0xc0>
1000884e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008852:	46c0      	nop			; (mov r8, r8)
10008854:	40003000 	.word	0x40003000
10008858:	100091a5 	.word	0x100091a5
1000885c:	40003400 	.word	0x40003400
10008860:	10014094 	.word	0x10014094
10008864:	10008905 	.word	0x10008905
10008868:	1000960d 	.word	0x1000960d
1000886c:	e000e100 	.word	0xe000e100
10008870:	10008c6d 	.word	0x10008c6d

10008874 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008874:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008876:	2800      	cmp	r0, #0
10008878:	d00c      	beq.n	10008894 <i2c_master_read_packet_wait+0x20>
1000887a:	2900      	cmp	r1, #0
1000887c:	d00c      	beq.n	10008898 <i2c_master_read_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
1000887e:	8a82      	ldrh	r2, [r0, #20]
10008880:	b292      	uxth	r2, r2
		return STATUS_BUSY;
10008882:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
10008884:	2a00      	cmp	r2, #0
10008886:	d108      	bne.n	1000889a <i2c_master_read_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008888:	2300      	movs	r3, #0
1000888a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000888c:	4b04      	ldr	r3, [pc, #16]	; (100088a0 <i2c_master_read_packet_wait+0x2c>)
1000888e:	4798      	blx	r3
10008890:	0003      	movs	r3, r0
10008892:	e002      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008894:	2317      	movs	r3, #23
10008896:	e000      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
10008898:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000889a:	0018      	movs	r0, r3
1000889c:	bd10      	pop	{r4, pc}
1000889e:	46c0      	nop			; (mov r8, r8)
100088a0:	1000869d 	.word	0x1000869d

100088a4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088a4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100088a6:	2800      	cmp	r0, #0
100088a8:	d00c      	beq.n	100088c4 <i2c_master_write_packet_wait+0x20>
100088aa:	2900      	cmp	r1, #0
100088ac:	d00c      	beq.n	100088c8 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088ae:	8a82      	ldrh	r2, [r0, #20]
100088b0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088b2:	2305      	movs	r3, #5
	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088b4:	2a00      	cmp	r2, #0
100088b6:	d108      	bne.n	100088ca <i2c_master_write_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100088b8:	2300      	movs	r3, #0
100088ba:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088bc:	4b04      	ldr	r3, [pc, #16]	; (100088d0 <i2c_master_write_packet_wait+0x2c>)
100088be:	4798      	blx	r3
100088c0:	0003      	movs	r3, r0
100088c2:	e002      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088c4:	2317      	movs	r3, #23
100088c6:	e000      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
100088c8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100088ca:	0018      	movs	r0, r3
100088cc:	bd10      	pop	{r4, pc}
100088ce:	46c0      	nop			; (mov r8, r8)
100088d0:	10008719 	.word	0x10008719

100088d4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088d4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100088d6:	2800      	cmp	r0, #0
100088d8:	d00c      	beq.n	100088f4 <i2c_master_write_packet_wait_no_stop+0x20>
100088da:	2900      	cmp	r1, #0
100088dc:	d00c      	beq.n	100088f8 <i2c_master_write_packet_wait_no_stop+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088de:	8a82      	ldrh	r2, [r0, #20]
100088e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088e2:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088e4:	2a00      	cmp	r2, #0
100088e6:	d108      	bne.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100088e8:	3b04      	subs	r3, #4
100088ea:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088ec:	4b04      	ldr	r3, [pc, #16]	; (10008900 <i2c_master_write_packet_wait_no_stop+0x2c>)
100088ee:	4798      	blx	r3
100088f0:	0003      	movs	r3, r0
100088f2:	e002      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088f4:	2317      	movs	r3, #23
100088f6:	e000      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
100088f8:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100088fa:	0018      	movs	r0, r3
100088fc:	bd10      	pop	{r4, pc}
100088fe:	46c0      	nop			; (mov r8, r8)
10008900:	10008719 	.word	0x10008719

10008904 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
10008904:	b570      	push	{r4, r5, r6, lr}
10008906:	b082      	sub	sp, #8
	/* Get software module for callback handling */
	struct i2c_master_module *module =
10008908:	4b57      	ldr	r3, [pc, #348]	; (10008a68 <_i2c_master_isr_handler+0x164>)
1000890a:	681c      	ldr	r4, [r3, #0]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000890c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000890e:	7c63      	ldrb	r3, [r4, #17]
			module->registered_callback;
10008910:	7c25      	ldrb	r5, [r4, #16]
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008912:	401d      	ands	r5, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
10008914:	8a63      	ldrh	r3, [r4, #18]
10008916:	b29b      	uxth	r3, r3
10008918:	2b00      	cmp	r3, #0
1000891a:	d107      	bne.n	1000892c <_i2c_master_isr_handler+0x28>
1000891c:	8aa3      	ldrh	r3, [r4, #20]
1000891e:	b29b      	uxth	r3, r3
10008920:	2b00      	cmp	r3, #0
10008922:	d003      	beq.n	1000892c <_i2c_master_isr_handler+0x28>
		module->buffer_length = module->buffer_remaining;
10008924:	8aa3      	ldrh	r3, [r4, #20]
10008926:	b29b      	uxth	r3, r3
10008928:	8263      	strh	r3, [r4, #18]
1000892a:	e04e      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000892c:	8a63      	ldrh	r3, [r4, #18]
1000892e:	b29b      	uxth	r3, r3
10008930:	2b00      	cmp	r3, #0
10008932:	d019      	beq.n	10008968 <_i2c_master_isr_handler+0x64>
10008934:	8aa3      	ldrh	r3, [r4, #20]
10008936:	b29b      	uxth	r3, r3
10008938:	2b00      	cmp	r3, #0
1000893a:	d115      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
1000893c:	7f63      	ldrb	r3, [r4, #29]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000893e:	2b05      	cmp	r3, #5
10008940:	d112      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
10008942:	7f23      	ldrb	r3, [r4, #28]

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008944:	2b00      	cmp	r3, #0
10008946:	d10f      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
10008948:	222c      	movs	r2, #44	; 0x2c
1000894a:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
1000894c:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
1000894e:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008950:	7963      	ldrb	r3, [r4, #5]
10008952:	2b00      	cmp	r3, #0
10008954:	d102      	bne.n	1000895c <_i2c_master_isr_handler+0x58>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008956:	2200      	movs	r2, #0
10008958:	3320      	adds	r3, #32
1000895a:	54f2      	strb	r2, [r6, r3]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000895c:	07eb      	lsls	r3, r5, #31
1000895e:	d534      	bpl.n	100089ca <_i2c_master_isr_handler+0xc6>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
10008960:	68a3      	ldr	r3, [r4, #8]
10008962:	0020      	movs	r0, r4
10008964:	4798      	blx	r3
10008966:	e030      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
10008968:	8a63      	ldrh	r3, [r4, #18]
1000896a:	b29b      	uxth	r3, r3
1000896c:	2b00      	cmp	r3, #0
1000896e:	d02c      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
10008970:	8aa3      	ldrh	r3, [r4, #20]
10008972:	b29b      	uxth	r3, r3
10008974:	2b00      	cmp	r3, #0
10008976:	d028      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
10008978:	7f23      	ldrb	r3, [r4, #28]
1000897a:	2b00      	cmp	r3, #0
1000897c:	d117      	bne.n	100089ae <_i2c_master_isr_handler+0xaa>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000897e:	8a63      	ldrh	r3, [r4, #18]
10008980:	8aa2      	ldrh	r2, [r4, #20]
10008982:	1a9b      	subs	r3, r3, r2
10008984:	b29b      	uxth	r3, r3
10008986:	466a      	mov	r2, sp
10008988:	80d3      	strh	r3, [r2, #6]

	module->buffer_remaining--;
1000898a:	8aa3      	ldrh	r3, [r4, #20]
1000898c:	3b01      	subs	r3, #1
1000898e:	b29b      	uxth	r3, r3
10008990:	82a3      	strh	r3, [r4, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
10008992:	88d3      	ldrh	r3, [r2, #6]
10008994:	69a2      	ldr	r2, [r4, #24]
10008996:	4694      	mov	ip, r2
10008998:	4463      	add	r3, ip
1000899a:	781b      	ldrb	r3, [r3, #0]
1000899c:	8033      	strh	r3, [r6, #0]
	
	if (module->buffer_remaining <= 0) {
1000899e:	8aa3      	ldrh	r3, [r4, #20]
100089a0:	b29b      	uxth	r3, r3
100089a2:	2b00      	cmp	r3, #0
100089a4:	d111      	bne.n	100089ca <_i2c_master_isr_handler+0xc6>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100089a6:	2210      	movs	r2, #16
100089a8:	332c      	adds	r3, #44	; 0x2c
100089aa:	54f2      	strb	r2, [r6, r3]
100089ac:	e00d      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100089ae:	8a63      	ldrh	r3, [r4, #18]
100089b0:	8aa1      	ldrh	r1, [r4, #20]

	module->buffer_remaining--;
100089b2:	8aa2      	ldrh	r2, [r4, #20]
100089b4:	3a01      	subs	r2, #1
100089b6:	b292      	uxth	r2, r2
100089b8:	82a2      	strh	r2, [r4, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
100089ba:	1a5b      	subs	r3, r3, r1
100089bc:	b29b      	uxth	r3, r3
100089be:	69a2      	ldr	r2, [r4, #24]
100089c0:	4694      	mov	ip, r2
100089c2:	4463      	add	r3, ip
100089c4:	7932      	ldrb	r2, [r6, #4]
100089c6:	b2d2      	uxtb	r2, r2
100089c8:	701a      	strb	r2, [r3, #0]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089ca:	8a63      	ldrh	r3, [r4, #18]
100089cc:	b29b      	uxth	r3, r3
100089ce:	2b00      	cmp	r3, #0
100089d0:	d01c      	beq.n	10008a0c <_i2c_master_isr_handler+0x108>
100089d2:	8aa3      	ldrh	r3, [r4, #20]
100089d4:	b29b      	uxth	r3, r3
100089d6:	2b00      	cmp	r3, #0
100089d8:	d118      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
100089da:	7f63      	ldrb	r3, [r4, #29]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089dc:	2b05      	cmp	r3, #5
100089de:	d115      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
100089e0:	7f23      	ldrb	r3, [r4, #28]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
100089e2:	2b01      	cmp	r3, #1
100089e4:	d112      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
100089e6:	2300      	movs	r3, #0
100089e8:	2230      	movs	r2, #48	; 0x30
100089ea:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
100089ec:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
100089ee:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
100089f0:	7963      	ldrb	r3, [r4, #5]
100089f2:	2b00      	cmp	r3, #0
100089f4:	d102      	bne.n	100089fc <_i2c_master_isr_handler+0xf8>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
100089f6:	2200      	movs	r2, #0
100089f8:	3320      	adds	r3, #32
100089fa:	54f2      	strb	r2, [r6, r3]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
100089fc:	07ab      	lsls	r3, r5, #30
100089fe:	d505      	bpl.n	10008a0c <_i2c_master_isr_handler+0x108>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
10008a00:	7f23      	ldrb	r3, [r4, #28]
10008a02:	2b01      	cmp	r3, #1
10008a04:	d102      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
10008a06:	68e3      	ldr	r3, [r4, #12]
10008a08:	0020      	movs	r0, r4
10008a0a:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
10008a0c:	7f23      	ldrb	r3, [r4, #28]
10008a0e:	2b01      	cmp	r3, #1
10008a10:	d114      	bne.n	10008a3c <_i2c_master_isr_handler+0x138>
		if (module->hw == I2C0) {
10008a12:	6823      	ldr	r3, [r4, #0]
10008a14:	4a15      	ldr	r2, [pc, #84]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a16:	4293      	cmp	r3, r2
10008a18:	d106      	bne.n	10008a28 <_i2c_master_isr_handler+0x124>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008a1a:	2180      	movs	r1, #128	; 0x80
10008a1c:	0049      	lsls	r1, r1, #1
10008a1e:	23c0      	movs	r3, #192	; 0xc0
10008a20:	005b      	lsls	r3, r3, #1
10008a22:	4a13      	ldr	r2, [pc, #76]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a24:	50d1      	str	r1, [r2, r3]
10008a26:	e01d      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
10008a28:	4a12      	ldr	r2, [pc, #72]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a2a:	4293      	cmp	r3, r2
10008a2c:	d11a      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a2e:	2180      	movs	r1, #128	; 0x80
10008a30:	00c9      	lsls	r1, r1, #3
10008a32:	23c0      	movs	r3, #192	; 0xc0
10008a34:	005b      	lsls	r3, r3, #1
10008a36:	4a0e      	ldr	r2, [pc, #56]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a38:	50d1      	str	r1, [r2, r3]
10008a3a:	e013      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
10008a3c:	6823      	ldr	r3, [r4, #0]
10008a3e:	4a0b      	ldr	r2, [pc, #44]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a40:	4293      	cmp	r3, r2
10008a42:	d106      	bne.n	10008a52 <_i2c_master_isr_handler+0x14e>
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	0089      	lsls	r1, r1, #2
10008a48:	23c0      	movs	r3, #192	; 0xc0
10008a4a:	005b      	lsls	r3, r3, #1
10008a4c:	4a08      	ldr	r2, [pc, #32]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a4e:	50d1      	str	r1, [r2, r3]
10008a50:	e008      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
10008a52:	4a08      	ldr	r2, [pc, #32]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a54:	4293      	cmp	r3, r2
10008a56:	d105      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a58:	2180      	movs	r1, #128	; 0x80
10008a5a:	0109      	lsls	r1, r1, #4
10008a5c:	23c0      	movs	r3, #192	; 0xc0
10008a5e:	005b      	lsls	r3, r3, #1
10008a60:	4a03      	ldr	r2, [pc, #12]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a62:	50d1      	str	r1, [r2, r3]
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
10008a64:	b002      	add	sp, #8
10008a66:	bd70      	pop	{r4, r5, r6, pc}
10008a68:	10014094 	.word	0x10014094
10008a6c:	40003000 	.word	0x40003000
10008a70:	e000e100 	.word	0xe000e100
10008a74:	40003400 	.word	0x40003400

10008a78 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008a78:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008a7a:	4b0d      	ldr	r3, [pc, #52]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a7c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008a7e:	2b00      	cmp	r3, #0
10008a80:	d007      	beq.n	10008a92 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008a82:	2201      	movs	r2, #1
10008a84:	4b0a      	ldr	r3, [pc, #40]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a86:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008a88:	4b0a      	ldr	r3, [pc, #40]	; (10008ab4 <dualtimer_isr_handler+0x3c>)
10008a8a:	681b      	ldr	r3, [r3, #0]
10008a8c:	2b00      	cmp	r3, #0
10008a8e:	d000      	beq.n	10008a92 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008a90:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008a92:	2334      	movs	r3, #52	; 0x34
10008a94:	4a06      	ldr	r2, [pc, #24]	; (10008ab0 <dualtimer_isr_handler+0x38>)
10008a96:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008a98:	2b00      	cmp	r3, #0
10008a9a:	d007      	beq.n	10008aac <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008a9c:	2101      	movs	r1, #1
10008a9e:	232c      	movs	r3, #44	; 0x2c
10008aa0:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008aa2:	4b05      	ldr	r3, [pc, #20]	; (10008ab8 <dualtimer_isr_handler+0x40>)
10008aa4:	681b      	ldr	r3, [r3, #0]
10008aa6:	2b00      	cmp	r3, #0
10008aa8:	d000      	beq.n	10008aac <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008aaa:	4798      	blx	r3
	}
}
10008aac:	bd10      	pop	{r4, pc}
10008aae:	46c0      	nop			; (mov r8, r8)
10008ab0:	40001000 	.word	0x40001000
10008ab4:	100125c8 	.word	0x100125c8
10008ab8:	100125cc 	.word	0x100125cc

10008abc <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008abc:	2301      	movs	r3, #1
10008abe:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008ac0:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ac2:	2202      	movs	r2, #2
10008ac4:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008ac6:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008ac8:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008aca:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008acc:	2200      	movs	r2, #0
10008ace:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008ad0:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008ad2:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008ad4:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008ad6:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008ad8:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008ada:	7602      	strb	r2, [r0, #24]
}
10008adc:	4770      	bx	lr
10008ade:	46c0      	nop			; (mov r8, r8)

10008ae0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008ae0:	2800      	cmp	r0, #0
10008ae2:	d107      	bne.n	10008af4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008ae4:	2900      	cmp	r1, #0
10008ae6:	d102      	bne.n	10008aee <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008ae8:	4b06      	ldr	r3, [pc, #24]	; (10008b04 <dualtimer_set_counter+0x24>)
10008aea:	601a      	str	r2, [r3, #0]
10008aec:	e009      	b.n	10008b02 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008aee:	4b05      	ldr	r3, [pc, #20]	; (10008b04 <dualtimer_set_counter+0x24>)
10008af0:	619a      	str	r2, [r3, #24]
10008af2:	e006      	b.n	10008b02 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008af4:	2900      	cmp	r1, #0
10008af6:	d102      	bne.n	10008afe <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008af8:	4b02      	ldr	r3, [pc, #8]	; (10008b04 <dualtimer_set_counter+0x24>)
10008afa:	621a      	str	r2, [r3, #32]
10008afc:	e001      	b.n	10008b02 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008afe:	4b01      	ldr	r3, [pc, #4]	; (10008b04 <dualtimer_set_counter+0x24>)
10008b00:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008b02:	4770      	bx	lr
10008b04:	40001000 	.word	0x40001000

10008b08 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008b08:	2800      	cmp	r0, #0
10008b0a:	d105      	bne.n	10008b18 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b0c:	4a06      	ldr	r2, [pc, #24]	; (10008b28 <dualtimer_enable+0x20>)
10008b0e:	7a11      	ldrb	r1, [r2, #8]
10008b10:	2380      	movs	r3, #128	; 0x80
10008b12:	430b      	orrs	r3, r1
10008b14:	7213      	strb	r3, [r2, #8]
10008b16:	e005      	b.n	10008b24 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008b18:	4903      	ldr	r1, [pc, #12]	; (10008b28 <dualtimer_enable+0x20>)
10008b1a:	2228      	movs	r2, #40	; 0x28
10008b1c:	5c88      	ldrb	r0, [r1, r2]
10008b1e:	2380      	movs	r3, #128	; 0x80
10008b20:	4303      	orrs	r3, r0
10008b22:	548b      	strb	r3, [r1, r2]
	}
}
10008b24:	4770      	bx	lr
10008b26:	46c0      	nop			; (mov r8, r8)
10008b28:	40001000 	.word	0x40001000

10008b2c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008b2c:	2800      	cmp	r0, #0
10008b2e:	d105      	bne.n	10008b3c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008b30:	4a06      	ldr	r2, [pc, #24]	; (10008b4c <dualtimer_disable+0x20>)
10008b32:	7a11      	ldrb	r1, [r2, #8]
10008b34:	237f      	movs	r3, #127	; 0x7f
10008b36:	400b      	ands	r3, r1
10008b38:	7213      	strb	r3, [r2, #8]
10008b3a:	e005      	b.n	10008b48 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008b3c:	4903      	ldr	r1, [pc, #12]	; (10008b4c <dualtimer_disable+0x20>)
10008b3e:	2228      	movs	r2, #40	; 0x28
10008b40:	5c88      	ldrb	r0, [r1, r2]
10008b42:	237f      	movs	r3, #127	; 0x7f
10008b44:	4003      	ands	r3, r0
10008b46:	548b      	strb	r3, [r1, r2]
	}
}
10008b48:	4770      	bx	lr
10008b4a:	46c0      	nop			; (mov r8, r8)
10008b4c:	40001000 	.word	0x40001000

10008b50 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008b50:	b570      	push	{r4, r5, r6, lr}
10008b52:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008b54:	2004      	movs	r0, #4
10008b56:	4b39      	ldr	r3, [pc, #228]	; (10008c3c <dualtimer_init+0xec>)
10008b58:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008b5a:	7823      	ldrb	r3, [r4, #0]
10008b5c:	2b00      	cmp	r3, #0
10008b5e:	d102      	bne.n	10008b66 <dualtimer_init+0x16>
10008b60:	7b23      	ldrb	r3, [r4, #12]
10008b62:	2b00      	cmp	r3, #0
10008b64:	d065      	beq.n	10008c32 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008b66:	4936      	ldr	r1, [pc, #216]	; (10008c40 <dualtimer_init+0xf0>)
10008b68:	68ca      	ldr	r2, [r1, #12]
10008b6a:	2320      	movs	r3, #32
10008b6c:	4313      	orrs	r3, r2
10008b6e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008b70:	7e22      	ldrb	r2, [r4, #24]
10008b72:	698b      	ldr	r3, [r1, #24]
10008b74:	2003      	movs	r0, #3
10008b76:	4002      	ands	r2, r0
10008b78:	0112      	lsls	r2, r2, #4
10008b7a:	302d      	adds	r0, #45	; 0x2d
10008b7c:	4383      	bics	r3, r0
10008b7e:	4313      	orrs	r3, r2
10008b80:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008b82:	7823      	ldrb	r3, [r4, #0]
10008b84:	2b00      	cmp	r3, #0
10008b86:	d026      	beq.n	10008bd6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008b88:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008b8a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008b8c:	2b00      	cmp	r3, #0
10008b8e:	d003      	beq.n	10008b98 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008b90:	3b02      	subs	r3, #2
10008b92:	425d      	negs	r5, r3
10008b94:	415d      	adcs	r5, r3
10008b96:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008b98:	78a2      	ldrb	r2, [r4, #2]
10008b9a:	0052      	lsls	r2, r2, #1
10008b9c:	2502      	movs	r5, #2
10008b9e:	402a      	ands	r2, r5
10008ba0:	78e3      	ldrb	r3, [r4, #3]
10008ba2:	009b      	lsls	r3, r3, #2
10008ba4:	350a      	adds	r5, #10
10008ba6:	402b      	ands	r3, r5
10008ba8:	431a      	orrs	r2, r3
10008baa:	0015      	movs	r5, r2
10008bac:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008bae:	7923      	ldrb	r3, [r4, #4]
10008bb0:	2b00      	cmp	r3, #0
10008bb2:	d001      	beq.n	10008bb8 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008bb4:	2320      	movs	r3, #32
10008bb6:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008bb8:	4b22      	ldr	r3, [pc, #136]	; (10008c44 <dualtimer_init+0xf4>)
10008bba:	68a2      	ldr	r2, [r4, #8]
10008bbc:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008bbe:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008bc0:	491f      	ldr	r1, [pc, #124]	; (10008c40 <dualtimer_init+0xf0>)
10008bc2:	22c4      	movs	r2, #196	; 0xc4
10008bc4:	0052      	lsls	r2, r2, #1
10008bc6:	5c88      	ldrb	r0, [r1, r2]
10008bc8:	2301      	movs	r3, #1
10008bca:	4303      	orrs	r3, r0
10008bcc:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008bce:	2000      	movs	r0, #0
10008bd0:	4b1d      	ldr	r3, [pc, #116]	; (10008c48 <dualtimer_init+0xf8>)
10008bd2:	4798      	blx	r3
10008bd4:	e000      	b.n	10008bd8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008bd6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008bd8:	7b23      	ldrb	r3, [r4, #12]
10008bda:	2b00      	cmp	r3, #0
10008bdc:	d029      	beq.n	10008c32 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008bde:	7b63      	ldrb	r3, [r4, #13]
10008be0:	2b00      	cmp	r3, #0
10008be2:	d005      	beq.n	10008bf0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008be4:	2b01      	cmp	r3, #1
10008be6:	d005      	beq.n	10008bf4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008be8:	2b02      	cmp	r3, #2
10008bea:	d104      	bne.n	10008bf6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008bec:	2540      	movs	r5, #64	; 0x40
10008bee:	e002      	b.n	10008bf6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008bf0:	2501      	movs	r5, #1
10008bf2:	e000      	b.n	10008bf6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008bf4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008bf6:	7ba3      	ldrb	r3, [r4, #14]
10008bf8:	005b      	lsls	r3, r3, #1
10008bfa:	2102      	movs	r1, #2
10008bfc:	4019      	ands	r1, r3
10008bfe:	7be2      	ldrb	r2, [r4, #15]
10008c00:	0092      	lsls	r2, r2, #2
10008c02:	230c      	movs	r3, #12
10008c04:	4013      	ands	r3, r2
10008c06:	430b      	orrs	r3, r1
10008c08:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008c0a:	7c23      	ldrb	r3, [r4, #16]
10008c0c:	2b00      	cmp	r3, #0
10008c0e:	d001      	beq.n	10008c14 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008c10:	2320      	movs	r3, #32
10008c12:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008c14:	6962      	ldr	r2, [r4, #20]
10008c16:	4b0b      	ldr	r3, [pc, #44]	; (10008c44 <dualtimer_init+0xf4>)
10008c18:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008c1a:	2228      	movs	r2, #40	; 0x28
10008c1c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008c1e:	4908      	ldr	r1, [pc, #32]	; (10008c40 <dualtimer_init+0xf0>)
10008c20:	3261      	adds	r2, #97	; 0x61
10008c22:	32ff      	adds	r2, #255	; 0xff
10008c24:	5c88      	ldrb	r0, [r1, r2]
10008c26:	2302      	movs	r3, #2
10008c28:	4303      	orrs	r3, r0
10008c2a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008c2c:	2001      	movs	r0, #1
10008c2e:	4b06      	ldr	r3, [pc, #24]	; (10008c48 <dualtimer_init+0xf8>)
10008c30:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008c32:	4906      	ldr	r1, [pc, #24]	; (10008c4c <dualtimer_init+0xfc>)
10008c34:	201e      	movs	r0, #30
10008c36:	4b06      	ldr	r3, [pc, #24]	; (10008c50 <dualtimer_init+0x100>)
10008c38:	4798      	blx	r3
}
10008c3a:	bd70      	pop	{r4, r5, r6, pc}
10008c3c:	100091a5 	.word	0x100091a5
10008c40:	4000b000 	.word	0x4000b000
10008c44:	40001000 	.word	0x40001000
10008c48:	10008b09 	.word	0x10008b09
10008c4c:	10008a79 	.word	0x10008a79
10008c50:	1000960d 	.word	0x1000960d

10008c54 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008c54:	2800      	cmp	r0, #0
10008c56:	d102      	bne.n	10008c5e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008c58:	4b02      	ldr	r3, [pc, #8]	; (10008c64 <dualtimer_register_callback+0x10>)
10008c5a:	6019      	str	r1, [r3, #0]
10008c5c:	e001      	b.n	10008c62 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008c5e:	4b02      	ldr	r3, [pc, #8]	; (10008c68 <dualtimer_register_callback+0x14>)
10008c60:	6019      	str	r1, [r3, #0]
	}
}
10008c62:	4770      	bx	lr
10008c64:	100125c8 	.word	0x100125c8
10008c68:	100125cc 	.word	0x100125cc

10008c6c <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008c6c:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008c6e:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008c70:	23ff      	movs	r3, #255	; 0xff
10008c72:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008c74:	2807      	cmp	r0, #7
10008c76:	d833      	bhi.n	10008ce0 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008c78:	4a4e      	ldr	r2, [pc, #312]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008c7a:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008c7c:	3bf8      	subs	r3, #248	; 0xf8
10008c7e:	4003      	ands	r3, r0
10008c80:	009b      	lsls	r3, r3, #2
10008c82:	2607      	movs	r6, #7
10008c84:	409e      	lsls	r6, r3
10008c86:	43b4      	bics	r4, r6
10008c88:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008c8a:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008c8c:	000e      	movs	r6, r1
10008c8e:	409e      	lsls	r6, r3
10008c90:	0033      	movs	r3, r6
10008c92:	4323      	orrs	r3, r4
10008c94:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008c96:	2901      	cmp	r1, #1
10008c98:	d000      	beq.n	10008c9c <gpio_pinmux_cofiguration+0x30>
10008c9a:	e08a      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008c9c:	2803      	cmp	r0, #3
10008c9e:	d80f      	bhi.n	10008cc0 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ca0:	0011      	movs	r1, r2
10008ca2:	22d0      	movs	r2, #208	; 0xd0
10008ca4:	0052      	lsls	r2, r2, #1
10008ca6:	588c      	ldr	r4, [r1, r2]
10008ca8:	2303      	movs	r3, #3
10008caa:	4018      	ands	r0, r3
10008cac:	00c0      	lsls	r0, r0, #3
10008cae:	333c      	adds	r3, #60	; 0x3c
10008cb0:	4083      	lsls	r3, r0
10008cb2:	439c      	bics	r4, r3
10008cb4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cb6:	588b      	ldr	r3, [r1, r2]
10008cb8:	4085      	lsls	r5, r0
10008cba:	431d      	orrs	r5, r3
10008cbc:	508d      	str	r5, [r1, r2]
10008cbe:	e078      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008cc0:	493c      	ldr	r1, [pc, #240]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008cc2:	22d2      	movs	r2, #210	; 0xd2
10008cc4:	0052      	lsls	r2, r2, #1
10008cc6:	588c      	ldr	r4, [r1, r2]
10008cc8:	2303      	movs	r3, #3
10008cca:	4018      	ands	r0, r3
10008ccc:	00c0      	lsls	r0, r0, #3
10008cce:	333c      	adds	r3, #60	; 0x3c
10008cd0:	4083      	lsls	r3, r0
10008cd2:	439c      	bics	r4, r3
10008cd4:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cd6:	588b      	ldr	r3, [r1, r2]
10008cd8:	4085      	lsls	r5, r0
10008cda:	431d      	orrs	r5, r3
10008cdc:	508d      	str	r5, [r1, r2]
10008cde:	e068      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008ce0:	280f      	cmp	r0, #15
10008ce2:	d832      	bhi.n	10008d4a <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ce4:	4a33      	ldr	r2, [pc, #204]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008ce6:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008ce8:	2307      	movs	r3, #7
10008cea:	4003      	ands	r3, r0
10008cec:	009b      	lsls	r3, r3, #2
10008cee:	2607      	movs	r6, #7
10008cf0:	409e      	lsls	r6, r3
10008cf2:	43b4      	bics	r4, r6
10008cf4:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008cf6:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008cf8:	000e      	movs	r6, r1
10008cfa:	409e      	lsls	r6, r3
10008cfc:	0033      	movs	r3, r6
10008cfe:	4323      	orrs	r3, r4
10008d00:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008d02:	2901      	cmp	r1, #1
10008d04:	d155      	bne.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008d06:	280b      	cmp	r0, #11
10008d08:	d80f      	bhi.n	10008d2a <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d0a:	0011      	movs	r1, r2
10008d0c:	22d4      	movs	r2, #212	; 0xd4
10008d0e:	0052      	lsls	r2, r2, #1
10008d10:	588c      	ldr	r4, [r1, r2]
10008d12:	2303      	movs	r3, #3
10008d14:	4018      	ands	r0, r3
10008d16:	00c0      	lsls	r0, r0, #3
10008d18:	333c      	adds	r3, #60	; 0x3c
10008d1a:	4083      	lsls	r3, r0
10008d1c:	439c      	bics	r4, r3
10008d1e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d20:	588b      	ldr	r3, [r1, r2]
10008d22:	4085      	lsls	r5, r0
10008d24:	431d      	orrs	r5, r3
10008d26:	508d      	str	r5, [r1, r2]
10008d28:	e043      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d2a:	4922      	ldr	r1, [pc, #136]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008d2c:	22d6      	movs	r2, #214	; 0xd6
10008d2e:	0052      	lsls	r2, r2, #1
10008d30:	588c      	ldr	r4, [r1, r2]
10008d32:	2303      	movs	r3, #3
10008d34:	4018      	ands	r0, r3
10008d36:	00c0      	lsls	r0, r0, #3
10008d38:	333c      	adds	r3, #60	; 0x3c
10008d3a:	4083      	lsls	r3, r0
10008d3c:	439c      	bics	r4, r3
10008d3e:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d40:	588b      	ldr	r3, [r1, r2]
10008d42:	4085      	lsls	r5, r0
10008d44:	431d      	orrs	r5, r3
10008d46:	508d      	str	r5, [r1, r2]
10008d48:	e033      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008d4a:	2817      	cmp	r0, #23
10008d4c:	d831      	bhi.n	10008db2 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008d4e:	4a19      	ldr	r2, [pc, #100]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008d50:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008d52:	2307      	movs	r3, #7
10008d54:	4003      	ands	r3, r0
10008d56:	009b      	lsls	r3, r3, #2
10008d58:	2607      	movs	r6, #7
10008d5a:	409e      	lsls	r6, r3
10008d5c:	43b4      	bics	r4, r6
10008d5e:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008d60:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008d62:	000e      	movs	r6, r1
10008d64:	409e      	lsls	r6, r3
10008d66:	0033      	movs	r3, r6
10008d68:	4323      	orrs	r3, r4
10008d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008d6c:	2901      	cmp	r1, #1
10008d6e:	d120      	bne.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008d70:	2813      	cmp	r0, #19
10008d72:	d80f      	bhi.n	10008d94 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d74:	0011      	movs	r1, r2
10008d76:	22d8      	movs	r2, #216	; 0xd8
10008d78:	0052      	lsls	r2, r2, #1
10008d7a:	588c      	ldr	r4, [r1, r2]
10008d7c:	2303      	movs	r3, #3
10008d7e:	4018      	ands	r0, r3
10008d80:	00c0      	lsls	r0, r0, #3
10008d82:	333c      	adds	r3, #60	; 0x3c
10008d84:	4083      	lsls	r3, r0
10008d86:	439c      	bics	r4, r3
10008d88:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d8a:	588b      	ldr	r3, [r1, r2]
10008d8c:	4085      	lsls	r5, r0
10008d8e:	431d      	orrs	r5, r3
10008d90:	508d      	str	r5, [r1, r2]
10008d92:	e00e      	b.n	10008db2 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d94:	4a07      	ldr	r2, [pc, #28]	; (10008db4 <gpio_pinmux_cofiguration+0x148>)
10008d96:	23da      	movs	r3, #218	; 0xda
10008d98:	005b      	lsls	r3, r3, #1
10008d9a:	58d1      	ldr	r1, [r2, r3]
10008d9c:	2403      	movs	r4, #3
10008d9e:	4020      	ands	r0, r4
10008da0:	00c0      	lsls	r0, r0, #3
10008da2:	343c      	adds	r4, #60	; 0x3c
10008da4:	4084      	lsls	r4, r0
10008da6:	43a1      	bics	r1, r4
10008da8:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008daa:	58d1      	ldr	r1, [r2, r3]
10008dac:	4085      	lsls	r5, r0
10008dae:	430d      	orrs	r5, r1
10008db0:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008db2:	bd70      	pop	{r4, r5, r6, pc}
10008db4:	4000b000 	.word	0x4000b000

10008db8 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008db8:	2801      	cmp	r0, #1
10008dba:	d00d      	beq.n	10008dd8 <system_clock_config+0x20>
10008dbc:	2800      	cmp	r0, #0
10008dbe:	d002      	beq.n	10008dc6 <system_clock_config+0xe>
10008dc0:	2802      	cmp	r0, #2
10008dc2:	d01c      	beq.n	10008dfe <system_clock_config+0x46>
10008dc4:	e02e      	b.n	10008e24 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008dc6:	4a18      	ldr	r2, [pc, #96]	; (10008e28 <system_clock_config+0x70>)
10008dc8:	6990      	ldr	r0, [r2, #24]
10008dca:	230c      	movs	r3, #12
10008dcc:	4303      	orrs	r3, r0
10008dce:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008dd0:	4a16      	ldr	r2, [pc, #88]	; (10008e2c <system_clock_config+0x74>)
10008dd2:	4b17      	ldr	r3, [pc, #92]	; (10008e30 <system_clock_config+0x78>)
10008dd4:	601a      	str	r2, [r3, #0]
			break;
10008dd6:	e01a      	b.n	10008e0e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008dd8:	4b13      	ldr	r3, [pc, #76]	; (10008e28 <system_clock_config+0x70>)
10008dda:	6998      	ldr	r0, [r3, #24]
10008ddc:	2208      	movs	r2, #8
10008dde:	4302      	orrs	r2, r0
10008de0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008de2:	699a      	ldr	r2, [r3, #24]
10008de4:	2004      	movs	r0, #4
10008de6:	4382      	bics	r2, r0
10008de8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008dea:	4a12      	ldr	r2, [pc, #72]	; (10008e34 <system_clock_config+0x7c>)
10008dec:	6853      	ldr	r3, [r2, #4]
10008dee:	2080      	movs	r0, #128	; 0x80
10008df0:	0300      	lsls	r0, r0, #12
10008df2:	4303      	orrs	r3, r0
10008df4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008df6:	4a10      	ldr	r2, [pc, #64]	; (10008e38 <system_clock_config+0x80>)
10008df8:	4b0d      	ldr	r3, [pc, #52]	; (10008e30 <system_clock_config+0x78>)
10008dfa:	601a      	str	r2, [r3, #0]
			break;
10008dfc:	e007      	b.n	10008e0e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dfe:	4a0a      	ldr	r2, [pc, #40]	; (10008e28 <system_clock_config+0x70>)
10008e00:	6993      	ldr	r3, [r2, #24]
10008e02:	200c      	movs	r0, #12
10008e04:	4383      	bics	r3, r0
10008e06:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008e08:	4a08      	ldr	r2, [pc, #32]	; (10008e2c <system_clock_config+0x74>)
10008e0a:	4b09      	ldr	r3, [pc, #36]	; (10008e30 <system_clock_config+0x78>)
10008e0c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008e0e:	4b06      	ldr	r3, [pc, #24]	; (10008e28 <system_clock_config+0x70>)
10008e10:	699a      	ldr	r2, [r3, #24]
10008e12:	2003      	movs	r0, #3
10008e14:	4382      	bics	r2, r0
10008e16:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008e18:	699a      	ldr	r2, [r3, #24]
10008e1a:	4001      	ands	r1, r0
10008e1c:	4311      	orrs	r1, r2
10008e1e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008e20:	2000      	movs	r0, #0
10008e22:	e000      	b.n	10008e26 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008e24:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008e26:	4770      	bx	lr
10008e28:	4000b000 	.word	0x4000b000
10008e2c:	018cba80 	.word	0x018cba80
10008e30:	10014098 	.word	0x10014098
10008e34:	4000f000 	.word	0x4000f000
10008e38:	001e8480 	.word	0x001e8480

10008e3c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008e3c:	4b01      	ldr	r3, [pc, #4]	; (10008e44 <system_clock_get_value+0x8>)
10008e3e:	6818      	ldr	r0, [r3, #0]
}
10008e40:	4770      	bx	lr
10008e42:	46c0      	nop			; (mov r8, r8)
10008e44:	10014098 	.word	0x10014098

10008e48 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008e48:	b500      	push	{lr}
	switch (peripheral) {
10008e4a:	2835      	cmp	r0, #53	; 0x35
10008e4c:	d900      	bls.n	10008e50 <system_clock_peripheral_enable+0x8>
10008e4e:	e1a2      	b.n	10009196 <system_clock_peripheral_enable+0x34e>
10008e50:	0080      	lsls	r0, r0, #2
10008e52:	4bd2      	ldr	r3, [pc, #840]	; (1000919c <system_clock_peripheral_enable+0x354>)
10008e54:	581b      	ldr	r3, [r3, r0]
10008e56:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e58:	4ad1      	ldr	r2, [pc, #836]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008e5a:	68d1      	ldr	r1, [r2, #12]
10008e5c:	2302      	movs	r3, #2
10008e5e:	430b      	orrs	r3, r1
10008e60:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e62:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008e64:	e198      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e66:	4ace      	ldr	r2, [pc, #824]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008e68:	68d1      	ldr	r1, [r2, #12]
10008e6a:	2304      	movs	r3, #4
10008e6c:	430b      	orrs	r3, r1
10008e6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008e72:	e191      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e74:	4aca      	ldr	r2, [pc, #808]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008e76:	68d1      	ldr	r1, [r2, #12]
10008e78:	2308      	movs	r3, #8
10008e7a:	430b      	orrs	r3, r1
10008e7c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008e80:	e18a      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e82:	4ac7      	ldr	r2, [pc, #796]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008e84:	68d1      	ldr	r1, [r2, #12]
10008e86:	2310      	movs	r3, #16
10008e88:	430b      	orrs	r3, r1
10008e8a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008e8e:	e183      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e90:	4ac3      	ldr	r2, [pc, #780]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008e92:	68d1      	ldr	r1, [r2, #12]
10008e94:	2320      	movs	r3, #32
10008e96:	430b      	orrs	r3, r1
10008e98:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008e9c:	e17c      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e9e:	4ac0      	ldr	r2, [pc, #768]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008ea0:	68d1      	ldr	r1, [r2, #12]
10008ea2:	2380      	movs	r3, #128	; 0x80
10008ea4:	430b      	orrs	r3, r1
10008ea6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008eaa:	e175      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008eac:	4abc      	ldr	r2, [pc, #752]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008eae:	68d3      	ldr	r3, [r2, #12]
10008eb0:	2180      	movs	r1, #128	; 0x80
10008eb2:	0049      	lsls	r1, r1, #1
10008eb4:	430b      	orrs	r3, r1
10008eb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008eba:	e16d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ebc:	4ab8      	ldr	r2, [pc, #736]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008ebe:	68d3      	ldr	r3, [r2, #12]
10008ec0:	2180      	movs	r1, #128	; 0x80
10008ec2:	0109      	lsls	r1, r1, #4
10008ec4:	430b      	orrs	r3, r1
10008ec6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008eca:	e165      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ecc:	4ab4      	ldr	r2, [pc, #720]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008ece:	68d3      	ldr	r3, [r2, #12]
10008ed0:	2180      	movs	r1, #128	; 0x80
10008ed2:	0149      	lsls	r1, r1, #5
10008ed4:	430b      	orrs	r3, r1
10008ed6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008eda:	e15d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008edc:	4ab0      	ldr	r2, [pc, #704]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008ede:	68d3      	ldr	r3, [r2, #12]
10008ee0:	2180      	movs	r1, #128	; 0x80
10008ee2:	0189      	lsls	r1, r1, #6
10008ee4:	430b      	orrs	r3, r1
10008ee6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008eea:	e155      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008eec:	4aac      	ldr	r2, [pc, #688]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008eee:	68d3      	ldr	r3, [r2, #12]
10008ef0:	2180      	movs	r1, #128	; 0x80
10008ef2:	01c9      	lsls	r1, r1, #7
10008ef4:	430b      	orrs	r3, r1
10008ef6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008efa:	e14d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008efc:	4aa8      	ldr	r2, [pc, #672]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008efe:	68d3      	ldr	r3, [r2, #12]
10008f00:	2180      	movs	r1, #128	; 0x80
10008f02:	0209      	lsls	r1, r1, #8
10008f04:	430b      	orrs	r3, r1
10008f06:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008f0a:	e145      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f0c:	4aa4      	ldr	r2, [pc, #656]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f0e:	68d3      	ldr	r3, [r2, #12]
10008f10:	2180      	movs	r1, #128	; 0x80
10008f12:	0249      	lsls	r1, r1, #9
10008f14:	430b      	orrs	r3, r1
10008f16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008f1a:	e13d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f1c:	4aa0      	ldr	r2, [pc, #640]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f1e:	68d3      	ldr	r3, [r2, #12]
10008f20:	2180      	movs	r1, #128	; 0x80
10008f22:	0289      	lsls	r1, r1, #10
10008f24:	430b      	orrs	r3, r1
10008f26:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f28:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008f2a:	e135      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f2c:	4a9c      	ldr	r2, [pc, #624]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f2e:	68d3      	ldr	r3, [r2, #12]
10008f30:	2180      	movs	r1, #128	; 0x80
10008f32:	02c9      	lsls	r1, r1, #11
10008f34:	430b      	orrs	r3, r1
10008f36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008f3a:	e12d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f3c:	4a98      	ldr	r2, [pc, #608]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f3e:	68d3      	ldr	r3, [r2, #12]
10008f40:	2180      	movs	r1, #128	; 0x80
10008f42:	0309      	lsls	r1, r1, #12
10008f44:	430b      	orrs	r3, r1
10008f46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008f4a:	e125      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f4c:	4a94      	ldr	r2, [pc, #592]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f4e:	68d3      	ldr	r3, [r2, #12]
10008f50:	2180      	movs	r1, #128	; 0x80
10008f52:	0349      	lsls	r1, r1, #13
10008f54:	430b      	orrs	r3, r1
10008f56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008f5a:	e11d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f5c:	4a90      	ldr	r2, [pc, #576]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f5e:	68d3      	ldr	r3, [r2, #12]
10008f60:	2180      	movs	r1, #128	; 0x80
10008f62:	0389      	lsls	r1, r1, #14
10008f64:	430b      	orrs	r3, r1
10008f66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008f6a:	e115      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f6c:	4a8c      	ldr	r2, [pc, #560]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f6e:	68d3      	ldr	r3, [r2, #12]
10008f70:	2180      	movs	r1, #128	; 0x80
10008f72:	03c9      	lsls	r1, r1, #15
10008f74:	430b      	orrs	r3, r1
10008f76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008f7a:	e10d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f7c:	4a88      	ldr	r2, [pc, #544]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f7e:	68d3      	ldr	r3, [r2, #12]
10008f80:	2180      	movs	r1, #128	; 0x80
10008f82:	0409      	lsls	r1, r1, #16
10008f84:	430b      	orrs	r3, r1
10008f86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008f8a:	e105      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f8c:	4a84      	ldr	r2, [pc, #528]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f8e:	68d3      	ldr	r3, [r2, #12]
10008f90:	2180      	movs	r1, #128	; 0x80
10008f92:	0449      	lsls	r1, r1, #17
10008f94:	430b      	orrs	r3, r1
10008f96:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f98:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008f9a:	e0fd      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f9c:	4a80      	ldr	r2, [pc, #512]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008f9e:	68d3      	ldr	r3, [r2, #12]
10008fa0:	2180      	movs	r1, #128	; 0x80
10008fa2:	0489      	lsls	r1, r1, #18
10008fa4:	430b      	orrs	r3, r1
10008fa6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008faa:	e0f5      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fac:	4a7c      	ldr	r2, [pc, #496]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008fae:	68d3      	ldr	r3, [r2, #12]
10008fb0:	2180      	movs	r1, #128	; 0x80
10008fb2:	04c9      	lsls	r1, r1, #19
10008fb4:	430b      	orrs	r3, r1
10008fb6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008fba:	e0ed      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fbc:	4a78      	ldr	r2, [pc, #480]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008fbe:	68d3      	ldr	r3, [r2, #12]
10008fc0:	2180      	movs	r1, #128	; 0x80
10008fc2:	0509      	lsls	r1, r1, #20
10008fc4:	430b      	orrs	r3, r1
10008fc6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008fca:	e0e5      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fcc:	4a74      	ldr	r2, [pc, #464]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008fce:	68d3      	ldr	r3, [r2, #12]
10008fd0:	2180      	movs	r1, #128	; 0x80
10008fd2:	0549      	lsls	r1, r1, #21
10008fd4:	430b      	orrs	r3, r1
10008fd6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008fda:	e0dd      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fdc:	4a70      	ldr	r2, [pc, #448]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008fde:	68d3      	ldr	r3, [r2, #12]
10008fe0:	2180      	movs	r1, #128	; 0x80
10008fe2:	0589      	lsls	r1, r1, #22
10008fe4:	430b      	orrs	r3, r1
10008fe6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fe8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008fea:	e0d5      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fec:	4a6c      	ldr	r2, [pc, #432]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008fee:	68d3      	ldr	r3, [r2, #12]
10008ff0:	2180      	movs	r1, #128	; 0x80
10008ff2:	05c9      	lsls	r1, r1, #23
10008ff4:	430b      	orrs	r3, r1
10008ff6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008ffa:	e0cd      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ffc:	4a68      	ldr	r2, [pc, #416]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10008ffe:	6911      	ldr	r1, [r2, #16]
10009000:	2301      	movs	r3, #1
10009002:	430b      	orrs	r3, r1
10009004:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009006:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10009008:	e0c6      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000900a:	4a65      	ldr	r2, [pc, #404]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000900c:	6911      	ldr	r1, [r2, #16]
1000900e:	2302      	movs	r3, #2
10009010:	430b      	orrs	r3, r1
10009012:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009014:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10009016:	e0bf      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009018:	4a61      	ldr	r2, [pc, #388]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000901a:	6911      	ldr	r1, [r2, #16]
1000901c:	2304      	movs	r3, #4
1000901e:	430b      	orrs	r3, r1
10009020:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009022:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10009024:	e0b8      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009026:	4a5e      	ldr	r2, [pc, #376]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10009028:	6911      	ldr	r1, [r2, #16]
1000902a:	2308      	movs	r3, #8
1000902c:	430b      	orrs	r3, r1
1000902e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009030:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10009032:	e0b1      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009034:	4a5a      	ldr	r2, [pc, #360]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10009036:	6911      	ldr	r1, [r2, #16]
10009038:	2310      	movs	r3, #16
1000903a:	430b      	orrs	r3, r1
1000903c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000903e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10009040:	e0aa      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009042:	4a57      	ldr	r2, [pc, #348]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10009044:	6911      	ldr	r1, [r2, #16]
10009046:	2320      	movs	r3, #32
10009048:	430b      	orrs	r3, r1
1000904a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000904c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000904e:	e0a3      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009050:	4a53      	ldr	r2, [pc, #332]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10009052:	6911      	ldr	r1, [r2, #16]
10009054:	2340      	movs	r3, #64	; 0x40
10009056:	430b      	orrs	r3, r1
10009058:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000905a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
1000905c:	e09c      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000905e:	4a50      	ldr	r2, [pc, #320]	; (100091a0 <system_clock_peripheral_enable+0x358>)
10009060:	6911      	ldr	r1, [r2, #16]
10009062:	2380      	movs	r3, #128	; 0x80
10009064:	430b      	orrs	r3, r1
10009066:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009068:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
1000906a:	e095      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000906c:	4a4c      	ldr	r2, [pc, #304]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000906e:	6913      	ldr	r3, [r2, #16]
10009070:	2180      	movs	r1, #128	; 0x80
10009072:	0049      	lsls	r1, r1, #1
10009074:	430b      	orrs	r3, r1
10009076:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009078:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
1000907a:	e08d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000907c:	4a48      	ldr	r2, [pc, #288]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000907e:	6913      	ldr	r3, [r2, #16]
10009080:	2180      	movs	r1, #128	; 0x80
10009082:	0089      	lsls	r1, r1, #2
10009084:	430b      	orrs	r3, r1
10009086:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009088:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
1000908a:	e085      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000908c:	4a44      	ldr	r2, [pc, #272]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000908e:	6913      	ldr	r3, [r2, #16]
10009090:	2180      	movs	r1, #128	; 0x80
10009092:	00c9      	lsls	r1, r1, #3
10009094:	430b      	orrs	r3, r1
10009096:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009098:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000909a:	e07d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000909c:	4a40      	ldr	r2, [pc, #256]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000909e:	6913      	ldr	r3, [r2, #16]
100090a0:	2180      	movs	r1, #128	; 0x80
100090a2:	0109      	lsls	r1, r1, #4
100090a4:	430b      	orrs	r3, r1
100090a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
100090aa:	e075      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090ac:	4a3c      	ldr	r2, [pc, #240]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090ae:	6913      	ldr	r3, [r2, #16]
100090b0:	2180      	movs	r1, #128	; 0x80
100090b2:	0149      	lsls	r1, r1, #5
100090b4:	430b      	orrs	r3, r1
100090b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
100090ba:	e06d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090bc:	4a38      	ldr	r2, [pc, #224]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090be:	6913      	ldr	r3, [r2, #16]
100090c0:	2180      	movs	r1, #128	; 0x80
100090c2:	0189      	lsls	r1, r1, #6
100090c4:	430b      	orrs	r3, r1
100090c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100090ca:	e065      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090cc:	4a34      	ldr	r2, [pc, #208]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090ce:	6913      	ldr	r3, [r2, #16]
100090d0:	2180      	movs	r1, #128	; 0x80
100090d2:	01c9      	lsls	r1, r1, #7
100090d4:	430b      	orrs	r3, r1
100090d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
100090da:	e05d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090dc:	4a30      	ldr	r2, [pc, #192]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090de:	6913      	ldr	r3, [r2, #16]
100090e0:	2180      	movs	r1, #128	; 0x80
100090e2:	0209      	lsls	r1, r1, #8
100090e4:	430b      	orrs	r3, r1
100090e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100090ea:	e055      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090ec:	4a2c      	ldr	r2, [pc, #176]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090ee:	6913      	ldr	r3, [r2, #16]
100090f0:	2180      	movs	r1, #128	; 0x80
100090f2:	0249      	lsls	r1, r1, #9
100090f4:	430b      	orrs	r3, r1
100090f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100090fa:	e04d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090fc:	4a28      	ldr	r2, [pc, #160]	; (100091a0 <system_clock_peripheral_enable+0x358>)
100090fe:	6913      	ldr	r3, [r2, #16]
10009100:	2180      	movs	r1, #128	; 0x80
10009102:	0289      	lsls	r1, r1, #10
10009104:	430b      	orrs	r3, r1
10009106:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009108:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000910a:	e045      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000910c:	4a24      	ldr	r2, [pc, #144]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000910e:	6913      	ldr	r3, [r2, #16]
10009110:	2180      	movs	r1, #128	; 0x80
10009112:	02c9      	lsls	r1, r1, #11
10009114:	430b      	orrs	r3, r1
10009116:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009118:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000911a:	e03d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000911c:	4a20      	ldr	r2, [pc, #128]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000911e:	6913      	ldr	r3, [r2, #16]
10009120:	2180      	movs	r1, #128	; 0x80
10009122:	0309      	lsls	r1, r1, #12
10009124:	430b      	orrs	r3, r1
10009126:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009128:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000912a:	e035      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000912c:	4a1c      	ldr	r2, [pc, #112]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000912e:	6913      	ldr	r3, [r2, #16]
10009130:	2180      	movs	r1, #128	; 0x80
10009132:	0349      	lsls	r1, r1, #13
10009134:	430b      	orrs	r3, r1
10009136:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000913a:	e02d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000913c:	4a18      	ldr	r2, [pc, #96]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000913e:	6913      	ldr	r3, [r2, #16]
10009140:	2180      	movs	r1, #128	; 0x80
10009142:	0389      	lsls	r1, r1, #14
10009144:	430b      	orrs	r3, r1
10009146:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009148:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000914a:	e025      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000914c:	4a14      	ldr	r2, [pc, #80]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000914e:	6913      	ldr	r3, [r2, #16]
10009150:	2180      	movs	r1, #128	; 0x80
10009152:	03c9      	lsls	r1, r1, #15
10009154:	430b      	orrs	r3, r1
10009156:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009158:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000915a:	e01d      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000915c:	4a10      	ldr	r2, [pc, #64]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000915e:	6913      	ldr	r3, [r2, #16]
10009160:	2180      	movs	r1, #128	; 0x80
10009162:	0409      	lsls	r1, r1, #16
10009164:	430b      	orrs	r3, r1
10009166:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009168:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000916a:	e015      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000916c:	4a0c      	ldr	r2, [pc, #48]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000916e:	7d11      	ldrb	r1, [r2, #20]
10009170:	2301      	movs	r3, #1
10009172:	430b      	orrs	r3, r1
10009174:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009176:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009178:	e00e      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
1000917a:	4a09      	ldr	r2, [pc, #36]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000917c:	7d11      	ldrb	r1, [r2, #20]
1000917e:	2302      	movs	r3, #2
10009180:	430b      	orrs	r3, r1
10009182:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009184:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10009186:	e007      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009188:	4a05      	ldr	r2, [pc, #20]	; (100091a0 <system_clock_peripheral_enable+0x358>)
1000918a:	7d11      	ldrb	r1, [r2, #20]
1000918c:	2304      	movs	r3, #4
1000918e:	430b      	orrs	r3, r1
10009190:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009192:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10009194:	e000      	b.n	10009198 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10009196:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009198:	bd00      	pop	{pc}
1000919a:	46c0      	nop			; (mov r8, r8)
1000919c:	1001173c 	.word	0x1001173c
100091a0:	4000b000 	.word	0x4000b000

100091a4 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
100091a4:	b500      	push	{lr}
	switch (peripheral) {
100091a6:	2843      	cmp	r0, #67	; 0x43
100091a8:	d900      	bls.n	100091ac <system_peripheral_reset+0x8>
100091aa:	e223      	b.n	100095f4 <system_peripheral_reset+0x450>
100091ac:	0080      	lsls	r0, r0, #2
100091ae:	4be0      	ldr	r3, [pc, #896]	; (10009530 <system_peripheral_reset+0x38c>)
100091b0:	581b      	ldr	r3, [r3, r0]
100091b2:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091b4:	4bdf      	ldr	r3, [pc, #892]	; (10009534 <system_peripheral_reset+0x390>)
100091b6:	6859      	ldr	r1, [r3, #4]
100091b8:	2202      	movs	r2, #2
100091ba:	4391      	bics	r1, r2
100091bc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091be:	6859      	ldr	r1, [r3, #4]
100091c0:	430a      	orrs	r2, r1
100091c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
100091c6:	e216      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091c8:	4bda      	ldr	r3, [pc, #872]	; (10009534 <system_peripheral_reset+0x390>)
100091ca:	6859      	ldr	r1, [r3, #4]
100091cc:	2204      	movs	r2, #4
100091ce:	4391      	bics	r1, r2
100091d0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091d2:	6859      	ldr	r1, [r3, #4]
100091d4:	430a      	orrs	r2, r1
100091d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091d8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
100091da:	e20c      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091dc:	4bd5      	ldr	r3, [pc, #852]	; (10009534 <system_peripheral_reset+0x390>)
100091de:	6859      	ldr	r1, [r3, #4]
100091e0:	2208      	movs	r2, #8
100091e2:	4391      	bics	r1, r2
100091e4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091e6:	6859      	ldr	r1, [r3, #4]
100091e8:	430a      	orrs	r2, r1
100091ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091ec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
100091ee:	e202      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091f0:	4bd0      	ldr	r3, [pc, #832]	; (10009534 <system_peripheral_reset+0x390>)
100091f2:	6859      	ldr	r1, [r3, #4]
100091f4:	2210      	movs	r2, #16
100091f6:	4391      	bics	r1, r2
100091f8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091fa:	6859      	ldr	r1, [r3, #4]
100091fc:	430a      	orrs	r2, r1
100091fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009200:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
10009202:	e1f8      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009204:	4bcb      	ldr	r3, [pc, #812]	; (10009534 <system_peripheral_reset+0x390>)
10009206:	6859      	ldr	r1, [r3, #4]
10009208:	2220      	movs	r2, #32
1000920a:	4391      	bics	r1, r2
1000920c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000920e:	6859      	ldr	r1, [r3, #4]
10009210:	430a      	orrs	r2, r1
10009212:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009214:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
10009216:	e1ee      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009218:	4bc6      	ldr	r3, [pc, #792]	; (10009534 <system_peripheral_reset+0x390>)
1000921a:	6859      	ldr	r1, [r3, #4]
1000921c:	2240      	movs	r2, #64	; 0x40
1000921e:	4391      	bics	r1, r2
10009220:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009222:	6859      	ldr	r1, [r3, #4]
10009224:	430a      	orrs	r2, r1
10009226:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009228:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
1000922a:	e1e4      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000922c:	4bc1      	ldr	r3, [pc, #772]	; (10009534 <system_peripheral_reset+0x390>)
1000922e:	6859      	ldr	r1, [r3, #4]
10009230:	2280      	movs	r2, #128	; 0x80
10009232:	4391      	bics	r1, r2
10009234:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009236:	6859      	ldr	r1, [r3, #4]
10009238:	430a      	orrs	r2, r1
1000923a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000923c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000923e:	e1da      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009240:	4bbc      	ldr	r3, [pc, #752]	; (10009534 <system_peripheral_reset+0x390>)
10009242:	6859      	ldr	r1, [r3, #4]
10009244:	4abc      	ldr	r2, [pc, #752]	; (10009538 <system_peripheral_reset+0x394>)
10009246:	400a      	ands	r2, r1
10009248:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000924a:	685a      	ldr	r2, [r3, #4]
1000924c:	2180      	movs	r1, #128	; 0x80
1000924e:	0049      	lsls	r1, r1, #1
10009250:	430a      	orrs	r2, r1
10009252:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009254:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10009256:	e1ce      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009258:	4bb6      	ldr	r3, [pc, #728]	; (10009534 <system_peripheral_reset+0x390>)
1000925a:	6859      	ldr	r1, [r3, #4]
1000925c:	4ab7      	ldr	r2, [pc, #732]	; (1000953c <system_peripheral_reset+0x398>)
1000925e:	400a      	ands	r2, r1
10009260:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009262:	685a      	ldr	r2, [r3, #4]
10009264:	2180      	movs	r1, #128	; 0x80
10009266:	0089      	lsls	r1, r1, #2
10009268:	430a      	orrs	r2, r1
1000926a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000926c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000926e:	e1c2      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009270:	4bb0      	ldr	r3, [pc, #704]	; (10009534 <system_peripheral_reset+0x390>)
10009272:	6859      	ldr	r1, [r3, #4]
10009274:	4ab2      	ldr	r2, [pc, #712]	; (10009540 <system_peripheral_reset+0x39c>)
10009276:	400a      	ands	r2, r1
10009278:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000927a:	685a      	ldr	r2, [r3, #4]
1000927c:	2180      	movs	r1, #128	; 0x80
1000927e:	00c9      	lsls	r1, r1, #3
10009280:	430a      	orrs	r2, r1
10009282:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009284:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009286:	e1b6      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009288:	4baa      	ldr	r3, [pc, #680]	; (10009534 <system_peripheral_reset+0x390>)
1000928a:	6859      	ldr	r1, [r3, #4]
1000928c:	4aad      	ldr	r2, [pc, #692]	; (10009544 <system_peripheral_reset+0x3a0>)
1000928e:	400a      	ands	r2, r1
10009290:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009292:	685a      	ldr	r2, [r3, #4]
10009294:	2180      	movs	r1, #128	; 0x80
10009296:	0109      	lsls	r1, r1, #4
10009298:	430a      	orrs	r2, r1
1000929a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000929c:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000929e:	e1aa      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092a0:	4ba4      	ldr	r3, [pc, #656]	; (10009534 <system_peripheral_reset+0x390>)
100092a2:	6859      	ldr	r1, [r3, #4]
100092a4:	4aa8      	ldr	r2, [pc, #672]	; (10009548 <system_peripheral_reset+0x3a4>)
100092a6:	400a      	ands	r2, r1
100092a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092aa:	685a      	ldr	r2, [r3, #4]
100092ac:	2180      	movs	r1, #128	; 0x80
100092ae:	0149      	lsls	r1, r1, #5
100092b0:	430a      	orrs	r2, r1
100092b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092b4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
100092b6:	e19e      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092b8:	4b9e      	ldr	r3, [pc, #632]	; (10009534 <system_peripheral_reset+0x390>)
100092ba:	6859      	ldr	r1, [r3, #4]
100092bc:	4aa3      	ldr	r2, [pc, #652]	; (1000954c <system_peripheral_reset+0x3a8>)
100092be:	400a      	ands	r2, r1
100092c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092c2:	685a      	ldr	r2, [r3, #4]
100092c4:	2180      	movs	r1, #128	; 0x80
100092c6:	0189      	lsls	r1, r1, #6
100092c8:	430a      	orrs	r2, r1
100092ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092cc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
100092ce:	e192      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092d0:	4b98      	ldr	r3, [pc, #608]	; (10009534 <system_peripheral_reset+0x390>)
100092d2:	6859      	ldr	r1, [r3, #4]
100092d4:	4a9e      	ldr	r2, [pc, #632]	; (10009550 <system_peripheral_reset+0x3ac>)
100092d6:	400a      	ands	r2, r1
100092d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092da:	685a      	ldr	r2, [r3, #4]
100092dc:	2180      	movs	r1, #128	; 0x80
100092de:	01c9      	lsls	r1, r1, #7
100092e0:	430a      	orrs	r2, r1
100092e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092e4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
100092e6:	e186      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092e8:	4b92      	ldr	r3, [pc, #584]	; (10009534 <system_peripheral_reset+0x390>)
100092ea:	6859      	ldr	r1, [r3, #4]
100092ec:	4a99      	ldr	r2, [pc, #612]	; (10009554 <system_peripheral_reset+0x3b0>)
100092ee:	400a      	ands	r2, r1
100092f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092f2:	685a      	ldr	r2, [r3, #4]
100092f4:	2180      	movs	r1, #128	; 0x80
100092f6:	0209      	lsls	r1, r1, #8
100092f8:	430a      	orrs	r2, r1
100092fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092fc:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
100092fe:	e17a      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009300:	4b8c      	ldr	r3, [pc, #560]	; (10009534 <system_peripheral_reset+0x390>)
10009302:	6859      	ldr	r1, [r3, #4]
10009304:	4a94      	ldr	r2, [pc, #592]	; (10009558 <system_peripheral_reset+0x3b4>)
10009306:	400a      	ands	r2, r1
10009308:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000930a:	685a      	ldr	r2, [r3, #4]
1000930c:	2180      	movs	r1, #128	; 0x80
1000930e:	0249      	lsls	r1, r1, #9
10009310:	430a      	orrs	r2, r1
10009312:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009314:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
10009316:	e16e      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009318:	4b86      	ldr	r3, [pc, #536]	; (10009534 <system_peripheral_reset+0x390>)
1000931a:	6859      	ldr	r1, [r3, #4]
1000931c:	4a8f      	ldr	r2, [pc, #572]	; (1000955c <system_peripheral_reset+0x3b8>)
1000931e:	400a      	ands	r2, r1
10009320:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009322:	685a      	ldr	r2, [r3, #4]
10009324:	2180      	movs	r1, #128	; 0x80
10009326:	0289      	lsls	r1, r1, #10
10009328:	430a      	orrs	r2, r1
1000932a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000932c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000932e:	e162      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009330:	4b80      	ldr	r3, [pc, #512]	; (10009534 <system_peripheral_reset+0x390>)
10009332:	6859      	ldr	r1, [r3, #4]
10009334:	4a8a      	ldr	r2, [pc, #552]	; (10009560 <system_peripheral_reset+0x3bc>)
10009336:	400a      	ands	r2, r1
10009338:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000933a:	685a      	ldr	r2, [r3, #4]
1000933c:	2180      	movs	r1, #128	; 0x80
1000933e:	02c9      	lsls	r1, r1, #11
10009340:	430a      	orrs	r2, r1
10009342:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009344:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009346:	e156      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009348:	4b7a      	ldr	r3, [pc, #488]	; (10009534 <system_peripheral_reset+0x390>)
1000934a:	6859      	ldr	r1, [r3, #4]
1000934c:	4a85      	ldr	r2, [pc, #532]	; (10009564 <system_peripheral_reset+0x3c0>)
1000934e:	400a      	ands	r2, r1
10009350:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009352:	685a      	ldr	r2, [r3, #4]
10009354:	2180      	movs	r1, #128	; 0x80
10009356:	0309      	lsls	r1, r1, #12
10009358:	430a      	orrs	r2, r1
1000935a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000935c:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000935e:	e14a      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009360:	4b74      	ldr	r3, [pc, #464]	; (10009534 <system_peripheral_reset+0x390>)
10009362:	6859      	ldr	r1, [r3, #4]
10009364:	4a80      	ldr	r2, [pc, #512]	; (10009568 <system_peripheral_reset+0x3c4>)
10009366:	400a      	ands	r2, r1
10009368:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000936a:	685a      	ldr	r2, [r3, #4]
1000936c:	2180      	movs	r1, #128	; 0x80
1000936e:	0349      	lsls	r1, r1, #13
10009370:	430a      	orrs	r2, r1
10009372:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009374:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009376:	e13e      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009378:	4b6e      	ldr	r3, [pc, #440]	; (10009534 <system_peripheral_reset+0x390>)
1000937a:	6859      	ldr	r1, [r3, #4]
1000937c:	4a7b      	ldr	r2, [pc, #492]	; (1000956c <system_peripheral_reset+0x3c8>)
1000937e:	400a      	ands	r2, r1
10009380:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009382:	685a      	ldr	r2, [r3, #4]
10009384:	2180      	movs	r1, #128	; 0x80
10009386:	0389      	lsls	r1, r1, #14
10009388:	430a      	orrs	r2, r1
1000938a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000938c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000938e:	e132      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009390:	4b68      	ldr	r3, [pc, #416]	; (10009534 <system_peripheral_reset+0x390>)
10009392:	6859      	ldr	r1, [r3, #4]
10009394:	4a76      	ldr	r2, [pc, #472]	; (10009570 <system_peripheral_reset+0x3cc>)
10009396:	400a      	ands	r2, r1
10009398:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000939a:	685a      	ldr	r2, [r3, #4]
1000939c:	2180      	movs	r1, #128	; 0x80
1000939e:	03c9      	lsls	r1, r1, #15
100093a0:	430a      	orrs	r2, r1
100093a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093a4:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
100093a6:	e126      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093a8:	4b62      	ldr	r3, [pc, #392]	; (10009534 <system_peripheral_reset+0x390>)
100093aa:	6859      	ldr	r1, [r3, #4]
100093ac:	4a71      	ldr	r2, [pc, #452]	; (10009574 <system_peripheral_reset+0x3d0>)
100093ae:	400a      	ands	r2, r1
100093b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093b2:	685a      	ldr	r2, [r3, #4]
100093b4:	2180      	movs	r1, #128	; 0x80
100093b6:	0409      	lsls	r1, r1, #16
100093b8:	430a      	orrs	r2, r1
100093ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093bc:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
100093be:	e11a      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093c0:	4b5c      	ldr	r3, [pc, #368]	; (10009534 <system_peripheral_reset+0x390>)
100093c2:	6859      	ldr	r1, [r3, #4]
100093c4:	4a6c      	ldr	r2, [pc, #432]	; (10009578 <system_peripheral_reset+0x3d4>)
100093c6:	400a      	ands	r2, r1
100093c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093ca:	685a      	ldr	r2, [r3, #4]
100093cc:	2180      	movs	r1, #128	; 0x80
100093ce:	0449      	lsls	r1, r1, #17
100093d0:	430a      	orrs	r2, r1
100093d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093d4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
100093d6:	e10e      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093d8:	4b56      	ldr	r3, [pc, #344]	; (10009534 <system_peripheral_reset+0x390>)
100093da:	6859      	ldr	r1, [r3, #4]
100093dc:	4a67      	ldr	r2, [pc, #412]	; (1000957c <system_peripheral_reset+0x3d8>)
100093de:	400a      	ands	r2, r1
100093e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093e2:	685a      	ldr	r2, [r3, #4]
100093e4:	2180      	movs	r1, #128	; 0x80
100093e6:	0489      	lsls	r1, r1, #18
100093e8:	430a      	orrs	r2, r1
100093ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093ec:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
100093ee:	e102      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093f0:	4b50      	ldr	r3, [pc, #320]	; (10009534 <system_peripheral_reset+0x390>)
100093f2:	6859      	ldr	r1, [r3, #4]
100093f4:	4a62      	ldr	r2, [pc, #392]	; (10009580 <system_peripheral_reset+0x3dc>)
100093f6:	400a      	ands	r2, r1
100093f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093fa:	685a      	ldr	r2, [r3, #4]
100093fc:	2180      	movs	r1, #128	; 0x80
100093fe:	04c9      	lsls	r1, r1, #19
10009400:	430a      	orrs	r2, r1
10009402:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009404:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
10009406:	e0f6      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009408:	4b4a      	ldr	r3, [pc, #296]	; (10009534 <system_peripheral_reset+0x390>)
1000940a:	6859      	ldr	r1, [r3, #4]
1000940c:	4a5d      	ldr	r2, [pc, #372]	; (10009584 <system_peripheral_reset+0x3e0>)
1000940e:	400a      	ands	r2, r1
10009410:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009412:	685a      	ldr	r2, [r3, #4]
10009414:	2180      	movs	r1, #128	; 0x80
10009416:	0509      	lsls	r1, r1, #20
10009418:	430a      	orrs	r2, r1
1000941a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000941c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
1000941e:	e0ea      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009420:	4b44      	ldr	r3, [pc, #272]	; (10009534 <system_peripheral_reset+0x390>)
10009422:	6859      	ldr	r1, [r3, #4]
10009424:	4a58      	ldr	r2, [pc, #352]	; (10009588 <system_peripheral_reset+0x3e4>)
10009426:	400a      	ands	r2, r1
10009428:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000942a:	685a      	ldr	r2, [r3, #4]
1000942c:	2180      	movs	r1, #128	; 0x80
1000942e:	0549      	lsls	r1, r1, #21
10009430:	430a      	orrs	r2, r1
10009432:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009434:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10009436:	e0de      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009438:	4b3e      	ldr	r3, [pc, #248]	; (10009534 <system_peripheral_reset+0x390>)
1000943a:	6859      	ldr	r1, [r3, #4]
1000943c:	4a53      	ldr	r2, [pc, #332]	; (1000958c <system_peripheral_reset+0x3e8>)
1000943e:	400a      	ands	r2, r1
10009440:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009442:	685a      	ldr	r2, [r3, #4]
10009444:	2180      	movs	r1, #128	; 0x80
10009446:	0589      	lsls	r1, r1, #22
10009448:	430a      	orrs	r2, r1
1000944a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000944c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000944e:	e0d2      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009450:	4b38      	ldr	r3, [pc, #224]	; (10009534 <system_peripheral_reset+0x390>)
10009452:	6859      	ldr	r1, [r3, #4]
10009454:	4a4e      	ldr	r2, [pc, #312]	; (10009590 <system_peripheral_reset+0x3ec>)
10009456:	400a      	ands	r2, r1
10009458:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000945a:	685a      	ldr	r2, [r3, #4]
1000945c:	2180      	movs	r1, #128	; 0x80
1000945e:	05c9      	lsls	r1, r1, #23
10009460:	430a      	orrs	r2, r1
10009462:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009464:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10009466:	e0c6      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009468:	4a32      	ldr	r2, [pc, #200]	; (10009534 <system_peripheral_reset+0x390>)
1000946a:	6853      	ldr	r3, [r2, #4]
1000946c:	005b      	lsls	r3, r3, #1
1000946e:	085b      	lsrs	r3, r3, #1
10009470:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009472:	6853      	ldr	r3, [r2, #4]
10009474:	2180      	movs	r1, #128	; 0x80
10009476:	0609      	lsls	r1, r1, #24
10009478:	430b      	orrs	r3, r1
1000947a:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000947c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000947e:	e0ba      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009480:	4b2c      	ldr	r3, [pc, #176]	; (10009534 <system_peripheral_reset+0x390>)
10009482:	891a      	ldrh	r2, [r3, #8]
10009484:	2101      	movs	r1, #1
10009486:	438a      	bics	r2, r1
10009488:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000948a:	8919      	ldrh	r1, [r3, #8]
1000948c:	2201      	movs	r2, #1
1000948e:	430a      	orrs	r2, r1
10009490:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009492:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009494:	e0af      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009496:	4b27      	ldr	r3, [pc, #156]	; (10009534 <system_peripheral_reset+0x390>)
10009498:	891a      	ldrh	r2, [r3, #8]
1000949a:	2102      	movs	r1, #2
1000949c:	438a      	bics	r2, r1
1000949e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094a0:	8919      	ldrh	r1, [r3, #8]
100094a2:	2202      	movs	r2, #2
100094a4:	430a      	orrs	r2, r1
100094a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
100094aa:	e0a4      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094ac:	4b21      	ldr	r3, [pc, #132]	; (10009534 <system_peripheral_reset+0x390>)
100094ae:	891a      	ldrh	r2, [r3, #8]
100094b0:	2104      	movs	r1, #4
100094b2:	438a      	bics	r2, r1
100094b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094b6:	8919      	ldrh	r1, [r3, #8]
100094b8:	2204      	movs	r2, #4
100094ba:	430a      	orrs	r2, r1
100094bc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094be:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
100094c0:	e099      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094c2:	4b1c      	ldr	r3, [pc, #112]	; (10009534 <system_peripheral_reset+0x390>)
100094c4:	891a      	ldrh	r2, [r3, #8]
100094c6:	2108      	movs	r1, #8
100094c8:	438a      	bics	r2, r1
100094ca:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094cc:	8919      	ldrh	r1, [r3, #8]
100094ce:	2208      	movs	r2, #8
100094d0:	430a      	orrs	r2, r1
100094d2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d4:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
100094d6:	e08e      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094d8:	4b16      	ldr	r3, [pc, #88]	; (10009534 <system_peripheral_reset+0x390>)
100094da:	891a      	ldrh	r2, [r3, #8]
100094dc:	2110      	movs	r1, #16
100094de:	438a      	bics	r2, r1
100094e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094e2:	8919      	ldrh	r1, [r3, #8]
100094e4:	2210      	movs	r2, #16
100094e6:	430a      	orrs	r2, r1
100094e8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094ea:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
100094ec:	e083      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094ee:	4b11      	ldr	r3, [pc, #68]	; (10009534 <system_peripheral_reset+0x390>)
100094f0:	891a      	ldrh	r2, [r3, #8]
100094f2:	2120      	movs	r1, #32
100094f4:	438a      	bics	r2, r1
100094f6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094f8:	8919      	ldrh	r1, [r3, #8]
100094fa:	2220      	movs	r2, #32
100094fc:	430a      	orrs	r2, r1
100094fe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009500:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
10009502:	e078      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009504:	4b0b      	ldr	r3, [pc, #44]	; (10009534 <system_peripheral_reset+0x390>)
10009506:	891a      	ldrh	r2, [r3, #8]
10009508:	2140      	movs	r1, #64	; 0x40
1000950a:	438a      	bics	r2, r1
1000950c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000950e:	8919      	ldrh	r1, [r3, #8]
10009510:	2240      	movs	r2, #64	; 0x40
10009512:	430a      	orrs	r2, r1
10009514:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009516:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
10009518:	e06d      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000951a:	4b06      	ldr	r3, [pc, #24]	; (10009534 <system_peripheral_reset+0x390>)
1000951c:	891a      	ldrh	r2, [r3, #8]
1000951e:	2180      	movs	r1, #128	; 0x80
10009520:	438a      	bics	r2, r1
10009522:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009524:	8919      	ldrh	r1, [r3, #8]
10009526:	2280      	movs	r2, #128	; 0x80
10009528:	430a      	orrs	r2, r1
1000952a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000952c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000952e:	e062      	b.n	100095f6 <system_peripheral_reset+0x452>
10009530:	10011814 	.word	0x10011814
10009534:	4000b000 	.word	0x4000b000
10009538:	fffffeff 	.word	0xfffffeff
1000953c:	fffffdff 	.word	0xfffffdff
10009540:	fffffbff 	.word	0xfffffbff
10009544:	fffff7ff 	.word	0xfffff7ff
10009548:	ffffefff 	.word	0xffffefff
1000954c:	ffffdfff 	.word	0xffffdfff
10009550:	ffffbfff 	.word	0xffffbfff
10009554:	ffff7fff 	.word	0xffff7fff
10009558:	fffeffff 	.word	0xfffeffff
1000955c:	fffdffff 	.word	0xfffdffff
10009560:	fffbffff 	.word	0xfffbffff
10009564:	fff7ffff 	.word	0xfff7ffff
10009568:	ffefffff 	.word	0xffefffff
1000956c:	ffdfffff 	.word	0xffdfffff
10009570:	ffbfffff 	.word	0xffbfffff
10009574:	ff7fffff 	.word	0xff7fffff
10009578:	feffffff 	.word	0xfeffffff
1000957c:	fdffffff 	.word	0xfdffffff
10009580:	fbffffff 	.word	0xfbffffff
10009584:	f7ffffff 	.word	0xf7ffffff
10009588:	efffffff 	.word	0xefffffff
1000958c:	dfffffff 	.word	0xdfffffff
10009590:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009594:	4b18      	ldr	r3, [pc, #96]	; (100095f8 <system_peripheral_reset+0x454>)
10009596:	8919      	ldrh	r1, [r3, #8]
10009598:	4a18      	ldr	r2, [pc, #96]	; (100095fc <system_peripheral_reset+0x458>)
1000959a:	400a      	ands	r2, r1
1000959c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000959e:	8919      	ldrh	r1, [r3, #8]
100095a0:	2280      	movs	r2, #128	; 0x80
100095a2:	0052      	lsls	r2, r2, #1
100095a4:	430a      	orrs	r2, r1
100095a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
100095aa:	e024      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095ac:	4b12      	ldr	r3, [pc, #72]	; (100095f8 <system_peripheral_reset+0x454>)
100095ae:	8919      	ldrh	r1, [r3, #8]
100095b0:	4a13      	ldr	r2, [pc, #76]	; (10009600 <system_peripheral_reset+0x45c>)
100095b2:	400a      	ands	r2, r1
100095b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095b6:	8919      	ldrh	r1, [r3, #8]
100095b8:	2280      	movs	r2, #128	; 0x80
100095ba:	0092      	lsls	r2, r2, #2
100095bc:	430a      	orrs	r2, r1
100095be:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
100095c2:	e018      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095c4:	4b0c      	ldr	r3, [pc, #48]	; (100095f8 <system_peripheral_reset+0x454>)
100095c6:	8919      	ldrh	r1, [r3, #8]
100095c8:	4a0e      	ldr	r2, [pc, #56]	; (10009604 <system_peripheral_reset+0x460>)
100095ca:	400a      	ands	r2, r1
100095cc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095ce:	8919      	ldrh	r1, [r3, #8]
100095d0:	2280      	movs	r2, #128	; 0x80
100095d2:	00d2      	lsls	r2, r2, #3
100095d4:	430a      	orrs	r2, r1
100095d6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100095da:	e00c      	b.n	100095f6 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095dc:	4b06      	ldr	r3, [pc, #24]	; (100095f8 <system_peripheral_reset+0x454>)
100095de:	8919      	ldrh	r1, [r3, #8]
100095e0:	4a09      	ldr	r2, [pc, #36]	; (10009608 <system_peripheral_reset+0x464>)
100095e2:	400a      	ands	r2, r1
100095e4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095e6:	8919      	ldrh	r1, [r3, #8]
100095e8:	2280      	movs	r2, #128	; 0x80
100095ea:	0112      	lsls	r2, r2, #4
100095ec:	430a      	orrs	r2, r1
100095ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f0:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
100095f2:	e000      	b.n	100095f6 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100095f4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100095f6:	bd00      	pop	{pc}
100095f8:	4000b000 	.word	0x4000b000
100095fc:	fffffeff 	.word	0xfffffeff
10009600:	fffffdff 	.word	0xfffffdff
10009604:	fffffbff 	.word	0xfffffbff
10009608:	fffff7ff 	.word	0xfffff7ff

1000960c <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000960c:	2380      	movs	r3, #128	; 0x80
1000960e:	04db      	lsls	r3, r3, #19
10009610:	469c      	mov	ip, r3
10009612:	4460      	add	r0, ip
10009614:	0080      	lsls	r0, r0, #2
10009616:	6001      	str	r1, [r0, #0]
}
10009618:	4770      	bx	lr
1000961a:	46c0      	nop			; (mov r8, r8)

1000961c <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000961c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000961e:	4b20      	ldr	r3, [pc, #128]	; (100096a0 <uart_rx0_isr_handler+0x84>)
10009620:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009622:	6823      	ldr	r3, [r4, #0]
10009624:	7d1d      	ldrb	r5, [r3, #20]
10009626:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009628:	066a      	lsls	r2, r5, #25
1000962a:	d513      	bpl.n	10009654 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000962c:	211e      	movs	r1, #30
1000962e:	2222      	movs	r2, #34	; 0x22
10009630:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009632:	7e1a      	ldrb	r2, [r3, #24]
10009634:	3123      	adds	r1, #35	; 0x23
10009636:	438a      	bics	r2, r1
10009638:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000963a:	2321      	movs	r3, #33	; 0x21
1000963c:	5ce3      	ldrb	r3, [r4, r3]
1000963e:	071b      	lsls	r3, r3, #28
10009640:	d506      	bpl.n	10009650 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009642:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009644:	5ce3      	ldrb	r3, [r4, r3]
10009646:	071b      	lsls	r3, r3, #28
10009648:	d502      	bpl.n	10009650 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000964a:	0020      	movs	r0, r4
1000964c:	6923      	ldr	r3, [r4, #16]
1000964e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009650:	6823      	ldr	r3, [r4, #0]
10009652:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009654:	07eb      	lsls	r3, r5, #31
10009656:	d522      	bpl.n	1000969e <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009658:	6823      	ldr	r3, [r4, #0]
1000965a:	7c1b      	ldrb	r3, [r3, #16]
1000965c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000965e:	6962      	ldr	r2, [r4, #20]
10009660:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009662:	6963      	ldr	r3, [r4, #20]
10009664:	3301      	adds	r3, #1
10009666:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009668:	8ba3      	ldrh	r3, [r4, #28]
1000966a:	3b01      	subs	r3, #1
1000966c:	b29b      	uxth	r3, r3
1000966e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009670:	8ba3      	ldrh	r3, [r4, #28]
10009672:	b29b      	uxth	r3, r3
10009674:	2b00      	cmp	r3, #0
10009676:	d112      	bne.n	1000969e <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009678:	3321      	adds	r3, #33	; 0x21
1000967a:	5ce3      	ldrb	r3, [r4, r3]
1000967c:	075b      	lsls	r3, r3, #29
1000967e:	d50e      	bpl.n	1000969e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009680:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009682:	5ce3      	ldrb	r3, [r4, r3]
10009684:	075b      	lsls	r3, r3, #29
10009686:	d50a      	bpl.n	1000969e <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009688:	2200      	movs	r2, #0
1000968a:	2322      	movs	r3, #34	; 0x22
1000968c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000968e:	6822      	ldr	r2, [r4, #0]
10009690:	7e13      	ldrb	r3, [r2, #24]
10009692:	2101      	movs	r1, #1
10009694:	438b      	bics	r3, r1
10009696:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009698:	68e3      	ldr	r3, [r4, #12]
1000969a:	0020      	movs	r0, r4
1000969c:	4798      	blx	r3
			}
		}
	}
}
1000969e:	bd70      	pop	{r4, r5, r6, pc}
100096a0:	1001409c 	.word	0x1001409c

100096a4 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
100096a4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100096a6:	4b21      	ldr	r3, [pc, #132]	; (1000972c <uart_tx0_isr_handler+0x88>)
100096a8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100096aa:	6823      	ldr	r3, [r4, #0]
100096ac:	791d      	ldrb	r5, [r3, #4]
100096ae:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100096b0:	07ea      	lsls	r2, r5, #31
100096b2:	d517      	bpl.n	100096e4 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100096b4:	69a2      	ldr	r2, [r4, #24]
100096b6:	7811      	ldrb	r1, [r2, #0]
100096b8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100096ba:	3201      	adds	r2, #1
100096bc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100096be:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100096c0:	8be3      	ldrh	r3, [r4, #30]
100096c2:	3b01      	subs	r3, #1
100096c4:	b29b      	uxth	r3, r3
100096c6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100096c8:	8be3      	ldrh	r3, [r4, #30]
100096ca:	b29b      	uxth	r3, r3
100096cc:	2b00      	cmp	r3, #0
100096ce:	d109      	bne.n	100096e4 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100096d0:	6822      	ldr	r2, [r4, #0]
100096d2:	7a13      	ldrb	r3, [r2, #8]
100096d4:	2101      	movs	r1, #1
100096d6:	438b      	bics	r3, r1
100096d8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100096da:	6822      	ldr	r2, [r4, #0]
100096dc:	7a11      	ldrb	r1, [r2, #8]
100096de:	2310      	movs	r3, #16
100096e0:	430b      	orrs	r3, r1
100096e2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100096e4:	06eb      	lsls	r3, r5, #27
100096e6:	d512      	bpl.n	1000970e <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096e8:	2321      	movs	r3, #33	; 0x21
100096ea:	5ce3      	ldrb	r3, [r4, r3]
100096ec:	07db      	lsls	r3, r3, #31
100096ee:	d50e      	bpl.n	1000970e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100096f0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096f2:	5ce3      	ldrb	r3, [r4, r3]
100096f4:	07db      	lsls	r3, r3, #31
100096f6:	d50a      	bpl.n	1000970e <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100096f8:	2200      	movs	r2, #0
100096fa:	2322      	movs	r3, #34	; 0x22
100096fc:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100096fe:	6822      	ldr	r2, [r4, #0]
10009700:	7a13      	ldrb	r3, [r2, #8]
10009702:	2110      	movs	r1, #16
10009704:	438b      	bics	r3, r1
10009706:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009708:	0020      	movs	r0, r4
1000970a:	6863      	ldr	r3, [r4, #4]
1000970c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000970e:	06ab      	lsls	r3, r5, #26
10009710:	d50a      	bpl.n	10009728 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009712:	2321      	movs	r3, #33	; 0x21
10009714:	5ce3      	ldrb	r3, [r4, r3]
10009716:	079b      	lsls	r3, r3, #30
10009718:	d506      	bpl.n	10009728 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000971a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000971c:	5ce3      	ldrb	r3, [r4, r3]
1000971e:	079b      	lsls	r3, r3, #30
10009720:	d502      	bpl.n	10009728 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009722:	68a3      	ldr	r3, [r4, #8]
10009724:	0020      	movs	r0, r4
10009726:	4798      	blx	r3
		}

	}
}
10009728:	bd70      	pop	{r4, r5, r6, pc}
1000972a:	46c0      	nop			; (mov r8, r8)
1000972c:	1001409c 	.word	0x1001409c

10009730 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009730:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009732:	4b20      	ldr	r3, [pc, #128]	; (100097b4 <uart_rx1_isr_handler+0x84>)
10009734:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009736:	6823      	ldr	r3, [r4, #0]
10009738:	7d1d      	ldrb	r5, [r3, #20]
1000973a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000973c:	066a      	lsls	r2, r5, #25
1000973e:	d513      	bpl.n	10009768 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009740:	211e      	movs	r1, #30
10009742:	2222      	movs	r2, #34	; 0x22
10009744:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009746:	7e1a      	ldrb	r2, [r3, #24]
10009748:	3123      	adds	r1, #35	; 0x23
1000974a:	438a      	bics	r2, r1
1000974c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000974e:	2321      	movs	r3, #33	; 0x21
10009750:	5ce3      	ldrb	r3, [r4, r3]
10009752:	071b      	lsls	r3, r3, #28
10009754:	d506      	bpl.n	10009764 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009756:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009758:	5ce3      	ldrb	r3, [r4, r3]
1000975a:	071b      	lsls	r3, r3, #28
1000975c:	d502      	bpl.n	10009764 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000975e:	0020      	movs	r0, r4
10009760:	6923      	ldr	r3, [r4, #16]
10009762:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009764:	6823      	ldr	r3, [r4, #0]
10009766:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009768:	07eb      	lsls	r3, r5, #31
1000976a:	d522      	bpl.n	100097b2 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000976c:	6823      	ldr	r3, [r4, #0]
1000976e:	7c1b      	ldrb	r3, [r3, #16]
10009770:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009772:	6962      	ldr	r2, [r4, #20]
10009774:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009776:	6963      	ldr	r3, [r4, #20]
10009778:	3301      	adds	r3, #1
1000977a:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000977c:	8ba3      	ldrh	r3, [r4, #28]
1000977e:	3b01      	subs	r3, #1
10009780:	b29b      	uxth	r3, r3
10009782:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009784:	8ba3      	ldrh	r3, [r4, #28]
10009786:	b29b      	uxth	r3, r3
10009788:	2b00      	cmp	r3, #0
1000978a:	d112      	bne.n	100097b2 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000978c:	3321      	adds	r3, #33	; 0x21
1000978e:	5ce3      	ldrb	r3, [r4, r3]
10009790:	075b      	lsls	r3, r3, #29
10009792:	d50e      	bpl.n	100097b2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009794:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009796:	5ce3      	ldrb	r3, [r4, r3]
10009798:	075b      	lsls	r3, r3, #29
1000979a:	d50a      	bpl.n	100097b2 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000979c:	2200      	movs	r2, #0
1000979e:	2322      	movs	r3, #34	; 0x22
100097a0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
100097a2:	6822      	ldr	r2, [r4, #0]
100097a4:	7e13      	ldrb	r3, [r2, #24]
100097a6:	2101      	movs	r1, #1
100097a8:	438b      	bics	r3, r1
100097aa:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
100097ac:	68e3      	ldr	r3, [r4, #12]
100097ae:	0020      	movs	r0, r4
100097b0:	4798      	blx	r3
			}
		}
	}
}
100097b2:	bd70      	pop	{r4, r5, r6, pc}
100097b4:	1001409c 	.word	0x1001409c

100097b8 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
100097b8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100097ba:	4b21      	ldr	r3, [pc, #132]	; (10009840 <uart_tx1_isr_handler+0x88>)
100097bc:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
100097be:	6823      	ldr	r3, [r4, #0]
100097c0:	791d      	ldrb	r5, [r3, #4]
100097c2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100097c4:	07ea      	lsls	r2, r5, #31
100097c6:	d517      	bpl.n	100097f8 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100097c8:	69a2      	ldr	r2, [r4, #24]
100097ca:	7811      	ldrb	r1, [r2, #0]
100097cc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100097ce:	3201      	adds	r2, #1
100097d0:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100097d2:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100097d4:	8be3      	ldrh	r3, [r4, #30]
100097d6:	3b01      	subs	r3, #1
100097d8:	b29b      	uxth	r3, r3
100097da:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100097dc:	8be3      	ldrh	r3, [r4, #30]
100097de:	b29b      	uxth	r3, r3
100097e0:	2b00      	cmp	r3, #0
100097e2:	d109      	bne.n	100097f8 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100097e4:	6822      	ldr	r2, [r4, #0]
100097e6:	7a13      	ldrb	r3, [r2, #8]
100097e8:	2101      	movs	r1, #1
100097ea:	438b      	bics	r3, r1
100097ec:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100097ee:	6822      	ldr	r2, [r4, #0]
100097f0:	7a11      	ldrb	r1, [r2, #8]
100097f2:	2310      	movs	r3, #16
100097f4:	430b      	orrs	r3, r1
100097f6:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100097f8:	06eb      	lsls	r3, r5, #27
100097fa:	d512      	bpl.n	10009822 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097fc:	2321      	movs	r3, #33	; 0x21
100097fe:	5ce3      	ldrb	r3, [r4, r3]
10009800:	07db      	lsls	r3, r3, #31
10009802:	d50e      	bpl.n	10009822 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009804:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009806:	5ce3      	ldrb	r3, [r4, r3]
10009808:	07db      	lsls	r3, r3, #31
1000980a:	d50a      	bpl.n	10009822 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000980c:	2200      	movs	r2, #0
1000980e:	2322      	movs	r3, #34	; 0x22
10009810:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009812:	6822      	ldr	r2, [r4, #0]
10009814:	7a13      	ldrb	r3, [r2, #8]
10009816:	2110      	movs	r1, #16
10009818:	438b      	bics	r3, r1
1000981a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000981c:	0020      	movs	r0, r4
1000981e:	6863      	ldr	r3, [r4, #4]
10009820:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009822:	06ab      	lsls	r3, r5, #26
10009824:	d50a      	bpl.n	1000983c <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009826:	2321      	movs	r3, #33	; 0x21
10009828:	5ce3      	ldrb	r3, [r4, r3]
1000982a:	079b      	lsls	r3, r3, #30
1000982c:	d506      	bpl.n	1000983c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000982e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009830:	5ce3      	ldrb	r3, [r4, r3]
10009832:	079b      	lsls	r3, r3, #30
10009834:	d502      	bpl.n	1000983c <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009836:	68a3      	ldr	r3, [r4, #8]
10009838:	0020      	movs	r0, r4
1000983a:	4798      	blx	r3
		}

	}
}
1000983c:	bd70      	pop	{r4, r5, r6, pc}
1000983e:	46c0      	nop			; (mov r8, r8)
10009840:	1001409c 	.word	0x1001409c

10009844 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009844:	23e1      	movs	r3, #225	; 0xe1
10009846:	025b      	lsls	r3, r3, #9
10009848:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000984a:	2300      	movs	r3, #0
1000984c:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000984e:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009850:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009852:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009854:	3302      	adds	r3, #2
10009856:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009858:	2203      	movs	r2, #3
1000985a:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
1000985c:	3201      	adds	r2, #1
1000985e:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009860:	3201      	adds	r2, #1
10009862:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009864:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009866:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009868:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
1000986a:	6243      	str	r3, [r0, #36]	; 0x24
}
1000986c:	4770      	bx	lr
1000986e:	46c0      	nop			; (mov r8, r8)

10009870 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009872:	464f      	mov	r7, r9
10009874:	4646      	mov	r6, r8
10009876:	b4c0      	push	{r6, r7}
10009878:	0005      	movs	r5, r0
1000987a:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000987c:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000987e:	2300      	movs	r3, #0
10009880:	6043      	str	r3, [r0, #4]
10009882:	6083      	str	r3, [r0, #8]
10009884:	60c3      	str	r3, [r0, #12]
10009886:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009888:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000988a:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000988c:	2200      	movs	r2, #0
1000988e:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009890:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009892:	3320      	adds	r3, #32
10009894:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009896:	3301      	adds	r3, #1
10009898:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000989a:	3301      	adds	r3, #1
1000989c:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000989e:	4b55      	ldr	r3, [pc, #340]	; (100099f4 <uart_init+0x184>)
100098a0:	4299      	cmp	r1, r3
100098a2:	d118      	bne.n	100098d6 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
100098a4:	2009      	movs	r0, #9
100098a6:	4c54      	ldr	r4, [pc, #336]	; (100099f8 <uart_init+0x188>)
100098a8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
100098aa:	200a      	movs	r0, #10
100098ac:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
100098ae:	2009      	movs	r0, #9
100098b0:	4c52      	ldr	r4, [pc, #328]	; (100099fc <uart_init+0x18c>)
100098b2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
100098b4:	200a      	movs	r0, #10
100098b6:	47a0      	blx	r4
		_uart_instances[0] = module;
100098b8:	4b51      	ldr	r3, [pc, #324]	; (10009a00 <uart_init+0x190>)
100098ba:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
100098bc:	4951      	ldr	r1, [pc, #324]	; (10009a04 <uart_init+0x194>)
100098be:	2010      	movs	r0, #16
100098c0:	4c51      	ldr	r4, [pc, #324]	; (10009a08 <uart_init+0x198>)
100098c2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
100098c4:	4951      	ldr	r1, [pc, #324]	; (10009a0c <uart_init+0x19c>)
100098c6:	2011      	movs	r0, #17
100098c8:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100098ca:	4b51      	ldr	r3, [pc, #324]	; (10009a10 <uart_init+0x1a0>)
100098cc:	2201      	movs	r2, #1
100098ce:	601a      	str	r2, [r3, #0]
100098d0:	3201      	adds	r2, #1
100098d2:	601a      	str	r2, [r3, #0]
100098d4:	e01a      	b.n	1000990c <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
100098d6:	4b4f      	ldr	r3, [pc, #316]	; (10009a14 <uart_init+0x1a4>)
100098d8:	4299      	cmp	r1, r3
100098da:	d117      	bne.n	1000990c <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
100098dc:	200b      	movs	r0, #11
100098de:	4c46      	ldr	r4, [pc, #280]	; (100099f8 <uart_init+0x188>)
100098e0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
100098e2:	200c      	movs	r0, #12
100098e4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
100098e6:	200b      	movs	r0, #11
100098e8:	4c44      	ldr	r4, [pc, #272]	; (100099fc <uart_init+0x18c>)
100098ea:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
100098ec:	200c      	movs	r0, #12
100098ee:	47a0      	blx	r4
		_uart_instances[1] = module;
100098f0:	4b43      	ldr	r3, [pc, #268]	; (10009a00 <uart_init+0x190>)
100098f2:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100098f4:	4948      	ldr	r1, [pc, #288]	; (10009a18 <uart_init+0x1a8>)
100098f6:	2012      	movs	r0, #18
100098f8:	4c43      	ldr	r4, [pc, #268]	; (10009a08 <uart_init+0x198>)
100098fa:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100098fc:	4947      	ldr	r1, [pc, #284]	; (10009a1c <uart_init+0x1ac>)
100098fe:	2013      	movs	r0, #19
10009900:	47a0      	blx	r4
10009902:	4b43      	ldr	r3, [pc, #268]	; (10009a10 <uart_init+0x1a0>)
10009904:	2204      	movs	r2, #4
10009906:	601a      	str	r2, [r3, #0]
10009908:	3204      	adds	r2, #4
1000990a:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000990c:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000990e:	2204      	movs	r2, #4
10009910:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009912:	2b00      	cmp	r3, #0
10009914:	d152      	bne.n	100099bc <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009916:	3302      	adds	r3, #2
10009918:	4698      	mov	r8, r3
1000991a:	e04f      	b.n	100099bc <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000991c:	8a31      	ldrh	r1, [r6, #16]
1000991e:	ce01      	ldmia	r6!, {r0}
10009920:	b2c0      	uxtb	r0, r0
10009922:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009924:	3401      	adds	r4, #1
10009926:	b2e4      	uxtb	r4, r4
10009928:	4544      	cmp	r4, r8
1000992a:	d3f7      	bcc.n	1000991c <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000992c:	682b      	ldr	r3, [r5, #0]
1000992e:	7d1a      	ldrb	r2, [r3, #20]
10009930:	07d2      	lsls	r2, r2, #31
10009932:	d504      	bpl.n	1000993e <uart_init+0xce>
10009934:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009936:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009938:	7d1a      	ldrb	r2, [r3, #20]
1000993a:	420a      	tst	r2, r1
1000993c:	d1fb      	bne.n	10009936 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000993e:	2100      	movs	r1, #0
10009940:	2220      	movs	r2, #32
10009942:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009944:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009946:	1e59      	subs	r1, r3, #1
10009948:	418b      	sbcs	r3, r1
1000994a:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000994c:	793b      	ldrb	r3, [r7, #4]
1000994e:	797a      	ldrb	r2, [r7, #5]
10009950:	4313      	orrs	r3, r2
10009952:	430b      	orrs	r3, r1
	switch(config->parity) {
10009954:	79ba      	ldrb	r2, [r7, #6]
10009956:	2a02      	cmp	r2, #2
10009958:	d00d      	beq.n	10009976 <uart_init+0x106>
1000995a:	b2d1      	uxtb	r1, r2
1000995c:	2902      	cmp	r1, #2
1000995e:	d802      	bhi.n	10009966 <uart_init+0xf6>
10009960:	2a01      	cmp	r2, #1
10009962:	d005      	beq.n	10009970 <uart_init+0x100>
10009964:	e00f      	b.n	10009986 <uart_init+0x116>
10009966:	2a03      	cmp	r2, #3
10009968:	d008      	beq.n	1000997c <uart_init+0x10c>
1000996a:	2a04      	cmp	r2, #4
1000996c:	d009      	beq.n	10009982 <uart_init+0x112>
1000996e:	e00a      	b.n	10009986 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009970:	2202      	movs	r2, #2
10009972:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009974:	e007      	b.n	10009986 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10009976:	2206      	movs	r2, #6
10009978:	4313      	orrs	r3, r2
			break;
1000997a:	e004      	b.n	10009986 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
1000997c:	220a      	movs	r2, #10
1000997e:	4313      	orrs	r3, r2
			break;
10009980:	e001      	b.n	10009986 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009982:	220e      	movs	r2, #14
10009984:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009986:	2220      	movs	r2, #32
10009988:	6829      	ldr	r1, [r5, #0]
1000998a:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000998c:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000998e:	4b24      	ldr	r3, [pc, #144]	; (10009a20 <uart_init+0x1b0>)
10009990:	4798      	blx	r3
10009992:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009994:	0031      	movs	r1, r6
10009996:	4b23      	ldr	r3, [pc, #140]	; (10009a24 <uart_init+0x1b4>)
10009998:	4798      	blx	r3
1000999a:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000999c:	0400      	lsls	r0, r0, #16
1000999e:	0c00      	lsrs	r0, r0, #16
100099a0:	4370      	muls	r0, r6
100099a2:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
100099a4:	0931      	lsrs	r1, r6, #4
100099a6:	4288      	cmp	r0, r1
100099a8:	d906      	bls.n	100099b8 <uart_init+0x148>
100099aa:	2300      	movs	r3, #0
		i++;
100099ac:	3301      	adds	r3, #1
100099ae:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
100099b0:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
100099b2:	4288      	cmp	r0, r1
100099b4:	d8fa      	bhi.n	100099ac <uart_init+0x13c>
100099b6:	e007      	b.n	100099c8 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
100099b8:	2300      	movs	r3, #0
100099ba:	e005      	b.n	100099c8 <uart_init+0x158>
100099bc:	003e      	movs	r6, r7
100099be:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
100099c0:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100099c2:	4b19      	ldr	r3, [pc, #100]	; (10009a28 <uart_init+0x1b8>)
100099c4:	4699      	mov	r9, r3
100099c6:	e7a9      	b.n	1000991c <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
100099c8:	2100      	movs	r1, #0
100099ca:	2028      	movs	r0, #40	; 0x28
100099cc:	682c      	ldr	r4, [r5, #0]
100099ce:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
100099d0:	3301      	adds	r3, #1
100099d2:	071b      	lsls	r3, r3, #28
100099d4:	0f5b      	lsrs	r3, r3, #29
100099d6:	00d2      	lsls	r2, r2, #3
100099d8:	4313      	orrs	r3, r2
100099da:	b29b      	uxth	r3, r3
100099dc:	682a      	ldr	r2, [r5, #0]
100099de:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
100099e0:	682b      	ldr	r3, [r5, #0]
100099e2:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
100099e4:	682b      	ldr	r3, [r5, #0]
100099e6:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
100099e8:	2000      	movs	r0, #0
100099ea:	bc0c      	pop	{r2, r3}
100099ec:	4690      	mov	r8, r2
100099ee:	4699      	mov	r9, r3
100099f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100099f2:	46c0      	nop			; (mov r8, r8)
100099f4:	40004000 	.word	0x40004000
100099f8:	100091a5 	.word	0x100091a5
100099fc:	10008e49 	.word	0x10008e49
10009a00:	1001409c 	.word	0x1001409c
10009a04:	1000961d 	.word	0x1000961d
10009a08:	1000960d 	.word	0x1000960d
10009a0c:	100096a5 	.word	0x100096a5
10009a10:	e000e100 	.word	0xe000e100
10009a14:	40005000 	.word	0x40005000
10009a18:	10009731 	.word	0x10009731
10009a1c:	100097b9 	.word	0x100097b9
10009a20:	10008e3d 	.word	0x10008e3d
10009a24:	1000eaf5 	.word	0x1000eaf5
10009a28:	10008c6d 	.word	0x10008c6d

10009a2c <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009a2c:	6802      	ldr	r2, [r0, #0]
10009a2e:	2001      	movs	r0, #1
10009a30:	7913      	ldrb	r3, [r2, #4]
10009a32:	4203      	tst	r3, r0
10009a34:	d0fc      	beq.n	10009a30 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009a36:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009a38:	2000      	movs	r0, #0
10009a3a:	4770      	bx	lr

10009a3c <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009a3c:	6802      	ldr	r2, [r0, #0]
10009a3e:	2001      	movs	r0, #1
10009a40:	7d13      	ldrb	r3, [r2, #20]
10009a42:	4203      	tst	r3, r0
10009a44:	d0fc      	beq.n	10009a40 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009a46:	7c13      	ldrb	r3, [r2, #16]
10009a48:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009a4a:	2000      	movs	r0, #0
10009a4c:	4770      	bx	lr
10009a4e:	46c0      	nop			; (mov r8, r8)

10009a50 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009a50:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009a52:	2a00      	cmp	r2, #0
10009a54:	d00d      	beq.n	10009a72 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009a56:	330b      	adds	r3, #11
10009a58:	5cc3      	ldrb	r3, [r0, r3]
10009a5a:	b2db      	uxtb	r3, r3
10009a5c:	2b05      	cmp	r3, #5
10009a5e:	d008      	beq.n	10009a72 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009a60:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009a62:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009a64:	2205      	movs	r2, #5
10009a66:	2322      	movs	r3, #34	; 0x22
10009a68:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009a6a:	6803      	ldr	r3, [r0, #0]
10009a6c:	3a04      	subs	r2, #4
10009a6e:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009a70:	2300      	movs	r3, #0
}
10009a72:	0018      	movs	r0, r3
10009a74:	4770      	bx	lr
10009a76:	46c0      	nop			; (mov r8, r8)

10009a78 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009a78:	0093      	lsls	r3, r2, #2
10009a7a:	18c3      	adds	r3, r0, r3
10009a7c:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009a7e:	2120      	movs	r1, #32
10009a80:	2301      	movs	r3, #1
10009a82:	4093      	lsls	r3, r2
10009a84:	5c42      	ldrb	r2, [r0, r1]
10009a86:	4313      	orrs	r3, r2
10009a88:	5443      	strb	r3, [r0, r1]
}
10009a8a:	4770      	bx	lr

10009a8c <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009a8e:	2221      	movs	r2, #33	; 0x21
10009a90:	2301      	movs	r3, #1
10009a92:	408b      	lsls	r3, r1
10009a94:	5c84      	ldrb	r4, [r0, r2]
10009a96:	4323      	orrs	r3, r4
10009a98:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009a9a:	2901      	cmp	r1, #1
10009a9c:	d104      	bne.n	10009aa8 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a9e:	6802      	ldr	r2, [r0, #0]
10009aa0:	7a11      	ldrb	r1, [r2, #8]
10009aa2:	2320      	movs	r3, #32
10009aa4:	430b      	orrs	r3, r1
10009aa6:	7213      	strb	r3, [r2, #8]
	}
}
10009aa8:	bd10      	pop	{r4, pc}
10009aaa:	46c0      	nop			; (mov r8, r8)

10009aac <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009aac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009aae:	2201      	movs	r2, #1
10009ab0:	408a      	lsls	r2, r1
10009ab2:	2421      	movs	r4, #33	; 0x21
10009ab4:	5d03      	ldrb	r3, [r0, r4]
10009ab6:	4393      	bics	r3, r2
10009ab8:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009aba:	2901      	cmp	r1, #1
10009abc:	d104      	bne.n	10009ac8 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009abe:	6802      	ldr	r2, [r0, #0]
10009ac0:	7a13      	ldrb	r3, [r2, #8]
10009ac2:	311f      	adds	r1, #31
10009ac4:	438b      	bics	r3, r1
10009ac6:	7213      	strb	r3, [r2, #8]
	}

}
10009ac8:	bd10      	pop	{r4, pc}
10009aca:	46c0      	nop			; (mov r8, r8)

10009acc <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
10009acc:	6802      	ldr	r2, [r0, #0]
10009ace:	7a11      	ldrb	r1, [r2, #8]
10009ad0:	2310      	movs	r3, #16
10009ad2:	430b      	orrs	r3, r1
10009ad4:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009ad6:	6803      	ldr	r3, [r0, #0]
10009ad8:	4a07      	ldr	r2, [pc, #28]	; (10009af8 <uart_enable_transmit_dma+0x2c>)
10009ada:	4293      	cmp	r3, r2
10009adc:	d104      	bne.n	10009ae8 <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009ade:	2102      	movs	r1, #2
10009ae0:	2380      	movs	r3, #128	; 0x80
10009ae2:	4a06      	ldr	r2, [pc, #24]	; (10009afc <uart_enable_transmit_dma+0x30>)
10009ae4:	50d1      	str	r1, [r2, r3]
10009ae6:	e006      	b.n	10009af6 <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009ae8:	4a05      	ldr	r2, [pc, #20]	; (10009b00 <uart_enable_transmit_dma+0x34>)
10009aea:	4293      	cmp	r3, r2
10009aec:	d103      	bne.n	10009af6 <uart_enable_transmit_dma+0x2a>
10009aee:	2108      	movs	r1, #8
10009af0:	2380      	movs	r3, #128	; 0x80
10009af2:	4a02      	ldr	r2, [pc, #8]	; (10009afc <uart_enable_transmit_dma+0x30>)
10009af4:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009af6:	4770      	bx	lr
10009af8:	40004000 	.word	0x40004000
10009afc:	e000e100 	.word	0xe000e100
10009b00:	40005000 	.word	0x40005000

10009b04 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009b04:	6802      	ldr	r2, [r0, #0]
10009b06:	7e11      	ldrb	r1, [r2, #24]
10009b08:	2301      	movs	r3, #1
10009b0a:	430b      	orrs	r3, r1
10009b0c:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009b0e:	6803      	ldr	r3, [r0, #0]
10009b10:	4a07      	ldr	r2, [pc, #28]	; (10009b30 <uart_enable_receive_dma+0x2c>)
10009b12:	4293      	cmp	r3, r2
10009b14:	d104      	bne.n	10009b20 <uart_enable_receive_dma+0x1c>
10009b16:	2102      	movs	r1, #2
10009b18:	2380      	movs	r3, #128	; 0x80
10009b1a:	4a06      	ldr	r2, [pc, #24]	; (10009b34 <uart_enable_receive_dma+0x30>)
10009b1c:	50d1      	str	r1, [r2, r3]
10009b1e:	e006      	b.n	10009b2e <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009b20:	4a05      	ldr	r2, [pc, #20]	; (10009b38 <uart_enable_receive_dma+0x34>)
10009b22:	4293      	cmp	r3, r2
10009b24:	d103      	bne.n	10009b2e <uart_enable_receive_dma+0x2a>
10009b26:	2108      	movs	r1, #8
10009b28:	2380      	movs	r3, #128	; 0x80
10009b2a:	4a02      	ldr	r2, [pc, #8]	; (10009b34 <uart_enable_receive_dma+0x30>)
10009b2c:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009b2e:	4770      	bx	lr
10009b30:	40004000 	.word	0x40004000
10009b34:	e000e100 	.word	0xe000e100
10009b38:	40005000 	.word	0x40005000

10009b3c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b3e:	4647      	mov	r7, r8
10009b40:	b480      	push	{r7}
10009b42:	000c      	movs	r4, r1
10009b44:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009b46:	2800      	cmp	r0, #0
10009b48:	d10d      	bne.n	10009b66 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009b4a:	2a00      	cmp	r2, #0
10009b4c:	dd0e      	ble.n	10009b6c <_read+0x30>
10009b4e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009b50:	4e08      	ldr	r6, [pc, #32]	; (10009b74 <_read+0x38>)
10009b52:	4d09      	ldr	r5, [pc, #36]	; (10009b78 <_read+0x3c>)
10009b54:	6830      	ldr	r0, [r6, #0]
10009b56:	0021      	movs	r1, r4
10009b58:	682b      	ldr	r3, [r5, #0]
10009b5a:	4798      	blx	r3
		ptr++;
10009b5c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009b5e:	42a7      	cmp	r7, r4
10009b60:	d1f8      	bne.n	10009b54 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009b62:	4640      	mov	r0, r8
10009b64:	e003      	b.n	10009b6e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009b66:	2001      	movs	r0, #1
10009b68:	4240      	negs	r0, r0
10009b6a:	e000      	b.n	10009b6e <_read+0x32>
	}

	for (; len > 0; --len) {
10009b6c:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009b6e:	bc04      	pop	{r2}
10009b70:	4690      	mov	r8, r2
10009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b74:	100140ac 	.word	0x100140ac
10009b78:	100140a4 	.word	0x100140a4

10009b7c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b7e:	4647      	mov	r7, r8
10009b80:	b480      	push	{r7}
10009b82:	000e      	movs	r6, r1
10009b84:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009b86:	3801      	subs	r0, #1
10009b88:	2802      	cmp	r0, #2
10009b8a:	d811      	bhi.n	10009bb0 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009b8c:	2a00      	cmp	r2, #0
10009b8e:	d012      	beq.n	10009bb6 <_write+0x3a>
10009b90:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009b92:	4b0c      	ldr	r3, [pc, #48]	; (10009bc4 <_write+0x48>)
10009b94:	4698      	mov	r8, r3
10009b96:	4f0c      	ldr	r7, [pc, #48]	; (10009bc8 <_write+0x4c>)
10009b98:	4643      	mov	r3, r8
10009b9a:	6818      	ldr	r0, [r3, #0]
10009b9c:	5d31      	ldrb	r1, [r6, r4]
10009b9e:	683b      	ldr	r3, [r7, #0]
10009ba0:	4798      	blx	r3
10009ba2:	2800      	cmp	r0, #0
10009ba4:	db09      	blt.n	10009bba <_write+0x3e>
			return -1;
		}
		++nChars;
10009ba6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009ba8:	42a5      	cmp	r5, r4
10009baa:	d1f5      	bne.n	10009b98 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009bac:	0020      	movs	r0, r4
10009bae:	e006      	b.n	10009bbe <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009bb0:	2001      	movs	r0, #1
10009bb2:	4240      	negs	r0, r0
10009bb4:	e003      	b.n	10009bbe <_write+0x42>
	}

	for (; len != 0; --len) {
10009bb6:	2000      	movs	r0, #0
10009bb8:	e001      	b.n	10009bbe <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009bba:	2001      	movs	r0, #1
10009bbc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009bbe:	bc04      	pop	{r2}
10009bc0:	4690      	mov	r8, r2
10009bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009bc4:	100140ac 	.word	0x100140ac
10009bc8:	100140a8 	.word	0x100140a8

10009bcc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009bcc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009bce:	4a06      	ldr	r2, [pc, #24]	; (10009be8 <_sbrk+0x1c>)
10009bd0:	6812      	ldr	r2, [r2, #0]
10009bd2:	2a00      	cmp	r2, #0
10009bd4:	d102      	bne.n	10009bdc <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009bd6:	4905      	ldr	r1, [pc, #20]	; (10009bec <_sbrk+0x20>)
10009bd8:	4a03      	ldr	r2, [pc, #12]	; (10009be8 <_sbrk+0x1c>)
10009bda:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009bdc:	4a02      	ldr	r2, [pc, #8]	; (10009be8 <_sbrk+0x1c>)
10009bde:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009be0:	18c3      	adds	r3, r0, r3
10009be2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009be4:	4770      	bx	lr
10009be6:	46c0      	nop			; (mov r8, r8)
10009be8:	100125d0 	.word	0x100125d0
10009bec:	10015a60 	.word	0x10015a60

10009bf0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009bf0:	2001      	movs	r0, #1
10009bf2:	4240      	negs	r0, r0
10009bf4:	4770      	bx	lr
10009bf6:	46c0      	nop			; (mov r8, r8)

10009bf8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009bf8:	2380      	movs	r3, #128	; 0x80
10009bfa:	019b      	lsls	r3, r3, #6
10009bfc:	604b      	str	r3, [r1, #4]

	return 0;
}
10009bfe:	2000      	movs	r0, #0
10009c00:	4770      	bx	lr
10009c02:	46c0      	nop			; (mov r8, r8)

10009c04 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009c04:	2001      	movs	r0, #1
10009c06:	4770      	bx	lr

10009c08 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009c08:	2000      	movs	r0, #0
10009c0a:	4770      	bx	lr

10009c0c <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009c0c:	2000      	movs	r0, #0
10009c0e:	4770      	bx	lr

10009c10 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009c10:	2000      	movs	r0, #0
10009c12:	4770      	bx	lr

10009c14 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009c14:	78c0      	ldrb	r0, [r0, #3]
10009c16:	2800      	cmp	r0, #0
10009c18:	d000      	beq.n	10009c1c <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009c1a:	20e2      	movs	r0, #226	; 0xe2
}
10009c1c:	4770      	bx	lr
10009c1e:	46c0      	nop			; (mov r8, r8)

10009c20 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009c20:	2000      	movs	r0, #0
10009c22:	4770      	bx	lr

10009c24 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009c24:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009c26:	7800      	ldrb	r0, [r0, #0]
10009c28:	2800      	cmp	r0, #0
10009c2a:	d006      	beq.n	10009c3a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009c2c:	4803      	ldr	r0, [pc, #12]	; (10009c3c <ble_scan_report_handler+0x18>)
10009c2e:	4b04      	ldr	r3, [pc, #16]	; (10009c40 <ble_scan_report_handler+0x1c>)
10009c30:	4798      	blx	r3
10009c32:	4804      	ldr	r0, [pc, #16]	; (10009c44 <ble_scan_report_handler+0x20>)
10009c34:	4b04      	ldr	r3, [pc, #16]	; (10009c48 <ble_scan_report_handler+0x24>)
10009c36:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009c38:	20e2      	movs	r0, #226	; 0xe2
}
10009c3a:	bd10      	pop	{r4, pc}
10009c3c:	10011a94 	.word	0x10011a94
10009c40:	10010659 	.word	0x10010659
10009c44:	10011a98 	.word	0x10011a98
10009c48:	10010539 	.word	0x10010539

10009c4c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009c4c:	b510      	push	{r4, lr}
10009c4e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009c50:	78c0      	ldrb	r0, [r0, #3]
10009c52:	2800      	cmp	r0, #0
10009c54:	d008      	beq.n	10009c68 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009c56:	4805      	ldr	r0, [pc, #20]	; (10009c6c <ble_mtu_changed_cmd_complete_handler+0x20>)
10009c58:	4b05      	ldr	r3, [pc, #20]	; (10009c70 <ble_mtu_changed_cmd_complete_handler+0x24>)
10009c5a:	4798      	blx	r3
10009c5c:	78a2      	ldrb	r2, [r4, #2]
10009c5e:	8821      	ldrh	r1, [r4, #0]
10009c60:	4804      	ldr	r0, [pc, #16]	; (10009c74 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009c62:	4b05      	ldr	r3, [pc, #20]	; (10009c78 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009c64:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009c66:	20e2      	movs	r0, #226	; 0xe2
}
10009c68:	bd10      	pop	{r4, pc}
10009c6a:	46c0      	nop			; (mov r8, r8)
10009c6c:	10011a94 	.word	0x10011a94
10009c70:	10010659 	.word	0x10010659
10009c74:	10011aac 	.word	0x10011aac
10009c78:	10010539 	.word	0x10010539

10009c7c <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c7e:	0004      	movs	r4, r0
10009c80:	4b19      	ldr	r3, [pc, #100]	; (10009ce8 <ble_disconnected_state_handler+0x6c>)
10009c82:	229b      	movs	r2, #155	; 0x9b
10009c84:	0092      	lsls	r2, r2, #2
10009c86:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c88:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c8a:	2600      	movs	r6, #0
10009c8c:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c8e:	001a      	movs	r2, r3
10009c90:	3a56      	subs	r2, #86	; 0x56
10009c92:	8811      	ldrh	r1, [r2, #0]
10009c94:	8822      	ldrh	r2, [r4, #0]
10009c96:	4291      	cmp	r1, r2
10009c98:	d119      	bne.n	10009cce <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c9a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c9c:	2a05      	cmp	r2, #5
10009c9e:	d001      	beq.n	10009ca4 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009ca0:	2a08      	cmp	r2, #8
10009ca2:	d101      	bne.n	10009ca8 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009ca4:	7007      	strb	r7, [r0, #0]
10009ca6:	e012      	b.n	10009cce <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009ca8:	2a07      	cmp	r2, #7
10009caa:	d80f      	bhi.n	10009ccc <ble_disconnected_state_handler+0x50>
10009cac:	0092      	lsls	r2, r2, #2
10009cae:	490f      	ldr	r1, [pc, #60]	; (10009cec <ble_disconnected_state_handler+0x70>)
10009cb0:	588a      	ldr	r2, [r1, r2]
10009cb2:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009cb4:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009cb6:	4a0e      	ldr	r2, [pc, #56]	; (10009cf0 <ble_disconnected_state_handler+0x74>)
10009cb8:	7812      	ldrb	r2, [r2, #0]
10009cba:	2a00      	cmp	r2, #0
10009cbc:	d007      	beq.n	10009cce <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009cbe:	4a0c      	ldr	r2, [pc, #48]	; (10009cf0 <ble_disconnected_state_handler+0x74>)
10009cc0:	7812      	ldrb	r2, [r2, #0]
10009cc2:	3a01      	subs	r2, #1
10009cc4:	b2d2      	uxtb	r2, r2
10009cc6:	490a      	ldr	r1, [pc, #40]	; (10009cf0 <ble_disconnected_state_handler+0x74>)
10009cc8:	700a      	strb	r2, [r1, #0]
10009cca:	e000      	b.n	10009cce <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009ccc:	7006      	strb	r6, [r0, #0]
10009cce:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cd0:	42ab      	cmp	r3, r5
10009cd2:	d1db      	bne.n	10009c8c <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009cd4:	4807      	ldr	r0, [pc, #28]	; (10009cf4 <ble_disconnected_state_handler+0x78>)
10009cd6:	4b08      	ldr	r3, [pc, #32]	; (10009cf8 <ble_disconnected_state_handler+0x7c>)
10009cd8:	4798      	blx	r3
10009cda:	8822      	ldrh	r2, [r4, #0]
10009cdc:	78a1      	ldrb	r1, [r4, #2]
10009cde:	4807      	ldr	r0, [pc, #28]	; (10009cfc <ble_disconnected_state_handler+0x80>)
10009ce0:	4b07      	ldr	r3, [pc, #28]	; (10009d00 <ble_disconnected_state_handler+0x84>)
10009ce2:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009ce4:	2000      	movs	r0, #0
10009ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009ce8:	10014126 	.word	0x10014126
10009cec:	10011924 	.word	0x10011924
10009cf0:	10014334 	.word	0x10014334
10009cf4:	10011a94 	.word	0x10011a94
10009cf8:	10010659 	.word	0x10010659
10009cfc:	10011ae4 	.word	0x10011ae4
10009d00:	10010539 	.word	0x10010539

10009d04 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009d06:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009d08:	8801      	ldrh	r1, [r0, #0]
10009d0a:	4b28      	ldr	r3, [pc, #160]	; (10009dac <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d0c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009d0e:	891a      	ldrh	r2, [r3, #8]
10009d10:	428a      	cmp	r2, r1
10009d12:	d104      	bne.n	10009d1e <ble_encryption_status_change_handler+0x1a>
10009d14:	001a      	movs	r2, r3
10009d16:	325e      	adds	r2, #94	; 0x5e
10009d18:	7812      	ldrb	r2, [r2, #0]
10009d1a:	2a06      	cmp	r2, #6
10009d1c:	d02e      	beq.n	10009d7c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009d1e:	3401      	adds	r4, #1
10009d20:	b2e4      	uxtb	r4, r4
10009d22:	337c      	adds	r3, #124	; 0x7c
10009d24:	2c05      	cmp	r4, #5
10009d26:	d1f2      	bne.n	10009d0e <ble_encryption_status_change_handler+0xa>
10009d28:	e039      	b.n	10009d9e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009d2a:	4920      	ldr	r1, [pc, #128]	; (10009dac <ble_encryption_status_change_handler+0xa8>)
10009d2c:	0163      	lsls	r3, r4, #5
10009d2e:	1b1a      	subs	r2, r3, r4
10009d30:	0092      	lsls	r2, r2, #2
10009d32:	188a      	adds	r2, r1, r2
10009d34:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009d36:	0014      	movs	r4, r2
10009d38:	345e      	adds	r4, #94	; 0x5e
10009d3a:	2307      	movs	r3, #7
10009d3c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009d3e:	481c      	ldr	r0, [pc, #112]	; (10009db0 <ble_encryption_status_change_handler+0xac>)
10009d40:	4b1c      	ldr	r3, [pc, #112]	; (10009db4 <ble_encryption_status_change_handler+0xb0>)
10009d42:	4798      	blx	r3
10009d44:	481c      	ldr	r0, [pc, #112]	; (10009db8 <ble_encryption_status_change_handler+0xb4>)
10009d46:	4b1d      	ldr	r3, [pc, #116]	; (10009dbc <ble_encryption_status_change_handler+0xb8>)
10009d48:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d4a:	25e2      	movs	r5, #226	; 0xe2
10009d4c:	e02b      	b.n	10009da6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009d4e:	4818      	ldr	r0, [pc, #96]	; (10009db0 <ble_encryption_status_change_handler+0xac>)
10009d50:	4b18      	ldr	r3, [pc, #96]	; (10009db4 <ble_encryption_status_change_handler+0xb0>)
10009d52:	4798      	blx	r3
10009d54:	481a      	ldr	r0, [pc, #104]	; (10009dc0 <ble_encryption_status_change_handler+0xbc>)
10009d56:	4b19      	ldr	r3, [pc, #100]	; (10009dbc <ble_encryption_status_change_handler+0xb8>)
10009d58:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009d5a:	4914      	ldr	r1, [pc, #80]	; (10009dac <ble_encryption_status_change_handler+0xa8>)
10009d5c:	0163      	lsls	r3, r4, #5
10009d5e:	1b1a      	subs	r2, r3, r4
10009d60:	0092      	lsls	r2, r2, #2
10009d62:	188a      	adds	r2, r1, r2
10009d64:	0010      	movs	r0, r2
10009d66:	305e      	adds	r0, #94	; 0x5e
10009d68:	2708      	movs	r7, #8
10009d6a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009d6c:	78f0      	ldrb	r0, [r6, #3]
10009d6e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009d70:	78b2      	ldrb	r2, [r6, #2]
10009d72:	1b1c      	subs	r4, r3, r4
10009d74:	00a4      	lsls	r4, r4, #2
10009d76:	190c      	adds	r4, r1, r4
10009d78:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009d7a:	e014      	b.n	10009da6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d7c:	78b5      	ldrb	r5, [r6, #2]
10009d7e:	2d00      	cmp	r5, #0
10009d80:	d0e5      	beq.n	10009d4e <ble_encryption_status_change_handler+0x4a>
10009d82:	e7d2      	b.n	10009d2a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009d84:	4e0a      	ldr	r6, [pc, #40]	; (10009db0 <ble_encryption_status_change_handler+0xac>)
10009d86:	0030      	movs	r0, r6
10009d88:	4d0a      	ldr	r5, [pc, #40]	; (10009db4 <ble_encryption_status_change_handler+0xb0>)
10009d8a:	47a8      	blx	r5
10009d8c:	480c      	ldr	r0, [pc, #48]	; (10009dc0 <ble_encryption_status_change_handler+0xbc>)
10009d8e:	4c0b      	ldr	r4, [pc, #44]	; (10009dbc <ble_encryption_status_change_handler+0xb8>)
10009d90:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009d92:	0030      	movs	r0, r6
10009d94:	47a8      	blx	r5
10009d96:	480b      	ldr	r0, [pc, #44]	; (10009dc4 <ble_encryption_status_change_handler+0xc0>)
10009d98:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009d9a:	25e2      	movs	r5, #226	; 0xe2
10009d9c:	e003      	b.n	10009da6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d9e:	78b5      	ldrb	r5, [r6, #2]
10009da0:	2d00      	cmp	r5, #0
10009da2:	d1c2      	bne.n	10009d2a <ble_encryption_status_change_handler+0x26>
10009da4:	e7ee      	b.n	10009d84 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009da6:	0028      	movs	r0, r5
10009da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009daa:	46c0      	nop			; (mov r8, r8)
10009dac:	100140c8 	.word	0x100140c8
10009db0:	10011a94 	.word	0x10011a94
10009db4:	10010659 	.word	0x10010659
10009db8:	10011b14 	.word	0x10011b14
10009dbc:	10010539 	.word	0x10010539
10009dc0:	10011b28 	.word	0x10011b28
10009dc4:	10011b4c 	.word	0x10011b4c

10009dc8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009dc8:	b510      	push	{r4, lr}
10009dca:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009dcc:	4b15      	ldr	r3, [pc, #84]	; (10009e24 <ble_scan_info_handler+0x5c>)
10009dce:	781b      	ldrb	r3, [r3, #0]
10009dd0:	b2db      	uxtb	r3, r3
10009dd2:	2b13      	cmp	r3, #19
10009dd4:	d812      	bhi.n	10009dfc <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009dd6:	4c13      	ldr	r4, [pc, #76]	; (10009e24 <ble_scan_info_handler+0x5c>)
10009dd8:	7823      	ldrb	r3, [r4, #0]
10009dda:	b2db      	uxtb	r3, r3
10009ddc:	0098      	lsls	r0, r3, #2
10009dde:	18c0      	adds	r0, r0, r3
10009de0:	00c0      	lsls	r0, r0, #3
10009de2:	18c3      	adds	r3, r0, r3
10009de4:	4810      	ldr	r0, [pc, #64]	; (10009e28 <ble_scan_info_handler+0x60>)
10009de6:	1818      	adds	r0, r3, r0
10009de8:	2229      	movs	r2, #41	; 0x29
10009dea:	4b10      	ldr	r3, [pc, #64]	; (10009e2c <ble_scan_info_handler+0x64>)
10009dec:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009dee:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009df0:	7823      	ldrb	r3, [r4, #0]
10009df2:	3301      	adds	r3, #1
10009df4:	b2db      	uxtb	r3, r3
10009df6:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009df8:	2300      	movs	r3, #0
10009dfa:	e011      	b.n	10009e20 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009dfc:	480c      	ldr	r0, [pc, #48]	; (10009e30 <ble_scan_info_handler+0x68>)
10009dfe:	4b0d      	ldr	r3, [pc, #52]	; (10009e34 <ble_scan_info_handler+0x6c>)
10009e00:	4798      	blx	r3
10009e02:	480d      	ldr	r0, [pc, #52]	; (10009e38 <ble_scan_info_handler+0x70>)
10009e04:	4b0d      	ldr	r3, [pc, #52]	; (10009e3c <ble_scan_info_handler+0x74>)
10009e06:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009e08:	4b0d      	ldr	r3, [pc, #52]	; (10009e40 <ble_scan_info_handler+0x78>)
10009e0a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009e0c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009e0e:	2800      	cmp	r0, #0
10009e10:	d006      	beq.n	10009e20 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009e12:	4807      	ldr	r0, [pc, #28]	; (10009e30 <ble_scan_info_handler+0x68>)
10009e14:	4b07      	ldr	r3, [pc, #28]	; (10009e34 <ble_scan_info_handler+0x6c>)
10009e16:	4798      	blx	r3
10009e18:	480a      	ldr	r0, [pc, #40]	; (10009e44 <ble_scan_info_handler+0x7c>)
10009e1a:	4b08      	ldr	r3, [pc, #32]	; (10009e3c <ble_scan_info_handler+0x74>)
10009e1c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009e1e:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009e20:	0018      	movs	r0, r3
10009e22:	bd10      	pop	{r4, pc}
10009e24:	10012eb8 	.word	0x10012eb8
10009e28:	100143ac 	.word	0x100143ac
10009e2c:	10010517 	.word	0x10010517
10009e30:	10011a94 	.word	0x10011a94
10009e34:	10010659 	.word	0x10010659
10009e38:	10011b74 	.word	0x10011b74
10009e3c:	10010539 	.word	0x10010539
10009e40:	1000ca61 	.word	0x1000ca61
10009e44:	10011bac 	.word	0x10011bac

10009e48 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009e4a:	464f      	mov	r7, r9
10009e4c:	4646      	mov	r6, r8
10009e4e:	b4c0      	push	{r6, r7}
10009e50:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e52:	8841      	ldrh	r1, [r0, #2]
10009e54:	4b3a      	ldr	r3, [pc, #232]	; (10009f40 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e56:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e58:	891a      	ldrh	r2, [r3, #8]
10009e5a:	428a      	cmp	r2, r1
10009e5c:	d104      	bne.n	10009e68 <ble_pair_done_handler+0x20>
10009e5e:	001a      	movs	r2, r3
10009e60:	325e      	adds	r2, #94	; 0x5e
10009e62:	7812      	ldrb	r2, [r2, #0]
10009e64:	2a03      	cmp	r2, #3
10009e66:	d062      	beq.n	10009f2e <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e68:	3401      	adds	r4, #1
10009e6a:	b2e4      	uxtb	r4, r4
10009e6c:	337c      	adds	r3, #124	; 0x7c
10009e6e:	2c05      	cmp	r4, #5
10009e70:	d1f2      	bne.n	10009e58 <ble_pair_done_handler+0x10>
10009e72:	e02b      	b.n	10009ecc <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009e74:	0163      	lsls	r3, r4, #5
10009e76:	1b1c      	subs	r4, r3, r4
10009e78:	00a4      	lsls	r4, r4, #2
10009e7a:	4b31      	ldr	r3, [pc, #196]	; (10009f40 <ble_pair_done_handler+0xf8>)
10009e7c:	191c      	adds	r4, r3, r4
10009e7e:	345e      	adds	r4, #94	; 0x5e
10009e80:	7823      	ldrb	r3, [r4, #0]
10009e82:	2b01      	cmp	r3, #1
10009e84:	d913      	bls.n	10009eae <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009e86:	482f      	ldr	r0, [pc, #188]	; (10009f44 <ble_pair_done_handler+0xfc>)
10009e88:	4b2f      	ldr	r3, [pc, #188]	; (10009f48 <ble_pair_done_handler+0x100>)
10009e8a:	4798      	blx	r3
10009e8c:	482f      	ldr	r0, [pc, #188]	; (10009f4c <ble_pair_done_handler+0x104>)
10009e8e:	4b30      	ldr	r3, [pc, #192]	; (10009f50 <ble_pair_done_handler+0x108>)
10009e90:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009e92:	8868      	ldrh	r0, [r5, #2]
10009e94:	2113      	movs	r1, #19
10009e96:	4b2f      	ldr	r3, [pc, #188]	; (10009f54 <ble_pair_done_handler+0x10c>)
10009e98:	4798      	blx	r3
10009e9a:	1e06      	subs	r6, r0, #0
10009e9c:	d04b      	beq.n	10009f36 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009e9e:	4829      	ldr	r0, [pc, #164]	; (10009f44 <ble_pair_done_handler+0xfc>)
10009ea0:	4b29      	ldr	r3, [pc, #164]	; (10009f48 <ble_pair_done_handler+0x100>)
10009ea2:	4798      	blx	r3
10009ea4:	482c      	ldr	r0, [pc, #176]	; (10009f58 <ble_pair_done_handler+0x110>)
10009ea6:	4b2a      	ldr	r3, [pc, #168]	; (10009f50 <ble_pair_done_handler+0x108>)
10009ea8:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009eaa:	26e2      	movs	r6, #226	; 0xe2
10009eac:	e043      	b.n	10009f36 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009eae:	2600      	movs	r6, #0
10009eb0:	e041      	b.n	10009f36 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009eb2:	4e24      	ldr	r6, [pc, #144]	; (10009f44 <ble_pair_done_handler+0xfc>)
10009eb4:	0030      	movs	r0, r6
10009eb6:	4d24      	ldr	r5, [pc, #144]	; (10009f48 <ble_pair_done_handler+0x100>)
10009eb8:	47a8      	blx	r5
10009eba:	4828      	ldr	r0, [pc, #160]	; (10009f5c <ble_pair_done_handler+0x114>)
10009ebc:	4c24      	ldr	r4, [pc, #144]	; (10009f50 <ble_pair_done_handler+0x108>)
10009ebe:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009ec0:	0030      	movs	r0, r6
10009ec2:	47a8      	blx	r5
10009ec4:	4826      	ldr	r0, [pc, #152]	; (10009f60 <ble_pair_done_handler+0x118>)
10009ec6:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009ec8:	26e2      	movs	r6, #226	; 0xe2
10009eca:	e034      	b.n	10009f36 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009ecc:	792b      	ldrb	r3, [r5, #4]
10009ece:	2b00      	cmp	r3, #0
10009ed0:	d1d0      	bne.n	10009e74 <ble_pair_done_handler+0x2c>
10009ed2:	e7ee      	b.n	10009eb2 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009ed4:	481b      	ldr	r0, [pc, #108]	; (10009f44 <ble_pair_done_handler+0xfc>)
10009ed6:	4b1c      	ldr	r3, [pc, #112]	; (10009f48 <ble_pair_done_handler+0x100>)
10009ed8:	4798      	blx	r3
10009eda:	4820      	ldr	r0, [pc, #128]	; (10009f5c <ble_pair_done_handler+0x114>)
10009edc:	4b1c      	ldr	r3, [pc, #112]	; (10009f50 <ble_pair_done_handler+0x108>)
10009ede:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009ee0:	782a      	ldrb	r2, [r5, #0]
10009ee2:	4b17      	ldr	r3, [pc, #92]	; (10009f40 <ble_pair_done_handler+0xf8>)
10009ee4:	4699      	mov	r9, r3
10009ee6:	0167      	lsls	r7, r4, #5
10009ee8:	1b3b      	subs	r3, r7, r4
10009eea:	009b      	lsls	r3, r3, #2
10009eec:	444b      	add	r3, r9
10009eee:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009ef0:	792a      	ldrb	r2, [r5, #4]
10009ef2:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009ef4:	335e      	adds	r3, #94	; 0x5e
10009ef6:	2205      	movs	r2, #5
10009ef8:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009efa:	1b38      	subs	r0, r7, r4
10009efc:	0080      	lsls	r0, r0, #2
10009efe:	4448      	add	r0, r9
10009f00:	3036      	adds	r0, #54	; 0x36
10009f02:	0029      	movs	r1, r5
10009f04:	3122      	adds	r1, #34	; 0x22
10009f06:	320b      	adds	r2, #11
10009f08:	4b16      	ldr	r3, [pc, #88]	; (10009f64 <ble_pair_done_handler+0x11c>)
10009f0a:	4698      	mov	r8, r3
10009f0c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009f0e:	1b38      	subs	r0, r7, r4
10009f10:	0080      	lsls	r0, r0, #2
10009f12:	4448      	add	r0, r9
10009f14:	3046      	adds	r0, #70	; 0x46
10009f16:	0029      	movs	r1, r5
10009f18:	3132      	adds	r1, #50	; 0x32
10009f1a:	2217      	movs	r2, #23
10009f1c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009f1e:	1b38      	subs	r0, r7, r4
10009f20:	0080      	lsls	r0, r0, #2
10009f22:	4448      	add	r0, r9
10009f24:	301a      	adds	r0, #26
10009f26:	1da9      	adds	r1, r5, #6
10009f28:	221c      	movs	r2, #28
10009f2a:	47c0      	blx	r8
10009f2c:	e003      	b.n	10009f36 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009f2e:	792e      	ldrb	r6, [r5, #4]
10009f30:	2e00      	cmp	r6, #0
10009f32:	d0cf      	beq.n	10009ed4 <ble_pair_done_handler+0x8c>
10009f34:	e79e      	b.n	10009e74 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009f36:	0030      	movs	r0, r6
10009f38:	bc0c      	pop	{r2, r3}
10009f3a:	4690      	mov	r8, r2
10009f3c:	4699      	mov	r9, r3
10009f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f40:	100140c8 	.word	0x100140c8
10009f44:	10011a94 	.word	0x10011a94
10009f48:	10010659 	.word	0x10010659
10009f4c:	10011bc4 	.word	0x10011bc4
10009f50:	10010539 	.word	0x10010539
10009f54:	1000ca81 	.word	0x1000ca81
10009f58:	10011be4 	.word	0x10011be4
10009f5c:	10011c00 	.word	0x10011c00
10009f60:	10011c2c 	.word	0x10011c2c
10009f64:	10010517 	.word	0x10010517

10009f68 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009f68:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009f6a:	8800      	ldrh	r0, [r0, #0]
10009f6c:	2378      	movs	r3, #120	; 0x78
10009f6e:	2201      	movs	r2, #1
10009f70:	2101      	movs	r1, #1
10009f72:	4c02      	ldr	r4, [pc, #8]	; (10009f7c <ble_conn_param_update_req+0x14>)
10009f74:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009f76:	2000      	movs	r0, #0
10009f78:	bd10      	pop	{r4, pc}
10009f7a:	46c0      	nop			; (mov r8, r8)
10009f7c:	1000caa1 	.word	0x1000caa1

10009f80 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f82:	4657      	mov	r7, sl
10009f84:	464e      	mov	r6, r9
10009f86:	4645      	mov	r5, r8
10009f88:	b4e0      	push	{r5, r6, r7}
10009f8a:	b084      	sub	sp, #16
10009f8c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009f8e:	2209      	movs	r2, #9
10009f90:	2100      	movs	r1, #0
10009f92:	a801      	add	r0, sp, #4
10009f94:	4b6b      	ldr	r3, [pc, #428]	; (1000a144 <ble_slave_security_request_handler+0x1c4>)
10009f96:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f98:	8825      	ldrh	r5, [r4, #0]
10009f9a:	496b      	ldr	r1, [pc, #428]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
10009f9c:	000a      	movs	r2, r1
10009f9e:	2300      	movs	r3, #0
10009fa0:	8910      	ldrh	r0, [r2, #8]
10009fa2:	42a8      	cmp	r0, r5
10009fa4:	d116      	bne.n	10009fd4 <ble_slave_security_request_handler+0x54>
10009fa6:	0010      	movs	r0, r2
10009fa8:	305e      	adds	r0, #94	; 0x5e
10009faa:	7800      	ldrb	r0, [r0, #0]
10009fac:	2802      	cmp	r0, #2
10009fae:	d111      	bne.n	10009fd4 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009fb0:	4865      	ldr	r0, [pc, #404]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
10009fb2:	015a      	lsls	r2, r3, #5
10009fb4:	1ad6      	subs	r6, r2, r3
10009fb6:	00b6      	lsls	r6, r6, #2
10009fb8:	1986      	adds	r6, r0, r6
10009fba:	365e      	adds	r6, #94	; 0x5e
10009fbc:	2206      	movs	r2, #6
10009fbe:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009fc0:	32f9      	adds	r2, #249	; 0xf9
10009fc2:	4013      	ands	r3, r2
10009fc4:	015a      	lsls	r2, r3, #5
10009fc6:	1ad2      	subs	r2, r2, r3
10009fc8:	0092      	lsls	r2, r2, #2
10009fca:	1882      	adds	r2, r0, r2
10009fcc:	7d12      	ldrb	r2, [r2, #20]
10009fce:	07d0      	lsls	r0, r2, #31
10009fd0:	d405      	bmi.n	10009fde <ble_slave_security_request_handler+0x5e>
10009fd2:	e01b      	b.n	1000a00c <ble_slave_security_request_handler+0x8c>
10009fd4:	3301      	adds	r3, #1
10009fd6:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fd8:	2b05      	cmp	r3, #5
10009fda:	d1e1      	bne.n	10009fa0 <ble_slave_security_request_handler+0x20>
10009fdc:	e01e      	b.n	1000a01c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009fde:	78e0      	ldrb	r0, [r4, #3]
10009fe0:	2800      	cmp	r0, #0
10009fe2:	d013      	beq.n	1000a00c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009fe4:	0159      	lsls	r1, r3, #5
10009fe6:	1ac9      	subs	r1, r1, r3
10009fe8:	008b      	lsls	r3, r1, #2
10009fea:	4957      	ldr	r1, [pc, #348]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
10009fec:	18c9      	adds	r1, r1, r3
10009fee:	311a      	adds	r1, #26
10009ff0:	8820      	ldrh	r0, [r4, #0]
10009ff2:	4b56      	ldr	r3, [pc, #344]	; (1000a14c <ble_slave_security_request_handler+0x1cc>)
10009ff4:	4798      	blx	r3
10009ff6:	2800      	cmp	r0, #0
10009ff8:	d100      	bne.n	10009ffc <ble_slave_security_request_handler+0x7c>
10009ffa:	e09d      	b.n	1000a138 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009ffc:	4854      	ldr	r0, [pc, #336]	; (1000a150 <ble_slave_security_request_handler+0x1d0>)
10009ffe:	4b55      	ldr	r3, [pc, #340]	; (1000a154 <ble_slave_security_request_handler+0x1d4>)
1000a000:	4798      	blx	r3
1000a002:	4855      	ldr	r0, [pc, #340]	; (1000a158 <ble_slave_security_request_handler+0x1d8>)
1000a004:	4b55      	ldr	r3, [pc, #340]	; (1000a15c <ble_slave_security_request_handler+0x1dc>)
1000a006:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a008:	20e2      	movs	r0, #226	; 0xe2
1000a00a:	e095      	b.n	1000a138 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a00c:	015a      	lsls	r2, r3, #5
1000a00e:	1ad3      	subs	r3, r2, r3
1000a010:	009b      	lsls	r3, r3, #2
1000a012:	4a4d      	ldr	r2, [pc, #308]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a014:	18d3      	adds	r3, r2, r3
1000a016:	335e      	adds	r3, #94	; 0x5e
1000a018:	2202      	movs	r2, #2
1000a01a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a01c:	8825      	ldrh	r5, [r4, #0]
1000a01e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a020:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a022:	0016      	movs	r6, r2
1000a024:	8908      	ldrh	r0, [r1, #8]
1000a026:	42a8      	cmp	r0, r5
1000a028:	d10d      	bne.n	1000a046 <ble_slave_security_request_handler+0xc6>
1000a02a:	0008      	movs	r0, r1
1000a02c:	305e      	adds	r0, #94	; 0x5e
1000a02e:	7800      	ldrb	r0, [r0, #0]
1000a030:	2802      	cmp	r0, #2
1000a032:	d108      	bne.n	1000a046 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a034:	0152      	lsls	r2, r2, #5
1000a036:	1b92      	subs	r2, r2, r6
1000a038:	0096      	lsls	r6, r2, #2
1000a03a:	4a43      	ldr	r2, [pc, #268]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a03c:	1992      	adds	r2, r2, r6
1000a03e:	325e      	adds	r2, #94	; 0x5e
1000a040:	2103      	movs	r1, #3
1000a042:	7011      	strb	r1, [r2, #0]
			break;
1000a044:	e005      	b.n	1000a052 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a046:	3301      	adds	r3, #1
1000a048:	b2db      	uxtb	r3, r3
1000a04a:	3201      	adds	r2, #1
1000a04c:	317c      	adds	r1, #124	; 0x7c
1000a04e:	2b05      	cmp	r3, #5
1000a050:	d1e7      	bne.n	1000a022 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a052:	aa01      	add	r2, sp, #4
1000a054:	2102      	movs	r1, #2
1000a056:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a058:	78e1      	ldrb	r1, [r4, #3]
1000a05a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a05c:	2101      	movs	r1, #1
1000a05e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a060:	3103      	adds	r1, #3
1000a062:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a064:	001f      	movs	r7, r3
1000a066:	015a      	lsls	r2, r3, #5
1000a068:	1ad2      	subs	r2, r2, r3
1000a06a:	0092      	lsls	r2, r2, #2
1000a06c:	4936      	ldr	r1, [pc, #216]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a06e:	5c52      	ldrb	r2, [r2, r1]
1000a070:	2a02      	cmp	r2, #2
1000a072:	d104      	bne.n	1000a07e <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a074:	aa01      	add	r2, sp, #4
1000a076:	2103      	movs	r1, #3
1000a078:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a07a:	71d1      	strb	r1, [r2, #7]
1000a07c:	e003      	b.n	1000a086 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a07e:	aa01      	add	r2, sp, #4
1000a080:	2101      	movs	r1, #1
1000a082:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a084:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a086:	aa01      	add	r2, sp, #4
1000a088:	2110      	movs	r1, #16
1000a08a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a08c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a08e:	017a      	lsls	r2, r7, #5
1000a090:	1bd2      	subs	r2, r2, r7
1000a092:	0092      	lsls	r2, r2, #2
1000a094:	492c      	ldr	r1, [pc, #176]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a096:	188a      	adds	r2, r1, r2
1000a098:	7e12      	ldrb	r2, [r2, #24]
1000a09a:	2a40      	cmp	r2, #64	; 0x40
1000a09c:	d134      	bne.n	1000a108 <ble_slave_security_request_handler+0x188>
1000a09e:	015a      	lsls	r2, r3, #5
1000a0a0:	1ad3      	subs	r3, r2, r3
1000a0a2:	009b      	lsls	r3, r3, #2
1000a0a4:	469a      	mov	sl, r3
1000a0a6:	001e      	movs	r6, r3
1000a0a8:	3660      	adds	r6, #96	; 0x60
1000a0aa:	1876      	adds	r6, r6, r1
1000a0ac:	4655      	mov	r5, sl
1000a0ae:	3568      	adds	r5, #104	; 0x68
1000a0b0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a0b2:	4b2b      	ldr	r3, [pc, #172]	; (1000a160 <ble_slave_security_request_handler+0x1e0>)
1000a0b4:	4699      	mov	r9, r3
1000a0b6:	230f      	movs	r3, #15
1000a0b8:	4698      	mov	r8, r3
1000a0ba:	47c8      	blx	r9
1000a0bc:	4643      	mov	r3, r8
1000a0be:	4018      	ands	r0, r3
1000a0c0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a0c2:	47c8      	blx	r9
1000a0c4:	4643      	mov	r3, r8
1000a0c6:	4018      	ands	r0, r3
1000a0c8:	74b0      	strb	r0, [r6, #18]
1000a0ca:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a0cc:	42ae      	cmp	r6, r5
1000a0ce:	d1f4      	bne.n	1000a0ba <ble_slave_security_request_handler+0x13a>
1000a0d0:	4656      	mov	r6, sl
1000a0d2:	3670      	adds	r6, #112	; 0x70
1000a0d4:	4a1c      	ldr	r2, [pc, #112]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a0d6:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a0d8:	4b21      	ldr	r3, [pc, #132]	; (1000a160 <ble_slave_security_request_handler+0x1e0>)
1000a0da:	4699      	mov	r9, r3
1000a0dc:	230f      	movs	r3, #15
1000a0de:	4698      	mov	r8, r3
1000a0e0:	47c8      	blx	r9
1000a0e2:	4643      	mov	r3, r8
1000a0e4:	4018      	ands	r0, r3
1000a0e6:	7028      	strb	r0, [r5, #0]
1000a0e8:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a0ea:	42b5      	cmp	r5, r6
1000a0ec:	d1f8      	bne.n	1000a0e0 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a0ee:	4b1c      	ldr	r3, [pc, #112]	; (1000a160 <ble_slave_security_request_handler+0x1e0>)
1000a0f0:	4798      	blx	r3
1000a0f2:	017b      	lsls	r3, r7, #5
1000a0f4:	1bdb      	subs	r3, r3, r7
1000a0f6:	009b      	lsls	r3, r3, #2
1000a0f8:	4a13      	ldr	r2, [pc, #76]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a0fa:	18d3      	adds	r3, r2, r3
1000a0fc:	001a      	movs	r2, r3
1000a0fe:	3270      	adds	r2, #112	; 0x70
1000a100:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a102:	337a      	adds	r3, #122	; 0x7a
1000a104:	2210      	movs	r2, #16
1000a106:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a108:	017a      	lsls	r2, r7, #5
1000a10a:	1bd7      	subs	r7, r2, r7
1000a10c:	00bf      	lsls	r7, r7, #2
1000a10e:	3760      	adds	r7, #96	; 0x60
1000a110:	4a0d      	ldr	r2, [pc, #52]	; (1000a148 <ble_slave_security_request_handler+0x1c8>)
1000a112:	18ba      	adds	r2, r7, r2
1000a114:	8820      	ldrh	r0, [r4, #0]
1000a116:	2300      	movs	r3, #0
1000a118:	a901      	add	r1, sp, #4
1000a11a:	4c12      	ldr	r4, [pc, #72]	; (1000a164 <ble_slave_security_request_handler+0x1e4>)
1000a11c:	47a0      	blx	r4
1000a11e:	2800      	cmp	r0, #0
1000a120:	d00a      	beq.n	1000a138 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a122:	ab01      	add	r3, sp, #4
1000a124:	2200      	movs	r2, #0
1000a126:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a128:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a12a:	4809      	ldr	r0, [pc, #36]	; (1000a150 <ble_slave_security_request_handler+0x1d0>)
1000a12c:	4b09      	ldr	r3, [pc, #36]	; (1000a154 <ble_slave_security_request_handler+0x1d4>)
1000a12e:	4798      	blx	r3
1000a130:	480d      	ldr	r0, [pc, #52]	; (1000a168 <ble_slave_security_request_handler+0x1e8>)
1000a132:	4b0a      	ldr	r3, [pc, #40]	; (1000a15c <ble_slave_security_request_handler+0x1dc>)
1000a134:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a136:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a138:	b004      	add	sp, #16
1000a13a:	bc1c      	pop	{r2, r3, r4}
1000a13c:	4690      	mov	r8, r2
1000a13e:	4699      	mov	r9, r3
1000a140:	46a2      	mov	sl, r4
1000a142:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a144:	10010529 	.word	0x10010529
1000a148:	100140c8 	.word	0x100140c8
1000a14c:	1000cfd9 	.word	0x1000cfd9
1000a150:	10011a94 	.word	0x10011a94
1000a154:	10010659 	.word	0x10010659
1000a158:	10011c5c 	.word	0x10011c5c
1000a15c:	10010539 	.word	0x10010539
1000a160:	1001066d 	.word	0x1001066d
1000a164:	1000cded 	.word	0x1000cded
1000a168:	10011c74 	.word	0x10011c74

1000a16c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a16e:	465f      	mov	r7, fp
1000a170:	4656      	mov	r6, sl
1000a172:	464d      	mov	r5, r9
1000a174:	4644      	mov	r4, r8
1000a176:	b4f0      	push	{r4, r5, r6, r7}
1000a178:	b085      	sub	sp, #20
1000a17a:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a17c:	8804      	ldrh	r4, [r0, #0]
1000a17e:	4a49      	ldr	r2, [pc, #292]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a180:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a182:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a184:	8910      	ldrh	r0, [r2, #8]
1000a186:	42a0      	cmp	r0, r4
1000a188:	d10d      	bne.n	1000a1a6 <ble_pair_request_handler+0x3a>
1000a18a:	0010      	movs	r0, r2
1000a18c:	305e      	adds	r0, #94	; 0x5e
1000a18e:	7800      	ldrb	r0, [r0, #0]
1000a190:	2802      	cmp	r0, #2
1000a192:	d108      	bne.n	1000a1a6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a194:	014a      	lsls	r2, r1, #5
1000a196:	1a52      	subs	r2, r2, r1
1000a198:	0095      	lsls	r5, r2, #2
1000a19a:	4a42      	ldr	r2, [pc, #264]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a19c:	1952      	adds	r2, r2, r5
1000a19e:	325e      	adds	r2, #94	; 0x5e
1000a1a0:	2103      	movs	r1, #3
1000a1a2:	7011      	strb	r1, [r2, #0]
			break;
1000a1a4:	e005      	b.n	1000a1b2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a1a6:	3301      	adds	r3, #1
1000a1a8:	b2db      	uxtb	r3, r3
1000a1aa:	3101      	adds	r1, #1
1000a1ac:	327c      	adds	r2, #124	; 0x7c
1000a1ae:	2b05      	cmp	r3, #5
1000a1b0:	d1e8      	bne.n	1000a184 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a1b2:	aa01      	add	r2, sp, #4
1000a1b4:	2102      	movs	r1, #2
1000a1b6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a1b8:	3901      	subs	r1, #1
1000a1ba:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a1bc:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a1be:	2100      	movs	r1, #0
1000a1c0:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a1c2:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a1c4:	001f      	movs	r7, r3
1000a1c6:	015a      	lsls	r2, r3, #5
1000a1c8:	1ad2      	subs	r2, r2, r3
1000a1ca:	0092      	lsls	r2, r2, #2
1000a1cc:	4935      	ldr	r1, [pc, #212]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a1ce:	5c52      	ldrb	r2, [r2, r1]
1000a1d0:	2a02      	cmp	r2, #2
1000a1d2:	d104      	bne.n	1000a1de <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1d4:	aa01      	add	r2, sp, #4
1000a1d6:	2103      	movs	r1, #3
1000a1d8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1da:	71d1      	strb	r1, [r2, #7]
1000a1dc:	e003      	b.n	1000a1e6 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a1de:	aa01      	add	r2, sp, #4
1000a1e0:	2101      	movs	r1, #1
1000a1e2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a1e4:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a1e6:	aa01      	add	r2, sp, #4
1000a1e8:	2110      	movs	r1, #16
1000a1ea:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a1ec:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a1ee:	017a      	lsls	r2, r7, #5
1000a1f0:	1bd2      	subs	r2, r2, r7
1000a1f2:	0092      	lsls	r2, r2, #2
1000a1f4:	492b      	ldr	r1, [pc, #172]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a1f6:	188a      	adds	r2, r1, r2
1000a1f8:	7e12      	ldrb	r2, [r2, #24]
1000a1fa:	2a40      	cmp	r2, #64	; 0x40
1000a1fc:	d131      	bne.n	1000a262 <ble_pair_request_handler+0xf6>
1000a1fe:	015a      	lsls	r2, r3, #5
1000a200:	1ad3      	subs	r3, r2, r3
1000a202:	009b      	lsls	r3, r3, #2
1000a204:	469a      	mov	sl, r3
1000a206:	001d      	movs	r5, r3
1000a208:	3560      	adds	r5, #96	; 0x60
1000a20a:	186d      	adds	r5, r5, r1
1000a20c:	4654      	mov	r4, sl
1000a20e:	3468      	adds	r4, #104	; 0x68
1000a210:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a212:	4b25      	ldr	r3, [pc, #148]	; (1000a2a8 <ble_pair_request_handler+0x13c>)
1000a214:	4699      	mov	r9, r3
1000a216:	260f      	movs	r6, #15
1000a218:	47c8      	blx	r9
1000a21a:	4030      	ands	r0, r6
1000a21c:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a21e:	47c8      	blx	r9
1000a220:	4030      	ands	r0, r6
1000a222:	74a8      	strb	r0, [r5, #18]
1000a224:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a226:	42a5      	cmp	r5, r4
1000a228:	d1f6      	bne.n	1000a218 <ble_pair_request_handler+0xac>
1000a22a:	4655      	mov	r5, sl
1000a22c:	3570      	adds	r5, #112	; 0x70
1000a22e:	4a1d      	ldr	r2, [pc, #116]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a230:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a232:	4b1d      	ldr	r3, [pc, #116]	; (1000a2a8 <ble_pair_request_handler+0x13c>)
1000a234:	4699      	mov	r9, r3
1000a236:	230f      	movs	r3, #15
1000a238:	4698      	mov	r8, r3
1000a23a:	47c8      	blx	r9
1000a23c:	4643      	mov	r3, r8
1000a23e:	4018      	ands	r0, r3
1000a240:	7020      	strb	r0, [r4, #0]
1000a242:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a244:	42ac      	cmp	r4, r5
1000a246:	d1f8      	bne.n	1000a23a <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a248:	4b17      	ldr	r3, [pc, #92]	; (1000a2a8 <ble_pair_request_handler+0x13c>)
1000a24a:	4798      	blx	r3
1000a24c:	017b      	lsls	r3, r7, #5
1000a24e:	1bdb      	subs	r3, r3, r7
1000a250:	009b      	lsls	r3, r3, #2
1000a252:	4a14      	ldr	r2, [pc, #80]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a254:	18d3      	adds	r3, r2, r3
1000a256:	001a      	movs	r2, r3
1000a258:	3270      	adds	r2, #112	; 0x70
1000a25a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a25c:	337a      	adds	r3, #122	; 0x7a
1000a25e:	2210      	movs	r2, #16
1000a260:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a262:	017a      	lsls	r2, r7, #5
1000a264:	1bd7      	subs	r7, r2, r7
1000a266:	00bf      	lsls	r7, r7, #2
1000a268:	3760      	adds	r7, #96	; 0x60
1000a26a:	4a0e      	ldr	r2, [pc, #56]	; (1000a2a4 <ble_pair_request_handler+0x138>)
1000a26c:	18ba      	adds	r2, r7, r2
1000a26e:	465b      	mov	r3, fp
1000a270:	8818      	ldrh	r0, [r3, #0]
1000a272:	2300      	movs	r3, #0
1000a274:	a901      	add	r1, sp, #4
1000a276:	4c0d      	ldr	r4, [pc, #52]	; (1000a2ac <ble_pair_request_handler+0x140>)
1000a278:	47a0      	blx	r4
1000a27a:	2800      	cmp	r0, #0
1000a27c:	d00a      	beq.n	1000a294 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a27e:	ab01      	add	r3, sp, #4
1000a280:	2200      	movs	r2, #0
1000a282:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a284:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a286:	480a      	ldr	r0, [pc, #40]	; (1000a2b0 <ble_pair_request_handler+0x144>)
1000a288:	4b0a      	ldr	r3, [pc, #40]	; (1000a2b4 <ble_pair_request_handler+0x148>)
1000a28a:	4798      	blx	r3
1000a28c:	480a      	ldr	r0, [pc, #40]	; (1000a2b8 <ble_pair_request_handler+0x14c>)
1000a28e:	4b0b      	ldr	r3, [pc, #44]	; (1000a2bc <ble_pair_request_handler+0x150>)
1000a290:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a292:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a294:	b005      	add	sp, #20
1000a296:	bc3c      	pop	{r2, r3, r4, r5}
1000a298:	4690      	mov	r8, r2
1000a29a:	4699      	mov	r9, r3
1000a29c:	46a2      	mov	sl, r4
1000a29e:	46ab      	mov	fp, r5
1000a2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a2a2:	46c0      	nop			; (mov r8, r8)
1000a2a4:	100140c8 	.word	0x100140c8
1000a2a8:	1001066d 	.word	0x1001066d
1000a2ac:	1000cded 	.word	0x1000cded
1000a2b0:	10011a94 	.word	0x10011a94
1000a2b4:	10010659 	.word	0x10010659
1000a2b8:	10011ca0 	.word	0x10011ca0
1000a2bc:	10010539 	.word	0x10010539

1000a2c0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a2c2:	b085      	sub	sp, #20
1000a2c4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a2c6:	2206      	movs	r2, #6
1000a2c8:	493d      	ldr	r1, [pc, #244]	; (1000a3c0 <ble_pair_key_request_handler+0x100>)
1000a2ca:	a802      	add	r0, sp, #8
1000a2cc:	4e3d      	ldr	r6, [pc, #244]	; (1000a3c4 <ble_pair_key_request_handler+0x104>)
1000a2ce:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a2d0:	ac01      	add	r4, sp, #4
1000a2d2:	2204      	movs	r2, #4
1000a2d4:	0029      	movs	r1, r5
1000a2d6:	0020      	movs	r0, r4
1000a2d8:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a2da:	78e3      	ldrb	r3, [r4, #3]
1000a2dc:	2b00      	cmp	r3, #0
1000a2de:	d162      	bne.n	1000a3a6 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a2e0:	4839      	ldr	r0, [pc, #228]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a2e2:	4b3a      	ldr	r3, [pc, #232]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a2e4:	4798      	blx	r3
1000a2e6:	483a      	ldr	r0, [pc, #232]	; (1000a3d0 <ble_pair_key_request_handler+0x110>)
1000a2e8:	4b3a      	ldr	r3, [pc, #232]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a2ea:	4798      	blx	r3
1000a2ec:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2ee:	4c3a      	ldr	r4, [pc, #232]	; (1000a3d8 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a2f0:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2f2:	201e      	movs	r0, #30
1000a2f4:	47a0      	blx	r4
1000a2f6:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a2f8:	2b00      	cmp	r3, #0
1000a2fa:	d11a      	bne.n	1000a332 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a2fc:	4f32      	ldr	r7, [pc, #200]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a2fe:	0038      	movs	r0, r7
1000a300:	4e32      	ldr	r6, [pc, #200]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a302:	47b0      	blx	r6
1000a304:	4835      	ldr	r0, [pc, #212]	; (1000a3dc <ble_pair_key_request_handler+0x11c>)
1000a306:	4c33      	ldr	r4, [pc, #204]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a308:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a30a:	0038      	movs	r0, r7
1000a30c:	47b0      	blx	r6
1000a30e:	4834      	ldr	r0, [pc, #208]	; (1000a3e0 <ble_pair_key_request_handler+0x120>)
1000a310:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a312:	8828      	ldrh	r0, [r5, #0]
1000a314:	2113      	movs	r1, #19
1000a316:	4b33      	ldr	r3, [pc, #204]	; (1000a3e4 <ble_pair_key_request_handler+0x124>)
1000a318:	4798      	blx	r3
1000a31a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a31c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a31e:	2b00      	cmp	r3, #0
1000a320:	d04c      	beq.n	1000a3bc <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a322:	4829      	ldr	r0, [pc, #164]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a324:	4b29      	ldr	r3, [pc, #164]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a326:	4798      	blx	r3
1000a328:	482f      	ldr	r0, [pc, #188]	; (1000a3e8 <ble_pair_key_request_handler+0x128>)
1000a32a:	4b2a      	ldr	r3, [pc, #168]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a32c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a32e:	20e2      	movs	r0, #226	; 0xe2
1000a330:	e044      	b.n	1000a3bc <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a332:	001a      	movs	r2, r3
1000a334:	3a30      	subs	r2, #48	; 0x30
1000a336:	2a09      	cmp	r2, #9
1000a338:	d8db      	bhi.n	1000a2f2 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a33a:	aa02      	add	r2, sp, #8
1000a33c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a33e:	4038      	ands	r0, r7
1000a340:	4b2a      	ldr	r3, [pc, #168]	; (1000a3ec <ble_pair_key_request_handler+0x12c>)
1000a342:	4798      	blx	r3
1000a344:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a346:	2e06      	cmp	r6, #6
1000a348:	d026      	beq.n	1000a398 <ble_pair_key_request_handler+0xd8>
1000a34a:	e7d2      	b.n	1000a2f2 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a34c:	481e      	ldr	r0, [pc, #120]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a34e:	4b1f      	ldr	r3, [pc, #124]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a350:	4798      	blx	r3
1000a352:	4827      	ldr	r0, [pc, #156]	; (1000a3f0 <ble_pair_key_request_handler+0x130>)
1000a354:	4b1f      	ldr	r3, [pc, #124]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a356:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a358:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a35a:	4e24      	ldr	r6, [pc, #144]	; (1000a3ec <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a35c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a35e:	5ce0      	ldrb	r0, [r4, r3]
1000a360:	47b0      	blx	r6
1000a362:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a364:	2c06      	cmp	r4, #6
1000a366:	d1f9      	bne.n	1000a35c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a368:	ab01      	add	r3, sp, #4
1000a36a:	7899      	ldrb	r1, [r3, #2]
1000a36c:	8828      	ldrh	r0, [r5, #0]
1000a36e:	aa02      	add	r2, sp, #8
1000a370:	4b20      	ldr	r3, [pc, #128]	; (1000a3f4 <ble_pair_key_request_handler+0x134>)
1000a372:	4798      	blx	r3
1000a374:	2800      	cmp	r0, #0
1000a376:	d021      	beq.n	1000a3bc <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a378:	4813      	ldr	r0, [pc, #76]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a37a:	4b14      	ldr	r3, [pc, #80]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a37c:	4798      	blx	r3
1000a37e:	481e      	ldr	r0, [pc, #120]	; (1000a3f8 <ble_pair_key_request_handler+0x138>)
1000a380:	4b14      	ldr	r3, [pc, #80]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a382:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a384:	2000      	movs	r0, #0
1000a386:	e019      	b.n	1000a3bc <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a388:	480f      	ldr	r0, [pc, #60]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a38a:	4b10      	ldr	r3, [pc, #64]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a38c:	4798      	blx	r3
1000a38e:	481b      	ldr	r0, [pc, #108]	; (1000a3fc <ble_pair_key_request_handler+0x13c>)
1000a390:	4b10      	ldr	r3, [pc, #64]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a392:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a394:	2000      	movs	r0, #0
1000a396:	e011      	b.n	1000a3bc <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a398:	480b      	ldr	r0, [pc, #44]	; (1000a3c8 <ble_pair_key_request_handler+0x108>)
1000a39a:	4b0c      	ldr	r3, [pc, #48]	; (1000a3cc <ble_pair_key_request_handler+0x10c>)
1000a39c:	4798      	blx	r3
1000a39e:	4818      	ldr	r0, [pc, #96]	; (1000a400 <ble_pair_key_request_handler+0x140>)
1000a3a0:	4b0c      	ldr	r3, [pc, #48]	; (1000a3d4 <ble_pair_key_request_handler+0x114>)
1000a3a2:	4798      	blx	r3
1000a3a4:	e7d8      	b.n	1000a358 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a3a6:	ab01      	add	r3, sp, #4
1000a3a8:	885a      	ldrh	r2, [r3, #2]
1000a3aa:	2380      	movs	r3, #128	; 0x80
1000a3ac:	005b      	lsls	r3, r3, #1
1000a3ae:	429a      	cmp	r2, r3
1000a3b0:	d0cc      	beq.n	1000a34c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a3b2:	ab01      	add	r3, sp, #4
1000a3b4:	789b      	ldrb	r3, [r3, #2]
1000a3b6:	2b01      	cmp	r3, #1
1000a3b8:	d0e6      	beq.n	1000a388 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a3ba:	2000      	movs	r0, #0
}
1000a3bc:	b005      	add	sp, #20
1000a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3c0:	10011a50 	.word	0x10011a50
1000a3c4:	10010517 	.word	0x10010517
1000a3c8:	10011a94 	.word	0x10011a94
1000a3cc:	10010659 	.word	0x10010659
1000a3d0:	10011cc8 	.word	0x10011cc8
1000a3d4:	10010539 	.word	0x10010539
1000a3d8:	1000afe1 	.word	0x1000afe1
1000a3dc:	10011cf0 	.word	0x10011cf0
1000a3e0:	10011cfc 	.word	0x10011cfc
1000a3e4:	1000ca81 	.word	0x1000ca81
1000a3e8:	10011be4 	.word	0x10011be4
1000a3ec:	1001056d 	.word	0x1001056d
1000a3f0:	10011d10 	.word	0x10011d10
1000a3f4:	1000cf1d 	.word	0x1000cf1d
1000a3f8:	10011d48 	.word	0x10011d48
1000a3fc:	10011d60 	.word	0x10011d60
1000a400:	10011d7c 	.word	0x10011d7c

1000a404 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a406:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a408:	8805      	ldrh	r5, [r0, #0]
1000a40a:	4b2f      	ldr	r3, [pc, #188]	; (1000a4c8 <ble_encryption_request_handler+0xc4>)
1000a40c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a40e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a410:	0010      	movs	r0, r2
1000a412:	8919      	ldrh	r1, [r3, #8]
1000a414:	42a9      	cmp	r1, r5
1000a416:	d116      	bne.n	1000a446 <ble_encryption_request_handler+0x42>
1000a418:	0019      	movs	r1, r3
1000a41a:	315e      	adds	r1, #94	; 0x5e
1000a41c:	7809      	ldrb	r1, [r1, #0]
1000a41e:	2901      	cmp	r1, #1
1000a420:	d911      	bls.n	1000a446 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a422:	4929      	ldr	r1, [pc, #164]	; (1000a4c8 <ble_encryption_request_handler+0xc4>)
1000a424:	0152      	lsls	r2, r2, #5
1000a426:	1a10      	subs	r0, r2, r0
1000a428:	0080      	lsls	r0, r0, #2
1000a42a:	1808      	adds	r0, r1, r0
1000a42c:	305e      	adds	r0, #94	; 0x5e
1000a42e:	2306      	movs	r3, #6
1000a430:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a432:	0162      	lsls	r2, r4, #5
1000a434:	1b13      	subs	r3, r2, r4
1000a436:	009b      	lsls	r3, r3, #2
1000a438:	18cb      	adds	r3, r1, r3
1000a43a:	3370      	adds	r3, #112	; 0x70
1000a43c:	881a      	ldrh	r2, [r3, #0]
1000a43e:	8873      	ldrh	r3, [r6, #2]
1000a440:	429a      	cmp	r2, r3
1000a442:	d113      	bne.n	1000a46c <ble_encryption_request_handler+0x68>
1000a444:	e006      	b.n	1000a454 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a446:	3401      	adds	r4, #1
1000a448:	b2e4      	uxtb	r4, r4
1000a44a:	3201      	adds	r2, #1
1000a44c:	337c      	adds	r3, #124	; 0x7c
1000a44e:	2c05      	cmp	r4, #5
1000a450:	d1de      	bne.n	1000a410 <ble_encryption_request_handler+0xc>
1000a452:	e00b      	b.n	1000a46c <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a454:	0161      	lsls	r1, r4, #5
1000a456:	1b09      	subs	r1, r1, r4
1000a458:	0089      	lsls	r1, r1, #2
1000a45a:	4b1b      	ldr	r3, [pc, #108]	; (1000a4c8 <ble_encryption_request_handler+0xc4>)
1000a45c:	1859      	adds	r1, r3, r1
1000a45e:	3172      	adds	r1, #114	; 0x72
1000a460:	1d30      	adds	r0, r6, #4
1000a462:	2208      	movs	r2, #8
1000a464:	4b19      	ldr	r3, [pc, #100]	; (1000a4cc <ble_encryption_request_handler+0xc8>)
1000a466:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a468:	2800      	cmp	r0, #0
1000a46a:	d015      	beq.n	1000a498 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a46c:	4f18      	ldr	r7, [pc, #96]	; (1000a4d0 <ble_encryption_request_handler+0xcc>)
1000a46e:	0038      	movs	r0, r7
1000a470:	4e18      	ldr	r6, [pc, #96]	; (1000a4d4 <ble_encryption_request_handler+0xd0>)
1000a472:	47b0      	blx	r6
1000a474:	4818      	ldr	r0, [pc, #96]	; (1000a4d8 <ble_encryption_request_handler+0xd4>)
1000a476:	4d19      	ldr	r5, [pc, #100]	; (1000a4dc <ble_encryption_request_handler+0xd8>)
1000a478:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a47a:	0038      	movs	r0, r7
1000a47c:	47b0      	blx	r6
1000a47e:	4818      	ldr	r0, [pc, #96]	; (1000a4e0 <ble_encryption_request_handler+0xdc>)
1000a480:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a482:	0163      	lsls	r3, r4, #5
1000a484:	1b1c      	subs	r4, r3, r4
1000a486:	00a4      	lsls	r4, r4, #2
1000a488:	4b0f      	ldr	r3, [pc, #60]	; (1000a4c8 <ble_encryption_request_handler+0xc4>)
1000a48a:	191c      	adds	r4, r3, r4
1000a48c:	8920      	ldrh	r0, [r4, #8]
1000a48e:	2105      	movs	r1, #5
1000a490:	4b14      	ldr	r3, [pc, #80]	; (1000a4e4 <ble_encryption_request_handler+0xe0>)
1000a492:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a494:	20e2      	movs	r0, #226	; 0xe2
1000a496:	e016      	b.n	1000a4c6 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a498:	0162      	lsls	r2, r4, #5
1000a49a:	1b13      	subs	r3, r2, r4
1000a49c:	009b      	lsls	r3, r3, #2
1000a49e:	3360      	adds	r3, #96	; 0x60
1000a4a0:	4909      	ldr	r1, [pc, #36]	; (1000a4c8 <ble_encryption_request_handler+0xc4>)
1000a4a2:	185b      	adds	r3, r3, r1
1000a4a4:	1b14      	subs	r4, r2, r4
1000a4a6:	00a4      	lsls	r4, r4, #2
1000a4a8:	190c      	adds	r4, r1, r4
1000a4aa:	7d21      	ldrb	r1, [r4, #20]
1000a4ac:	8830      	ldrh	r0, [r6, #0]
1000a4ae:	2201      	movs	r2, #1
1000a4b0:	4c0d      	ldr	r4, [pc, #52]	; (1000a4e8 <ble_encryption_request_handler+0xe4>)
1000a4b2:	47a0      	blx	r4
1000a4b4:	2800      	cmp	r0, #0
1000a4b6:	d006      	beq.n	1000a4c6 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a4b8:	4805      	ldr	r0, [pc, #20]	; (1000a4d0 <ble_encryption_request_handler+0xcc>)
1000a4ba:	4b06      	ldr	r3, [pc, #24]	; (1000a4d4 <ble_encryption_request_handler+0xd0>)
1000a4bc:	4798      	blx	r3
1000a4be:	480b      	ldr	r0, [pc, #44]	; (1000a4ec <ble_encryption_request_handler+0xe8>)
1000a4c0:	4b06      	ldr	r3, [pc, #24]	; (1000a4dc <ble_encryption_request_handler+0xd8>)
1000a4c2:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a4c4:	2000      	movs	r0, #0
}
1000a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a4c8:	100140c8 	.word	0x100140c8
1000a4cc:	100104f9 	.word	0x100104f9
1000a4d0:	10011a94 	.word	0x10011a94
1000a4d4:	10010659 	.word	0x10010659
1000a4d8:	10011d90 	.word	0x10011d90
1000a4dc:	10010539 	.word	0x10010539
1000a4e0:	10011dc8 	.word	0x10011dc8
1000a4e4:	1000ca81 	.word	0x1000ca81
1000a4e8:	1000d051 	.word	0x1000d051
1000a4ec:	10011e20 	.word	0x10011e20

1000a4f0 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a4f0:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a4f2:	2a00      	cmp	r2, #0
1000a4f4:	d047      	beq.n	1000a586 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a4f6:	2906      	cmp	r1, #6
1000a4f8:	d847      	bhi.n	1000a58a <ble_mgr_events_callback_handler+0x9a>
1000a4fa:	0089      	lsls	r1, r1, #2
1000a4fc:	4b28      	ldr	r3, [pc, #160]	; (1000a5a0 <ble_mgr_events_callback_handler+0xb0>)
1000a4fe:	585b      	ldr	r3, [r3, r1]
1000a500:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a502:	4b28      	ldr	r3, [pc, #160]	; (1000a5a4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a504:	2405      	movs	r4, #5
1000a506:	e00a      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a508:	4b27      	ldr	r3, [pc, #156]	; (1000a5a8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a50a:	2401      	movs	r4, #1
			}
			break;
1000a50c:	e007      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a50e:	4b27      	ldr	r3, [pc, #156]	; (1000a5ac <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a510:	2405      	movs	r4, #5
			}
			break;
1000a512:	e004      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a514:	4b26      	ldr	r3, [pc, #152]	; (1000a5b0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a516:	2401      	movs	r4, #1
			}
			break;
1000a518:	e001      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a51a:	4b26      	ldr	r3, [pc, #152]	; (1000a5b4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a51c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a51e:	2800      	cmp	r0, #0
1000a520:	d116      	bne.n	1000a550 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a522:	6819      	ldr	r1, [r3, #0]
1000a524:	2900      	cmp	r1, #0
1000a526:	d10b      	bne.n	1000a540 <ble_mgr_events_callback_handler+0x50>
1000a528:	e006      	b.n	1000a538 <ble_mgr_events_callback_handler+0x48>
1000a52a:	001d      	movs	r5, r3
1000a52c:	3304      	adds	r3, #4
1000a52e:	1f18      	subs	r0, r3, #4
1000a530:	6800      	ldr	r0, [r0, #0]
1000a532:	2800      	cmp	r0, #0
1000a534:	d106      	bne.n	1000a544 <ble_mgr_events_callback_handler+0x54>
1000a536:	e000      	b.n	1000a53a <ble_mgr_events_callback_handler+0x4a>
1000a538:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a53a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a53c:	2101      	movs	r1, #1
						break;
1000a53e:	e02c      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
1000a540:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a542:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a544:	3101      	adds	r1, #1
1000a546:	b2c9      	uxtb	r1, r1
1000a548:	42a1      	cmp	r1, r4
1000a54a:	d3ee      	bcc.n	1000a52a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a54c:	2100      	movs	r1, #0
1000a54e:	e024      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
1000a550:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a552:	2801      	cmp	r0, #1
1000a554:	d121      	bne.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a556:	6819      	ldr	r1, [r3, #0]
1000a558:	428a      	cmp	r2, r1
1000a55a:	d10c      	bne.n	1000a576 <ble_mgr_events_callback_handler+0x86>
1000a55c:	e006      	b.n	1000a56c <ble_mgr_events_callback_handler+0x7c>
1000a55e:	001d      	movs	r5, r3
1000a560:	3304      	adds	r3, #4
1000a562:	1f18      	subs	r0, r3, #4
1000a564:	6800      	ldr	r0, [r0, #0]
1000a566:	4282      	cmp	r2, r0
1000a568:	d107      	bne.n	1000a57a <ble_mgr_events_callback_handler+0x8a>
1000a56a:	e000      	b.n	1000a56e <ble_mgr_events_callback_handler+0x7e>
1000a56c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a56e:	2300      	movs	r3, #0
1000a570:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a572:	2101      	movs	r1, #1
						break;
1000a574:	e011      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
1000a576:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a578:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a57a:	3101      	adds	r1, #1
1000a57c:	b2c9      	uxtb	r1, r1
1000a57e:	42a1      	cmp	r1, r4
1000a580:	d3ed      	bcc.n	1000a55e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a582:	2100      	movs	r1, #0
1000a584:	e009      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a586:	2100      	movs	r1, #0
1000a588:	e007      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a58a:	2100      	movs	r1, #0
1000a58c:	e005      	b.n	1000a59a <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a58e:	4b0a      	ldr	r3, [pc, #40]	; (1000a5b8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a590:	2405      	movs	r4, #5
1000a592:	e7c4      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a594:	4b09      	ldr	r3, [pc, #36]	; (1000a5bc <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a596:	2401      	movs	r4, #1
1000a598:	e7c1      	b.n	1000a51e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a59a:	0008      	movs	r0, r1
1000a59c:	bd30      	pop	{r4, r5, pc}
1000a59e:	46c0      	nop			; (mov r8, r8)
1000a5a0:	10011944 	.word	0x10011944
1000a5a4:	100140b4 	.word	0x100140b4
1000a5a8:	100140b0 	.word	0x100140b0
1000a5ac:	10014338 	.word	0x10014338
1000a5b0:	100148ec 	.word	0x100148ec
1000a5b4:	1001434c 	.word	0x1001434c
1000a5b8:	10014360 	.word	0x10014360
1000a5bc:	100143a8 	.word	0x100143a8

1000a5c0 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5c2:	465f      	mov	r7, fp
1000a5c4:	4656      	mov	r6, sl
1000a5c6:	464d      	mov	r5, r9
1000a5c8:	4644      	mov	r4, r8
1000a5ca:	b4f0      	push	{r4, r5, r6, r7}
1000a5cc:	b091      	sub	sp, #68	; 0x44
1000a5ce:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a5d0:	2400      	movs	r4, #0
1000a5d2:	4b7e      	ldr	r3, [pc, #504]	; (1000a7cc <ble_device_init+0x20c>)
1000a5d4:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a5d6:	2207      	movs	r2, #7
1000a5d8:	2100      	movs	r1, #0
1000a5da:	487d      	ldr	r0, [pc, #500]	; (1000a7d0 <ble_device_init+0x210>)
1000a5dc:	4e7d      	ldr	r6, [pc, #500]	; (1000a7d4 <ble_device_init+0x214>)
1000a5de:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a5e0:	2212      	movs	r2, #18
1000a5e2:	2100      	movs	r1, #0
1000a5e4:	487c      	ldr	r0, [pc, #496]	; (1000a7d8 <ble_device_init+0x218>)
1000a5e6:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a5e8:	4a7c      	ldr	r2, [pc, #496]	; (1000a7dc <ble_device_init+0x21c>)
1000a5ea:	2100      	movs	r1, #0
1000a5ec:	487c      	ldr	r0, [pc, #496]	; (1000a7e0 <ble_device_init+0x220>)
1000a5ee:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a5f0:	4b7c      	ldr	r3, [pc, #496]	; (1000a7e4 <ble_device_init+0x224>)
1000a5f2:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a5f4:	22cd      	movs	r2, #205	; 0xcd
1000a5f6:	0092      	lsls	r2, r2, #2
1000a5f8:	2100      	movs	r1, #0
1000a5fa:	487b      	ldr	r0, [pc, #492]	; (1000a7e8 <ble_device_init+0x228>)
1000a5fc:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a5fe:	4b7b      	ldr	r3, [pc, #492]	; (1000a7ec <ble_device_init+0x22c>)
1000a600:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a602:	2283      	movs	r2, #131	; 0x83
1000a604:	0092      	lsls	r2, r2, #2
1000a606:	2100      	movs	r1, #0
1000a608:	4879      	ldr	r0, [pc, #484]	; (1000a7f0 <ble_device_init+0x230>)
1000a60a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a60c:	4b79      	ldr	r3, [pc, #484]	; (1000a7f4 <ble_device_init+0x234>)
1000a60e:	469b      	mov	fp, r3
1000a610:	2380      	movs	r3, #128	; 0x80
1000a612:	00db      	lsls	r3, r3, #3
1000a614:	469a      	mov	sl, r3
1000a616:	001a      	movs	r2, r3
1000a618:	2100      	movs	r1, #0
1000a61a:	4658      	mov	r0, fp
1000a61c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a61e:	4b76      	ldr	r3, [pc, #472]	; (1000a7f8 <ble_device_init+0x238>)
1000a620:	4699      	mov	r9, r3
1000a622:	2380      	movs	r3, #128	; 0x80
1000a624:	015b      	lsls	r3, r3, #5
1000a626:	4698      	mov	r8, r3
1000a628:	001a      	movs	r2, r3
1000a62a:	2100      	movs	r1, #0
1000a62c:	4648      	mov	r0, r9
1000a62e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a630:	4f72      	ldr	r7, [pc, #456]	; (1000a7fc <ble_device_init+0x23c>)
1000a632:	221c      	movs	r2, #28
1000a634:	2100      	movs	r1, #0
1000a636:	0038      	movs	r0, r7
1000a638:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a63a:	465b      	mov	r3, fp
1000a63c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a63e:	4653      	mov	r3, sl
1000a640:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a642:	464b      	mov	r3, r9
1000a644:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a646:	4643      	mov	r3, r8
1000a648:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a64a:	4b6d      	ldr	r3, [pc, #436]	; (1000a800 <ble_device_init+0x240>)
1000a64c:	601c      	str	r4, [r3, #0]
1000a64e:	605c      	str	r4, [r3, #4]
1000a650:	609c      	str	r4, [r3, #8]
1000a652:	60dc      	str	r4, [r3, #12]
1000a654:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a656:	4b6b      	ldr	r3, [pc, #428]	; (1000a804 <ble_device_init+0x244>)
1000a658:	601c      	str	r4, [r3, #0]
1000a65a:	605c      	str	r4, [r3, #4]
1000a65c:	609c      	str	r4, [r3, #8]
1000a65e:	60dc      	str	r4, [r3, #12]
1000a660:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a662:	4b69      	ldr	r3, [pc, #420]	; (1000a808 <ble_device_init+0x248>)
1000a664:	601c      	str	r4, [r3, #0]
1000a666:	605c      	str	r4, [r3, #4]
1000a668:	609c      	str	r4, [r3, #8]
1000a66a:	60dc      	str	r4, [r3, #12]
1000a66c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a66e:	4b67      	ldr	r3, [pc, #412]	; (1000a80c <ble_device_init+0x24c>)
1000a670:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a672:	4b67      	ldr	r3, [pc, #412]	; (1000a810 <ble_device_init+0x250>)
1000a674:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a676:	4b67      	ldr	r3, [pc, #412]	; (1000a814 <ble_device_init+0x254>)
1000a678:	601c      	str	r4, [r3, #0]
1000a67a:	605c      	str	r4, [r3, #4]
1000a67c:	609c      	str	r4, [r3, #8]
1000a67e:	60dc      	str	r4, [r3, #12]
1000a680:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a682:	4b65      	ldr	r3, [pc, #404]	; (1000a818 <ble_device_init+0x258>)
1000a684:	601c      	str	r4, [r3, #0]
1000a686:	4c65      	ldr	r4, [pc, #404]	; (1000a81c <ble_device_init+0x25c>)
1000a688:	239b      	movs	r3, #155	; 0x9b
1000a68a:	009b      	lsls	r3, r3, #2
1000a68c:	4698      	mov	r8, r3
1000a68e:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a690:	4f50      	ldr	r7, [pc, #320]	; (1000a7d4 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a692:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a694:	227c      	movs	r2, #124	; 0x7c
1000a696:	2100      	movs	r1, #0
1000a698:	0020      	movs	r0, r4
1000a69a:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a69c:	0023      	movs	r3, r4
1000a69e:	335e      	adds	r3, #94	; 0x5e
1000a6a0:	2200      	movs	r2, #0
1000a6a2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a6a4:	7626      	strb	r6, [r4, #24]
1000a6a6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6a8:	45a0      	cmp	r8, r4
1000a6aa:	d1f3      	bne.n	1000a694 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a6ac:	4b5c      	ldr	r3, [pc, #368]	; (1000a820 <ble_device_init+0x260>)
1000a6ae:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a6b0:	4c52      	ldr	r4, [pc, #328]	; (1000a7fc <ble_device_init+0x23c>)
1000a6b2:	4b4a      	ldr	r3, [pc, #296]	; (1000a7dc <ble_device_init+0x21c>)
1000a6b4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a6b6:	4b4a      	ldr	r3, [pc, #296]	; (1000a7e0 <ble_device_init+0x220>)
1000a6b8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a6ba:	485a      	ldr	r0, [pc, #360]	; (1000a824 <ble_device_init+0x264>)
1000a6bc:	4b5a      	ldr	r3, [pc, #360]	; (1000a828 <ble_device_init+0x268>)
1000a6be:	4798      	blx	r3
1000a6c0:	485a      	ldr	r0, [pc, #360]	; (1000a82c <ble_device_init+0x26c>)
1000a6c2:	4b5b      	ldr	r3, [pc, #364]	; (1000a830 <ble_device_init+0x270>)
1000a6c4:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a6c6:	0020      	movs	r0, r4
1000a6c8:	4b5a      	ldr	r3, [pc, #360]	; (1000a834 <ble_device_init+0x274>)
1000a6ca:	4798      	blx	r3
1000a6cc:	2800      	cmp	r0, #0
1000a6ce:	d00b      	beq.n	1000a6e8 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a6d0:	4e54      	ldr	r6, [pc, #336]	; (1000a824 <ble_device_init+0x264>)
1000a6d2:	0030      	movs	r0, r6
1000a6d4:	4d54      	ldr	r5, [pc, #336]	; (1000a828 <ble_device_init+0x268>)
1000a6d6:	47a8      	blx	r5
1000a6d8:	4857      	ldr	r0, [pc, #348]	; (1000a838 <ble_device_init+0x278>)
1000a6da:	4c55      	ldr	r4, [pc, #340]	; (1000a830 <ble_device_init+0x270>)
1000a6dc:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a6de:	0030      	movs	r0, r6
1000a6e0:	47a8      	blx	r5
1000a6e2:	4856      	ldr	r0, [pc, #344]	; (1000a83c <ble_device_init+0x27c>)
1000a6e4:	47a0      	blx	r4
1000a6e6:	e7fe      	b.n	1000a6e6 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a6e8:	4a55      	ldr	r2, [pc, #340]	; (1000a840 <ble_device_init+0x280>)
1000a6ea:	2100      	movs	r1, #0
1000a6ec:	2000      	movs	r0, #0
1000a6ee:	4c55      	ldr	r4, [pc, #340]	; (1000a844 <ble_device_init+0x284>)
1000a6f0:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a6f2:	4a55      	ldr	r2, [pc, #340]	; (1000a848 <ble_device_init+0x288>)
1000a6f4:	2102      	movs	r1, #2
1000a6f6:	2000      	movs	r0, #0
1000a6f8:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a6fa:	2109      	movs	r1, #9
1000a6fc:	4853      	ldr	r0, [pc, #332]	; (1000a84c <ble_device_init+0x28c>)
1000a6fe:	4b54      	ldr	r3, [pc, #336]	; (1000a850 <ble_device_init+0x290>)
1000a700:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a702:	2800      	cmp	r0, #0
1000a704:	d005      	beq.n	1000a712 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a706:	4847      	ldr	r0, [pc, #284]	; (1000a824 <ble_device_init+0x264>)
1000a708:	4b47      	ldr	r3, [pc, #284]	; (1000a828 <ble_device_init+0x268>)
1000a70a:	4798      	blx	r3
1000a70c:	4851      	ldr	r0, [pc, #324]	; (1000a854 <ble_device_init+0x294>)
1000a70e:	4b48      	ldr	r3, [pc, #288]	; (1000a830 <ble_device_init+0x270>)
1000a710:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a712:	2207      	movs	r2, #7
1000a714:	4950      	ldr	r1, [pc, #320]	; (1000a858 <ble_device_init+0x298>)
1000a716:	3108      	adds	r1, #8
1000a718:	a804      	add	r0, sp, #16
1000a71a:	4b50      	ldr	r3, [pc, #320]	; (1000a85c <ble_device_init+0x29c>)
1000a71c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a71e:	2226      	movs	r2, #38	; 0x26
1000a720:	2100      	movs	r1, #0
1000a722:	a806      	add	r0, sp, #24
1000a724:	4b2b      	ldr	r3, [pc, #172]	; (1000a7d4 <ble_device_init+0x214>)
1000a726:	4798      	blx	r3
	
	if (addr == NULL)
1000a728:	2d00      	cmp	r5, #0
1000a72a:	d10c      	bne.n	1000a746 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a72c:	a804      	add	r0, sp, #16
1000a72e:	4b4c      	ldr	r3, [pc, #304]	; (1000a860 <ble_device_init+0x2a0>)
1000a730:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a732:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a734:	2800      	cmp	r0, #0
1000a736:	d006      	beq.n	1000a746 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a738:	483a      	ldr	r0, [pc, #232]	; (1000a824 <ble_device_init+0x264>)
1000a73a:	4b3b      	ldr	r3, [pc, #236]	; (1000a828 <ble_device_init+0x268>)
1000a73c:	4798      	blx	r3
1000a73e:	4849      	ldr	r0, [pc, #292]	; (1000a864 <ble_device_init+0x2a4>)
1000a740:	4b3b      	ldr	r3, [pc, #236]	; (1000a830 <ble_device_init+0x270>)
1000a742:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a744:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a746:	4837      	ldr	r0, [pc, #220]	; (1000a824 <ble_device_init+0x264>)
1000a748:	4b37      	ldr	r3, [pc, #220]	; (1000a828 <ble_device_init+0x268>)
1000a74a:	4798      	blx	r3
1000a74c:	792b      	ldrb	r3, [r5, #4]
1000a74e:	796a      	ldrb	r2, [r5, #5]
1000a750:	79a9      	ldrb	r1, [r5, #6]
1000a752:	7828      	ldrb	r0, [r5, #0]
1000a754:	9003      	str	r0, [sp, #12]
1000a756:	7868      	ldrb	r0, [r5, #1]
1000a758:	9002      	str	r0, [sp, #8]
1000a75a:	78a8      	ldrb	r0, [r5, #2]
1000a75c:	9001      	str	r0, [sp, #4]
1000a75e:	78e8      	ldrb	r0, [r5, #3]
1000a760:	9000      	str	r0, [sp, #0]
1000a762:	4841      	ldr	r0, [pc, #260]	; (1000a868 <ble_device_init+0x2a8>)
1000a764:	4c32      	ldr	r4, [pc, #200]	; (1000a830 <ble_device_init+0x270>)
1000a766:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a768:	ac06      	add	r4, sp, #24
1000a76a:	230f      	movs	r3, #15
1000a76c:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a76e:	4b3f      	ldr	r3, [pc, #252]	; (1000a86c <ble_device_init+0x2ac>)
1000a770:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a772:	2207      	movs	r2, #7
1000a774:	0029      	movs	r1, r5
1000a776:	a807      	add	r0, sp, #28
1000a778:	4b38      	ldr	r3, [pc, #224]	; (1000a85c <ble_device_init+0x29c>)
1000a77a:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a77c:	2300      	movs	r3, #0
1000a77e:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a780:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a782:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a784:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a786:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a788:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a78a:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a78c:	2380      	movs	r3, #128	; 0x80
1000a78e:	009b      	lsls	r3, r3, #2
1000a790:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a792:	0020      	movs	r0, r4
1000a794:	4b36      	ldr	r3, [pc, #216]	; (1000a870 <ble_device_init+0x2b0>)
1000a796:	4798      	blx	r3
1000a798:	2800      	cmp	r0, #0
1000a79a:	d005      	beq.n	1000a7a8 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a79c:	4821      	ldr	r0, [pc, #132]	; (1000a824 <ble_device_init+0x264>)
1000a79e:	4b22      	ldr	r3, [pc, #136]	; (1000a828 <ble_device_init+0x268>)
1000a7a0:	4798      	blx	r3
1000a7a2:	4834      	ldr	r0, [pc, #208]	; (1000a874 <ble_device_init+0x2b4>)
1000a7a4:	4b22      	ldr	r3, [pc, #136]	; (1000a830 <ble_device_init+0x270>)
1000a7a6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a7a8:	0028      	movs	r0, r5
1000a7aa:	4b33      	ldr	r3, [pc, #204]	; (1000a878 <ble_device_init+0x2b8>)
1000a7ac:	4798      	blx	r3
1000a7ae:	2800      	cmp	r0, #0
1000a7b0:	d005      	beq.n	1000a7be <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a7b2:	481c      	ldr	r0, [pc, #112]	; (1000a824 <ble_device_init+0x264>)
1000a7b4:	4b1c      	ldr	r3, [pc, #112]	; (1000a828 <ble_device_init+0x268>)
1000a7b6:	4798      	blx	r3
1000a7b8:	4830      	ldr	r0, [pc, #192]	; (1000a87c <ble_device_init+0x2bc>)
1000a7ba:	4b1d      	ldr	r3, [pc, #116]	; (1000a830 <ble_device_init+0x270>)
1000a7bc:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a7be:	b011      	add	sp, #68	; 0x44
1000a7c0:	bc3c      	pop	{r2, r3, r4, r5}
1000a7c2:	4690      	mov	r8, r2
1000a7c4:	4699      	mov	r9, r3
1000a7c6:	46a2      	mov	sl, r4
1000a7c8:	46ab      	mov	fp, r5
1000a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7cc:	10012eb4 	.word	0x10012eb4
1000a7d0:	10012ebc 	.word	0x10012ebc
1000a7d4:	10010529 	.word	0x10010529
1000a7d8:	10014374 	.word	0x10014374
1000a7dc:	000004e2 	.word	0x000004e2
1000a7e0:	100129d4 	.word	0x100129d4
1000a7e4:	10012eb8 	.word	0x10012eb8
1000a7e8:	100143ac 	.word	0x100143ac
1000a7ec:	100143a4 	.word	0x100143a4
1000a7f0:	100146e0 	.word	0x100146e0
1000a7f4:	100125d4 	.word	0x100125d4
1000a7f8:	10012ec4 	.word	0x10012ec4
1000a7fc:	10014388 	.word	0x10014388
1000a800:	1001434c 	.word	0x1001434c
1000a804:	10014360 	.word	0x10014360
1000a808:	100140b4 	.word	0x100140b4
1000a80c:	100143a8 	.word	0x100143a8
1000a810:	100140b0 	.word	0x100140b0
1000a814:	10014338 	.word	0x10014338
1000a818:	100148ec 	.word	0x100148ec
1000a81c:	100140c8 	.word	0x100140c8
1000a820:	10014334 	.word	0x10014334
1000a824:	10011a94 	.word	0x10011a94
1000a828:	10010659 	.word	0x10010659
1000a82c:	10011e40 	.word	0x10011e40
1000a830:	10010539 	.word	0x10010539
1000a834:	1000c699 	.word	0x1000c699
1000a838:	10011e54 	.word	0x10011e54
1000a83c:	10011e74 	.word	0x10011e74
1000a840:	100120ac 	.word	0x100120ac
1000a844:	1000a4f1 	.word	0x1000a4f1
1000a848:	10011a6c 	.word	0x10011a6c
1000a84c:	10011eb0 	.word	0x10011eb0
1000a850:	1000c5b1 	.word	0x1000c5b1
1000a854:	10011ebc 	.word	0x10011ebc
1000a858:	10011a50 	.word	0x10011a50
1000a85c:	10010517 	.word	0x10010517
1000a860:	1000c5e5 	.word	0x1000c5e5
1000a864:	10011ed4 	.word	0x10011ed4
1000a868:	10011eec 	.word	0x10011eec
1000a86c:	00003a98 	.word	0x00003a98
1000a870:	1000c609 	.word	0x1000c609
1000a874:	10011f24 	.word	0x10011f24
1000a878:	1000c84d 	.word	0x1000c84d
1000a87c:	10011f48 	.word	0x10011f48

1000a880 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a880:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a882:	2201      	movs	r2, #1
1000a884:	2101      	movs	r1, #1
1000a886:	4b06      	ldr	r3, [pc, #24]	; (1000a8a0 <ble_send_slave_sec_request+0x20>)
1000a888:	4798      	blx	r3
1000a88a:	2800      	cmp	r0, #0
1000a88c:	d006      	beq.n	1000a89c <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a88e:	4805      	ldr	r0, [pc, #20]	; (1000a8a4 <ble_send_slave_sec_request+0x24>)
1000a890:	4b05      	ldr	r3, [pc, #20]	; (1000a8a8 <ble_send_slave_sec_request+0x28>)
1000a892:	4798      	blx	r3
1000a894:	4805      	ldr	r0, [pc, #20]	; (1000a8ac <ble_send_slave_sec_request+0x2c>)
1000a896:	4b06      	ldr	r3, [pc, #24]	; (1000a8b0 <ble_send_slave_sec_request+0x30>)
1000a898:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a89a:	20e2      	movs	r0, #226	; 0xe2
}
1000a89c:	bd10      	pop	{r4, pc}
1000a89e:	46c0      	nop			; (mov r8, r8)
1000a8a0:	1000cf99 	.word	0x1000cf99
1000a8a4:	10011a94 	.word	0x10011a94
1000a8a8:	10010659 	.word	0x10010659
1000a8ac:	10011f84 	.word	0x10011f84
1000a8b0:	10010539 	.word	0x10010539

1000a8b4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a8b6:	465f      	mov	r7, fp
1000a8b8:	464e      	mov	r6, r9
1000a8ba:	4645      	mov	r5, r8
1000a8bc:	b4e0      	push	{r5, r6, r7}
1000a8be:	b09a      	sub	sp, #104	; 0x68
1000a8c0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a8c2:	7a86      	ldrb	r6, [r0, #10]
1000a8c4:	2e00      	cmp	r6, #0
1000a8c6:	d000      	beq.n	1000a8ca <ble_connected_state_handler+0x16>
1000a8c8:	e0c6      	b.n	1000aa58 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a8ca:	4875      	ldr	r0, [pc, #468]	; (1000aaa0 <ble_connected_state_handler+0x1ec>)
1000a8cc:	4f75      	ldr	r7, [pc, #468]	; (1000aaa4 <ble_connected_state_handler+0x1f0>)
1000a8ce:	47b8      	blx	r7
1000a8d0:	792b      	ldrb	r3, [r5, #4]
1000a8d2:	796a      	ldrb	r2, [r5, #5]
1000a8d4:	79a9      	ldrb	r1, [r5, #6]
1000a8d6:	7868      	ldrb	r0, [r5, #1]
1000a8d8:	9002      	str	r0, [sp, #8]
1000a8da:	78a8      	ldrb	r0, [r5, #2]
1000a8dc:	9001      	str	r0, [sp, #4]
1000a8de:	78e8      	ldrb	r0, [r5, #3]
1000a8e0:	9000      	str	r0, [sp, #0]
1000a8e2:	4871      	ldr	r0, [pc, #452]	; (1000aaa8 <ble_connected_state_handler+0x1f4>)
1000a8e4:	4c71      	ldr	r4, [pc, #452]	; (1000aaac <ble_connected_state_handler+0x1f8>)
1000a8e6:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a8e8:	486d      	ldr	r0, [pc, #436]	; (1000aaa0 <ble_connected_state_handler+0x1ec>)
1000a8ea:	47b8      	blx	r7
1000a8ec:	8929      	ldrh	r1, [r5, #8]
1000a8ee:	4870      	ldr	r0, [pc, #448]	; (1000aab0 <ble_connected_state_handler+0x1fc>)
1000a8f0:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a8f2:	2212      	movs	r2, #18
1000a8f4:	0029      	movs	r1, r5
1000a8f6:	486f      	ldr	r0, [pc, #444]	; (1000aab4 <ble_connected_state_handler+0x200>)
1000a8f8:	4b6f      	ldr	r3, [pc, #444]	; (1000aab8 <ble_connected_state_handler+0x204>)
1000a8fa:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a8fc:	9504      	str	r5, [sp, #16]
1000a8fe:	2207      	movs	r2, #7
1000a900:	0029      	movs	r1, r5
1000a902:	486e      	ldr	r0, [pc, #440]	; (1000aabc <ble_connected_state_handler+0x208>)
1000a904:	4b6e      	ldr	r3, [pc, #440]	; (1000aac0 <ble_connected_state_handler+0x20c>)
1000a906:	4798      	blx	r3
1000a908:	2800      	cmp	r0, #0
1000a90a:	d100      	bne.n	1000a90e <ble_connected_state_handler+0x5a>
1000a90c:	e0ad      	b.n	1000aa6a <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a90e:	782b      	ldrb	r3, [r5, #0]
1000a910:	2b02      	cmp	r3, #2
1000a912:	d000      	beq.n	1000a916 <ble_connected_state_handler+0x62>
1000a914:	e0a9      	b.n	1000aa6a <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a916:	2250      	movs	r2, #80	; 0x50
1000a918:	2100      	movs	r1, #0
1000a91a:	a806      	add	r0, sp, #24
1000a91c:	4b69      	ldr	r3, [pc, #420]	; (1000aac4 <ble_connected_state_handler+0x210>)
1000a91e:	4798      	blx	r3
1000a920:	4f69      	ldr	r7, [pc, #420]	; (1000aac8 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a922:	2300      	movs	r3, #0
1000a924:	e00b      	b.n	1000a93e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a926:	1c59      	adds	r1, r3, #1
1000a928:	7814      	ldrb	r4, [r2, #0]
1000a92a:	a806      	add	r0, sp, #24
1000a92c:	54c4      	strb	r4, [r0, r3]
1000a92e:	3201      	adds	r2, #1
1000a930:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a932:	42b3      	cmp	r3, r6
1000a934:	d1f7      	bne.n	1000a926 <ble_connected_state_handler+0x72>
1000a936:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a938:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a93a:	2b50      	cmp	r3, #80	; 0x50
1000a93c:	d004      	beq.n	1000a948 <ble_connected_state_handler+0x94>
1000a93e:	001e      	movs	r6, r3
1000a940:	3610      	adds	r6, #16
1000a942:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a944:	003a      	movs	r2, r7
1000a946:	e7ee      	b.n	1000a926 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a948:	aa06      	add	r2, sp, #24
1000a94a:	0029      	movs	r1, r5
1000a94c:	2005      	movs	r0, #5
1000a94e:	4b5f      	ldr	r3, [pc, #380]	; (1000aacc <ble_connected_state_handler+0x218>)
1000a950:	4798      	blx	r3
1000a952:	1e06      	subs	r6, r0, #0
1000a954:	d100      	bne.n	1000a958 <ble_connected_state_handler+0xa4>
1000a956:	e09c      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a958:	4851      	ldr	r0, [pc, #324]	; (1000aaa0 <ble_connected_state_handler+0x1ec>)
1000a95a:	4b52      	ldr	r3, [pc, #328]	; (1000aaa4 <ble_connected_state_handler+0x1f0>)
1000a95c:	4798      	blx	r3
1000a95e:	485c      	ldr	r0, [pc, #368]	; (1000aad0 <ble_connected_state_handler+0x21c>)
1000a960:	4b52      	ldr	r3, [pc, #328]	; (1000aaac <ble_connected_state_handler+0x1f8>)
1000a962:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a964:	26e2      	movs	r6, #226	; 0xe2
1000a966:	e094      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
1000a968:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a96a:	9405      	str	r4, [sp, #20]
1000a96c:	2207      	movs	r2, #7
1000a96e:	9904      	ldr	r1, [sp, #16]
1000a970:	4648      	mov	r0, r9
1000a972:	47d8      	blx	fp
1000a974:	2800      	cmp	r0, #0
1000a976:	d109      	bne.n	1000a98c <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a978:	9a05      	ldr	r2, [sp, #20]
1000a97a:	0153      	lsls	r3, r2, #5
1000a97c:	1a9b      	subs	r3, r3, r2
1000a97e:	009a      	lsls	r2, r3, #2
1000a980:	4b54      	ldr	r3, [pc, #336]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000a982:	189b      	adds	r3, r3, r2
1000a984:	335e      	adds	r3, #94	; 0x5e
1000a986:	2202      	movs	r2, #2
1000a988:	701a      	strb	r2, [r3, #0]
1000a98a:	e02b      	b.n	1000a9e4 <ble_connected_state_handler+0x130>
1000a98c:	3401      	adds	r4, #1
1000a98e:	237c      	movs	r3, #124	; 0x7c
1000a990:	469c      	mov	ip, r3
1000a992:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a994:	2c05      	cmp	r4, #5
1000a996:	d1e7      	bne.n	1000a968 <ble_connected_state_handler+0xb4>
1000a998:	e072      	b.n	1000aa80 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a99a:	001c      	movs	r4, r3
1000a99c:	7811      	ldrb	r1, [r2, #0]
1000a99e:	2900      	cmp	r1, #0
1000a9a0:	d11a      	bne.n	1000a9d8 <ble_connected_state_handler+0x124>
1000a9a2:	e001      	b.n	1000a9a8 <ble_connected_state_handler+0xf4>
1000a9a4:	2400      	movs	r4, #0
1000a9a6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a9a8:	0163      	lsls	r3, r4, #5
1000a9aa:	4699      	mov	r9, r3
1000a9ac:	1b18      	subs	r0, r3, r4
1000a9ae:	0080      	lsls	r0, r0, #2
1000a9b0:	4b48      	ldr	r3, [pc, #288]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000a9b2:	4698      	mov	r8, r3
1000a9b4:	4440      	add	r0, r8
1000a9b6:	2212      	movs	r2, #18
1000a9b8:	0029      	movs	r1, r5
1000a9ba:	4b3f      	ldr	r3, [pc, #252]	; (1000aab8 <ble_connected_state_handler+0x204>)
1000a9bc:	4798      	blx	r3
						ble_device_count++;
1000a9be:	4a46      	ldr	r2, [pc, #280]	; (1000aad8 <ble_connected_state_handler+0x224>)
1000a9c0:	7813      	ldrb	r3, [r2, #0]
1000a9c2:	3301      	adds	r3, #1
1000a9c4:	b2db      	uxtb	r3, r3
1000a9c6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a9c8:	464b      	mov	r3, r9
1000a9ca:	1b1b      	subs	r3, r3, r4
1000a9cc:	009b      	lsls	r3, r3, #2
1000a9ce:	4443      	add	r3, r8
1000a9d0:	335e      	adds	r3, #94	; 0x5e
1000a9d2:	2202      	movs	r2, #2
1000a9d4:	701a      	strb	r2, [r3, #0]
						break;
1000a9d6:	e005      	b.n	1000a9e4 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a9d8:	1c79      	adds	r1, r7, #1
1000a9da:	b2cf      	uxtb	r7, r1
1000a9dc:	3301      	adds	r3, #1
1000a9de:	327c      	adds	r2, #124	; 0x7c
1000a9e0:	2f05      	cmp	r7, #5
1000a9e2:	d1da      	bne.n	1000a99a <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a9e4:	2207      	movs	r2, #7
1000a9e6:	0029      	movs	r1, r5
1000a9e8:	4834      	ldr	r0, [pc, #208]	; (1000aabc <ble_connected_state_handler+0x208>)
1000a9ea:	4b35      	ldr	r3, [pc, #212]	; (1000aac0 <ble_connected_state_handler+0x20c>)
1000a9ec:	4798      	blx	r3
1000a9ee:	2800      	cmp	r0, #0
1000a9f0:	d10c      	bne.n	1000aa0c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a9f2:	017b      	lsls	r3, r7, #5
1000a9f4:	1bdb      	subs	r3, r3, r7
1000a9f6:	009b      	lsls	r3, r3, #2
1000a9f8:	4a36      	ldr	r2, [pc, #216]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000a9fa:	18d3      	adds	r3, r2, r3
1000a9fc:	2205      	movs	r2, #5
1000a9fe:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000aa00:	3202      	adds	r2, #2
1000aa02:	2100      	movs	r1, #0
1000aa04:	482d      	ldr	r0, [pc, #180]	; (1000aabc <ble_connected_state_handler+0x208>)
1000aa06:	4b2f      	ldr	r3, [pc, #188]	; (1000aac4 <ble_connected_state_handler+0x210>)
1000aa08:	4798      	blx	r3
1000aa0a:	e042      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000aa0c:	4b31      	ldr	r3, [pc, #196]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000aa0e:	4698      	mov	r8, r3
1000aa10:	017c      	lsls	r4, r7, #5
1000aa12:	1be3      	subs	r3, r4, r7
1000aa14:	009b      	lsls	r3, r3, #2
1000aa16:	4443      	add	r3, r8
1000aa18:	220a      	movs	r2, #10
1000aa1a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000aa1c:	3a03      	subs	r2, #3
1000aa1e:	2100      	movs	r1, #0
1000aa20:	4826      	ldr	r0, [pc, #152]	; (1000aabc <ble_connected_state_handler+0x208>)
1000aa22:	4b28      	ldr	r3, [pc, #160]	; (1000aac4 <ble_connected_state_handler+0x210>)
1000aa24:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000aa26:	1be4      	subs	r4, r4, r7
1000aa28:	00a4      	lsls	r4, r4, #2
1000aa2a:	4444      	add	r4, r8
1000aa2c:	7ca3      	ldrb	r3, [r4, #18]
1000aa2e:	2b0a      	cmp	r3, #10
1000aa30:	d12f      	bne.n	1000aa92 <ble_connected_state_handler+0x1de>
1000aa32:	e00d      	b.n	1000aa50 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000aa34:	481a      	ldr	r0, [pc, #104]	; (1000aaa0 <ble_connected_state_handler+0x1ec>)
1000aa36:	4b1b      	ldr	r3, [pc, #108]	; (1000aaa4 <ble_connected_state_handler+0x1f0>)
1000aa38:	4798      	blx	r3
1000aa3a:	4b27      	ldr	r3, [pc, #156]	; (1000aad8 <ble_connected_state_handler+0x224>)
1000aa3c:	7819      	ldrb	r1, [r3, #0]
1000aa3e:	b2c9      	uxtb	r1, r1
1000aa40:	4826      	ldr	r0, [pc, #152]	; (1000aadc <ble_connected_state_handler+0x228>)
1000aa42:	4b1a      	ldr	r3, [pc, #104]	; (1000aaac <ble_connected_state_handler+0x1f8>)
1000aa44:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000aa46:	8928      	ldrh	r0, [r5, #8]
1000aa48:	2113      	movs	r1, #19
1000aa4a:	4b25      	ldr	r3, [pc, #148]	; (1000aae0 <ble_connected_state_handler+0x22c>)
1000aa4c:	4798      	blx	r3
1000aa4e:	e020      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000aa50:	8928      	ldrh	r0, [r5, #8]
1000aa52:	4b24      	ldr	r3, [pc, #144]	; (1000aae4 <ble_connected_state_handler+0x230>)
1000aa54:	4798      	blx	r3
1000aa56:	e01c      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000aa58:	4811      	ldr	r0, [pc, #68]	; (1000aaa0 <ble_connected_state_handler+0x1ec>)
1000aa5a:	4b12      	ldr	r3, [pc, #72]	; (1000aaa4 <ble_connected_state_handler+0x1f0>)
1000aa5c:	4798      	blx	r3
1000aa5e:	7aa9      	ldrb	r1, [r5, #10]
1000aa60:	4821      	ldr	r0, [pc, #132]	; (1000aae8 <ble_connected_state_handler+0x234>)
1000aa62:	4b12      	ldr	r3, [pc, #72]	; (1000aaac <ble_connected_state_handler+0x1f8>)
1000aa64:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000aa66:	2600      	movs	r6, #0
1000aa68:	e013      	b.n	1000aa92 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000aa6a:	4b1b      	ldr	r3, [pc, #108]	; (1000aad8 <ble_connected_state_handler+0x224>)
1000aa6c:	781b      	ldrb	r3, [r3, #0]
1000aa6e:	b2db      	uxtb	r3, r3
1000aa70:	2b04      	cmp	r3, #4
1000aa72:	d8df      	bhi.n	1000aa34 <ble_connected_state_handler+0x180>
1000aa74:	4b17      	ldr	r3, [pc, #92]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000aa76:	4699      	mov	r9, r3
1000aa78:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aa7a:	4b11      	ldr	r3, [pc, #68]	; (1000aac0 <ble_connected_state_handler+0x20c>)
1000aa7c:	469b      	mov	fp, r3
1000aa7e:	e773      	b.n	1000a968 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aa80:	235e      	movs	r3, #94	; 0x5e
1000aa82:	4a14      	ldr	r2, [pc, #80]	; (1000aad4 <ble_connected_state_handler+0x220>)
1000aa84:	5cd3      	ldrb	r3, [r2, r3]
1000aa86:	2b00      	cmp	r3, #0
1000aa88:	d08c      	beq.n	1000a9a4 <ble_connected_state_handler+0xf0>
1000aa8a:	4a18      	ldr	r2, [pc, #96]	; (1000aaec <ble_connected_state_handler+0x238>)
1000aa8c:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aa8e:	2701      	movs	r7, #1
1000aa90:	e783      	b.n	1000a99a <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000aa92:	0030      	movs	r0, r6
1000aa94:	b01a      	add	sp, #104	; 0x68
1000aa96:	bc1c      	pop	{r2, r3, r4}
1000aa98:	4690      	mov	r8, r2
1000aa9a:	4699      	mov	r9, r3
1000aa9c:	46a3      	mov	fp, r4
1000aa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aaa0:	10011a94 	.word	0x10011a94
1000aaa4:	10010659 	.word	0x10010659
1000aaa8:	10011fa4 	.word	0x10011fa4
1000aaac:	10010539 	.word	0x10010539
1000aab0:	10011fe8 	.word	0x10011fe8
1000aab4:	10014374 	.word	0x10014374
1000aab8:	10010517 	.word	0x10010517
1000aabc:	10012ebc 	.word	0x10012ebc
1000aac0:	100104f9 	.word	0x100104f9
1000aac4:	10010529 	.word	0x10010529
1000aac8:	1001410e 	.word	0x1001410e
1000aacc:	1000caad 	.word	0x1000caad
1000aad0:	10012000 	.word	0x10012000
1000aad4:	100140c8 	.word	0x100140c8
1000aad8:	10014334 	.word	0x10014334
1000aadc:	10012024 	.word	0x10012024
1000aae0:	1000ca81 	.word	0x1000ca81
1000aae4:	1000a881 	.word	0x1000a881
1000aae8:	10012060 	.word	0x10012060
1000aaec:	100141a2 	.word	0x100141a2

1000aaf0 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000aaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aaf2:	4647      	mov	r7, r8
1000aaf4:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000aaf6:	7803      	ldrb	r3, [r0, #0]
1000aaf8:	2b00      	cmp	r3, #0
1000aafa:	d141      	bne.n	1000ab80 <ble_resolv_rand_addr_handler+0x90>
1000aafc:	4d2f      	ldr	r5, [pc, #188]	; (1000abbc <ble_resolv_rand_addr_handler+0xcc>)
1000aafe:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000ab00:	1c46      	adds	r6, r0, #1
1000ab02:	4f2f      	ldr	r7, [pc, #188]	; (1000abc0 <ble_resolv_rand_addr_handler+0xd0>)
1000ab04:	2210      	movs	r2, #16
1000ab06:	0029      	movs	r1, r5
1000ab08:	0030      	movs	r0, r6
1000ab0a:	47b8      	blx	r7
1000ab0c:	2800      	cmp	r0, #0
1000ab0e:	d03f      	beq.n	1000ab90 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab10:	3401      	adds	r4, #1
1000ab12:	b2e4      	uxtb	r4, r4
1000ab14:	357c      	adds	r5, #124	; 0x7c
1000ab16:	2c05      	cmp	r4, #5
1000ab18:	d1f4      	bne.n	1000ab04 <ble_resolv_rand_addr_handler+0x14>
1000ab1a:	e031      	b.n	1000ab80 <ble_resolv_rand_addr_handler+0x90>
1000ab1c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ab1e:	001c      	movs	r4, r3
1000ab20:	7811      	ldrb	r1, [r2, #0]
1000ab22:	2900      	cmp	r1, #0
1000ab24:	d122      	bne.n	1000ab6c <ble_resolv_rand_addr_handler+0x7c>
1000ab26:	e001      	b.n	1000ab2c <ble_resolv_rand_addr_handler+0x3c>
1000ab28:	2400      	movs	r4, #0
1000ab2a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ab2c:	4b25      	ldr	r3, [pc, #148]	; (1000abc4 <ble_resolv_rand_addr_handler+0xd4>)
1000ab2e:	4698      	mov	r8, r3
1000ab30:	0166      	lsls	r6, r4, #5
1000ab32:	1b37      	subs	r7, r6, r4
1000ab34:	00bf      	lsls	r7, r7, #2
1000ab36:	4447      	add	r7, r8
1000ab38:	2212      	movs	r2, #18
1000ab3a:	4923      	ldr	r1, [pc, #140]	; (1000abc8 <ble_resolv_rand_addr_handler+0xd8>)
1000ab3c:	0038      	movs	r0, r7
1000ab3e:	4b23      	ldr	r3, [pc, #140]	; (1000abcc <ble_resolv_rand_addr_handler+0xdc>)
1000ab40:	4798      	blx	r3
				ble_device_count++;
1000ab42:	4a23      	ldr	r2, [pc, #140]	; (1000abd0 <ble_resolv_rand_addr_handler+0xe0>)
1000ab44:	7813      	ldrb	r3, [r2, #0]
1000ab46:	3301      	adds	r3, #1
1000ab48:	b2db      	uxtb	r3, r3
1000ab4a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab4c:	375e      	adds	r7, #94	; 0x5e
1000ab4e:	2302      	movs	r3, #2
1000ab50:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab52:	1b34      	subs	r4, r6, r4
1000ab54:	00a4      	lsls	r4, r4, #2
1000ab56:	4444      	add	r4, r8
1000ab58:	3308      	adds	r3, #8
1000ab5a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ab5c:	016b      	lsls	r3, r5, #5
1000ab5e:	1b5d      	subs	r5, r3, r5
1000ab60:	00ad      	lsls	r5, r5, #2
1000ab62:	4445      	add	r5, r8
1000ab64:	7cab      	ldrb	r3, [r5, #18]
1000ab66:	2b0a      	cmp	r3, #10
1000ab68:	d123      	bne.n	1000abb2 <ble_resolv_rand_addr_handler+0xc2>
1000ab6a:	e004      	b.n	1000ab76 <ble_resolv_rand_addr_handler+0x86>
1000ab6c:	3301      	adds	r3, #1
1000ab6e:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab70:	2b05      	cmp	r3, #5
1000ab72:	d1d3      	bne.n	1000ab1c <ble_resolv_rand_addr_handler+0x2c>
1000ab74:	e01d      	b.n	1000abb2 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ab76:	4b14      	ldr	r3, [pc, #80]	; (1000abc8 <ble_resolv_rand_addr_handler+0xd8>)
1000ab78:	8918      	ldrh	r0, [r3, #8]
1000ab7a:	4b16      	ldr	r3, [pc, #88]	; (1000abd4 <ble_resolv_rand_addr_handler+0xe4>)
1000ab7c:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000ab7e:	e018      	b.n	1000abb2 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ab80:	235e      	movs	r3, #94	; 0x5e
1000ab82:	4a10      	ldr	r2, [pc, #64]	; (1000abc4 <ble_resolv_rand_addr_handler+0xd4>)
1000ab84:	5cd3      	ldrb	r3, [r2, r3]
1000ab86:	2b00      	cmp	r3, #0
1000ab88:	d0ce      	beq.n	1000ab28 <ble_resolv_rand_addr_handler+0x38>
1000ab8a:	4a13      	ldr	r2, [pc, #76]	; (1000abd8 <ble_resolv_rand_addr_handler+0xe8>)
1000ab8c:	2301      	movs	r3, #1
1000ab8e:	e7c5      	b.n	1000ab1c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab90:	480c      	ldr	r0, [pc, #48]	; (1000abc4 <ble_resolv_rand_addr_handler+0xd4>)
1000ab92:	0163      	lsls	r3, r4, #5
1000ab94:	1b1a      	subs	r2, r3, r4
1000ab96:	0092      	lsls	r2, r2, #2
1000ab98:	1882      	adds	r2, r0, r2
1000ab9a:	0011      	movs	r1, r2
1000ab9c:	315e      	adds	r1, #94	; 0x5e
1000ab9e:	2502      	movs	r5, #2
1000aba0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000aba2:	210a      	movs	r1, #10
1000aba4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000aba6:	0010      	movs	r0, r2
1000aba8:	2212      	movs	r2, #18
1000abaa:	4907      	ldr	r1, [pc, #28]	; (1000abc8 <ble_resolv_rand_addr_handler+0xd8>)
1000abac:	4b07      	ldr	r3, [pc, #28]	; (1000abcc <ble_resolv_rand_addr_handler+0xdc>)
1000abae:	4798      	blx	r3
1000abb0:	e7e1      	b.n	1000ab76 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000abb2:	2000      	movs	r0, #0
1000abb4:	bc04      	pop	{r2}
1000abb6:	4690      	mov	r8, r2
1000abb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abba:	46c0      	nop			; (mov r8, r8)
1000abbc:	1001410e 	.word	0x1001410e
1000abc0:	100104f9 	.word	0x100104f9
1000abc4:	100140c8 	.word	0x100140c8
1000abc8:	10014374 	.word	0x10014374
1000abcc:	10010517 	.word	0x10010517
1000abd0:	10014334 	.word	0x10014334
1000abd4:	1000a881 	.word	0x1000a881
1000abd8:	100141a2 	.word	0x100141a2

1000abdc <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000abde:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000abe0:	283b      	cmp	r0, #59	; 0x3b
1000abe2:	d872      	bhi.n	1000acca <ble_event_manager+0xee>
1000abe4:	0083      	lsls	r3, r0, #2
1000abe6:	4a3c      	ldr	r2, [pc, #240]	; (1000acd8 <ble_event_manager+0xfc>)
1000abe8:	58d3      	ldr	r3, [r2, r3]
1000abea:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abec:	0084      	lsls	r4, r0, #2
1000abee:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000abf0:	4f3a      	ldr	r7, [pc, #232]	; (1000acdc <ble_event_manager+0x100>)
1000abf2:	59bb      	ldr	r3, [r7, r6]
1000abf4:	2b00      	cmp	r3, #0
1000abf6:	d004      	beq.n	1000ac02 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abf8:	591b      	ldr	r3, [r3, r4]
1000abfa:	2b00      	cmp	r3, #0
1000abfc:	d001      	beq.n	1000ac02 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000abfe:	0028      	movs	r0, r5
1000ac00:	4798      	blx	r3
1000ac02:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ac04:	2e14      	cmp	r6, #20
1000ac06:	d1f4      	bne.n	1000abf2 <ble_event_manager+0x16>
1000ac08:	e065      	b.n	1000acd6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac0a:	3813      	subs	r0, #19
1000ac0c:	b2c4      	uxtb	r4, r0
1000ac0e:	00a4      	lsls	r4, r4, #2
1000ac10:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ac12:	4f33      	ldr	r7, [pc, #204]	; (1000ace0 <ble_event_manager+0x104>)
1000ac14:	59bb      	ldr	r3, [r7, r6]
1000ac16:	2b00      	cmp	r3, #0
1000ac18:	d004      	beq.n	1000ac24 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac1a:	591b      	ldr	r3, [r3, r4]
1000ac1c:	2b00      	cmp	r3, #0
1000ac1e:	d001      	beq.n	1000ac24 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000ac20:	0028      	movs	r0, r5
1000ac22:	4798      	blx	r3
1000ac24:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ac26:	2e14      	cmp	r6, #20
1000ac28:	d1f4      	bne.n	1000ac14 <ble_event_manager+0x38>
1000ac2a:	e054      	b.n	1000acd6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac2c:	381d      	subs	r0, #29
1000ac2e:	b2c4      	uxtb	r4, r0
1000ac30:	00a4      	lsls	r4, r4, #2
1000ac32:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ac34:	4f2b      	ldr	r7, [pc, #172]	; (1000ace4 <ble_event_manager+0x108>)
1000ac36:	59bb      	ldr	r3, [r7, r6]
1000ac38:	2b00      	cmp	r3, #0
1000ac3a:	d004      	beq.n	1000ac46 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac3c:	591b      	ldr	r3, [r3, r4]
1000ac3e:	2b00      	cmp	r3, #0
1000ac40:	d001      	beq.n	1000ac46 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ac42:	0028      	movs	r0, r5
1000ac44:	4798      	blx	r3
1000ac46:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ac48:	2e14      	cmp	r6, #20
1000ac4a:	d1f4      	bne.n	1000ac36 <ble_event_manager+0x5a>
1000ac4c:	e043      	b.n	1000acd6 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ac4e:	3827      	subs	r0, #39	; 0x27
1000ac50:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ac52:	4b25      	ldr	r3, [pc, #148]	; (1000ace8 <ble_event_manager+0x10c>)
1000ac54:	681b      	ldr	r3, [r3, #0]
1000ac56:	2b00      	cmp	r3, #0
1000ac58:	d03d      	beq.n	1000acd6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac5a:	0080      	lsls	r0, r0, #2
1000ac5c:	58c3      	ldr	r3, [r0, r3]
1000ac5e:	2b00      	cmp	r3, #0
1000ac60:	d039      	beq.n	1000acd6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac62:	0008      	movs	r0, r1
1000ac64:	4798      	blx	r3
1000ac66:	e036      	b.n	1000acd6 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ac68:	382d      	subs	r0, #45	; 0x2d
1000ac6a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ac6c:	4b1f      	ldr	r3, [pc, #124]	; (1000acec <ble_event_manager+0x110>)
1000ac6e:	681b      	ldr	r3, [r3, #0]
1000ac70:	2b00      	cmp	r3, #0
1000ac72:	d030      	beq.n	1000acd6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac74:	0080      	lsls	r0, r0, #2
1000ac76:	58c3      	ldr	r3, [r0, r3]
1000ac78:	2b00      	cmp	r3, #0
1000ac7a:	d02c      	beq.n	1000acd6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac7c:	0008      	movs	r0, r1
1000ac7e:	4798      	blx	r3
1000ac80:	e029      	b.n	1000acd6 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac82:	3836      	subs	r0, #54	; 0x36
1000ac84:	b2c4      	uxtb	r4, r0
1000ac86:	00a4      	lsls	r4, r4, #2
1000ac88:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ac8a:	4f19      	ldr	r7, [pc, #100]	; (1000acf0 <ble_event_manager+0x114>)
1000ac8c:	59bb      	ldr	r3, [r7, r6]
1000ac8e:	2b00      	cmp	r3, #0
1000ac90:	d004      	beq.n	1000ac9c <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac92:	591b      	ldr	r3, [r3, r4]
1000ac94:	2b00      	cmp	r3, #0
1000ac96:	d001      	beq.n	1000ac9c <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000ac98:	0028      	movs	r0, r5
1000ac9a:	4798      	blx	r3
1000ac9c:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ac9e:	2e14      	cmp	r6, #20
1000aca0:	d1f4      	bne.n	1000ac8c <ble_event_manager+0xb0>
1000aca2:	e018      	b.n	1000acd6 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000aca4:	3838      	subs	r0, #56	; 0x38
1000aca6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000aca8:	4b12      	ldr	r3, [pc, #72]	; (1000acf4 <ble_event_manager+0x118>)
1000acaa:	681b      	ldr	r3, [r3, #0]
1000acac:	2b00      	cmp	r3, #0
1000acae:	d012      	beq.n	1000acd6 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000acb0:	0080      	lsls	r0, r0, #2
1000acb2:	58c3      	ldr	r3, [r0, r3]
1000acb4:	2b00      	cmp	r3, #0
1000acb6:	d00e      	beq.n	1000acd6 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000acb8:	0008      	movs	r0, r1
1000acba:	4798      	blx	r3
1000acbc:	e00b      	b.n	1000acd6 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000acbe:	4b0e      	ldr	r3, [pc, #56]	; (1000acf8 <ble_event_manager+0x11c>)
1000acc0:	681b      	ldr	r3, [r3, #0]
1000acc2:	2b00      	cmp	r3, #0
1000acc4:	d007      	beq.n	1000acd6 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000acc6:	4798      	blx	r3
1000acc8:	e005      	b.n	1000acd6 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000acca:	4d0c      	ldr	r5, [pc, #48]	; (1000acfc <ble_event_manager+0x120>)
1000accc:	0028      	movs	r0, r5
1000acce:	4c0c      	ldr	r4, [pc, #48]	; (1000ad00 <ble_event_manager+0x124>)
1000acd0:	47a0      	blx	r4
1000acd2:	0028      	movs	r0, r5
1000acd4:	47a0      	blx	r4
	}
	break;		
	}
}
1000acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000acd8:	10011960 	.word	0x10011960
1000acdc:	1001434c 	.word	0x1001434c
1000ace0:	10014360 	.word	0x10014360
1000ace4:	100140b4 	.word	0x100140b4
1000ace8:	100143a8 	.word	0x100143a8
1000acec:	100140b0 	.word	0x100140b0
1000acf0:	10014338 	.word	0x10014338
1000acf4:	100148ec 	.word	0x100148ec
1000acf8:	10012eb4 	.word	0x10012eb4
1000acfc:	10011a94 	.word	0x10011a94
1000ad00:	10010659 	.word	0x10010659

1000ad04 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ad04:	b510      	push	{r4, lr}
1000ad06:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000ad08:	4906      	ldr	r1, [pc, #24]	; (1000ad24 <ble_event_task+0x20>)
1000ad0a:	4807      	ldr	r0, [pc, #28]	; (1000ad28 <ble_event_task+0x24>)
1000ad0c:	4b07      	ldr	r3, [pc, #28]	; (1000ad2c <ble_event_task+0x28>)
1000ad0e:	4798      	blx	r3
1000ad10:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000ad12:	d104      	bne.n	1000ad1e <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000ad14:	4b04      	ldr	r3, [pc, #16]	; (1000ad28 <ble_event_task+0x24>)
1000ad16:	7818      	ldrb	r0, [r3, #0]
1000ad18:	4902      	ldr	r1, [pc, #8]	; (1000ad24 <ble_event_task+0x20>)
1000ad1a:	4b05      	ldr	r3, [pc, #20]	; (1000ad30 <ble_event_task+0x2c>)
1000ad1c:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000ad1e:	0020      	movs	r0, r4
1000ad20:	bd10      	pop	{r4, pc}
1000ad22:	46c0      	nop			; (mov r8, r8)
1000ad24:	100146e0 	.word	0x100146e0
1000ad28:	100143a4 	.word	0x100143a4
1000ad2c:	1000be41 	.word	0x1000be41
1000ad30:	1000abdd 	.word	0x1000abdd

1000ad34 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ad34:	b570      	push	{r4, r5, r6, lr}
1000ad36:	b090      	sub	sp, #64	; 0x40
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ad38:	ac08      	add	r4, sp, #32
1000ad3a:	230a      	movs	r3, #10
1000ad3c:	7023      	strb	r3, [r4, #0]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ad3e:	2609      	movs	r6, #9
1000ad40:	7066      	strb	r6, [r4, #1]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ad42:	2209      	movs	r2, #9
1000ad44:	4911      	ldr	r1, [pc, #68]	; (1000ad8c <ble_advertisement_data_set+0x58>)
1000ad46:	2022      	movs	r0, #34	; 0x22
1000ad48:	4468      	add	r0, sp
1000ad4a:	4d11      	ldr	r5, [pc, #68]	; (1000ad90 <ble_advertisement_data_set+0x5c>)
1000ad4c:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ad4e:	2300      	movs	r3, #0
1000ad50:	466a      	mov	r2, sp
1000ad52:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ad54:	3315      	adds	r3, #21
1000ad56:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ad58:	72e6      	strb	r6, [r4, #11]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ad5a:	33ea      	adds	r3, #234	; 0xea
1000ad5c:	7323      	strb	r3, [r4, #12]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ad5e:	2208      	movs	r2, #8
1000ad60:	490c      	ldr	r1, [pc, #48]	; (1000ad94 <ble_advertisement_data_set+0x60>)
1000ad62:	3110      	adds	r1, #16
1000ad64:	202d      	movs	r0, #45	; 0x2d
1000ad66:	4468      	add	r0, sp
1000ad68:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ad6a:	2300      	movs	r3, #0
1000ad6c:	466a      	mov	r2, sp
1000ad6e:	2115      	movs	r1, #21
1000ad70:	0020      	movs	r0, r4
1000ad72:	4c09      	ldr	r4, [pc, #36]	; (1000ad98 <ble_advertisement_data_set+0x64>)
1000ad74:	47a0      	blx	r4
1000ad76:	2800      	cmp	r0, #0
1000ad78:	d005      	beq.n	1000ad86 <ble_advertisement_data_set+0x52>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ad7a:	4808      	ldr	r0, [pc, #32]	; (1000ad9c <ble_advertisement_data_set+0x68>)
1000ad7c:	4b08      	ldr	r3, [pc, #32]	; (1000ada0 <ble_advertisement_data_set+0x6c>)
1000ad7e:	4798      	blx	r3
1000ad80:	4808      	ldr	r0, [pc, #32]	; (1000ada4 <ble_advertisement_data_set+0x70>)
1000ad82:	4b09      	ldr	r3, [pc, #36]	; (1000ada8 <ble_advertisement_data_set+0x74>)
1000ad84:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000ad86:	2000      	movs	r0, #0
1000ad88:	b010      	add	sp, #64	; 0x40
1000ad8a:	bd70      	pop	{r4, r5, r6, pc}
1000ad8c:	10011eb0 	.word	0x10011eb0
1000ad90:	10010517 	.word	0x10010517
1000ad94:	10011a50 	.word	0x10011a50
1000ad98:	1000c8a1 	.word	0x1000c8a1
1000ad9c:	10011a94 	.word	0x10011a94
1000ada0:	10010659 	.word	0x10010659
1000ada4:	10012088 	.word	0x10012088
1000ada8:	10010539 	.word	0x10010539

1000adac <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000adac:	4770      	bx	lr
1000adae:	46c0      	nop			; (mov r8, r8)

1000adb0 <hw_timer_init>:

void hw_timer_init(void)
{
1000adb0:	b500      	push	{lr}
1000adb2:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000adb4:	a801      	add	r0, sp, #4
1000adb6:	4b05      	ldr	r3, [pc, #20]	; (1000adcc <hw_timer_init+0x1c>)
1000adb8:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000adba:	4b05      	ldr	r3, [pc, #20]	; (1000add0 <hw_timer_init+0x20>)
1000adbc:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000adbe:	4b05      	ldr	r3, [pc, #20]	; (1000add4 <hw_timer_init+0x24>)
1000adc0:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000adc2:	a801      	add	r0, sp, #4
1000adc4:	4b04      	ldr	r3, [pc, #16]	; (1000add8 <hw_timer_init+0x28>)
1000adc6:	4798      	blx	r3
}
1000adc8:	b009      	add	sp, #36	; 0x24
1000adca:	bd00      	pop	{pc}
1000adcc:	10008abd 	.word	0x10008abd
1000add0:	018cba80 	.word	0x018cba80
1000add4:	03197500 	.word	0x03197500
1000add8:	10008b51 	.word	0x10008b51

1000addc <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000addc:	b510      	push	{r4, lr}
1000adde:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000ade0:	2000      	movs	r0, #0
1000ade2:	4c07      	ldr	r4, [pc, #28]	; (1000ae00 <hw_timer_register_callback+0x24>)
1000ade4:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000ade6:	4907      	ldr	r1, [pc, #28]	; (1000ae04 <hw_timer_register_callback+0x28>)
1000ade8:	2001      	movs	r0, #1
1000adea:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000adec:	2000      	movs	r0, #0
1000adee:	4c06      	ldr	r4, [pc, #24]	; (1000ae08 <hw_timer_register_callback+0x2c>)
1000adf0:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000adf2:	2001      	movs	r0, #1
1000adf4:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000adf6:	2280      	movs	r2, #128	; 0x80
1000adf8:	01d2      	lsls	r2, r2, #7
1000adfa:	4b04      	ldr	r3, [pc, #16]	; (1000ae0c <hw_timer_register_callback+0x30>)
1000adfc:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000adfe:	bd10      	pop	{r4, pc}
1000ae00:	10008c55 	.word	0x10008c55
1000ae04:	1000adad 	.word	0x1000adad
1000ae08:	10008b2d 	.word	0x10008b2d
1000ae0c:	e000e100 	.word	0xe000e100

1000ae10 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000ae10:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000ae12:	2800      	cmp	r0, #0
1000ae14:	d100      	bne.n	1000ae18 <hw_timer_start+0x8>
		delay = 1;
1000ae16:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000ae18:	4b05      	ldr	r3, [pc, #20]	; (1000ae30 <hw_timer_start+0x20>)
1000ae1a:	4343      	muls	r3, r0
1000ae1c:	001a      	movs	r2, r3
1000ae1e:	2100      	movs	r1, #0
1000ae20:	2000      	movs	r0, #0
1000ae22:	4b04      	ldr	r3, [pc, #16]	; (1000ae34 <hw_timer_start+0x24>)
1000ae24:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000ae26:	2000      	movs	r0, #0
1000ae28:	4b03      	ldr	r3, [pc, #12]	; (1000ae38 <hw_timer_start+0x28>)
1000ae2a:	4798      	blx	r3
}
1000ae2c:	bd10      	pop	{r4, pc}
1000ae2e:	46c0      	nop			; (mov r8, r8)
1000ae30:	018cba80 	.word	0x018cba80
1000ae34:	10008ae1 	.word	0x10008ae1
1000ae38:	10008b09 	.word	0x10008b09

1000ae3c <hw_timer_stop>:

void hw_timer_stop(void)
{
1000ae3c:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000ae3e:	2000      	movs	r0, #0
1000ae40:	4b01      	ldr	r3, [pc, #4]	; (1000ae48 <hw_timer_stop+0xc>)
1000ae42:	4798      	blx	r3
}
1000ae44:	bd10      	pop	{r4, pc}
1000ae46:	46c0      	nop			; (mov r8, r8)
1000ae48:	10008b2d 	.word	0x10008b2d

1000ae4c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ae4c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ae4e:	4b0e      	ldr	r3, [pc, #56]	; (1000ae88 <uart_read_complete_callback+0x3c>)
1000ae50:	781b      	ldrb	r3, [r3, #0]
1000ae52:	2b01      	cmp	r3, #1
1000ae54:	d10b      	bne.n	1000ae6e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ae56:	2202      	movs	r2, #2
1000ae58:	4b0b      	ldr	r3, [pc, #44]	; (1000ae88 <uart_read_complete_callback+0x3c>)
1000ae5a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ae5c:	4b0b      	ldr	r3, [pc, #44]	; (1000ae8c <uart_read_complete_callback+0x40>)
1000ae5e:	681b      	ldr	r3, [r3, #0]
1000ae60:	2b00      	cmp	r3, #0
1000ae62:	d110      	bne.n	1000ae86 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ae64:	2102      	movs	r1, #2
1000ae66:	480a      	ldr	r0, [pc, #40]	; (1000ae90 <uart_read_complete_callback+0x44>)
1000ae68:	4b0a      	ldr	r3, [pc, #40]	; (1000ae94 <uart_read_complete_callback+0x48>)
1000ae6a:	4798      	blx	r3
1000ae6c:	e00b      	b.n	1000ae86 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ae6e:	4b07      	ldr	r3, [pc, #28]	; (1000ae8c <uart_read_complete_callback+0x40>)
1000ae70:	681b      	ldr	r3, [r3, #0]
1000ae72:	2b00      	cmp	r3, #0
1000ae74:	d007      	beq.n	1000ae86 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ae76:	4c08      	ldr	r4, [pc, #32]	; (1000ae98 <uart_read_complete_callback+0x4c>)
1000ae78:	7820      	ldrb	r0, [r4, #0]
1000ae7a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ae7c:	2201      	movs	r2, #1
1000ae7e:	0021      	movs	r1, r4
1000ae80:	4803      	ldr	r0, [pc, #12]	; (1000ae90 <uart_read_complete_callback+0x44>)
1000ae82:	4b06      	ldr	r3, [pc, #24]	; (1000ae9c <uart_read_complete_callback+0x50>)
1000ae84:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ae86:	bd10      	pop	{r4, pc}
1000ae88:	10013ec8 	.word	0x10013ec8
1000ae8c:	10013ed0 	.word	0x10013ed0
1000ae90:	100148f0 	.word	0x100148f0
1000ae94:	10009aad 	.word	0x10009aad
1000ae98:	10013ecc 	.word	0x10013ecc
1000ae9c:	10009a51 	.word	0x10009a51

1000aea0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000aea0:	b570      	push	{r4, r5, r6, lr}
1000aea2:	0006      	movs	r6, r0
1000aea4:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000aea6:	4c03      	ldr	r4, [pc, #12]	; (1000aeb4 <usart_serial_getchar+0x14>)
1000aea8:	0029      	movs	r1, r5
1000aeaa:	0030      	movs	r0, r6
1000aeac:	47a0      	blx	r4
1000aeae:	2800      	cmp	r0, #0
1000aeb0:	d1fa      	bne.n	1000aea8 <usart_serial_getchar+0x8>
}
1000aeb2:	bd70      	pop	{r4, r5, r6, pc}
1000aeb4:	10009a3d 	.word	0x10009a3d

1000aeb8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000aeb8:	b570      	push	{r4, r5, r6, lr}
1000aeba:	0006      	movs	r6, r0
1000aebc:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000aebe:	4c03      	ldr	r4, [pc, #12]	; (1000aecc <usart_serial_putchar+0x14>)
1000aec0:	0029      	movs	r1, r5
1000aec2:	0030      	movs	r0, r6
1000aec4:	47a0      	blx	r4
1000aec6:	2800      	cmp	r0, #0
1000aec8:	d1fa      	bne.n	1000aec0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000aeca:	bd70      	pop	{r4, r5, r6, pc}
1000aecc:	10009a2d 	.word	0x10009a2d

1000aed0 <serial_console_init>:

void serial_console_init(void)
{
1000aed0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000aed2:	2100      	movs	r1, #0
1000aed4:	2000      	movs	r0, #0
1000aed6:	4b19      	ldr	r3, [pc, #100]	; (1000af3c <serial_console_init+0x6c>)
1000aed8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000aeda:	4c19      	ldr	r4, [pc, #100]	; (1000af40 <serial_console_init+0x70>)
1000aedc:	0020      	movs	r0, r4
1000aede:	4b19      	ldr	r3, [pc, #100]	; (1000af44 <serial_console_init+0x74>)
1000aee0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000aee2:	23e1      	movs	r3, #225	; 0xe1
1000aee4:	025b      	lsls	r3, r3, #9
1000aee6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000aee8:	2302      	movs	r3, #2
1000aeea:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000aeec:	2203      	movs	r2, #3
1000aeee:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000aef0:	3201      	adds	r2, #1
1000aef2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000aef4:	3201      	adds	r2, #1
1000aef6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000aef8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000aefa:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000aefc:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000aefe:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000af00:	4d11      	ldr	r5, [pc, #68]	; (1000af48 <serial_console_init+0x78>)
1000af02:	4b12      	ldr	r3, [pc, #72]	; (1000af4c <serial_console_init+0x7c>)
1000af04:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000af06:	4a12      	ldr	r2, [pc, #72]	; (1000af50 <serial_console_init+0x80>)
1000af08:	4b12      	ldr	r3, [pc, #72]	; (1000af54 <serial_console_init+0x84>)
1000af0a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000af0c:	4a12      	ldr	r2, [pc, #72]	; (1000af58 <serial_console_init+0x88>)
1000af0e:	4b13      	ldr	r3, [pc, #76]	; (1000af5c <serial_console_init+0x8c>)
1000af10:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000af12:	0022      	movs	r2, r4
1000af14:	4912      	ldr	r1, [pc, #72]	; (1000af60 <serial_console_init+0x90>)
1000af16:	0028      	movs	r0, r5
1000af18:	4b12      	ldr	r3, [pc, #72]	; (1000af64 <serial_console_init+0x94>)
1000af1a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000af1c:	4e12      	ldr	r6, [pc, #72]	; (1000af68 <serial_console_init+0x98>)
1000af1e:	6833      	ldr	r3, [r6, #0]
1000af20:	6898      	ldr	r0, [r3, #8]
1000af22:	2100      	movs	r1, #0
1000af24:	4c11      	ldr	r4, [pc, #68]	; (1000af6c <serial_console_init+0x9c>)
1000af26:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000af28:	6833      	ldr	r3, [r6, #0]
1000af2a:	6858      	ldr	r0, [r3, #4]
1000af2c:	2100      	movs	r1, #0
1000af2e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000af30:	2202      	movs	r2, #2
1000af32:	490f      	ldr	r1, [pc, #60]	; (1000af70 <serial_console_init+0xa0>)
1000af34:	0028      	movs	r0, r5
1000af36:	4b0f      	ldr	r3, [pc, #60]	; (1000af74 <serial_console_init+0xa4>)
1000af38:	4798      	blx	r3
}
1000af3a:	bd70      	pop	{r4, r5, r6, pc}
1000af3c:	10008db9 	.word	0x10008db9
1000af40:	10014914 	.word	0x10014914
1000af44:	10009845 	.word	0x10009845
1000af48:	100148f0 	.word	0x100148f0
1000af4c:	100140ac 	.word	0x100140ac
1000af50:	1000aeb9 	.word	0x1000aeb9
1000af54:	100140a8 	.word	0x100140a8
1000af58:	1000aea1 	.word	0x1000aea1
1000af5c:	100140a4 	.word	0x100140a4
1000af60:	40004000 	.word	0x40004000
1000af64:	10009871 	.word	0x10009871
1000af68:	10012590 	.word	0x10012590
1000af6c:	100106e5 	.word	0x100106e5
1000af70:	1000ae4d 	.word	0x1000ae4d
1000af74:	10009a79 	.word	0x10009a79

1000af78 <_time_start>:

void _time_start(unsigned int sec)
{
1000af78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af7a:	b083      	sub	sp, #12
1000af7c:	0005      	movs	r5, r0
	system_clock_get_value();
1000af7e:	4c0d      	ldr	r4, [pc, #52]	; (1000afb4 <_time_start+0x3c>)
1000af80:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000af82:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000af84:	4f0c      	ldr	r7, [pc, #48]	; (1000afb8 <_time_start+0x40>)
1000af86:	47b8      	blx	r7
1000af88:	4e0c      	ldr	r6, [pc, #48]	; (1000afbc <_time_start+0x44>)
1000af8a:	4a0d      	ldr	r2, [pc, #52]	; (1000afc0 <_time_start+0x48>)
1000af8c:	4b0d      	ldr	r3, [pc, #52]	; (1000afc4 <_time_start+0x4c>)
1000af8e:	47b0      	blx	r6
1000af90:	9000      	str	r0, [sp, #0]
1000af92:	9101      	str	r1, [sp, #4]
1000af94:	20fa      	movs	r0, #250	; 0xfa
1000af96:	0080      	lsls	r0, r0, #2
1000af98:	4368      	muls	r0, r5
1000af9a:	47b8      	blx	r7
1000af9c:	0002      	movs	r2, r0
1000af9e:	000b      	movs	r3, r1
1000afa0:	9800      	ldr	r0, [sp, #0]
1000afa2:	9901      	ldr	r1, [sp, #4]
1000afa4:	47b0      	blx	r6
1000afa6:	4b08      	ldr	r3, [pc, #32]	; (1000afc8 <_time_start+0x50>)
1000afa8:	4798      	blx	r3
1000afaa:	4b08      	ldr	r3, [pc, #32]	; (1000afcc <_time_start+0x54>)
1000afac:	6018      	str	r0, [r3, #0]
}
1000afae:	b003      	add	sp, #12
1000afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afb2:	46c0      	nop			; (mov r8, r8)
1000afb4:	10008e3d 	.word	0x10008e3d
1000afb8:	1000fe7d 	.word	0x1000fe7d
1000afbc:	1000f1f1 	.word	0x1000f1f1
1000afc0:	19feaec7 	.word	0x19feaec7
1000afc4:	3f09d8ef 	.word	0x3f09d8ef
1000afc8:	1000ec3d 	.word	0x1000ec3d
1000afcc:	10013ec4 	.word	0x10013ec4

1000afd0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000afd0:	4b02      	ldr	r3, [pc, #8]	; (1000afdc <_time_done+0xc>)
1000afd2:	681a      	ldr	r2, [r3, #0]
1000afd4:	1e50      	subs	r0, r2, #1
1000afd6:	6018      	str	r0, [r3, #0]
}
1000afd8:	4770      	bx	lr
1000afda:	46c0      	nop			; (mov r8, r8)
1000afdc:	10013ec4 	.word	0x10013ec4

1000afe0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000afe0:	b570      	push	{r4, r5, r6, lr}
1000afe2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000afe4:	2201      	movs	r2, #1
1000afe6:	4b11      	ldr	r3, [pc, #68]	; (1000b02c <getchar_b11_timeout+0x4c>)
1000afe8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000afea:	4b11      	ldr	r3, [pc, #68]	; (1000b030 <getchar_b11_timeout+0x50>)
1000afec:	681b      	ldr	r3, [r3, #0]
1000afee:	2b00      	cmp	r3, #0
1000aff0:	d103      	bne.n	1000affa <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000aff2:	2102      	movs	r1, #2
1000aff4:	480f      	ldr	r0, [pc, #60]	; (1000b034 <getchar_b11_timeout+0x54>)
1000aff6:	4b10      	ldr	r3, [pc, #64]	; (1000b038 <getchar_b11_timeout+0x58>)
1000aff8:	4798      	blx	r3

	_time_start(sec);
1000affa:	0020      	movs	r0, r4
1000affc:	4b0f      	ldr	r3, [pc, #60]	; (1000b03c <getchar_b11_timeout+0x5c>)
1000affe:	4798      	blx	r3
	
	string_input[0] = 0;
1000b000:	490f      	ldr	r1, [pc, #60]	; (1000b040 <getchar_b11_timeout+0x60>)
1000b002:	2300      	movs	r3, #0
1000b004:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b006:	2201      	movs	r2, #1
1000b008:	480a      	ldr	r0, [pc, #40]	; (1000b034 <getchar_b11_timeout+0x54>)
1000b00a:	4b0e      	ldr	r3, [pc, #56]	; (1000b044 <getchar_b11_timeout+0x64>)
1000b00c:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000b00e:	4c07      	ldr	r4, [pc, #28]	; (1000b02c <getchar_b11_timeout+0x4c>)
1000b010:	4d0d      	ldr	r5, [pc, #52]	; (1000b048 <getchar_b11_timeout+0x68>)
1000b012:	7823      	ldrb	r3, [r4, #0]
1000b014:	2b02      	cmp	r3, #2
1000b016:	d002      	beq.n	1000b01e <getchar_b11_timeout+0x3e>
1000b018:	47a8      	blx	r5
1000b01a:	2800      	cmp	r0, #0
1000b01c:	d1f9      	bne.n	1000b012 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000b01e:	2200      	movs	r2, #0
1000b020:	4b02      	ldr	r3, [pc, #8]	; (1000b02c <getchar_b11_timeout+0x4c>)
1000b022:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b024:	4b06      	ldr	r3, [pc, #24]	; (1000b040 <getchar_b11_timeout+0x60>)
1000b026:	7818      	ldrb	r0, [r3, #0]
}
1000b028:	bd70      	pop	{r4, r5, r6, pc}
1000b02a:	46c0      	nop			; (mov r8, r8)
1000b02c:	10013ec8 	.word	0x10013ec8
1000b030:	10013ed0 	.word	0x10013ed0
1000b034:	100148f0 	.word	0x100148f0
1000b038:	10009a8d 	.word	0x10009a8d
1000b03c:	1000af79 	.word	0x1000af79
1000b040:	10013ecc 	.word	0x10013ecc
1000b044:	10009a51 	.word	0x10009a51
1000b048:	1000afd1 	.word	0x1000afd1

1000b04c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b04c:	4b02      	ldr	r3, [pc, #8]	; (1000b058 <platform_event_free+0xc>)
1000b04e:	681a      	ldr	r2, [r3, #0]
1000b050:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b052:	6018      	str	r0, [r3, #0]
}
1000b054:	4770      	bx	lr
1000b056:	46c0      	nop			; (mov r8, r8)
1000b058:	10013ed8 	.word	0x10013ed8

1000b05c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b05c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b05e:	4b0b      	ldr	r3, [pc, #44]	; (1000b08c <platform_event_post+0x30>)
1000b060:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b062:	2c00      	cmp	r4, #0
1000b064:	d011      	beq.n	1000b08a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b066:	6825      	ldr	r5, [r4, #0]
1000b068:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b06a:	2300      	movs	r3, #0
1000b06c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b06e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b070:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b072:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b074:	4b06      	ldr	r3, [pc, #24]	; (1000b090 <platform_event_post+0x34>)
1000b076:	681a      	ldr	r2, [r3, #0]
1000b078:	2a00      	cmp	r2, #0
1000b07a:	d102      	bne.n	1000b082 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b07c:	601c      	str	r4, [r3, #0]
1000b07e:	e004      	b.n	1000b08a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b080:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b082:	6813      	ldr	r3, [r2, #0]
1000b084:	2b00      	cmp	r3, #0
1000b086:	d1fb      	bne.n	1000b080 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b088:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b08a:	bd30      	pop	{r4, r5, pc}
1000b08c:	10013ed8 	.word	0x10013ed8
1000b090:	10013ed4 	.word	0x10013ed4

1000b094 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b094:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b096:	2300      	movs	r3, #0
1000b098:	4a06      	ldr	r2, [pc, #24]	; (1000b0b4 <platform_event_init+0x20>)
1000b09a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b09c:	4a06      	ldr	r2, [pc, #24]	; (1000b0b8 <platform_event_init+0x24>)
1000b09e:	6013      	str	r3, [r2, #0]
1000b0a0:	4c06      	ldr	r4, [pc, #24]	; (1000b0bc <platform_event_init+0x28>)
1000b0a2:	0026      	movs	r6, r4
1000b0a4:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b0a6:	4d06      	ldr	r5, [pc, #24]	; (1000b0c0 <platform_event_init+0x2c>)
1000b0a8:	0020      	movs	r0, r4
1000b0aa:	47a8      	blx	r5
1000b0ac:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b0ae:	42b4      	cmp	r4, r6
1000b0b0:	d1fa      	bne.n	1000b0a8 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b0b2:	bd70      	pop	{r4, r5, r6, pc}
1000b0b4:	10013ed8 	.word	0x10013ed8
1000b0b8:	10013ed4 	.word	0x10013ed4
1000b0bc:	10013edc 	.word	0x10013edc
1000b0c0:	1000b04d 	.word	0x1000b04d

1000b0c4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b0c4:	b570      	push	{r4, r5, r6, lr}
1000b0c6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b0c8:	4b13      	ldr	r3, [pc, #76]	; (1000b118 <at_ke_msg_send+0x54>)
1000b0ca:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b0cc:	4b13      	ldr	r3, [pc, #76]	; (1000b11c <at_ke_msg_send+0x58>)
1000b0ce:	681b      	ldr	r3, [r3, #0]
1000b0d0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b0d2:	2c0c      	cmp	r4, #12
1000b0d4:	d01f      	beq.n	1000b116 <at_ke_msg_send+0x52>
1000b0d6:	3c0c      	subs	r4, #12
1000b0d8:	88e3      	ldrh	r3, [r4, #6]
1000b0da:	2b05      	cmp	r3, #5
1000b0dc:	d01b      	beq.n	1000b116 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b0de:	07eb      	lsls	r3, r5, #31
1000b0e0:	d414      	bmi.n	1000b10c <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b0e2:	4b0f      	ldr	r3, [pc, #60]	; (1000b120 <at_ke_msg_send+0x5c>)
1000b0e4:	681b      	ldr	r3, [r3, #0]
1000b0e6:	2002      	movs	r0, #2
1000b0e8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b0ea:	4b0e      	ldr	r3, [pc, #56]	; (1000b124 <at_ke_msg_send+0x60>)
1000b0ec:	681b      	ldr	r3, [r3, #0]
1000b0ee:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b0f0:	4c0d      	ldr	r4, [pc, #52]	; (1000b128 <at_ke_msg_send+0x64>)
1000b0f2:	2003      	movs	r0, #3
1000b0f4:	6823      	ldr	r3, [r4, #0]
1000b0f6:	4798      	blx	r3
1000b0f8:	2800      	cmp	r0, #0
1000b0fa:	d1fa      	bne.n	1000b0f2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b0fc:	4b0b      	ldr	r3, [pc, #44]	; (1000b12c <at_ke_msg_send+0x68>)
1000b0fe:	681b      	ldr	r3, [r3, #0]
1000b100:	3002      	adds	r0, #2
1000b102:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b104:	2201      	movs	r2, #1
1000b106:	4b0a      	ldr	r3, [pc, #40]	; (1000b130 <at_ke_msg_send+0x6c>)
1000b108:	601a      	str	r2, [r3, #0]
1000b10a:	e004      	b.n	1000b116 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b10c:	4b09      	ldr	r3, [pc, #36]	; (1000b134 <at_ke_msg_send+0x70>)
1000b10e:	6818      	ldr	r0, [r3, #0]
1000b110:	4b09      	ldr	r3, [pc, #36]	; (1000b138 <at_ke_msg_send+0x74>)
1000b112:	681b      	ldr	r3, [r3, #0]
1000b114:	4798      	blx	r3
		}
	}
}
1000b116:	bd70      	pop	{r4, r5, r6, pc}
1000b118:	4000b1ec 	.word	0x4000b1ec
1000b11c:	10013f84 	.word	0x10013f84
1000b120:	10013f7c 	.word	0x10013f7c
1000b124:	10013f90 	.word	0x10013f90
1000b128:	10013f68 	.word	0x10013f68
1000b12c:	10013f70 	.word	0x10013f70
1000b130:	4000b020 	.word	0x4000b020
1000b134:	10013f74 	.word	0x10013f74
1000b138:	10013f64 	.word	0x10013f64

1000b13c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b13c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b13e:	4b06      	ldr	r3, [pc, #24]	; (1000b158 <samb11_plf_resume_callback+0x1c>)
1000b140:	4a06      	ldr	r2, [pc, #24]	; (1000b15c <samb11_plf_resume_callback+0x20>)
1000b142:	6819      	ldr	r1, [r3, #0]
1000b144:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b146:	685a      	ldr	r2, [r3, #4]
1000b148:	4b05      	ldr	r3, [pc, #20]	; (1000b160 <samb11_plf_resume_callback+0x24>)
1000b14a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b14c:	4b05      	ldr	r3, [pc, #20]	; (1000b164 <samb11_plf_resume_callback+0x28>)
1000b14e:	681b      	ldr	r3, [r3, #0]
1000b150:	2b00      	cmp	r3, #0
1000b152:	d000      	beq.n	1000b156 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b154:	4798      	blx	r3
	}
}
1000b156:	bd10      	pop	{r4, pc}
1000b158:	1001493c 	.word	0x1001493c
1000b15c:	4000b00c 	.word	0x4000b00c
1000b160:	4000b010 	.word	0x4000b010
1000b164:	10014c18 	.word	0x10014c18

1000b168 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b168:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b16a:	2232      	movs	r2, #50	; 0x32
1000b16c:	2100      	movs	r1, #0
1000b16e:	480d      	ldr	r0, [pc, #52]	; (1000b1a4 <init_port_list+0x3c>)
1000b170:	4b0d      	ldr	r3, [pc, #52]	; (1000b1a8 <init_port_list+0x40>)
1000b172:	4798      	blx	r3
1000b174:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b176:	480b      	ldr	r0, [pc, #44]	; (1000b1a4 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b178:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b17a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b17c:	004a      	lsls	r2, r1, #1
1000b17e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b180:	1882      	adds	r2, r0, r2
1000b182:	7853      	ldrb	r3, [r2, #1]
1000b184:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b186:	b2db      	uxtb	r3, r3
1000b188:	43a3      	bics	r3, r4
1000b18a:	7053      	strb	r3, [r2, #1]
1000b18c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b18e:	2919      	cmp	r1, #25
1000b190:	d1f4      	bne.n	1000b17c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b192:	4b04      	ldr	r3, [pc, #16]	; (1000b1a4 <init_port_list+0x3c>)
1000b194:	785a      	ldrb	r2, [r3, #1]
1000b196:	3918      	subs	r1, #24
1000b198:	438a      	bics	r2, r1
1000b19a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b19c:	78da      	ldrb	r2, [r3, #3]
1000b19e:	438a      	bics	r2, r1
1000b1a0:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b1a2:	bd70      	pop	{r4, r5, r6, pc}
1000b1a4:	10014958 	.word	0x10014958
1000b1a8:	10010529 	.word	0x10010529

1000b1ac <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b1ac:	4a06      	ldr	r2, [pc, #24]	; (1000b1c8 <init_clock+0x1c>)
1000b1ae:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b1b0:	4b06      	ldr	r3, [pc, #24]	; (1000b1cc <init_clock+0x20>)
1000b1b2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b1b4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b1b6:	4a06      	ldr	r2, [pc, #24]	; (1000b1d0 <init_clock+0x24>)
1000b1b8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b1ba:	4906      	ldr	r1, [pc, #24]	; (1000b1d4 <init_clock+0x28>)
1000b1bc:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b1be:	4b06      	ldr	r3, [pc, #24]	; (1000b1d8 <init_clock+0x2c>)
1000b1c0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b1c2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b1c4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b1c6:	4770      	bx	lr
1000b1c8:	4000b00c 	.word	0x4000b00c
1000b1cc:	fffe0fd3 	.word	0xfffe0fd3
1000b1d0:	1001493c 	.word	0x1001493c
1000b1d4:	4000b010 	.word	0x4000b010
1000b1d8:	ffffe7c0 	.word	0xffffe7c0

1000b1dc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1de:	4657      	mov	r7, sl
1000b1e0:	464e      	mov	r6, r9
1000b1e2:	4645      	mov	r5, r8
1000b1e4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b1e6:	4b4f      	ldr	r3, [pc, #316]	; (1000b324 <platform_driver_init+0x148>)
1000b1e8:	781b      	ldrb	r3, [r3, #0]
1000b1ea:	2b00      	cmp	r3, #0
1000b1ec:	d004      	beq.n	1000b1f8 <platform_driver_init+0x1c>
1000b1ee:	4b4d      	ldr	r3, [pc, #308]	; (1000b324 <platform_driver_init+0x148>)
1000b1f0:	781b      	ldrb	r3, [r3, #0]
1000b1f2:	2b01      	cmp	r3, #1
1000b1f4:	d100      	bne.n	1000b1f8 <platform_driver_init+0x1c>
1000b1f6:	e08c      	b.n	1000b312 <platform_driver_init+0x136>
		init_port_list();
1000b1f8:	4b4b      	ldr	r3, [pc, #300]	; (1000b328 <platform_driver_init+0x14c>)
1000b1fa:	4798      	blx	r3
		init_clock();
1000b1fc:	4b4b      	ldr	r3, [pc, #300]	; (1000b32c <platform_driver_init+0x150>)
1000b1fe:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b200:	2300      	movs	r3, #0
1000b202:	4698      	mov	r8, r3
1000b204:	4b4a      	ldr	r3, [pc, #296]	; (1000b330 <platform_driver_init+0x154>)
1000b206:	4642      	mov	r2, r8
1000b208:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b20a:	4c4a      	ldr	r4, [pc, #296]	; (1000b334 <platform_driver_init+0x158>)
1000b20c:	2380      	movs	r3, #128	; 0x80
1000b20e:	2280      	movs	r2, #128	; 0x80
1000b210:	0412      	lsls	r2, r2, #16
1000b212:	4692      	mov	sl, r2
1000b214:	50e2      	str	r2, [r4, r3]
1000b216:	2280      	movs	r2, #128	; 0x80
1000b218:	0452      	lsls	r2, r2, #17
1000b21a:	4691      	mov	r9, r2
1000b21c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b21e:	4d46      	ldr	r5, [pc, #280]	; (1000b338 <platform_driver_init+0x15c>)
1000b220:	4b46      	ldr	r3, [pc, #280]	; (1000b33c <platform_driver_init+0x160>)
1000b222:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b224:	4b46      	ldr	r3, [pc, #280]	; (1000b340 <platform_driver_init+0x164>)
1000b226:	4a47      	ldr	r2, [pc, #284]	; (1000b344 <platform_driver_init+0x168>)
1000b228:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b22a:	4947      	ldr	r1, [pc, #284]	; (1000b348 <platform_driver_init+0x16c>)
1000b22c:	4a47      	ldr	r2, [pc, #284]	; (1000b34c <platform_driver_init+0x170>)
1000b22e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b230:	4a47      	ldr	r2, [pc, #284]	; (1000b350 <platform_driver_init+0x174>)
1000b232:	6811      	ldr	r1, [r2, #0]
1000b234:	4a47      	ldr	r2, [pc, #284]	; (1000b354 <platform_driver_init+0x178>)
1000b236:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b238:	4a47      	ldr	r2, [pc, #284]	; (1000b358 <platform_driver_init+0x17c>)
1000b23a:	6811      	ldr	r1, [r2, #0]
1000b23c:	4a47      	ldr	r2, [pc, #284]	; (1000b35c <platform_driver_init+0x180>)
1000b23e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b240:	4947      	ldr	r1, [pc, #284]	; (1000b360 <platform_driver_init+0x184>)
1000b242:	4a48      	ldr	r2, [pc, #288]	; (1000b364 <platform_driver_init+0x188>)
1000b244:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b246:	4948      	ldr	r1, [pc, #288]	; (1000b368 <platform_driver_init+0x18c>)
1000b248:	4a48      	ldr	r2, [pc, #288]	; (1000b36c <platform_driver_init+0x190>)
1000b24a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b24c:	4f48      	ldr	r7, [pc, #288]	; (1000b370 <platform_driver_init+0x194>)
1000b24e:	4a49      	ldr	r2, [pc, #292]	; (1000b374 <platform_driver_init+0x198>)
1000b250:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b252:	4949      	ldr	r1, [pc, #292]	; (1000b378 <platform_driver_init+0x19c>)
1000b254:	4a49      	ldr	r2, [pc, #292]	; (1000b37c <platform_driver_init+0x1a0>)
1000b256:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b258:	4949      	ldr	r1, [pc, #292]	; (1000b380 <platform_driver_init+0x1a4>)
1000b25a:	4a4a      	ldr	r2, [pc, #296]	; (1000b384 <platform_driver_init+0x1a8>)
1000b25c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b25e:	4e4a      	ldr	r6, [pc, #296]	; (1000b388 <platform_driver_init+0x1ac>)
1000b260:	4a4a      	ldr	r2, [pc, #296]	; (1000b38c <platform_driver_init+0x1b0>)
1000b262:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b264:	494a      	ldr	r1, [pc, #296]	; (1000b390 <platform_driver_init+0x1b4>)
1000b266:	4a4b      	ldr	r2, [pc, #300]	; (1000b394 <platform_driver_init+0x1b8>)
1000b268:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b26a:	494b      	ldr	r1, [pc, #300]	; (1000b398 <platform_driver_init+0x1bc>)
1000b26c:	4a4b      	ldr	r2, [pc, #300]	; (1000b39c <platform_driver_init+0x1c0>)
1000b26e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b270:	494b      	ldr	r1, [pc, #300]	; (1000b3a0 <platform_driver_init+0x1c4>)
1000b272:	4a4c      	ldr	r2, [pc, #304]	; (1000b3a4 <platform_driver_init+0x1c8>)
1000b274:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b276:	494c      	ldr	r1, [pc, #304]	; (1000b3a8 <platform_driver_init+0x1cc>)
1000b278:	4a4c      	ldr	r2, [pc, #304]	; (1000b3ac <platform_driver_init+0x1d0>)
1000b27a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b27c:	494c      	ldr	r1, [pc, #304]	; (1000b3b0 <platform_driver_init+0x1d4>)
1000b27e:	4a4d      	ldr	r2, [pc, #308]	; (1000b3b4 <platform_driver_init+0x1d8>)
1000b280:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b282:	2028      	movs	r0, #40	; 0x28
1000b284:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b286:	494c      	ldr	r1, [pc, #304]	; (1000b3b8 <platform_driver_init+0x1dc>)
1000b288:	2028      	movs	r0, #40	; 0x28
1000b28a:	682b      	ldr	r3, [r5, #0]
1000b28c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b28e:	682b      	ldr	r3, [r5, #0]
1000b290:	494a      	ldr	r1, [pc, #296]	; (1000b3bc <platform_driver_init+0x1e0>)
1000b292:	2027      	movs	r0, #39	; 0x27
1000b294:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b296:	4b4a      	ldr	r3, [pc, #296]	; (1000b3c0 <platform_driver_init+0x1e4>)
1000b298:	681a      	ldr	r2, [r3, #0]
1000b29a:	4b4a      	ldr	r3, [pc, #296]	; (1000b3c4 <platform_driver_init+0x1e8>)
1000b29c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b29e:	4a4a      	ldr	r2, [pc, #296]	; (1000b3c8 <platform_driver_init+0x1ec>)
1000b2a0:	4b4a      	ldr	r3, [pc, #296]	; (1000b3cc <platform_driver_init+0x1f0>)
1000b2a2:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b2a4:	4a4a      	ldr	r2, [pc, #296]	; (1000b3d0 <platform_driver_init+0x1f4>)
1000b2a6:	4b4b      	ldr	r3, [pc, #300]	; (1000b3d4 <platform_driver_init+0x1f8>)
1000b2a8:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b2aa:	4a4b      	ldr	r2, [pc, #300]	; (1000b3d8 <platform_driver_init+0x1fc>)
1000b2ac:	4b4b      	ldr	r3, [pc, #300]	; (1000b3dc <platform_driver_init+0x200>)
1000b2ae:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b2b0:	4a4b      	ldr	r2, [pc, #300]	; (1000b3e0 <platform_driver_init+0x204>)
1000b2b2:	4b4c      	ldr	r3, [pc, #304]	; (1000b3e4 <platform_driver_init+0x208>)
1000b2b4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b2b6:	4a4c      	ldr	r2, [pc, #304]	; (1000b3e8 <platform_driver_init+0x20c>)
1000b2b8:	4b4c      	ldr	r3, [pc, #304]	; (1000b3ec <platform_driver_init+0x210>)
1000b2ba:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b2bc:	4a4c      	ldr	r2, [pc, #304]	; (1000b3f0 <platform_driver_init+0x214>)
1000b2be:	4b4d      	ldr	r3, [pc, #308]	; (1000b3f4 <platform_driver_init+0x218>)
1000b2c0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b2c2:	4a4d      	ldr	r2, [pc, #308]	; (1000b3f8 <platform_driver_init+0x21c>)
1000b2c4:	4b4d      	ldr	r3, [pc, #308]	; (1000b3fc <platform_driver_init+0x220>)
1000b2c6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b2c8:	22a0      	movs	r2, #160	; 0xa0
1000b2ca:	0092      	lsls	r2, r2, #2
1000b2cc:	2100      	movs	r1, #0
1000b2ce:	484c      	ldr	r0, [pc, #304]	; (1000b400 <platform_driver_init+0x224>)
1000b2d0:	4b4c      	ldr	r3, [pc, #304]	; (1000b404 <platform_driver_init+0x228>)
1000b2d2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b2d4:	2280      	movs	r2, #128	; 0x80
1000b2d6:	0092      	lsls	r2, r2, #2
1000b2d8:	4b4b      	ldr	r3, [pc, #300]	; (1000b408 <platform_driver_init+0x22c>)
1000b2da:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b2dc:	4b4b      	ldr	r3, [pc, #300]	; (1000b40c <platform_driver_init+0x230>)
1000b2de:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b2e0:	4653      	mov	r3, sl
1000b2e2:	6023      	str	r3, [r4, #0]
1000b2e4:	464b      	mov	r3, r9
1000b2e6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b2e8:	4b49      	ldr	r3, [pc, #292]	; (1000b410 <platform_driver_init+0x234>)
1000b2ea:	4642      	mov	r2, r8
1000b2ec:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b2ee:	683b      	ldr	r3, [r7, #0]
1000b2f0:	4a48      	ldr	r2, [pc, #288]	; (1000b414 <platform_driver_init+0x238>)
1000b2f2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b2f4:	6833      	ldr	r3, [r6, #0]
1000b2f6:	4a48      	ldr	r2, [pc, #288]	; (1000b418 <platform_driver_init+0x23c>)
1000b2f8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b2fa:	2000      	movs	r0, #0
1000b2fc:	4c47      	ldr	r4, [pc, #284]	; (1000b41c <platform_driver_init+0x240>)
1000b2fe:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b300:	2001      	movs	r0, #1
1000b302:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b304:	2002      	movs	r0, #2
1000b306:	47a0      	blx	r4
		platform_initialized = 1;
1000b308:	2201      	movs	r2, #1
1000b30a:	4b06      	ldr	r3, [pc, #24]	; (1000b324 <platform_driver_init+0x148>)
1000b30c:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b30e:	2000      	movs	r0, #0
1000b310:	e003      	b.n	1000b31a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b312:	2201      	movs	r2, #1
1000b314:	4b03      	ldr	r3, [pc, #12]	; (1000b324 <platform_driver_init+0x148>)
1000b316:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b318:	2001      	movs	r0, #1
	}
	return status;
}
1000b31a:	bc1c      	pop	{r2, r3, r4}
1000b31c:	4690      	mov	r8, r2
1000b31e:	4699      	mov	r9, r3
1000b320:	46a2      	mov	sl, r4
1000b322:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b324:	10013f6c 	.word	0x10013f6c
1000b328:	1000b169 	.word	0x1000b169
1000b32c:	1000b1ad 	.word	0x1000b1ad
1000b330:	10013f8c 	.word	0x10013f8c
1000b334:	e000e100 	.word	0xe000e100
1000b338:	10014c0c 	.word	0x10014c0c
1000b33c:	000007d7 	.word	0x000007d7
1000b340:	000007bd 	.word	0x000007bd
1000b344:	10014948 	.word	0x10014948
1000b348:	0001bc51 	.word	0x0001bc51
1000b34c:	10014c10 	.word	0x10014c10
1000b350:	100400bc 	.word	0x100400bc
1000b354:	10013f5c 	.word	0x10013f5c
1000b358:	100400b8 	.word	0x100400b8
1000b35c:	10013f58 	.word	0x10013f58
1000b360:	0001b99f 	.word	0x0001b99f
1000b364:	10014944 	.word	0x10014944
1000b368:	0001b9db 	.word	0x0001b9db
1000b36c:	10014950 	.word	0x10014950
1000b370:	10014c20 	.word	0x10014c20
1000b374:	1004003c 	.word	0x1004003c
1000b378:	10041fc0 	.word	0x10041fc0
1000b37c:	10014954 	.word	0x10014954
1000b380:	10041fc4 	.word	0x10041fc4
1000b384:	10014c1c 	.word	0x10014c1c
1000b388:	10014c14 	.word	0x10014c14
1000b38c:	10041fd4 	.word	0x10041fd4
1000b390:	10041fd8 	.word	0x10041fd8
1000b394:	1001494c 	.word	0x1001494c
1000b398:	0001cbe9 	.word	0x0001cbe9
1000b39c:	10013f7c 	.word	0x10013f7c
1000b3a0:	0001cd8f 	.word	0x0001cd8f
1000b3a4:	10013f70 	.word	0x10013f70
1000b3a8:	0001cea3 	.word	0x0001cea3
1000b3ac:	10013f90 	.word	0x10013f90
1000b3b0:	0001cbcf 	.word	0x0001cbcf
1000b3b4:	10013f68 	.word	0x10013f68
1000b3b8:	1000b7f5 	.word	0x1000b7f5
1000b3bc:	1000b789 	.word	0x1000b789
1000b3c0:	100400e4 	.word	0x100400e4
1000b3c4:	10013f84 	.word	0x10013f84
1000b3c8:	00019fe9 	.word	0x00019fe9
1000b3cc:	10013f94 	.word	0x10013f94
1000b3d0:	0001dbdd 	.word	0x0001dbdd
1000b3d4:	10013f64 	.word	0x10013f64
1000b3d8:	0001dc5b 	.word	0x0001dc5b
1000b3dc:	10013f78 	.word	0x10013f78
1000b3e0:	100405ec 	.word	0x100405ec
1000b3e4:	10013f74 	.word	0x10013f74
1000b3e8:	0001d5e3 	.word	0x0001d5e3
1000b3ec:	10013f80 	.word	0x10013f80
1000b3f0:	10040c20 	.word	0x10040c20
1000b3f4:	10013f98 	.word	0x10013f98
1000b3f8:	00019f09 	.word	0x00019f09
1000b3fc:	10013f54 	.word	0x10013f54
1000b400:	1001498c 	.word	0x1001498c
1000b404:	10010529 	.word	0x10010529
1000b408:	10014c24 	.word	0x10014c24
1000b40c:	1000b095 	.word	0x1000b095
1000b410:	10014c18 	.word	0x10014c18
1000b414:	1000b13d 	.word	0x1000b13d
1000b418:	1000b851 	.word	0x1000b851
1000b41c:	1000b839 	.word	0x1000b839

1000b420 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b420:	4b04      	ldr	r3, [pc, #16]	; (1000b434 <platform_register_ble_msg_handler+0x14>)
1000b422:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b424:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b426:	2a01      	cmp	r2, #1
1000b428:	d102      	bne.n	1000b430 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b42a:	4b03      	ldr	r3, [pc, #12]	; (1000b438 <platform_register_ble_msg_handler+0x18>)
1000b42c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b42e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b430:	0018      	movs	r0, r3
1000b432:	4770      	bx	lr
1000b434:	10013f6c 	.word	0x10013f6c
1000b438:	10013f8c 	.word	0x10013f8c

1000b43c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b43c:	b570      	push	{r4, r5, r6, lr}
1000b43e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b440:	4b0e      	ldr	r3, [pc, #56]	; (1000b47c <platform_interface_send+0x40>)
1000b442:	681b      	ldr	r3, [r3, #0]
1000b444:	2b00      	cmp	r3, #0
1000b446:	d002      	beq.n	1000b44e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b448:	8840      	ldrh	r0, [r0, #2]
1000b44a:	4798      	blx	r3
1000b44c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b44e:	88e3      	ldrh	r3, [r4, #6]
1000b450:	88a2      	ldrh	r2, [r4, #4]
1000b452:	8861      	ldrh	r1, [r4, #2]
1000b454:	8820      	ldrh	r0, [r4, #0]
1000b456:	4d0a      	ldr	r5, [pc, #40]	; (1000b480 <platform_interface_send+0x44>)
1000b458:	682d      	ldr	r5, [r5, #0]
1000b45a:	47a8      	blx	r5
1000b45c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b45e:	88e2      	ldrh	r2, [r4, #6]
1000b460:	2a00      	cmp	r2, #0
1000b462:	d102      	bne.n	1000b46a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b464:	4b07      	ldr	r3, [pc, #28]	; (1000b484 <platform_interface_send+0x48>)
1000b466:	4798      	blx	r3
1000b468:	e006      	b.n	1000b478 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b46a:	0021      	movs	r1, r4
1000b46c:	3108      	adds	r1, #8
1000b46e:	4b06      	ldr	r3, [pc, #24]	; (1000b488 <platform_interface_send+0x4c>)
1000b470:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b472:	0028      	movs	r0, r5
1000b474:	4b03      	ldr	r3, [pc, #12]	; (1000b484 <platform_interface_send+0x48>)
1000b476:	4798      	blx	r3
	}
}
1000b478:	bd70      	pop	{r4, r5, r6, pc}
1000b47a:	46c0      	nop			; (mov r8, r8)
1000b47c:	10013f5c 	.word	0x10013f5c
1000b480:	10013f94 	.word	0x10013f94
1000b484:	1000b0c5 	.word	0x1000b0c5
1000b488:	10010517 	.word	0x10010517

1000b48c <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b48c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b48e:	465f      	mov	r7, fp
1000b490:	4656      	mov	r6, sl
1000b492:	464d      	mov	r5, r9
1000b494:	4644      	mov	r4, r8
1000b496:	b4f0      	push	{r4, r5, r6, r7}
1000b498:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b49a:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b49c:	2300      	movs	r3, #0
1000b49e:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b4a0:	1ce3      	adds	r3, r4, #3
1000b4a2:	d81c      	bhi.n	1000b4de <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b4a4:	220d      	movs	r2, #13
1000b4a6:	2100      	movs	r1, #0
1000b4a8:	a802      	add	r0, sp, #8
1000b4aa:	4b82      	ldr	r3, [pc, #520]	; (1000b6b4 <platform_event_wait+0x228>)
1000b4ac:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b4ae:	2333      	movs	r3, #51	; 0x33
1000b4b0:	aa02      	add	r2, sp, #8
1000b4b2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b4b4:	3b30      	subs	r3, #48	; 0x30
1000b4b6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b4b8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b4ba:	3302      	adds	r3, #2
1000b4bc:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b4be:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b4c0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b4c2:	0a23      	lsrs	r3, r4, #8
1000b4c4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b4c6:	0c23      	lsrs	r3, r4, #16
1000b4c8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b4ca:	0e24      	lsrs	r4, r4, #24
1000b4cc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b4ce:	2301      	movs	r3, #1
1000b4d0:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b4d2:	210d      	movs	r1, #13
1000b4d4:	0010      	movs	r0, r2
1000b4d6:	4b78      	ldr	r3, [pc, #480]	; (1000b6b8 <platform_event_wait+0x22c>)
1000b4d8:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b4da:	2301      	movs	r3, #1
1000b4dc:	4699      	mov	r9, r3
1000b4de:	2400      	movs	r4, #0
1000b4e0:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b4e2:	4f76      	ldr	r7, [pc, #472]	; (1000b6bc <platform_event_wait+0x230>)
1000b4e4:	4e76      	ldr	r6, [pc, #472]	; (1000b6c0 <platform_event_wait+0x234>)
1000b4e6:	4977      	ldr	r1, [pc, #476]	; (1000b6c4 <platform_event_wait+0x238>)
1000b4e8:	6838      	ldr	r0, [r7, #0]
1000b4ea:	6833      	ldr	r3, [r6, #0]
1000b4ec:	4798      	blx	r3
1000b4ee:	2800      	cmp	r0, #0
1000b4f0:	d000      	beq.n	1000b4f4 <platform_event_wait+0x68>
1000b4f2:	e088      	b.n	1000b606 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b4f4:	4b73      	ldr	r3, [pc, #460]	; (1000b6c4 <platform_event_wait+0x238>)
1000b4f6:	681c      	ldr	r4, [r3, #0]
1000b4f8:	88a3      	ldrh	r3, [r4, #4]
1000b4fa:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b4fc:	23cd      	movs	r3, #205	; 0xcd
1000b4fe:	009b      	lsls	r3, r3, #2
1000b500:	459a      	cmp	sl, r3
1000b502:	d100      	bne.n	1000b506 <platform_event_wait+0x7a>
1000b504:	e0c7      	b.n	1000b696 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b506:	8923      	ldrh	r3, [r4, #8]
1000b508:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b50a:	8963      	ldrh	r3, [r4, #10]
1000b50c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b50e:	464b      	mov	r3, r9
1000b510:	2b00      	cmp	r3, #0
1000b512:	d011      	beq.n	1000b538 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b514:	220d      	movs	r2, #13
1000b516:	2100      	movs	r1, #0
1000b518:	a802      	add	r0, sp, #8
1000b51a:	4b66      	ldr	r3, [pc, #408]	; (1000b6b4 <platform_event_wait+0x228>)
1000b51c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b51e:	2333      	movs	r3, #51	; 0x33
1000b520:	aa02      	add	r2, sp, #8
1000b522:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b524:	3b30      	subs	r3, #48	; 0x30
1000b526:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b528:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b52a:	3302      	adds	r3, #2
1000b52c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b52e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b530:	210d      	movs	r1, #13
1000b532:	0010      	movs	r0, r2
1000b534:	4b60      	ldr	r3, [pc, #384]	; (1000b6b8 <platform_event_wait+0x22c>)
1000b536:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b538:	23a0      	movs	r3, #160	; 0xa0
1000b53a:	00db      	lsls	r3, r3, #3
1000b53c:	459a      	cmp	sl, r3
1000b53e:	d121      	bne.n	1000b584 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b540:	4b61      	ldr	r3, [pc, #388]	; (1000b6c8 <platform_event_wait+0x23c>)
1000b542:	881b      	ldrh	r3, [r3, #0]
1000b544:	4443      	add	r3, r8
1000b546:	22a0      	movs	r2, #160	; 0xa0
1000b548:	0092      	lsls	r2, r2, #2
1000b54a:	4293      	cmp	r3, r2
1000b54c:	dd02      	ble.n	1000b554 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b54e:	3a80      	subs	r2, #128	; 0x80
1000b550:	4b5d      	ldr	r3, [pc, #372]	; (1000b6c8 <platform_event_wait+0x23c>)
1000b552:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b554:	4b5c      	ldr	r3, [pc, #368]	; (1000b6c8 <platform_event_wait+0x23c>)
1000b556:	469a      	mov	sl, r3
1000b558:	881d      	ldrh	r5, [r3, #0]
1000b55a:	4b5c      	ldr	r3, [pc, #368]	; (1000b6cc <platform_event_wait+0x240>)
1000b55c:	18ed      	adds	r5, r5, r3
1000b55e:	0021      	movs	r1, r4
1000b560:	310c      	adds	r1, #12
1000b562:	4642      	mov	r2, r8
1000b564:	0028      	movs	r0, r5
1000b566:	4b5a      	ldr	r3, [pc, #360]	; (1000b6d0 <platform_event_wait+0x244>)
1000b568:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b56a:	4642      	mov	r2, r8
1000b56c:	0029      	movs	r1, r5
1000b56e:	4658      	mov	r0, fp
1000b570:	4b58      	ldr	r3, [pc, #352]	; (1000b6d4 <platform_event_wait+0x248>)
1000b572:	4798      	blx	r3
				plf_event_buff_index += len;
1000b574:	4653      	mov	r3, sl
1000b576:	881b      	ldrh	r3, [r3, #0]
1000b578:	4443      	add	r3, r8
1000b57a:	4652      	mov	r2, sl
1000b57c:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b57e:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b580:	2502      	movs	r5, #2
1000b582:	e03a      	b.n	1000b5fa <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b584:	4b54      	ldr	r3, [pc, #336]	; (1000b6d8 <platform_event_wait+0x24c>)
1000b586:	681b      	ldr	r3, [r3, #0]
1000b588:	2b00      	cmp	r3, #0
1000b58a:	d032      	beq.n	1000b5f2 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b58c:	4b4d      	ldr	r3, [pc, #308]	; (1000b6c4 <platform_event_wait+0x238>)
1000b58e:	681a      	ldr	r2, [r3, #0]
1000b590:	8893      	ldrh	r3, [r2, #4]
1000b592:	21cd      	movs	r1, #205	; 0xcd
1000b594:	0089      	lsls	r1, r1, #2
1000b596:	428b      	cmp	r3, r1
1000b598:	d104      	bne.n	1000b5a4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b59a:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b59c:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b59e:	2b00      	cmp	r3, #0
1000b5a0:	d02b      	beq.n	1000b5fa <platform_event_wait+0x16e>
1000b5a2:	e028      	b.n	1000b5f6 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b5a4:	4c4d      	ldr	r4, [pc, #308]	; (1000b6dc <platform_event_wait+0x250>)
1000b5a6:	4d49      	ldr	r5, [pc, #292]	; (1000b6cc <platform_event_wait+0x240>)
1000b5a8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b5aa:	702b      	strb	r3, [r5, #0]
1000b5ac:	0a1b      	lsrs	r3, r3, #8
1000b5ae:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b5b0:	8910      	ldrh	r0, [r2, #8]
1000b5b2:	4b4b      	ldr	r3, [pc, #300]	; (1000b6e0 <platform_event_wait+0x254>)
1000b5b4:	681b      	ldr	r3, [r3, #0]
1000b5b6:	4798      	blx	r3
1000b5b8:	7128      	strb	r0, [r5, #4]
1000b5ba:	0a00      	lsrs	r0, r0, #8
1000b5bc:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b5be:	6820      	ldr	r0, [r4, #0]
1000b5c0:	4b40      	ldr	r3, [pc, #256]	; (1000b6c4 <platform_event_wait+0x238>)
1000b5c2:	681a      	ldr	r2, [r3, #0]
1000b5c4:	88d2      	ldrh	r2, [r2, #6]
1000b5c6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b5c8:	681d      	ldr	r5, [r3, #0]
1000b5ca:	896b      	ldrh	r3, [r5, #10]
1000b5cc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b5ce:	3008      	adds	r0, #8
1000b5d0:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b5d2:	896a      	ldrh	r2, [r5, #10]
1000b5d4:	2a00      	cmp	r2, #0
1000b5d6:	d003      	beq.n	1000b5e0 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b5d8:	0029      	movs	r1, r5
1000b5da:	310c      	adds	r1, #12
1000b5dc:	4b3c      	ldr	r3, [pc, #240]	; (1000b6d0 <platform_event_wait+0x244>)
1000b5de:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b5e0:	8969      	ldrh	r1, [r5, #10]
1000b5e2:	3108      	adds	r1, #8
1000b5e4:	4b3c      	ldr	r3, [pc, #240]	; (1000b6d8 <platform_event_wait+0x24c>)
1000b5e6:	681b      	ldr	r3, [r3, #0]
1000b5e8:	4838      	ldr	r0, [pc, #224]	; (1000b6cc <platform_event_wait+0x240>)
1000b5ea:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5ec:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b5ee:	2503      	movs	r5, #3
1000b5f0:	e003      	b.n	1000b5fa <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5f2:	2400      	movs	r4, #0
1000b5f4:	e001      	b.n	1000b5fa <platform_event_wait+0x16e>
1000b5f6:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b5f8:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b5fa:	4b32      	ldr	r3, [pc, #200]	; (1000b6c4 <platform_event_wait+0x238>)
1000b5fc:	6818      	ldr	r0, [r3, #0]
1000b5fe:	4b39      	ldr	r3, [pc, #228]	; (1000b6e4 <platform_event_wait+0x258>)
1000b600:	681b      	ldr	r3, [r3, #0]
1000b602:	4798      	blx	r3
1000b604:	e000      	b.n	1000b608 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b606:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b608:	2c00      	cmp	r4, #0
1000b60a:	d000      	beq.n	1000b60e <platform_event_wait+0x182>
1000b60c:	e76b      	b.n	1000b4e6 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b60e:	464b      	mov	r3, r9
1000b610:	2b00      	cmp	r3, #0
1000b612:	d046      	beq.n	1000b6a2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b614:	4b29      	ldr	r3, [pc, #164]	; (1000b6bc <platform_event_wait+0x230>)
1000b616:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b618:	2e00      	cmp	r6, #0
1000b61a:	d104      	bne.n	1000b626 <platform_event_wait+0x19a>
1000b61c:	2300      	movs	r3, #0
1000b61e:	6a1c      	ldr	r4, [r3, #32]
1000b620:	2c00      	cmp	r4, #0
1000b622:	d131      	bne.n	1000b688 <platform_event_wait+0x1fc>
1000b624:	e03d      	b.n	1000b6a2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b626:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b628:	2314      	movs	r3, #20
1000b62a:	469c      	mov	ip, r3
1000b62c:	44b4      	add	ip, r6
1000b62e:	4663      	mov	r3, ip
1000b630:	4660      	mov	r0, ip
1000b632:	9300      	str	r3, [sp, #0]
1000b634:	4b2c      	ldr	r3, [pc, #176]	; (1000b6e8 <platform_event_wait+0x25c>)
1000b636:	681b      	ldr	r3, [r3, #0]
1000b638:	4798      	blx	r3
	while(NULL != current)
1000b63a:	2c00      	cmp	r4, #0
1000b63c:	d01f      	beq.n	1000b67e <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b63e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b640:	23cd      	movs	r3, #205	; 0xcd
1000b642:	009b      	lsls	r3, r3, #2
1000b644:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b646:	4b27      	ldr	r3, [pc, #156]	; (1000b6e4 <platform_event_wait+0x258>)
1000b648:	469a      	mov	sl, r3
1000b64a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b64c:	6803      	ldr	r3, [r0, #0]
1000b64e:	889b      	ldrh	r3, [r3, #4]
1000b650:	4543      	cmp	r3, r8
1000b652:	d110      	bne.n	1000b676 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b654:	2f00      	cmp	r7, #0
1000b656:	d006      	beq.n	1000b666 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b658:	6883      	ldr	r3, [r0, #8]
1000b65a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b65c:	4653      	mov	r3, sl
1000b65e:	681b      	ldr	r3, [r3, #0]
1000b660:	4798      	blx	r3
				current = prev->pstrNext;
1000b662:	68b8      	ldr	r0, [r7, #8]
1000b664:	e009      	b.n	1000b67a <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b666:	6883      	ldr	r3, [r0, #8]
1000b668:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b66a:	4b1e      	ldr	r3, [pc, #120]	; (1000b6e4 <platform_event_wait+0x258>)
1000b66c:	681b      	ldr	r3, [r3, #0]
1000b66e:	9301      	str	r3, [sp, #4]
1000b670:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b672:	6a30      	ldr	r0, [r6, #32]
1000b674:	e001      	b.n	1000b67a <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b676:	0007      	movs	r7, r0
1000b678:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b67a:	2800      	cmp	r0, #0
1000b67c:	d1e6      	bne.n	1000b64c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b67e:	4b1b      	ldr	r3, [pc, #108]	; (1000b6ec <platform_event_wait+0x260>)
1000b680:	681b      	ldr	r3, [r3, #0]
1000b682:	9800      	ldr	r0, [sp, #0]
1000b684:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b686:	e00c      	b.n	1000b6a2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b688:	2314      	movs	r3, #20
1000b68a:	9300      	str	r3, [sp, #0]
1000b68c:	4b16      	ldr	r3, [pc, #88]	; (1000b6e8 <platform_event_wait+0x25c>)
1000b68e:	681b      	ldr	r3, [r3, #0]
1000b690:	2014      	movs	r0, #20
1000b692:	4798      	blx	r3
1000b694:	e7d3      	b.n	1000b63e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b696:	4b10      	ldr	r3, [pc, #64]	; (1000b6d8 <platform_event_wait+0x24c>)
1000b698:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b69a:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b69c:	2b00      	cmp	r3, #0
1000b69e:	d0ac      	beq.n	1000b5fa <platform_event_wait+0x16e>
1000b6a0:	e77b      	b.n	1000b59a <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b6a2:	0028      	movs	r0, r5
1000b6a4:	b007      	add	sp, #28
1000b6a6:	bc3c      	pop	{r2, r3, r4, r5}
1000b6a8:	4690      	mov	r8, r2
1000b6aa:	4699      	mov	r9, r3
1000b6ac:	46a2      	mov	sl, r4
1000b6ae:	46ab      	mov	fp, r5
1000b6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6b2:	46c0      	nop			; (mov r8, r8)
1000b6b4:	10010529 	.word	0x10010529
1000b6b8:	1000b43d 	.word	0x1000b43d
1000b6bc:	10013f98 	.word	0x10013f98
1000b6c0:	10013f80 	.word	0x10013f80
1000b6c4:	10013f60 	.word	0x10013f60
1000b6c8:	10014c24 	.word	0x10014c24
1000b6cc:	1001498c 	.word	0x1001498c
1000b6d0:	10010517 	.word	0x10010517
1000b6d4:	1000b05d 	.word	0x1000b05d
1000b6d8:	10013f8c 	.word	0x10013f8c
1000b6dc:	10013f88 	.word	0x10013f88
1000b6e0:	10013f58 	.word	0x10013f58
1000b6e4:	10013f54 	.word	0x10013f54
1000b6e8:	10013f78 	.word	0x10013f78
1000b6ec:	10013f64 	.word	0x10013f64

1000b6f0 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b6f0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b6f2:	4b03      	ldr	r3, [pc, #12]	; (1000b700 <acquire_sleep_lock+0x10>)
1000b6f4:	681b      	ldr	r3, [r3, #0]
1000b6f6:	2080      	movs	r0, #128	; 0x80
1000b6f8:	0200      	lsls	r0, r0, #8
1000b6fa:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b6fc:	2008      	movs	r0, #8
1000b6fe:	bd10      	pop	{r4, pc}
1000b700:	10014944 	.word	0x10014944

1000b704 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b704:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b706:	4b03      	ldr	r3, [pc, #12]	; (1000b714 <release_message_lock+0x10>)
1000b708:	681b      	ldr	r3, [r3, #0]
1000b70a:	2080      	movs	r0, #128	; 0x80
1000b70c:	01c0      	lsls	r0, r0, #7
1000b70e:	4798      	blx	r3
	return status;
}
1000b710:	2000      	movs	r0, #0
1000b712:	bd10      	pop	{r4, pc}
1000b714:	10014950 	.word	0x10014950

1000b718 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b718:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b71a:	4a18      	ldr	r2, [pc, #96]	; (1000b77c <gpio1_combined_isr_handler+0x64>)
1000b71c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b71e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b720:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b722:	2180      	movs	r1, #128	; 0x80
1000b724:	0209      	lsls	r1, r1, #8
1000b726:	4301      	orrs	r1, r0
1000b728:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b72a:	0010      	movs	r0, r2
1000b72c:	4d14      	ldr	r5, [pc, #80]	; (1000b780 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b72e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b730:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b732:	05db      	lsls	r3, r3, #23
1000b734:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b736:	d011      	beq.n	1000b75c <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b738:	b2db      	uxtb	r3, r3
1000b73a:	4259      	negs	r1, r3
1000b73c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b73e:	2b01      	cmp	r3, #1
1000b740:	d006      	beq.n	1000b750 <gpio1_combined_isr_handler+0x38>
1000b742:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b744:	085b      	lsrs	r3, r3, #1
				index++;
1000b746:	3101      	adds	r1, #1
1000b748:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b74a:	2b01      	cmp	r3, #1
1000b74c:	d1fa      	bne.n	1000b744 <gpio1_combined_isr_handler+0x2c>
1000b74e:	e000      	b.n	1000b752 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b750:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b752:	0023      	movs	r3, r4
1000b754:	408b      	lsls	r3, r1
1000b756:	b29b      	uxth	r3, r3
1000b758:	8703      	strh	r3, [r0, #56]	; 0x38
1000b75a:	e003      	b.n	1000b764 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b75c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b75e:	432b      	orrs	r3, r5
1000b760:	b29b      	uxth	r3, r3
1000b762:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b764:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b766:	05db      	lsls	r3, r3, #23
1000b768:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b76a:	d1e2      	bne.n	1000b732 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b76c:	2180      	movs	r1, #128	; 0x80
1000b76e:	0049      	lsls	r1, r1, #1
1000b770:	3381      	adds	r3, #129	; 0x81
1000b772:	33ff      	adds	r3, #255	; 0xff
1000b774:	4a03      	ldr	r2, [pc, #12]	; (1000b784 <gpio1_combined_isr_handler+0x6c>)
1000b776:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b778:	bd30      	pop	{r4, r5, pc}
1000b77a:	46c0      	nop			; (mov r8, r8)
1000b77c:	40011000 	.word	0x40011000
1000b780:	ffff8000 	.word	0xffff8000
1000b784:	e000e100 	.word	0xe000e100

1000b788 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b788:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b78a:	4a17      	ldr	r2, [pc, #92]	; (1000b7e8 <gpio0_combined_isr_handler+0x60>)
1000b78c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b78e:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b790:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b792:	2180      	movs	r1, #128	; 0x80
1000b794:	0209      	lsls	r1, r1, #8
1000b796:	4301      	orrs	r1, r0
1000b798:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b79a:	0010      	movs	r0, r2
1000b79c:	4d13      	ldr	r5, [pc, #76]	; (1000b7ec <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b79e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b7a0:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b7a2:	05db      	lsls	r3, r3, #23
1000b7a4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b7a6:	d011      	beq.n	1000b7cc <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b7a8:	b2db      	uxtb	r3, r3
1000b7aa:	4259      	negs	r1, r3
1000b7ac:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b7ae:	2b01      	cmp	r3, #1
1000b7b0:	d006      	beq.n	1000b7c0 <gpio0_combined_isr_handler+0x38>
1000b7b2:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b7b4:	085b      	lsrs	r3, r3, #1
				index++;
1000b7b6:	3101      	adds	r1, #1
1000b7b8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b7ba:	2b01      	cmp	r3, #1
1000b7bc:	d1fa      	bne.n	1000b7b4 <gpio0_combined_isr_handler+0x2c>
1000b7be:	e000      	b.n	1000b7c2 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b7c0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b7c2:	0023      	movs	r3, r4
1000b7c4:	408b      	lsls	r3, r1
1000b7c6:	b29b      	uxth	r3, r3
1000b7c8:	8703      	strh	r3, [r0, #56]	; 0x38
1000b7ca:	e003      	b.n	1000b7d4 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b7cc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b7ce:	432b      	orrs	r3, r5
1000b7d0:	b29b      	uxth	r3, r3
1000b7d2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b7d4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b7d6:	05db      	lsls	r3, r3, #23
1000b7d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b7da:	d1e2      	bne.n	1000b7a2 <gpio0_combined_isr_handler+0x1a>
1000b7dc:	2180      	movs	r1, #128	; 0x80
1000b7de:	3381      	adds	r3, #129	; 0x81
1000b7e0:	33ff      	adds	r3, #255	; 0xff
1000b7e2:	4a03      	ldr	r2, [pc, #12]	; (1000b7f0 <gpio0_combined_isr_handler+0x68>)
1000b7e4:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b7e6:	bd30      	pop	{r4, r5, pc}
1000b7e8:	40010000 	.word	0x40010000
1000b7ec:	ffff8000 	.word	0xffff8000
1000b7f0:	e000e100 	.word	0xe000e100

1000b7f4 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b7f4:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b7f6:	4b0c      	ldr	r3, [pc, #48]	; (1000b828 <PORT1_COMB_Handler+0x34>)
1000b7f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b7fa:	0b5b      	lsrs	r3, r3, #13
1000b7fc:	d010      	beq.n	1000b820 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b7fe:	4b0b      	ldr	r3, [pc, #44]	; (1000b82c <PORT1_COMB_Handler+0x38>)
1000b800:	681b      	ldr	r3, [r3, #0]
1000b802:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b804:	4a08      	ldr	r2, [pc, #32]	; (1000b828 <PORT1_COMB_Handler+0x34>)
1000b806:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b808:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b80a:	0b5b      	lsrs	r3, r3, #13
1000b80c:	035b      	lsls	r3, r3, #13
1000b80e:	430b      	orrs	r3, r1
1000b810:	8713      	strh	r3, [r2, #56]	; 0x38
1000b812:	2180      	movs	r1, #128	; 0x80
1000b814:	0049      	lsls	r1, r1, #1
1000b816:	23c0      	movs	r3, #192	; 0xc0
1000b818:	005b      	lsls	r3, r3, #1
1000b81a:	4a05      	ldr	r2, [pc, #20]	; (1000b830 <PORT1_COMB_Handler+0x3c>)
1000b81c:	50d1      	str	r1, [r2, r3]
1000b81e:	e001      	b.n	1000b824 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b820:	4b04      	ldr	r3, [pc, #16]	; (1000b834 <PORT1_COMB_Handler+0x40>)
1000b822:	4798      	blx	r3
	}
}
1000b824:	bd10      	pop	{r4, pc}
1000b826:	46c0      	nop			; (mov r8, r8)
1000b828:	40011000 	.word	0x40011000
1000b82c:	10014c10 	.word	0x10014c10
1000b830:	e000e100 	.word	0xe000e100
1000b834:	1000b719 	.word	0x1000b719

1000b838 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b838:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b83a:	2802      	cmp	r0, #2
1000b83c:	d804      	bhi.n	1000b848 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b83e:	0080      	lsls	r0, r0, #2
1000b840:	2200      	movs	r2, #0
1000b842:	4b02      	ldr	r3, [pc, #8]	; (1000b84c <wakeup_int_unregister_callback+0x14>)
1000b844:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b846:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b848:	0018      	movs	r0, r3
1000b84a:	4770      	bx	lr
1000b84c:	10014c28 	.word	0x10014c28

1000b850 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b850:	b510      	push	{r4, lr}
1000b852:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b854:	7803      	ldrb	r3, [r0, #0]
1000b856:	2b01      	cmp	r3, #1
1000b858:	d108      	bne.n	1000b86c <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b85a:	4b11      	ldr	r3, [pc, #68]	; (1000b8a0 <wakeup_active_event_callback+0x50>)
1000b85c:	681b      	ldr	r3, [r3, #0]
1000b85e:	2b00      	cmp	r3, #0
1000b860:	d000      	beq.n	1000b864 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b862:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b864:	23ff      	movs	r3, #255	; 0xff
1000b866:	6822      	ldr	r2, [r4, #0]
1000b868:	439a      	bics	r2, r3
1000b86a:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b86c:	7863      	ldrb	r3, [r4, #1]
1000b86e:	2b01      	cmp	r3, #1
1000b870:	d108      	bne.n	1000b884 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b872:	4b0b      	ldr	r3, [pc, #44]	; (1000b8a0 <wakeup_active_event_callback+0x50>)
1000b874:	685b      	ldr	r3, [r3, #4]
1000b876:	2b00      	cmp	r3, #0
1000b878:	d000      	beq.n	1000b87c <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b87a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b87c:	4b09      	ldr	r3, [pc, #36]	; (1000b8a4 <wakeup_active_event_callback+0x54>)
1000b87e:	6822      	ldr	r2, [r4, #0]
1000b880:	4013      	ands	r3, r2
1000b882:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b884:	78a3      	ldrb	r3, [r4, #2]
1000b886:	2b01      	cmp	r3, #1
1000b888:	d108      	bne.n	1000b89c <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b88a:	4b05      	ldr	r3, [pc, #20]	; (1000b8a0 <wakeup_active_event_callback+0x50>)
1000b88c:	689b      	ldr	r3, [r3, #8]
1000b88e:	2b00      	cmp	r3, #0
1000b890:	d000      	beq.n	1000b894 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b892:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b894:	4b04      	ldr	r3, [pc, #16]	; (1000b8a8 <wakeup_active_event_callback+0x58>)
1000b896:	6822      	ldr	r2, [r4, #0]
1000b898:	4013      	ands	r3, r2
1000b89a:	6023      	str	r3, [r4, #0]
	}
}
1000b89c:	bd10      	pop	{r4, pc}
1000b89e:	46c0      	nop			; (mov r8, r8)
1000b8a0:	10014c28 	.word	0x10014c28
1000b8a4:	ffff00ff 	.word	0xffff00ff
1000b8a8:	ff00ffff 	.word	0xff00ffff

1000b8ac <transfer_done_tx>:
struct dma_descriptor example_descriptor_tx;
struct dma_descriptor example_descriptor_rx;


static void transfer_done_tx(struct dma_resource* const resource )
{
1000b8ac:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_tx);
1000b8ae:	4802      	ldr	r0, [pc, #8]	; (1000b8b8 <transfer_done_tx+0xc>)
1000b8b0:	4b02      	ldr	r3, [pc, #8]	; (1000b8bc <transfer_done_tx+0x10>)
1000b8b2:	4798      	blx	r3
}
1000b8b4:	bd10      	pop	{r4, pc}
1000b8b6:	46c0      	nop			; (mov r8, r8)
1000b8b8:	10014c48 	.word	0x10014c48
1000b8bc:	10008465 	.word	0x10008465

1000b8c0 <timer_callback_handler>:



/* Timer callback */
static void timer_callback_handler(void)
{
1000b8c0:	b510      	push	{r4, lr}
	/* Stop timer */
	hw_timer_stop();
1000b8c2:	4b04      	ldr	r3, [pc, #16]	; (1000b8d4 <timer_callback_handler+0x14>)
1000b8c4:	4798      	blx	r3
	/* Set timer Alarm flag */
	Timer_Flag = true;
1000b8c6:	2201      	movs	r2, #1
1000b8c8:	4b03      	ldr	r3, [pc, #12]	; (1000b8d8 <timer_callback_handler+0x18>)
1000b8ca:	701a      	strb	r2, [r3, #0]
	/* Restart Timer */
	hw_timer_start(10);
1000b8cc:	200a      	movs	r0, #10
1000b8ce:	4b03      	ldr	r3, [pc, #12]	; (1000b8dc <timer_callback_handler+0x1c>)
1000b8d0:	4798      	blx	r3
}
1000b8d2:	bd10      	pop	{r4, pc}
1000b8d4:	1000ae3d 	.word	0x1000ae3d
1000b8d8:	10013fa2 	.word	0x10013fa2
1000b8dc:	1000ae11 	.word	0x1000ae11

1000b8e0 <app_htpt_cfg_indntf_ind_handler>:
#endif
	}
}

static at_ble_status_t  app_htpt_cfg_indntf_ind_handler(void *params)
{
1000b8e0:	b510      	push	{r4, lr}
	at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params, sizeof(at_ble_htpt_cfg_indntf_ind_t));
	if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 1) {
1000b8e2:	7843      	ldrb	r3, [r0, #1]
1000b8e4:	2b01      	cmp	r3, #1
1000b8e6:	d106      	bne.n	1000b8f6 <app_htpt_cfg_indntf_ind_handler+0x16>
		printf("Started HTP Temperature Notification");
1000b8e8:	4807      	ldr	r0, [pc, #28]	; (1000b908 <app_htpt_cfg_indntf_ind_handler+0x28>)
1000b8ea:	4b08      	ldr	r3, [pc, #32]	; (1000b90c <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b8ec:	4798      	blx	r3
		Temp_Notification_Flag = true;
1000b8ee:	2201      	movs	r2, #1
1000b8f0:	4b07      	ldr	r3, [pc, #28]	; (1000b910 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b8f2:	701a      	strb	r2, [r3, #0]
1000b8f4:	e005      	b.n	1000b902 <app_htpt_cfg_indntf_ind_handler+0x22>
	}
	else {
		printf("HTP Temperature Notification Stopped");
1000b8f6:	4807      	ldr	r0, [pc, #28]	; (1000b914 <app_htpt_cfg_indntf_ind_handler+0x34>)
1000b8f8:	4b04      	ldr	r3, [pc, #16]	; (1000b90c <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b8fa:	4798      	blx	r3
		Temp_Notification_Flag = false;
1000b8fc:	2200      	movs	r2, #0
1000b8fe:	4b04      	ldr	r3, [pc, #16]	; (1000b910 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b900:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
1000b902:	2000      	movs	r0, #0
1000b904:	bd10      	pop	{r4, pc}
1000b906:	46c0      	nop			; (mov r8, r8)
1000b908:	10012144 	.word	0x10012144
1000b90c:	10010539 	.word	0x10010539
1000b910:	10013fa3 	.word	0x10013fa3
1000b914:	1001216c 	.word	0x1001216c

1000b918 <ble_paired_cb>:
	}
}

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_paired_cb (void *param)
{
1000b918:	b570      	push	{r4, r5, r6, lr}
1000b91a:	0005      	movs	r5, r0
	at_ble_pair_done_t *pair_params = param;
	printf("\nAssignment 3.2: Application paired ");
1000b91c:	4809      	ldr	r0, [pc, #36]	; (1000b944 <ble_paired_cb+0x2c>)
1000b91e:	4c0a      	ldr	r4, [pc, #40]	; (1000b948 <ble_paired_cb+0x30>)
1000b920:	47a0      	blx	r4
	/* Enable the HTP Profile */
	printf("\nAssignment 4.1: enable health temperature service ");
1000b922:	480a      	ldr	r0, [pc, #40]	; (1000b94c <ble_paired_cb+0x34>)
1000b924:	47a0      	blx	r4
	status = at_ble_htpt_enable(pair_params->handle,
1000b926:	8868      	ldrh	r0, [r5, #2]
1000b928:	2101      	movs	r1, #1
1000b92a:	4b09      	ldr	r3, [pc, #36]	; (1000b950 <ble_paired_cb+0x38>)
1000b92c:	4798      	blx	r3
1000b92e:	4b09      	ldr	r3, [pc, #36]	; (1000b954 <ble_paired_cb+0x3c>)
1000b930:	7018      	strb	r0, [r3, #0]
	HTPT_CFG_STABLE_MEAS_IND);
	if(status != AT_BLE_SUCCESS){
1000b932:	781b      	ldrb	r3, [r3, #0]
1000b934:	2b00      	cmp	r3, #0
1000b936:	d003      	beq.n	1000b940 <ble_paired_cb+0x28>
		printf("*** Failure in HTP Profile Enable");
1000b938:	4807      	ldr	r0, [pc, #28]	; (1000b958 <ble_paired_cb+0x40>)
1000b93a:	4b03      	ldr	r3, [pc, #12]	; (1000b948 <ble_paired_cb+0x30>)
1000b93c:	4798      	blx	r3
1000b93e:	e7fe      	b.n	1000b93e <ble_paired_cb+0x26>
		while(1);
	}
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b940:	2000      	movs	r0, #0
1000b942:	bd70      	pop	{r4, r5, r6, pc}
1000b944:	10012194 	.word	0x10012194
1000b948:	10010539 	.word	0x10010539
1000b94c:	100121bc 	.word	0x100121bc
1000b950:	1000d0a5 	.word	0x1000d0a5
1000b954:	10014cdc 	.word	0x10014cdc
1000b958:	100121f0 	.word	0x100121f0

1000b95c <ble_advertise>:
	}
}


static void ble_advertise (void)
{
1000b95c:	b510      	push	{r4, lr}
1000b95e:	b084      	sub	sp, #16
	printf("\nAssignment 2.1 : Start Advertising");
1000b960:	4815      	ldr	r0, [pc, #84]	; (1000b9b8 <ble_advertise+0x5c>)
1000b962:	4b16      	ldr	r3, [pc, #88]	; (1000b9bc <ble_advertise+0x60>)
1000b964:	4798      	blx	r3
	status = ble_advertisement_data_set();
1000b966:	4b16      	ldr	r3, [pc, #88]	; (1000b9c0 <ble_advertise+0x64>)
1000b968:	4798      	blx	r3
1000b96a:	4b16      	ldr	r3, [pc, #88]	; (1000b9c4 <ble_advertise+0x68>)
1000b96c:	7018      	strb	r0, [r3, #0]
	if(status != AT_BLE_SUCCESS)
1000b96e:	781b      	ldrb	r3, [r3, #0]
1000b970:	2b00      	cmp	r3, #0
1000b972:	d006      	beq.n	1000b982 <ble_advertise+0x26>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000b974:	4b13      	ldr	r3, [pc, #76]	; (1000b9c4 <ble_advertise+0x68>)
1000b976:	7819      	ldrb	r1, [r3, #0]
1000b978:	b2c9      	uxtb	r1, r1
1000b97a:	4813      	ldr	r0, [pc, #76]	; (1000b9c8 <ble_advertise+0x6c>)
1000b97c:	4b0f      	ldr	r3, [pc, #60]	; (1000b9bc <ble_advertise+0x60>)
1000b97e:	4798      	blx	r3
1000b980:	e7fe      	b.n	1000b980 <ble_advertise+0x24>
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
1000b982:	2300      	movs	r3, #0
1000b984:	9302      	str	r3, [sp, #8]
1000b986:	4b11      	ldr	r3, [pc, #68]	; (1000b9cc <ble_advertise+0x70>)
1000b988:	9301      	str	r3, [sp, #4]
1000b98a:	335a      	adds	r3, #90	; 0x5a
1000b98c:	33ff      	adds	r3, #255	; 0xff
1000b98e:	9300      	str	r3, [sp, #0]
1000b990:	2300      	movs	r3, #0
1000b992:	2200      	movs	r2, #0
1000b994:	2101      	movs	r1, #1
1000b996:	2000      	movs	r0, #0
1000b998:	4c0d      	ldr	r4, [pc, #52]	; (1000b9d0 <ble_advertise+0x74>)
1000b99a:	47a0      	blx	r4
1000b99c:	4b09      	ldr	r3, [pc, #36]	; (1000b9c4 <ble_advertise+0x68>)
1000b99e:	7018      	strb	r0, [r3, #0]
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
1000b9a0:	781b      	ldrb	r3, [r3, #0]
1000b9a2:	2b00      	cmp	r3, #0
1000b9a4:	d006      	beq.n	1000b9b4 <ble_advertise+0x58>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000b9a6:	4b07      	ldr	r3, [pc, #28]	; (1000b9c4 <ble_advertise+0x68>)
1000b9a8:	7819      	ldrb	r1, [r3, #0]
1000b9aa:	b2c9      	uxtb	r1, r1
1000b9ac:	4806      	ldr	r0, [pc, #24]	; (1000b9c8 <ble_advertise+0x6c>)
1000b9ae:	4b03      	ldr	r3, [pc, #12]	; (1000b9bc <ble_advertise+0x60>)
1000b9b0:	4798      	blx	r3
1000b9b2:	e7fe      	b.n	1000b9b2 <ble_advertise+0x56>
		while(1);
	}
}
1000b9b4:	b004      	add	sp, #16
1000b9b6:	bd10      	pop	{r4, pc}
1000b9b8:	10012214 	.word	0x10012214
1000b9bc:	10010539 	.word	0x10010539
1000b9c0:	1000ad35 	.word	0x1000ad35
1000b9c4:	10014cdc 	.word	0x10014cdc
1000b9c8:	10012238 	.word	0x10012238
1000b9cc:	0000028f 	.word	0x0000028f
1000b9d0:	1000c925 	.word	0x1000c925

1000b9d4 <ble_disconnected_cb>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event */
static at_ble_status_t ble_disconnected_cb (void *param)
{
1000b9d4:	b510      	push	{r4, lr}
	printf("\nAssignment 3.2: Application disconnected ");
1000b9d6:	4803      	ldr	r0, [pc, #12]	; (1000b9e4 <ble_disconnected_cb+0x10>)
1000b9d8:	4b03      	ldr	r3, [pc, #12]	; (1000b9e8 <ble_disconnected_cb+0x14>)
1000b9da:	4798      	blx	r3
	ble_advertise();
1000b9dc:	4b03      	ldr	r3, [pc, #12]	; (1000b9ec <ble_disconnected_cb+0x18>)
1000b9de:	4798      	blx	r3
	ALL_UNUSED(param);return AT_BLE_SUCCESS;
}
1000b9e0:	2000      	movs	r0, #0
1000b9e2:	bd10      	pop	{r4, pc}
1000b9e4:	10012268 	.word	0x10012268
1000b9e8:	10010539 	.word	0x10010539
1000b9ec:	1000b95d 	.word	0x1000b95d

1000b9f0 <transfer_done_rx>:
{
	dma_start_transfer_job(&uart_dma_resource_tx);
}

static void transfer_done_rx(struct dma_resource* const resource )
{
1000b9f0:	b570      	push	{r4, r5, r6, lr}
	int i =0;
	printf("\n");
1000b9f2:	200a      	movs	r0, #10
1000b9f4:	4b08      	ldr	r3, [pc, #32]	; (1000ba18 <transfer_done_rx+0x28>)
1000b9f6:	4798      	blx	r3
	for (i =0;i<8;i++)
1000b9f8:	2400      	movs	r4, #0
		printf("%c",string[i]);
1000b9fa:	4e08      	ldr	r6, [pc, #32]	; (1000ba1c <transfer_done_rx+0x2c>)
1000b9fc:	4d06      	ldr	r5, [pc, #24]	; (1000ba18 <transfer_done_rx+0x28>)
1000b9fe:	5da0      	ldrb	r0, [r4, r6]
1000ba00:	47a8      	blx	r5

static void transfer_done_rx(struct dma_resource* const resource )
{
	int i =0;
	printf("\n");
	for (i =0;i<8;i++)
1000ba02:	3401      	adds	r4, #1
1000ba04:	2c08      	cmp	r4, #8
1000ba06:	d1fa      	bne.n	1000b9fe <transfer_done_rx+0xe>
		printf("%c",string[i]);
	dma_start_transfer_job(&uart_dma_resource_rx);
1000ba08:	4805      	ldr	r0, [pc, #20]	; (1000ba20 <transfer_done_rx+0x30>)
1000ba0a:	4b06      	ldr	r3, [pc, #24]	; (1000ba24 <transfer_done_rx+0x34>)
1000ba0c:	4798      	blx	r3
	printf("\n");
1000ba0e:	200a      	movs	r0, #10
1000ba10:	4b01      	ldr	r3, [pc, #4]	; (1000ba18 <transfer_done_rx+0x28>)
1000ba12:	4798      	blx	r3
}
1000ba14:	bd70      	pop	{r4, r5, r6, pc}
1000ba16:	46c0      	nop			; (mov r8, r8)
1000ba18:	1001056d 	.word	0x1001056d
1000ba1c:	10013f9c 	.word	0x10013f9c
1000ba20:	10014c78 	.word	0x10014c78
1000ba24:	10008465 	.word	0x10008465

1000ba28 <main>:
#endif
}


int main (void)
{
1000ba28:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba2a:	465f      	mov	r7, fp
1000ba2c:	4656      	mov	r6, sl
1000ba2e:	464d      	mov	r5, r9
1000ba30:	4644      	mov	r4, r8
1000ba32:	b4f0      	push	{r4, r5, r6, r7}
1000ba34:	b091      	sub	sp, #68	; 0x44
	platform_driver_init();
1000ba36:	4b88      	ldr	r3, [pc, #544]	; (1000bc58 <main+0x230>)
1000ba38:	4798      	blx	r3
	acquire_sleep_lock();
1000ba3a:	4b88      	ldr	r3, [pc, #544]	; (1000bc5c <main+0x234>)
1000ba3c:	4798      	blx	r3
	/* Initialize serial console */
	serial_console_init();
1000ba3e:	4b88      	ldr	r3, [pc, #544]	; (1000bc60 <main+0x238>)
1000ba40:	4798      	blx	r3
	//configure_usart();
	
	/* Initialize the hardware timer */
	hw_timer_init();
1000ba42:	4b88      	ldr	r3, [pc, #544]	; (1000bc64 <main+0x23c>)
1000ba44:	4798      	blx	r3
	/* Register the callback */
	hw_timer_register_callback(timer_callback_handler);
1000ba46:	4888      	ldr	r0, [pc, #544]	; (1000bc68 <main+0x240>)
1000ba48:	4b88      	ldr	r3, [pc, #544]	; (1000bc6c <main+0x244>)
1000ba4a:	4798      	blx	r3
	/* Start timer */
	hw_timer_start(1);
1000ba4c:	2001      	movs	r0, #1
1000ba4e:	4b88      	ldr	r3, [pc, #544]	; (1000bc70 <main+0x248>)
1000ba50:	4798      	blx	r3
	/* initialize the BLE chip and Set the Device Address */
	ble_device_init(NULL);
1000ba52:	2000      	movs	r0, #0
1000ba54:	4b87      	ldr	r3, [pc, #540]	; (1000bc74 <main+0x24c>)
1000ba56:	4798      	blx	r3
	/* Initialize the temperature sensor */
	at30tse_init();
1000ba58:	4b87      	ldr	r3, [pc, #540]	; (1000bc78 <main+0x250>)
1000ba5a:	4798      	blx	r3
	/* configure the temperature sensor ADC */
	at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
1000ba5c:	20c0      	movs	r0, #192	; 0xc0
1000ba5e:	01c0      	lsls	r0, r0, #7
1000ba60:	4b86      	ldr	r3, [pc, #536]	; (1000bc7c <main+0x254>)
1000ba62:	4798      	blx	r3

static void htp_temperature_read(void)
{
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	temperature = at30tse_read_temperature();
1000ba64:	4b86      	ldr	r3, [pc, #536]	; (1000bc80 <main+0x258>)
1000ba66:	4798      	blx	r3
	/* Display temperature on com port */
#ifdef HTPT_FLAG_FAHRENHEIT
	printf("Temperature: %d Fahrenheit", (uint16_t)temperature);
#else
	printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
1000ba68:	4b86      	ldr	r3, [pc, #536]	; (1000bc84 <main+0x25c>)
1000ba6a:	4798      	blx	r3
1000ba6c:	4b86      	ldr	r3, [pc, #536]	; (1000bc88 <main+0x260>)
1000ba6e:	4798      	blx	r3
1000ba70:	b281      	uxth	r1, r0
1000ba72:	4886      	ldr	r0, [pc, #536]	; (1000bc8c <main+0x264>)
1000ba74:	4c86      	ldr	r4, [pc, #536]	; (1000bc90 <main+0x268>)
1000ba76:	47a0      	blx	r4
	NULL
};


static void htp_init (void){
	printf("\nAssignment 4.1: Init Health temperature service ");
1000ba78:	4886      	ldr	r0, [pc, #536]	; (1000bc94 <main+0x26c>)
1000ba7a:	47a0      	blx	r4
	/* Create htp service in GATT database*/
	status = at_ble_htpt_create_db(
1000ba7c:	4b86      	ldr	r3, [pc, #536]	; (1000bc98 <main+0x270>)
1000ba7e:	9302      	str	r3, [sp, #8]
1000ba80:	230c      	movs	r3, #12
1000ba82:	9301      	str	r3, [sp, #4]
1000ba84:	3b0b      	subs	r3, #11
1000ba86:	9300      	str	r3, [sp, #0]
1000ba88:	331d      	adds	r3, #29
1000ba8a:	2201      	movs	r2, #1
1000ba8c:	2101      	movs	r1, #1
1000ba8e:	2001      	movs	r0, #1
1000ba90:	4c82      	ldr	r4, [pc, #520]	; (1000bc9c <main+0x274>)
1000ba92:	47a0      	blx	r4
1000ba94:	4b82      	ldr	r3, [pc, #520]	; (1000bca0 <main+0x278>)
1000ba96:	7018      	strb	r0, [r3, #0]
	1,
	30,
	1,
	HTPT_AUTH,
	&htpt_conn_handle);
	if (status != AT_BLE_SUCCESS){
1000ba98:	781b      	ldrb	r3, [r3, #0]
1000ba9a:	2b00      	cmp	r3, #0
1000ba9c:	d003      	beq.n	1000baa6 <main+0x7e>
		printf("HTP Data Base creation failed");
1000ba9e:	4881      	ldr	r0, [pc, #516]	; (1000bca4 <main+0x27c>)
1000baa0:	4b7b      	ldr	r3, [pc, #492]	; (1000bc90 <main+0x268>)
1000baa2:	4798      	blx	r3
1000baa4:	e7fe      	b.n	1000baa4 <main+0x7c>
};

static void register_ble_callbacks (void)
{
	/* Register GAP Callbacks */
	printf("\nAssignment 3.2: Register bluetooth events callbacks");
1000baa6:	4880      	ldr	r0, [pc, #512]	; (1000bca8 <main+0x280>)
1000baa8:	4b79      	ldr	r3, [pc, #484]	; (1000bc90 <main+0x268>)
1000baaa:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000baac:	4a7f      	ldr	r2, [pc, #508]	; (1000bcac <main+0x284>)
1000baae:	2100      	movs	r1, #0
1000bab0:	2000      	movs	r0, #0
1000bab2:	4b7f      	ldr	r3, [pc, #508]	; (1000bcb0 <main+0x288>)
1000bab4:	4798      	blx	r3
1000bab6:	4b7a      	ldr	r3, [pc, #488]	; (1000bca0 <main+0x278>)
1000bab8:	7018      	strb	r0, [r3, #0]
	BLE_GAP_EVENT_TYPE,app_gap_cb);
	if (status != true) {
1000baba:	781b      	ldrb	r3, [r3, #0]
1000babc:	2b01      	cmp	r3, #1
1000babe:	d002      	beq.n	1000bac6 <main+0x9e>
		printf("\n##Error when Registering  SAMB11 gap callbacks");
1000bac0:	487c      	ldr	r0, [pc, #496]	; (1000bcb4 <main+0x28c>)
1000bac2:	4b73      	ldr	r3, [pc, #460]	; (1000bc90 <main+0x268>)
1000bac4:	4798      	blx	r3
	}
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000bac6:	4a7c      	ldr	r2, [pc, #496]	; (1000bcb8 <main+0x290>)
1000bac8:	2104      	movs	r1, #4
1000baca:	2000      	movs	r0, #0
1000bacc:	4b78      	ldr	r3, [pc, #480]	; (1000bcb0 <main+0x288>)
1000bace:	4798      	blx	r3
1000bad0:	4b73      	ldr	r3, [pc, #460]	; (1000bca0 <main+0x278>)
1000bad2:	7018      	strb	r0, [r3, #0]
	BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	if (status != true) {
1000bad4:	781b      	ldrb	r3, [r3, #0]
1000bad6:	2b01      	cmp	r3, #1
1000bad8:	d002      	beq.n	1000bae0 <main+0xb8>
		printf("\n##Error when Registering  SAMB11 htpt callbacks");
1000bada:	4878      	ldr	r0, [pc, #480]	; (1000bcbc <main+0x294>)
1000badc:	4b6c      	ldr	r3, [pc, #432]	; (1000bc90 <main+0x268>)
1000bade:	4798      	blx	r3
	/* Initialize the htp service */
	htp_init();
	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();
	/* Start Advertising process */
	ble_advertise();
1000bae0:	4b77      	ldr	r3, [pc, #476]	; (1000bcc0 <main+0x298>)
1000bae2:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart1;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart1);
1000bae4:	a806      	add	r0, sp, #24
1000bae6:	4b77      	ldr	r3, [pc, #476]	; (1000bcc4 <main+0x29c>)
1000bae8:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart1.baud_rate = 9600;
1000baea:	2396      	movs	r3, #150	; 0x96
1000baec:	019b      	lsls	r3, r3, #6
1000baee:	9306      	str	r3, [sp, #24]
	config_uart1.pin_number_pad[0] = EDBG1_CDC_SERCOM_PIN_PAD0;
1000baf0:	2306      	movs	r3, #6
1000baf2:	9308      	str	r3, [sp, #32]
	config_uart1.pin_number_pad[1] = EDBG1_CDC_SERCOM_PIN_PAD1;
1000baf4:	3301      	adds	r3, #1
1000baf6:	9309      	str	r3, [sp, #36]	; 0x24
	config_uart1.pin_number_pad[2] = EDBG1_CDC_SERCOM_PIN_PAD2;
1000baf8:	3307      	adds	r3, #7
1000bafa:	930a      	str	r3, [sp, #40]	; 0x28
	config_uart1.pin_number_pad[3] = EDBG1_CDC_SERCOM_PIN_PAD3;
1000bafc:	3301      	adds	r3, #1
1000bafe:	930b      	str	r3, [sp, #44]	; 0x2c
	config_uart1.pinmux_sel_pad[0] = EDBG1_CDC_SERCOM_MUX_PAD0;
1000bb00:	3b0d      	subs	r3, #13
1000bb02:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart1.pinmux_sel_pad[1] = EDBG1_CDC_SERCOM_MUX_PAD1;
1000bb04:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart1.pinmux_sel_pad[2] = EDBG1_CDC_SERCOM_MUX_PAD2;
1000bb06:	930e      	str	r3, [sp, #56]	; 0x38
	config_uart1.pinmux_sel_pad[3] = EDBG1_CDC_SERCOM_MUX_PAD3;
1000bb08:	930f      	str	r3, [sp, #60]	; 0x3c
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance1,
1000bb0a:	4d6f      	ldr	r5, [pc, #444]	; (1000bcc8 <main+0x2a0>)
1000bb0c:	4c6f      	ldr	r4, [pc, #444]	; (1000bccc <main+0x2a4>)
1000bb0e:	aa06      	add	r2, sp, #24
1000bb10:	496f      	ldr	r1, [pc, #444]	; (1000bcd0 <main+0x2a8>)
1000bb12:	0028      	movs	r0, r5
1000bb14:	47a0      	blx	r4
1000bb16:	2800      	cmp	r0, #0
1000bb18:	d1f9      	bne.n	1000bb0e <main+0xe6>
	EDBG1_CDC_MODULE, &config_uart1) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance1);
1000bb1a:	4b6b      	ldr	r3, [pc, #428]	; (1000bcc8 <main+0x2a0>)
1000bb1c:	469a      	mov	sl, r3
1000bb1e:	0018      	movs	r0, r3
1000bb20:	4b6c      	ldr	r3, [pc, #432]	; (1000bcd4 <main+0x2ac>)
1000bb22:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance1);
1000bb24:	4650      	mov	r0, sl
1000bb26:	4b6c      	ldr	r3, [pc, #432]	; (1000bcd8 <main+0x2b0>)
1000bb28:	4798      	blx	r3
	ble_advertise();
	
	//! [setup_usart]
	configure_usart();
	//! [setup_usart]
	string[0] = 0x88;
1000bb2a:	4c6c      	ldr	r4, [pc, #432]	; (1000bcdc <main+0x2b4>)
1000bb2c:	2388      	movs	r3, #136	; 0x88
1000bb2e:	7023      	strb	r3, [r4, #0]
	string[1] = 0x88;
1000bb30:	7063      	strb	r3, [r4, #1]
	string[2] = 0x88;
1000bb32:	70a3      	strb	r3, [r4, #2]
	string[3] = 0x88;
1000bb34:	70e3      	strb	r3, [r4, #3]
	string[4] = 0x88;
1000bb36:	7123      	strb	r3, [r4, #4]
	string[5] = 0x88;
1000bb38:	7163      	strb	r3, [r4, #5]
	string[6] = 0x88;
1000bb3a:	71a3      	strb	r3, [r4, #6]
	string[7] = 0x88;
1000bb3c:	71e3      	strb	r3, [r4, #7]
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000bb3e:	ad06      	add	r5, sp, #24
1000bb40:	0028      	movs	r0, r5
1000bb42:	4f67      	ldr	r7, [pc, #412]	; (1000bce0 <main+0x2b8>)
1000bb44:	47b8      	blx	r7
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART1TX_DMA_PERIPHERAL;
1000bb46:	2304      	movs	r3, #4
1000bb48:	732b      	strb	r3, [r5, #12]
	config.des.enable_inc_addr = false;
1000bb4a:	2600      	movs	r6, #0
1000bb4c:	72ee      	strb	r6, [r5, #11]
	config.src.periph = UART1TX_DMA_PERIPHERAL;
1000bb4e:	70eb      	strb	r3, [r5, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000bb50:	4b64      	ldr	r3, [pc, #400]	; (1000bce4 <main+0x2bc>)
1000bb52:	4698      	mov	r8, r3
1000bb54:	0029      	movs	r1, r5
1000bb56:	0018      	movs	r0, r3
1000bb58:	4b63      	ldr	r3, [pc, #396]	; (1000bce8 <main+0x2c0>)
1000bb5a:	469b      	mov	fp, r3
1000bb5c:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000bb5e:	0028      	movs	r0, r5
1000bb60:	47b8      	blx	r7
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART1RX_DMA_PERIPHERAL;
1000bb62:	2303      	movs	r3, #3
1000bb64:	4699      	mov	r9, r3
1000bb66:	70eb      	strb	r3, [r5, #3]
	config.src.enable_inc_addr = false;
1000bb68:	70ae      	strb	r6, [r5, #2]
	config.src.periph_delay = 1;
1000bb6a:	2701      	movs	r7, #1
1000bb6c:	2301      	movs	r3, #1
1000bb6e:	712b      	strb	r3, [r5, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000bb70:	4e5e      	ldr	r6, [pc, #376]	; (1000bcec <main+0x2c4>)
1000bb72:	0029      	movs	r1, r5
1000bb74:	0030      	movs	r0, r6
1000bb76:	47d8      	blx	fp
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bb78:	495d      	ldr	r1, [pc, #372]	; (1000bcf0 <main+0x2c8>)
1000bb7a:	7b0b      	ldrb	r3, [r1, #12]
1000bb7c:	433b      	orrs	r3, r7
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bb7e:	2002      	movs	r0, #2
1000bb80:	4303      	orrs	r3, r0
1000bb82:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bb84:	68cb      	ldr	r3, [r1, #12]
1000bb86:	464a      	mov	r2, r9
1000bb88:	4013      	ands	r3, r2
1000bb8a:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bb8c:	2306      	movs	r3, #6
1000bb8e:	469b      	mov	fp, r3
1000bb90:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string;
1000bb92:	600c      	str	r4, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance1.hw->TRANSMIT_DATA.reg);
1000bb94:	4653      	mov	r3, sl
1000bb96:	681b      	ldr	r3, [r3, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
1000bb98:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bb9a:	4d56      	ldr	r5, [pc, #344]	; (1000bcf4 <main+0x2cc>)
1000bb9c:	7b2a      	ldrb	r2, [r5, #12]
1000bb9e:	433a      	orrs	r2, r7
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bba0:	4302      	orrs	r2, r0
1000bba2:	732a      	strb	r2, [r5, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bba4:	464a      	mov	r2, r9
1000bba6:	68e8      	ldr	r0, [r5, #12]
1000bba8:	4002      	ands	r2, r0
1000bbaa:	60ea      	str	r2, [r5, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bbac:	465a      	mov	r2, fp
1000bbae:	60aa      	str	r2, [r5, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
1000bbb0:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000bbb2:	602b      	str	r3, [r5, #0]
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
1000bbb4:	606c      	str	r4, [r5, #4]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]
	
	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000bbb6:	4640      	mov	r0, r8
1000bbb8:	4c4f      	ldr	r4, [pc, #316]	; (1000bcf8 <main+0x2d0>)
1000bbba:	47a0      	blx	r4
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000bbbc:	0029      	movs	r1, r5
1000bbbe:	0030      	movs	r0, r6
1000bbc0:	47a0      	blx	r4
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000bbc2:	4b4e      	ldr	r3, [pc, #312]	; (1000bcfc <main+0x2d4>)
1000bbc4:	4642      	mov	r2, r8
1000bbc6:	6053      	str	r3, [r2, #4]
1000bbc8:	4b4d      	ldr	r3, [pc, #308]	; (1000bd00 <main+0x2d8>)
1000bbca:	6073      	str	r3, [r6, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000bbcc:	2324      	movs	r3, #36	; 0x24
1000bbce:	5cd2      	ldrb	r2, [r2, r3]
1000bbd0:	433a      	orrs	r2, r7
1000bbd2:	4641      	mov	r1, r8
1000bbd4:	54ca      	strb	r2, [r1, r3]
1000bbd6:	5cf2      	ldrb	r2, [r6, r3]
1000bbd8:	4317      	orrs	r7, r2
1000bbda:	54f7      	strb	r7, [r6, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bbdc:	2280      	movs	r2, #128	; 0x80
1000bbde:	0212      	lsls	r2, r2, #8
1000bbe0:	4b48      	ldr	r3, [pc, #288]	; (1000bd04 <main+0x2dc>)
1000bbe2:	601a      	str	r2, [r3, #0]
	//! [configure_callback]
	//! [setup_init]

	//! [main]
	//! [main_1]
	dma_start_transfer_job(&uart_dma_resource_rx);
1000bbe4:	0030      	movs	r0, r6
1000bbe6:	4b48      	ldr	r3, [pc, #288]	; (1000bd08 <main+0x2e0>)
1000bbe8:	4798      	blx	r3
	//! [main_1]
	
	
	while(1) {
		ble_event_task(655);  // 655: 10 min
1000bbea:	4c48      	ldr	r4, [pc, #288]	; (1000bd0c <main+0x2e4>)
		if (Timer_Flag & Temp_Notification_Flag)
1000bbec:	4d48      	ldr	r5, [pc, #288]	; (1000bd10 <main+0x2e8>)
1000bbee:	4e49      	ldr	r6, [pc, #292]	; (1000bd14 <main+0x2ec>)
	dma_start_transfer_job(&uart_dma_resource_rx);
	//! [main_1]
	
	
	while(1) {
		ble_event_task(655);  // 655: 10 min
1000bbf0:	4849      	ldr	r0, [pc, #292]	; (1000bd18 <main+0x2f0>)
1000bbf2:	47a0      	blx	r4
		if (Timer_Flag & Temp_Notification_Flag)
1000bbf4:	782a      	ldrb	r2, [r5, #0]
1000bbf6:	7833      	ldrb	r3, [r6, #0]
1000bbf8:	b2db      	uxtb	r3, r3
1000bbfa:	2a00      	cmp	r2, #0
1000bbfc:	d0f8      	beq.n	1000bbf0 <main+0x1c8>
1000bbfe:	2b00      	cmp	r3, #0
1000bc00:	d0f6      	beq.n	1000bbf0 <main+0x1c8>
/* Sending the temperature value after reading it from IO1 Xplained Pro */
static void htp_temperature_send(void) {
	at_ble_prf_date_time_t timestamp;
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	temperature = at30tse_read_temperature();
1000bc02:	4b1f      	ldr	r3, [pc, #124]	; (1000bc80 <main+0x258>)
1000bc04:	4798      	blx	r3
1000bc06:	4b1f      	ldr	r3, [pc, #124]	; (1000bc84 <main+0x25c>)
1000bc08:	4798      	blx	r3
1000bc0a:	9005      	str	r0, [sp, #20]
#ifdef HTPT_FLAG_FAHRENHEIT
	temperature = (((temperature * 9.0)/5.0) + 32.0);
#endif
	/* Read Temperature Value from IO1 Xplained Pro */
	timestamp.day = 1;
1000bc0c:	ae06      	add	r6, sp, #24
1000bc0e:	2701      	movs	r7, #1
1000bc10:	70f7      	strb	r7, [r6, #3]
	timestamp.hour = 9;
1000bc12:	2309      	movs	r3, #9
1000bc14:	7133      	strb	r3, [r6, #4]
	timestamp.min = 2;
1000bc16:	3b07      	subs	r3, #7
1000bc18:	7173      	strb	r3, [r6, #5]
	timestamp.month = 8;
1000bc1a:	3306      	adds	r3, #6
1000bc1c:	70b3      	strb	r3, [r6, #2]
	timestamp.sec = 36;
1000bc1e:	331c      	adds	r3, #28
1000bc20:	71b3      	strb	r3, [r6, #6]
	timestamp.year = 15;
1000bc22:	3b15      	subs	r3, #21
1000bc24:	8033      	strh	r3, [r6, #0]
	/* Read Temperature Value from IO1 Xplained Pro */
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)temperature),
1000bc26:	493d      	ldr	r1, [pc, #244]	; (1000bd1c <main+0x2f4>)
1000bc28:	4b3d      	ldr	r3, [pc, #244]	; (1000bd20 <main+0x2f8>)
1000bc2a:	4798      	blx	r3
1000bc2c:	4b16      	ldr	r3, [pc, #88]	; (1000bc88 <main+0x260>)
1000bc2e:	4798      	blx	r3
1000bc30:	23ff      	movs	r3, #255	; 0xff
1000bc32:	061b      	lsls	r3, r3, #24
1000bc34:	4318      	orrs	r0, r3
1000bc36:	9700      	str	r7, [sp, #0]
1000bc38:	2301      	movs	r3, #1
1000bc3a:	2204      	movs	r2, #4
1000bc3c:	0031      	movs	r1, r6
1000bc3e:	4e39      	ldr	r6, [pc, #228]	; (1000bd24 <main+0x2fc>)
1000bc40:	47b0      	blx	r6
1000bc42:	2800      	cmp	r0, #0
1000bc44:	d1d3      	bne.n	1000bbee <main+0x1c6>
	) == AT_BLE_SUCCESS)
	{
#ifdef HTPT_FLAG_FAHRENHEIT
		printf("Temperature: %d Fahrenheit", (uint16_t)temperature);
#else
		printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
1000bc46:	9805      	ldr	r0, [sp, #20]
1000bc48:	4b0f      	ldr	r3, [pc, #60]	; (1000bc88 <main+0x260>)
1000bc4a:	4798      	blx	r3
1000bc4c:	b281      	uxth	r1, r0
1000bc4e:	480f      	ldr	r0, [pc, #60]	; (1000bc8c <main+0x264>)
1000bc50:	4b0f      	ldr	r3, [pc, #60]	; (1000bc90 <main+0x268>)
1000bc52:	4798      	blx	r3
1000bc54:	e7cb      	b.n	1000bbee <main+0x1c6>
1000bc56:	46c0      	nop			; (mov r8, r8)
1000bc58:	1000b1dd 	.word	0x1000b1dd
1000bc5c:	1000b6f1 	.word	0x1000b6f1
1000bc60:	1000aed1 	.word	0x1000aed1
1000bc64:	1000adb1 	.word	0x1000adb1
1000bc68:	1000b8c1 	.word	0x1000b8c1
1000bc6c:	1000addd 	.word	0x1000addd
1000bc70:	1000ae11 	.word	0x1000ae11
1000bc74:	1000a5c1 	.word	0x1000a5c1
1000bc78:	100080e9 	.word	0x100080e9
1000bc7c:	100081ad 	.word	0x100081ad
1000bc80:	100081d1 	.word	0x100081d1
1000bc84:	1000feed 	.word	0x1000feed
1000bc88:	1000ec0d 	.word	0x1000ec0d
1000bc8c:	10012294 	.word	0x10012294
1000bc90:	10010539 	.word	0x10010539
1000bc94:	100122b0 	.word	0x100122b0
1000bc98:	10014c34 	.word	0x10014c34
1000bc9c:	1000d085 	.word	0x1000d085
1000bca0:	10014cdc 	.word	0x10014cdc
1000bca4:	100122e4 	.word	0x100122e4
1000bca8:	10012304 	.word	0x10012304
1000bcac:	100120f8 	.word	0x100120f8
1000bcb0:	1000a4f1 	.word	0x1000a4f1
1000bcb4:	1001233c 	.word	0x1001233c
1000bcb8:	100123a0 	.word	0x100123a0
1000bcbc:	1001236c 	.word	0x1001236c
1000bcc0:	1000b95d 	.word	0x1000b95d
1000bcc4:	10009845 	.word	0x10009845
1000bcc8:	10014cb8 	.word	0x10014cb8
1000bccc:	10009871 	.word	0x10009871
1000bcd0:	40005000 	.word	0x40005000
1000bcd4:	10009acd 	.word	0x10009acd
1000bcd8:	10009b05 	.word	0x10009b05
1000bcdc:	10013f9c 	.word	0x10013f9c
1000bce0:	1000838d 	.word	0x1000838d
1000bce4:	10014c48 	.word	0x10014c48
1000bce8:	100084dd 	.word	0x100084dd
1000bcec:	10014c78 	.word	0x10014c78
1000bcf0:	10014ca8 	.word	0x10014ca8
1000bcf4:	10014c38 	.word	0x10014c38
1000bcf8:	100083bd 	.word	0x100083bd
1000bcfc:	1000b8ad 	.word	0x1000b8ad
1000bd00:	1000b9f1 	.word	0x1000b9f1
1000bd04:	e000e100 	.word	0xe000e100
1000bd08:	10008465 	.word	0x10008465
1000bd0c:	1000ad05 	.word	0x1000ad05
1000bd10:	10013fa2 	.word	0x10013fa2
1000bd14:	10013fa3 	.word	0x10013fa3
1000bd18:	0000028f 	.word	0x0000028f
1000bd1c:	41200000 	.word	0x41200000
1000bd20:	1000ec79 	.word	0x1000ec79
1000bd24:	1000d0b1 	.word	0x1000d0b1

1000bd28 <internal_event_post>:
1000bd28:	b570      	push	{r4, r5, r6, lr}
1000bd2a:	4d12      	ldr	r5, [pc, #72]	; (1000bd74 <internal_event_post+0x4c>)
1000bd2c:	682c      	ldr	r4, [r5, #0]
1000bd2e:	2c00      	cmp	r4, #0
1000bd30:	d014      	beq.n	1000bd5c <internal_event_post+0x34>
1000bd32:	6826      	ldr	r6, [r4, #0]
1000bd34:	60e2      	str	r2, [r4, #12]
1000bd36:	602e      	str	r6, [r5, #0]
1000bd38:	2500      	movs	r5, #0
1000bd3a:	4a0f      	ldr	r2, [pc, #60]	; (1000bd78 <internal_event_post+0x50>)
1000bd3c:	8123      	strh	r3, [r4, #8]
1000bd3e:	6813      	ldr	r3, [r2, #0]
1000bd40:	6025      	str	r5, [r4, #0]
1000bd42:	80a0      	strh	r0, [r4, #4]
1000bd44:	80e1      	strh	r1, [r4, #6]
1000bd46:	42ab      	cmp	r3, r5
1000bd48:	d101      	bne.n	1000bd4e <internal_event_post+0x26>
1000bd4a:	6014      	str	r4, [r2, #0]
1000bd4c:	e011      	b.n	1000bd72 <internal_event_post+0x4a>
1000bd4e:	681a      	ldr	r2, [r3, #0]
1000bd50:	2a00      	cmp	r2, #0
1000bd52:	d001      	beq.n	1000bd58 <internal_event_post+0x30>
1000bd54:	1c13      	adds	r3, r2, #0
1000bd56:	e7fa      	b.n	1000bd4e <internal_event_post+0x26>
1000bd58:	601c      	str	r4, [r3, #0]
1000bd5a:	e00a      	b.n	1000bd72 <internal_event_post+0x4a>
1000bd5c:	b2c4      	uxtb	r4, r0
1000bd5e:	2c00      	cmp	r4, #0
1000bd60:	d107      	bne.n	1000bd72 <internal_event_post+0x4a>
1000bd62:	4c06      	ldr	r4, [pc, #24]	; (1000bd7c <internal_event_post+0x54>)
1000bd64:	60e2      	str	r2, [r4, #12]
1000bd66:	2201      	movs	r2, #1
1000bd68:	8123      	strh	r3, [r4, #8]
1000bd6a:	4b05      	ldr	r3, [pc, #20]	; (1000bd80 <internal_event_post+0x58>)
1000bd6c:	80a0      	strh	r0, [r4, #4]
1000bd6e:	80e1      	strh	r1, [r4, #6]
1000bd70:	701a      	strb	r2, [r3, #0]
1000bd72:	bd70      	pop	{r4, r5, r6, pc}
1000bd74:	10013fbc 	.word	0x10013fbc
1000bd78:	10013fb8 	.word	0x10013fb8
1000bd7c:	10013fa4 	.word	0x10013fa4
1000bd80:	10013fb4 	.word	0x10013fb4

1000bd84 <internal_event_init>:
1000bd84:	b510      	push	{r4, lr}
1000bd86:	4b08      	ldr	r3, [pc, #32]	; (1000bda8 <internal_event_init+0x24>)
1000bd88:	0900      	lsrs	r0, r0, #4
1000bd8a:	0100      	lsls	r0, r0, #4
1000bd8c:	681a      	ldr	r2, [r3, #0]
1000bd8e:	1808      	adds	r0, r1, r0
1000bd90:	4281      	cmp	r1, r0
1000bd92:	d003      	beq.n	1000bd9c <internal_event_init+0x18>
1000bd94:	600a      	str	r2, [r1, #0]
1000bd96:	1c0a      	adds	r2, r1, #0
1000bd98:	3110      	adds	r1, #16
1000bd9a:	e7f9      	b.n	1000bd90 <internal_event_init+0xc>
1000bd9c:	601a      	str	r2, [r3, #0]
1000bd9e:	2200      	movs	r2, #0
1000bda0:	4b02      	ldr	r3, [pc, #8]	; (1000bdac <internal_event_init+0x28>)
1000bda2:	601a      	str	r2, [r3, #0]
1000bda4:	bd10      	pop	{r4, pc}
1000bda6:	46c0      	nop			; (mov r8, r8)
1000bda8:	10013fbc 	.word	0x10013fbc
1000bdac:	10013fb8 	.word	0x10013fb8

1000bdb0 <special_events_handler>:
1000bdb0:	b538      	push	{r3, r4, r5, lr}
1000bdb2:	4c1b      	ldr	r4, [pc, #108]	; (1000be20 <special_events_handler+0x70>)
1000bdb4:	1c03      	adds	r3, r0, #0
1000bdb6:	8825      	ldrh	r5, [r4, #0]
1000bdb8:	1c08      	adds	r0, r1, #0
1000bdba:	1c21      	adds	r1, r4, #0
1000bdbc:	429d      	cmp	r5, r3
1000bdbe:	d107      	bne.n	1000bdd0 <special_events_handler+0x20>
1000bdc0:	88a5      	ldrh	r5, [r4, #4]
1000bdc2:	4285      	cmp	r5, r0
1000bdc4:	d104      	bne.n	1000bdd0 <special_events_handler+0x20>
1000bdc6:	2301      	movs	r3, #1
1000bdc8:	425b      	negs	r3, r3
1000bdca:	8023      	strh	r3, [r4, #0]
1000bdcc:	60a2      	str	r2, [r4, #8]
1000bdce:	e009      	b.n	1000bde4 <special_events_handler+0x34>
1000bdd0:	884c      	ldrh	r4, [r1, #2]
1000bdd2:	429c      	cmp	r4, r3
1000bdd4:	d10a      	bne.n	1000bdec <special_events_handler+0x3c>
1000bdd6:	888c      	ldrh	r4, [r1, #4]
1000bdd8:	4284      	cmp	r4, r0
1000bdda:	d107      	bne.n	1000bdec <special_events_handler+0x3c>
1000bddc:	2301      	movs	r3, #1
1000bdde:	425b      	negs	r3, r3
1000bde0:	804b      	strh	r3, [r1, #2]
1000bde2:	608a      	str	r2, [r1, #8]
1000bde4:	4b0f      	ldr	r3, [pc, #60]	; (1000be24 <special_events_handler+0x74>)
1000bde6:	4798      	blx	r3
1000bde8:	2001      	movs	r0, #1
1000bdea:	e017      	b.n	1000be1c <special_events_handler+0x6c>
1000bdec:	490e      	ldr	r1, [pc, #56]	; (1000be28 <special_events_handler+0x78>)
1000bdee:	428b      	cmp	r3, r1
1000bdf0:	d00e      	beq.n	1000be10 <special_events_handler+0x60>
1000bdf2:	490e      	ldr	r1, [pc, #56]	; (1000be2c <special_events_handler+0x7c>)
1000bdf4:	428b      	cmp	r3, r1
1000bdf6:	d007      	beq.n	1000be08 <special_events_handler+0x58>
1000bdf8:	490d      	ldr	r1, [pc, #52]	; (1000be30 <special_events_handler+0x80>)
1000bdfa:	2000      	movs	r0, #0
1000bdfc:	428b      	cmp	r3, r1
1000bdfe:	d10d      	bne.n	1000be1c <special_events_handler+0x6c>
1000be00:	1c10      	adds	r0, r2, #0
1000be02:	4b0c      	ldr	r3, [pc, #48]	; (1000be34 <special_events_handler+0x84>)
1000be04:	4798      	blx	r3
1000be06:	e7ef      	b.n	1000bde8 <special_events_handler+0x38>
1000be08:	1c11      	adds	r1, r2, #0
1000be0a:	4b0b      	ldr	r3, [pc, #44]	; (1000be38 <special_events_handler+0x88>)
1000be0c:	2200      	movs	r2, #0
1000be0e:	e002      	b.n	1000be16 <special_events_handler+0x66>
1000be10:	1c11      	adds	r1, r2, #0
1000be12:	2200      	movs	r2, #0
1000be14:	4b09      	ldr	r3, [pc, #36]	; (1000be3c <special_events_handler+0x8c>)
1000be16:	4798      	blx	r3
1000be18:	4243      	negs	r3, r0
1000be1a:	4158      	adcs	r0, r3
1000be1c:	bd38      	pop	{r3, r4, r5, pc}
1000be1e:	46c0      	nop			; (mov r8, r8)
1000be20:	10014ce0 	.word	0x10014ce0
1000be24:	1000d1bd 	.word	0x1000d1bd
1000be28:	00000e13 	.word	0x00000e13
1000be2c:	00000e15 	.word	0x00000e15
1000be30:	00000e01 	.word	0x00000e01
1000be34:	1000d52d 	.word	0x1000d52d
1000be38:	1000d6ed 	.word	0x1000d6ed
1000be3c:	1000d7c5 	.word	0x1000d7c5

1000be40 <at_ble_event_get>:
1000be40:	2300      	movs	r3, #0
1000be42:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be44:	b087      	sub	sp, #28
1000be46:	9204      	str	r2, [sp, #16]
1000be48:	7003      	strb	r3, [r0, #0]
1000be4a:	9b04      	ldr	r3, [sp, #16]
1000be4c:	9003      	str	r0, [sp, #12]
1000be4e:	3b01      	subs	r3, #1
1000be50:	1c0d      	adds	r5, r1, #0
1000be52:	9305      	str	r3, [sp, #20]
1000be54:	3303      	adds	r3, #3
1000be56:	d802      	bhi.n	1000be5e <at_ble_event_get+0x1e>
1000be58:	9804      	ldr	r0, [sp, #16]
1000be5a:	4bae      	ldr	r3, [pc, #696]	; (1000c114 <at_ble_event_get+0x2d4>)
1000be5c:	4798      	blx	r3
1000be5e:	9b05      	ldr	r3, [sp, #20]
1000be60:	4cad      	ldr	r4, [pc, #692]	; (1000c118 <at_ble_event_get+0x2d8>)
1000be62:	3303      	adds	r3, #3
1000be64:	d902      	bls.n	1000be6c <at_ble_event_get+0x2c>
1000be66:	2300      	movs	r3, #0
1000be68:	9302      	str	r3, [sp, #8]
1000be6a:	e015      	b.n	1000be98 <at_ble_event_get+0x58>
1000be6c:	2300      	movs	r3, #0
1000be6e:	9302      	str	r3, [sp, #8]
1000be70:	6823      	ldr	r3, [r4, #0]
1000be72:	2b00      	cmp	r3, #0
1000be74:	d113      	bne.n	1000be9e <at_ble_event_get+0x5e>
1000be76:	9b02      	ldr	r3, [sp, #8]
1000be78:	2bd0      	cmp	r3, #208	; 0xd0
1000be7a:	d100      	bne.n	1000be7e <at_ble_event_get+0x3e>
1000be7c:	e2da      	b.n	1000c434 <at_ble_event_get+0x5f4>
1000be7e:	9804      	ldr	r0, [sp, #16]
1000be80:	4ba6      	ldr	r3, [pc, #664]	; (1000c11c <at_ble_event_get+0x2dc>)
1000be82:	4798      	blx	r3
1000be84:	9002      	str	r0, [sp, #8]
1000be86:	2802      	cmp	r0, #2
1000be88:	d1f2      	bne.n	1000be70 <at_ble_event_get+0x30>
1000be8a:	e03f      	b.n	1000bf0c <at_ble_event_get+0xcc>
1000be8c:	9804      	ldr	r0, [sp, #16]
1000be8e:	4ba3      	ldr	r3, [pc, #652]	; (1000c11c <at_ble_event_get+0x2dc>)
1000be90:	4798      	blx	r3
1000be92:	9002      	str	r0, [sp, #8]
1000be94:	2802      	cmp	r0, #2
1000be96:	d039      	beq.n	1000bf0c <at_ble_event_get+0xcc>
1000be98:	6823      	ldr	r3, [r4, #0]
1000be9a:	2b00      	cmp	r3, #0
1000be9c:	d0f6      	beq.n	1000be8c <at_ble_event_get+0x4c>
1000be9e:	9b02      	ldr	r3, [sp, #8]
1000bea0:	2bd0      	cmp	r3, #208	; 0xd0
1000bea2:	d100      	bne.n	1000bea6 <at_ble_event_get+0x66>
1000bea4:	e2c6      	b.n	1000c434 <at_ble_event_get+0x5f4>
1000bea6:	9b02      	ldr	r3, [sp, #8]
1000bea8:	3b03      	subs	r3, #3
1000beaa:	1e5a      	subs	r2, r3, #1
1000beac:	4193      	sbcs	r3, r2
1000beae:	9a02      	ldr	r2, [sp, #8]
1000beb0:	425b      	negs	r3, r3
1000beb2:	401a      	ands	r2, r3
1000beb4:	6823      	ldr	r3, [r4, #0]
1000beb6:	9202      	str	r2, [sp, #8]
1000beb8:	2b00      	cmp	r3, #0
1000beba:	d100      	bne.n	1000bebe <at_ble_event_get+0x7e>
1000bebc:	e2c2      	b.n	1000c444 <at_ble_event_get+0x604>
1000bebe:	681a      	ldr	r2, [r3, #0]
1000bec0:	68de      	ldr	r6, [r3, #12]
1000bec2:	6022      	str	r2, [r4, #0]
1000bec4:	88da      	ldrh	r2, [r3, #6]
1000bec6:	9201      	str	r2, [sp, #4]
1000bec8:	4a95      	ldr	r2, [pc, #596]	; (1000c120 <at_ble_event_get+0x2e0>)
1000beca:	889c      	ldrh	r4, [r3, #4]
1000becc:	6811      	ldr	r1, [r2, #0]
1000bece:	6013      	str	r3, [r2, #0]
1000bed0:	6019      	str	r1, [r3, #0]
1000bed2:	4b94      	ldr	r3, [pc, #592]	; (1000c124 <at_ble_event_get+0x2e4>)
1000bed4:	781b      	ldrb	r3, [r3, #0]
1000bed6:	2b01      	cmp	r3, #1
1000bed8:	d10f      	bne.n	1000befa <at_ble_event_get+0xba>
1000beda:	4b93      	ldr	r3, [pc, #588]	; (1000c128 <at_ble_event_get+0x2e8>)
1000bedc:	4a92      	ldr	r2, [pc, #584]	; (1000c128 <at_ble_event_get+0x2e8>)
1000bede:	8898      	ldrh	r0, [r3, #4]
1000bee0:	88d9      	ldrh	r1, [r3, #6]
1000bee2:	68d2      	ldr	r2, [r2, #12]
1000bee4:	891b      	ldrh	r3, [r3, #8]
1000bee6:	4f91      	ldr	r7, [pc, #580]	; (1000c12c <at_ble_event_get+0x2ec>)
1000bee8:	47b8      	blx	r7
1000beea:	2210      	movs	r2, #16
1000beec:	4b90      	ldr	r3, [pc, #576]	; (1000c130 <at_ble_event_get+0x2f0>)
1000beee:	488e      	ldr	r0, [pc, #568]	; (1000c128 <at_ble_event_get+0x2e8>)
1000bef0:	2100      	movs	r1, #0
1000bef2:	4798      	blx	r3
1000bef4:	2300      	movs	r3, #0
1000bef6:	4a8b      	ldr	r2, [pc, #556]	; (1000c124 <at_ble_event_get+0x2e4>)
1000bef8:	7013      	strb	r3, [r2, #0]
1000befa:	9b02      	ldr	r3, [sp, #8]
1000befc:	2b00      	cmp	r3, #0
1000befe:	d114      	bne.n	1000bf2a <at_ble_event_get+0xea>
1000bf00:	4b8c      	ldr	r3, [pc, #560]	; (1000c134 <at_ble_event_get+0x2f4>)
1000bf02:	429c      	cmp	r4, r3
1000bf04:	d009      	beq.n	1000bf1a <at_ble_event_get+0xda>
1000bf06:	4b8c      	ldr	r3, [pc, #560]	; (1000c138 <at_ble_event_get+0x2f8>)
1000bf08:	429c      	cmp	r4, r3
1000bf0a:	d127      	bne.n	1000bf5c <at_ble_event_get+0x11c>
1000bf0c:	233a      	movs	r3, #58	; 0x3a
1000bf0e:	9a03      	ldr	r2, [sp, #12]
1000bf10:	7013      	strb	r3, [r2, #0]
1000bf12:	2300      	movs	r3, #0
1000bf14:	9302      	str	r3, [sp, #8]
1000bf16:	1c1d      	adds	r5, r3, #0
1000bf18:	e007      	b.n	1000bf2a <at_ble_event_get+0xea>
1000bf1a:	9b01      	ldr	r3, [sp, #4]
1000bf1c:	42a3      	cmp	r3, r4
1000bf1e:	d000      	beq.n	1000bf22 <at_ble_event_get+0xe2>
1000bf20:	e28a      	b.n	1000c438 <at_ble_event_get+0x5f8>
1000bf22:	2338      	movs	r3, #56	; 0x38
1000bf24:	9a03      	ldr	r2, [sp, #12]
1000bf26:	7013      	strb	r3, [r2, #0]
1000bf28:	602e      	str	r6, [r5, #0]
1000bf2a:	9b03      	ldr	r3, [sp, #12]
1000bf2c:	781b      	ldrb	r3, [r3, #0]
1000bf2e:	2b3b      	cmp	r3, #59	; 0x3b
1000bf30:	d101      	bne.n	1000bf36 <at_ble_event_get+0xf6>
1000bf32:	4b82      	ldr	r3, [pc, #520]	; (1000c13c <at_ble_event_get+0x2fc>)
1000bf34:	4798      	blx	r3
1000bf36:	9b03      	ldr	r3, [sp, #12]
1000bf38:	781b      	ldrb	r3, [r3, #0]
1000bf3a:	2b3b      	cmp	r3, #59	; 0x3b
1000bf3c:	d003      	beq.n	1000bf46 <at_ble_event_get+0x106>
1000bf3e:	9b05      	ldr	r3, [sp, #20]
1000bf40:	3303      	adds	r3, #3
1000bf42:	d904      	bls.n	1000bf4e <at_ble_event_get+0x10e>
1000bf44:	e283      	b.n	1000c44e <at_ble_event_get+0x60e>
1000bf46:	9b02      	ldr	r3, [sp, #8]
1000bf48:	2b00      	cmp	r3, #0
1000bf4a:	d088      	beq.n	1000be5e <at_ble_event_get+0x1e>
1000bf4c:	e7f7      	b.n	1000bf3e <at_ble_event_get+0xfe>
1000bf4e:	9b02      	ldr	r3, [sp, #8]
1000bf50:	2bd0      	cmp	r3, #208	; 0xd0
1000bf52:	d100      	bne.n	1000bf56 <at_ble_event_get+0x116>
1000bf54:	e27b      	b.n	1000c44e <at_ble_event_get+0x60e>
1000bf56:	4b7a      	ldr	r3, [pc, #488]	; (1000c140 <at_ble_event_get+0x300>)
1000bf58:	4798      	blx	r3
1000bf5a:	e278      	b.n	1000c44e <at_ble_event_get+0x60e>
1000bf5c:	9b01      	ldr	r3, [sp, #4]
1000bf5e:	2bbb      	cmp	r3, #187	; 0xbb
1000bf60:	d125      	bne.n	1000bfae <at_ble_event_get+0x16e>
1000bf62:	2cbb      	cmp	r4, #187	; 0xbb
1000bf64:	d123      	bne.n	1000bfae <at_ble_event_get+0x16e>
1000bf66:	466b      	mov	r3, sp
1000bf68:	891b      	ldrh	r3, [r3, #8]
1000bf6a:	80ab      	strh	r3, [r5, #4]
1000bf6c:	78b3      	ldrb	r3, [r6, #2]
1000bf6e:	7872      	ldrb	r2, [r6, #1]
1000bf70:	78f0      	ldrb	r0, [r6, #3]
1000bf72:	021b      	lsls	r3, r3, #8
1000bf74:	4313      	orrs	r3, r2
1000bf76:	7971      	ldrb	r1, [r6, #5]
1000bf78:	7932      	ldrb	r2, [r6, #4]
1000bf7a:	70a8      	strb	r0, [r5, #2]
1000bf7c:	4871      	ldr	r0, [pc, #452]	; (1000c144 <at_ble_event_get+0x304>)
1000bf7e:	802b      	strh	r3, [r5, #0]
1000bf80:	4283      	cmp	r3, r0
1000bf82:	d806      	bhi.n	1000bf92 <at_ble_event_get+0x152>
1000bf84:	4a70      	ldr	r2, [pc, #448]	; (1000c148 <at_ble_event_get+0x308>)
1000bf86:	4293      	cmp	r3, r2
1000bf88:	d20b      	bcs.n	1000bfa2 <at_ble_event_get+0x162>
1000bf8a:	4a70      	ldr	r2, [pc, #448]	; (1000c14c <at_ble_event_get+0x30c>)
1000bf8c:	4293      	cmp	r3, r2
1000bf8e:	d008      	beq.n	1000bfa2 <at_ble_event_get+0x162>
1000bf90:	e009      	b.n	1000bfa6 <at_ble_event_get+0x166>
1000bf92:	486f      	ldr	r0, [pc, #444]	; (1000c150 <at_ble_event_get+0x310>)
1000bf94:	4283      	cmp	r3, r0
1000bf96:	d106      	bne.n	1000bfa6 <at_ble_event_get+0x166>
1000bf98:	020b      	lsls	r3, r1, #8
1000bf9a:	4313      	orrs	r3, r2
1000bf9c:	80ab      	strh	r3, [r5, #4]
1000bf9e:	2337      	movs	r3, #55	; 0x37
1000bfa0:	e002      	b.n	1000bfa8 <at_ble_event_get+0x168>
1000bfa2:	2336      	movs	r3, #54	; 0x36
1000bfa4:	e000      	b.n	1000bfa8 <at_ble_event_get+0x168>
1000bfa6:	2300      	movs	r3, #0
1000bfa8:	9a03      	ldr	r2, [sp, #12]
1000bfaa:	7013      	strb	r3, [r2, #0]
1000bfac:	e7bd      	b.n	1000bf2a <at_ble_event_get+0xea>
1000bfae:	4b69      	ldr	r3, [pc, #420]	; (1000c154 <at_ble_event_get+0x314>)
1000bfb0:	429c      	cmp	r4, r3
1000bfb2:	d100      	bne.n	1000bfb6 <at_ble_event_get+0x176>
1000bfb4:	e144      	b.n	1000c240 <at_ble_event_get+0x400>
1000bfb6:	d865      	bhi.n	1000c084 <at_ble_event_get+0x244>
1000bfb8:	4b67      	ldr	r3, [pc, #412]	; (1000c158 <at_ble_event_get+0x318>)
1000bfba:	429c      	cmp	r4, r3
1000bfbc:	d100      	bne.n	1000bfc0 <at_ble_event_get+0x180>
1000bfbe:	e1d5      	b.n	1000c36c <at_ble_event_get+0x52c>
1000bfc0:	d82f      	bhi.n	1000c022 <at_ble_event_get+0x1e2>
1000bfc2:	4b66      	ldr	r3, [pc, #408]	; (1000c15c <at_ble_event_get+0x31c>)
1000bfc4:	429c      	cmp	r4, r3
1000bfc6:	d100      	bne.n	1000bfca <at_ble_event_get+0x18a>
1000bfc8:	e1e0      	b.n	1000c38c <at_ble_event_get+0x54c>
1000bfca:	d813      	bhi.n	1000bff4 <at_ble_event_get+0x1b4>
1000bfcc:	4b64      	ldr	r3, [pc, #400]	; (1000c160 <at_ble_event_get+0x320>)
1000bfce:	429c      	cmp	r4, r3
1000bfd0:	d100      	bne.n	1000bfd4 <at_ble_event_get+0x194>
1000bfd2:	e1a3      	b.n	1000c31c <at_ble_event_get+0x4dc>
1000bfd4:	d804      	bhi.n	1000bfe0 <at_ble_event_get+0x1a0>
1000bfd6:	2638      	movs	r6, #56	; 0x38
1000bfd8:	42b4      	cmp	r4, r6
1000bfda:	d100      	bne.n	1000bfde <at_ble_event_get+0x19e>
1000bfdc:	e225      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000bfde:	e117      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000bfe0:	4b60      	ldr	r3, [pc, #384]	; (1000c164 <at_ble_event_get+0x324>)
1000bfe2:	429c      	cmp	r4, r3
1000bfe4:	d100      	bne.n	1000bfe8 <at_ble_event_get+0x1a8>
1000bfe6:	e19f      	b.n	1000c328 <at_ble_event_get+0x4e8>
1000bfe8:	33fe      	adds	r3, #254	; 0xfe
1000bfea:	33ff      	adds	r3, #255	; 0xff
1000bfec:	429c      	cmp	r4, r3
1000bfee:	d100      	bne.n	1000bff2 <at_ble_event_get+0x1b2>
1000bff0:	e1d3      	b.n	1000c39a <at_ble_event_get+0x55a>
1000bff2:	e10d      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000bff4:	4b5c      	ldr	r3, [pc, #368]	; (1000c168 <at_ble_event_get+0x328>)
1000bff6:	429c      	cmp	r4, r3
1000bff8:	d100      	bne.n	1000bffc <at_ble_event_get+0x1bc>
1000bffa:	e1a9      	b.n	1000c350 <at_ble_event_get+0x510>
1000bffc:	d808      	bhi.n	1000c010 <at_ble_event_get+0x1d0>
1000bffe:	4b5b      	ldr	r3, [pc, #364]	; (1000c16c <at_ble_event_get+0x32c>)
1000c000:	429c      	cmp	r4, r3
1000c002:	d100      	bne.n	1000c006 <at_ble_event_get+0x1c6>
1000c004:	e196      	b.n	1000c334 <at_ble_event_get+0x4f4>
1000c006:	4b5a      	ldr	r3, [pc, #360]	; (1000c170 <at_ble_event_get+0x330>)
1000c008:	429c      	cmp	r4, r3
1000c00a:	d100      	bne.n	1000c00e <at_ble_event_get+0x1ce>
1000c00c:	e199      	b.n	1000c342 <at_ble_event_get+0x502>
1000c00e:	e0ff      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c010:	4b58      	ldr	r3, [pc, #352]	; (1000c174 <at_ble_event_get+0x334>)
1000c012:	429c      	cmp	r4, r3
1000c014:	d100      	bne.n	1000c018 <at_ble_event_get+0x1d8>
1000c016:	e1a2      	b.n	1000c35e <at_ble_event_get+0x51e>
1000c018:	4b57      	ldr	r3, [pc, #348]	; (1000c178 <at_ble_event_get+0x338>)
1000c01a:	429c      	cmp	r4, r3
1000c01c:	d100      	bne.n	1000c020 <at_ble_event_get+0x1e0>
1000c01e:	e1d4      	b.n	1000c3ca <at_ble_event_get+0x58a>
1000c020:	e0f6      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c022:	4b56      	ldr	r3, [pc, #344]	; (1000c17c <at_ble_event_get+0x33c>)
1000c024:	429c      	cmp	r4, r3
1000c026:	d100      	bne.n	1000c02a <at_ble_event_get+0x1ea>
1000c028:	e1c8      	b.n	1000c3bc <at_ble_event_get+0x57c>
1000c02a:	d812      	bhi.n	1000c052 <at_ble_event_get+0x212>
1000c02c:	4b54      	ldr	r3, [pc, #336]	; (1000c180 <at_ble_event_get+0x340>)
1000c02e:	429c      	cmp	r4, r3
1000c030:	d100      	bne.n	1000c034 <at_ble_event_get+0x1f4>
1000c032:	e1d1      	b.n	1000c3d8 <at_ble_event_get+0x598>
1000c034:	d804      	bhi.n	1000c040 <at_ble_event_get+0x200>
1000c036:	4b53      	ldr	r3, [pc, #332]	; (1000c184 <at_ble_event_get+0x344>)
1000c038:	429c      	cmp	r4, r3
1000c03a:	d100      	bne.n	1000c03e <at_ble_event_get+0x1fe>
1000c03c:	e19b      	b.n	1000c376 <at_ble_event_get+0x536>
1000c03e:	e0e7      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c040:	4b51      	ldr	r3, [pc, #324]	; (1000c188 <at_ble_event_get+0x348>)
1000c042:	429c      	cmp	r4, r3
1000c044:	d100      	bne.n	1000c048 <at_ble_event_get+0x208>
1000c046:	e1ad      	b.n	1000c3a4 <at_ble_event_get+0x564>
1000c048:	4b50      	ldr	r3, [pc, #320]	; (1000c18c <at_ble_event_get+0x34c>)
1000c04a:	429c      	cmp	r4, r3
1000c04c:	d100      	bne.n	1000c050 <at_ble_event_get+0x210>
1000c04e:	e1b0      	b.n	1000c3b2 <at_ble_event_get+0x572>
1000c050:	e0de      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c052:	4b4f      	ldr	r3, [pc, #316]	; (1000c190 <at_ble_event_get+0x350>)
1000c054:	429c      	cmp	r4, r3
1000c056:	d100      	bne.n	1000c05a <at_ble_event_get+0x21a>
1000c058:	e0e0      	b.n	1000c21c <at_ble_event_get+0x3dc>
1000c05a:	d809      	bhi.n	1000c070 <at_ble_event_get+0x230>
1000c05c:	3b08      	subs	r3, #8
1000c05e:	429c      	cmp	r4, r3
1000c060:	d100      	bne.n	1000c064 <at_ble_event_get+0x224>
1000c062:	e0d7      	b.n	1000c214 <at_ble_event_get+0x3d4>
1000c064:	4b4b      	ldr	r3, [pc, #300]	; (1000c194 <at_ble_event_get+0x354>)
1000c066:	2639      	movs	r6, #57	; 0x39
1000c068:	429c      	cmp	r4, r3
1000c06a:	d100      	bne.n	1000c06e <at_ble_event_get+0x22e>
1000c06c:	e1dd      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c06e:	e0cf      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c070:	23d1      	movs	r3, #209	; 0xd1
1000c072:	011b      	lsls	r3, r3, #4
1000c074:	429c      	cmp	r4, r3
1000c076:	d100      	bne.n	1000c07a <at_ble_event_get+0x23a>
1000c078:	e0d6      	b.n	1000c228 <at_ble_event_get+0x3e8>
1000c07a:	4b47      	ldr	r3, [pc, #284]	; (1000c198 <at_ble_event_get+0x358>)
1000c07c:	429c      	cmp	r4, r3
1000c07e:	d100      	bne.n	1000c082 <at_ble_event_get+0x242>
1000c080:	e0d8      	b.n	1000c234 <at_ble_event_get+0x3f4>
1000c082:	e0c5      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c084:	4b45      	ldr	r3, [pc, #276]	; (1000c19c <at_ble_event_get+0x35c>)
1000c086:	429c      	cmp	r4, r3
1000c088:	d100      	bne.n	1000c08c <at_ble_event_get+0x24c>
1000c08a:	e117      	b.n	1000c2bc <at_ble_event_get+0x47c>
1000c08c:	d82e      	bhi.n	1000c0ec <at_ble_event_get+0x2ac>
1000c08e:	4b44      	ldr	r3, [pc, #272]	; (1000c1a0 <at_ble_event_get+0x360>)
1000c090:	429c      	cmp	r4, r3
1000c092:	d100      	bne.n	1000c096 <at_ble_event_get+0x256>
1000c094:	e13d      	b.n	1000c312 <at_ble_event_get+0x4d2>
1000c096:	d812      	bhi.n	1000c0be <at_ble_event_get+0x27e>
1000c098:	4b42      	ldr	r3, [pc, #264]	; (1000c1a4 <at_ble_event_get+0x364>)
1000c09a:	429c      	cmp	r4, r3
1000c09c:	d100      	bne.n	1000c0a0 <at_ble_event_get+0x260>
1000c09e:	e0e8      	b.n	1000c272 <at_ble_event_get+0x432>
1000c0a0:	d804      	bhi.n	1000c0ac <at_ble_event_get+0x26c>
1000c0a2:	3b03      	subs	r3, #3
1000c0a4:	429c      	cmp	r4, r3
1000c0a6:	d100      	bne.n	1000c0aa <at_ble_event_get+0x26a>
1000c0a8:	e0d0      	b.n	1000c24c <at_ble_event_get+0x40c>
1000c0aa:	e0b1      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c0ac:	4b3e      	ldr	r3, [pc, #248]	; (1000c1a8 <at_ble_event_get+0x368>)
1000c0ae:	429c      	cmp	r4, r3
1000c0b0:	d100      	bne.n	1000c0b4 <at_ble_event_get+0x274>
1000c0b2:	e0d0      	b.n	1000c256 <at_ble_event_get+0x416>
1000c0b4:	4b3d      	ldr	r3, [pc, #244]	; (1000c1ac <at_ble_event_get+0x36c>)
1000c0b6:	429c      	cmp	r4, r3
1000c0b8:	d100      	bne.n	1000c0bc <at_ble_event_get+0x27c>
1000c0ba:	e0f9      	b.n	1000c2b0 <at_ble_event_get+0x470>
1000c0bc:	e0a8      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c0be:	4b3c      	ldr	r3, [pc, #240]	; (1000c1b0 <at_ble_event_get+0x370>)
1000c0c0:	429c      	cmp	r4, r3
1000c0c2:	d100      	bne.n	1000c0c6 <at_ble_event_get+0x286>
1000c0c4:	e0db      	b.n	1000c27e <at_ble_event_get+0x43e>
1000c0c6:	d808      	bhi.n	1000c0da <at_ble_event_get+0x29a>
1000c0c8:	4b3a      	ldr	r3, [pc, #232]	; (1000c1b4 <at_ble_event_get+0x374>)
1000c0ca:	429c      	cmp	r4, r3
1000c0cc:	d100      	bne.n	1000c0d0 <at_ble_event_get+0x290>
1000c0ce:	e11b      	b.n	1000c308 <at_ble_event_get+0x4c8>
1000c0d0:	4b39      	ldr	r3, [pc, #228]	; (1000c1b8 <at_ble_event_get+0x378>)
1000c0d2:	429c      	cmp	r4, r3
1000c0d4:	d100      	bne.n	1000c0d8 <at_ble_event_get+0x298>
1000c0d6:	e0d8      	b.n	1000c28a <at_ble_event_get+0x44a>
1000c0d8:	e09a      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c0da:	4b38      	ldr	r3, [pc, #224]	; (1000c1bc <at_ble_event_get+0x37c>)
1000c0dc:	429c      	cmp	r4, r3
1000c0de:	d100      	bne.n	1000c0e2 <at_ble_event_get+0x2a2>
1000c0e0:	e0d8      	b.n	1000c294 <at_ble_event_get+0x454>
1000c0e2:	4b37      	ldr	r3, [pc, #220]	; (1000c1c0 <at_ble_event_get+0x380>)
1000c0e4:	429c      	cmp	r4, r3
1000c0e6:	d100      	bne.n	1000c0ea <at_ble_event_get+0x2aa>
1000c0e8:	e0db      	b.n	1000c2a2 <at_ble_event_get+0x462>
1000c0ea:	e091      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c0ec:	4b35      	ldr	r3, [pc, #212]	; (1000c1c4 <at_ble_event_get+0x384>)
1000c0ee:	429c      	cmp	r4, r3
1000c0f0:	d100      	bne.n	1000c0f4 <at_ble_event_get+0x2b4>
1000c0f2:	e0f7      	b.n	1000c2e4 <at_ble_event_get+0x4a4>
1000c0f4:	d876      	bhi.n	1000c1e4 <at_ble_event_get+0x3a4>
1000c0f6:	4b34      	ldr	r3, [pc, #208]	; (1000c1c8 <at_ble_event_get+0x388>)
1000c0f8:	429c      	cmp	r4, r3
1000c0fa:	d100      	bne.n	1000c0fe <at_ble_event_get+0x2be>
1000c0fc:	e0f8      	b.n	1000c2f0 <at_ble_event_get+0x4b0>
1000c0fe:	d869      	bhi.n	1000c1d4 <at_ble_event_get+0x394>
1000c100:	4b32      	ldr	r3, [pc, #200]	; (1000c1cc <at_ble_event_get+0x38c>)
1000c102:	429c      	cmp	r4, r3
1000c104:	d100      	bne.n	1000c108 <at_ble_event_get+0x2c8>
1000c106:	e0e0      	b.n	1000c2ca <at_ble_event_get+0x48a>
1000c108:	4b31      	ldr	r3, [pc, #196]	; (1000c1d0 <at_ble_event_get+0x390>)
1000c10a:	429c      	cmp	r4, r3
1000c10c:	d100      	bne.n	1000c110 <at_ble_event_get+0x2d0>
1000c10e:	e0a9      	b.n	1000c264 <at_ble_event_get+0x424>
1000c110:	e07e      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c112:	46c0      	nop			; (mov r8, r8)
1000c114:	1000d1f5 	.word	0x1000d1f5
1000c118:	10013fb8 	.word	0x10013fb8
1000c11c:	1000b48d 	.word	0x1000b48d
1000c120:	10013fbc 	.word	0x10013fbc
1000c124:	10013fb4 	.word	0x10013fb4
1000c128:	10013fa4 	.word	0x10013fa4
1000c12c:	1000bd29 	.word	0x1000bd29
1000c130:	10010529 	.word	0x10010529
1000c134:	0000ffff 	.word	0x0000ffff
1000c138:	0000fffe 	.word	0x0000fffe
1000c13c:	1000b705 	.word	0x1000b705
1000c140:	1000d1f7 	.word	0x1000d1f7
1000c144:	0000201e 	.word	0x0000201e
1000c148:	0000201d 	.word	0x0000201d
1000c14c:	00000c03 	.word	0x00000c03
1000c150:	0000201f 	.word	0x0000201f
1000c154:	00000d1c 	.word	0x00000d1c
1000c158:	00000c0c 	.word	0x00000c0c
1000c15c:	00000c02 	.word	0x00000c02
1000c160:	00000a02 	.word	0x00000a02
1000c164:	00000a03 	.word	0x00000a03
1000c168:	00000c06 	.word	0x00000c06
1000c16c:	00000c04 	.word	0x00000c04
1000c170:	00000c05 	.word	0x00000c05
1000c174:	00000c07 	.word	0x00000c07
1000c178:	00000c09 	.word	0x00000c09
1000c17c:	00000c17 	.word	0x00000c17
1000c180:	00000c12 	.word	0x00000c12
1000c184:	00000c0d 	.word	0x00000c0d
1000c188:	00000c13 	.word	0x00000c13
1000c18c:	00000c15 	.word	0x00000c15
1000c190:	00000d08 	.word	0x00000d08
1000c194:	00000d01 	.word	0x00000d01
1000c198:	00000d15 	.word	0x00000d15
1000c19c:	00000e1b 	.word	0x00000e1b
1000c1a0:	00000e0f 	.word	0x00000e0f
1000c1a4:	00000e03 	.word	0x00000e03
1000c1a8:	00000e06 	.word	0x00000e06
1000c1ac:	00000e0a 	.word	0x00000e0a
1000c1b0:	00000e15 	.word	0x00000e15
1000c1b4:	00000e11 	.word	0x00000e11
1000c1b8:	00000e13 	.word	0x00000e13
1000c1bc:	00000e17 	.word	0x00000e17
1000c1c0:	00000e19 	.word	0x00000e19
1000c1c4:	00000e27 	.word	0x00000e27
1000c1c8:	00000e21 	.word	0x00000e21
1000c1cc:	00000e1c 	.word	0x00000e1c
1000c1d0:	00000e1d 	.word	0x00000e1d
1000c1d4:	4b9f      	ldr	r3, [pc, #636]	; (1000c454 <at_ble_event_get+0x614>)
1000c1d6:	429c      	cmp	r4, r3
1000c1d8:	d07e      	beq.n	1000c2d8 <at_ble_event_get+0x498>
1000c1da:	4b9f      	ldr	r3, [pc, #636]	; (1000c458 <at_ble_event_get+0x618>)
1000c1dc:	429c      	cmp	r4, r3
1000c1de:	d100      	bne.n	1000c1e2 <at_ble_event_get+0x3a2>
1000c1e0:	e08c      	b.n	1000c2fc <at_ble_event_get+0x4bc>
1000c1e2:	e015      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c1e4:	4b9d      	ldr	r3, [pc, #628]	; (1000c45c <at_ble_event_get+0x61c>)
1000c1e6:	429c      	cmp	r4, r3
1000c1e8:	d100      	bne.n	1000c1ec <at_ble_event_get+0x3ac>
1000c1ea:	e10a      	b.n	1000c402 <at_ble_event_get+0x5c2>
1000c1ec:	d808      	bhi.n	1000c200 <at_ble_event_get+0x3c0>
1000c1ee:	4b9c      	ldr	r3, [pc, #624]	; (1000c460 <at_ble_event_get+0x620>)
1000c1f0:	429c      	cmp	r4, r3
1000c1f2:	d100      	bne.n	1000c1f6 <at_ble_event_get+0x3b6>
1000c1f4:	e0f7      	b.n	1000c3e6 <at_ble_event_get+0x5a6>
1000c1f6:	4b9b      	ldr	r3, [pc, #620]	; (1000c464 <at_ble_event_get+0x624>)
1000c1f8:	429c      	cmp	r4, r3
1000c1fa:	d100      	bne.n	1000c1fe <at_ble_event_get+0x3be>
1000c1fc:	e0fa      	b.n	1000c3f4 <at_ble_event_get+0x5b4>
1000c1fe:	e007      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c200:	4b99      	ldr	r3, [pc, #612]	; (1000c468 <at_ble_event_get+0x628>)
1000c202:	429c      	cmp	r4, r3
1000c204:	d100      	bne.n	1000c208 <at_ble_event_get+0x3c8>
1000c206:	e103      	b.n	1000c410 <at_ble_event_get+0x5d0>
1000c208:	4b98      	ldr	r3, [pc, #608]	; (1000c46c <at_ble_event_get+0x62c>)
1000c20a:	429c      	cmp	r4, r3
1000c20c:	d100      	bne.n	1000c210 <at_ble_event_get+0x3d0>
1000c20e:	e106      	b.n	1000c41e <at_ble_event_get+0x5de>
1000c210:	2600      	movs	r6, #0
1000c212:	e10a      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c214:	1c30      	adds	r0, r6, #0
1000c216:	1c29      	adds	r1, r5, #0
1000c218:	4b95      	ldr	r3, [pc, #596]	; (1000c470 <at_ble_event_get+0x630>)
1000c21a:	e014      	b.n	1000c246 <at_ble_event_get+0x406>
1000c21c:	1c30      	adds	r0, r6, #0
1000c21e:	1c29      	adds	r1, r5, #0
1000c220:	4b94      	ldr	r3, [pc, #592]	; (1000c474 <at_ble_event_get+0x634>)
1000c222:	4798      	blx	r3
1000c224:	2604      	movs	r6, #4
1000c226:	e100      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c228:	1c30      	adds	r0, r6, #0
1000c22a:	1c29      	adds	r1, r5, #0
1000c22c:	4b92      	ldr	r3, [pc, #584]	; (1000c478 <at_ble_event_get+0x638>)
1000c22e:	4798      	blx	r3
1000c230:	2601      	movs	r6, #1
1000c232:	e0fa      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c234:	1c30      	adds	r0, r6, #0
1000c236:	1c29      	adds	r1, r5, #0
1000c238:	4b90      	ldr	r3, [pc, #576]	; (1000c47c <at_ble_event_get+0x63c>)
1000c23a:	4798      	blx	r3
1000c23c:	260f      	movs	r6, #15
1000c23e:	e0f4      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c240:	1c30      	adds	r0, r6, #0
1000c242:	1c29      	adds	r1, r5, #0
1000c244:	4b8e      	ldr	r3, [pc, #568]	; (1000c480 <at_ble_event_get+0x640>)
1000c246:	4798      	blx	r3
1000c248:	1c06      	adds	r6, r0, #0
1000c24a:	e0ee      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c24c:	9801      	ldr	r0, [sp, #4]
1000c24e:	1c31      	adds	r1, r6, #0
1000c250:	1c2a      	adds	r2, r5, #0
1000c252:	4b8c      	ldr	r3, [pc, #560]	; (1000c484 <at_ble_event_get+0x644>)
1000c254:	e017      	b.n	1000c286 <at_ble_event_get+0x446>
1000c256:	1c31      	adds	r1, r6, #0
1000c258:	9801      	ldr	r0, [sp, #4]
1000c25a:	1c2a      	adds	r2, r5, #0
1000c25c:	4b8a      	ldr	r3, [pc, #552]	; (1000c488 <at_ble_event_get+0x648>)
1000c25e:	4798      	blx	r3
1000c260:	2611      	movs	r6, #17
1000c262:	e0e2      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c264:	1c31      	adds	r1, r6, #0
1000c266:	9801      	ldr	r0, [sp, #4]
1000c268:	1c2a      	adds	r2, r5, #0
1000c26a:	4b88      	ldr	r3, [pc, #544]	; (1000c48c <at_ble_event_get+0x64c>)
1000c26c:	4798      	blx	r3
1000c26e:	2612      	movs	r6, #18
1000c270:	e0db      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c272:	1c30      	adds	r0, r6, #0
1000c274:	1c29      	adds	r1, r5, #0
1000c276:	4b86      	ldr	r3, [pc, #536]	; (1000c490 <at_ble_event_get+0x650>)
1000c278:	4798      	blx	r3
1000c27a:	2606      	movs	r6, #6
1000c27c:	e0d5      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c27e:	1c31      	adds	r1, r6, #0
1000c280:	1c2a      	adds	r2, r5, #0
1000c282:	9801      	ldr	r0, [sp, #4]
1000c284:	4b83      	ldr	r3, [pc, #524]	; (1000c494 <at_ble_event_get+0x654>)
1000c286:	4798      	blx	r3
1000c288:	e7de      	b.n	1000c248 <at_ble_event_get+0x408>
1000c28a:	9801      	ldr	r0, [sp, #4]
1000c28c:	1c31      	adds	r1, r6, #0
1000c28e:	1c2a      	adds	r2, r5, #0
1000c290:	4b81      	ldr	r3, [pc, #516]	; (1000c498 <at_ble_event_get+0x658>)
1000c292:	e7f8      	b.n	1000c286 <at_ble_event_get+0x446>
1000c294:	1c31      	adds	r1, r6, #0
1000c296:	9801      	ldr	r0, [sp, #4]
1000c298:	1c2a      	adds	r2, r5, #0
1000c29a:	4b80      	ldr	r3, [pc, #512]	; (1000c49c <at_ble_event_get+0x65c>)
1000c29c:	4798      	blx	r3
1000c29e:	260d      	movs	r6, #13
1000c2a0:	e0c3      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2a2:	1c31      	adds	r1, r6, #0
1000c2a4:	9801      	ldr	r0, [sp, #4]
1000c2a6:	1c2a      	adds	r2, r5, #0
1000c2a8:	4b7d      	ldr	r3, [pc, #500]	; (1000c4a0 <at_ble_event_get+0x660>)
1000c2aa:	4798      	blx	r3
1000c2ac:	260e      	movs	r6, #14
1000c2ae:	e0bc      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2b0:	9801      	ldr	r0, [sp, #4]
1000c2b2:	1c31      	adds	r1, r6, #0
1000c2b4:	1c2a      	adds	r2, r5, #0
1000c2b6:	4b7b      	ldr	r3, [pc, #492]	; (1000c4a4 <at_ble_event_get+0x664>)
1000c2b8:	4798      	blx	r3
1000c2ba:	e084      	b.n	1000c3c6 <at_ble_event_get+0x586>
1000c2bc:	1c31      	adds	r1, r6, #0
1000c2be:	9801      	ldr	r0, [sp, #4]
1000c2c0:	1c2a      	adds	r2, r5, #0
1000c2c2:	4b79      	ldr	r3, [pc, #484]	; (1000c4a8 <at_ble_event_get+0x668>)
1000c2c4:	4798      	blx	r3
1000c2c6:	260b      	movs	r6, #11
1000c2c8:	e0af      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2ca:	1c31      	adds	r1, r6, #0
1000c2cc:	9801      	ldr	r0, [sp, #4]
1000c2ce:	1c2a      	adds	r2, r5, #0
1000c2d0:	4b76      	ldr	r3, [pc, #472]	; (1000c4ac <at_ble_event_get+0x66c>)
1000c2d2:	4798      	blx	r3
1000c2d4:	2610      	movs	r6, #16
1000c2d6:	e0a8      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2d8:	1c30      	adds	r0, r6, #0
1000c2da:	1c29      	adds	r1, r5, #0
1000c2dc:	4b74      	ldr	r3, [pc, #464]	; (1000c4b0 <at_ble_event_get+0x670>)
1000c2de:	4798      	blx	r3
1000c2e0:	2628      	movs	r6, #40	; 0x28
1000c2e2:	e0a2      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2e4:	1c30      	adds	r0, r6, #0
1000c2e6:	1c29      	adds	r1, r5, #0
1000c2e8:	4b72      	ldr	r3, [pc, #456]	; (1000c4b4 <at_ble_event_get+0x674>)
1000c2ea:	4798      	blx	r3
1000c2ec:	2629      	movs	r6, #41	; 0x29
1000c2ee:	e09c      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2f0:	1c30      	adds	r0, r6, #0
1000c2f2:	1c29      	adds	r1, r5, #0
1000c2f4:	4b70      	ldr	r3, [pc, #448]	; (1000c4b8 <at_ble_event_get+0x678>)
1000c2f6:	4798      	blx	r3
1000c2f8:	2627      	movs	r6, #39	; 0x27
1000c2fa:	e096      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c2fc:	1c30      	adds	r0, r6, #0
1000c2fe:	1c29      	adds	r1, r5, #0
1000c300:	4b6e      	ldr	r3, [pc, #440]	; (1000c4bc <at_ble_event_get+0x67c>)
1000c302:	4798      	blx	r3
1000c304:	262a      	movs	r6, #42	; 0x2a
1000c306:	e090      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c308:	9801      	ldr	r0, [sp, #4]
1000c30a:	1c31      	adds	r1, r6, #0
1000c30c:	1c2a      	adds	r2, r5, #0
1000c30e:	4b6c      	ldr	r3, [pc, #432]	; (1000c4c0 <at_ble_event_get+0x680>)
1000c310:	e7b9      	b.n	1000c286 <at_ble_event_get+0x446>
1000c312:	9801      	ldr	r0, [sp, #4]
1000c314:	1c31      	adds	r1, r6, #0
1000c316:	1c2a      	adds	r2, r5, #0
1000c318:	4b6a      	ldr	r3, [pc, #424]	; (1000c4c4 <at_ble_event_get+0x684>)
1000c31a:	e7b4      	b.n	1000c286 <at_ble_event_get+0x446>
1000c31c:	1c30      	adds	r0, r6, #0
1000c31e:	1c29      	adds	r1, r5, #0
1000c320:	4b69      	ldr	r3, [pc, #420]	; (1000c4c8 <at_ble_event_get+0x688>)
1000c322:	4798      	blx	r3
1000c324:	262b      	movs	r6, #43	; 0x2b
1000c326:	e080      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c328:	1c30      	adds	r0, r6, #0
1000c32a:	1c29      	adds	r1, r5, #0
1000c32c:	4b67      	ldr	r3, [pc, #412]	; (1000c4cc <at_ble_event_get+0x68c>)
1000c32e:	4798      	blx	r3
1000c330:	262c      	movs	r6, #44	; 0x2c
1000c332:	e07a      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c334:	1c31      	adds	r1, r6, #0
1000c336:	9801      	ldr	r0, [sp, #4]
1000c338:	1c2a      	adds	r2, r5, #0
1000c33a:	4b65      	ldr	r3, [pc, #404]	; (1000c4d0 <at_ble_event_get+0x690>)
1000c33c:	4798      	blx	r3
1000c33e:	2613      	movs	r6, #19
1000c340:	e073      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c342:	1c31      	adds	r1, r6, #0
1000c344:	9801      	ldr	r0, [sp, #4]
1000c346:	1c2a      	adds	r2, r5, #0
1000c348:	4b62      	ldr	r3, [pc, #392]	; (1000c4d4 <at_ble_event_get+0x694>)
1000c34a:	4798      	blx	r3
1000c34c:	2614      	movs	r6, #20
1000c34e:	e06c      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c350:	1c31      	adds	r1, r6, #0
1000c352:	9801      	ldr	r0, [sp, #4]
1000c354:	1c2a      	adds	r2, r5, #0
1000c356:	4b60      	ldr	r3, [pc, #384]	; (1000c4d8 <at_ble_event_get+0x698>)
1000c358:	4798      	blx	r3
1000c35a:	2615      	movs	r6, #21
1000c35c:	e065      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c35e:	1c31      	adds	r1, r6, #0
1000c360:	9801      	ldr	r0, [sp, #4]
1000c362:	1c2a      	adds	r2, r5, #0
1000c364:	4b5d      	ldr	r3, [pc, #372]	; (1000c4dc <at_ble_event_get+0x69c>)
1000c366:	4798      	blx	r3
1000c368:	2616      	movs	r6, #22
1000c36a:	e05e      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c36c:	9801      	ldr	r0, [sp, #4]
1000c36e:	1c31      	adds	r1, r6, #0
1000c370:	1c2a      	adds	r2, r5, #0
1000c372:	4b5b      	ldr	r3, [pc, #364]	; (1000c4e0 <at_ble_event_get+0x6a0>)
1000c374:	e787      	b.n	1000c286 <at_ble_event_get+0x446>
1000c376:	1c31      	adds	r1, r6, #0
1000c378:	9801      	ldr	r0, [sp, #4]
1000c37a:	1c2a      	adds	r2, r5, #0
1000c37c:	4b58      	ldr	r3, [pc, #352]	; (1000c4e0 <at_ble_event_get+0x6a0>)
1000c37e:	4798      	blx	r3
1000c380:	88a9      	ldrh	r1, [r5, #4]
1000c382:	1c06      	adds	r6, r0, #0
1000c384:	4b57      	ldr	r3, [pc, #348]	; (1000c4e4 <at_ble_event_get+0x6a4>)
1000c386:	8828      	ldrh	r0, [r5, #0]
1000c388:	4798      	blx	r3
1000c38a:	e04e      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c38c:	1c31      	adds	r1, r6, #0
1000c38e:	9801      	ldr	r0, [sp, #4]
1000c390:	1c2a      	adds	r2, r5, #0
1000c392:	4b55      	ldr	r3, [pc, #340]	; (1000c4e8 <at_ble_event_get+0x6a8>)
1000c394:	4798      	blx	r3
1000c396:	2623      	movs	r6, #35	; 0x23
1000c398:	e047      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c39a:	9801      	ldr	r0, [sp, #4]
1000c39c:	1c31      	adds	r1, r6, #0
1000c39e:	1c2a      	adds	r2, r5, #0
1000c3a0:	4b52      	ldr	r3, [pc, #328]	; (1000c4ec <at_ble_event_get+0x6ac>)
1000c3a2:	e770      	b.n	1000c286 <at_ble_event_get+0x446>
1000c3a4:	9b01      	ldr	r3, [sp, #4]
1000c3a6:	1c30      	adds	r0, r6, #0
1000c3a8:	0a1f      	lsrs	r7, r3, #8
1000c3aa:	802f      	strh	r7, [r5, #0]
1000c3ac:	1c29      	adds	r1, r5, #0
1000c3ae:	4b50      	ldr	r3, [pc, #320]	; (1000c4f0 <at_ble_event_get+0x6b0>)
1000c3b0:	e749      	b.n	1000c246 <at_ble_event_get+0x406>
1000c3b2:	9801      	ldr	r0, [sp, #4]
1000c3b4:	1c31      	adds	r1, r6, #0
1000c3b6:	1c2a      	adds	r2, r5, #0
1000c3b8:	4b4e      	ldr	r3, [pc, #312]	; (1000c4f4 <at_ble_event_get+0x6b4>)
1000c3ba:	e764      	b.n	1000c286 <at_ble_event_get+0x446>
1000c3bc:	1c30      	adds	r0, r6, #0
1000c3be:	1c29      	adds	r1, r5, #0
1000c3c0:	9a01      	ldr	r2, [sp, #4]
1000c3c2:	4b4d      	ldr	r3, [pc, #308]	; (1000c4f8 <at_ble_event_get+0x6b8>)
1000c3c4:	4798      	blx	r3
1000c3c6:	263b      	movs	r6, #59	; 0x3b
1000c3c8:	e02f      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c3ca:	1c31      	adds	r1, r6, #0
1000c3cc:	9801      	ldr	r0, [sp, #4]
1000c3ce:	1c2a      	adds	r2, r5, #0
1000c3d0:	4b4a      	ldr	r3, [pc, #296]	; (1000c4fc <at_ble_event_get+0x6bc>)
1000c3d2:	4798      	blx	r3
1000c3d4:	2618      	movs	r6, #24
1000c3d6:	e028      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c3d8:	1c31      	adds	r1, r6, #0
1000c3da:	9801      	ldr	r0, [sp, #4]
1000c3dc:	1c2a      	adds	r2, r5, #0
1000c3de:	4b48      	ldr	r3, [pc, #288]	; (1000c500 <at_ble_event_get+0x6c0>)
1000c3e0:	4798      	blx	r3
1000c3e2:	2620      	movs	r6, #32
1000c3e4:	e021      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c3e6:	1c31      	adds	r1, r6, #0
1000c3e8:	9801      	ldr	r0, [sp, #4]
1000c3ea:	1c2a      	adds	r2, r5, #0
1000c3ec:	4b45      	ldr	r3, [pc, #276]	; (1000c504 <at_ble_event_get+0x6c4>)
1000c3ee:	4798      	blx	r3
1000c3f0:	2633      	movs	r6, #51	; 0x33
1000c3f2:	e01a      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c3f4:	1c31      	adds	r1, r6, #0
1000c3f6:	9801      	ldr	r0, [sp, #4]
1000c3f8:	1c2a      	adds	r2, r5, #0
1000c3fa:	4b43      	ldr	r3, [pc, #268]	; (1000c508 <at_ble_event_get+0x6c8>)
1000c3fc:	4798      	blx	r3
1000c3fe:	2630      	movs	r6, #48	; 0x30
1000c400:	e013      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c402:	1c31      	adds	r1, r6, #0
1000c404:	9801      	ldr	r0, [sp, #4]
1000c406:	1c2a      	adds	r2, r5, #0
1000c408:	4b40      	ldr	r3, [pc, #256]	; (1000c50c <at_ble_event_get+0x6cc>)
1000c40a:	4798      	blx	r3
1000c40c:	2634      	movs	r6, #52	; 0x34
1000c40e:	e00c      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c410:	1c31      	adds	r1, r6, #0
1000c412:	9801      	ldr	r0, [sp, #4]
1000c414:	1c2a      	adds	r2, r5, #0
1000c416:	4b3e      	ldr	r3, [pc, #248]	; (1000c510 <at_ble_event_get+0x6d0>)
1000c418:	4798      	blx	r3
1000c41a:	2635      	movs	r6, #53	; 0x35
1000c41c:	e005      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c41e:	1c31      	adds	r1, r6, #0
1000c420:	9801      	ldr	r0, [sp, #4]
1000c422:	1c2a      	adds	r2, r5, #0
1000c424:	4b3b      	ldr	r3, [pc, #236]	; (1000c514 <at_ble_event_get+0x6d4>)
1000c426:	4798      	blx	r3
1000c428:	2632      	movs	r6, #50	; 0x32
1000c42a:	9b03      	ldr	r3, [sp, #12]
1000c42c:	701e      	strb	r6, [r3, #0]
1000c42e:	2300      	movs	r3, #0
1000c430:	9302      	str	r3, [sp, #8]
1000c432:	e57a      	b.n	1000bf2a <at_ble_event_get+0xea>
1000c434:	23d0      	movs	r3, #208	; 0xd0
1000c436:	e7fb      	b.n	1000c430 <at_ble_event_get+0x5f0>
1000c438:	9b01      	ldr	r3, [sp, #4]
1000c43a:	9e02      	ldr	r6, [sp, #8]
1000c43c:	2bbb      	cmp	r3, #187	; 0xbb
1000c43e:	d000      	beq.n	1000c442 <at_ble_event_get+0x602>
1000c440:	e6e6      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c442:	e7f2      	b.n	1000c42a <at_ble_event_get+0x5ea>
1000c444:	9b02      	ldr	r3, [sp, #8]
1000c446:	2b00      	cmp	r3, #0
1000c448:	d000      	beq.n	1000c44c <at_ble_event_get+0x60c>
1000c44a:	e56e      	b.n	1000bf2a <at_ble_event_get+0xea>
1000c44c:	e6e0      	b.n	1000c210 <at_ble_event_get+0x3d0>
1000c44e:	9802      	ldr	r0, [sp, #8]
1000c450:	b007      	add	sp, #28
1000c452:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c454:	00000e22 	.word	0x00000e22
1000c458:	00000e25 	.word	0x00000e25
1000c45c:	00001b05 	.word	0x00001b05
1000c460:	00001b01 	.word	0x00001b01
1000c464:	00001b03 	.word	0x00001b03
1000c468:	00001b06 	.word	0x00001b06
1000c46c:	00001b08 	.word	0x00001b08
1000c470:	1000e021 	.word	0x1000e021
1000c474:	1000e005 	.word	0x1000e005
1000c478:	1000e2a1 	.word	0x1000e2a1
1000c47c:	1000e391 	.word	0x1000e391
1000c480:	1000e49d 	.word	0x1000e49d
1000c484:	1000d399 	.word	0x1000d399
1000c488:	1000dc19 	.word	0x1000dc19
1000c48c:	1000dc95 	.word	0x1000dc95
1000c490:	1000d651 	.word	0x1000d651
1000c494:	1000d6ed 	.word	0x1000d6ed
1000c498:	1000d7c5 	.word	0x1000d7c5
1000c49c:	1000da4d 	.word	0x1000da4d
1000c4a0:	1000daed 	.word	0x1000daed
1000c4a4:	1000dba5 	.word	0x1000dba5
1000c4a8:	1000dbcd 	.word	0x1000dbcd
1000c4ac:	1000dbe3 	.word	0x1000dbe3
1000c4b0:	1000dcad 	.word	0x1000dcad
1000c4b4:	1000dcdb 	.word	0x1000dcdb
1000c4b8:	1000dcf1 	.word	0x1000dcf1
1000c4bc:	1000dd1b 	.word	0x1000dd1b
1000c4c0:	1000db49 	.word	0x1000db49
1000c4c4:	1000db73 	.word	0x1000db73
1000c4c8:	1000cd91 	.word	0x1000cd91
1000c4cc:	1000cdbd 	.word	0x1000cdbd
1000c4d0:	1000e645 	.word	0x1000e645
1000c4d4:	1000e681 	.word	0x1000e681
1000c4d8:	1000e6c9 	.word	0x1000e6c9
1000c4dc:	1000e70d 	.word	0x1000e70d
1000c4e0:	1000e741 	.word	0x1000e741
1000c4e4:	1000e605 	.word	0x1000e605
1000c4e8:	1000e80d 	.word	0x1000e80d
1000c4ec:	1000e795 	.word	0x1000e795
1000c4f0:	1000cce9 	.word	0x1000cce9
1000c4f4:	1000cd55 	.word	0x1000cd55
1000c4f8:	1000cd19 	.word	0x1000cd19
1000c4fc:	1000e81d 	.word	0x1000e81d
1000c500:	1000e85d 	.word	0x1000e85d
1000c504:	1000eaa1 	.word	0x1000eaa1
1000c508:	1000eaab 	.word	0x1000eaab
1000c50c:	1000eab1 	.word	0x1000eab1
1000c510:	1000eab7 	.word	0x1000eab7
1000c514:	1000eac3 	.word	0x1000eac3

1000c518 <internal_event_flush>:
1000c518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c51a:	490e      	ldr	r1, [pc, #56]	; (1000c554 <internal_event_flush+0x3c>)
1000c51c:	2400      	movs	r4, #0
1000c51e:	680b      	ldr	r3, [r1, #0]
1000c520:	1c0f      	adds	r7, r1, #0
1000c522:	1c1e      	adds	r6, r3, #0
1000c524:	4a0c      	ldr	r2, [pc, #48]	; (1000c558 <internal_event_flush+0x40>)
1000c526:	6815      	ldr	r5, [r2, #0]
1000c528:	9201      	str	r2, [sp, #4]
1000c52a:	2b00      	cmp	r3, #0
1000c52c:	d00e      	beq.n	1000c54c <internal_event_flush+0x34>
1000c52e:	889a      	ldrh	r2, [r3, #4]
1000c530:	6819      	ldr	r1, [r3, #0]
1000c532:	4282      	cmp	r2, r0
1000c534:	d107      	bne.n	1000c546 <internal_event_flush+0x2e>
1000c536:	2c00      	cmp	r4, #0
1000c538:	d001      	beq.n	1000c53e <internal_event_flush+0x26>
1000c53a:	6021      	str	r1, [r4, #0]
1000c53c:	e000      	b.n	1000c540 <internal_event_flush+0x28>
1000c53e:	1c0e      	adds	r6, r1, #0
1000c540:	601d      	str	r5, [r3, #0]
1000c542:	1c1d      	adds	r5, r3, #0
1000c544:	1c23      	adds	r3, r4, #0
1000c546:	1c1c      	adds	r4, r3, #0
1000c548:	1c0b      	adds	r3, r1, #0
1000c54a:	e7ee      	b.n	1000c52a <internal_event_flush+0x12>
1000c54c:	9b01      	ldr	r3, [sp, #4]
1000c54e:	603e      	str	r6, [r7, #0]
1000c550:	601d      	str	r5, [r3, #0]
1000c552:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c554:	10013fb8 	.word	0x10013fb8
1000c558:	10013fbc 	.word	0x10013fbc

1000c55c <internal_conn_flush>:
1000c55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c55e:	4a12      	ldr	r2, [pc, #72]	; (1000c5a8 <internal_conn_flush+0x4c>)
1000c560:	9000      	str	r0, [sp, #0]
1000c562:	6813      	ldr	r3, [r2, #0]
1000c564:	4811      	ldr	r0, [pc, #68]	; (1000c5ac <internal_conn_flush+0x50>)
1000c566:	1c1f      	adds	r7, r3, #0
1000c568:	2100      	movs	r1, #0
1000c56a:	4684      	mov	ip, r0
1000c56c:	6804      	ldr	r4, [r0, #0]
1000c56e:	9201      	str	r2, [sp, #4]
1000c570:	2b00      	cmp	r3, #0
1000c572:	d014      	beq.n	1000c59e <internal_conn_flush+0x42>
1000c574:	88d8      	ldrh	r0, [r3, #6]
1000c576:	9a00      	ldr	r2, [sp, #0]
1000c578:	681d      	ldr	r5, [r3, #0]
1000c57a:	0a06      	lsrs	r6, r0, #8
1000c57c:	4296      	cmp	r6, r2
1000c57e:	d10b      	bne.n	1000c598 <internal_conn_flush+0x3c>
1000c580:	26fd      	movs	r6, #253	; 0xfd
1000c582:	4006      	ands	r6, r0
1000c584:	2e0c      	cmp	r6, #12
1000c586:	d107      	bne.n	1000c598 <internal_conn_flush+0x3c>
1000c588:	2900      	cmp	r1, #0
1000c58a:	d001      	beq.n	1000c590 <internal_conn_flush+0x34>
1000c58c:	600d      	str	r5, [r1, #0]
1000c58e:	e000      	b.n	1000c592 <internal_conn_flush+0x36>
1000c590:	1c2f      	adds	r7, r5, #0
1000c592:	601c      	str	r4, [r3, #0]
1000c594:	1c1c      	adds	r4, r3, #0
1000c596:	1c0b      	adds	r3, r1, #0
1000c598:	1c19      	adds	r1, r3, #0
1000c59a:	1c2b      	adds	r3, r5, #0
1000c59c:	e7e8      	b.n	1000c570 <internal_conn_flush+0x14>
1000c59e:	9b01      	ldr	r3, [sp, #4]
1000c5a0:	601f      	str	r7, [r3, #0]
1000c5a2:	4663      	mov	r3, ip
1000c5a4:	601c      	str	r4, [r3, #0]
1000c5a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c5a8:	10013fb8 	.word	0x10013fb8
1000c5ac:	10013fbc 	.word	0x10013fbc

1000c5b0 <at_ble_device_name_set>:
1000c5b0:	b530      	push	{r4, r5, lr}
1000c5b2:	23cf      	movs	r3, #207	; 0xcf
1000c5b4:	2800      	cmp	r0, #0
1000c5b6:	d010      	beq.n	1000c5da <at_ble_device_name_set+0x2a>
1000c5b8:	1e4a      	subs	r2, r1, #1
1000c5ba:	2a1f      	cmp	r2, #31
1000c5bc:	d80d      	bhi.n	1000c5da <at_ble_device_name_set+0x2a>
1000c5be:	4a08      	ldr	r2, [pc, #32]	; (1000c5e0 <at_ble_device_name_set+0x30>)
1000c5c0:	1c13      	adds	r3, r2, #0
1000c5c2:	33aa      	adds	r3, #170	; 0xaa
1000c5c4:	8019      	strh	r1, [r3, #0]
1000c5c6:	2300      	movs	r3, #0
1000c5c8:	1c1c      	adds	r4, r3, #0
1000c5ca:	5cc5      	ldrb	r5, [r0, r3]
1000c5cc:	34ac      	adds	r4, #172	; 0xac
1000c5ce:	3301      	adds	r3, #1
1000c5d0:	5515      	strb	r5, [r2, r4]
1000c5d2:	b2dc      	uxtb	r4, r3
1000c5d4:	428c      	cmp	r4, r1
1000c5d6:	d3f7      	bcc.n	1000c5c8 <at_ble_device_name_set+0x18>
1000c5d8:	2300      	movs	r3, #0
1000c5da:	1c18      	adds	r0, r3, #0
1000c5dc:	bd30      	pop	{r4, r5, pc}
1000c5de:	46c0      	nop			; (mov r8, r8)
1000c5e0:	10014d7e 	.word	0x10014d7e

1000c5e4 <at_ble_addr_get>:
1000c5e4:	b510      	push	{r4, lr}
1000c5e6:	1c04      	adds	r4, r0, #0
1000c5e8:	20cf      	movs	r0, #207	; 0xcf
1000c5ea:	2c00      	cmp	r4, #0
1000c5ec:	d006      	beq.n	1000c5fc <at_ble_addr_get+0x18>
1000c5ee:	4b04      	ldr	r3, [pc, #16]	; (1000c600 <at_ble_addr_get+0x1c>)
1000c5f0:	38ce      	subs	r0, #206	; 0xce
1000c5f2:	1c21      	adds	r1, r4, #0
1000c5f4:	4798      	blx	r3
1000c5f6:	4b03      	ldr	r3, [pc, #12]	; (1000c604 <at_ble_addr_get+0x20>)
1000c5f8:	791b      	ldrb	r3, [r3, #4]
1000c5fa:	7023      	strb	r3, [r4, #0]
1000c5fc:	bd10      	pop	{r4, pc}
1000c5fe:	46c0      	nop			; (mov r8, r8)
1000c600:	1000deb5 	.word	0x1000deb5
1000c604:	10014d7e 	.word	0x10014d7e

1000c608 <at_ble_set_dev_config>:
1000c608:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c60a:	7906      	ldrb	r6, [r0, #4]
1000c60c:	b089      	sub	sp, #36	; 0x24
1000c60e:	25cf      	movs	r5, #207	; 0xcf
1000c610:	2e03      	cmp	r6, #3
1000c612:	d838      	bhi.n	1000c686 <at_ble_set_dev_config+0x7e>
1000c614:	7803      	ldrb	r3, [r0, #0]
1000c616:	3511      	adds	r5, #17
1000c618:	2b0f      	cmp	r3, #15
1000c61a:	d834      	bhi.n	1000c686 <at_ble_set_dev_config+0x7e>
1000c61c:	2380      	movs	r3, #128	; 0x80
1000c61e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c620:	3d11      	subs	r5, #17
1000c622:	009b      	lsls	r3, r3, #2
1000c624:	429f      	cmp	r7, r3
1000c626:	d82e      	bhi.n	1000c686 <at_ble_set_dev_config+0x7e>
1000c628:	7fc5      	ldrb	r5, [r0, #31]
1000c62a:	7f83      	ldrb	r3, [r0, #30]
1000c62c:	01ad      	lsls	r5, r5, #6
1000c62e:	015b      	lsls	r3, r3, #5
1000c630:	431d      	orrs	r5, r3
1000c632:	7ec3      	ldrb	r3, [r0, #27]
1000c634:	431d      	orrs	r5, r3
1000c636:	7f43      	ldrb	r3, [r0, #29]
1000c638:	011b      	lsls	r3, r3, #4
1000c63a:	431d      	orrs	r5, r3
1000c63c:	7f03      	ldrb	r3, [r0, #28]
1000c63e:	009b      	lsls	r3, r3, #2
1000c640:	431d      	orrs	r5, r3
1000c642:	4b12      	ldr	r3, [pc, #72]	; (1000c68c <at_ble_set_dev_config+0x84>)
1000c644:	b2ed      	uxtb	r5, r5
1000c646:	711e      	strb	r6, [r3, #4]
1000c648:	7903      	ldrb	r3, [r0, #4]
1000c64a:	3b02      	subs	r3, #2
1000c64c:	2b01      	cmp	r3, #1
1000c64e:	d801      	bhi.n	1000c654 <at_ble_set_dev_config+0x4c>
1000c650:	2302      	movs	r3, #2
1000c652:	7103      	strb	r3, [r0, #4]
1000c654:	1c04      	adds	r4, r0, #0
1000c656:	1c23      	adds	r3, r4, #0
1000c658:	330b      	adds	r3, #11
1000c65a:	8861      	ldrh	r1, [r4, #2]
1000c65c:	9307      	str	r3, [sp, #28]
1000c65e:	7923      	ldrb	r3, [r4, #4]
1000c660:	7800      	ldrb	r0, [r0, #0]
1000c662:	9300      	str	r3, [sp, #0]
1000c664:	9501      	str	r5, [sp, #4]
1000c666:	8c25      	ldrh	r5, [r4, #32]
1000c668:	1d62      	adds	r2, r4, #5
1000c66a:	9502      	str	r5, [sp, #8]
1000c66c:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c66e:	9b07      	ldr	r3, [sp, #28]
1000c670:	9503      	str	r5, [sp, #12]
1000c672:	9704      	str	r7, [sp, #16]
1000c674:	4d06      	ldr	r5, [pc, #24]	; (1000c690 <at_ble_set_dev_config+0x88>)
1000c676:	47a8      	blx	r5
1000c678:	7126      	strb	r6, [r4, #4]
1000c67a:	1c05      	adds	r5, r0, #0
1000c67c:	1c21      	adds	r1, r4, #0
1000c67e:	4803      	ldr	r0, [pc, #12]	; (1000c68c <at_ble_set_dev_config+0x84>)
1000c680:	2226      	movs	r2, #38	; 0x26
1000c682:	4b04      	ldr	r3, [pc, #16]	; (1000c694 <at_ble_set_dev_config+0x8c>)
1000c684:	4798      	blx	r3
1000c686:	1c28      	adds	r0, r5, #0
1000c688:	b009      	add	sp, #36	; 0x24
1000c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c68c:	10014d7e 	.word	0x10014d7e
1000c690:	1000ddad 	.word	0x1000ddad
1000c694:	10010517 	.word	0x10010517

1000c698 <at_ble_init>:
1000c698:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c69a:	b087      	sub	sp, #28
1000c69c:	af03      	add	r7, sp, #12
1000c69e:	4954      	ldr	r1, [pc, #336]	; (1000c7f0 <at_ble_init+0x158>)
1000c6a0:	220b      	movs	r2, #11
1000c6a2:	4b54      	ldr	r3, [pc, #336]	; (1000c7f4 <at_ble_init+0x15c>)
1000c6a4:	1c04      	adds	r4, r0, #0
1000c6a6:	1c38      	adds	r0, r7, #0
1000c6a8:	4798      	blx	r3
1000c6aa:	2205      	movs	r2, #5
1000c6ac:	4b52      	ldr	r3, [pc, #328]	; (1000c7f8 <at_ble_init+0x160>)
1000c6ae:	2640      	movs	r6, #64	; 0x40
1000c6b0:	801a      	strh	r2, [r3, #0]
1000c6b2:	2300      	movs	r3, #0
1000c6b4:	4a51      	ldr	r2, [pc, #324]	; (1000c7fc <at_ble_init+0x164>)
1000c6b6:	6013      	str	r3, [r2, #0]
1000c6b8:	4a51      	ldr	r2, [pc, #324]	; (1000c800 <at_ble_init+0x168>)
1000c6ba:	7013      	strb	r3, [r2, #0]
1000c6bc:	4a51      	ldr	r2, [pc, #324]	; (1000c804 <at_ble_init+0x16c>)
1000c6be:	7013      	strb	r3, [r2, #0]
1000c6c0:	4b51      	ldr	r3, [pc, #324]	; (1000c808 <at_ble_init+0x170>)
1000c6c2:	4798      	blx	r3
1000c6c4:	4b51      	ldr	r3, [pc, #324]	; (1000c80c <at_ble_init+0x174>)
1000c6c6:	4798      	blx	r3
1000c6c8:	4b51      	ldr	r3, [pc, #324]	; (1000c810 <at_ble_init+0x178>)
1000c6ca:	4798      	blx	r3
1000c6cc:	4b51      	ldr	r3, [pc, #324]	; (1000c814 <at_ble_init+0x17c>)
1000c6ce:	4798      	blx	r3
1000c6d0:	2c00      	cmp	r4, #0
1000c6d2:	d100      	bne.n	1000c6d6 <at_ble_init+0x3e>
1000c6d4:	e089      	b.n	1000c7ea <at_ble_init+0x152>
1000c6d6:	68a3      	ldr	r3, [r4, #8]
1000c6d8:	2b00      	cmp	r3, #0
1000c6da:	d100      	bne.n	1000c6de <at_ble_init+0x46>
1000c6dc:	e085      	b.n	1000c7ea <at_ble_init+0x152>
1000c6de:	6923      	ldr	r3, [r4, #16]
1000c6e0:	2b00      	cmp	r3, #0
1000c6e2:	d100      	bne.n	1000c6e6 <at_ble_init+0x4e>
1000c6e4:	e081      	b.n	1000c7ea <at_ble_init+0x152>
1000c6e6:	6820      	ldr	r0, [r4, #0]
1000c6e8:	2800      	cmp	r0, #0
1000c6ea:	d102      	bne.n	1000c6f2 <at_ble_init+0x5a>
1000c6ec:	6863      	ldr	r3, [r4, #4]
1000c6ee:	2b00      	cmp	r3, #0
1000c6f0:	d17b      	bne.n	1000c7ea <at_ble_init+0x152>
1000c6f2:	4b49      	ldr	r3, [pc, #292]	; (1000c818 <at_ble_init+0x180>)
1000c6f4:	6861      	ldr	r1, [r4, #4]
1000c6f6:	4798      	blx	r3
1000c6f8:	4b48      	ldr	r3, [pc, #288]	; (1000c81c <at_ble_init+0x184>)
1000c6fa:	4798      	blx	r3
1000c6fc:	2801      	cmp	r0, #1
1000c6fe:	d901      	bls.n	1000c704 <at_ble_init+0x6c>
1000c700:	26e2      	movs	r6, #226	; 0xe2
1000c702:	e072      	b.n	1000c7ea <at_ble_init+0x152>
1000c704:	4846      	ldr	r0, [pc, #280]	; (1000c820 <at_ble_init+0x188>)
1000c706:	4b47      	ldr	r3, [pc, #284]	; (1000c824 <at_ble_init+0x18c>)
1000c708:	4798      	blx	r3
1000c70a:	2800      	cmp	r0, #0
1000c70c:	d1f8      	bne.n	1000c700 <at_ble_init+0x68>
1000c70e:	1c20      	adds	r0, r4, #0
1000c710:	4b45      	ldr	r3, [pc, #276]	; (1000c828 <at_ble_init+0x190>)
1000c712:	4798      	blx	r3
1000c714:	68e0      	ldr	r0, [r4, #12]
1000c716:	68a1      	ldr	r1, [r4, #8]
1000c718:	4b44      	ldr	r3, [pc, #272]	; (1000c82c <at_ble_init+0x194>)
1000c71a:	4798      	blx	r3
1000c71c:	466b      	mov	r3, sp
1000c71e:	2201      	movs	r2, #1
1000c720:	1cdc      	adds	r4, r3, #3
1000c722:	1c20      	adds	r0, r4, #0
1000c724:	a901      	add	r1, sp, #4
1000c726:	4252      	negs	r2, r2
1000c728:	4b41      	ldr	r3, [pc, #260]	; (1000c830 <at_ble_init+0x198>)
1000c72a:	4798      	blx	r3
1000c72c:	2800      	cmp	r0, #0
1000c72e:	d102      	bne.n	1000c736 <at_ble_init+0x9e>
1000c730:	7823      	ldrb	r3, [r4, #0]
1000c732:	2b39      	cmp	r3, #57	; 0x39
1000c734:	d1f2      	bne.n	1000c71c <at_ble_init+0x84>
1000c736:	4b3f      	ldr	r3, [pc, #252]	; (1000c834 <at_ble_init+0x19c>)
1000c738:	4798      	blx	r3
1000c73a:	1e06      	subs	r6, r0, #0
1000c73c:	d155      	bne.n	1000c7ea <at_ble_init+0x152>
1000c73e:	1c03      	adds	r3, r0, #0
1000c740:	2101      	movs	r1, #1
1000c742:	4a3d      	ldr	r2, [pc, #244]	; (1000c838 <at_ble_init+0x1a0>)
1000c744:	4249      	negs	r1, r1
1000c746:	189a      	adds	r2, r3, r2
1000c748:	3312      	adds	r3, #18
1000c74a:	8151      	strh	r1, [r2, #10]
1000c74c:	2b90      	cmp	r3, #144	; 0x90
1000c74e:	d1f7      	bne.n	1000c740 <at_ble_init+0xa8>
1000c750:	4c3a      	ldr	r4, [pc, #232]	; (1000c83c <at_ble_init+0x1a4>)
1000c752:	3b81      	subs	r3, #129	; 0x81
1000c754:	7023      	strb	r3, [r4, #0]
1000c756:	4b3a      	ldr	r3, [pc, #232]	; (1000c840 <at_ble_init+0x1a8>)
1000c758:	4a3a      	ldr	r2, [pc, #232]	; (1000c844 <at_ble_init+0x1ac>)
1000c75a:	8063      	strh	r3, [r4, #2]
1000c75c:	2300      	movs	r3, #0
1000c75e:	7123      	strb	r3, [r4, #4]
1000c760:	3301      	adds	r3, #1
1000c762:	1e58      	subs	r0, r3, #1
1000c764:	0119      	lsls	r1, r3, #4
1000c766:	4301      	orrs	r1, r0
1000c768:	3302      	adds	r3, #2
1000c76a:	7011      	strb	r1, [r2, #0]
1000c76c:	3201      	adds	r2, #1
1000c76e:	2b21      	cmp	r3, #33	; 0x21
1000c770:	d1f7      	bne.n	1000c762 <at_ble_init+0xca>
1000c772:	33e0      	adds	r3, #224	; 0xe0
1000c774:	33ff      	adds	r3, #255	; 0xff
1000c776:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c778:	1c23      	adds	r3, r4, #0
1000c77a:	2500      	movs	r5, #0
1000c77c:	3373      	adds	r3, #115	; 0x73
1000c77e:	701d      	strb	r5, [r3, #0]
1000c780:	1c23      	adds	r3, r4, #0
1000c782:	3372      	adds	r3, #114	; 0x72
1000c784:	701d      	strb	r5, [r3, #0]
1000c786:	1c23      	adds	r3, r4, #0
1000c788:	3376      	adds	r3, #118	; 0x76
1000c78a:	701d      	strb	r5, [r3, #0]
1000c78c:	1c23      	adds	r3, r4, #0
1000c78e:	33cc      	adds	r3, #204	; 0xcc
1000c790:	801d      	strh	r5, [r3, #0]
1000c792:	1c22      	adds	r2, r4, #0
1000c794:	23a0      	movs	r3, #160	; 0xa0
1000c796:	32d0      	adds	r2, #208	; 0xd0
1000c798:	005b      	lsls	r3, r3, #1
1000c79a:	8013      	strh	r3, [r2, #0]
1000c79c:	1c22      	adds	r2, r4, #0
1000c79e:	32ce      	adds	r2, #206	; 0xce
1000c7a0:	8013      	strh	r3, [r2, #0]
1000c7a2:	1c23      	adds	r3, r4, #0
1000c7a4:	33d2      	adds	r3, #210	; 0xd2
1000c7a6:	801d      	strh	r5, [r3, #0]
1000c7a8:	22fa      	movs	r2, #250	; 0xfa
1000c7aa:	1c23      	adds	r3, r4, #0
1000c7ac:	0052      	lsls	r2, r2, #1
1000c7ae:	33d4      	adds	r3, #212	; 0xd4
1000c7b0:	801a      	strh	r2, [r3, #0]
1000c7b2:	1c23      	adds	r3, r4, #0
1000c7b4:	33d6      	adds	r3, #214	; 0xd6
1000c7b6:	701d      	strb	r5, [r3, #0]
1000c7b8:	1c20      	adds	r0, r4, #0
1000c7ba:	4b23      	ldr	r3, [pc, #140]	; (1000c848 <at_ble_init+0x1b0>)
1000c7bc:	76e5      	strb	r5, [r4, #27]
1000c7be:	7725      	strb	r5, [r4, #28]
1000c7c0:	7765      	strb	r5, [r4, #29]
1000c7c2:	77a5      	strb	r5, [r4, #30]
1000c7c4:	77e5      	strb	r5, [r4, #31]
1000c7c6:	8425      	strh	r5, [r4, #32]
1000c7c8:	8465      	strh	r5, [r4, #34]	; 0x22
1000c7ca:	4798      	blx	r3
1000c7cc:	1c23      	adds	r3, r4, #0
1000c7ce:	2207      	movs	r2, #7
1000c7d0:	3374      	adds	r3, #116	; 0x74
1000c7d2:	701a      	strb	r2, [r3, #0]
1000c7d4:	1c23      	adds	r3, r4, #0
1000c7d6:	3204      	adds	r2, #4
1000c7d8:	33aa      	adds	r3, #170	; 0xaa
1000c7da:	801a      	strh	r2, [r3, #0]
1000c7dc:	1c2b      	adds	r3, r5, #0
1000c7de:	5d7a      	ldrb	r2, [r7, r5]
1000c7e0:	33ac      	adds	r3, #172	; 0xac
1000c7e2:	3501      	adds	r5, #1
1000c7e4:	54e2      	strb	r2, [r4, r3]
1000c7e6:	2d0b      	cmp	r5, #11
1000c7e8:	d1f8      	bne.n	1000c7dc <at_ble_init+0x144>
1000c7ea:	1c30      	adds	r0, r6, #0
1000c7ec:	b007      	add	sp, #28
1000c7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7f0:	100123c4 	.word	0x100123c4
1000c7f4:	10010517 	.word	0x10010517
1000c7f8:	10014cec 	.word	0x10014cec
1000c7fc:	10014068 	.word	0x10014068
1000c800:	10013fc8 	.word	0x10013fc8
1000c804:	10012528 	.word	0x10012528
1000c808:	1000e86d 	.word	0x1000e86d
1000c80c:	1000cae9 	.word	0x1000cae9
1000c810:	1000cb65 	.word	0x1000cb65
1000c814:	1000cd85 	.word	0x1000cd85
1000c818:	1000cba1 	.word	0x1000cba1
1000c81c:	1000b1dd 	.word	0x1000b1dd
1000c820:	1000d0cd 	.word	0x1000d0cd
1000c824:	1000b421 	.word	0x1000b421
1000c828:	1000d175 	.word	0x1000d175
1000c82c:	1000bd85 	.word	0x1000bd85
1000c830:	1000be41 	.word	0x1000be41
1000c834:	1000dd3d 	.word	0x1000dd3d
1000c838:	10014cee 	.word	0x10014cee
1000c83c:	10014d7e 	.word	0x10014d7e
1000c840:	00003a98 	.word	0x00003a98
1000c844:	10014d89 	.word	0x10014d89
1000c848:	1000c609 	.word	0x1000c609

1000c84c <at_ble_addr_set>:
1000c84c:	b538      	push	{r3, r4, r5, lr}
1000c84e:	1c45      	adds	r5, r0, #1
1000c850:	1c03      	adds	r3, r0, #0
1000c852:	20cf      	movs	r0, #207	; 0xcf
1000c854:	2d00      	cmp	r5, #0
1000c856:	d018      	beq.n	1000c88a <at_ble_addr_set+0x3e>
1000c858:	781a      	ldrb	r2, [r3, #0]
1000c85a:	2a03      	cmp	r2, #3
1000c85c:	d815      	bhi.n	1000c88a <at_ble_addr_set+0x3e>
1000c85e:	2a01      	cmp	r2, #1
1000c860:	d102      	bne.n	1000c868 <at_ble_addr_set+0x1c>
1000c862:	785a      	ldrb	r2, [r3, #1]
1000c864:	2a00      	cmp	r2, #0
1000c866:	d010      	beq.n	1000c88a <at_ble_addr_set+0x3e>
1000c868:	1c1c      	adds	r4, r3, #0
1000c86a:	1c29      	adds	r1, r5, #0
1000c86c:	2206      	movs	r2, #6
1000c86e:	4b07      	ldr	r3, [pc, #28]	; (1000c88c <at_ble_addr_set+0x40>)
1000c870:	4807      	ldr	r0, [pc, #28]	; (1000c890 <at_ble_addr_set+0x44>)
1000c872:	4798      	blx	r3
1000c874:	7823      	ldrb	r3, [r4, #0]
1000c876:	4807      	ldr	r0, [pc, #28]	; (1000c894 <at_ble_addr_set+0x48>)
1000c878:	7103      	strb	r3, [r0, #4]
1000c87a:	4b07      	ldr	r3, [pc, #28]	; (1000c898 <at_ble_addr_set+0x4c>)
1000c87c:	4798      	blx	r3
1000c87e:	7823      	ldrb	r3, [r4, #0]
1000c880:	2b00      	cmp	r3, #0
1000c882:	d102      	bne.n	1000c88a <at_ble_addr_set+0x3e>
1000c884:	1c28      	adds	r0, r5, #0
1000c886:	4b05      	ldr	r3, [pc, #20]	; (1000c89c <at_ble_addr_set+0x50>)
1000c888:	4798      	blx	r3
1000c88a:	bd38      	pop	{r3, r4, r5, pc}
1000c88c:	10010517 	.word	0x10010517
1000c890:	10014d83 	.word	0x10014d83
1000c894:	10014d7e 	.word	0x10014d7e
1000c898:	1000c609 	.word	0x1000c609
1000c89c:	1000d1f9 	.word	0x1000d1f9

1000c8a0 <at_ble_adv_data_set>:
1000c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c8a2:	4684      	mov	ip, r0
1000c8a4:	1c0f      	adds	r7, r1, #0
1000c8a6:	1c16      	adds	r6, r2, #0
1000c8a8:	1c1c      	adds	r4, r3, #0
1000c8aa:	2800      	cmp	r0, #0
1000c8ac:	d102      	bne.n	1000c8b4 <at_ble_adv_data_set+0x14>
1000c8ae:	20e2      	movs	r0, #226	; 0xe2
1000c8b0:	2a00      	cmp	r2, #0
1000c8b2:	d02b      	beq.n	1000c90c <at_ble_adv_data_set+0x6c>
1000c8b4:	20cf      	movs	r0, #207	; 0xcf
1000c8b6:	2f1f      	cmp	r7, #31
1000c8b8:	d828      	bhi.n	1000c90c <at_ble_adv_data_set+0x6c>
1000c8ba:	2c1f      	cmp	r4, #31
1000c8bc:	d826      	bhi.n	1000c90c <at_ble_adv_data_set+0x6c>
1000c8be:	4663      	mov	r3, ip
1000c8c0:	2b00      	cmp	r3, #0
1000c8c2:	d00e      	beq.n	1000c8e2 <at_ble_adv_data_set+0x42>
1000c8c4:	4812      	ldr	r0, [pc, #72]	; (1000c910 <at_ble_adv_data_set+0x70>)
1000c8c6:	4d13      	ldr	r5, [pc, #76]	; (1000c914 <at_ble_adv_data_set+0x74>)
1000c8c8:	2f00      	cmp	r7, #0
1000c8ca:	d104      	bne.n	1000c8d6 <at_ble_adv_data_set+0x36>
1000c8cc:	1c39      	adds	r1, r7, #0
1000c8ce:	221f      	movs	r2, #31
1000c8d0:	4b11      	ldr	r3, [pc, #68]	; (1000c918 <at_ble_adv_data_set+0x78>)
1000c8d2:	4798      	blx	r3
1000c8d4:	e003      	b.n	1000c8de <at_ble_adv_data_set+0x3e>
1000c8d6:	4661      	mov	r1, ip
1000c8d8:	1c3a      	adds	r2, r7, #0
1000c8da:	4b10      	ldr	r3, [pc, #64]	; (1000c91c <at_ble_adv_data_set+0x7c>)
1000c8dc:	4798      	blx	r3
1000c8de:	3572      	adds	r5, #114	; 0x72
1000c8e0:	702f      	strb	r7, [r5, #0]
1000c8e2:	1e30      	subs	r0, r6, #0
1000c8e4:	d012      	beq.n	1000c90c <at_ble_adv_data_set+0x6c>
1000c8e6:	4d0b      	ldr	r5, [pc, #44]	; (1000c914 <at_ble_adv_data_set+0x74>)
1000c8e8:	480d      	ldr	r0, [pc, #52]	; (1000c920 <at_ble_adv_data_set+0x80>)
1000c8ea:	2c00      	cmp	r4, #0
1000c8ec:	d107      	bne.n	1000c8fe <at_ble_adv_data_set+0x5e>
1000c8ee:	1c21      	adds	r1, r4, #0
1000c8f0:	221f      	movs	r2, #31
1000c8f2:	4b09      	ldr	r3, [pc, #36]	; (1000c918 <at_ble_adv_data_set+0x78>)
1000c8f4:	3573      	adds	r5, #115	; 0x73
1000c8f6:	4798      	blx	r3
1000c8f8:	702c      	strb	r4, [r5, #0]
1000c8fa:	1c20      	adds	r0, r4, #0
1000c8fc:	e006      	b.n	1000c90c <at_ble_adv_data_set+0x6c>
1000c8fe:	1c31      	adds	r1, r6, #0
1000c900:	1c22      	adds	r2, r4, #0
1000c902:	4b06      	ldr	r3, [pc, #24]	; (1000c91c <at_ble_adv_data_set+0x7c>)
1000c904:	4798      	blx	r3
1000c906:	2000      	movs	r0, #0
1000c908:	3573      	adds	r5, #115	; 0x73
1000c90a:	702c      	strb	r4, [r5, #0]
1000c90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c90e:	46c0      	nop			; (mov r8, r8)
1000c910:	10014db2 	.word	0x10014db2
1000c914:	10014d7e 	.word	0x10014d7e
1000c918:	10010529 	.word	0x10010529
1000c91c:	10010517 	.word	0x10010517
1000c920:	10014dd1 	.word	0x10014dd1

1000c924 <at_ble_adv_start>:
1000c924:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c926:	b091      	sub	sp, #68	; 0x44
1000c928:	1c1f      	adds	r7, r3, #0
1000c92a:	ab16      	add	r3, sp, #88	; 0x58
1000c92c:	881d      	ldrh	r5, [r3, #0]
1000c92e:	ab17      	add	r3, sp, #92	; 0x5c
1000c930:	881b      	ldrh	r3, [r3, #0]
1000c932:	910d      	str	r1, [sp, #52]	; 0x34
1000c934:	930e      	str	r3, [sp, #56]	; 0x38
1000c936:	ab18      	add	r3, sp, #96	; 0x60
1000c938:	781b      	ldrb	r3, [r3, #0]
1000c93a:	1c04      	adds	r4, r0, #0
1000c93c:	930f      	str	r3, [sp, #60]	; 0x3c
1000c93e:	4b42      	ldr	r3, [pc, #264]	; (1000ca48 <at_ble_adv_start+0x124>)
1000c940:	1c16      	adds	r6, r2, #0
1000c942:	3373      	adds	r3, #115	; 0x73
1000c944:	781b      	ldrb	r3, [r3, #0]
1000c946:	20cf      	movs	r0, #207	; 0xcf
1000c948:	930c      	str	r3, [sp, #48]	; 0x30
1000c94a:	2c01      	cmp	r4, #1
1000c94c:	d103      	bne.n	1000c956 <at_ble_adv_start+0x32>
1000c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c950:	2b00      	cmp	r3, #0
1000c952:	d176      	bne.n	1000ca42 <at_ble_adv_start+0x11e>
1000c954:	e024      	b.n	1000c9a0 <at_ble_adv_start+0x7c>
1000c956:	2c04      	cmp	r4, #4
1000c958:	d873      	bhi.n	1000ca42 <at_ble_adv_start+0x11e>
1000c95a:	2380      	movs	r3, #128	; 0x80
1000c95c:	01db      	lsls	r3, r3, #7
1000c95e:	429d      	cmp	r5, r3
1000c960:	d86f      	bhi.n	1000ca42 <at_ble_adv_start+0x11e>
1000c962:	2c00      	cmp	r4, #0
1000c964:	d102      	bne.n	1000c96c <at_ble_adv_start+0x48>
1000c966:	2d1f      	cmp	r5, #31
1000c968:	d96b      	bls.n	1000ca42 <at_ble_adv_start+0x11e>
1000c96a:	e003      	b.n	1000c974 <at_ble_adv_start+0x50>
1000c96c:	2d9f      	cmp	r5, #159	; 0x9f
1000c96e:	d801      	bhi.n	1000c974 <at_ble_adv_start+0x50>
1000c970:	2c01      	cmp	r4, #1
1000c972:	d166      	bne.n	1000ca42 <at_ble_adv_start+0x11e>
1000c974:	2f00      	cmp	r7, #0
1000c976:	d009      	beq.n	1000c98c <at_ble_adv_start+0x68>
1000c978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c97a:	20cf      	movs	r0, #207	; 0xcf
1000c97c:	3b01      	subs	r3, #1
1000c97e:	2b01      	cmp	r3, #1
1000c980:	d95f      	bls.n	1000ca42 <at_ble_adv_start+0x11e>
1000c982:	2c01      	cmp	r4, #1
1000c984:	d102      	bne.n	1000c98c <at_ble_adv_start+0x68>
1000c986:	2d00      	cmp	r5, #0
1000c988:	d100      	bne.n	1000c98c <at_ble_adv_start+0x68>
1000c98a:	3520      	adds	r5, #32
1000c98c:	4b2f      	ldr	r3, [pc, #188]	; (1000ca4c <at_ble_adv_start+0x128>)
1000c98e:	4798      	blx	r3
1000c990:	1c01      	adds	r1, r0, #0
1000c992:	2e00      	cmp	r6, #0
1000c994:	d043      	beq.n	1000ca1e <at_ble_adv_start+0xfa>
1000c996:	7833      	ldrb	r3, [r6, #0]
1000c998:	1e60      	subs	r0, r4, #1
1000c99a:	2b00      	cmp	r3, #0
1000c99c:	d109      	bne.n	1000c9b2 <at_ble_adv_start+0x8e>
1000c99e:	e03b      	b.n	1000ca18 <at_ble_adv_start+0xf4>
1000c9a0:	2380      	movs	r3, #128	; 0x80
1000c9a2:	01db      	lsls	r3, r3, #7
1000c9a4:	429d      	cmp	r5, r3
1000c9a6:	d84c      	bhi.n	1000ca42 <at_ble_adv_start+0x11e>
1000c9a8:	2e00      	cmp	r6, #0
1000c9aa:	d04a      	beq.n	1000ca42 <at_ble_adv_start+0x11e>
1000c9ac:	2f00      	cmp	r7, #0
1000c9ae:	d1e3      	bne.n	1000c978 <at_ble_adv_start+0x54>
1000c9b0:	e02b      	b.n	1000ca0a <at_ble_adv_start+0xe6>
1000c9b2:	2301      	movs	r3, #1
1000c9b4:	2803      	cmp	r0, #3
1000c9b6:	d93a      	bls.n	1000ca2e <at_ble_adv_start+0x10a>
1000c9b8:	200d      	movs	r0, #13
1000c9ba:	1c72      	adds	r2, r6, #1
1000c9bc:	e002      	b.n	1000c9c4 <at_ble_adv_start+0xa0>
1000c9be:	200e      	movs	r0, #14
1000c9c0:	1e32      	subs	r2, r6, #0
1000c9c2:	d1fa      	bne.n	1000c9ba <at_ble_adv_start+0x96>
1000c9c4:	4c20      	ldr	r4, [pc, #128]	; (1000ca48 <at_ble_adv_start+0x124>)
1000c9c6:	3474      	adds	r4, #116	; 0x74
1000c9c8:	7826      	ldrb	r6, [r4, #0]
1000c9ca:	2407      	movs	r4, #7
1000c9cc:	2e00      	cmp	r6, #0
1000c9ce:	d000      	beq.n	1000c9d2 <at_ble_adv_start+0xae>
1000c9d0:	1c34      	adds	r4, r6, #0
1000c9d2:	9200      	str	r2, [sp, #0]
1000c9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c9d6:	9403      	str	r4, [sp, #12]
1000c9d8:	9204      	str	r2, [sp, #16]
1000c9da:	4a1b      	ldr	r2, [pc, #108]	; (1000ca48 <at_ble_adv_start+0x124>)
1000c9dc:	9501      	str	r5, [sp, #4]
1000c9de:	9502      	str	r5, [sp, #8]
1000c9e0:	9705      	str	r7, [sp, #20]
1000c9e2:	3272      	adds	r2, #114	; 0x72
1000c9e4:	7812      	ldrb	r2, [r2, #0]
1000c9e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000c9e8:	9206      	str	r2, [sp, #24]
1000c9ea:	4a19      	ldr	r2, [pc, #100]	; (1000ca50 <at_ble_adv_start+0x12c>)
1000c9ec:	9207      	str	r2, [sp, #28]
1000c9ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c9f0:	9208      	str	r2, [sp, #32]
1000c9f2:	4a18      	ldr	r2, [pc, #96]	; (1000ca54 <at_ble_adv_start+0x130>)
1000c9f4:	9209      	str	r2, [sp, #36]	; 0x24
1000c9f6:	2264      	movs	r2, #100	; 0x64
1000c9f8:	4362      	muls	r2, r4
1000c9fa:	b292      	uxth	r2, r2
1000c9fc:	920a      	str	r2, [sp, #40]	; 0x28
1000c9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000ca00:	4c15      	ldr	r4, [pc, #84]	; (1000ca58 <at_ble_adv_start+0x134>)
1000ca02:	920b      	str	r2, [sp, #44]	; 0x2c
1000ca04:	4a15      	ldr	r2, [pc, #84]	; (1000ca5c <at_ble_adv_start+0x138>)
1000ca06:	47a0      	blx	r4
1000ca08:	e01b      	b.n	1000ca42 <at_ble_adv_start+0x11e>
1000ca0a:	2d00      	cmp	r5, #0
1000ca0c:	d1be      	bne.n	1000c98c <at_ble_adv_start+0x68>
1000ca0e:	4b0f      	ldr	r3, [pc, #60]	; (1000ca4c <at_ble_adv_start+0x128>)
1000ca10:	4798      	blx	r3
1000ca12:	2520      	movs	r5, #32
1000ca14:	1c01      	adds	r1, r0, #0
1000ca16:	e7be      	b.n	1000c996 <at_ble_adv_start+0x72>
1000ca18:	2803      	cmp	r0, #3
1000ca1a:	d8cd      	bhi.n	1000c9b8 <at_ble_adv_start+0x94>
1000ca1c:	e006      	b.n	1000ca2c <at_ble_adv_start+0x108>
1000ca1e:	1e60      	subs	r0, r4, #1
1000ca20:	2803      	cmp	r0, #3
1000ca22:	d903      	bls.n	1000ca2c <at_ble_adv_start+0x108>
1000ca24:	1c33      	adds	r3, r6, #0
1000ca26:	200d      	movs	r0, #13
1000ca28:	1c32      	adds	r2, r6, #0
1000ca2a:	e7cb      	b.n	1000c9c4 <at_ble_adv_start+0xa0>
1000ca2c:	2300      	movs	r3, #0
1000ca2e:	f002 f84d 	bl	1000eacc <__gnu_thumb1_case_sqi>
1000ca32:	06c6      	.short	0x06c6
1000ca34:	0204      	.short	0x0204
1000ca36:	200f      	movs	r0, #15
1000ca38:	e7c2      	b.n	1000c9c0 <at_ble_adv_start+0x9c>
1000ca3a:	2200      	movs	r2, #0
1000ca3c:	920c      	str	r2, [sp, #48]	; 0x30
1000ca3e:	200c      	movs	r0, #12
1000ca40:	e7be      	b.n	1000c9c0 <at_ble_adv_start+0x9c>
1000ca42:	b011      	add	sp, #68	; 0x44
1000ca44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca46:	46c0      	nop			; (mov r8, r8)
1000ca48:	10014d7e 	.word	0x10014d7e
1000ca4c:	1000e289 	.word	0x1000e289
1000ca50:	10014db2 	.word	0x10014db2
1000ca54:	10014dd1 	.word	0x10014dd1
1000ca58:	1000e169 	.word	0x1000e169
1000ca5c:	00003a98 	.word	0x00003a98

1000ca60 <at_ble_scan_stop>:
1000ca60:	b510      	push	{r4, lr}
1000ca62:	4b05      	ldr	r3, [pc, #20]	; (1000ca78 <at_ble_scan_stop+0x18>)
1000ca64:	4798      	blx	r3
1000ca66:	1e04      	subs	r4, r0, #0
1000ca68:	d103      	bne.n	1000ca72 <at_ble_scan_stop+0x12>
1000ca6a:	20d1      	movs	r0, #209	; 0xd1
1000ca6c:	4b03      	ldr	r3, [pc, #12]	; (1000ca7c <at_ble_scan_stop+0x1c>)
1000ca6e:	0100      	lsls	r0, r0, #4
1000ca70:	4798      	blx	r3
1000ca72:	1c20      	adds	r0, r4, #0
1000ca74:	bd10      	pop	{r4, pc}
1000ca76:	46c0      	nop			; (mov r8, r8)
1000ca78:	1000df95 	.word	0x1000df95
1000ca7c:	1000c519 	.word	0x1000c519

1000ca80 <at_ble_disconnect>:
1000ca80:	b538      	push	{r3, r4, r5, lr}
1000ca82:	1c04      	adds	r4, r0, #0
1000ca84:	4b04      	ldr	r3, [pc, #16]	; (1000ca98 <at_ble_disconnect+0x18>)
1000ca86:	1c08      	adds	r0, r1, #0
1000ca88:	1c21      	adds	r1, r4, #0
1000ca8a:	4798      	blx	r3
1000ca8c:	1c05      	adds	r5, r0, #0
1000ca8e:	4b03      	ldr	r3, [pc, #12]	; (1000ca9c <at_ble_disconnect+0x1c>)
1000ca90:	1c20      	adds	r0, r4, #0
1000ca92:	4798      	blx	r3
1000ca94:	1c28      	adds	r0, r5, #0
1000ca96:	bd38      	pop	{r3, r4, r5, pc}
1000ca98:	1000d60d 	.word	0x1000d60d
1000ca9c:	1000c55d 	.word	0x1000c55d

1000caa0 <at_ble_conn_update_reply>:
1000caa0:	b510      	push	{r4, lr}
1000caa2:	4c01      	ldr	r4, [pc, #4]	; (1000caa8 <at_ble_conn_update_reply+0x8>)
1000caa4:	47a0      	blx	r4
1000caa6:	bd10      	pop	{r4, pc}
1000caa8:	1000dafd 	.word	0x1000dafd

1000caac <at_ble_random_address_resolve>:
1000caac:	b510      	push	{r4, lr}
1000caae:	23cf      	movs	r3, #207	; 0xcf
1000cab0:	2800      	cmp	r0, #0
1000cab2:	d00a      	beq.n	1000caca <at_ble_random_address_resolve+0x1e>
1000cab4:	2900      	cmp	r1, #0
1000cab6:	d008      	beq.n	1000caca <at_ble_random_address_resolve+0x1e>
1000cab8:	2a00      	cmp	r2, #0
1000caba:	d006      	beq.n	1000caca <at_ble_random_address_resolve+0x1e>
1000cabc:	780c      	ldrb	r4, [r1, #0]
1000cabe:	2c02      	cmp	r4, #2
1000cac0:	d103      	bne.n	1000caca <at_ble_random_address_resolve+0x1e>
1000cac2:	4b03      	ldr	r3, [pc, #12]	; (1000cad0 <at_ble_random_address_resolve+0x24>)
1000cac4:	3101      	adds	r1, #1
1000cac6:	4798      	blx	r3
1000cac8:	2300      	movs	r3, #0
1000caca:	1c18      	adds	r0, r3, #0
1000cacc:	bd10      	pop	{r4, pc}
1000cace:	46c0      	nop			; (mov r8, r8)
1000cad0:	1000e329 	.word	0x1000e329

1000cad4 <at_ble_uuid_len2type>:
1000cad4:	1e83      	subs	r3, r0, #2
1000cad6:	b2db      	uxtb	r3, r3
1000cad8:	2003      	movs	r0, #3
1000cada:	2b0e      	cmp	r3, #14
1000cadc:	d801      	bhi.n	1000cae2 <at_ble_uuid_len2type+0xe>
1000cade:	4a01      	ldr	r2, [pc, #4]	; (1000cae4 <at_ble_uuid_len2type+0x10>)
1000cae0:	5cd0      	ldrb	r0, [r2, r3]
1000cae2:	4770      	bx	lr
1000cae4:	100123cf 	.word	0x100123cf

1000cae8 <init_gatt_client_module>:
1000cae8:	2200      	movs	r2, #0
1000caea:	4b01      	ldr	r3, [pc, #4]	; (1000caf0 <init_gatt_client_module+0x8>)
1000caec:	801a      	strh	r2, [r3, #0]
1000caee:	4770      	bx	lr
1000caf0:	10013fc0 	.word	0x10013fc0

1000caf4 <db_searchATT>:
1000caf4:	b570      	push	{r4, r5, r6, lr}
1000caf6:	1c05      	adds	r5, r0, #0
1000caf8:	2400      	movs	r4, #0
1000cafa:	4b0c      	ldr	r3, [pc, #48]	; (1000cb2c <db_searchATT+0x38>)
1000cafc:	6819      	ldr	r1, [r3, #0]
1000cafe:	4b0c      	ldr	r3, [pc, #48]	; (1000cb30 <db_searchATT+0x3c>)
1000cb00:	681e      	ldr	r6, [r3, #0]
1000cb02:	428c      	cmp	r4, r1
1000cb04:	dc10      	bgt.n	1000cb28 <db_searchATT+0x34>
1000cb06:	200c      	movs	r0, #12
1000cb08:	1863      	adds	r3, r4, r1
1000cb0a:	0fda      	lsrs	r2, r3, #31
1000cb0c:	18d3      	adds	r3, r2, r3
1000cb0e:	1c02      	adds	r2, r0, #0
1000cb10:	105b      	asrs	r3, r3, #1
1000cb12:	435a      	muls	r2, r3
1000cb14:	18b0      	adds	r0, r6, r2
1000cb16:	8802      	ldrh	r2, [r0, #0]
1000cb18:	42aa      	cmp	r2, r5
1000cb1a:	d201      	bcs.n	1000cb20 <db_searchATT+0x2c>
1000cb1c:	1e59      	subs	r1, r3, #1
1000cb1e:	e7f0      	b.n	1000cb02 <db_searchATT+0xe>
1000cb20:	42aa      	cmp	r2, r5
1000cb22:	d902      	bls.n	1000cb2a <db_searchATT+0x36>
1000cb24:	1c5c      	adds	r4, r3, #1
1000cb26:	e7ec      	b.n	1000cb02 <db_searchATT+0xe>
1000cb28:	2000      	movs	r0, #0
1000cb2a:	bd70      	pop	{r4, r5, r6, pc}
1000cb2c:	10013fd4 	.word	0x10013fd4
1000cb30:	10013fcc 	.word	0x10013fcc

1000cb34 <at_ble_read_authorize_reply.part.1>:
1000cb34:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000cb36:	4b09      	ldr	r3, [pc, #36]	; (1000cb5c <at_ble_read_authorize_reply.part.1+0x28>)
1000cb38:	1c05      	adds	r5, r0, #0
1000cb3a:	1c08      	adds	r0, r1, #0
1000cb3c:	1c0c      	adds	r4, r1, #0
1000cb3e:	4798      	blx	r3
1000cb40:	2800      	cmp	r0, #0
1000cb42:	d009      	beq.n	1000cb58 <at_ble_read_authorize_reply.part.1+0x24>
1000cb44:	6882      	ldr	r2, [r0, #8]
1000cb46:	2a00      	cmp	r2, #0
1000cb48:	d006      	beq.n	1000cb58 <at_ble_read_authorize_reply.part.1+0x24>
1000cb4a:	8883      	ldrh	r3, [r0, #4]
1000cb4c:	1c29      	adds	r1, r5, #0
1000cb4e:	9200      	str	r2, [sp, #0]
1000cb50:	1c20      	adds	r0, r4, #0
1000cb52:	2200      	movs	r2, #0
1000cb54:	4c02      	ldr	r4, [pc, #8]	; (1000cb60 <at_ble_read_authorize_reply.part.1+0x2c>)
1000cb56:	47a0      	blx	r4
1000cb58:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cb5a:	46c0      	nop			; (mov r8, r8)
1000cb5c:	1000caf5 	.word	0x1000caf5
1000cb60:	1000e50d 	.word	0x1000e50d

1000cb64 <initi_gatt_server_module>:
1000cb64:	2300      	movs	r3, #0
1000cb66:	4a07      	ldr	r2, [pc, #28]	; (1000cb84 <initi_gatt_server_module+0x20>)
1000cb68:	7013      	strb	r3, [r2, #0]
1000cb6a:	4a07      	ldr	r2, [pc, #28]	; (1000cb88 <initi_gatt_server_module+0x24>)
1000cb6c:	6013      	str	r3, [r2, #0]
1000cb6e:	4a07      	ldr	r2, [pc, #28]	; (1000cb8c <initi_gatt_server_module+0x28>)
1000cb70:	6013      	str	r3, [r2, #0]
1000cb72:	4a07      	ldr	r2, [pc, #28]	; (1000cb90 <initi_gatt_server_module+0x2c>)
1000cb74:	6013      	str	r3, [r2, #0]
1000cb76:	4a07      	ldr	r2, [pc, #28]	; (1000cb94 <initi_gatt_server_module+0x30>)
1000cb78:	6013      	str	r3, [r2, #0]
1000cb7a:	4a07      	ldr	r2, [pc, #28]	; (1000cb98 <initi_gatt_server_module+0x34>)
1000cb7c:	6013      	str	r3, [r2, #0]
1000cb7e:	4a07      	ldr	r2, [pc, #28]	; (1000cb9c <initi_gatt_server_module+0x38>)
1000cb80:	6013      	str	r3, [r2, #0]
1000cb82:	4770      	bx	lr
1000cb84:	10013fc8 	.word	0x10013fc8
1000cb88:	10013fd8 	.word	0x10013fd8
1000cb8c:	10013fd4 	.word	0x10013fd4
1000cb90:	10013fc4 	.word	0x10013fc4
1000cb94:	10013fd0 	.word	0x10013fd0
1000cb98:	10013fcc 	.word	0x10013fcc
1000cb9c:	10013fdc 	.word	0x10013fdc

1000cba0 <db_init>:
1000cba0:	4b0a      	ldr	r3, [pc, #40]	; (1000cbcc <db_init+0x2c>)
1000cba2:	4a0b      	ldr	r2, [pc, #44]	; (1000cbd0 <db_init+0x30>)
1000cba4:	6018      	str	r0, [r3, #0]
1000cba6:	084b      	lsrs	r3, r1, #1
1000cba8:	6013      	str	r3, [r2, #0]
1000cbaa:	4a0a      	ldr	r2, [pc, #40]	; (1000cbd4 <db_init+0x34>)
1000cbac:	18c3      	adds	r3, r0, r3
1000cbae:	6013      	str	r3, [r2, #0]
1000cbb0:	4a09      	ldr	r2, [pc, #36]	; (1000cbd8 <db_init+0x38>)
1000cbb2:	1841      	adds	r1, r0, r1
1000cbb4:	6013      	str	r3, [r2, #0]
1000cbb6:	2303      	movs	r3, #3
1000cbb8:	2200      	movs	r2, #0
1000cbba:	3103      	adds	r1, #3
1000cbbc:	4399      	bics	r1, r3
1000cbbe:	4b07      	ldr	r3, [pc, #28]	; (1000cbdc <db_init+0x3c>)
1000cbc0:	3904      	subs	r1, #4
1000cbc2:	6019      	str	r1, [r3, #0]
1000cbc4:	4b06      	ldr	r3, [pc, #24]	; (1000cbe0 <db_init+0x40>)
1000cbc6:	601a      	str	r2, [r3, #0]
1000cbc8:	4770      	bx	lr
1000cbca:	46c0      	nop			; (mov r8, r8)
1000cbcc:	10013fdc 	.word	0x10013fdc
1000cbd0:	10013fd8 	.word	0x10013fd8
1000cbd4:	10013fc4 	.word	0x10013fc4
1000cbd8:	10013fd0 	.word	0x10013fd0
1000cbdc:	10013fcc 	.word	0x10013fcc
1000cbe0:	10013fd4 	.word	0x10013fd4

1000cbe4 <at_ble_characteristic_value_set>:
1000cbe4:	b570      	push	{r4, r5, r6, lr}
1000cbe6:	4b0b      	ldr	r3, [pc, #44]	; (1000cc14 <at_ble_characteristic_value_set+0x30>)
1000cbe8:	1c06      	adds	r6, r0, #0
1000cbea:	1c0c      	adds	r4, r1, #0
1000cbec:	1c15      	adds	r5, r2, #0
1000cbee:	4798      	blx	r3
1000cbf0:	2800      	cmp	r0, #0
1000cbf2:	d008      	beq.n	1000cc06 <at_ble_characteristic_value_set+0x22>
1000cbf4:	6880      	ldr	r0, [r0, #8]
1000cbf6:	2800      	cmp	r0, #0
1000cbf8:	d005      	beq.n	1000cc06 <at_ble_characteristic_value_set+0x22>
1000cbfa:	1c21      	adds	r1, r4, #0
1000cbfc:	1c2a      	adds	r2, r5, #0
1000cbfe:	4b06      	ldr	r3, [pc, #24]	; (1000cc18 <at_ble_characteristic_value_set+0x34>)
1000cc00:	4798      	blx	r3
1000cc02:	2000      	movs	r0, #0
1000cc04:	e004      	b.n	1000cc10 <at_ble_characteristic_value_set+0x2c>
1000cc06:	1c30      	adds	r0, r6, #0
1000cc08:	1c29      	adds	r1, r5, #0
1000cc0a:	1c22      	adds	r2, r4, #0
1000cc0c:	4b03      	ldr	r3, [pc, #12]	; (1000cc1c <at_ble_characteristic_value_set+0x38>)
1000cc0e:	4798      	blx	r3
1000cc10:	bd70      	pop	{r4, r5, r6, pc}
1000cc12:	46c0      	nop			; (mov r8, r8)
1000cc14:	1000caf5 	.word	0x1000caf5
1000cc18:	10010517 	.word	0x10010517
1000cc1c:	1000e881 	.word	0x1000e881

1000cc20 <at_ble_characteristic_value_get>:
1000cc20:	b570      	push	{r4, r5, r6, lr}
1000cc22:	4b0c      	ldr	r3, [pc, #48]	; (1000cc54 <at_ble_characteristic_value_get+0x34>)
1000cc24:	1c06      	adds	r6, r0, #0
1000cc26:	1c0c      	adds	r4, r1, #0
1000cc28:	1c15      	adds	r5, r2, #0
1000cc2a:	4798      	blx	r3
1000cc2c:	2800      	cmp	r0, #0
1000cc2e:	d00b      	beq.n	1000cc48 <at_ble_characteristic_value_get+0x28>
1000cc30:	6883      	ldr	r3, [r0, #8]
1000cc32:	2b00      	cmp	r3, #0
1000cc34:	d008      	beq.n	1000cc48 <at_ble_characteristic_value_get+0x28>
1000cc36:	8883      	ldrh	r3, [r0, #4]
1000cc38:	802b      	strh	r3, [r5, #0]
1000cc3a:	8882      	ldrh	r2, [r0, #4]
1000cc3c:	6881      	ldr	r1, [r0, #8]
1000cc3e:	4b06      	ldr	r3, [pc, #24]	; (1000cc58 <at_ble_characteristic_value_get+0x38>)
1000cc40:	1c20      	adds	r0, r4, #0
1000cc42:	4798      	blx	r3
1000cc44:	2000      	movs	r0, #0
1000cc46:	e004      	b.n	1000cc52 <at_ble_characteristic_value_get+0x32>
1000cc48:	1c30      	adds	r0, r6, #0
1000cc4a:	1c29      	adds	r1, r5, #0
1000cc4c:	1c22      	adds	r2, r4, #0
1000cc4e:	4b03      	ldr	r3, [pc, #12]	; (1000cc5c <at_ble_characteristic_value_get+0x3c>)
1000cc50:	4798      	blx	r3
1000cc52:	bd70      	pop	{r4, r5, r6, pc}
1000cc54:	1000caf5 	.word	0x1000caf5
1000cc58:	10010517 	.word	0x10010517
1000cc5c:	1000e90d 	.word	0x1000e90d

1000cc60 <at_ble_write_authorize_reply>:
1000cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc62:	b085      	sub	sp, #20
1000cc64:	1c04      	adds	r4, r0, #0
1000cc66:	9101      	str	r1, [sp, #4]
1000cc68:	2900      	cmp	r1, #0
1000cc6a:	d128      	bne.n	1000ccbe <at_ble_write_authorize_reply+0x5e>
1000cc6c:	8843      	ldrh	r3, [r0, #2]
1000cc6e:	1c27      	adds	r7, r4, #0
1000cc70:	9300      	str	r3, [sp, #0]
1000cc72:	1c18      	adds	r0, r3, #0
1000cc74:	4b16      	ldr	r3, [pc, #88]	; (1000ccd0 <at_ble_write_authorize_reply+0x70>)
1000cc76:	4798      	blx	r3
1000cc78:	3708      	adds	r7, #8
1000cc7a:	2800      	cmp	r0, #0
1000cc7c:	d009      	beq.n	1000cc92 <at_ble_write_authorize_reply+0x32>
1000cc7e:	6880      	ldr	r0, [r0, #8]
1000cc80:	2800      	cmp	r0, #0
1000cc82:	d006      	beq.n	1000cc92 <at_ble_write_authorize_reply+0x32>
1000cc84:	88a3      	ldrh	r3, [r4, #4]
1000cc86:	88e2      	ldrh	r2, [r4, #6]
1000cc88:	18c0      	adds	r0, r0, r3
1000cc8a:	1c39      	adds	r1, r7, #0
1000cc8c:	4b11      	ldr	r3, [pc, #68]	; (1000ccd4 <at_ble_write_authorize_reply+0x74>)
1000cc8e:	4798      	blx	r3
1000cc90:	e015      	b.n	1000ccbe <at_ble_write_authorize_reply+0x5e>
1000cc92:	ab02      	add	r3, sp, #8
1000cc94:	1d9e      	adds	r6, r3, #6
1000cc96:	2300      	movs	r3, #0
1000cc98:	4d0f      	ldr	r5, [pc, #60]	; (1000ccd8 <at_ble_write_authorize_reply+0x78>)
1000cc9a:	8033      	strh	r3, [r6, #0]
1000cc9c:	6829      	ldr	r1, [r5, #0]
1000cc9e:	1c32      	adds	r2, r6, #0
1000cca0:	4b0e      	ldr	r3, [pc, #56]	; (1000ccdc <at_ble_write_authorize_reply+0x7c>)
1000cca2:	9800      	ldr	r0, [sp, #0]
1000cca4:	4798      	blx	r3
1000cca6:	682b      	ldr	r3, [r5, #0]
1000cca8:	88a0      	ldrh	r0, [r4, #4]
1000ccaa:	88e2      	ldrh	r2, [r4, #6]
1000ccac:	1818      	adds	r0, r3, r0
1000ccae:	1c39      	adds	r1, r7, #0
1000ccb0:	4b08      	ldr	r3, [pc, #32]	; (1000ccd4 <at_ble_write_authorize_reply+0x74>)
1000ccb2:	4798      	blx	r3
1000ccb4:	8860      	ldrh	r0, [r4, #2]
1000ccb6:	8832      	ldrh	r2, [r6, #0]
1000ccb8:	6829      	ldr	r1, [r5, #0]
1000ccba:	4b09      	ldr	r3, [pc, #36]	; (1000cce0 <at_ble_write_authorize_reply+0x80>)
1000ccbc:	4798      	blx	r3
1000ccbe:	8860      	ldrh	r0, [r4, #2]
1000ccc0:	8821      	ldrh	r1, [r4, #0]
1000ccc2:	9a01      	ldr	r2, [sp, #4]
1000ccc4:	4b07      	ldr	r3, [pc, #28]	; (1000cce4 <at_ble_write_authorize_reply+0x84>)
1000ccc6:	4798      	blx	r3
1000ccc8:	2000      	movs	r0, #0
1000ccca:	b005      	add	sp, #20
1000cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ccce:	46c0      	nop			; (mov r8, r8)
1000ccd0:	1000caf5 	.word	0x1000caf5
1000ccd4:	10010517 	.word	0x10010517
1000ccd8:	1001252c 	.word	0x1001252c
1000ccdc:	1000cc21 	.word	0x1000cc21
1000cce0:	1000cbe5 	.word	0x1000cbe5
1000cce4:	1000e579 	.word	0x1000e579

1000cce8 <gatts_handle_read_req>:
1000cce8:	b538      	push	{r3, r4, r5, lr}
1000ccea:	1c0c      	adds	r4, r1, #0
1000ccec:	4b07      	ldr	r3, [pc, #28]	; (1000cd0c <gatts_handle_read_req+0x24>)
1000ccee:	4798      	blx	r3
1000ccf0:	8865      	ldrh	r5, [r4, #2]
1000ccf2:	4b07      	ldr	r3, [pc, #28]	; (1000cd10 <gatts_handle_read_req+0x28>)
1000ccf4:	1c28      	adds	r0, r5, #0
1000ccf6:	4798      	blx	r3
1000ccf8:	7883      	ldrb	r3, [r0, #2]
1000ccfa:	2026      	movs	r0, #38	; 0x26
1000ccfc:	07db      	lsls	r3, r3, #31
1000ccfe:	d404      	bmi.n	1000cd0a <gatts_handle_read_req+0x22>
1000cd00:	8820      	ldrh	r0, [r4, #0]
1000cd02:	1c29      	adds	r1, r5, #0
1000cd04:	4b03      	ldr	r3, [pc, #12]	; (1000cd14 <gatts_handle_read_req+0x2c>)
1000cd06:	4798      	blx	r3
1000cd08:	203b      	movs	r0, #59	; 0x3b
1000cd0a:	bd38      	pop	{r3, r4, r5, pc}
1000cd0c:	1000e4bd 	.word	0x1000e4bd
1000cd10:	1000caf5 	.word	0x1000caf5
1000cd14:	1000cb35 	.word	0x1000cb35

1000cd18 <gatts_handle_att_info_req>:
1000cd18:	b538      	push	{r3, r4, r5, lr}
1000cd1a:	1c0d      	adds	r5, r1, #0
1000cd1c:	4b0a      	ldr	r3, [pc, #40]	; (1000cd48 <gatts_handle_att_info_req+0x30>)
1000cd1e:	1c14      	adds	r4, r2, #0
1000cd20:	4798      	blx	r3
1000cd22:	882d      	ldrh	r5, [r5, #0]
1000cd24:	4b09      	ldr	r3, [pc, #36]	; (1000cd4c <gatts_handle_att_info_req+0x34>)
1000cd26:	1c28      	adds	r0, r5, #0
1000cd28:	4798      	blx	r3
1000cd2a:	0a22      	lsrs	r2, r4, #8
1000cd2c:	1c03      	adds	r3, r0, #0
1000cd2e:	4c08      	ldr	r4, [pc, #32]	; (1000cd50 <gatts_handle_att_info_req+0x38>)
1000cd30:	b291      	uxth	r1, r2
1000cd32:	2800      	cmp	r0, #0
1000cd34:	d003      	beq.n	1000cd3e <gatts_handle_att_info_req+0x26>
1000cd36:	8882      	ldrh	r2, [r0, #4]
1000cd38:	2300      	movs	r3, #0
1000cd3a:	1c28      	adds	r0, r5, #0
1000cd3c:	e001      	b.n	1000cd42 <gatts_handle_att_info_req+0x2a>
1000cd3e:	1c28      	adds	r0, r5, #0
1000cd40:	2201      	movs	r2, #1
1000cd42:	47a0      	blx	r4
1000cd44:	203b      	movs	r0, #59	; 0x3b
1000cd46:	bd38      	pop	{r3, r4, r5, pc}
1000cd48:	1000e501 	.word	0x1000e501
1000cd4c:	1000caf5 	.word	0x1000caf5
1000cd50:	1000e5bd 	.word	0x1000e5bd

1000cd54 <gatts_handle_write_req>:
1000cd54:	b510      	push	{r4, lr}
1000cd56:	1c14      	adds	r4, r2, #0
1000cd58:	4b07      	ldr	r3, [pc, #28]	; (1000cd78 <gatts_handle_write_req+0x24>)
1000cd5a:	4798      	blx	r3
1000cd5c:	4b07      	ldr	r3, [pc, #28]	; (1000cd7c <gatts_handle_write_req+0x28>)
1000cd5e:	8860      	ldrh	r0, [r4, #2]
1000cd60:	4798      	blx	r3
1000cd62:	2302      	movs	r3, #2
1000cd64:	7881      	ldrb	r1, [r0, #2]
1000cd66:	2022      	movs	r0, #34	; 0x22
1000cd68:	4019      	ands	r1, r3
1000cd6a:	d103      	bne.n	1000cd74 <gatts_handle_write_req+0x20>
1000cd6c:	1c20      	adds	r0, r4, #0
1000cd6e:	4b04      	ldr	r3, [pc, #16]	; (1000cd80 <gatts_handle_write_req+0x2c>)
1000cd70:	4798      	blx	r3
1000cd72:	201f      	movs	r0, #31
1000cd74:	bd10      	pop	{r4, pc}
1000cd76:	46c0      	nop			; (mov r8, r8)
1000cd78:	1000e4c9 	.word	0x1000e4c9
1000cd7c:	1000caf5 	.word	0x1000caf5
1000cd80:	1000cc61 	.word	0x1000cc61

1000cd84 <init_l2cc_task_module>:
1000cd84:	220a      	movs	r2, #10
1000cd86:	4b01      	ldr	r3, [pc, #4]	; (1000cd8c <init_l2cc_task_module+0x8>)
1000cd88:	701a      	strb	r2, [r3, #0]
1000cd8a:	4770      	bx	lr
1000cd8c:	10012528 	.word	0x10012528

1000cd90 <l2cc_data_send_rsp_handler>:
1000cd90:	b510      	push	{r4, lr}
1000cd92:	7802      	ldrb	r2, [r0, #0]
1000cd94:	700a      	strb	r2, [r1, #0]
1000cd96:	7883      	ldrb	r3, [r0, #2]
1000cd98:	7844      	ldrb	r4, [r0, #1]
1000cd9a:	021b      	lsls	r3, r3, #8
1000cd9c:	4323      	orrs	r3, r4
1000cd9e:	804b      	strh	r3, [r1, #2]
1000cda0:	7903      	ldrb	r3, [r0, #4]
1000cda2:	78c0      	ldrb	r0, [r0, #3]
1000cda4:	021b      	lsls	r3, r3, #8
1000cda6:	4303      	orrs	r3, r0
1000cda8:	808b      	strh	r3, [r1, #4]
1000cdaa:	2a00      	cmp	r2, #0
1000cdac:	d103      	bne.n	1000cdb6 <l2cc_data_send_rsp_handler+0x26>
1000cdae:	4a02      	ldr	r2, [pc, #8]	; (1000cdb8 <l2cc_data_send_rsp_handler+0x28>)
1000cdb0:	7813      	ldrb	r3, [r2, #0]
1000cdb2:	3301      	adds	r3, #1
1000cdb4:	7013      	strb	r3, [r2, #0]
1000cdb6:	bd10      	pop	{r4, pc}
1000cdb8:	10012528 	.word	0x10012528

1000cdbc <l2cc_data_received_handler>:
1000cdbc:	b508      	push	{r3, lr}
1000cdbe:	1c03      	adds	r3, r0, #0
1000cdc0:	7842      	ldrb	r2, [r0, #1]
1000cdc2:	7800      	ldrb	r0, [r0, #0]
1000cdc4:	0212      	lsls	r2, r2, #8
1000cdc6:	4302      	orrs	r2, r0
1000cdc8:	800a      	strh	r2, [r1, #0]
1000cdca:	78da      	ldrb	r2, [r3, #3]
1000cdcc:	7898      	ldrb	r0, [r3, #2]
1000cdce:	0212      	lsls	r2, r2, #8
1000cdd0:	4302      	orrs	r2, r0
1000cdd2:	804a      	strh	r2, [r1, #2]
1000cdd4:	795a      	ldrb	r2, [r3, #5]
1000cdd6:	7918      	ldrb	r0, [r3, #4]
1000cdd8:	0212      	lsls	r2, r2, #8
1000cdda:	4302      	orrs	r2, r0
1000cddc:	808a      	strh	r2, [r1, #4]
1000cdde:	1d88      	adds	r0, r1, #6
1000cde0:	1d99      	adds	r1, r3, #6
1000cde2:	4b01      	ldr	r3, [pc, #4]	; (1000cde8 <l2cc_data_received_handler+0x2c>)
1000cde4:	4798      	blx	r3
1000cde6:	bd08      	pop	{r3, pc}
1000cde8:	10010517 	.word	0x10010517

1000cdec <at_ble_authenticate>:
1000cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdee:	1c0c      	adds	r4, r1, #0
1000cdf0:	211f      	movs	r1, #31
1000cdf2:	b08b      	sub	sp, #44	; 0x2c
1000cdf4:	9307      	str	r3, [sp, #28]
1000cdf6:	ab02      	add	r3, sp, #8
1000cdf8:	18c9      	adds	r1, r1, r3
1000cdfa:	230f      	movs	r3, #15
1000cdfc:	700b      	strb	r3, [r1, #0]
1000cdfe:	4b40      	ldr	r3, [pc, #256]	; (1000cf00 <at_ble_authenticate+0x114>)
1000ce00:	1c05      	adds	r5, r0, #0
1000ce02:	1c16      	adds	r6, r2, #0
1000ce04:	4798      	blx	r3
1000ce06:	1c07      	adds	r7, r0, #0
1000ce08:	2001      	movs	r0, #1
1000ce0a:	2f07      	cmp	r7, #7
1000ce0c:	d875      	bhi.n	1000cefa <at_ble_authenticate+0x10e>
1000ce0e:	2c00      	cmp	r4, #0
1000ce10:	d113      	bne.n	1000ce3a <at_ble_authenticate+0x4e>
1000ce12:	2312      	movs	r3, #18
1000ce14:	435f      	muls	r7, r3
1000ce16:	4b3b      	ldr	r3, [pc, #236]	; (1000cf04 <at_ble_authenticate+0x118>)
1000ce18:	5cfb      	ldrb	r3, [r7, r3]
1000ce1a:	4283      	cmp	r3, r0
1000ce1c:	d001      	beq.n	1000ce22 <at_ble_authenticate+0x36>
1000ce1e:	20cf      	movs	r0, #207	; 0xcf
1000ce20:	e06b      	b.n	1000cefa <at_ble_authenticate+0x10e>
1000ce22:	9504      	str	r5, [sp, #16]
1000ce24:	9400      	str	r4, [sp, #0]
1000ce26:	9401      	str	r4, [sp, #4]
1000ce28:	9402      	str	r4, [sp, #8]
1000ce2a:	9403      	str	r4, [sp, #12]
1000ce2c:	1c20      	adds	r0, r4, #0
1000ce2e:	1c21      	adds	r1, r4, #0
1000ce30:	1c22      	adds	r2, r4, #0
1000ce32:	1c23      	adds	r3, r4, #0
1000ce34:	4d34      	ldr	r5, [pc, #208]	; (1000cf08 <at_ble_authenticate+0x11c>)
1000ce36:	47a8      	blx	r5
1000ce38:	e05e      	b.n	1000cef8 <at_ble_authenticate+0x10c>
1000ce3a:	7922      	ldrb	r2, [r4, #4]
1000ce3c:	2a06      	cmp	r2, #6
1000ce3e:	d9ee      	bls.n	1000ce1e <at_ble_authenticate+0x32>
1000ce40:	7963      	ldrb	r3, [r4, #5]
1000ce42:	2b10      	cmp	r3, #16
1000ce44:	d8eb      	bhi.n	1000ce1e <at_ble_authenticate+0x32>
1000ce46:	429a      	cmp	r2, r3
1000ce48:	d8e9      	bhi.n	1000ce1e <at_ble_authenticate+0x32>
1000ce4a:	7a23      	ldrb	r3, [r4, #8]
1000ce4c:	2b04      	cmp	r3, #4
1000ce4e:	d8e6      	bhi.n	1000ce1e <at_ble_authenticate+0x32>
1000ce50:	79a3      	ldrb	r3, [r4, #6]
1000ce52:	2b07      	cmp	r3, #7
1000ce54:	d8e3      	bhi.n	1000ce1e <at_ble_authenticate+0x32>
1000ce56:	79e3      	ldrb	r3, [r4, #7]
1000ce58:	2b07      	cmp	r3, #7
1000ce5a:	d8e0      	bhi.n	1000ce1e <at_ble_authenticate+0x32>
1000ce5c:	78a3      	ldrb	r3, [r4, #2]
1000ce5e:	2b00      	cmp	r3, #0
1000ce60:	d006      	beq.n	1000ce70 <at_ble_authenticate+0x84>
1000ce62:	2e00      	cmp	r6, #0
1000ce64:	d0db      	beq.n	1000ce1e <at_ble_authenticate+0x32>
1000ce66:	4829      	ldr	r0, [pc, #164]	; (1000cf0c <at_ble_authenticate+0x120>)
1000ce68:	1c31      	adds	r1, r6, #0
1000ce6a:	221c      	movs	r2, #28
1000ce6c:	4b28      	ldr	r3, [pc, #160]	; (1000cf10 <at_ble_authenticate+0x124>)
1000ce6e:	4798      	blx	r3
1000ce70:	9b07      	ldr	r3, [sp, #28]
1000ce72:	2b00      	cmp	r3, #0
1000ce74:	d005      	beq.n	1000ce82 <at_ble_authenticate+0x96>
1000ce76:	4827      	ldr	r0, [pc, #156]	; (1000cf14 <at_ble_authenticate+0x128>)
1000ce78:	1c19      	adds	r1, r3, #0
1000ce7a:	309a      	adds	r0, #154	; 0x9a
1000ce7c:	2210      	movs	r2, #16
1000ce7e:	4b24      	ldr	r3, [pc, #144]	; (1000cf10 <at_ble_authenticate+0x124>)
1000ce80:	4798      	blx	r3
1000ce82:	7863      	ldrb	r3, [r4, #1]
1000ce84:	78a2      	ldrb	r2, [r4, #2]
1000ce86:	009b      	lsls	r3, r3, #2
1000ce88:	4313      	orrs	r3, r2
1000ce8a:	2212      	movs	r2, #18
1000ce8c:	4357      	muls	r7, r2
1000ce8e:	4a1d      	ldr	r2, [pc, #116]	; (1000cf04 <at_ble_authenticate+0x118>)
1000ce90:	b2db      	uxtb	r3, r3
1000ce92:	5cba      	ldrb	r2, [r7, r2]
1000ce94:	2a00      	cmp	r2, #0
1000ce96:	d116      	bne.n	1000cec6 <at_ble_authenticate+0xda>
1000ce98:	79a0      	ldrb	r0, [r4, #6]
1000ce9a:	0742      	lsls	r2, r0, #29
1000ce9c:	d502      	bpl.n	1000cea4 <at_ble_authenticate+0xb8>
1000ce9e:	9a07      	ldr	r2, [sp, #28]
1000cea0:	2a00      	cmp	r2, #0
1000cea2:	d0bc      	beq.n	1000ce1e <at_ble_authenticate+0x32>
1000cea4:	07c2      	lsls	r2, r0, #31
1000cea6:	d501      	bpl.n	1000ceac <at_ble_authenticate+0xc0>
1000cea8:	2e00      	cmp	r6, #0
1000ceaa:	d0b8      	beq.n	1000ce1e <at_ble_authenticate+0x32>
1000ceac:	7966      	ldrb	r6, [r4, #5]
1000ceae:	7821      	ldrb	r1, [r4, #0]
1000ceb0:	78e2      	ldrb	r2, [r4, #3]
1000ceb2:	9600      	str	r6, [sp, #0]
1000ceb4:	9001      	str	r0, [sp, #4]
1000ceb6:	79e0      	ldrb	r0, [r4, #7]
1000ceb8:	9002      	str	r0, [sp, #8]
1000ceba:	7a20      	ldrb	r0, [r4, #8]
1000cebc:	4c16      	ldr	r4, [pc, #88]	; (1000cf18 <at_ble_authenticate+0x12c>)
1000cebe:	9003      	str	r0, [sp, #12]
1000cec0:	1c28      	adds	r0, r5, #0
1000cec2:	47a0      	blx	r4
1000cec4:	e018      	b.n	1000cef8 <at_ble_authenticate+0x10c>
1000cec6:	2a01      	cmp	r2, #1
1000cec8:	d1a9      	bne.n	1000ce1e <at_ble_authenticate+0x32>
1000ceca:	79e0      	ldrb	r0, [r4, #7]
1000cecc:	0742      	lsls	r2, r0, #29
1000cece:	d502      	bpl.n	1000ced6 <at_ble_authenticate+0xea>
1000ced0:	9a07      	ldr	r2, [sp, #28]
1000ced2:	2a00      	cmp	r2, #0
1000ced4:	d0a3      	beq.n	1000ce1e <at_ble_authenticate+0x32>
1000ced6:	07c2      	lsls	r2, r0, #31
1000ced8:	d501      	bpl.n	1000cede <at_ble_authenticate+0xf2>
1000ceda:	2e00      	cmp	r6, #0
1000cedc:	d09f      	beq.n	1000ce1e <at_ble_authenticate+0x32>
1000cede:	7966      	ldrb	r6, [r4, #5]
1000cee0:	7821      	ldrb	r1, [r4, #0]
1000cee2:	78e2      	ldrb	r2, [r4, #3]
1000cee4:	9600      	str	r6, [sp, #0]
1000cee6:	79a6      	ldrb	r6, [r4, #6]
1000cee8:	9002      	str	r0, [sp, #8]
1000ceea:	9601      	str	r6, [sp, #4]
1000ceec:	7a20      	ldrb	r0, [r4, #8]
1000ceee:	9504      	str	r5, [sp, #16]
1000cef0:	9003      	str	r0, [sp, #12]
1000cef2:	4c05      	ldr	r4, [pc, #20]	; (1000cf08 <at_ble_authenticate+0x11c>)
1000cef4:	2001      	movs	r0, #1
1000cef6:	47a0      	blx	r4
1000cef8:	2000      	movs	r0, #0
1000cefa:	b00b      	add	sp, #44	; 0x2c
1000cefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cefe:	46c0      	nop			; (mov r8, r8)
1000cf00:	1000d335 	.word	0x1000d335
1000cf04:	10014cee 	.word	0x10014cee
1000cf08:	1000d8a5 	.word	0x1000d8a5
1000cf0c:	10014dfc 	.word	0x10014dfc
1000cf10:	10010517 	.word	0x10010517
1000cf14:	10014d7e 	.word	0x10014d7e
1000cf18:	1000d685 	.word	0x1000d685

1000cf1c <at_ble_pair_key_reply>:
1000cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf1e:	b085      	sub	sp, #20
1000cf20:	1c05      	adds	r5, r0, #0
1000cf22:	1c0c      	adds	r4, r1, #0
1000cf24:	1c16      	adds	r6, r2, #0
1000cf26:	2100      	movs	r1, #0
1000cf28:	4668      	mov	r0, sp
1000cf2a:	2210      	movs	r2, #16
1000cf2c:	4b18      	ldr	r3, [pc, #96]	; (1000cf90 <at_ble_pair_key_reply+0x74>)
1000cf2e:	4798      	blx	r3
1000cf30:	2101      	movs	r1, #1
1000cf32:	2e00      	cmp	r6, #0
1000cf34:	d101      	bne.n	1000cf3a <at_ble_pair_key_reply+0x1e>
1000cf36:	1c31      	adds	r1, r6, #0
1000cf38:	466e      	mov	r6, sp
1000cf3a:	2c00      	cmp	r4, #0
1000cf3c:	d116      	bne.n	1000cf6c <at_ble_pair_key_reply+0x50>
1000cf3e:	2701      	movs	r7, #1
1000cf40:	1c23      	adds	r3, r4, #0
1000cf42:	1d70      	adds	r0, r6, #5
1000cf44:	3e01      	subs	r6, #1
1000cf46:	7802      	ldrb	r2, [r0, #0]
1000cf48:	3801      	subs	r0, #1
1000cf4a:	3a30      	subs	r2, #48	; 0x30
1000cf4c:	437a      	muls	r2, r7
1000cf4e:	189b      	adds	r3, r3, r2
1000cf50:	220a      	movs	r2, #10
1000cf52:	4357      	muls	r7, r2
1000cf54:	42b0      	cmp	r0, r6
1000cf56:	d1f6      	bne.n	1000cf46 <at_ble_pair_key_reply+0x2a>
1000cf58:	466a      	mov	r2, sp
1000cf5a:	4668      	mov	r0, sp
1000cf5c:	7013      	strb	r3, [r2, #0]
1000cf5e:	0a1a      	lsrs	r2, r3, #8
1000cf60:	7042      	strb	r2, [r0, #1]
1000cf62:	0c1a      	lsrs	r2, r3, #16
1000cf64:	0e1b      	lsrs	r3, r3, #24
1000cf66:	7082      	strb	r2, [r0, #2]
1000cf68:	70c3      	strb	r3, [r0, #3]
1000cf6a:	e009      	b.n	1000cf80 <at_ble_pair_key_reply+0x64>
1000cf6c:	20cf      	movs	r0, #207	; 0xcf
1000cf6e:	2c01      	cmp	r4, #1
1000cf70:	d10c      	bne.n	1000cf8c <at_ble_pair_key_reply+0x70>
1000cf72:	2300      	movs	r3, #0
1000cf74:	4668      	mov	r0, sp
1000cf76:	5cf2      	ldrb	r2, [r6, r3]
1000cf78:	54c2      	strb	r2, [r0, r3]
1000cf7a:	3301      	adds	r3, #1
1000cf7c:	2b10      	cmp	r3, #16
1000cf7e:	d1f9      	bne.n	1000cf74 <at_ble_pair_key_reply+0x58>
1000cf80:	2004      	movs	r0, #4
1000cf82:	466a      	mov	r2, sp
1000cf84:	1c2b      	adds	r3, r5, #0
1000cf86:	4c03      	ldr	r4, [pc, #12]	; (1000cf94 <at_ble_pair_key_reply+0x78>)
1000cf88:	47a0      	blx	r4
1000cf8a:	2000      	movs	r0, #0
1000cf8c:	b005      	add	sp, #20
1000cf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf90:	10010529 	.word	0x10010529
1000cf94:	1000d921 	.word	0x1000d921

1000cf98 <at_ble_send_slave_sec_request>:
1000cf98:	b570      	push	{r4, r5, r6, lr}
1000cf9a:	4b0c      	ldr	r3, [pc, #48]	; (1000cfcc <at_ble_send_slave_sec_request+0x34>)
1000cf9c:	1c0e      	adds	r6, r1, #0
1000cf9e:	2100      	movs	r1, #0
1000cfa0:	1c05      	adds	r5, r0, #0
1000cfa2:	1c14      	adds	r4, r2, #0
1000cfa4:	4798      	blx	r3
1000cfa6:	2301      	movs	r3, #1
1000cfa8:	2807      	cmp	r0, #7
1000cfaa:	d80d      	bhi.n	1000cfc8 <at_ble_send_slave_sec_request+0x30>
1000cfac:	3311      	adds	r3, #17
1000cfae:	4358      	muls	r0, r3
1000cfb0:	4b07      	ldr	r3, [pc, #28]	; (1000cfd0 <at_ble_send_slave_sec_request+0x38>)
1000cfb2:	5cc2      	ldrb	r2, [r0, r3]
1000cfb4:	23e0      	movs	r3, #224	; 0xe0
1000cfb6:	2a01      	cmp	r2, #1
1000cfb8:	d106      	bne.n	1000cfc8 <at_ble_send_slave_sec_request+0x30>
1000cfba:	00b1      	lsls	r1, r6, #2
1000cfbc:	430c      	orrs	r4, r1
1000cfbe:	4b05      	ldr	r3, [pc, #20]	; (1000cfd4 <at_ble_send_slave_sec_request+0x3c>)
1000cfc0:	b2e1      	uxtb	r1, r4
1000cfc2:	1c28      	adds	r0, r5, #0
1000cfc4:	4798      	blx	r3
1000cfc6:	2300      	movs	r3, #0
1000cfc8:	1c18      	adds	r0, r3, #0
1000cfca:	bd70      	pop	{r4, r5, r6, pc}
1000cfcc:	1000d335 	.word	0x1000d335
1000cfd0:	10014cee 	.word	0x10014cee
1000cfd4:	1000d971 	.word	0x1000d971

1000cfd8 <at_ble_encryption_start>:
1000cfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cfda:	23cf      	movs	r3, #207	; 0xcf
1000cfdc:	2900      	cmp	r1, #0
1000cfde:	d02b      	beq.n	1000d038 <at_ble_encryption_start+0x60>
1000cfe0:	2a05      	cmp	r2, #5
1000cfe2:	d829      	bhi.n	1000d038 <at_ble_encryption_start+0x60>
1000cfe4:	2701      	movs	r7, #1
1000cfe6:	1c3d      	adds	r5, r7, #0
1000cfe8:	2433      	movs	r4, #51	; 0x33
1000cfea:	4095      	lsls	r5, r2
1000cfec:	4225      	tst	r5, r4
1000cfee:	d023      	beq.n	1000d038 <at_ble_encryption_start+0x60>
1000cff0:	7e8c      	ldrb	r4, [r1, #26]
1000cff2:	3c07      	subs	r4, #7
1000cff4:	2c09      	cmp	r4, #9
1000cff6:	d81f      	bhi.n	1000d038 <at_ble_encryption_start+0x60>
1000cff8:	4b10      	ldr	r3, [pc, #64]	; (1000d03c <at_ble_encryption_start+0x64>)
1000cffa:	1c0c      	adds	r4, r1, #0
1000cffc:	2100      	movs	r1, #0
1000cffe:	1c15      	adds	r5, r2, #0
1000d000:	1c06      	adds	r6, r0, #0
1000d002:	4798      	blx	r3
1000d004:	1c3b      	adds	r3, r7, #0
1000d006:	2807      	cmp	r0, #7
1000d008:	d816      	bhi.n	1000d038 <at_ble_encryption_start+0x60>
1000d00a:	2312      	movs	r3, #18
1000d00c:	4358      	muls	r0, r3
1000d00e:	4b0c      	ldr	r3, [pc, #48]	; (1000d040 <at_ble_encryption_start+0x68>)
1000d010:	5cc7      	ldrb	r7, [r0, r3]
1000d012:	23e0      	movs	r3, #224	; 0xe0
1000d014:	2f00      	cmp	r7, #0
1000d016:	d10f      	bne.n	1000d038 <at_ble_encryption_start+0x60>
1000d018:	1c21      	adds	r1, r4, #0
1000d01a:	221c      	movs	r2, #28
1000d01c:	4b09      	ldr	r3, [pc, #36]	; (1000d044 <at_ble_encryption_start+0x6c>)
1000d01e:	480a      	ldr	r0, [pc, #40]	; (1000d048 <at_ble_encryption_start+0x70>)
1000d020:	4798      	blx	r3
1000d022:	1c23      	adds	r3, r4, #0
1000d024:	7ea1      	ldrb	r1, [r4, #26]
1000d026:	8a22      	ldrh	r2, [r4, #16]
1000d028:	3312      	adds	r3, #18
1000d02a:	9100      	str	r1, [sp, #0]
1000d02c:	9501      	str	r5, [sp, #4]
1000d02e:	1c21      	adds	r1, r4, #0
1000d030:	1c30      	adds	r0, r6, #0
1000d032:	4c06      	ldr	r4, [pc, #24]	; (1000d04c <at_ble_encryption_start+0x74>)
1000d034:	47a0      	blx	r4
1000d036:	1c3b      	adds	r3, r7, #0
1000d038:	1c18      	adds	r0, r3, #0
1000d03a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d03c:	1000d335 	.word	0x1000d335
1000d040:	10014cee 	.word	0x10014cee
1000d044:	10010517 	.word	0x10010517
1000d048:	10014dfc 	.word	0x10014dfc
1000d04c:	1000d9b1 	.word	0x1000d9b1

1000d050 <at_ble_encryption_request_reply>:
1000d050:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d052:	24cf      	movs	r4, #207	; 0xcf
1000d054:	2b00      	cmp	r3, #0
1000d056:	d011      	beq.n	1000d07c <at_ble_encryption_request_reply+0x2c>
1000d058:	2a00      	cmp	r2, #0
1000d05a:	d00a      	beq.n	1000d072 <at_ble_encryption_request_reply+0x22>
1000d05c:	2905      	cmp	r1, #5
1000d05e:	d80d      	bhi.n	1000d07c <at_ble_encryption_request_reply+0x2c>
1000d060:	2501      	movs	r5, #1
1000d062:	2633      	movs	r6, #51	; 0x33
1000d064:	408d      	lsls	r5, r1
1000d066:	4235      	tst	r5, r6
1000d068:	d008      	beq.n	1000d07c <at_ble_encryption_request_reply+0x2c>
1000d06a:	7e9d      	ldrb	r5, [r3, #26]
1000d06c:	3d07      	subs	r5, #7
1000d06e:	2d09      	cmp	r5, #9
1000d070:	d804      	bhi.n	1000d07c <at_ble_encryption_request_reply+0x2c>
1000d072:	7e9c      	ldrb	r4, [r3, #26]
1000d074:	9400      	str	r4, [sp, #0]
1000d076:	4c02      	ldr	r4, [pc, #8]	; (1000d080 <at_ble_encryption_request_reply+0x30>)
1000d078:	47a0      	blx	r4
1000d07a:	2400      	movs	r4, #0
1000d07c:	1c20      	adds	r0, r4, #0
1000d07e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d080:	1000da6d 	.word	0x1000da6d

1000d084 <at_ble_htpt_create_db>:
1000d084:	b530      	push	{r4, r5, lr}
1000d086:	b085      	sub	sp, #20
1000d088:	ac08      	add	r4, sp, #32
1000d08a:	8825      	ldrh	r5, [r4, #0]
1000d08c:	ac09      	add	r4, sp, #36	; 0x24
1000d08e:	7824      	ldrb	r4, [r4, #0]
1000d090:	9500      	str	r5, [sp, #0]
1000d092:	9401      	str	r4, [sp, #4]
1000d094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000d096:	9402      	str	r4, [sp, #8]
1000d098:	4c01      	ldr	r4, [pc, #4]	; (1000d0a0 <at_ble_htpt_create_db+0x1c>)
1000d09a:	47a0      	blx	r4
1000d09c:	b005      	add	sp, #20
1000d09e:	bd30      	pop	{r4, r5, pc}
1000d0a0:	1000e9a9 	.word	0x1000e9a9

1000d0a4 <at_ble_htpt_enable>:
1000d0a4:	b508      	push	{r3, lr}
1000d0a6:	4b01      	ldr	r3, [pc, #4]	; (1000d0ac <at_ble_htpt_enable+0x8>)
1000d0a8:	4798      	blx	r3
1000d0aa:	bd08      	pop	{r3, pc}
1000d0ac:	1000e9e9 	.word	0x1000e9e9

1000d0b0 <at_ble_htpt_temp_send>:
1000d0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d0b2:	1c04      	adds	r4, r0, #0
1000d0b4:	a806      	add	r0, sp, #24
1000d0b6:	7805      	ldrb	r5, [r0, #0]
1000d0b8:	20cf      	movs	r0, #207	; 0xcf
1000d0ba:	2900      	cmp	r1, #0
1000d0bc:	d003      	beq.n	1000d0c6 <at_ble_htpt_temp_send+0x16>
1000d0be:	1c20      	adds	r0, r4, #0
1000d0c0:	9500      	str	r5, [sp, #0]
1000d0c2:	4c01      	ldr	r4, [pc, #4]	; (1000d0c8 <at_ble_htpt_temp_send+0x18>)
1000d0c4:	47a0      	blx	r4
1000d0c6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d0c8:	1000ea29 	.word	0x1000ea29

1000d0cc <rx_callback>:
1000d0cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d0ce:	8883      	ldrh	r3, [r0, #4]
1000d0d0:	1c01      	adds	r1, r0, #0
1000d0d2:	9301      	str	r3, [sp, #4]
1000d0d4:	88c5      	ldrh	r5, [r0, #6]
1000d0d6:	8806      	ldrh	r6, [r0, #0]
1000d0d8:	2d00      	cmp	r5, #0
1000d0da:	d10f      	bne.n	1000d0fc <rx_callback+0x30>
1000d0dc:	1c19      	adds	r1, r3, #0
1000d0de:	1c30      	adds	r0, r6, #0
1000d0e0:	4b19      	ldr	r3, [pc, #100]	; (1000d148 <rx_callback+0x7c>)
1000d0e2:	1c2a      	adds	r2, r5, #0
1000d0e4:	4798      	blx	r3
1000d0e6:	1e03      	subs	r3, r0, #0
1000d0e8:	d105      	bne.n	1000d0f6 <rx_callback+0x2a>
1000d0ea:	1c30      	adds	r0, r6, #0
1000d0ec:	9901      	ldr	r1, [sp, #4]
1000d0ee:	1c1a      	adds	r2, r3, #0
1000d0f0:	4c16      	ldr	r4, [pc, #88]	; (1000d14c <rx_callback+0x80>)
1000d0f2:	47a0      	blx	r4
1000d0f4:	e027      	b.n	1000d146 <rx_callback+0x7a>
1000d0f6:	4b16      	ldr	r3, [pc, #88]	; (1000d150 <rx_callback+0x84>)
1000d0f8:	4798      	blx	r3
1000d0fa:	e024      	b.n	1000d146 <rx_callback+0x7a>
1000d0fc:	4c15      	ldr	r4, [pc, #84]	; (1000d154 <rx_callback+0x88>)
1000d0fe:	4a16      	ldr	r2, [pc, #88]	; (1000d158 <rx_callback+0x8c>)
1000d100:	6823      	ldr	r3, [r4, #0]
1000d102:	6812      	ldr	r2, [r2, #0]
1000d104:	18eb      	adds	r3, r5, r3
1000d106:	4293      	cmp	r3, r2
1000d108:	d901      	bls.n	1000d10e <rx_callback+0x42>
1000d10a:	2300      	movs	r3, #0
1000d10c:	6023      	str	r3, [r4, #0]
1000d10e:	4f13      	ldr	r7, [pc, #76]	; (1000d15c <rx_callback+0x90>)
1000d110:	6822      	ldr	r2, [r4, #0]
1000d112:	683b      	ldr	r3, [r7, #0]
1000d114:	3108      	adds	r1, #8
1000d116:	1898      	adds	r0, r3, r2
1000d118:	1c2a      	adds	r2, r5, #0
1000d11a:	4b11      	ldr	r3, [pc, #68]	; (1000d160 <rx_callback+0x94>)
1000d11c:	4798      	blx	r3
1000d11e:	683b      	ldr	r3, [r7, #0]
1000d120:	6822      	ldr	r2, [r4, #0]
1000d122:	1c30      	adds	r0, r6, #0
1000d124:	189a      	adds	r2, r3, r2
1000d126:	9901      	ldr	r1, [sp, #4]
1000d128:	4b07      	ldr	r3, [pc, #28]	; (1000d148 <rx_callback+0x7c>)
1000d12a:	4798      	blx	r3
1000d12c:	2800      	cmp	r0, #0
1000d12e:	d1e2      	bne.n	1000d0f6 <rx_callback+0x2a>
1000d130:	6823      	ldr	r3, [r4, #0]
1000d132:	683a      	ldr	r2, [r7, #0]
1000d134:	1c30      	adds	r0, r6, #0
1000d136:	18d2      	adds	r2, r2, r3
1000d138:	9901      	ldr	r1, [sp, #4]
1000d13a:	1c2b      	adds	r3, r5, #0
1000d13c:	4e03      	ldr	r6, [pc, #12]	; (1000d14c <rx_callback+0x80>)
1000d13e:	47b0      	blx	r6
1000d140:	6823      	ldr	r3, [r4, #0]
1000d142:	18ed      	adds	r5, r5, r3
1000d144:	6025      	str	r5, [r4, #0]
1000d146:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d148:	1000bdb1 	.word	0x1000bdb1
1000d14c:	1000bd29 	.word	0x1000bd29
1000d150:	1000b705 	.word	0x1000b705
1000d154:	10014e58 	.word	0x10014e58
1000d158:	10013fe4 	.word	0x10013fe4
1000d15c:	10013fe0 	.word	0x10013fe0
1000d160:	10010517 	.word	0x10010517

1000d164 <interface_send>:
1000d164:	b508      	push	{r3, lr}
1000d166:	4b02      	ldr	r3, [pc, #8]	; (1000d170 <interface_send+0xc>)
1000d168:	4798      	blx	r3
1000d16a:	2000      	movs	r0, #0
1000d16c:	bd08      	pop	{r3, pc}
1000d16e:	46c0      	nop			; (mov r8, r8)
1000d170:	1000b43d 	.word	0x1000b43d

1000d174 <interface_init>:
1000d174:	2280      	movs	r2, #128	; 0x80
1000d176:	b510      	push	{r4, lr}
1000d178:	2100      	movs	r1, #0
1000d17a:	1c04      	adds	r4, r0, #0
1000d17c:	0092      	lsls	r2, r2, #2
1000d17e:	4b08      	ldr	r3, [pc, #32]	; (1000d1a0 <interface_init+0x2c>)
1000d180:	4808      	ldr	r0, [pc, #32]	; (1000d1a4 <interface_init+0x30>)
1000d182:	4798      	blx	r3
1000d184:	2200      	movs	r2, #0
1000d186:	4b08      	ldr	r3, [pc, #32]	; (1000d1a8 <interface_init+0x34>)
1000d188:	601a      	str	r2, [r3, #0]
1000d18a:	4a08      	ldr	r2, [pc, #32]	; (1000d1ac <interface_init+0x38>)
1000d18c:	4b08      	ldr	r3, [pc, #32]	; (1000d1b0 <interface_init+0x3c>)
1000d18e:	601a      	str	r2, [r3, #0]
1000d190:	4b08      	ldr	r3, [pc, #32]	; (1000d1b4 <interface_init+0x40>)
1000d192:	6922      	ldr	r2, [r4, #16]
1000d194:	601a      	str	r2, [r3, #0]
1000d196:	6962      	ldr	r2, [r4, #20]
1000d198:	4b07      	ldr	r3, [pc, #28]	; (1000d1b8 <interface_init+0x44>)
1000d19a:	601a      	str	r2, [r3, #0]
1000d19c:	bd10      	pop	{r4, pc}
1000d19e:	46c0      	nop			; (mov r8, r8)
1000d1a0:	10010529 	.word	0x10010529
1000d1a4:	1001505c 	.word	0x1001505c
1000d1a8:	10014e58 	.word	0x10014e58
1000d1ac:	10014e5c 	.word	0x10014e5c
1000d1b0:	1001252c 	.word	0x1001252c
1000d1b4:	10013fe0 	.word	0x10013fe0
1000d1b8:	10013fe4 	.word	0x10013fe4

1000d1bc <platform_cmd_cmpl_signal>:
1000d1bc:	2201      	movs	r2, #1
1000d1be:	4b01      	ldr	r3, [pc, #4]	; (1000d1c4 <platform_cmd_cmpl_signal+0x8>)
1000d1c0:	601a      	str	r2, [r3, #0]
1000d1c2:	4770      	bx	lr
1000d1c4:	10013fe8 	.word	0x10013fe8

1000d1c8 <platform_cmd_cmpl_wait>:
1000d1c8:	b510      	push	{r4, lr}
1000d1ca:	1c04      	adds	r4, r0, #0
1000d1cc:	4b07      	ldr	r3, [pc, #28]	; (1000d1ec <platform_cmd_cmpl_wait+0x24>)
1000d1ce:	681a      	ldr	r2, [r3, #0]
1000d1d0:	2a01      	cmp	r2, #1
1000d1d2:	d003      	beq.n	1000d1dc <platform_cmd_cmpl_wait+0x14>
1000d1d4:	4b06      	ldr	r3, [pc, #24]	; (1000d1f0 <platform_cmd_cmpl_wait+0x28>)
1000d1d6:	2000      	movs	r0, #0
1000d1d8:	4798      	blx	r3
1000d1da:	e7f7      	b.n	1000d1cc <platform_cmd_cmpl_wait+0x4>
1000d1dc:	6819      	ldr	r1, [r3, #0]
1000d1de:	2901      	cmp	r1, #1
1000d1e0:	d102      	bne.n	1000d1e8 <platform_cmd_cmpl_wait+0x20>
1000d1e2:	2200      	movs	r2, #0
1000d1e4:	601a      	str	r2, [r3, #0]
1000d1e6:	e000      	b.n	1000d1ea <platform_cmd_cmpl_wait+0x22>
1000d1e8:	7022      	strb	r2, [r4, #0]
1000d1ea:	bd10      	pop	{r4, pc}
1000d1ec:	10013fe8 	.word	0x10013fe8
1000d1f0:	1000b48d 	.word	0x1000b48d

1000d1f4 <start_timer>:
1000d1f4:	4770      	bx	lr

1000d1f6 <stop_timer>:
1000d1f6:	4770      	bx	lr

1000d1f8 <dbg_le_set_bd_addr_req_handler>:
1000d1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d1fa:	466b      	mov	r3, sp
1000d1fc:	1dde      	adds	r6, r3, #7
1000d1fe:	2300      	movs	r3, #0
1000d200:	7033      	strb	r3, [r6, #0]
1000d202:	230f      	movs	r3, #15
1000d204:	4c13      	ldr	r4, [pc, #76]	; (1000d254 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d206:	2703      	movs	r7, #3
1000d208:	7023      	strb	r3, [r4, #0]
1000d20a:	2300      	movs	r3, #0
1000d20c:	70e3      	strb	r3, [r4, #3]
1000d20e:	4b12      	ldr	r3, [pc, #72]	; (1000d258 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d210:	1c01      	adds	r1, r0, #0
1000d212:	881a      	ldrh	r2, [r3, #0]
1000d214:	881b      	ldrh	r3, [r3, #0]
1000d216:	7122      	strb	r2, [r4, #4]
1000d218:	0a1b      	lsrs	r3, r3, #8
1000d21a:	2206      	movs	r2, #6
1000d21c:	7163      	strb	r3, [r4, #5]
1000d21e:	480f      	ldr	r0, [pc, #60]	; (1000d25c <dbg_le_set_bd_addr_req_handler+0x64>)
1000d220:	4b0f      	ldr	r3, [pc, #60]	; (1000d260 <dbg_le_set_bd_addr_req_handler+0x68>)
1000d222:	7067      	strb	r7, [r4, #1]
1000d224:	70a7      	strb	r7, [r4, #2]
1000d226:	4798      	blx	r3
1000d228:	4d0e      	ldr	r5, [pc, #56]	; (1000d264 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d22a:	4b0f      	ldr	r3, [pc, #60]	; (1000d268 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d22c:	210e      	movs	r1, #14
1000d22e:	802b      	strh	r3, [r5, #0]
1000d230:	2306      	movs	r3, #6
1000d232:	71a3      	strb	r3, [r4, #6]
1000d234:	2300      	movs	r3, #0
1000d236:	1c20      	adds	r0, r4, #0
1000d238:	71e3      	strb	r3, [r4, #7]
1000d23a:	4b0c      	ldr	r3, [pc, #48]	; (1000d26c <dbg_le_set_bd_addr_req_handler+0x74>)
1000d23c:	80af      	strh	r7, [r5, #4]
1000d23e:	4798      	blx	r3
1000d240:	1c30      	adds	r0, r6, #0
1000d242:	4b0b      	ldr	r3, [pc, #44]	; (1000d270 <dbg_le_set_bd_addr_req_handler+0x78>)
1000d244:	4798      	blx	r3
1000d246:	7833      	ldrb	r3, [r6, #0]
1000d248:	20e2      	movs	r0, #226	; 0xe2
1000d24a:	2b00      	cmp	r3, #0
1000d24c:	d101      	bne.n	1000d252 <dbg_le_set_bd_addr_req_handler+0x5a>
1000d24e:	68ab      	ldr	r3, [r5, #8]
1000d250:	7818      	ldrb	r0, [r3, #0]
1000d252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d254:	1001505c 	.word	0x1001505c
1000d258:	10014cec 	.word	0x10014cec
1000d25c:	10015064 	.word	0x10015064
1000d260:	10010517 	.word	0x10010517
1000d264:	10014ce0 	.word	0x10014ce0
1000d268:	00000329 	.word	0x00000329
1000d26c:	1000d165 	.word	0x1000d165
1000d270:	1000d1c9 	.word	0x1000d1c9

1000d274 <gapc_get_dev_info_cfm.constprop.1>:
1000d274:	b538      	push	{r3, r4, r5, lr}
1000d276:	230b      	movs	r3, #11
1000d278:	4c27      	ldr	r4, [pc, #156]	; (1000d318 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d27a:	7023      	strb	r3, [r4, #0]
1000d27c:	3303      	adds	r3, #3
1000d27e:	7063      	strb	r3, [r4, #1]
1000d280:	3329      	adds	r3, #41	; 0x29
1000d282:	70a3      	strb	r3, [r4, #2]
1000d284:	4b25      	ldr	r3, [pc, #148]	; (1000d31c <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d286:	70e1      	strb	r1, [r4, #3]
1000d288:	881a      	ldrh	r2, [r3, #0]
1000d28a:	881b      	ldrh	r3, [r3, #0]
1000d28c:	7122      	strb	r2, [r4, #4]
1000d28e:	0a1b      	lsrs	r3, r3, #8
1000d290:	7163      	strb	r3, [r4, #5]
1000d292:	2300      	movs	r3, #0
1000d294:	7220      	strb	r0, [r4, #8]
1000d296:	7263      	strb	r3, [r4, #9]
1000d298:	2801      	cmp	r0, #1
1000d29a:	d02b      	beq.n	1000d2f4 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d29c:	4298      	cmp	r0, r3
1000d29e:	d01b      	beq.n	1000d2d8 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d2a0:	2802      	cmp	r0, #2
1000d2a2:	d12f      	bne.n	1000d304 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d2a4:	4b1e      	ldr	r3, [pc, #120]	; (1000d320 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d2a6:	2112      	movs	r1, #18
1000d2a8:	1c1a      	adds	r2, r3, #0
1000d2aa:	32ce      	adds	r2, #206	; 0xce
1000d2ac:	8812      	ldrh	r2, [r2, #0]
1000d2ae:	72a2      	strb	r2, [r4, #10]
1000d2b0:	0a12      	lsrs	r2, r2, #8
1000d2b2:	72e2      	strb	r2, [r4, #11]
1000d2b4:	1c1a      	adds	r2, r3, #0
1000d2b6:	32d0      	adds	r2, #208	; 0xd0
1000d2b8:	8812      	ldrh	r2, [r2, #0]
1000d2ba:	7322      	strb	r2, [r4, #12]
1000d2bc:	0a12      	lsrs	r2, r2, #8
1000d2be:	7362      	strb	r2, [r4, #13]
1000d2c0:	1c1a      	adds	r2, r3, #0
1000d2c2:	32d2      	adds	r2, #210	; 0xd2
1000d2c4:	8812      	ldrh	r2, [r2, #0]
1000d2c6:	33d4      	adds	r3, #212	; 0xd4
1000d2c8:	73a2      	strb	r2, [r4, #14]
1000d2ca:	0a12      	lsrs	r2, r2, #8
1000d2cc:	73e2      	strb	r2, [r4, #15]
1000d2ce:	881b      	ldrh	r3, [r3, #0]
1000d2d0:	7423      	strb	r3, [r4, #16]
1000d2d2:	0a1b      	lsrs	r3, r3, #8
1000d2d4:	7463      	strb	r3, [r4, #17]
1000d2d6:	e016      	b.n	1000d306 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d2d8:	4b11      	ldr	r3, [pc, #68]	; (1000d320 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d2da:	4912      	ldr	r1, [pc, #72]	; (1000d324 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d2dc:	33aa      	adds	r3, #170	; 0xaa
1000d2de:	881d      	ldrh	r5, [r3, #0]
1000d2e0:	4811      	ldr	r0, [pc, #68]	; (1000d328 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d2e2:	0a2b      	lsrs	r3, r5, #8
1000d2e4:	72a5      	strb	r5, [r4, #10]
1000d2e6:	72e3      	strb	r3, [r4, #11]
1000d2e8:	1c2a      	adds	r2, r5, #0
1000d2ea:	4b10      	ldr	r3, [pc, #64]	; (1000d32c <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d2ec:	350c      	adds	r5, #12
1000d2ee:	4798      	blx	r3
1000d2f0:	b2a9      	uxth	r1, r5
1000d2f2:	e008      	b.n	1000d306 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d2f4:	4b0a      	ldr	r3, [pc, #40]	; (1000d320 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d2f6:	210c      	movs	r1, #12
1000d2f8:	33cc      	adds	r3, #204	; 0xcc
1000d2fa:	881b      	ldrh	r3, [r3, #0]
1000d2fc:	72a3      	strb	r3, [r4, #10]
1000d2fe:	0a1b      	lsrs	r3, r3, #8
1000d300:	72e3      	strb	r3, [r4, #11]
1000d302:	e000      	b.n	1000d306 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d304:	210a      	movs	r1, #10
1000d306:	1c0b      	adds	r3, r1, #0
1000d308:	3b08      	subs	r3, #8
1000d30a:	71a3      	strb	r3, [r4, #6]
1000d30c:	121b      	asrs	r3, r3, #8
1000d30e:	71e3      	strb	r3, [r4, #7]
1000d310:	1c20      	adds	r0, r4, #0
1000d312:	4b07      	ldr	r3, [pc, #28]	; (1000d330 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d314:	4798      	blx	r3
1000d316:	bd38      	pop	{r3, r4, r5, pc}
1000d318:	1001505c 	.word	0x1001505c
1000d31c:	10014cec 	.word	0x10014cec
1000d320:	10014d7e 	.word	0x10014d7e
1000d324:	10014e2a 	.word	0x10014e2a
1000d328:	10015068 	.word	0x10015068
1000d32c:	10010517 	.word	0x10010517
1000d330:	1000d165 	.word	0x1000d165

1000d334 <check_ConnData_idx_role>:
1000d334:	4b0c      	ldr	r3, [pc, #48]	; (1000d368 <check_ConnData_idx_role+0x34>)
1000d336:	b570      	push	{r4, r5, r6, lr}
1000d338:	1c04      	adds	r4, r0, #0
1000d33a:	2008      	movs	r0, #8
1000d33c:	429c      	cmp	r4, r3
1000d33e:	d011      	beq.n	1000d364 <check_ConnData_idx_role+0x30>
1000d340:	2300      	movs	r3, #0
1000d342:	2212      	movs	r2, #18
1000d344:	435a      	muls	r2, r3
1000d346:	4d09      	ldr	r5, [pc, #36]	; (1000d36c <check_ConnData_idx_role+0x38>)
1000d348:	b2d8      	uxtb	r0, r3
1000d34a:	1956      	adds	r6, r2, r5
1000d34c:	8976      	ldrh	r6, [r6, #10]
1000d34e:	42a6      	cmp	r6, r4
1000d350:	d104      	bne.n	1000d35c <check_ConnData_idx_role+0x28>
1000d352:	2900      	cmp	r1, #0
1000d354:	d006      	beq.n	1000d364 <check_ConnData_idx_role+0x30>
1000d356:	5d53      	ldrb	r3, [r2, r5]
1000d358:	700b      	strb	r3, [r1, #0]
1000d35a:	e003      	b.n	1000d364 <check_ConnData_idx_role+0x30>
1000d35c:	3301      	adds	r3, #1
1000d35e:	2b08      	cmp	r3, #8
1000d360:	d1ef      	bne.n	1000d342 <check_ConnData_idx_role+0xe>
1000d362:	1c18      	adds	r0, r3, #0
1000d364:	bd70      	pop	{r4, r5, r6, pc}
1000d366:	46c0      	nop			; (mov r8, r8)
1000d368:	0000ffff 	.word	0x0000ffff
1000d36c:	10014cee 	.word	0x10014cee

1000d370 <check_ConnData_emptyEntry>:
1000d370:	2300      	movs	r3, #0
1000d372:	2212      	movs	r2, #18
1000d374:	435a      	muls	r2, r3
1000d376:	4906      	ldr	r1, [pc, #24]	; (1000d390 <check_ConnData_emptyEntry+0x20>)
1000d378:	b2d8      	uxtb	r0, r3
1000d37a:	1852      	adds	r2, r2, r1
1000d37c:	8951      	ldrh	r1, [r2, #10]
1000d37e:	4a05      	ldr	r2, [pc, #20]	; (1000d394 <check_ConnData_emptyEntry+0x24>)
1000d380:	4291      	cmp	r1, r2
1000d382:	d003      	beq.n	1000d38c <check_ConnData_emptyEntry+0x1c>
1000d384:	3301      	adds	r3, #1
1000d386:	2b08      	cmp	r3, #8
1000d388:	d1f3      	bne.n	1000d372 <check_ConnData_emptyEntry+0x2>
1000d38a:	1c18      	adds	r0, r3, #0
1000d38c:	4770      	bx	lr
1000d38e:	46c0      	nop			; (mov r8, r8)
1000d390:	10014cee 	.word	0x10014cee
1000d394:	0000ffff 	.word	0x0000ffff

1000d398 <gapc_cmp_evt>:
1000d398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d39a:	780b      	ldrb	r3, [r1, #0]
1000d39c:	1c05      	adds	r5, r0, #0
1000d39e:	1e58      	subs	r0, r3, #1
1000d3a0:	784e      	ldrb	r6, [r1, #1]
1000d3a2:	280f      	cmp	r0, #15
1000d3a4:	d85a      	bhi.n	1000d45c <gapc_cmp_evt+0xc4>
1000d3a6:	1c14      	adds	r4, r2, #0
1000d3a8:	f001 fb9a 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000d3ac:	5858440a 	.word	0x5858440a
1000d3b0:	4b584444 	.word	0x4b584444
1000d3b4:	0825122d 	.word	0x0825122d
1000d3b8:	3e395858 	.word	0x3e395858
1000d3bc:	203b      	movs	r0, #59	; 0x3b
1000d3be:	e04e      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3c0:	203b      	movs	r0, #59	; 0x3b
1000d3c2:	2e00      	cmp	r6, #0
1000d3c4:	d04b      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3c6:	0a2d      	lsrs	r5, r5, #8
1000d3c8:	8015      	strh	r5, [r2, #0]
1000d3ca:	7096      	strb	r6, [r2, #2]
1000d3cc:	3835      	subs	r0, #53	; 0x35
1000d3ce:	e046      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3d0:	466b      	mov	r3, sp
1000d3d2:	1ddf      	adds	r7, r3, #7
1000d3d4:	2301      	movs	r3, #1
1000d3d6:	0a2d      	lsrs	r5, r5, #8
1000d3d8:	703b      	strb	r3, [r7, #0]
1000d3da:	1c28      	adds	r0, r5, #0
1000d3dc:	1c39      	adds	r1, r7, #0
1000d3de:	4b20      	ldr	r3, [pc, #128]	; (1000d460 <gapc_cmp_evt+0xc8>)
1000d3e0:	4798      	blx	r3
1000d3e2:	2807      	cmp	r0, #7
1000d3e4:	d803      	bhi.n	1000d3ee <gapc_cmp_evt+0x56>
1000d3e6:	783b      	ldrb	r3, [r7, #0]
1000d3e8:	203b      	movs	r0, #59	; 0x3b
1000d3ea:	2b00      	cmp	r3, #0
1000d3ec:	d037      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3ee:	8065      	strh	r5, [r4, #2]
1000d3f0:	7126      	strb	r6, [r4, #4]
1000d3f2:	2009      	movs	r0, #9
1000d3f4:	e033      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3f6:	203b      	movs	r0, #59	; 0x3b
1000d3f8:	2e00      	cmp	r6, #0
1000d3fa:	d030      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d3fc:	0a2d      	lsrs	r5, r5, #8
1000d3fe:	8015      	strh	r5, [r2, #0]
1000d400:	7096      	strb	r6, [r2, #2]
1000d402:	382d      	subs	r0, #45	; 0x2d
1000d404:	e02b      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d406:	203b      	movs	r0, #59	; 0x3b
1000d408:	2e00      	cmp	r6, #0
1000d40a:	d028      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d40c:	2300      	movs	r3, #0
1000d40e:	0a2d      	lsrs	r5, r5, #8
1000d410:	8015      	strh	r5, [r2, #0]
1000d412:	7096      	strb	r6, [r2, #2]
1000d414:	8093      	strh	r3, [r2, #4]
1000d416:	80d3      	strh	r3, [r2, #6]
1000d418:	8113      	strh	r3, [r2, #8]
1000d41a:	3834      	subs	r0, #52	; 0x34
1000d41c:	e01f      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d41e:	203b      	movs	r0, #59	; 0x3b
1000d420:	2e00      	cmp	r6, #0
1000d422:	d01c      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d424:	7216      	strb	r6, [r2, #8]
1000d426:	e003      	b.n	1000d430 <gapc_cmp_evt+0x98>
1000d428:	203b      	movs	r0, #59	; 0x3b
1000d42a:	2e00      	cmp	r6, #0
1000d42c:	d017      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d42e:	7116      	strb	r6, [r2, #4]
1000d430:	3812      	subs	r0, #18
1000d432:	e014      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d434:	203b      	movs	r0, #59	; 0x3b
1000d436:	2e00      	cmp	r6, #0
1000d438:	d011      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d43a:	7093      	strb	r3, [r2, #2]
1000d43c:	70d6      	strb	r6, [r2, #3]
1000d43e:	382a      	subs	r0, #42	; 0x2a
1000d440:	e00d      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d442:	203b      	movs	r0, #59	; 0x3b
1000d444:	2e00      	cmp	r6, #0
1000d446:	d00a      	beq.n	1000d45e <gapc_cmp_evt+0xc6>
1000d448:	0a2d      	lsrs	r5, r5, #8
1000d44a:	7016      	strb	r6, [r2, #0]
1000d44c:	8055      	strh	r5, [r2, #2]
1000d44e:	1d10      	adds	r0, r2, #4
1000d450:	2100      	movs	r1, #0
1000d452:	2205      	movs	r2, #5
1000d454:	4b03      	ldr	r3, [pc, #12]	; (1000d464 <gapc_cmp_evt+0xcc>)
1000d456:	4798      	blx	r3
1000d458:	2012      	movs	r0, #18
1000d45a:	e000      	b.n	1000d45e <gapc_cmp_evt+0xc6>
1000d45c:	2000      	movs	r0, #0
1000d45e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d460:	1000d335 	.word	0x1000d335
1000d464:	10010529 	.word	0x10010529

1000d468 <gapc_connection_cfm_handler>:
1000d468:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d46a:	b085      	sub	sp, #20
1000d46c:	1c1d      	adds	r5, r3, #0
1000d46e:	ab0a      	add	r3, sp, #40	; 0x28
1000d470:	781b      	ldrb	r3, [r3, #0]
1000d472:	9201      	str	r2, [sp, #4]
1000d474:	9302      	str	r3, [sp, #8]
1000d476:	ab0b      	add	r3, sp, #44	; 0x2c
1000d478:	781b      	ldrb	r3, [r3, #0]
1000d47a:	1c07      	adds	r7, r0, #0
1000d47c:	9303      	str	r3, [sp, #12]
1000d47e:	ab0c      	add	r3, sp, #48	; 0x30
1000d480:	881a      	ldrh	r2, [r3, #0]
1000d482:	2302      	movs	r3, #2
1000d484:	1c0e      	adds	r6, r1, #0
1000d486:	4c23      	ldr	r4, [pc, #140]	; (1000d514 <gapc_connection_cfm_handler+0xac>)
1000d488:	1c39      	adds	r1, r7, #0
1000d48a:	7023      	strb	r3, [r4, #0]
1000d48c:	330c      	adds	r3, #12
1000d48e:	7063      	strb	r3, [r4, #1]
1000d490:	70a3      	strb	r3, [r4, #2]
1000d492:	4b21      	ldr	r3, [pc, #132]	; (1000d518 <gapc_connection_cfm_handler+0xb0>)
1000d494:	70e2      	strb	r2, [r4, #3]
1000d496:	881a      	ldrh	r2, [r3, #0]
1000d498:	881b      	ldrh	r3, [r3, #0]
1000d49a:	7122      	strb	r2, [r4, #4]
1000d49c:	0a1b      	lsrs	r3, r3, #8
1000d49e:	4f1f      	ldr	r7, [pc, #124]	; (1000d51c <gapc_connection_cfm_handler+0xb4>)
1000d4a0:	2210      	movs	r2, #16
1000d4a2:	481f      	ldr	r0, [pc, #124]	; (1000d520 <gapc_connection_cfm_handler+0xb8>)
1000d4a4:	7163      	strb	r3, [r4, #5]
1000d4a6:	47b8      	blx	r7
1000d4a8:	0a33      	lsrs	r3, r6, #8
1000d4aa:	7626      	strb	r6, [r4, #24]
1000d4ac:	7663      	strb	r3, [r4, #25]
1000d4ae:	9901      	ldr	r1, [sp, #4]
1000d4b0:	0c33      	lsrs	r3, r6, #16
1000d4b2:	2210      	movs	r2, #16
1000d4b4:	0e36      	lsrs	r6, r6, #24
1000d4b6:	481b      	ldr	r0, [pc, #108]	; (1000d524 <gapc_connection_cfm_handler+0xbc>)
1000d4b8:	76a3      	strb	r3, [r4, #26]
1000d4ba:	76e6      	strb	r6, [r4, #27]
1000d4bc:	47b8      	blx	r7
1000d4be:	1c23      	adds	r3, r4, #0
1000d4c0:	332c      	adds	r3, #44	; 0x2c
1000d4c2:	701d      	strb	r5, [r3, #0]
1000d4c4:	1c23      	adds	r3, r4, #0
1000d4c6:	0a2a      	lsrs	r2, r5, #8
1000d4c8:	332d      	adds	r3, #45	; 0x2d
1000d4ca:	701a      	strb	r2, [r3, #0]
1000d4cc:	1c23      	adds	r3, r4, #0
1000d4ce:	0c2a      	lsrs	r2, r5, #16
1000d4d0:	332e      	adds	r3, #46	; 0x2e
1000d4d2:	701a      	strb	r2, [r3, #0]
1000d4d4:	1c23      	adds	r3, r4, #0
1000d4d6:	0e2d      	lsrs	r5, r5, #24
1000d4d8:	332f      	adds	r3, #47	; 0x2f
1000d4da:	466a      	mov	r2, sp
1000d4dc:	701d      	strb	r5, [r3, #0]
1000d4de:	1c23      	adds	r3, r4, #0
1000d4e0:	7a12      	ldrb	r2, [r2, #8]
1000d4e2:	3330      	adds	r3, #48	; 0x30
1000d4e4:	701a      	strb	r2, [r3, #0]
1000d4e6:	1c23      	adds	r3, r4, #0
1000d4e8:	2500      	movs	r5, #0
1000d4ea:	3331      	adds	r3, #49	; 0x31
1000d4ec:	466a      	mov	r2, sp
1000d4ee:	701d      	strb	r5, [r3, #0]
1000d4f0:	1c23      	adds	r3, r4, #0
1000d4f2:	7b12      	ldrb	r2, [r2, #12]
1000d4f4:	3332      	adds	r3, #50	; 0x32
1000d4f6:	701a      	strb	r2, [r3, #0]
1000d4f8:	1c23      	adds	r3, r4, #0
1000d4fa:	3333      	adds	r3, #51	; 0x33
1000d4fc:	701d      	strb	r5, [r3, #0]
1000d4fe:	232c      	movs	r3, #44	; 0x2c
1000d500:	1c20      	adds	r0, r4, #0
1000d502:	71a3      	strb	r3, [r4, #6]
1000d504:	2134      	movs	r1, #52	; 0x34
1000d506:	4b08      	ldr	r3, [pc, #32]	; (1000d528 <gapc_connection_cfm_handler+0xc0>)
1000d508:	71e5      	strb	r5, [r4, #7]
1000d50a:	4798      	blx	r3
1000d50c:	1c28      	adds	r0, r5, #0
1000d50e:	b005      	add	sp, #20
1000d510:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d512:	46c0      	nop			; (mov r8, r8)
1000d514:	1001505c 	.word	0x1001505c
1000d518:	10014cec 	.word	0x10014cec
1000d51c:	10010517 	.word	0x10010517
1000d520:	10015064 	.word	0x10015064
1000d524:	10015078 	.word	0x10015078
1000d528:	1000d165 	.word	0x1000d165

1000d52c <gapc_con_req_ind>:
1000d52c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d52e:	7845      	ldrb	r5, [r0, #1]
1000d530:	7803      	ldrb	r3, [r0, #0]
1000d532:	4c30      	ldr	r4, [pc, #192]	; (1000d5f4 <gapc_con_req_ind+0xc8>)
1000d534:	022d      	lsls	r5, r5, #8
1000d536:	431d      	orrs	r5, r3
1000d538:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d53a:	78c3      	ldrb	r3, [r0, #3]
1000d53c:	7882      	ldrb	r2, [r0, #2]
1000d53e:	b08b      	sub	sp, #44	; 0x2c
1000d540:	021b      	lsls	r3, r3, #8
1000d542:	431a      	orrs	r2, r3
1000d544:	466b      	mov	r3, sp
1000d546:	9205      	str	r2, [sp, #20]
1000d548:	8a9b      	ldrh	r3, [r3, #20]
1000d54a:	2120      	movs	r1, #32
1000d54c:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d54e:	7943      	ldrb	r3, [r0, #5]
1000d550:	7902      	ldrb	r2, [r0, #4]
1000d552:	021b      	lsls	r3, r3, #8
1000d554:	431a      	orrs	r2, r3
1000d556:	466b      	mov	r3, sp
1000d558:	9206      	str	r2, [sp, #24]
1000d55a:	8b1b      	ldrh	r3, [r3, #24]
1000d55c:	1c06      	adds	r6, r0, #0
1000d55e:	8623      	strh	r3, [r4, #48]	; 0x30
1000d560:	79c3      	ldrb	r3, [r0, #7]
1000d562:	7982      	ldrb	r2, [r0, #6]
1000d564:	021b      	lsls	r3, r3, #8
1000d566:	431a      	orrs	r2, r3
1000d568:	466b      	mov	r3, sp
1000d56a:	9207      	str	r2, [sp, #28]
1000d56c:	466a      	mov	r2, sp
1000d56e:	8b9b      	ldrh	r3, [r3, #28]
1000d570:	1852      	adds	r2, r2, r1
1000d572:	8663      	strh	r3, [r4, #50]	; 0x32
1000d574:	7a43      	ldrb	r3, [r0, #9]
1000d576:	1c01      	adds	r1, r0, #0
1000d578:	9308      	str	r3, [sp, #32]
1000d57a:	1c23      	adds	r3, r4, #0
1000d57c:	7812      	ldrb	r2, [r2, #0]
1000d57e:	3377      	adds	r3, #119	; 0x77
1000d580:	3478      	adds	r4, #120	; 0x78
1000d582:	701a      	strb	r2, [r3, #0]
1000d584:	310a      	adds	r1, #10
1000d586:	2206      	movs	r2, #6
1000d588:	4b1b      	ldr	r3, [pc, #108]	; (1000d5f8 <gapc_con_req_ind+0xcc>)
1000d58a:	1c20      	adds	r0, r4, #0
1000d58c:	4798      	blx	r3
1000d58e:	7c33      	ldrb	r3, [r6, #16]
1000d590:	9309      	str	r3, [sp, #36]	; 0x24
1000d592:	4b1a      	ldr	r3, [pc, #104]	; (1000d5fc <gapc_con_req_ind+0xd0>)
1000d594:	4798      	blx	r3
1000d596:	4e1a      	ldr	r6, [pc, #104]	; (1000d600 <gapc_con_req_ind+0xd4>)
1000d598:	1e07      	subs	r7, r0, #0
1000d59a:	2f07      	cmp	r7, #7
1000d59c:	d81b      	bhi.n	1000d5d6 <gapc_con_req_ind+0xaa>
1000d59e:	2312      	movs	r3, #18
1000d5a0:	4343      	muls	r3, r0
1000d5a2:	18f0      	adds	r0, r6, r3
1000d5a4:	8145      	strh	r5, [r0, #10]
1000d5a6:	4669      	mov	r1, sp
1000d5a8:	2524      	movs	r5, #36	; 0x24
1000d5aa:	1949      	adds	r1, r1, r5
1000d5ac:	7809      	ldrb	r1, [r1, #0]
1000d5ae:	2206      	movs	r2, #6
1000d5b0:	54f1      	strb	r1, [r6, r3]
1000d5b2:	2120      	movs	r1, #32
1000d5b4:	466b      	mov	r3, sp
1000d5b6:	185b      	adds	r3, r3, r1
1000d5b8:	781b      	ldrb	r3, [r3, #0]
1000d5ba:	1c21      	adds	r1, r4, #0
1000d5bc:	7043      	strb	r3, [r0, #1]
1000d5be:	466b      	mov	r3, sp
1000d5c0:	8a9b      	ldrh	r3, [r3, #20]
1000d5c2:	3002      	adds	r0, #2
1000d5c4:	8143      	strh	r3, [r0, #10]
1000d5c6:	466b      	mov	r3, sp
1000d5c8:	8b1b      	ldrh	r3, [r3, #24]
1000d5ca:	8183      	strh	r3, [r0, #12]
1000d5cc:	466b      	mov	r3, sp
1000d5ce:	8b9b      	ldrh	r3, [r3, #28]
1000d5d0:	81c3      	strh	r3, [r0, #14]
1000d5d2:	4b09      	ldr	r3, [pc, #36]	; (1000d5f8 <gapc_con_req_ind+0xcc>)
1000d5d4:	4798      	blx	r3
1000d5d6:	2112      	movs	r1, #18
1000d5d8:	2300      	movs	r3, #0
1000d5da:	434f      	muls	r7, r1
1000d5dc:	9300      	str	r3, [sp, #0]
1000d5de:	9301      	str	r3, [sp, #4]
1000d5e0:	19f6      	adds	r6, r6, r7
1000d5e2:	8971      	ldrh	r1, [r6, #10]
1000d5e4:	4a07      	ldr	r2, [pc, #28]	; (1000d604 <gapc_con_req_ind+0xd8>)
1000d5e6:	9102      	str	r1, [sp, #8]
1000d5e8:	1c10      	adds	r0, r2, #0
1000d5ea:	1c19      	adds	r1, r3, #0
1000d5ec:	4c06      	ldr	r4, [pc, #24]	; (1000d608 <gapc_con_req_ind+0xdc>)
1000d5ee:	47a0      	blx	r4
1000d5f0:	b00b      	add	sp, #44	; 0x2c
1000d5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d5f4:	10014d7e 	.word	0x10014d7e
1000d5f8:	10010517 	.word	0x10010517
1000d5fc:	1000d371 	.word	0x1000d371
1000d600:	10014cee 	.word	0x10014cee
1000d604:	10013fec 	.word	0x10013fec
1000d608:	1000d469 	.word	0x1000d469

1000d60c <gapc_disconnect_cmd_handler>:
1000d60c:	2204      	movs	r2, #4
1000d60e:	b510      	push	{r4, lr}
1000d610:	4b0c      	ldr	r3, [pc, #48]	; (1000d644 <gapc_disconnect_cmd_handler+0x38>)
1000d612:	2400      	movs	r4, #0
1000d614:	701a      	strb	r2, [r3, #0]
1000d616:	320a      	adds	r2, #10
1000d618:	705a      	strb	r2, [r3, #1]
1000d61a:	709a      	strb	r2, [r3, #2]
1000d61c:	4a0a      	ldr	r2, [pc, #40]	; (1000d648 <gapc_disconnect_cmd_handler+0x3c>)
1000d61e:	70d9      	strb	r1, [r3, #3]
1000d620:	8811      	ldrh	r1, [r2, #0]
1000d622:	8812      	ldrh	r2, [r2, #0]
1000d624:	7119      	strb	r1, [r3, #4]
1000d626:	0a12      	lsrs	r2, r2, #8
1000d628:	715a      	strb	r2, [r3, #5]
1000d62a:	2201      	movs	r2, #1
1000d62c:	721a      	strb	r2, [r3, #8]
1000d62e:	1892      	adds	r2, r2, r2
1000d630:	7258      	strb	r0, [r3, #9]
1000d632:	719a      	strb	r2, [r3, #6]
1000d634:	71dc      	strb	r4, [r3, #7]
1000d636:	1c18      	adds	r0, r3, #0
1000d638:	210a      	movs	r1, #10
1000d63a:	4b04      	ldr	r3, [pc, #16]	; (1000d64c <gapc_disconnect_cmd_handler+0x40>)
1000d63c:	4798      	blx	r3
1000d63e:	1c20      	adds	r0, r4, #0
1000d640:	bd10      	pop	{r4, pc}
1000d642:	46c0      	nop			; (mov r8, r8)
1000d644:	1001505c 	.word	0x1001505c
1000d648:	10014cec 	.word	0x10014cec
1000d64c:	1000d165 	.word	0x1000d165

1000d650 <gapc_disconnect_ind>:
1000d650:	1c02      	adds	r2, r0, #0
1000d652:	b508      	push	{r3, lr}
1000d654:	7843      	ldrb	r3, [r0, #1]
1000d656:	7800      	ldrb	r0, [r0, #0]
1000d658:	021b      	lsls	r3, r3, #8
1000d65a:	4318      	orrs	r0, r3
1000d65c:	8008      	strh	r0, [r1, #0]
1000d65e:	7893      	ldrb	r3, [r2, #2]
1000d660:	708b      	strb	r3, [r1, #2]
1000d662:	2100      	movs	r1, #0
1000d664:	4b05      	ldr	r3, [pc, #20]	; (1000d67c <gapc_disconnect_ind+0x2c>)
1000d666:	4798      	blx	r3
1000d668:	2807      	cmp	r0, #7
1000d66a:	d806      	bhi.n	1000d67a <gapc_disconnect_ind+0x2a>
1000d66c:	2312      	movs	r3, #18
1000d66e:	4358      	muls	r0, r3
1000d670:	4b03      	ldr	r3, [pc, #12]	; (1000d680 <gapc_disconnect_ind+0x30>)
1000d672:	1818      	adds	r0, r3, r0
1000d674:	2301      	movs	r3, #1
1000d676:	425b      	negs	r3, r3
1000d678:	8143      	strh	r3, [r0, #10]
1000d67a:	bd08      	pop	{r3, pc}
1000d67c:	1000d335 	.word	0x1000d335
1000d680:	10014cee 	.word	0x10014cee

1000d684 <gapc_bond_cmd_handler>:
1000d684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d686:	9300      	str	r3, [sp, #0]
1000d688:	2312      	movs	r3, #18
1000d68a:	1c04      	adds	r4, r0, #0
1000d68c:	a808      	add	r0, sp, #32
1000d68e:	7807      	ldrb	r7, [r0, #0]
1000d690:	a809      	add	r0, sp, #36	; 0x24
1000d692:	7806      	ldrb	r6, [r0, #0]
1000d694:	a80a      	add	r0, sp, #40	; 0x28
1000d696:	7805      	ldrb	r5, [r0, #0]
1000d698:	a80b      	add	r0, sp, #44	; 0x2c
1000d69a:	7800      	ldrb	r0, [r0, #0]
1000d69c:	9001      	str	r0, [sp, #4]
1000d69e:	4810      	ldr	r0, [pc, #64]	; (1000d6e0 <gapc_bond_cmd_handler+0x5c>)
1000d6a0:	7003      	strb	r3, [r0, #0]
1000d6a2:	230e      	movs	r3, #14
1000d6a4:	70c4      	strb	r4, [r0, #3]
1000d6a6:	4c0f      	ldr	r4, [pc, #60]	; (1000d6e4 <gapc_bond_cmd_handler+0x60>)
1000d6a8:	7043      	strb	r3, [r0, #1]
1000d6aa:	7083      	strb	r3, [r0, #2]
1000d6ac:	8823      	ldrh	r3, [r4, #0]
1000d6ae:	8824      	ldrh	r4, [r4, #0]
1000d6b0:	7103      	strb	r3, [r0, #4]
1000d6b2:	466b      	mov	r3, sp
1000d6b4:	781b      	ldrb	r3, [r3, #0]
1000d6b6:	0a24      	lsrs	r4, r4, #8
1000d6b8:	72c3      	strb	r3, [r0, #11]
1000d6ba:	466b      	mov	r3, sp
1000d6bc:	791b      	ldrb	r3, [r3, #4]
1000d6be:	7144      	strb	r4, [r0, #5]
1000d6c0:	73c3      	strb	r3, [r0, #15]
1000d6c2:	2308      	movs	r3, #8
1000d6c4:	7183      	strb	r3, [r0, #6]
1000d6c6:	2300      	movs	r3, #0
1000d6c8:	240a      	movs	r4, #10
1000d6ca:	7241      	strb	r1, [r0, #9]
1000d6cc:	71c3      	strb	r3, [r0, #7]
1000d6ce:	2110      	movs	r1, #16
1000d6d0:	4b05      	ldr	r3, [pc, #20]	; (1000d6e8 <gapc_bond_cmd_handler+0x64>)
1000d6d2:	7307      	strb	r7, [r0, #12]
1000d6d4:	7346      	strb	r6, [r0, #13]
1000d6d6:	7385      	strb	r5, [r0, #14]
1000d6d8:	7204      	strb	r4, [r0, #8]
1000d6da:	7282      	strb	r2, [r0, #10]
1000d6dc:	4798      	blx	r3
1000d6de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d6e0:	1001505c 	.word	0x1001505c
1000d6e4:	10014cec 	.word	0x10014cec
1000d6e8:	1000d165 	.word	0x1000d165

1000d6ec <gapc_bond_ind>:
1000d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d6ee:	780e      	ldrb	r6, [r1, #0]
1000d6f0:	1c03      	adds	r3, r0, #0
1000d6f2:	1eb0      	subs	r0, r6, #2
1000d6f4:	2805      	cmp	r0, #5
1000d6f6:	d85d      	bhi.n	1000d7b4 <gapc_bond_ind+0xc8>
1000d6f8:	1c15      	adds	r5, r2, #0
1000d6fa:	1c0c      	adds	r4, r1, #0
1000d6fc:	f001 f9f0 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000d700:	2f5a030d 	.word	0x2f5a030d
1000d704:	4740      	.short	0x4740
1000d706:	2009      	movs	r0, #9
1000d708:	2a00      	cmp	r2, #0
1000d70a:	d054      	beq.n	1000d7b6 <gapc_bond_ind+0xca>
1000d70c:	0a1b      	lsrs	r3, r3, #8
1000d70e:	8053      	strh	r3, [r2, #2]
1000d710:	788b      	ldrb	r3, [r1, #2]
1000d712:	4829      	ldr	r0, [pc, #164]	; (1000d7b8 <gapc_bond_ind+0xcc>)
1000d714:	7113      	strb	r3, [r2, #4]
1000d716:	2100      	movs	r1, #0
1000d718:	e01c      	b.n	1000d754 <gapc_bond_ind+0x68>
1000d71a:	2009      	movs	r0, #9
1000d71c:	2a00      	cmp	r2, #0
1000d71e:	d04a      	beq.n	1000d7b6 <gapc_bond_ind+0xca>
1000d720:	4c25      	ldr	r4, [pc, #148]	; (1000d7b8 <gapc_bond_ind+0xcc>)
1000d722:	0a1b      	lsrs	r3, r3, #8
1000d724:	8053      	strh	r3, [r2, #2]
1000d726:	788b      	ldrb	r3, [r1, #2]
1000d728:	2700      	movs	r7, #0
1000d72a:	1c10      	adds	r0, r2, #0
1000d72c:	1c21      	adds	r1, r4, #0
1000d72e:	7013      	strb	r3, [r2, #0]
1000d730:	4e22      	ldr	r6, [pc, #136]	; (1000d7bc <gapc_bond_ind+0xd0>)
1000d732:	7117      	strb	r7, [r2, #4]
1000d734:	312e      	adds	r1, #46	; 0x2e
1000d736:	2217      	movs	r2, #23
1000d738:	3032      	adds	r0, #50	; 0x32
1000d73a:	47b0      	blx	r6
1000d73c:	1c28      	adds	r0, r5, #0
1000d73e:	1c21      	adds	r1, r4, #0
1000d740:	2210      	movs	r2, #16
1000d742:	311e      	adds	r1, #30
1000d744:	3022      	adds	r0, #34	; 0x22
1000d746:	47b0      	blx	r6
1000d748:	1ca1      	adds	r1, r4, #2
1000d74a:	1da8      	adds	r0, r5, #6
1000d74c:	221c      	movs	r2, #28
1000d74e:	47b0      	blx	r6
1000d750:	1c20      	adds	r0, r4, #0
1000d752:	1c39      	adds	r1, r7, #0
1000d754:	2246      	movs	r2, #70	; 0x46
1000d756:	4b1a      	ldr	r3, [pc, #104]	; (1000d7c0 <gapc_bond_ind+0xd4>)
1000d758:	4798      	blx	r3
1000d75a:	2009      	movs	r0, #9
1000d75c:	e02b      	b.n	1000d7b6 <gapc_bond_ind+0xca>
1000d75e:	4d16      	ldr	r5, [pc, #88]	; (1000d7b8 <gapc_bond_ind+0xcc>)
1000d760:	3102      	adds	r1, #2
1000d762:	1c28      	adds	r0, r5, #0
1000d764:	2210      	movs	r2, #16
1000d766:	4e15      	ldr	r6, [pc, #84]	; (1000d7bc <gapc_bond_ind+0xd0>)
1000d768:	302e      	adds	r0, #46	; 0x2e
1000d76a:	47b0      	blx	r6
1000d76c:	1c28      	adds	r0, r5, #0
1000d76e:	1c21      	adds	r1, r4, #0
1000d770:	303f      	adds	r0, #63	; 0x3f
1000d772:	3112      	adds	r1, #18
1000d774:	2206      	movs	r2, #6
1000d776:	47b0      	blx	r6
1000d778:	7e23      	ldrb	r3, [r4, #24]
1000d77a:	353e      	adds	r5, #62	; 0x3e
1000d77c:	702b      	strb	r3, [r5, #0]
1000d77e:	e019      	b.n	1000d7b4 <gapc_bond_ind+0xc8>
1000d780:	480d      	ldr	r0, [pc, #52]	; (1000d7b8 <gapc_bond_ind+0xcc>)
1000d782:	3102      	adds	r1, #2
1000d784:	2210      	movs	r2, #16
1000d786:	4b0d      	ldr	r3, [pc, #52]	; (1000d7bc <gapc_bond_ind+0xd0>)
1000d788:	301e      	adds	r0, #30
1000d78a:	4798      	blx	r3
1000d78c:	e012      	b.n	1000d7b4 <gapc_bond_ind+0xc8>
1000d78e:	4d0a      	ldr	r5, [pc, #40]	; (1000d7b8 <gapc_bond_ind+0xcc>)
1000d790:	3102      	adds	r1, #2
1000d792:	2210      	movs	r2, #16
1000d794:	4e09      	ldr	r6, [pc, #36]	; (1000d7bc <gapc_bond_ind+0xd0>)
1000d796:	1ca8      	adds	r0, r5, #2
1000d798:	47b0      	blx	r6
1000d79a:	1c28      	adds	r0, r5, #0
1000d79c:	1c21      	adds	r1, r4, #0
1000d79e:	7ce3      	ldrb	r3, [r4, #19]
1000d7a0:	7ca2      	ldrb	r2, [r4, #18]
1000d7a2:	021b      	lsls	r3, r3, #8
1000d7a4:	4313      	orrs	r3, r2
1000d7a6:	3014      	adds	r0, #20
1000d7a8:	3114      	adds	r1, #20
1000d7aa:	2208      	movs	r2, #8
1000d7ac:	826b      	strh	r3, [r5, #18]
1000d7ae:	47b0      	blx	r6
1000d7b0:	7f23      	ldrb	r3, [r4, #28]
1000d7b2:	772b      	strb	r3, [r5, #28]
1000d7b4:	2000      	movs	r0, #0
1000d7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d7b8:	1001401c 	.word	0x1001401c
1000d7bc:	10010517 	.word	0x10010517
1000d7c0:	10010529 	.word	0x10010529

1000d7c4 <gapc_bond_req_ind>:
1000d7c4:	b570      	push	{r4, r5, r6, lr}
1000d7c6:	780c      	ldrb	r4, [r1, #0]
1000d7c8:	1c03      	adds	r3, r0, #0
1000d7ca:	7849      	ldrb	r1, [r1, #1]
1000d7cc:	2c07      	cmp	r4, #7
1000d7ce:	d85c      	bhi.n	1000d88a <gapc_bond_req_ind+0xc6>
1000d7d0:	1c20      	adds	r0, r4, #0
1000d7d2:	f001 f985 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000d7d6:	5a04      	.short	0x5a04
1000d7d8:	5a0b5a5a 	.word	0x5a0b5a5a
1000d7dc:	1f1f      	.short	0x1f1f
1000d7de:	200a      	movs	r0, #10
1000d7e0:	2a00      	cmp	r2, #0
1000d7e2:	d053      	beq.n	1000d88c <gapc_bond_req_ind+0xc8>
1000d7e4:	0a1b      	lsrs	r3, r3, #8
1000d7e6:	8013      	strh	r3, [r2, #0]
1000d7e8:	7091      	strb	r1, [r2, #2]
1000d7ea:	e04f      	b.n	1000d88c <gapc_bond_req_ind+0xc8>
1000d7ec:	2a00      	cmp	r2, #0
1000d7ee:	d00b      	beq.n	1000d808 <gapc_bond_req_ind+0x44>
1000d7f0:	0a1b      	lsrs	r3, r3, #8
1000d7f2:	8013      	strh	r3, [r2, #0]
1000d7f4:	2900      	cmp	r1, #0
1000d7f6:	d102      	bne.n	1000d7fe <gapc_bond_req_ind+0x3a>
1000d7f8:	2301      	movs	r3, #1
1000d7fa:	7093      	strb	r3, [r2, #2]
1000d7fc:	e004      	b.n	1000d808 <gapc_bond_req_ind+0x44>
1000d7fe:	2300      	movs	r3, #0
1000d800:	7093      	strb	r3, [r2, #2]
1000d802:	2902      	cmp	r1, #2
1000d804:	d102      	bne.n	1000d80c <gapc_bond_req_ind+0x48>
1000d806:	70d3      	strb	r3, [r2, #3]
1000d808:	200c      	movs	r0, #12
1000d80a:	e03f      	b.n	1000d88c <gapc_bond_req_ind+0xc8>
1000d80c:	2901      	cmp	r1, #1
1000d80e:	d1fb      	bne.n	1000d808 <gapc_bond_req_ind+0x44>
1000d810:	70d1      	strb	r1, [r2, #3]
1000d812:	e7f9      	b.n	1000d808 <gapc_bond_req_ind+0x44>
1000d814:	2214      	movs	r2, #20
1000d816:	481e      	ldr	r0, [pc, #120]	; (1000d890 <gapc_bond_req_ind+0xcc>)
1000d818:	0a1b      	lsrs	r3, r3, #8
1000d81a:	70c3      	strb	r3, [r0, #3]
1000d81c:	4b1d      	ldr	r3, [pc, #116]	; (1000d894 <gapc_bond_req_ind+0xd0>)
1000d81e:	7002      	strb	r2, [r0, #0]
1000d820:	3a06      	subs	r2, #6
1000d822:	7042      	strb	r2, [r0, #1]
1000d824:	7082      	strb	r2, [r0, #2]
1000d826:	881a      	ldrh	r2, [r3, #0]
1000d828:	881b      	ldrh	r3, [r3, #0]
1000d82a:	4e1b      	ldr	r6, [pc, #108]	; (1000d898 <gapc_bond_req_ind+0xd4>)
1000d82c:	0a1b      	lsrs	r3, r3, #8
1000d82e:	7143      	strb	r3, [r0, #5]
1000d830:	2301      	movs	r3, #1
1000d832:	7102      	strb	r2, [r0, #4]
1000d834:	7204      	strb	r4, [r0, #8]
1000d836:	7243      	strb	r3, [r0, #9]
1000d838:	1c05      	adds	r5, r0, #0
1000d83a:	1c31      	adds	r1, r6, #0
1000d83c:	300a      	adds	r0, #10
1000d83e:	2c07      	cmp	r4, #7
1000d840:	d116      	bne.n	1000d870 <gapc_bond_req_ind+0xac>
1000d842:	317e      	adds	r1, #126	; 0x7e
1000d844:	2210      	movs	r2, #16
1000d846:	4c15      	ldr	r4, [pc, #84]	; (1000d89c <gapc_bond_req_ind+0xd8>)
1000d848:	47a0      	blx	r4
1000d84a:	1c33      	adds	r3, r6, #0
1000d84c:	1c31      	adds	r1, r6, #0
1000d84e:	1c28      	adds	r0, r5, #0
1000d850:	338e      	adds	r3, #142	; 0x8e
1000d852:	881b      	ldrh	r3, [r3, #0]
1000d854:	3190      	adds	r1, #144	; 0x90
1000d856:	76ab      	strb	r3, [r5, #26]
1000d858:	2208      	movs	r2, #8
1000d85a:	0a1b      	lsrs	r3, r3, #8
1000d85c:	301c      	adds	r0, #28
1000d85e:	76eb      	strb	r3, [r5, #27]
1000d860:	47a0      	blx	r4
1000d862:	1c31      	adds	r1, r6, #0
1000d864:	3198      	adds	r1, #152	; 0x98
1000d866:	780a      	ldrb	r2, [r1, #0]
1000d868:	1d6b      	adds	r3, r5, #5
1000d86a:	77da      	strb	r2, [r3, #31]
1000d86c:	2125      	movs	r1, #37	; 0x25
1000d86e:	e004      	b.n	1000d87a <gapc_bond_req_ind+0xb6>
1000d870:	319a      	adds	r1, #154	; 0x9a
1000d872:	2210      	movs	r2, #16
1000d874:	4b09      	ldr	r3, [pc, #36]	; (1000d89c <gapc_bond_req_ind+0xd8>)
1000d876:	4798      	blx	r3
1000d878:	211a      	movs	r1, #26
1000d87a:	1c0b      	adds	r3, r1, #0
1000d87c:	2400      	movs	r4, #0
1000d87e:	3b08      	subs	r3, #8
1000d880:	71ab      	strb	r3, [r5, #6]
1000d882:	1c28      	adds	r0, r5, #0
1000d884:	4b06      	ldr	r3, [pc, #24]	; (1000d8a0 <gapc_bond_req_ind+0xdc>)
1000d886:	71ec      	strb	r4, [r5, #7]
1000d888:	4798      	blx	r3
1000d88a:	2000      	movs	r0, #0
1000d88c:	bd70      	pop	{r4, r5, r6, pc}
1000d88e:	46c0      	nop			; (mov r8, r8)
1000d890:	1001505c 	.word	0x1001505c
1000d894:	10014cec 	.word	0x10014cec
1000d898:	10014d7e 	.word	0x10014d7e
1000d89c:	10010517 	.word	0x10010517
1000d8a0:	1000d165 	.word	0x1000d165

1000d8a4 <gapc_bond_cfm_handler_pair_resp>:
1000d8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d8a6:	b085      	sub	sp, #20
1000d8a8:	1c07      	adds	r7, r0, #0
1000d8aa:	a80a      	add	r0, sp, #40	; 0x28
1000d8ac:	7806      	ldrb	r6, [r0, #0]
1000d8ae:	a80b      	add	r0, sp, #44	; 0x2c
1000d8b0:	7805      	ldrb	r5, [r0, #0]
1000d8b2:	a80c      	add	r0, sp, #48	; 0x30
1000d8b4:	7800      	ldrb	r0, [r0, #0]
1000d8b6:	2414      	movs	r4, #20
1000d8b8:	9002      	str	r0, [sp, #8]
1000d8ba:	a80d      	add	r0, sp, #52	; 0x34
1000d8bc:	7800      	ldrb	r0, [r0, #0]
1000d8be:	9301      	str	r3, [sp, #4]
1000d8c0:	9003      	str	r0, [sp, #12]
1000d8c2:	a80e      	add	r0, sp, #56	; 0x38
1000d8c4:	8800      	ldrh	r0, [r0, #0]
1000d8c6:	4684      	mov	ip, r0
1000d8c8:	4812      	ldr	r0, [pc, #72]	; (1000d914 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d8ca:	7004      	strb	r4, [r0, #0]
1000d8cc:	3c06      	subs	r4, #6
1000d8ce:	7044      	strb	r4, [r0, #1]
1000d8d0:	7084      	strb	r4, [r0, #2]
1000d8d2:	4664      	mov	r4, ip
1000d8d4:	70c4      	strb	r4, [r0, #3]
1000d8d6:	4c10      	ldr	r4, [pc, #64]	; (1000d918 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d8d8:	7247      	strb	r7, [r0, #9]
1000d8da:	8823      	ldrh	r3, [r4, #0]
1000d8dc:	8824      	ldrh	r4, [r4, #0]
1000d8de:	7103      	strb	r3, [r0, #4]
1000d8e0:	466b      	mov	r3, sp
1000d8e2:	791b      	ldrb	r3, [r3, #4]
1000d8e4:	0a24      	lsrs	r4, r4, #8
1000d8e6:	7303      	strb	r3, [r0, #12]
1000d8e8:	466b      	mov	r3, sp
1000d8ea:	7a1b      	ldrb	r3, [r3, #8]
1000d8ec:	7144      	strb	r4, [r0, #5]
1000d8ee:	73c3      	strb	r3, [r0, #15]
1000d8f0:	466b      	mov	r3, sp
1000d8f2:	7b1b      	ldrb	r3, [r3, #12]
1000d8f4:	2401      	movs	r4, #1
1000d8f6:	7403      	strb	r3, [r0, #16]
1000d8f8:	2309      	movs	r3, #9
1000d8fa:	7183      	strb	r3, [r0, #6]
1000d8fc:	2300      	movs	r3, #0
1000d8fe:	7204      	strb	r4, [r0, #8]
1000d900:	7281      	strb	r1, [r0, #10]
1000d902:	72c2      	strb	r2, [r0, #11]
1000d904:	7346      	strb	r6, [r0, #13]
1000d906:	7385      	strb	r5, [r0, #14]
1000d908:	71c3      	strb	r3, [r0, #7]
1000d90a:	2111      	movs	r1, #17
1000d90c:	4b03      	ldr	r3, [pc, #12]	; (1000d91c <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d90e:	4798      	blx	r3
1000d910:	b005      	add	sp, #20
1000d912:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d914:	1001505c 	.word	0x1001505c
1000d918:	10014cec 	.word	0x10014cec
1000d91c:	1000d165 	.word	0x1000d165

1000d920 <gapc_bond_cfm_handler_key_exch>:
1000d920:	b538      	push	{r3, r4, r5, lr}
1000d922:	2514      	movs	r5, #20
1000d924:	4c0d      	ldr	r4, [pc, #52]	; (1000d95c <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d926:	70e3      	strb	r3, [r4, #3]
1000d928:	4b0d      	ldr	r3, [pc, #52]	; (1000d960 <gapc_bond_cfm_handler_key_exch+0x40>)
1000d92a:	7025      	strb	r5, [r4, #0]
1000d92c:	3d06      	subs	r5, #6
1000d92e:	7065      	strb	r5, [r4, #1]
1000d930:	70a5      	strb	r5, [r4, #2]
1000d932:	881d      	ldrh	r5, [r3, #0]
1000d934:	881b      	ldrh	r3, [r3, #0]
1000d936:	7220      	strb	r0, [r4, #8]
1000d938:	0a1b      	lsrs	r3, r3, #8
1000d93a:	7163      	strb	r3, [r4, #5]
1000d93c:	7261      	strb	r1, [r4, #9]
1000d93e:	4b09      	ldr	r3, [pc, #36]	; (1000d964 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d940:	1c11      	adds	r1, r2, #0
1000d942:	4809      	ldr	r0, [pc, #36]	; (1000d968 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d944:	2210      	movs	r2, #16
1000d946:	7125      	strb	r5, [r4, #4]
1000d948:	4798      	blx	r3
1000d94a:	2312      	movs	r3, #18
1000d94c:	71a3      	strb	r3, [r4, #6]
1000d94e:	2300      	movs	r3, #0
1000d950:	1c20      	adds	r0, r4, #0
1000d952:	71e3      	strb	r3, [r4, #7]
1000d954:	211a      	movs	r1, #26
1000d956:	4b05      	ldr	r3, [pc, #20]	; (1000d96c <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d958:	4798      	blx	r3
1000d95a:	bd38      	pop	{r3, r4, r5, pc}
1000d95c:	1001505c 	.word	0x1001505c
1000d960:	10014cec 	.word	0x10014cec
1000d964:	10010517 	.word	0x10010517
1000d968:	10015066 	.word	0x10015066
1000d96c:	1000d165 	.word	0x1000d165

1000d970 <gapc_security_cmd_handler>:
1000d970:	221a      	movs	r2, #26
1000d972:	b508      	push	{r3, lr}
1000d974:	4b0b      	ldr	r3, [pc, #44]	; (1000d9a4 <gapc_security_cmd_handler+0x34>)
1000d976:	701a      	strb	r2, [r3, #0]
1000d978:	3a0c      	subs	r2, #12
1000d97a:	705a      	strb	r2, [r3, #1]
1000d97c:	709a      	strb	r2, [r3, #2]
1000d97e:	4a0a      	ldr	r2, [pc, #40]	; (1000d9a8 <gapc_security_cmd_handler+0x38>)
1000d980:	70d8      	strb	r0, [r3, #3]
1000d982:	8810      	ldrh	r0, [r2, #0]
1000d984:	8812      	ldrh	r2, [r2, #0]
1000d986:	7118      	strb	r0, [r3, #4]
1000d988:	0a12      	lsrs	r2, r2, #8
1000d98a:	715a      	strb	r2, [r3, #5]
1000d98c:	220c      	movs	r2, #12
1000d98e:	721a      	strb	r2, [r3, #8]
1000d990:	3a0a      	subs	r2, #10
1000d992:	719a      	strb	r2, [r3, #6]
1000d994:	2200      	movs	r2, #0
1000d996:	7259      	strb	r1, [r3, #9]
1000d998:	71da      	strb	r2, [r3, #7]
1000d99a:	1c18      	adds	r0, r3, #0
1000d99c:	210a      	movs	r1, #10
1000d99e:	4b03      	ldr	r3, [pc, #12]	; (1000d9ac <gapc_security_cmd_handler+0x3c>)
1000d9a0:	4798      	blx	r3
1000d9a2:	bd08      	pop	{r3, pc}
1000d9a4:	1001505c 	.word	0x1001505c
1000d9a8:	10014cec 	.word	0x10014cec
1000d9ac:	1000d165 	.word	0x1000d165

1000d9b0 <gapc_encrypt_cmd_handler>:
1000d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d9b2:	2500      	movs	r5, #0
1000d9b4:	b089      	sub	sp, #36	; 0x24
1000d9b6:	9306      	str	r3, [sp, #24]
1000d9b8:	ab0e      	add	r3, sp, #56	; 0x38
1000d9ba:	781b      	ldrb	r3, [r3, #0]
1000d9bc:	1c17      	adds	r7, r2, #0
1000d9be:	9307      	str	r3, [sp, #28]
1000d9c0:	ab0f      	add	r3, sp, #60	; 0x3c
1000d9c2:	781b      	ldrb	r3, [r3, #0]
1000d9c4:	4a19      	ldr	r2, [pc, #100]	; (1000da2c <gapc_encrypt_cmd_handler+0x7c>)
1000d9c6:	1c06      	adds	r6, r0, #0
1000d9c8:	9105      	str	r1, [sp, #20]
1000d9ca:	9300      	str	r3, [sp, #0]
1000d9cc:	9002      	str	r0, [sp, #8]
1000d9ce:	1c29      	adds	r1, r5, #0
1000d9d0:	1c2b      	adds	r3, r5, #0
1000d9d2:	9501      	str	r5, [sp, #4]
1000d9d4:	1c10      	adds	r0, r2, #0
1000d9d6:	4c16      	ldr	r4, [pc, #88]	; (1000da30 <gapc_encrypt_cmd_handler+0x80>)
1000d9d8:	47a0      	blx	r4
1000d9da:	2316      	movs	r3, #22
1000d9dc:	4c15      	ldr	r4, [pc, #84]	; (1000da34 <gapc_encrypt_cmd_handler+0x84>)
1000d9de:	9905      	ldr	r1, [sp, #20]
1000d9e0:	7023      	strb	r3, [r4, #0]
1000d9e2:	3b08      	subs	r3, #8
1000d9e4:	7063      	strb	r3, [r4, #1]
1000d9e6:	70a3      	strb	r3, [r4, #2]
1000d9e8:	4b13      	ldr	r3, [pc, #76]	; (1000da38 <gapc_encrypt_cmd_handler+0x88>)
1000d9ea:	70e6      	strb	r6, [r4, #3]
1000d9ec:	881a      	ldrh	r2, [r3, #0]
1000d9ee:	881b      	ldrh	r3, [r3, #0]
1000d9f0:	7122      	strb	r2, [r4, #4]
1000d9f2:	0a1b      	lsrs	r3, r3, #8
1000d9f4:	7163      	strb	r3, [r4, #5]
1000d9f6:	230b      	movs	r3, #11
1000d9f8:	4e10      	ldr	r6, [pc, #64]	; (1000da3c <gapc_encrypt_cmd_handler+0x8c>)
1000d9fa:	2210      	movs	r2, #16
1000d9fc:	4810      	ldr	r0, [pc, #64]	; (1000da40 <gapc_encrypt_cmd_handler+0x90>)
1000d9fe:	7223      	strb	r3, [r4, #8]
1000da00:	7265      	strb	r5, [r4, #9]
1000da02:	47b0      	blx	r6
1000da04:	0a3b      	lsrs	r3, r7, #8
1000da06:	9906      	ldr	r1, [sp, #24]
1000da08:	2208      	movs	r2, #8
1000da0a:	480e      	ldr	r0, [pc, #56]	; (1000da44 <gapc_encrypt_cmd_handler+0x94>)
1000da0c:	76e3      	strb	r3, [r4, #27]
1000da0e:	76a7      	strb	r7, [r4, #26]
1000da10:	47b0      	blx	r6
1000da12:	466a      	mov	r2, sp
1000da14:	7f12      	ldrb	r2, [r2, #28]
1000da16:	1d63      	adds	r3, r4, #5
1000da18:	77da      	strb	r2, [r3, #31]
1000da1a:	231d      	movs	r3, #29
1000da1c:	1c20      	adds	r0, r4, #0
1000da1e:	71a3      	strb	r3, [r4, #6]
1000da20:	2125      	movs	r1, #37	; 0x25
1000da22:	4b09      	ldr	r3, [pc, #36]	; (1000da48 <gapc_encrypt_cmd_handler+0x98>)
1000da24:	71e5      	strb	r5, [r4, #7]
1000da26:	4798      	blx	r3
1000da28:	b009      	add	sp, #36	; 0x24
1000da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da2c:	10013ffc 	.word	0x10013ffc
1000da30:	1000d469 	.word	0x1000d469
1000da34:	1001505c 	.word	0x1001505c
1000da38:	10014cec 	.word	0x10014cec
1000da3c:	10010517 	.word	0x10010517
1000da40:	10015066 	.word	0x10015066
1000da44:	10015078 	.word	0x10015078
1000da48:	1000d165 	.word	0x1000d165

1000da4c <gapc_encrypt_req_ind>:
1000da4c:	b508      	push	{r3, lr}
1000da4e:	0a00      	lsrs	r0, r0, #8
1000da50:	8010      	strh	r0, [r2, #0]
1000da52:	784b      	ldrb	r3, [r1, #1]
1000da54:	7808      	ldrb	r0, [r1, #0]
1000da56:	021b      	lsls	r3, r3, #8
1000da58:	4303      	orrs	r3, r0
1000da5a:	8053      	strh	r3, [r2, #2]
1000da5c:	1d10      	adds	r0, r2, #4
1000da5e:	3102      	adds	r1, #2
1000da60:	2208      	movs	r2, #8
1000da62:	4b01      	ldr	r3, [pc, #4]	; (1000da68 <gapc_encrypt_req_ind+0x1c>)
1000da64:	4798      	blx	r3
1000da66:	bd08      	pop	{r3, pc}
1000da68:	10010517 	.word	0x10010517

1000da6c <gapc_encrypt_cfm_handler>:
1000da6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da6e:	2500      	movs	r5, #0
1000da70:	b087      	sub	sp, #28
1000da72:	9304      	str	r3, [sp, #16]
1000da74:	ab0c      	add	r3, sp, #48	; 0x30
1000da76:	781b      	ldrb	r3, [r3, #0]
1000da78:	1c17      	adds	r7, r2, #0
1000da7a:	4a15      	ldr	r2, [pc, #84]	; (1000dad0 <gapc_encrypt_cfm_handler+0x64>)
1000da7c:	1c06      	adds	r6, r0, #0
1000da7e:	9305      	str	r3, [sp, #20]
1000da80:	9100      	str	r1, [sp, #0]
1000da82:	9002      	str	r0, [sp, #8]
1000da84:	1c29      	adds	r1, r5, #0
1000da86:	1c2b      	adds	r3, r5, #0
1000da88:	9501      	str	r5, [sp, #4]
1000da8a:	1c10      	adds	r0, r2, #0
1000da8c:	4c11      	ldr	r4, [pc, #68]	; (1000dad4 <gapc_encrypt_cfm_handler+0x68>)
1000da8e:	47a0      	blx	r4
1000da90:	2318      	movs	r3, #24
1000da92:	4c11      	ldr	r4, [pc, #68]	; (1000dad8 <gapc_encrypt_cfm_handler+0x6c>)
1000da94:	9904      	ldr	r1, [sp, #16]
1000da96:	7023      	strb	r3, [r4, #0]
1000da98:	3b0a      	subs	r3, #10
1000da9a:	7063      	strb	r3, [r4, #1]
1000da9c:	70a3      	strb	r3, [r4, #2]
1000da9e:	4b0f      	ldr	r3, [pc, #60]	; (1000dadc <gapc_encrypt_cfm_handler+0x70>)
1000daa0:	480f      	ldr	r0, [pc, #60]	; (1000dae0 <gapc_encrypt_cfm_handler+0x74>)
1000daa2:	881a      	ldrh	r2, [r3, #0]
1000daa4:	881b      	ldrh	r3, [r3, #0]
1000daa6:	7122      	strb	r2, [r4, #4]
1000daa8:	0a1b      	lsrs	r3, r3, #8
1000daaa:	7163      	strb	r3, [r4, #5]
1000daac:	2210      	movs	r2, #16
1000daae:	4b0d      	ldr	r3, [pc, #52]	; (1000dae4 <gapc_encrypt_cfm_handler+0x78>)
1000dab0:	70e6      	strb	r6, [r4, #3]
1000dab2:	7227      	strb	r7, [r4, #8]
1000dab4:	4798      	blx	r3
1000dab6:	466b      	mov	r3, sp
1000dab8:	7d1b      	ldrb	r3, [r3, #20]
1000daba:	1c20      	adds	r0, r4, #0
1000dabc:	7663      	strb	r3, [r4, #25]
1000dabe:	2312      	movs	r3, #18
1000dac0:	211a      	movs	r1, #26
1000dac2:	71a3      	strb	r3, [r4, #6]
1000dac4:	4b08      	ldr	r3, [pc, #32]	; (1000dae8 <gapc_encrypt_cfm_handler+0x7c>)
1000dac6:	71e5      	strb	r5, [r4, #7]
1000dac8:	4798      	blx	r3
1000daca:	b007      	add	sp, #28
1000dacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dace:	46c0      	nop			; (mov r8, r8)
1000dad0:	1001400c 	.word	0x1001400c
1000dad4:	1000d469 	.word	0x1000d469
1000dad8:	1001505c 	.word	0x1001505c
1000dadc:	10014cec 	.word	0x10014cec
1000dae0:	10015065 	.word	0x10015065
1000dae4:	10010517 	.word	0x10010517
1000dae8:	1000d165 	.word	0x1000d165

1000daec <gapc_encrypt_ind>:
1000daec:	780b      	ldrb	r3, [r1, #0]
1000daee:	0a00      	lsrs	r0, r0, #8
1000daf0:	70d3      	strb	r3, [r2, #3]
1000daf2:	2300      	movs	r3, #0
1000daf4:	8010      	strh	r0, [r2, #0]
1000daf6:	7093      	strb	r3, [r2, #2]
1000daf8:	4770      	bx	lr
	...

1000dafc <gapc_param_update_cfm_handler>:
1000dafc:	b538      	push	{r3, r4, r5, lr}
1000dafe:	2410      	movs	r4, #16
1000db00:	1c05      	adds	r5, r0, #0
1000db02:	480e      	ldr	r0, [pc, #56]	; (1000db3c <gapc_param_update_cfm_handler+0x40>)
1000db04:	7004      	strb	r4, [r0, #0]
1000db06:	3c02      	subs	r4, #2
1000db08:	7044      	strb	r4, [r0, #1]
1000db0a:	7084      	strb	r4, [r0, #2]
1000db0c:	4c0c      	ldr	r4, [pc, #48]	; (1000db40 <gapc_param_update_cfm_handler+0x44>)
1000db0e:	70c5      	strb	r5, [r0, #3]
1000db10:	8825      	ldrh	r5, [r4, #0]
1000db12:	8824      	ldrh	r4, [r4, #0]
1000db14:	72c3      	strb	r3, [r0, #11]
1000db16:	0a1b      	lsrs	r3, r3, #8
1000db18:	0a24      	lsrs	r4, r4, #8
1000db1a:	7303      	strb	r3, [r0, #12]
1000db1c:	2305      	movs	r3, #5
1000db1e:	7144      	strb	r4, [r0, #5]
1000db20:	2400      	movs	r4, #0
1000db22:	7201      	strb	r1, [r0, #8]
1000db24:	7242      	strb	r2, [r0, #9]
1000db26:	7183      	strb	r3, [r0, #6]
1000db28:	0a12      	lsrs	r2, r2, #8
1000db2a:	210d      	movs	r1, #13
1000db2c:	4b05      	ldr	r3, [pc, #20]	; (1000db44 <gapc_param_update_cfm_handler+0x48>)
1000db2e:	7105      	strb	r5, [r0, #4]
1000db30:	7282      	strb	r2, [r0, #10]
1000db32:	71c4      	strb	r4, [r0, #7]
1000db34:	4798      	blx	r3
1000db36:	1c20      	adds	r0, r4, #0
1000db38:	bd38      	pop	{r3, r4, r5, pc}
1000db3a:	46c0      	nop			; (mov r8, r8)
1000db3c:	1001505c 	.word	0x1001505c
1000db40:	10014cec 	.word	0x10014cec
1000db44:	1000d165 	.word	0x1000d165

1000db48 <gapc_param_updated_ind>:
1000db48:	2300      	movs	r3, #0
1000db4a:	0a00      	lsrs	r0, r0, #8
1000db4c:	8010      	strh	r0, [r2, #0]
1000db4e:	7093      	strb	r3, [r2, #2]
1000db50:	784b      	ldrb	r3, [r1, #1]
1000db52:	7808      	ldrb	r0, [r1, #0]
1000db54:	021b      	lsls	r3, r3, #8
1000db56:	4303      	orrs	r3, r0
1000db58:	8093      	strh	r3, [r2, #4]
1000db5a:	78cb      	ldrb	r3, [r1, #3]
1000db5c:	7888      	ldrb	r0, [r1, #2]
1000db5e:	021b      	lsls	r3, r3, #8
1000db60:	4303      	orrs	r3, r0
1000db62:	80d3      	strh	r3, [r2, #6]
1000db64:	794b      	ldrb	r3, [r1, #5]
1000db66:	7909      	ldrb	r1, [r1, #4]
1000db68:	021b      	lsls	r3, r3, #8
1000db6a:	430b      	orrs	r3, r1
1000db6c:	2007      	movs	r0, #7
1000db6e:	8113      	strh	r3, [r2, #8]
1000db70:	4770      	bx	lr

1000db72 <gapc_param_updated_req_ind>:
1000db72:	0a00      	lsrs	r0, r0, #8
1000db74:	8010      	strh	r0, [r2, #0]
1000db76:	784b      	ldrb	r3, [r1, #1]
1000db78:	7808      	ldrb	r0, [r1, #0]
1000db7a:	021b      	lsls	r3, r3, #8
1000db7c:	4303      	orrs	r3, r0
1000db7e:	8053      	strh	r3, [r2, #2]
1000db80:	78cb      	ldrb	r3, [r1, #3]
1000db82:	7888      	ldrb	r0, [r1, #2]
1000db84:	021b      	lsls	r3, r3, #8
1000db86:	4303      	orrs	r3, r0
1000db88:	8093      	strh	r3, [r2, #4]
1000db8a:	794b      	ldrb	r3, [r1, #5]
1000db8c:	7908      	ldrb	r0, [r1, #4]
1000db8e:	021b      	lsls	r3, r3, #8
1000db90:	4303      	orrs	r3, r0
1000db92:	80d3      	strh	r3, [r2, #6]
1000db94:	79cb      	ldrb	r3, [r1, #7]
1000db96:	7989      	ldrb	r1, [r1, #6]
1000db98:	021b      	lsls	r3, r3, #8
1000db9a:	430b      	orrs	r3, r1
1000db9c:	2008      	movs	r0, #8
1000db9e:	8113      	strh	r3, [r2, #8]
1000dba0:	4770      	bx	lr
	...

1000dba4 <gapc_dev_info_req_ind_handler>:
1000dba4:	b508      	push	{r3, lr}
1000dba6:	1c0b      	adds	r3, r1, #0
1000dba8:	0a01      	lsrs	r1, r0, #8
1000dbaa:	8011      	strh	r1, [r2, #0]
1000dbac:	7818      	ldrb	r0, [r3, #0]
1000dbae:	7090      	strb	r0, [r2, #2]
1000dbb0:	2800      	cmp	r0, #0
1000dbb2:	d104      	bne.n	1000dbbe <gapc_dev_info_req_ind_handler+0x1a>
1000dbb4:	4b03      	ldr	r3, [pc, #12]	; (1000dbc4 <gapc_dev_info_req_ind_handler+0x20>)
1000dbb6:	33aa      	adds	r3, #170	; 0xaa
1000dbb8:	881b      	ldrh	r3, [r3, #0]
1000dbba:	2b00      	cmp	r3, #0
1000dbbc:	d001      	beq.n	1000dbc2 <gapc_dev_info_req_ind_handler+0x1e>
1000dbbe:	4b02      	ldr	r3, [pc, #8]	; (1000dbc8 <gapc_dev_info_req_ind_handler+0x24>)
1000dbc0:	4798      	blx	r3
1000dbc2:	bd08      	pop	{r3, pc}
1000dbc4:	10014d7e 	.word	0x10014d7e
1000dbc8:	1000d275 	.word	0x1000d275

1000dbcc <gapc_sec_req_ind>:
1000dbcc:	0a00      	lsrs	r0, r0, #8
1000dbce:	8010      	strh	r0, [r2, #0]
1000dbd0:	7809      	ldrb	r1, [r1, #0]
1000dbd2:	2301      	movs	r3, #1
1000dbd4:	1c08      	adds	r0, r1, #0
1000dbd6:	0889      	lsrs	r1, r1, #2
1000dbd8:	4018      	ands	r0, r3
1000dbda:	400b      	ands	r3, r1
1000dbdc:	70d0      	strb	r0, [r2, #3]
1000dbde:	7113      	strb	r3, [r2, #4]
1000dbe0:	4770      	bx	lr

1000dbe2 <gapc_sign_counter_ind_handler>:
1000dbe2:	0a00      	lsrs	r0, r0, #8
1000dbe4:	8010      	strh	r0, [r2, #0]
1000dbe6:	784b      	ldrb	r3, [r1, #1]
1000dbe8:	0218      	lsls	r0, r3, #8
1000dbea:	788b      	ldrb	r3, [r1, #2]
1000dbec:	041b      	lsls	r3, r3, #16
1000dbee:	4303      	orrs	r3, r0
1000dbf0:	7808      	ldrb	r0, [r1, #0]
1000dbf2:	4303      	orrs	r3, r0
1000dbf4:	78c8      	ldrb	r0, [r1, #3]
1000dbf6:	0600      	lsls	r0, r0, #24
1000dbf8:	4303      	orrs	r3, r0
1000dbfa:	6053      	str	r3, [r2, #4]
1000dbfc:	794b      	ldrb	r3, [r1, #5]
1000dbfe:	0218      	lsls	r0, r3, #8
1000dc00:	798b      	ldrb	r3, [r1, #6]
1000dc02:	041b      	lsls	r3, r3, #16
1000dc04:	4303      	orrs	r3, r0
1000dc06:	7908      	ldrb	r0, [r1, #4]
1000dc08:	79c9      	ldrb	r1, [r1, #7]
1000dc0a:	4303      	orrs	r3, r0
1000dc0c:	0609      	lsls	r1, r1, #24
1000dc0e:	430b      	orrs	r3, r1
1000dc10:	2000      	movs	r0, #0
1000dc12:	6093      	str	r3, [r2, #8]
1000dc14:	4770      	bx	lr
	...

1000dc18 <gapc_peer_att_info_ind_handler>:
1000dc18:	b510      	push	{r4, lr}
1000dc1a:	0a00      	lsrs	r0, r0, #8
1000dc1c:	8010      	strh	r0, [r2, #0]
1000dc1e:	7808      	ldrb	r0, [r1, #0]
1000dc20:	7090      	strb	r0, [r2, #2]
1000dc22:	788b      	ldrb	r3, [r1, #2]
1000dc24:	784c      	ldrb	r4, [r1, #1]
1000dc26:	021b      	lsls	r3, r3, #8
1000dc28:	4323      	orrs	r3, r4
1000dc2a:	8093      	strh	r3, [r2, #4]
1000dc2c:	2801      	cmp	r0, #1
1000dc2e:	d027      	beq.n	1000dc80 <gapc_peer_att_info_ind_handler+0x68>
1000dc30:	2800      	cmp	r0, #0
1000dc32:	d017      	beq.n	1000dc64 <gapc_peer_att_info_ind_handler+0x4c>
1000dc34:	2802      	cmp	r0, #2
1000dc36:	d12a      	bne.n	1000dc8e <gapc_peer_att_info_ind_handler+0x76>
1000dc38:	790b      	ldrb	r3, [r1, #4]
1000dc3a:	78c8      	ldrb	r0, [r1, #3]
1000dc3c:	021b      	lsls	r3, r3, #8
1000dc3e:	4303      	orrs	r3, r0
1000dc40:	8113      	strh	r3, [r2, #8]
1000dc42:	798b      	ldrb	r3, [r1, #6]
1000dc44:	7948      	ldrb	r0, [r1, #5]
1000dc46:	021b      	lsls	r3, r3, #8
1000dc48:	4303      	orrs	r3, r0
1000dc4a:	80d3      	strh	r3, [r2, #6]
1000dc4c:	7a0b      	ldrb	r3, [r1, #8]
1000dc4e:	79c8      	ldrb	r0, [r1, #7]
1000dc50:	021b      	lsls	r3, r3, #8
1000dc52:	4303      	orrs	r3, r0
1000dc54:	8193      	strh	r3, [r2, #12]
1000dc56:	7a8b      	ldrb	r3, [r1, #10]
1000dc58:	7a49      	ldrb	r1, [r1, #9]
1000dc5a:	021b      	lsls	r3, r3, #8
1000dc5c:	430b      	orrs	r3, r1
1000dc5e:	8153      	strh	r3, [r2, #10]
1000dc60:	2306      	movs	r3, #6
1000dc62:	e013      	b.n	1000dc8c <gapc_peer_att_info_ind_handler+0x74>
1000dc64:	1c14      	adds	r4, r2, #0
1000dc66:	1c20      	adds	r0, r4, #0
1000dc68:	790a      	ldrb	r2, [r1, #4]
1000dc6a:	78cb      	ldrb	r3, [r1, #3]
1000dc6c:	0212      	lsls	r2, r2, #8
1000dc6e:	431a      	orrs	r2, r3
1000dc70:	80e2      	strh	r2, [r4, #6]
1000dc72:	4b07      	ldr	r3, [pc, #28]	; (1000dc90 <gapc_peer_att_info_ind_handler+0x78>)
1000dc74:	3008      	adds	r0, #8
1000dc76:	3105      	adds	r1, #5
1000dc78:	4798      	blx	r3
1000dc7a:	2302      	movs	r3, #2
1000dc7c:	70a3      	strb	r3, [r4, #2]
1000dc7e:	e006      	b.n	1000dc8e <gapc_peer_att_info_ind_handler+0x76>
1000dc80:	790b      	ldrb	r3, [r1, #4]
1000dc82:	78c9      	ldrb	r1, [r1, #3]
1000dc84:	021b      	lsls	r3, r3, #8
1000dc86:	430b      	orrs	r3, r1
1000dc88:	80d3      	strh	r3, [r2, #6]
1000dc8a:	2305      	movs	r3, #5
1000dc8c:	7093      	strb	r3, [r2, #2]
1000dc8e:	bd10      	pop	{r4, pc}
1000dc90:	10010517 	.word	0x10010517

1000dc94 <gapc_con_channel_map_ind_handler>:
1000dc94:	b508      	push	{r3, lr}
1000dc96:	2300      	movs	r3, #0
1000dc98:	0a00      	lsrs	r0, r0, #8
1000dc9a:	7013      	strb	r3, [r2, #0]
1000dc9c:	8050      	strh	r0, [r2, #2]
1000dc9e:	4b02      	ldr	r3, [pc, #8]	; (1000dca8 <gapc_con_channel_map_ind_handler+0x14>)
1000dca0:	1d10      	adds	r0, r2, #4
1000dca2:	2205      	movs	r2, #5
1000dca4:	4798      	blx	r3
1000dca6:	bd08      	pop	{r3, pc}
1000dca8:	10010517 	.word	0x10010517

1000dcac <gapc_lecb_connected>:
1000dcac:	7843      	ldrb	r3, [r0, #1]
1000dcae:	7802      	ldrb	r2, [r0, #0]
1000dcb0:	021b      	lsls	r3, r3, #8
1000dcb2:	4313      	orrs	r3, r2
1000dcb4:	800b      	strh	r3, [r1, #0]
1000dcb6:	78c3      	ldrb	r3, [r0, #3]
1000dcb8:	7882      	ldrb	r2, [r0, #2]
1000dcba:	021b      	lsls	r3, r3, #8
1000dcbc:	4313      	orrs	r3, r2
1000dcbe:	804b      	strh	r3, [r1, #2]
1000dcc0:	7943      	ldrb	r3, [r0, #5]
1000dcc2:	7902      	ldrb	r2, [r0, #4]
1000dcc4:	021b      	lsls	r3, r3, #8
1000dcc6:	4313      	orrs	r3, r2
1000dcc8:	808b      	strh	r3, [r1, #4]
1000dcca:	79c3      	ldrb	r3, [r0, #7]
1000dccc:	7982      	ldrb	r2, [r0, #6]
1000dcce:	021b      	lsls	r3, r3, #8
1000dcd0:	4313      	orrs	r3, r2
1000dcd2:	80cb      	strh	r3, [r1, #6]
1000dcd4:	2300      	movs	r3, #0
1000dcd6:	720b      	strb	r3, [r1, #8]
1000dcd8:	4770      	bx	lr

1000dcda <gapc_lecb_disconnected>:
1000dcda:	7843      	ldrb	r3, [r0, #1]
1000dcdc:	7802      	ldrb	r2, [r0, #0]
1000dcde:	021b      	lsls	r3, r3, #8
1000dce0:	4313      	orrs	r3, r2
1000dce2:	800b      	strh	r3, [r1, #0]
1000dce4:	78c3      	ldrb	r3, [r0, #3]
1000dce6:	7882      	ldrb	r2, [r0, #2]
1000dce8:	021b      	lsls	r3, r3, #8
1000dcea:	4313      	orrs	r3, r2
1000dcec:	804b      	strh	r3, [r1, #2]
1000dcee:	4770      	bx	lr

1000dcf0 <gapc_lecb_connect_req_ind>:
1000dcf0:	7843      	ldrb	r3, [r0, #1]
1000dcf2:	7802      	ldrb	r2, [r0, #0]
1000dcf4:	021b      	lsls	r3, r3, #8
1000dcf6:	4313      	orrs	r3, r2
1000dcf8:	800b      	strh	r3, [r1, #0]
1000dcfa:	78c3      	ldrb	r3, [r0, #3]
1000dcfc:	7882      	ldrb	r2, [r0, #2]
1000dcfe:	021b      	lsls	r3, r3, #8
1000dd00:	4313      	orrs	r3, r2
1000dd02:	804b      	strh	r3, [r1, #2]
1000dd04:	7943      	ldrb	r3, [r0, #5]
1000dd06:	7902      	ldrb	r2, [r0, #4]
1000dd08:	021b      	lsls	r3, r3, #8
1000dd0a:	4313      	orrs	r3, r2
1000dd0c:	808b      	strh	r3, [r1, #4]
1000dd0e:	79c3      	ldrb	r3, [r0, #7]
1000dd10:	7982      	ldrb	r2, [r0, #6]
1000dd12:	021b      	lsls	r3, r3, #8
1000dd14:	4313      	orrs	r3, r2
1000dd16:	80cb      	strh	r3, [r1, #6]
1000dd18:	4770      	bx	lr

1000dd1a <gapc_lecb_add_credit_resp_handler>:
1000dd1a:	7843      	ldrb	r3, [r0, #1]
1000dd1c:	7802      	ldrb	r2, [r0, #0]
1000dd1e:	021b      	lsls	r3, r3, #8
1000dd20:	4313      	orrs	r3, r2
1000dd22:	800b      	strh	r3, [r1, #0]
1000dd24:	78c3      	ldrb	r3, [r0, #3]
1000dd26:	7882      	ldrb	r2, [r0, #2]
1000dd28:	021b      	lsls	r3, r3, #8
1000dd2a:	4313      	orrs	r3, r2
1000dd2c:	804b      	strh	r3, [r1, #2]
1000dd2e:	7943      	ldrb	r3, [r0, #5]
1000dd30:	7902      	ldrb	r2, [r0, #4]
1000dd32:	021b      	lsls	r3, r3, #8
1000dd34:	4313      	orrs	r3, r2
1000dd36:	808b      	strh	r3, [r1, #4]
1000dd38:	4770      	bx	lr
	...

1000dd3c <gapm_reset_req_handler>:
1000dd3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000dd3e:	466b      	mov	r3, sp
1000dd40:	4915      	ldr	r1, [pc, #84]	; (1000dd98 <gapm_reset_req_handler+0x5c>)
1000dd42:	4816      	ldr	r0, [pc, #88]	; (1000dd9c <gapm_reset_req_handler+0x60>)
1000dd44:	880c      	ldrh	r4, [r1, #0]
1000dd46:	8809      	ldrh	r1, [r1, #0]
1000dd48:	1ddd      	adds	r5, r3, #7
1000dd4a:	0a09      	lsrs	r1, r1, #8
1000dd4c:	2300      	movs	r3, #0
1000dd4e:	2202      	movs	r2, #2
1000dd50:	7141      	strb	r1, [r0, #5]
1000dd52:	26d0      	movs	r6, #208	; 0xd0
1000dd54:	2101      	movs	r1, #1
1000dd56:	7104      	strb	r4, [r0, #4]
1000dd58:	4c11      	ldr	r4, [pc, #68]	; (1000dda0 <gapm_reset_req_handler+0x64>)
1000dd5a:	702b      	strb	r3, [r5, #0]
1000dd5c:	7002      	strb	r2, [r0, #0]
1000dd5e:	70c3      	strb	r3, [r0, #3]
1000dd60:	320b      	adds	r2, #11
1000dd62:	7201      	strb	r1, [r0, #8]
1000dd64:	7181      	strb	r1, [r0, #6]
1000dd66:	71c3      	strb	r3, [r0, #7]
1000dd68:	3108      	adds	r1, #8
1000dd6a:	4b0e      	ldr	r3, [pc, #56]	; (1000dda4 <gapm_reset_req_handler+0x68>)
1000dd6c:	0136      	lsls	r6, r6, #4
1000dd6e:	7042      	strb	r2, [r0, #1]
1000dd70:	7082      	strb	r2, [r0, #2]
1000dd72:	80a2      	strh	r2, [r4, #4]
1000dd74:	8026      	strh	r6, [r4, #0]
1000dd76:	4798      	blx	r3
1000dd78:	1c28      	adds	r0, r5, #0
1000dd7a:	4b0b      	ldr	r3, [pc, #44]	; (1000dda8 <gapm_reset_req_handler+0x6c>)
1000dd7c:	4798      	blx	r3
1000dd7e:	782b      	ldrb	r3, [r5, #0]
1000dd80:	20e2      	movs	r0, #226	; 0xe2
1000dd82:	2b00      	cmp	r3, #0
1000dd84:	d106      	bne.n	1000dd94 <gapm_reset_req_handler+0x58>
1000dd86:	68a3      	ldr	r3, [r4, #8]
1000dd88:	20e2      	movs	r0, #226	; 0xe2
1000dd8a:	781a      	ldrb	r2, [r3, #0]
1000dd8c:	785b      	ldrb	r3, [r3, #1]
1000dd8e:	2a01      	cmp	r2, #1
1000dd90:	d100      	bne.n	1000dd94 <gapm_reset_req_handler+0x58>
1000dd92:	1c18      	adds	r0, r3, #0
1000dd94:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000dd96:	46c0      	nop			; (mov r8, r8)
1000dd98:	10014cec 	.word	0x10014cec
1000dd9c:	1001505c 	.word	0x1001505c
1000dda0:	10014ce0 	.word	0x10014ce0
1000dda4:	1000d165 	.word	0x1000d165
1000dda8:	1000d1c9 	.word	0x1000d1c9

1000ddac <gapm_set_dev_config_cmd_handler>:
1000ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ddae:	b089      	sub	sp, #36	; 0x24
1000ddb0:	9303      	str	r3, [sp, #12]
1000ddb2:	ab0e      	add	r3, sp, #56	; 0x38
1000ddb4:	781b      	ldrb	r3, [r3, #0]
1000ddb6:	4c37      	ldr	r4, [pc, #220]	; (1000de94 <gapm_set_dev_config_cmd_handler+0xe8>)
1000ddb8:	9304      	str	r3, [sp, #16]
1000ddba:	ab0f      	add	r3, sp, #60	; 0x3c
1000ddbc:	781b      	ldrb	r3, [r3, #0]
1000ddbe:	270d      	movs	r7, #13
1000ddc0:	9305      	str	r3, [sp, #20]
1000ddc2:	ab10      	add	r3, sp, #64	; 0x40
1000ddc4:	881b      	ldrh	r3, [r3, #0]
1000ddc6:	72a1      	strb	r1, [r4, #10]
1000ddc8:	9300      	str	r3, [sp, #0]
1000ddca:	ab11      	add	r3, sp, #68	; 0x44
1000ddcc:	881b      	ldrh	r3, [r3, #0]
1000ddce:	0a09      	lsrs	r1, r1, #8
1000ddd0:	9301      	str	r3, [sp, #4]
1000ddd2:	ab12      	add	r3, sp, #72	; 0x48
1000ddd4:	881b      	ldrh	r3, [r3, #0]
1000ddd6:	7260      	strb	r0, [r4, #9]
1000ddd8:	9302      	str	r3, [sp, #8]
1000ddda:	ab06      	add	r3, sp, #24
1000dddc:	1dde      	adds	r6, r3, #7
1000ddde:	2300      	movs	r3, #0
1000dde0:	7033      	strb	r3, [r6, #0]
1000dde2:	2304      	movs	r3, #4
1000dde4:	7023      	strb	r3, [r4, #0]
1000dde6:	2300      	movs	r3, #0
1000dde8:	70e3      	strb	r3, [r4, #3]
1000ddea:	4b2b      	ldr	r3, [pc, #172]	; (1000de98 <gapm_set_dev_config_cmd_handler+0xec>)
1000ddec:	72e1      	strb	r1, [r4, #11]
1000ddee:	881d      	ldrh	r5, [r3, #0]
1000ddf0:	881b      	ldrh	r3, [r3, #0]
1000ddf2:	1c11      	adds	r1, r2, #0
1000ddf4:	0a1b      	lsrs	r3, r3, #8
1000ddf6:	7163      	strb	r3, [r4, #5]
1000ddf8:	2303      	movs	r3, #3
1000ddfa:	7125      	strb	r5, [r4, #4]
1000ddfc:	2206      	movs	r2, #6
1000ddfe:	4d27      	ldr	r5, [pc, #156]	; (1000de9c <gapm_set_dev_config_cmd_handler+0xf0>)
1000de00:	4827      	ldr	r0, [pc, #156]	; (1000dea0 <gapm_set_dev_config_cmd_handler+0xf4>)
1000de02:	7223      	strb	r3, [r4, #8]
1000de04:	7067      	strb	r7, [r4, #1]
1000de06:	70a7      	strb	r7, [r4, #2]
1000de08:	47a8      	blx	r5
1000de0a:	9903      	ldr	r1, [sp, #12]
1000de0c:	2210      	movs	r2, #16
1000de0e:	4825      	ldr	r0, [pc, #148]	; (1000dea4 <gapm_set_dev_config_cmd_handler+0xf8>)
1000de10:	47a8      	blx	r5
1000de12:	466a      	mov	r2, sp
1000de14:	7c12      	ldrb	r2, [r2, #16]
1000de16:	1ce3      	adds	r3, r4, #3
1000de18:	77da      	strb	r2, [r3, #31]
1000de1a:	466a      	mov	r2, sp
1000de1c:	7d12      	ldrb	r2, [r2, #20]
1000de1e:	1d23      	adds	r3, r4, #4
1000de20:	77da      	strb	r2, [r3, #31]
1000de22:	466a      	mov	r2, sp
1000de24:	7812      	ldrb	r2, [r2, #0]
1000de26:	1d63      	adds	r3, r4, #5
1000de28:	77da      	strb	r2, [r3, #31]
1000de2a:	9b00      	ldr	r3, [sp, #0]
1000de2c:	1da2      	adds	r2, r4, #6
1000de2e:	0a1b      	lsrs	r3, r3, #8
1000de30:	77d3      	strb	r3, [r2, #31]
1000de32:	466a      	mov	r2, sp
1000de34:	7912      	ldrb	r2, [r2, #4]
1000de36:	1de3      	adds	r3, r4, #7
1000de38:	77da      	strb	r2, [r3, #31]
1000de3a:	1c22      	adds	r2, r4, #0
1000de3c:	9b01      	ldr	r3, [sp, #4]
1000de3e:	3208      	adds	r2, #8
1000de40:	0a1b      	lsrs	r3, r3, #8
1000de42:	77d3      	strb	r3, [r2, #31]
1000de44:	466a      	mov	r2, sp
1000de46:	1c23      	adds	r3, r4, #0
1000de48:	7a12      	ldrb	r2, [r2, #8]
1000de4a:	3328      	adds	r3, #40	; 0x28
1000de4c:	701a      	strb	r2, [r3, #0]
1000de4e:	1c22      	adds	r2, r4, #0
1000de50:	9b02      	ldr	r3, [sp, #8]
1000de52:	3229      	adds	r2, #41	; 0x29
1000de54:	0a1b      	lsrs	r3, r3, #8
1000de56:	7013      	strb	r3, [r2, #0]
1000de58:	23d0      	movs	r3, #208	; 0xd0
1000de5a:	4d13      	ldr	r5, [pc, #76]	; (1000dea8 <gapm_set_dev_config_cmd_handler+0xfc>)
1000de5c:	011b      	lsls	r3, r3, #4
1000de5e:	802b      	strh	r3, [r5, #0]
1000de60:	2322      	movs	r3, #34	; 0x22
1000de62:	71a3      	strb	r3, [r4, #6]
1000de64:	2300      	movs	r3, #0
1000de66:	212a      	movs	r1, #42	; 0x2a
1000de68:	71e3      	strb	r3, [r4, #7]
1000de6a:	1c20      	adds	r0, r4, #0
1000de6c:	4b0f      	ldr	r3, [pc, #60]	; (1000deac <gapm_set_dev_config_cmd_handler+0x100>)
1000de6e:	80af      	strh	r7, [r5, #4]
1000de70:	4798      	blx	r3
1000de72:	1c30      	adds	r0, r6, #0
1000de74:	4b0e      	ldr	r3, [pc, #56]	; (1000deb0 <gapm_set_dev_config_cmd_handler+0x104>)
1000de76:	4798      	blx	r3
1000de78:	7833      	ldrb	r3, [r6, #0]
1000de7a:	20e2      	movs	r0, #226	; 0xe2
1000de7c:	2b00      	cmp	r3, #0
1000de7e:	d106      	bne.n	1000de8e <gapm_set_dev_config_cmd_handler+0xe2>
1000de80:	68ab      	ldr	r3, [r5, #8]
1000de82:	20e2      	movs	r0, #226	; 0xe2
1000de84:	781a      	ldrb	r2, [r3, #0]
1000de86:	785b      	ldrb	r3, [r3, #1]
1000de88:	2a03      	cmp	r2, #3
1000de8a:	d100      	bne.n	1000de8e <gapm_set_dev_config_cmd_handler+0xe2>
1000de8c:	1c18      	adds	r0, r3, #0
1000de8e:	b009      	add	sp, #36	; 0x24
1000de90:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de92:	46c0      	nop			; (mov r8, r8)
1000de94:	1001505c 	.word	0x1001505c
1000de98:	10014cec 	.word	0x10014cec
1000de9c:	10010517 	.word	0x10010517
1000dea0:	10015068 	.word	0x10015068
1000dea4:	1001506e 	.word	0x1001506e
1000dea8:	10014ce0 	.word	0x10014ce0
1000deac:	1000d165 	.word	0x1000d165
1000deb0:	1000d1c9 	.word	0x1000d1c9

1000deb4 <gapm_get_dev_config_cmd_handler>:
1000deb4:	4684      	mov	ip, r0
1000deb6:	4663      	mov	r3, ip
1000deb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000deba:	b085      	sub	sp, #20
1000debc:	9100      	str	r1, [sp, #0]
1000debe:	20cf      	movs	r0, #207	; 0xcf
1000dec0:	2b01      	cmp	r3, #1
1000dec2:	d854      	bhi.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000dec4:	2900      	cmp	r1, #0
1000dec6:	d052      	beq.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000dec8:	2200      	movs	r2, #0
1000deca:	492a      	ldr	r1, [pc, #168]	; (1000df74 <gapm_get_dev_config_cmd_handler+0xc0>)
1000decc:	ab02      	add	r3, sp, #8
1000dece:	880c      	ldrh	r4, [r1, #0]
1000ded0:	8809      	ldrh	r1, [r1, #0]
1000ded2:	1d9f      	adds	r7, r3, #6
1000ded4:	719a      	strb	r2, [r3, #6]
1000ded6:	4b28      	ldr	r3, [pc, #160]	; (1000df78 <gapm_get_dev_config_cmd_handler+0xc4>)
1000ded8:	0a09      	lsrs	r1, r1, #8
1000deda:	250d      	movs	r5, #13
1000dedc:	2606      	movs	r6, #6
1000dede:	7159      	strb	r1, [r3, #5]
1000dee0:	4661      	mov	r1, ip
1000dee2:	701e      	strb	r6, [r3, #0]
1000dee4:	705d      	strb	r5, [r3, #1]
1000dee6:	709d      	strb	r5, [r3, #2]
1000dee8:	70da      	strb	r2, [r3, #3]
1000deea:	711c      	strb	r4, [r3, #4]
1000deec:	2901      	cmp	r1, #1
1000deee:	d13e      	bne.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000def0:	21d0      	movs	r1, #208	; 0xd0
1000def2:	4c22      	ldr	r4, [pc, #136]	; (1000df7c <gapm_get_dev_config_cmd_handler+0xc8>)
1000def4:	0109      	lsls	r1, r1, #4
1000def6:	8061      	strh	r1, [r4, #2]
1000def8:	4921      	ldr	r1, [pc, #132]	; (1000df80 <gapm_get_dev_config_cmd_handler+0xcc>)
1000defa:	71da      	strb	r2, [r3, #7]
1000defc:	8021      	strh	r1, [r4, #0]
1000defe:	4661      	mov	r1, ip
1000df00:	721e      	strb	r6, [r3, #8]
1000df02:	7199      	strb	r1, [r3, #6]
1000df04:	1c18      	adds	r0, r3, #0
1000df06:	2109      	movs	r1, #9
1000df08:	4b1e      	ldr	r3, [pc, #120]	; (1000df84 <gapm_get_dev_config_cmd_handler+0xd0>)
1000df0a:	80a5      	strh	r5, [r4, #4]
1000df0c:	4798      	blx	r3
1000df0e:	1c38      	adds	r0, r7, #0
1000df10:	4b1d      	ldr	r3, [pc, #116]	; (1000df88 <gapm_get_dev_config_cmd_handler+0xd4>)
1000df12:	4798      	blx	r3
1000df14:	783b      	ldrb	r3, [r7, #0]
1000df16:	20e2      	movs	r0, #226	; 0xe2
1000df18:	9301      	str	r3, [sp, #4]
1000df1a:	2b00      	cmp	r3, #0
1000df1c:	d127      	bne.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000df1e:	8821      	ldrh	r1, [r4, #0]
1000df20:	4a1a      	ldr	r2, [pc, #104]	; (1000df8c <gapm_get_dev_config_cmd_handler+0xd8>)
1000df22:	68a7      	ldr	r7, [r4, #8]
1000df24:	3b01      	subs	r3, #1
1000df26:	4291      	cmp	r1, r2
1000df28:	d001      	beq.n	1000df2e <gapm_get_dev_config_cmd_handler+0x7a>
1000df2a:	8023      	strh	r3, [r4, #0]
1000df2c:	e01a      	b.n	1000df64 <gapm_get_dev_config_cmd_handler+0xb0>
1000df2e:	8063      	strh	r3, [r4, #2]
1000df30:	9b00      	ldr	r3, [sp, #0]
1000df32:	1c39      	adds	r1, r7, #0
1000df34:	1c58      	adds	r0, r3, #1
1000df36:	1c32      	adds	r2, r6, #0
1000df38:	4b15      	ldr	r3, [pc, #84]	; (1000df90 <gapm_get_dev_config_cmd_handler+0xdc>)
1000df3a:	4798      	blx	r3
1000df3c:	79bb      	ldrb	r3, [r7, #6]
1000df3e:	9a00      	ldr	r2, [sp, #0]
1000df40:	7013      	strb	r3, [r2, #0]
1000df42:	23d0      	movs	r3, #208	; 0xd0
1000df44:	011b      	lsls	r3, r3, #4
1000df46:	8023      	strh	r3, [r4, #0]
1000df48:	ab02      	add	r3, sp, #8
1000df4a:	80a5      	strh	r5, [r4, #4]
1000df4c:	1ddd      	adds	r5, r3, #7
1000df4e:	466b      	mov	r3, sp
1000df50:	791b      	ldrb	r3, [r3, #4]
1000df52:	1c28      	adds	r0, r5, #0
1000df54:	702b      	strb	r3, [r5, #0]
1000df56:	4b0c      	ldr	r3, [pc, #48]	; (1000df88 <gapm_get_dev_config_cmd_handler+0xd4>)
1000df58:	4798      	blx	r3
1000df5a:	782b      	ldrb	r3, [r5, #0]
1000df5c:	20d0      	movs	r0, #208	; 0xd0
1000df5e:	2b00      	cmp	r3, #0
1000df60:	d105      	bne.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000df62:	68a7      	ldr	r7, [r4, #8]
1000df64:	783b      	ldrb	r3, [r7, #0]
1000df66:	7878      	ldrb	r0, [r7, #1]
1000df68:	2b06      	cmp	r3, #6
1000df6a:	d000      	beq.n	1000df6e <gapm_get_dev_config_cmd_handler+0xba>
1000df6c:	20e2      	movs	r0, #226	; 0xe2
1000df6e:	b005      	add	sp, #20
1000df70:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df72:	46c0      	nop			; (mov r8, r8)
1000df74:	10014cec 	.word	0x10014cec
1000df78:	1001505c 	.word	0x1001505c
1000df7c:	10014ce0 	.word	0x10014ce0
1000df80:	00000d08 	.word	0x00000d08
1000df84:	1000d165 	.word	0x1000d165
1000df88:	1000d1c9 	.word	0x1000d1c9
1000df8c:	0000ffff 	.word	0x0000ffff
1000df90:	10010517 	.word	0x10010517

1000df94 <gapm_cancel_cmd_handler>:
1000df94:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000df96:	4916      	ldr	r1, [pc, #88]	; (1000dff0 <gapm_cancel_cmd_handler+0x5c>)
1000df98:	4816      	ldr	r0, [pc, #88]	; (1000dff4 <gapm_cancel_cmd_handler+0x60>)
1000df9a:	880c      	ldrh	r4, [r1, #0]
1000df9c:	8809      	ldrh	r1, [r1, #0]
1000df9e:	466b      	mov	r3, sp
1000dfa0:	0a09      	lsrs	r1, r1, #8
1000dfa2:	7141      	strb	r1, [r0, #5]
1000dfa4:	2102      	movs	r1, #2
1000dfa6:	2203      	movs	r2, #3
1000dfa8:	7201      	strb	r1, [r0, #8]
1000dfaa:	21d0      	movs	r1, #208	; 0xd0
1000dfac:	1ddd      	adds	r5, r3, #7
1000dfae:	2300      	movs	r3, #0
1000dfb0:	7104      	strb	r4, [r0, #4]
1000dfb2:	4c11      	ldr	r4, [pc, #68]	; (1000dff8 <gapm_cancel_cmd_handler+0x64>)
1000dfb4:	7002      	strb	r2, [r0, #0]
1000dfb6:	0109      	lsls	r1, r1, #4
1000dfb8:	320a      	adds	r2, #10
1000dfba:	702b      	strb	r3, [r5, #0]
1000dfbc:	7042      	strb	r2, [r0, #1]
1000dfbe:	7082      	strb	r2, [r0, #2]
1000dfc0:	70c3      	strb	r3, [r0, #3]
1000dfc2:	8021      	strh	r1, [r4, #0]
1000dfc4:	80a2      	strh	r2, [r4, #4]
1000dfc6:	71c3      	strb	r3, [r0, #7]
1000dfc8:	3a0c      	subs	r2, #12
1000dfca:	2109      	movs	r1, #9
1000dfcc:	4b0b      	ldr	r3, [pc, #44]	; (1000dffc <gapm_cancel_cmd_handler+0x68>)
1000dfce:	7182      	strb	r2, [r0, #6]
1000dfd0:	4798      	blx	r3
1000dfd2:	1c28      	adds	r0, r5, #0
1000dfd4:	4b0a      	ldr	r3, [pc, #40]	; (1000e000 <gapm_cancel_cmd_handler+0x6c>)
1000dfd6:	4798      	blx	r3
1000dfd8:	7828      	ldrb	r0, [r5, #0]
1000dfda:	2800      	cmp	r0, #0
1000dfdc:	d001      	beq.n	1000dfe2 <gapm_cancel_cmd_handler+0x4e>
1000dfde:	20e2      	movs	r0, #226	; 0xe2
1000dfe0:	e004      	b.n	1000dfec <gapm_cancel_cmd_handler+0x58>
1000dfe2:	68a3      	ldr	r3, [r4, #8]
1000dfe4:	785b      	ldrb	r3, [r3, #1]
1000dfe6:	2b44      	cmp	r3, #68	; 0x44
1000dfe8:	d000      	beq.n	1000dfec <gapm_cancel_cmd_handler+0x58>
1000dfea:	1c18      	adds	r0, r3, #0
1000dfec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000dfee:	46c0      	nop			; (mov r8, r8)
1000dff0:	10014cec 	.word	0x10014cec
1000dff4:	1001505c 	.word	0x1001505c
1000dff8:	10014ce0 	.word	0x10014ce0
1000dffc:	1000d165 	.word	0x1000d165
1000e000:	1000d1c9 	.word	0x1000d1c9

1000e004 <gapm_dev_bdaddr_ind_handler>:
1000e004:	b538      	push	{r3, r4, r5, lr}
1000e006:	1c05      	adds	r5, r0, #0
1000e008:	1c0c      	adds	r4, r1, #0
1000e00a:	1c48      	adds	r0, r1, #1
1000e00c:	2206      	movs	r2, #6
1000e00e:	1c29      	adds	r1, r5, #0
1000e010:	4b02      	ldr	r3, [pc, #8]	; (1000e01c <gapm_dev_bdaddr_ind_handler+0x18>)
1000e012:	4798      	blx	r3
1000e014:	79ab      	ldrb	r3, [r5, #6]
1000e016:	2000      	movs	r0, #0
1000e018:	7023      	strb	r3, [r4, #0]
1000e01a:	bd38      	pop	{r3, r4, r5, pc}
1000e01c:	10010517 	.word	0x10010517

1000e020 <gapm_cmp_evt>:
1000e020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e022:	7803      	ldrb	r3, [r0, #0]
1000e024:	7845      	ldrb	r5, [r0, #1]
1000e026:	3b0c      	subs	r3, #12
1000e028:	1e18      	subs	r0, r3, #0
1000e02a:	280b      	cmp	r0, #11
1000e02c:	d900      	bls.n	1000e030 <gapm_cmp_evt+0x10>
1000e02e:	e08d      	b.n	1000e14c <gapm_cmp_evt+0x12c>
1000e030:	1c0c      	adds	r4, r1, #0
1000e032:	f000 fd55 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000e036:	1952      	.short	0x1952
1000e038:	068b1919 	.word	0x068b1919
1000e03c:	8b595906 	.word	0x8b595906
1000e040:	0d8b      	.short	0x0d8b
1000e042:	2300      	movs	r3, #0
1000e044:	2d45      	cmp	r5, #69	; 0x45
1000e046:	d000      	beq.n	1000e04a <gapm_cmp_evt+0x2a>
1000e048:	1c2b      	adds	r3, r5, #0
1000e04a:	7023      	strb	r3, [r4, #0]
1000e04c:	2002      	movs	r0, #2
1000e04e:	e07e      	b.n	1000e14e <gapm_cmp_evt+0x12e>
1000e050:	203b      	movs	r0, #59	; 0x3b
1000e052:	2d00      	cmp	r5, #0
1000e054:	d100      	bne.n	1000e058 <gapm_cmp_evt+0x38>
1000e056:	e07a      	b.n	1000e14e <gapm_cmp_evt+0x12e>
1000e058:	700d      	strb	r5, [r1, #0]
1000e05a:	1c48      	adds	r0, r1, #1
1000e05c:	2210      	movs	r2, #16
1000e05e:	2100      	movs	r1, #0
1000e060:	4b3b      	ldr	r3, [pc, #236]	; (1000e150 <gapm_cmp_evt+0x130>)
1000e062:	4798      	blx	r3
1000e064:	200f      	movs	r0, #15
1000e066:	e072      	b.n	1000e14e <gapm_cmp_evt+0x12e>
1000e068:	2d00      	cmp	r5, #0
1000e06a:	d134      	bne.n	1000e0d6 <gapm_cmp_evt+0xb6>
1000e06c:	4b39      	ldr	r3, [pc, #228]	; (1000e154 <gapm_cmp_evt+0x134>)
1000e06e:	4798      	blx	r3
1000e070:	1e43      	subs	r3, r0, #1
1000e072:	b2db      	uxtb	r3, r3
1000e074:	1c28      	adds	r0, r5, #0
1000e076:	2b06      	cmp	r3, #6
1000e078:	d869      	bhi.n	1000e14e <gapm_cmp_evt+0x12e>
1000e07a:	466b      	mov	r3, sp
1000e07c:	4e36      	ldr	r6, [pc, #216]	; (1000e158 <gapm_cmp_evt+0x138>)
1000e07e:	1dd9      	adds	r1, r3, #7
1000e080:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e082:	4b36      	ldr	r3, [pc, #216]	; (1000e15c <gapm_cmp_evt+0x13c>)
1000e084:	4798      	blx	r3
1000e086:	2312      	movs	r3, #18
1000e088:	4358      	muls	r0, r3
1000e08a:	4935      	ldr	r1, [pc, #212]	; (1000e160 <gapm_cmp_evt+0x140>)
1000e08c:	1809      	adds	r1, r1, r0
1000e08e:	1c0b      	adds	r3, r1, #0
1000e090:	894a      	ldrh	r2, [r1, #10]
1000e092:	3308      	adds	r3, #8
1000e094:	8122      	strh	r2, [r4, #8]
1000e096:	784f      	ldrb	r7, [r1, #1]
1000e098:	72a5      	strb	r5, [r4, #10]
1000e09a:	7027      	strb	r7, [r4, #0]
1000e09c:	898a      	ldrh	r2, [r1, #12]
1000e09e:	1c60      	adds	r0, r4, #1
1000e0a0:	81a2      	strh	r2, [r4, #12]
1000e0a2:	88db      	ldrh	r3, [r3, #6]
1000e0a4:	3102      	adds	r1, #2
1000e0a6:	81e3      	strh	r3, [r4, #14]
1000e0a8:	89cb      	ldrh	r3, [r1, #14]
1000e0aa:	2206      	movs	r2, #6
1000e0ac:	8223      	strh	r3, [r4, #16]
1000e0ae:	4b2d      	ldr	r3, [pc, #180]	; (1000e164 <gapm_cmp_evt+0x144>)
1000e0b0:	4798      	blx	r3
1000e0b2:	2f00      	cmp	r7, #0
1000e0b4:	d00a      	beq.n	1000e0cc <gapm_cmp_evt+0xac>
1000e0b6:	79a3      	ldrb	r3, [r4, #6]
1000e0b8:	223f      	movs	r2, #63	; 0x3f
1000e0ba:	1c19      	adds	r1, r3, #0
1000e0bc:	3501      	adds	r5, #1
1000e0be:	4391      	bics	r1, r2
1000e0c0:	29c0      	cmp	r1, #192	; 0xc0
1000e0c2:	d003      	beq.n	1000e0cc <gapm_cmp_evt+0xac>
1000e0c4:	065b      	lsls	r3, r3, #25
1000e0c6:	0fdb      	lsrs	r3, r3, #31
1000e0c8:	3502      	adds	r5, #2
1000e0ca:	1aed      	subs	r5, r5, r3
1000e0cc:	2301      	movs	r3, #1
1000e0ce:	425b      	negs	r3, r3
1000e0d0:	7025      	strb	r5, [r4, #0]
1000e0d2:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e0d4:	e038      	b.n	1000e148 <gapm_cmp_evt+0x128>
1000e0d6:	700d      	strb	r5, [r1, #0]
1000e0d8:	e004      	b.n	1000e0e4 <gapm_cmp_evt+0xc4>
1000e0da:	2300      	movs	r3, #0
1000e0dc:	2d45      	cmp	r5, #69	; 0x45
1000e0de:	d000      	beq.n	1000e0e2 <gapm_cmp_evt+0xc2>
1000e0e0:	1c2b      	adds	r3, r5, #0
1000e0e2:	7023      	strb	r3, [r4, #0]
1000e0e4:	2003      	movs	r0, #3
1000e0e6:	e032      	b.n	1000e14e <gapm_cmp_evt+0x12e>
1000e0e8:	4e1b      	ldr	r6, [pc, #108]	; (1000e158 <gapm_cmp_evt+0x138>)
1000e0ea:	2100      	movs	r1, #0
1000e0ec:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e0ee:	4b1b      	ldr	r3, [pc, #108]	; (1000e15c <gapm_cmp_evt+0x13c>)
1000e0f0:	4798      	blx	r3
1000e0f2:	2807      	cmp	r0, #7
1000e0f4:	d818      	bhi.n	1000e128 <gapm_cmp_evt+0x108>
1000e0f6:	2301      	movs	r3, #1
1000e0f8:	425b      	negs	r3, r3
1000e0fa:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e0fc:	3313      	adds	r3, #19
1000e0fe:	4358      	muls	r0, r3
1000e100:	4917      	ldr	r1, [pc, #92]	; (1000e160 <gapm_cmp_evt+0x140>)
1000e102:	1809      	adds	r1, r1, r0
1000e104:	1c0b      	adds	r3, r1, #0
1000e106:	894a      	ldrh	r2, [r1, #10]
1000e108:	3308      	adds	r3, #8
1000e10a:	8122      	strh	r2, [r4, #8]
1000e10c:	784a      	ldrb	r2, [r1, #1]
1000e10e:	72a5      	strb	r5, [r4, #10]
1000e110:	7022      	strb	r2, [r4, #0]
1000e112:	898a      	ldrh	r2, [r1, #12]
1000e114:	1c60      	adds	r0, r4, #1
1000e116:	81a2      	strh	r2, [r4, #12]
1000e118:	88db      	ldrh	r3, [r3, #6]
1000e11a:	3102      	adds	r1, #2
1000e11c:	81e3      	strh	r3, [r4, #14]
1000e11e:	89cb      	ldrh	r3, [r1, #14]
1000e120:	2206      	movs	r2, #6
1000e122:	8223      	strh	r3, [r4, #16]
1000e124:	4b0f      	ldr	r3, [pc, #60]	; (1000e164 <gapm_cmp_evt+0x144>)
1000e126:	4798      	blx	r3
1000e128:	2200      	movs	r2, #0
1000e12a:	7823      	ldrb	r3, [r4, #0]
1000e12c:	4293      	cmp	r3, r2
1000e12e:	d00a      	beq.n	1000e146 <gapm_cmp_evt+0x126>
1000e130:	79a3      	ldrb	r3, [r4, #6]
1000e132:	323f      	adds	r2, #63	; 0x3f
1000e134:	1c19      	adds	r1, r3, #0
1000e136:	4391      	bics	r1, r2
1000e138:	3a3e      	subs	r2, #62	; 0x3e
1000e13a:	29c0      	cmp	r1, #192	; 0xc0
1000e13c:	d003      	beq.n	1000e146 <gapm_cmp_evt+0x126>
1000e13e:	065b      	lsls	r3, r3, #25
1000e140:	0fdb      	lsrs	r3, r3, #31
1000e142:	3202      	adds	r2, #2
1000e144:	1ad2      	subs	r2, r2, r3
1000e146:	7022      	strb	r2, [r4, #0]
1000e148:	2005      	movs	r0, #5
1000e14a:	e000      	b.n	1000e14e <gapm_cmp_evt+0x12e>
1000e14c:	2000      	movs	r0, #0
1000e14e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e150:	10010529 	.word	0x10010529
1000e154:	1000d371 	.word	0x1000d371
1000e158:	10014d7e 	.word	0x10014d7e
1000e15c:	1000d335 	.word	0x1000d335
1000e160:	10014cee 	.word	0x10014cee
1000e164:	10010517 	.word	0x10010517

1000e168 <gapm_start_adv_cmd_handler>:
1000e168:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e16a:	b089      	sub	sp, #36	; 0x24
1000e16c:	9303      	str	r3, [sp, #12]
1000e16e:	ab0e      	add	r3, sp, #56	; 0x38
1000e170:	9102      	str	r1, [sp, #8]
1000e172:	cb02      	ldmia	r3!, {r1}
1000e174:	aa08      	add	r2, sp, #32
1000e176:	881b      	ldrh	r3, [r3, #0]
1000e178:	4e3c      	ldr	r6, [pc, #240]	; (1000e26c <gapm_start_adv_cmd_handler+0x104>)
1000e17a:	9300      	str	r3, [sp, #0]
1000e17c:	ab10      	add	r3, sp, #64	; 0x40
1000e17e:	881b      	ldrh	r3, [r3, #0]
1000e180:	240d      	movs	r4, #13
1000e182:	469c      	mov	ip, r3
1000e184:	ab11      	add	r3, sp, #68	; 0x44
1000e186:	781b      	ldrb	r3, [r3, #0]
1000e188:	9304      	str	r3, [sp, #16]
1000e18a:	ab12      	add	r3, sp, #72	; 0x48
1000e18c:	781b      	ldrb	r3, [r3, #0]
1000e18e:	9305      	str	r3, [sp, #20]
1000e190:	ab13      	add	r3, sp, #76	; 0x4c
1000e192:	781b      	ldrb	r3, [r3, #0]
1000e194:	9306      	str	r3, [sp, #24]
1000e196:	ab14      	add	r3, sp, #80	; 0x50
1000e198:	781b      	ldrb	r3, [r3, #0]
1000e19a:	9301      	str	r3, [sp, #4]
1000e19c:	2319      	movs	r3, #25
1000e19e:	189b      	adds	r3, r3, r2
1000e1a0:	7fdd      	ldrb	r5, [r3, #31]
1000e1a2:	ab18      	add	r3, sp, #96	; 0x60
1000e1a4:	881f      	ldrh	r7, [r3, #0]
1000e1a6:	ab19      	add	r3, sp, #100	; 0x64
1000e1a8:	781b      	ldrb	r3, [r3, #0]
1000e1aa:	8832      	ldrh	r2, [r6, #0]
1000e1ac:	9307      	str	r3, [sp, #28]
1000e1ae:	4b30      	ldr	r3, [pc, #192]	; (1000e270 <gapm_start_adv_cmd_handler+0x108>)
1000e1b0:	8836      	ldrh	r6, [r6, #0]
1000e1b2:	711a      	strb	r2, [r3, #4]
1000e1b4:	466a      	mov	r2, sp
1000e1b6:	7a12      	ldrb	r2, [r2, #8]
1000e1b8:	701c      	strb	r4, [r3, #0]
1000e1ba:	705c      	strb	r4, [r3, #1]
1000e1bc:	709c      	strb	r4, [r3, #2]
1000e1be:	725a      	strb	r2, [r3, #9]
1000e1c0:	2400      	movs	r4, #0
1000e1c2:	466a      	mov	r2, sp
1000e1c4:	0a36      	lsrs	r6, r6, #8
1000e1c6:	70dc      	strb	r4, [r3, #3]
1000e1c8:	7218      	strb	r0, [r3, #8]
1000e1ca:	729c      	strb	r4, [r3, #10]
1000e1cc:	715e      	strb	r6, [r3, #5]
1000e1ce:	72dc      	strb	r4, [r3, #11]
1000e1d0:	7812      	ldrb	r2, [r2, #0]
1000e1d2:	380e      	subs	r0, #14
1000e1d4:	731a      	strb	r2, [r3, #12]
1000e1d6:	9a00      	ldr	r2, [sp, #0]
1000e1d8:	0a14      	lsrs	r4, r2, #8
1000e1da:	4662      	mov	r2, ip
1000e1dc:	739a      	strb	r2, [r3, #14]
1000e1de:	4662      	mov	r2, ip
1000e1e0:	735c      	strb	r4, [r3, #13]
1000e1e2:	0a14      	lsrs	r4, r2, #8
1000e1e4:	466a      	mov	r2, sp
1000e1e6:	7c12      	ldrb	r2, [r2, #16]
1000e1e8:	73dc      	strb	r4, [r3, #15]
1000e1ea:	741a      	strb	r2, [r3, #16]
1000e1ec:	1c1c      	adds	r4, r3, #0
1000e1ee:	2801      	cmp	r0, #1
1000e1f0:	d809      	bhi.n	1000e206 <gapm_start_adv_cmd_handler+0x9e>
1000e1f2:	2900      	cmp	r1, #0
1000e1f4:	d003      	beq.n	1000e1fe <gapm_start_adv_cmd_handler+0x96>
1000e1f6:	481f      	ldr	r0, [pc, #124]	; (1000e274 <gapm_start_adv_cmd_handler+0x10c>)
1000e1f8:	2206      	movs	r2, #6
1000e1fa:	4b1f      	ldr	r3, [pc, #124]	; (1000e278 <gapm_start_adv_cmd_handler+0x110>)
1000e1fc:	4798      	blx	r3
1000e1fe:	466b      	mov	r3, sp
1000e200:	7b1b      	ldrb	r3, [r3, #12]
1000e202:	75e3      	strb	r3, [r4, #23]
1000e204:	e014      	b.n	1000e230 <gapm_start_adv_cmd_handler+0xc8>
1000e206:	466b      	mov	r3, sp
1000e208:	7d1b      	ldrb	r3, [r3, #20]
1000e20a:	9915      	ldr	r1, [sp, #84]	; 0x54
1000e20c:	7463      	strb	r3, [r4, #17]
1000e20e:	466b      	mov	r3, sp
1000e210:	7e1b      	ldrb	r3, [r3, #24]
1000e212:	9a01      	ldr	r2, [sp, #4]
1000e214:	74a3      	strb	r3, [r4, #18]
1000e216:	466b      	mov	r3, sp
1000e218:	791b      	ldrb	r3, [r3, #4]
1000e21a:	4818      	ldr	r0, [pc, #96]	; (1000e27c <gapm_start_adv_cmd_handler+0x114>)
1000e21c:	4e16      	ldr	r6, [pc, #88]	; (1000e278 <gapm_start_adv_cmd_handler+0x110>)
1000e21e:	74e3      	strb	r3, [r4, #19]
1000e220:	47b0      	blx	r6
1000e222:	1c23      	adds	r3, r4, #0
1000e224:	4816      	ldr	r0, [pc, #88]	; (1000e280 <gapm_start_adv_cmd_handler+0x118>)
1000e226:	3330      	adds	r3, #48	; 0x30
1000e228:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000e22a:	1c2a      	adds	r2, r5, #0
1000e22c:	701d      	strb	r5, [r3, #0]
1000e22e:	47b0      	blx	r6
1000e230:	1c22      	adds	r2, r4, #0
1000e232:	23a5      	movs	r3, #165	; 0xa5
1000e234:	3250      	adds	r2, #80	; 0x50
1000e236:	7013      	strb	r3, [r2, #0]
1000e238:	1c22      	adds	r2, r4, #0
1000e23a:	3251      	adds	r2, #81	; 0x51
1000e23c:	7013      	strb	r3, [r2, #0]
1000e23e:	1c23      	adds	r3, r4, #0
1000e240:	1c22      	adds	r2, r4, #0
1000e242:	3352      	adds	r3, #82	; 0x52
1000e244:	701f      	strb	r7, [r3, #0]
1000e246:	3253      	adds	r2, #83	; 0x53
1000e248:	0a3b      	lsrs	r3, r7, #8
1000e24a:	7013      	strb	r3, [r2, #0]
1000e24c:	466a      	mov	r2, sp
1000e24e:	1c23      	adds	r3, r4, #0
1000e250:	7f12      	ldrb	r2, [r2, #28]
1000e252:	3354      	adds	r3, #84	; 0x54
1000e254:	701a      	strb	r2, [r3, #0]
1000e256:	234d      	movs	r3, #77	; 0x4d
1000e258:	2500      	movs	r5, #0
1000e25a:	71a3      	strb	r3, [r4, #6]
1000e25c:	1c20      	adds	r0, r4, #0
1000e25e:	2155      	movs	r1, #85	; 0x55
1000e260:	4b08      	ldr	r3, [pc, #32]	; (1000e284 <gapm_start_adv_cmd_handler+0x11c>)
1000e262:	71e5      	strb	r5, [r4, #7]
1000e264:	4798      	blx	r3
1000e266:	1c28      	adds	r0, r5, #0
1000e268:	b009      	add	sp, #36	; 0x24
1000e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e26c:	10014cec 	.word	0x10014cec
1000e270:	1001505c 	.word	0x1001505c
1000e274:	1001506d 	.word	0x1001506d
1000e278:	10010517 	.word	0x10010517
1000e27c:	10015070 	.word	0x10015070
1000e280:	1001508d 	.word	0x1001508d
1000e284:	1000d165 	.word	0x1000d165

1000e288 <get_gap_local_addr_type>:
1000e288:	4b04      	ldr	r3, [pc, #16]	; (1000e29c <get_gap_local_addr_type+0x14>)
1000e28a:	2001      	movs	r0, #1
1000e28c:	791b      	ldrb	r3, [r3, #4]
1000e28e:	2b02      	cmp	r3, #2
1000e290:	d003      	beq.n	1000e29a <get_gap_local_addr_type+0x12>
1000e292:	3b03      	subs	r3, #3
1000e294:	4258      	negs	r0, r3
1000e296:	4158      	adcs	r0, r3
1000e298:	0040      	lsls	r0, r0, #1
1000e29a:	4770      	bx	lr
1000e29c:	10014d7e 	.word	0x10014d7e

1000e2a0 <gapm_adv_report_evt_handler>:
1000e2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e2a2:	7843      	ldrb	r3, [r0, #1]
1000e2a4:	1c05      	adds	r5, r0, #0
1000e2a6:	9301      	str	r3, [sp, #4]
1000e2a8:	466b      	mov	r3, sp
1000e2aa:	1c0c      	adds	r4, r1, #0
1000e2ac:	791b      	ldrb	r3, [r3, #4]
1000e2ae:	7806      	ldrb	r6, [r0, #0]
1000e2b0:	2206      	movs	r2, #6
1000e2b2:	704b      	strb	r3, [r1, #1]
1000e2b4:	1c88      	adds	r0, r1, #2
1000e2b6:	4f1b      	ldr	r7, [pc, #108]	; (1000e324 <gapm_adv_report_evt_handler+0x84>)
1000e2b8:	1ca9      	adds	r1, r5, #2
1000e2ba:	47b8      	blx	r7
1000e2bc:	1c20      	adds	r0, r4, #0
1000e2be:	1c29      	adds	r1, r5, #0
1000e2c0:	7a2a      	ldrb	r2, [r5, #8]
1000e2c2:	3008      	adds	r0, #8
1000e2c4:	77c2      	strb	r2, [r0, #31]
1000e2c6:	3109      	adds	r1, #9
1000e2c8:	3528      	adds	r5, #40	; 0x28
1000e2ca:	47b8      	blx	r7
1000e2cc:	782b      	ldrb	r3, [r5, #0]
1000e2ce:	b25a      	sxtb	r2, r3
1000e2d0:	2a00      	cmp	r2, #0
1000e2d2:	da01      	bge.n	1000e2d8 <gapm_adv_report_evt_handler+0x38>
1000e2d4:	3301      	adds	r3, #1
1000e2d6:	b2db      	uxtb	r3, r3
1000e2d8:	1c22      	adds	r2, r4, #0
1000e2da:	3228      	adds	r2, #40	; 0x28
1000e2dc:	7013      	strb	r3, [r2, #0]
1000e2de:	2200      	movs	r2, #0
1000e2e0:	9b01      	ldr	r3, [sp, #4]
1000e2e2:	4293      	cmp	r3, r2
1000e2e4:	d00a      	beq.n	1000e2fc <gapm_adv_report_evt_handler+0x5c>
1000e2e6:	79e3      	ldrb	r3, [r4, #7]
1000e2e8:	323f      	adds	r2, #63	; 0x3f
1000e2ea:	1c19      	adds	r1, r3, #0
1000e2ec:	4391      	bics	r1, r2
1000e2ee:	3a3e      	subs	r2, #62	; 0x3e
1000e2f0:	29c0      	cmp	r1, #192	; 0xc0
1000e2f2:	d003      	beq.n	1000e2fc <gapm_adv_report_evt_handler+0x5c>
1000e2f4:	065b      	lsls	r3, r3, #25
1000e2f6:	0fdb      	lsrs	r3, r3, #31
1000e2f8:	3202      	adds	r2, #2
1000e2fa:	1ad2      	subs	r2, r2, r3
1000e2fc:	7062      	strb	r2, [r4, #1]
1000e2fe:	2e04      	cmp	r6, #4
1000e300:	d80f      	bhi.n	1000e322 <gapm_adv_report_evt_handler+0x82>
1000e302:	1c30      	adds	r0, r6, #0
1000e304:	f000 fbec 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000e308:	09070503 	.word	0x09070503
1000e30c:	0b          	.byte	0x0b
1000e30d:	00          	.byte	0x00
1000e30e:	2300      	movs	r3, #0
1000e310:	e006      	b.n	1000e320 <gapm_adv_report_evt_handler+0x80>
1000e312:	2301      	movs	r3, #1
1000e314:	e004      	b.n	1000e320 <gapm_adv_report_evt_handler+0x80>
1000e316:	2302      	movs	r3, #2
1000e318:	e002      	b.n	1000e320 <gapm_adv_report_evt_handler+0x80>
1000e31a:	2303      	movs	r3, #3
1000e31c:	e000      	b.n	1000e320 <gapm_adv_report_evt_handler+0x80>
1000e31e:	2305      	movs	r3, #5
1000e320:	7023      	strb	r3, [r4, #0]
1000e322:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e324:	10010517 	.word	0x10010517

1000e328 <gapm_resolv_addr_cmd_handler>:
1000e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e32a:	2314      	movs	r3, #20
1000e32c:	4c12      	ldr	r4, [pc, #72]	; (1000e378 <gapm_resolv_addr_cmd_handler+0x50>)
1000e32e:	1c17      	adds	r7, r2, #0
1000e330:	7023      	strb	r3, [r4, #0]
1000e332:	3b07      	subs	r3, #7
1000e334:	7063      	strb	r3, [r4, #1]
1000e336:	70a3      	strb	r3, [r4, #2]
1000e338:	2300      	movs	r3, #0
1000e33a:	70e3      	strb	r3, [r4, #3]
1000e33c:	4b0f      	ldr	r3, [pc, #60]	; (1000e37c <gapm_resolv_addr_cmd_handler+0x54>)
1000e33e:	1c05      	adds	r5, r0, #0
1000e340:	881a      	ldrh	r2, [r3, #0]
1000e342:	881b      	ldrh	r3, [r3, #0]
1000e344:	4e0e      	ldr	r6, [pc, #56]	; (1000e380 <gapm_resolv_addr_cmd_handler+0x58>)
1000e346:	0a1b      	lsrs	r3, r3, #8
1000e348:	7163      	strb	r3, [r4, #5]
1000e34a:	2317      	movs	r3, #23
1000e34c:	012d      	lsls	r5, r5, #4
1000e34e:	7122      	strb	r2, [r4, #4]
1000e350:	7260      	strb	r0, [r4, #9]
1000e352:	2206      	movs	r2, #6
1000e354:	480b      	ldr	r0, [pc, #44]	; (1000e384 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e356:	7223      	strb	r3, [r4, #8]
1000e358:	47b0      	blx	r6
1000e35a:	1c39      	adds	r1, r7, #0
1000e35c:	1c2a      	adds	r2, r5, #0
1000e35e:	480a      	ldr	r0, [pc, #40]	; (1000e388 <gapm_resolv_addr_cmd_handler+0x60>)
1000e360:	47b0      	blx	r6
1000e362:	1c29      	adds	r1, r5, #0
1000e364:	3110      	adds	r1, #16
1000e366:	1c0b      	adds	r3, r1, #0
1000e368:	3b08      	subs	r3, #8
1000e36a:	71a3      	strb	r3, [r4, #6]
1000e36c:	121b      	asrs	r3, r3, #8
1000e36e:	71e3      	strb	r3, [r4, #7]
1000e370:	1c20      	adds	r0, r4, #0
1000e372:	4b06      	ldr	r3, [pc, #24]	; (1000e38c <gapm_resolv_addr_cmd_handler+0x64>)
1000e374:	4798      	blx	r3
1000e376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e378:	1001505c 	.word	0x1001505c
1000e37c:	10014cec 	.word	0x10014cec
1000e380:	10010517 	.word	0x10010517
1000e384:	10015066 	.word	0x10015066
1000e388:	1001506c 	.word	0x1001506c
1000e38c:	1000d165 	.word	0x1000d165

1000e390 <gapm_addr_solved_ind_handler>:
1000e390:	b570      	push	{r4, r5, r6, lr}
1000e392:	1c04      	adds	r4, r0, #0
1000e394:	1c08      	adds	r0, r1, #0
1000e396:	1c0d      	adds	r5, r1, #0
1000e398:	4e05      	ldr	r6, [pc, #20]	; (1000e3b0 <gapm_addr_solved_ind_handler+0x20>)
1000e39a:	1c21      	adds	r1, r4, #0
1000e39c:	2206      	movs	r2, #6
1000e39e:	3011      	adds	r0, #17
1000e3a0:	47b0      	blx	r6
1000e3a2:	1c68      	adds	r0, r5, #1
1000e3a4:	1da1      	adds	r1, r4, #6
1000e3a6:	2210      	movs	r2, #16
1000e3a8:	47b0      	blx	r6
1000e3aa:	2300      	movs	r3, #0
1000e3ac:	702b      	strb	r3, [r5, #0]
1000e3ae:	bd70      	pop	{r4, r5, r6, pc}
1000e3b0:	10010517 	.word	0x10010517

1000e3b4 <gapm_profile_task_add_cmd_handler>:
1000e3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e3b6:	4684      	mov	ip, r0
1000e3b8:	a808      	add	r0, sp, #32
1000e3ba:	c810      	ldmia	r0!, {r4}
1000e3bc:	2500      	movs	r5, #0
1000e3be:	8807      	ldrh	r7, [r0, #0]
1000e3c0:	4668      	mov	r0, sp
1000e3c2:	1d86      	adds	r6, r0, #6
1000e3c4:	7185      	strb	r5, [r0, #6]
1000e3c6:	201b      	movs	r0, #27
1000e3c8:	4c2b      	ldr	r4, [pc, #172]	; (1000e478 <gapm_profile_task_add_cmd_handler+0xc4>)
1000e3ca:	7020      	strb	r0, [r4, #0]
1000e3cc:	200d      	movs	r0, #13
1000e3ce:	7060      	strb	r0, [r4, #1]
1000e3d0:	200d      	movs	r0, #13
1000e3d2:	70e5      	strb	r5, [r4, #3]
1000e3d4:	4d29      	ldr	r5, [pc, #164]	; (1000e47c <gapm_profile_task_add_cmd_handler+0xc8>)
1000e3d6:	70a0      	strb	r0, [r4, #2]
1000e3d8:	8828      	ldrh	r0, [r5, #0]
1000e3da:	882d      	ldrh	r5, [r5, #0]
1000e3dc:	7120      	strb	r0, [r4, #4]
1000e3de:	201b      	movs	r0, #27
1000e3e0:	7220      	strb	r0, [r4, #8]
1000e3e2:	4660      	mov	r0, ip
1000e3e4:	72a1      	strb	r1, [r4, #10]
1000e3e6:	7322      	strb	r2, [r4, #12]
1000e3e8:	73a3      	strb	r3, [r4, #14]
1000e3ea:	0a09      	lsrs	r1, r1, #8
1000e3ec:	0a12      	lsrs	r2, r2, #8
1000e3ee:	0a1b      	lsrs	r3, r3, #8
1000e3f0:	7260      	strb	r0, [r4, #9]
1000e3f2:	72e1      	strb	r1, [r4, #11]
1000e3f4:	7362      	strb	r2, [r4, #13]
1000e3f6:	73e3      	strb	r3, [r4, #15]
1000e3f8:	1c3a      	adds	r2, r7, #0
1000e3fa:	0a2d      	lsrs	r5, r5, #8
1000e3fc:	9908      	ldr	r1, [sp, #32]
1000e3fe:	4b20      	ldr	r3, [pc, #128]	; (1000e480 <gapm_profile_task_add_cmd_handler+0xcc>)
1000e400:	4820      	ldr	r0, [pc, #128]	; (1000e484 <gapm_profile_task_add_cmd_handler+0xd0>)
1000e402:	7165      	strb	r5, [r4, #5]
1000e404:	4798      	blx	r3
1000e406:	4d20      	ldr	r5, [pc, #128]	; (1000e488 <gapm_profile_task_add_cmd_handler+0xd4>)
1000e408:	1c39      	adds	r1, r7, #0
1000e40a:	4b20      	ldr	r3, [pc, #128]	; (1000e48c <gapm_profile_task_add_cmd_handler+0xd8>)
1000e40c:	3110      	adds	r1, #16
1000e40e:	802b      	strh	r3, [r5, #0]
1000e410:	230d      	movs	r3, #13
1000e412:	b289      	uxth	r1, r1
1000e414:	80ab      	strh	r3, [r5, #4]
1000e416:	1c0b      	adds	r3, r1, #0
1000e418:	27d0      	movs	r7, #208	; 0xd0
1000e41a:	3b08      	subs	r3, #8
1000e41c:	71a3      	strb	r3, [r4, #6]
1000e41e:	121b      	asrs	r3, r3, #8
1000e420:	71e3      	strb	r3, [r4, #7]
1000e422:	1c20      	adds	r0, r4, #0
1000e424:	4b1a      	ldr	r3, [pc, #104]	; (1000e490 <gapm_profile_task_add_cmd_handler+0xdc>)
1000e426:	013f      	lsls	r7, r7, #4
1000e428:	806f      	strh	r7, [r5, #2]
1000e42a:	4798      	blx	r3
1000e42c:	1c30      	adds	r0, r6, #0
1000e42e:	4c19      	ldr	r4, [pc, #100]	; (1000e494 <gapm_profile_task_add_cmd_handler+0xe0>)
1000e430:	47a0      	blx	r4
1000e432:	7831      	ldrb	r1, [r6, #0]
1000e434:	20e2      	movs	r0, #226	; 0xe2
1000e436:	2900      	cmp	r1, #0
1000e438:	d11d      	bne.n	1000e476 <gapm_profile_task_add_cmd_handler+0xc2>
1000e43a:	2301      	movs	r3, #1
1000e43c:	882e      	ldrh	r6, [r5, #0]
1000e43e:	4816      	ldr	r0, [pc, #88]	; (1000e498 <gapm_profile_task_add_cmd_handler+0xe4>)
1000e440:	68aa      	ldr	r2, [r5, #8]
1000e442:	425b      	negs	r3, r3
1000e444:	4286      	cmp	r6, r0
1000e446:	d001      	beq.n	1000e44c <gapm_profile_task_add_cmd_handler+0x98>
1000e448:	802b      	strh	r3, [r5, #0]
1000e44a:	e013      	b.n	1000e474 <gapm_profile_task_add_cmd_handler+0xc0>
1000e44c:	806b      	strh	r3, [r5, #2]
1000e44e:	7953      	ldrb	r3, [r2, #5]
1000e450:	7912      	ldrb	r2, [r2, #4]
1000e452:	021b      	lsls	r3, r3, #8
1000e454:	4313      	orrs	r3, r2
1000e456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e458:	8013      	strh	r3, [r2, #0]
1000e45a:	230d      	movs	r3, #13
1000e45c:	80ab      	strh	r3, [r5, #4]
1000e45e:	466b      	mov	r3, sp
1000e460:	1dde      	adds	r6, r3, #7
1000e462:	1c30      	adds	r0, r6, #0
1000e464:	71d9      	strb	r1, [r3, #7]
1000e466:	802f      	strh	r7, [r5, #0]
1000e468:	47a0      	blx	r4
1000e46a:	7833      	ldrb	r3, [r6, #0]
1000e46c:	20d0      	movs	r0, #208	; 0xd0
1000e46e:	2b00      	cmp	r3, #0
1000e470:	d101      	bne.n	1000e476 <gapm_profile_task_add_cmd_handler+0xc2>
1000e472:	68aa      	ldr	r2, [r5, #8]
1000e474:	7850      	ldrb	r0, [r2, #1]
1000e476:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e478:	1001505c 	.word	0x1001505c
1000e47c:	10014cec 	.word	0x10014cec
1000e480:	10010517 	.word	0x10010517
1000e484:	1001506c 	.word	0x1001506c
1000e488:	10014ce0 	.word	0x10014ce0
1000e48c:	00000d1c 	.word	0x00000d1c
1000e490:	1000d165 	.word	0x1000d165
1000e494:	1000d1c9 	.word	0x1000d1c9
1000e498:	0000ffff 	.word	0x0000ffff

1000e49c <gapm_profile_added_ind_handler>:
1000e49c:	b510      	push	{r4, lr}
1000e49e:	7843      	ldrb	r3, [r0, #1]
1000e4a0:	7902      	ldrb	r2, [r0, #4]
1000e4a2:	7944      	ldrb	r4, [r0, #5]
1000e4a4:	7800      	ldrb	r0, [r0, #0]
1000e4a6:	021b      	lsls	r3, r3, #8
1000e4a8:	4303      	orrs	r3, r0
1000e4aa:	2b1b      	cmp	r3, #27
1000e4ac:	d104      	bne.n	1000e4b8 <gapm_profile_added_ind_handler+0x1c>
1000e4ae:	2300      	movs	r3, #0
1000e4b0:	700b      	strb	r3, [r1, #0]
1000e4b2:	0223      	lsls	r3, r4, #8
1000e4b4:	4313      	orrs	r3, r2
1000e4b6:	804b      	strh	r3, [r1, #2]
1000e4b8:	203b      	movs	r0, #59	; 0x3b
1000e4ba:	bd10      	pop	{r4, pc}

1000e4bc <gattc_read_req_ind_parser>:
1000e4bc:	7843      	ldrb	r3, [r0, #1]
1000e4be:	7802      	ldrb	r2, [r0, #0]
1000e4c0:	021b      	lsls	r3, r3, #8
1000e4c2:	4313      	orrs	r3, r2
1000e4c4:	804b      	strh	r3, [r1, #2]
1000e4c6:	4770      	bx	lr

1000e4c8 <gattc_write_req_ind_parser>:
1000e4c8:	b508      	push	{r3, lr}
1000e4ca:	1c13      	adds	r3, r2, #0
1000e4cc:	0a00      	lsrs	r0, r0, #8
1000e4ce:	8010      	strh	r0, [r2, #0]
1000e4d0:	784a      	ldrb	r2, [r1, #1]
1000e4d2:	7808      	ldrb	r0, [r1, #0]
1000e4d4:	0212      	lsls	r2, r2, #8
1000e4d6:	4302      	orrs	r2, r0
1000e4d8:	805a      	strh	r2, [r3, #2]
1000e4da:	78ca      	ldrb	r2, [r1, #3]
1000e4dc:	7888      	ldrb	r0, [r1, #2]
1000e4de:	0212      	lsls	r2, r2, #8
1000e4e0:	4302      	orrs	r2, r0
1000e4e2:	809a      	strh	r2, [r3, #4]
1000e4e4:	794a      	ldrb	r2, [r1, #5]
1000e4e6:	7908      	ldrb	r0, [r1, #4]
1000e4e8:	0212      	lsls	r2, r2, #8
1000e4ea:	4302      	orrs	r2, r0
1000e4ec:	80da      	strh	r2, [r3, #6]
1000e4ee:	3308      	adds	r3, #8
1000e4f0:	1c18      	adds	r0, r3, #0
1000e4f2:	3106      	adds	r1, #6
1000e4f4:	4b01      	ldr	r3, [pc, #4]	; (1000e4fc <gattc_write_req_ind_parser+0x34>)
1000e4f6:	4798      	blx	r3
1000e4f8:	bd08      	pop	{r3, pc}
1000e4fa:	46c0      	nop			; (mov r8, r8)
1000e4fc:	10010517 	.word	0x10010517

1000e500 <gattc_att_info_req_parser>:
1000e500:	7843      	ldrb	r3, [r0, #1]
1000e502:	7802      	ldrb	r2, [r0, #0]
1000e504:	021b      	lsls	r3, r3, #8
1000e506:	4313      	orrs	r3, r2
1000e508:	800b      	strh	r3, [r1, #0]
1000e50a:	4770      	bx	lr

1000e50c <gattc_read_cfm>:
1000e50c:	b538      	push	{r3, r4, r5, lr}
1000e50e:	2514      	movs	r5, #20
1000e510:	1c1c      	adds	r4, r3, #0
1000e512:	4b14      	ldr	r3, [pc, #80]	; (1000e564 <gattc_read_cfm+0x58>)
1000e514:	70d9      	strb	r1, [r3, #3]
1000e516:	4914      	ldr	r1, [pc, #80]	; (1000e568 <gattc_read_cfm+0x5c>)
1000e518:	701d      	strb	r5, [r3, #0]
1000e51a:	3d08      	subs	r5, #8
1000e51c:	705d      	strb	r5, [r3, #1]
1000e51e:	709d      	strb	r5, [r3, #2]
1000e520:	880d      	ldrh	r5, [r1, #0]
1000e522:	8809      	ldrh	r1, [r1, #0]
1000e524:	7218      	strb	r0, [r3, #8]
1000e526:	0a09      	lsrs	r1, r1, #8
1000e528:	7159      	strb	r1, [r3, #5]
1000e52a:	0a00      	lsrs	r0, r0, #8
1000e52c:	0a21      	lsrs	r1, r4, #8
1000e52e:	711d      	strb	r5, [r3, #4]
1000e530:	7258      	strb	r0, [r3, #9]
1000e532:	729c      	strb	r4, [r3, #10]
1000e534:	72d9      	strb	r1, [r3, #11]
1000e536:	731a      	strb	r2, [r3, #12]
1000e538:	1c1d      	adds	r5, r3, #0
1000e53a:	2c00      	cmp	r4, #0
1000e53c:	d007      	beq.n	1000e54e <gattc_read_cfm+0x42>
1000e53e:	9904      	ldr	r1, [sp, #16]
1000e540:	1c22      	adds	r2, r4, #0
1000e542:	480a      	ldr	r0, [pc, #40]	; (1000e56c <gattc_read_cfm+0x60>)
1000e544:	4b0a      	ldr	r3, [pc, #40]	; (1000e570 <gattc_read_cfm+0x64>)
1000e546:	340d      	adds	r4, #13
1000e548:	4798      	blx	r3
1000e54a:	b2a1      	uxth	r1, r4
1000e54c:	e001      	b.n	1000e552 <gattc_read_cfm+0x46>
1000e54e:	210e      	movs	r1, #14
1000e550:	735c      	strb	r4, [r3, #13]
1000e552:	1c0b      	adds	r3, r1, #0
1000e554:	3b08      	subs	r3, #8
1000e556:	71ab      	strb	r3, [r5, #6]
1000e558:	121b      	asrs	r3, r3, #8
1000e55a:	71eb      	strb	r3, [r5, #7]
1000e55c:	1c28      	adds	r0, r5, #0
1000e55e:	4b05      	ldr	r3, [pc, #20]	; (1000e574 <gattc_read_cfm+0x68>)
1000e560:	4798      	blx	r3
1000e562:	bd38      	pop	{r3, r4, r5, pc}
1000e564:	1001505c 	.word	0x1001505c
1000e568:	10014cec 	.word	0x10014cec
1000e56c:	10015069 	.word	0x10015069
1000e570:	10010517 	.word	0x10010517
1000e574:	1000d165 	.word	0x1000d165

1000e578 <gattc_write_cfm>:
1000e578:	4b0d      	ldr	r3, [pc, #52]	; (1000e5b0 <gattc_write_cfm+0x38>)
1000e57a:	b510      	push	{r4, lr}
1000e57c:	729a      	strb	r2, [r3, #10]
1000e57e:	2203      	movs	r2, #3
1000e580:	2416      	movs	r4, #22
1000e582:	719a      	strb	r2, [r3, #6]
1000e584:	2200      	movs	r2, #0
1000e586:	70d9      	strb	r1, [r3, #3]
1000e588:	490a      	ldr	r1, [pc, #40]	; (1000e5b4 <gattc_write_cfm+0x3c>)
1000e58a:	701c      	strb	r4, [r3, #0]
1000e58c:	3c0a      	subs	r4, #10
1000e58e:	705c      	strb	r4, [r3, #1]
1000e590:	709c      	strb	r4, [r3, #2]
1000e592:	880c      	ldrh	r4, [r1, #0]
1000e594:	8809      	ldrh	r1, [r1, #0]
1000e596:	7218      	strb	r0, [r3, #8]
1000e598:	0a09      	lsrs	r1, r1, #8
1000e59a:	0a00      	lsrs	r0, r0, #8
1000e59c:	711c      	strb	r4, [r3, #4]
1000e59e:	7159      	strb	r1, [r3, #5]
1000e5a0:	7258      	strb	r0, [r3, #9]
1000e5a2:	71da      	strb	r2, [r3, #7]
1000e5a4:	1c18      	adds	r0, r3, #0
1000e5a6:	210b      	movs	r1, #11
1000e5a8:	4b03      	ldr	r3, [pc, #12]	; (1000e5b8 <gattc_write_cfm+0x40>)
1000e5aa:	4798      	blx	r3
1000e5ac:	bd10      	pop	{r4, pc}
1000e5ae:	46c0      	nop			; (mov r8, r8)
1000e5b0:	1001505c 	.word	0x1001505c
1000e5b4:	10014cec 	.word	0x10014cec
1000e5b8:	1000d165 	.word	0x1000d165

1000e5bc <gattc_att_info_cfm>:
1000e5bc:	b538      	push	{r3, r4, r5, lr}
1000e5be:	4c0e      	ldr	r4, [pc, #56]	; (1000e5f8 <gattc_att_info_cfm+0x3c>)
1000e5c0:	2518      	movs	r5, #24
1000e5c2:	7323      	strb	r3, [r4, #12]
1000e5c4:	2305      	movs	r3, #5
1000e5c6:	71a3      	strb	r3, [r4, #6]
1000e5c8:	2300      	movs	r3, #0
1000e5ca:	70e1      	strb	r1, [r4, #3]
1000e5cc:	490b      	ldr	r1, [pc, #44]	; (1000e5fc <gattc_att_info_cfm+0x40>)
1000e5ce:	7025      	strb	r5, [r4, #0]
1000e5d0:	3d0c      	subs	r5, #12
1000e5d2:	7065      	strb	r5, [r4, #1]
1000e5d4:	70a5      	strb	r5, [r4, #2]
1000e5d6:	880d      	ldrh	r5, [r1, #0]
1000e5d8:	8809      	ldrh	r1, [r1, #0]
1000e5da:	7220      	strb	r0, [r4, #8]
1000e5dc:	0a09      	lsrs	r1, r1, #8
1000e5de:	0a00      	lsrs	r0, r0, #8
1000e5e0:	7161      	strb	r1, [r4, #5]
1000e5e2:	7260      	strb	r0, [r4, #9]
1000e5e4:	72a2      	strb	r2, [r4, #10]
1000e5e6:	71e3      	strb	r3, [r4, #7]
1000e5e8:	0a12      	lsrs	r2, r2, #8
1000e5ea:	1c20      	adds	r0, r4, #0
1000e5ec:	210d      	movs	r1, #13
1000e5ee:	4b04      	ldr	r3, [pc, #16]	; (1000e600 <gattc_att_info_cfm+0x44>)
1000e5f0:	7125      	strb	r5, [r4, #4]
1000e5f2:	72e2      	strb	r2, [r4, #11]
1000e5f4:	4798      	blx	r3
1000e5f6:	bd38      	pop	{r3, r4, r5, pc}
1000e5f8:	1001505c 	.word	0x1001505c
1000e5fc:	10014cec 	.word	0x10014cec
1000e600:	1000d165 	.word	0x1000d165

1000e604 <gattc_event_cfm_handler>:
1000e604:	220e      	movs	r2, #14
1000e606:	b508      	push	{r3, lr}
1000e608:	4b0b      	ldr	r3, [pc, #44]	; (1000e638 <gattc_event_cfm_handler+0x34>)
1000e60a:	701a      	strb	r2, [r3, #0]
1000e60c:	3a02      	subs	r2, #2
1000e60e:	705a      	strb	r2, [r3, #1]
1000e610:	709a      	strb	r2, [r3, #2]
1000e612:	4a0a      	ldr	r2, [pc, #40]	; (1000e63c <gattc_event_cfm_handler+0x38>)
1000e614:	70d8      	strb	r0, [r3, #3]
1000e616:	8810      	ldrh	r0, [r2, #0]
1000e618:	8812      	ldrh	r2, [r2, #0]
1000e61a:	7219      	strb	r1, [r3, #8]
1000e61c:	0a12      	lsrs	r2, r2, #8
1000e61e:	715a      	strb	r2, [r3, #5]
1000e620:	2202      	movs	r2, #2
1000e622:	719a      	strb	r2, [r3, #6]
1000e624:	2200      	movs	r2, #0
1000e626:	0a09      	lsrs	r1, r1, #8
1000e628:	7118      	strb	r0, [r3, #4]
1000e62a:	7259      	strb	r1, [r3, #9]
1000e62c:	71da      	strb	r2, [r3, #7]
1000e62e:	1c18      	adds	r0, r3, #0
1000e630:	210a      	movs	r1, #10
1000e632:	4b03      	ldr	r3, [pc, #12]	; (1000e640 <gattc_event_cfm_handler+0x3c>)
1000e634:	4798      	blx	r3
1000e636:	bd08      	pop	{r3, pc}
1000e638:	1001505c 	.word	0x1001505c
1000e63c:	10014cec 	.word	0x10014cec
1000e640:	1000d165 	.word	0x1000d165

1000e644 <gattc_disc_svc_ind_parser>:
1000e644:	b570      	push	{r4, r5, r6, lr}
1000e646:	1c15      	adds	r5, r2, #0
1000e648:	0a00      	lsrs	r0, r0, #8
1000e64a:	8010      	strh	r0, [r2, #0]
1000e64c:	784b      	ldrb	r3, [r1, #1]
1000e64e:	780a      	ldrb	r2, [r1, #0]
1000e650:	021b      	lsls	r3, r3, #8
1000e652:	4313      	orrs	r3, r2
1000e654:	806b      	strh	r3, [r5, #2]
1000e656:	78cb      	ldrb	r3, [r1, #3]
1000e658:	788a      	ldrb	r2, [r1, #2]
1000e65a:	021b      	lsls	r3, r3, #8
1000e65c:	4313      	orrs	r3, r2
1000e65e:	80ab      	strh	r3, [r5, #4]
1000e660:	790e      	ldrb	r6, [r1, #4]
1000e662:	4b05      	ldr	r3, [pc, #20]	; (1000e678 <gattc_disc_svc_ind_parser+0x34>)
1000e664:	1c30      	adds	r0, r6, #0
1000e666:	1c0c      	adds	r4, r1, #0
1000e668:	4798      	blx	r3
1000e66a:	1c32      	adds	r2, r6, #0
1000e66c:	71a8      	strb	r0, [r5, #6]
1000e66e:	1d61      	adds	r1, r4, #5
1000e670:	1de8      	adds	r0, r5, #7
1000e672:	4b02      	ldr	r3, [pc, #8]	; (1000e67c <gattc_disc_svc_ind_parser+0x38>)
1000e674:	4798      	blx	r3
1000e676:	bd70      	pop	{r4, r5, r6, pc}
1000e678:	1000cad5 	.word	0x1000cad5
1000e67c:	10010517 	.word	0x10010517

1000e680 <gattc_disc_svc_incl_ind_parser>:
1000e680:	b570      	push	{r4, r5, r6, lr}
1000e682:	1c15      	adds	r5, r2, #0
1000e684:	0a00      	lsrs	r0, r0, #8
1000e686:	8010      	strh	r0, [r2, #0]
1000e688:	784b      	ldrb	r3, [r1, #1]
1000e68a:	780a      	ldrb	r2, [r1, #0]
1000e68c:	021b      	lsls	r3, r3, #8
1000e68e:	4313      	orrs	r3, r2
1000e690:	806b      	strh	r3, [r5, #2]
1000e692:	78cb      	ldrb	r3, [r1, #3]
1000e694:	788a      	ldrb	r2, [r1, #2]
1000e696:	021b      	lsls	r3, r3, #8
1000e698:	4313      	orrs	r3, r2
1000e69a:	80ab      	strh	r3, [r5, #4]
1000e69c:	794b      	ldrb	r3, [r1, #5]
1000e69e:	790a      	ldrb	r2, [r1, #4]
1000e6a0:	021b      	lsls	r3, r3, #8
1000e6a2:	4313      	orrs	r3, r2
1000e6a4:	80eb      	strh	r3, [r5, #6]
1000e6a6:	798e      	ldrb	r6, [r1, #6]
1000e6a8:	4b05      	ldr	r3, [pc, #20]	; (1000e6c0 <gattc_disc_svc_incl_ind_parser+0x40>)
1000e6aa:	1c30      	adds	r0, r6, #0
1000e6ac:	1c0c      	adds	r4, r1, #0
1000e6ae:	4798      	blx	r3
1000e6b0:	7228      	strb	r0, [r5, #8]
1000e6b2:	1c28      	adds	r0, r5, #0
1000e6b4:	1c32      	adds	r2, r6, #0
1000e6b6:	1de1      	adds	r1, r4, #7
1000e6b8:	4b02      	ldr	r3, [pc, #8]	; (1000e6c4 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e6ba:	3009      	adds	r0, #9
1000e6bc:	4798      	blx	r3
1000e6be:	bd70      	pop	{r4, r5, r6, pc}
1000e6c0:	1000cad5 	.word	0x1000cad5
1000e6c4:	10010517 	.word	0x10010517

1000e6c8 <gattc_disc_char_ind_parser>:
1000e6c8:	b570      	push	{r4, r5, r6, lr}
1000e6ca:	1c15      	adds	r5, r2, #0
1000e6cc:	0a00      	lsrs	r0, r0, #8
1000e6ce:	8010      	strh	r0, [r2, #0]
1000e6d0:	784b      	ldrb	r3, [r1, #1]
1000e6d2:	780a      	ldrb	r2, [r1, #0]
1000e6d4:	021b      	lsls	r3, r3, #8
1000e6d6:	4313      	orrs	r3, r2
1000e6d8:	806b      	strh	r3, [r5, #2]
1000e6da:	78cb      	ldrb	r3, [r1, #3]
1000e6dc:	788a      	ldrb	r2, [r1, #2]
1000e6de:	021b      	lsls	r3, r3, #8
1000e6e0:	4313      	orrs	r3, r2
1000e6e2:	80ab      	strh	r3, [r5, #4]
1000e6e4:	790b      	ldrb	r3, [r1, #4]
1000e6e6:	1c0c      	adds	r4, r1, #0
1000e6e8:	71ab      	strb	r3, [r5, #6]
1000e6ea:	794e      	ldrb	r6, [r1, #5]
1000e6ec:	4b05      	ldr	r3, [pc, #20]	; (1000e704 <gattc_disc_char_ind_parser+0x3c>)
1000e6ee:	1c30      	adds	r0, r6, #0
1000e6f0:	4798      	blx	r3
1000e6f2:	71e8      	strb	r0, [r5, #7]
1000e6f4:	1c28      	adds	r0, r5, #0
1000e6f6:	1c32      	adds	r2, r6, #0
1000e6f8:	1da1      	adds	r1, r4, #6
1000e6fa:	4b03      	ldr	r3, [pc, #12]	; (1000e708 <gattc_disc_char_ind_parser+0x40>)
1000e6fc:	3008      	adds	r0, #8
1000e6fe:	4798      	blx	r3
1000e700:	bd70      	pop	{r4, r5, r6, pc}
1000e702:	46c0      	nop			; (mov r8, r8)
1000e704:	1000cad5 	.word	0x1000cad5
1000e708:	10010517 	.word	0x10010517

1000e70c <gattc_disc_char_desc_ind_parser>:
1000e70c:	b570      	push	{r4, r5, r6, lr}
1000e70e:	1c15      	adds	r5, r2, #0
1000e710:	0a00      	lsrs	r0, r0, #8
1000e712:	8010      	strh	r0, [r2, #0]
1000e714:	784b      	ldrb	r3, [r1, #1]
1000e716:	780a      	ldrb	r2, [r1, #0]
1000e718:	021b      	lsls	r3, r3, #8
1000e71a:	4313      	orrs	r3, r2
1000e71c:	806b      	strh	r3, [r5, #2]
1000e71e:	788e      	ldrb	r6, [r1, #2]
1000e720:	4b05      	ldr	r3, [pc, #20]	; (1000e738 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e722:	1c30      	adds	r0, r6, #0
1000e724:	1c0c      	adds	r4, r1, #0
1000e726:	4798      	blx	r3
1000e728:	1c32      	adds	r2, r6, #0
1000e72a:	7128      	strb	r0, [r5, #4]
1000e72c:	1ce1      	adds	r1, r4, #3
1000e72e:	1d68      	adds	r0, r5, #5
1000e730:	4b02      	ldr	r3, [pc, #8]	; (1000e73c <gattc_disc_char_desc_ind_parser+0x30>)
1000e732:	4798      	blx	r3
1000e734:	bd70      	pop	{r4, r5, r6, pc}
1000e736:	46c0      	nop			; (mov r8, r8)
1000e738:	1000cad5 	.word	0x1000cad5
1000e73c:	10010517 	.word	0x10010517

1000e740 <gattc_event_ind_and_notification_parser>:
1000e740:	b510      	push	{r4, lr}
1000e742:	780c      	ldrb	r4, [r1, #0]
1000e744:	1c13      	adds	r3, r2, #0
1000e746:	2c12      	cmp	r4, #18
1000e748:	d10e      	bne.n	1000e768 <gattc_event_ind_and_notification_parser+0x28>
1000e74a:	0a00      	lsrs	r0, r0, #8
1000e74c:	8010      	strh	r0, [r2, #0]
1000e74e:	788a      	ldrb	r2, [r1, #2]
1000e750:	709a      	strb	r2, [r3, #2]
1000e752:	7948      	ldrb	r0, [r1, #5]
1000e754:	790c      	ldrb	r4, [r1, #4]
1000e756:	0200      	lsls	r0, r0, #8
1000e758:	4320      	orrs	r0, r4
1000e75a:	8098      	strh	r0, [r3, #4]
1000e75c:	3106      	adds	r1, #6
1000e75e:	1d98      	adds	r0, r3, #6
1000e760:	4b0b      	ldr	r3, [pc, #44]	; (1000e790 <gattc_event_ind_and_notification_parser+0x50>)
1000e762:	4798      	blx	r3
1000e764:	221b      	movs	r2, #27
1000e766:	e010      	b.n	1000e78a <gattc_event_ind_and_notification_parser+0x4a>
1000e768:	2200      	movs	r2, #0
1000e76a:	2c13      	cmp	r4, #19
1000e76c:	d10d      	bne.n	1000e78a <gattc_event_ind_and_notification_parser+0x4a>
1000e76e:	0a00      	lsrs	r0, r0, #8
1000e770:	8018      	strh	r0, [r3, #0]
1000e772:	788a      	ldrb	r2, [r1, #2]
1000e774:	709a      	strb	r2, [r3, #2]
1000e776:	7908      	ldrb	r0, [r1, #4]
1000e778:	78cc      	ldrb	r4, [r1, #3]
1000e77a:	0200      	lsls	r0, r0, #8
1000e77c:	4320      	orrs	r0, r4
1000e77e:	8098      	strh	r0, [r3, #4]
1000e780:	3106      	adds	r1, #6
1000e782:	1d98      	adds	r0, r3, #6
1000e784:	4b02      	ldr	r3, [pc, #8]	; (1000e790 <gattc_event_ind_and_notification_parser+0x50>)
1000e786:	4798      	blx	r3
1000e788:	221c      	movs	r2, #28
1000e78a:	1c10      	adds	r0, r2, #0
1000e78c:	bd10      	pop	{r4, pc}
1000e78e:	46c0      	nop			; (mov r8, r8)
1000e790:	10010517 	.word	0x10010517

1000e794 <gattc_complete_evt_handler>:
1000e794:	b500      	push	{lr}
1000e796:	0a00      	lsrs	r0, r0, #8
1000e798:	8010      	strh	r0, [r2, #0]
1000e79a:	7808      	ldrb	r0, [r1, #0]
1000e79c:	7090      	strb	r0, [r2, #2]
1000e79e:	784b      	ldrb	r3, [r1, #1]
1000e7a0:	3801      	subs	r0, #1
1000e7a2:	70d3      	strb	r3, [r2, #3]
1000e7a4:	2813      	cmp	r0, #19
1000e7a6:	d82c      	bhi.n	1000e802 <gattc_complete_evt_handler+0x6e>
1000e7a8:	f000 f99a 	bl	1000eae0 <__gnu_thumb1_case_uqi>
1000e7ac:	0a0a0a0c 	.word	0x0a0a0a0c
1000e7b0:	210a0a0a 	.word	0x210a0a0a
1000e7b4:	111f2121 	.word	0x111f2121
1000e7b8:	2b111111 	.word	0x2b111111
1000e7bc:	2919132b 	.word	0x2919132b
1000e7c0:	2017      	movs	r0, #23
1000e7c2:	e01f      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7c4:	2024      	movs	r0, #36	; 0x24
1000e7c6:	2b00      	cmp	r3, #0
1000e7c8:	d11c      	bne.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7ca:	3017      	adds	r0, #23
1000e7cc:	e01a      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7ce:	2025      	movs	r0, #37	; 0x25
1000e7d0:	e018      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7d2:	4a0d      	ldr	r2, [pc, #52]	; (1000e808 <gattc_complete_evt_handler+0x74>)
1000e7d4:	201d      	movs	r0, #29
1000e7d6:	6813      	ldr	r3, [r2, #0]
1000e7d8:	3b01      	subs	r3, #1
1000e7da:	6013      	str	r3, [r2, #0]
1000e7dc:	e012      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7de:	4a0a      	ldr	r2, [pc, #40]	; (1000e808 <gattc_complete_evt_handler+0x74>)
1000e7e0:	201e      	movs	r0, #30
1000e7e2:	6813      	ldr	r3, [r2, #0]
1000e7e4:	3b01      	subs	r3, #1
1000e7e6:	6013      	str	r3, [r2, #0]
1000e7e8:	e00c      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7ea:	2019      	movs	r0, #25
1000e7ec:	e00a      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7ee:	203b      	movs	r0, #59	; 0x3b
1000e7f0:	2b00      	cmp	r3, #0
1000e7f2:	d007      	beq.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7f4:	2182      	movs	r1, #130	; 0x82
1000e7f6:	0089      	lsls	r1, r1, #2
1000e7f8:	5453      	strb	r3, [r2, r1]
1000e7fa:	3823      	subs	r0, #35	; 0x23
1000e7fc:	e002      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e7fe:	2021      	movs	r0, #33	; 0x21
1000e800:	e000      	b.n	1000e804 <gattc_complete_evt_handler+0x70>
1000e802:	2000      	movs	r0, #0
1000e804:	bd00      	pop	{pc}
1000e806:	46c0      	nop			; (mov r8, r8)
1000e808:	10014068 	.word	0x10014068

1000e80c <gattc_event_mtu_changed_ind_parser>:
1000e80c:	0a00      	lsrs	r0, r0, #8
1000e80e:	8010      	strh	r0, [r2, #0]
1000e810:	784b      	ldrb	r3, [r1, #1]
1000e812:	7809      	ldrb	r1, [r1, #0]
1000e814:	021b      	lsls	r3, r3, #8
1000e816:	430b      	orrs	r3, r1
1000e818:	8053      	strh	r3, [r2, #2]
1000e81a:	4770      	bx	lr

1000e81c <gattc_read_ind_parser>:
1000e81c:	0a00      	lsrs	r0, r0, #8
1000e81e:	b508      	push	{r3, lr}
1000e820:	8010      	strh	r0, [r2, #0]
1000e822:	1c13      	adds	r3, r2, #0
1000e824:	2282      	movs	r2, #130	; 0x82
1000e826:	2000      	movs	r0, #0
1000e828:	0092      	lsls	r2, r2, #2
1000e82a:	5498      	strb	r0, [r3, r2]
1000e82c:	784a      	ldrb	r2, [r1, #1]
1000e82e:	7808      	ldrb	r0, [r1, #0]
1000e830:	0212      	lsls	r2, r2, #8
1000e832:	4302      	orrs	r2, r0
1000e834:	805a      	strh	r2, [r3, #2]
1000e836:	78ca      	ldrb	r2, [r1, #3]
1000e838:	7888      	ldrb	r0, [r1, #2]
1000e83a:	0212      	lsls	r2, r2, #8
1000e83c:	4302      	orrs	r2, r0
1000e83e:	80da      	strh	r2, [r3, #6]
1000e840:	794a      	ldrb	r2, [r1, #5]
1000e842:	7908      	ldrb	r0, [r1, #4]
1000e844:	0212      	lsls	r2, r2, #8
1000e846:	4302      	orrs	r2, r0
1000e848:	809a      	strh	r2, [r3, #4]
1000e84a:	3308      	adds	r3, #8
1000e84c:	1c18      	adds	r0, r3, #0
1000e84e:	3106      	adds	r1, #6
1000e850:	4b01      	ldr	r3, [pc, #4]	; (1000e858 <gattc_read_ind_parser+0x3c>)
1000e852:	4798      	blx	r3
1000e854:	bd08      	pop	{r3, pc}
1000e856:	46c0      	nop			; (mov r8, r8)
1000e858:	10010517 	.word	0x10010517

1000e85c <gattc_svc_changed_cfg_ind_parser>:
1000e85c:	0a00      	lsrs	r0, r0, #8
1000e85e:	8010      	strh	r0, [r2, #0]
1000e860:	784b      	ldrb	r3, [r1, #1]
1000e862:	7809      	ldrb	r1, [r1, #0]
1000e864:	021b      	lsls	r3, r3, #8
1000e866:	430b      	orrs	r3, r1
1000e868:	8053      	strh	r3, [r2, #2]
1000e86a:	4770      	bx	lr

1000e86c <init_gattc_task_module>:
1000e86c:	2300      	movs	r3, #0
1000e86e:	4a02      	ldr	r2, [pc, #8]	; (1000e878 <init_gattc_task_module+0xc>)
1000e870:	8013      	strh	r3, [r2, #0]
1000e872:	4a02      	ldr	r2, [pc, #8]	; (1000e87c <init_gattc_task_module+0x10>)
1000e874:	8013      	strh	r3, [r2, #0]
1000e876:	4770      	bx	lr
1000e878:	10014062 	.word	0x10014062
1000e87c:	10014064 	.word	0x10014064

1000e880 <gattm_att_set_value_req_handler>:
1000e880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e882:	466b      	mov	r3, sp
1000e884:	1dde      	adds	r6, r3, #7
1000e886:	2300      	movs	r3, #0
1000e888:	1c0d      	adds	r5, r1, #0
1000e88a:	210c      	movs	r1, #12
1000e88c:	270b      	movs	r7, #11
1000e88e:	4c17      	ldr	r4, [pc, #92]	; (1000e8ec <gattm_att_set_value_req_handler+0x6c>)
1000e890:	7033      	strb	r3, [r6, #0]
1000e892:	70e3      	strb	r3, [r4, #3]
1000e894:	4b16      	ldr	r3, [pc, #88]	; (1000e8f0 <gattm_att_set_value_req_handler+0x70>)
1000e896:	7021      	strb	r1, [r4, #0]
1000e898:	8819      	ldrh	r1, [r3, #0]
1000e89a:	881b      	ldrh	r3, [r3, #0]
1000e89c:	7220      	strb	r0, [r4, #8]
1000e89e:	0a1b      	lsrs	r3, r3, #8
1000e8a0:	7163      	strb	r3, [r4, #5]
1000e8a2:	0a00      	lsrs	r0, r0, #8
1000e8a4:	0a2b      	lsrs	r3, r5, #8
1000e8a6:	7121      	strb	r1, [r4, #4]
1000e8a8:	7260      	strb	r0, [r4, #9]
1000e8aa:	1c11      	adds	r1, r2, #0
1000e8ac:	72a5      	strb	r5, [r4, #10]
1000e8ae:	1c2a      	adds	r2, r5, #0
1000e8b0:	72e3      	strb	r3, [r4, #11]
1000e8b2:	350c      	adds	r5, #12
1000e8b4:	4b0f      	ldr	r3, [pc, #60]	; (1000e8f4 <gattm_att_set_value_req_handler+0x74>)
1000e8b6:	4810      	ldr	r0, [pc, #64]	; (1000e8f8 <gattm_att_set_value_req_handler+0x78>)
1000e8b8:	7067      	strb	r7, [r4, #1]
1000e8ba:	70a7      	strb	r7, [r4, #2]
1000e8bc:	4798      	blx	r3
1000e8be:	b2a9      	uxth	r1, r5
1000e8c0:	4b0e      	ldr	r3, [pc, #56]	; (1000e8fc <gattm_att_set_value_req_handler+0x7c>)
1000e8c2:	4d0f      	ldr	r5, [pc, #60]	; (1000e900 <gattm_att_set_value_req_handler+0x80>)
1000e8c4:	1c20      	adds	r0, r4, #0
1000e8c6:	802b      	strh	r3, [r5, #0]
1000e8c8:	1c0b      	adds	r3, r1, #0
1000e8ca:	3b08      	subs	r3, #8
1000e8cc:	71a3      	strb	r3, [r4, #6]
1000e8ce:	121b      	asrs	r3, r3, #8
1000e8d0:	71e3      	strb	r3, [r4, #7]
1000e8d2:	4b0c      	ldr	r3, [pc, #48]	; (1000e904 <gattm_att_set_value_req_handler+0x84>)
1000e8d4:	80af      	strh	r7, [r5, #4]
1000e8d6:	4798      	blx	r3
1000e8d8:	1c30      	adds	r0, r6, #0
1000e8da:	4b0b      	ldr	r3, [pc, #44]	; (1000e908 <gattm_att_set_value_req_handler+0x88>)
1000e8dc:	4798      	blx	r3
1000e8de:	7833      	ldrb	r3, [r6, #0]
1000e8e0:	20e2      	movs	r0, #226	; 0xe2
1000e8e2:	2b00      	cmp	r3, #0
1000e8e4:	d101      	bne.n	1000e8ea <gattm_att_set_value_req_handler+0x6a>
1000e8e6:	68ab      	ldr	r3, [r5, #8]
1000e8e8:	7898      	ldrb	r0, [r3, #2]
1000e8ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e8ec:	1001505c 	.word	0x1001505c
1000e8f0:	10014cec 	.word	0x10014cec
1000e8f4:	10010517 	.word	0x10010517
1000e8f8:	10015068 	.word	0x10015068
1000e8fc:	00000b0d 	.word	0x00000b0d
1000e900:	10014ce0 	.word	0x10014ce0
1000e904:	1000d165 	.word	0x1000d165
1000e908:	1000d1c9 	.word	0x1000d1c9

1000e90c <gattm_att_get_value_req_handler>:
1000e90c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e90e:	b085      	sub	sp, #20
1000e910:	9201      	str	r2, [sp, #4]
1000e912:	220a      	movs	r2, #10
1000e914:	1c04      	adds	r4, r0, #0
1000e916:	481d      	ldr	r0, [pc, #116]	; (1000e98c <gattm_att_get_value_req_handler+0x80>)
1000e918:	ab02      	add	r3, sp, #8
1000e91a:	1dde      	adds	r6, r3, #7
1000e91c:	7002      	strb	r2, [r0, #0]
1000e91e:	2300      	movs	r3, #0
1000e920:	220b      	movs	r2, #11
1000e922:	4d1b      	ldr	r5, [pc, #108]	; (1000e990 <gattm_att_get_value_req_handler+0x84>)
1000e924:	1c0f      	adds	r7, r1, #0
1000e926:	8829      	ldrh	r1, [r5, #0]
1000e928:	882d      	ldrh	r5, [r5, #0]
1000e92a:	7101      	strb	r1, [r0, #4]
1000e92c:	0a2d      	lsrs	r5, r5, #8
1000e92e:	7145      	strb	r5, [r0, #5]
1000e930:	0a25      	lsrs	r5, r4, #8
1000e932:	7245      	strb	r5, [r0, #9]
1000e934:	4917      	ldr	r1, [pc, #92]	; (1000e994 <gattm_att_get_value_req_handler+0x88>)
1000e936:	4d18      	ldr	r5, [pc, #96]	; (1000e998 <gattm_att_get_value_req_handler+0x8c>)
1000e938:	7033      	strb	r3, [r6, #0]
1000e93a:	7042      	strb	r2, [r0, #1]
1000e93c:	7082      	strb	r2, [r0, #2]
1000e93e:	70c3      	strb	r3, [r0, #3]
1000e940:	8029      	strh	r1, [r5, #0]
1000e942:	80aa      	strh	r2, [r5, #4]
1000e944:	71c3      	strb	r3, [r0, #7]
1000e946:	3a09      	subs	r2, #9
1000e948:	210a      	movs	r1, #10
1000e94a:	4b14      	ldr	r3, [pc, #80]	; (1000e99c <gattm_att_get_value_req_handler+0x90>)
1000e94c:	7182      	strb	r2, [r0, #6]
1000e94e:	7204      	strb	r4, [r0, #8]
1000e950:	4798      	blx	r3
1000e952:	1c30      	adds	r0, r6, #0
1000e954:	4b12      	ldr	r3, [pc, #72]	; (1000e9a0 <gattm_att_get_value_req_handler+0x94>)
1000e956:	4798      	blx	r3
1000e958:	7833      	ldrb	r3, [r6, #0]
1000e95a:	20e2      	movs	r0, #226	; 0xe2
1000e95c:	2b00      	cmp	r3, #0
1000e95e:	d112      	bne.n	1000e986 <gattm_att_get_value_req_handler+0x7a>
1000e960:	68a9      	ldr	r1, [r5, #8]
1000e962:	9801      	ldr	r0, [sp, #4]
1000e964:	784d      	ldrb	r5, [r1, #1]
1000e966:	780b      	ldrb	r3, [r1, #0]
1000e968:	78ca      	ldrb	r2, [r1, #3]
1000e96a:	022d      	lsls	r5, r5, #8
1000e96c:	431d      	orrs	r5, r3
1000e96e:	788b      	ldrb	r3, [r1, #2]
1000e970:	0212      	lsls	r2, r2, #8
1000e972:	431a      	orrs	r2, r3
1000e974:	803a      	strh	r2, [r7, #0]
1000e976:	790e      	ldrb	r6, [r1, #4]
1000e978:	4b0a      	ldr	r3, [pc, #40]	; (1000e9a4 <gattm_att_get_value_req_handler+0x98>)
1000e97a:	3105      	adds	r1, #5
1000e97c:	4798      	blx	r3
1000e97e:	20e2      	movs	r0, #226	; 0xe2
1000e980:	42ac      	cmp	r4, r5
1000e982:	d100      	bne.n	1000e986 <gattm_att_get_value_req_handler+0x7a>
1000e984:	1c30      	adds	r0, r6, #0
1000e986:	b005      	add	sp, #20
1000e988:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e98a:	46c0      	nop			; (mov r8, r8)
1000e98c:	1001505c 	.word	0x1001505c
1000e990:	10014cec 	.word	0x10014cec
1000e994:	00000b0b 	.word	0x00000b0b
1000e998:	10014ce0 	.word	0x10014ce0
1000e99c:	1000d165 	.word	0x1000d165
1000e9a0:	1000d1c9 	.word	0x1000d1c9
1000e9a4:	10010517 	.word	0x10010517

1000e9a8 <htpt_create_db_req_handler>:
1000e9a8:	b570      	push	{r4, r5, r6, lr}
1000e9aa:	b086      	sub	sp, #24
1000e9ac:	ac04      	add	r4, sp, #16
1000e9ae:	80a3      	strh	r3, [r4, #4]
1000e9b0:	4b0b      	ldr	r3, [pc, #44]	; (1000e9e0 <htpt_create_db_req_handler+0x38>)
1000e9b2:	8062      	strh	r2, [r4, #2]
1000e9b4:	1c06      	adds	r6, r0, #0
1000e9b6:	881a      	ldrh	r2, [r3, #0]
1000e9b8:	2308      	movs	r3, #8
1000e9ba:	a80a      	add	r0, sp, #40	; 0x28
1000e9bc:	8805      	ldrh	r5, [r0, #0]
1000e9be:	a80b      	add	r0, sp, #44	; 0x2c
1000e9c0:	7026      	strb	r6, [r4, #0]
1000e9c2:	7061      	strb	r1, [r4, #1]
1000e9c4:	80e5      	strh	r5, [r4, #6]
1000e9c6:	7800      	ldrb	r0, [r0, #0]
1000e9c8:	9301      	str	r3, [sp, #4]
1000e9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e9cc:	9400      	str	r4, [sp, #0]
1000e9ce:	9302      	str	r3, [sp, #8]
1000e9d0:	b292      	uxth	r2, r2
1000e9d2:	211b      	movs	r1, #27
1000e9d4:	2300      	movs	r3, #0
1000e9d6:	4c03      	ldr	r4, [pc, #12]	; (1000e9e4 <htpt_create_db_req_handler+0x3c>)
1000e9d8:	47a0      	blx	r4
1000e9da:	b006      	add	sp, #24
1000e9dc:	bd70      	pop	{r4, r5, r6, pc}
1000e9de:	46c0      	nop			; (mov r8, r8)
1000e9e0:	10014cec 	.word	0x10014cec
1000e9e4:	1000e3b5 	.word	0x1000e3b5

1000e9e8 <htpt_enable_req_handler>:
1000e9e8:	221b      	movs	r2, #27
1000e9ea:	b538      	push	{r3, r4, r5, lr}
1000e9ec:	4b0b      	ldr	r3, [pc, #44]	; (1000ea1c <htpt_enable_req_handler+0x34>)
1000e9ee:	2400      	movs	r4, #0
1000e9f0:	705a      	strb	r2, [r3, #1]
1000e9f2:	709a      	strb	r2, [r3, #2]
1000e9f4:	4a0a      	ldr	r2, [pc, #40]	; (1000ea20 <htpt_enable_req_handler+0x38>)
1000e9f6:	701c      	strb	r4, [r3, #0]
1000e9f8:	8815      	ldrh	r5, [r2, #0]
1000e9fa:	8812      	ldrh	r2, [r2, #0]
1000e9fc:	711d      	strb	r5, [r3, #4]
1000e9fe:	0a12      	lsrs	r2, r2, #8
1000ea00:	715a      	strb	r2, [r3, #5]
1000ea02:	2202      	movs	r2, #2
1000ea04:	70dc      	strb	r4, [r3, #3]
1000ea06:	7218      	strb	r0, [r3, #8]
1000ea08:	7259      	strb	r1, [r3, #9]
1000ea0a:	719a      	strb	r2, [r3, #6]
1000ea0c:	71dc      	strb	r4, [r3, #7]
1000ea0e:	1c18      	adds	r0, r3, #0
1000ea10:	210a      	movs	r1, #10
1000ea12:	4b04      	ldr	r3, [pc, #16]	; (1000ea24 <htpt_enable_req_handler+0x3c>)
1000ea14:	4798      	blx	r3
1000ea16:	1c20      	adds	r0, r4, #0
1000ea18:	bd38      	pop	{r3, r4, r5, pc}
1000ea1a:	46c0      	nop			; (mov r8, r8)
1000ea1c:	1001505c 	.word	0x1001505c
1000ea20:	10014cec 	.word	0x10014cec
1000ea24:	1000d165 	.word	0x1000d165

1000ea28 <htpt_temp_send_req_handler>:
1000ea28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea2a:	2502      	movs	r5, #2
1000ea2c:	ac08      	add	r4, sp, #32
1000ea2e:	7826      	ldrb	r6, [r4, #0]
1000ea30:	4c18      	ldr	r4, [pc, #96]	; (1000ea94 <htpt_temp_send_req_handler+0x6c>)
1000ea32:	4f19      	ldr	r7, [pc, #100]	; (1000ea98 <htpt_temp_send_req_handler+0x70>)
1000ea34:	7025      	strb	r5, [r4, #0]
1000ea36:	3519      	adds	r5, #25
1000ea38:	7065      	strb	r5, [r4, #1]
1000ea3a:	70a5      	strb	r5, [r4, #2]
1000ea3c:	2500      	movs	r5, #0
1000ea3e:	9301      	str	r3, [sp, #4]
1000ea40:	883b      	ldrh	r3, [r7, #0]
1000ea42:	883f      	ldrh	r7, [r7, #0]
1000ea44:	7123      	strb	r3, [r4, #4]
1000ea46:	466b      	mov	r3, sp
1000ea48:	0a3f      	lsrs	r7, r7, #8
1000ea4a:	7167      	strb	r7, [r4, #5]
1000ea4c:	0a07      	lsrs	r7, r0, #8
1000ea4e:	7220      	strb	r0, [r4, #8]
1000ea50:	7267      	strb	r7, [r4, #9]
1000ea52:	0c07      	lsrs	r7, r0, #16
1000ea54:	0e00      	lsrs	r0, r0, #24
1000ea56:	70e5      	strb	r5, [r4, #3]
1000ea58:	72a7      	strb	r7, [r4, #10]
1000ea5a:	72e0      	strb	r0, [r4, #11]
1000ea5c:	8808      	ldrh	r0, [r1, #0]
1000ea5e:	791b      	ldrb	r3, [r3, #4]
1000ea60:	7320      	strb	r0, [r4, #12]
1000ea62:	8808      	ldrh	r0, [r1, #0]
1000ea64:	0a00      	lsrs	r0, r0, #8
1000ea66:	7360      	strb	r0, [r4, #13]
1000ea68:	7888      	ldrb	r0, [r1, #2]
1000ea6a:	73a0      	strb	r0, [r4, #14]
1000ea6c:	78c8      	ldrb	r0, [r1, #3]
1000ea6e:	73e0      	strb	r0, [r4, #15]
1000ea70:	7908      	ldrb	r0, [r1, #4]
1000ea72:	7420      	strb	r0, [r4, #16]
1000ea74:	7948      	ldrb	r0, [r1, #5]
1000ea76:	7460      	strb	r0, [r4, #17]
1000ea78:	7989      	ldrb	r1, [r1, #6]
1000ea7a:	7522      	strb	r2, [r4, #20]
1000ea7c:	74a1      	strb	r1, [r4, #18]
1000ea7e:	7563      	strb	r3, [r4, #21]
1000ea80:	2314      	movs	r3, #20
1000ea82:	1c20      	adds	r0, r4, #0
1000ea84:	71a3      	strb	r3, [r4, #6]
1000ea86:	211c      	movs	r1, #28
1000ea88:	4b04      	ldr	r3, [pc, #16]	; (1000ea9c <htpt_temp_send_req_handler+0x74>)
1000ea8a:	7626      	strb	r6, [r4, #24]
1000ea8c:	71e5      	strb	r5, [r4, #7]
1000ea8e:	4798      	blx	r3
1000ea90:	1c28      	adds	r0, r5, #0
1000ea92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ea94:	1001505c 	.word	0x1001505c
1000ea98:	10014cec 	.word	0x10014cec
1000ea9c:	1000d165 	.word	0x1000d165

1000eaa0 <htpt_enable_rsp_handler>:
1000eaa0:	780b      	ldrb	r3, [r1, #0]
1000eaa2:	7013      	strb	r3, [r2, #0]
1000eaa4:	784b      	ldrb	r3, [r1, #1]
1000eaa6:	7053      	strb	r3, [r2, #1]
1000eaa8:	4770      	bx	lr

1000eaaa <htpt_temp_send_rsp_handler>:
1000eaaa:	780b      	ldrb	r3, [r1, #0]
1000eaac:	7013      	strb	r3, [r2, #0]
1000eaae:	4770      	bx	lr

1000eab0 <htpt_meas_intv_upd_rsp_handler>:
1000eab0:	780b      	ldrb	r3, [r1, #0]
1000eab2:	7013      	strb	r3, [r2, #0]
1000eab4:	4770      	bx	lr

1000eab6 <htpt_meas_intv_chg_req_ind_handler>:
1000eab6:	78cb      	ldrb	r3, [r1, #3]
1000eab8:	7889      	ldrb	r1, [r1, #2]
1000eaba:	021b      	lsls	r3, r3, #8
1000eabc:	430b      	orrs	r3, r1
1000eabe:	8013      	strh	r3, [r2, #0]
1000eac0:	4770      	bx	lr

1000eac2 <htpt_cfg_indntf_ind_handler>:
1000eac2:	780b      	ldrb	r3, [r1, #0]
1000eac4:	7013      	strb	r3, [r2, #0]
1000eac6:	784b      	ldrb	r3, [r1, #1]
1000eac8:	7053      	strb	r3, [r2, #1]
1000eaca:	4770      	bx	lr

1000eacc <__gnu_thumb1_case_sqi>:
1000eacc:	b402      	push	{r1}
1000eace:	4671      	mov	r1, lr
1000ead0:	0849      	lsrs	r1, r1, #1
1000ead2:	0049      	lsls	r1, r1, #1
1000ead4:	5609      	ldrsb	r1, [r1, r0]
1000ead6:	0049      	lsls	r1, r1, #1
1000ead8:	448e      	add	lr, r1
1000eada:	bc02      	pop	{r1}
1000eadc:	4770      	bx	lr
1000eade:	46c0      	nop			; (mov r8, r8)

1000eae0 <__gnu_thumb1_case_uqi>:
1000eae0:	b402      	push	{r1}
1000eae2:	4671      	mov	r1, lr
1000eae4:	0849      	lsrs	r1, r1, #1
1000eae6:	0049      	lsls	r1, r1, #1
1000eae8:	5c09      	ldrb	r1, [r1, r0]
1000eaea:	0049      	lsls	r1, r1, #1
1000eaec:	448e      	add	lr, r1
1000eaee:	bc02      	pop	{r1}
1000eaf0:	4770      	bx	lr
1000eaf2:	46c0      	nop			; (mov r8, r8)

1000eaf4 <__aeabi_uidiv>:
1000eaf4:	2200      	movs	r2, #0
1000eaf6:	0843      	lsrs	r3, r0, #1
1000eaf8:	428b      	cmp	r3, r1
1000eafa:	d374      	bcc.n	1000ebe6 <__aeabi_uidiv+0xf2>
1000eafc:	0903      	lsrs	r3, r0, #4
1000eafe:	428b      	cmp	r3, r1
1000eb00:	d35f      	bcc.n	1000ebc2 <__aeabi_uidiv+0xce>
1000eb02:	0a03      	lsrs	r3, r0, #8
1000eb04:	428b      	cmp	r3, r1
1000eb06:	d344      	bcc.n	1000eb92 <__aeabi_uidiv+0x9e>
1000eb08:	0b03      	lsrs	r3, r0, #12
1000eb0a:	428b      	cmp	r3, r1
1000eb0c:	d328      	bcc.n	1000eb60 <__aeabi_uidiv+0x6c>
1000eb0e:	0c03      	lsrs	r3, r0, #16
1000eb10:	428b      	cmp	r3, r1
1000eb12:	d30d      	bcc.n	1000eb30 <__aeabi_uidiv+0x3c>
1000eb14:	22ff      	movs	r2, #255	; 0xff
1000eb16:	0209      	lsls	r1, r1, #8
1000eb18:	ba12      	rev	r2, r2
1000eb1a:	0c03      	lsrs	r3, r0, #16
1000eb1c:	428b      	cmp	r3, r1
1000eb1e:	d302      	bcc.n	1000eb26 <__aeabi_uidiv+0x32>
1000eb20:	1212      	asrs	r2, r2, #8
1000eb22:	0209      	lsls	r1, r1, #8
1000eb24:	d065      	beq.n	1000ebf2 <__aeabi_uidiv+0xfe>
1000eb26:	0b03      	lsrs	r3, r0, #12
1000eb28:	428b      	cmp	r3, r1
1000eb2a:	d319      	bcc.n	1000eb60 <__aeabi_uidiv+0x6c>
1000eb2c:	e000      	b.n	1000eb30 <__aeabi_uidiv+0x3c>
1000eb2e:	0a09      	lsrs	r1, r1, #8
1000eb30:	0bc3      	lsrs	r3, r0, #15
1000eb32:	428b      	cmp	r3, r1
1000eb34:	d301      	bcc.n	1000eb3a <__aeabi_uidiv+0x46>
1000eb36:	03cb      	lsls	r3, r1, #15
1000eb38:	1ac0      	subs	r0, r0, r3
1000eb3a:	4152      	adcs	r2, r2
1000eb3c:	0b83      	lsrs	r3, r0, #14
1000eb3e:	428b      	cmp	r3, r1
1000eb40:	d301      	bcc.n	1000eb46 <__aeabi_uidiv+0x52>
1000eb42:	038b      	lsls	r3, r1, #14
1000eb44:	1ac0      	subs	r0, r0, r3
1000eb46:	4152      	adcs	r2, r2
1000eb48:	0b43      	lsrs	r3, r0, #13
1000eb4a:	428b      	cmp	r3, r1
1000eb4c:	d301      	bcc.n	1000eb52 <__aeabi_uidiv+0x5e>
1000eb4e:	034b      	lsls	r3, r1, #13
1000eb50:	1ac0      	subs	r0, r0, r3
1000eb52:	4152      	adcs	r2, r2
1000eb54:	0b03      	lsrs	r3, r0, #12
1000eb56:	428b      	cmp	r3, r1
1000eb58:	d301      	bcc.n	1000eb5e <__aeabi_uidiv+0x6a>
1000eb5a:	030b      	lsls	r3, r1, #12
1000eb5c:	1ac0      	subs	r0, r0, r3
1000eb5e:	4152      	adcs	r2, r2
1000eb60:	0ac3      	lsrs	r3, r0, #11
1000eb62:	428b      	cmp	r3, r1
1000eb64:	d301      	bcc.n	1000eb6a <__aeabi_uidiv+0x76>
1000eb66:	02cb      	lsls	r3, r1, #11
1000eb68:	1ac0      	subs	r0, r0, r3
1000eb6a:	4152      	adcs	r2, r2
1000eb6c:	0a83      	lsrs	r3, r0, #10
1000eb6e:	428b      	cmp	r3, r1
1000eb70:	d301      	bcc.n	1000eb76 <__aeabi_uidiv+0x82>
1000eb72:	028b      	lsls	r3, r1, #10
1000eb74:	1ac0      	subs	r0, r0, r3
1000eb76:	4152      	adcs	r2, r2
1000eb78:	0a43      	lsrs	r3, r0, #9
1000eb7a:	428b      	cmp	r3, r1
1000eb7c:	d301      	bcc.n	1000eb82 <__aeabi_uidiv+0x8e>
1000eb7e:	024b      	lsls	r3, r1, #9
1000eb80:	1ac0      	subs	r0, r0, r3
1000eb82:	4152      	adcs	r2, r2
1000eb84:	0a03      	lsrs	r3, r0, #8
1000eb86:	428b      	cmp	r3, r1
1000eb88:	d301      	bcc.n	1000eb8e <__aeabi_uidiv+0x9a>
1000eb8a:	020b      	lsls	r3, r1, #8
1000eb8c:	1ac0      	subs	r0, r0, r3
1000eb8e:	4152      	adcs	r2, r2
1000eb90:	d2cd      	bcs.n	1000eb2e <__aeabi_uidiv+0x3a>
1000eb92:	09c3      	lsrs	r3, r0, #7
1000eb94:	428b      	cmp	r3, r1
1000eb96:	d301      	bcc.n	1000eb9c <__aeabi_uidiv+0xa8>
1000eb98:	01cb      	lsls	r3, r1, #7
1000eb9a:	1ac0      	subs	r0, r0, r3
1000eb9c:	4152      	adcs	r2, r2
1000eb9e:	0983      	lsrs	r3, r0, #6
1000eba0:	428b      	cmp	r3, r1
1000eba2:	d301      	bcc.n	1000eba8 <__aeabi_uidiv+0xb4>
1000eba4:	018b      	lsls	r3, r1, #6
1000eba6:	1ac0      	subs	r0, r0, r3
1000eba8:	4152      	adcs	r2, r2
1000ebaa:	0943      	lsrs	r3, r0, #5
1000ebac:	428b      	cmp	r3, r1
1000ebae:	d301      	bcc.n	1000ebb4 <__aeabi_uidiv+0xc0>
1000ebb0:	014b      	lsls	r3, r1, #5
1000ebb2:	1ac0      	subs	r0, r0, r3
1000ebb4:	4152      	adcs	r2, r2
1000ebb6:	0903      	lsrs	r3, r0, #4
1000ebb8:	428b      	cmp	r3, r1
1000ebba:	d301      	bcc.n	1000ebc0 <__aeabi_uidiv+0xcc>
1000ebbc:	010b      	lsls	r3, r1, #4
1000ebbe:	1ac0      	subs	r0, r0, r3
1000ebc0:	4152      	adcs	r2, r2
1000ebc2:	08c3      	lsrs	r3, r0, #3
1000ebc4:	428b      	cmp	r3, r1
1000ebc6:	d301      	bcc.n	1000ebcc <__aeabi_uidiv+0xd8>
1000ebc8:	00cb      	lsls	r3, r1, #3
1000ebca:	1ac0      	subs	r0, r0, r3
1000ebcc:	4152      	adcs	r2, r2
1000ebce:	0883      	lsrs	r3, r0, #2
1000ebd0:	428b      	cmp	r3, r1
1000ebd2:	d301      	bcc.n	1000ebd8 <__aeabi_uidiv+0xe4>
1000ebd4:	008b      	lsls	r3, r1, #2
1000ebd6:	1ac0      	subs	r0, r0, r3
1000ebd8:	4152      	adcs	r2, r2
1000ebda:	0843      	lsrs	r3, r0, #1
1000ebdc:	428b      	cmp	r3, r1
1000ebde:	d301      	bcc.n	1000ebe4 <__aeabi_uidiv+0xf0>
1000ebe0:	004b      	lsls	r3, r1, #1
1000ebe2:	1ac0      	subs	r0, r0, r3
1000ebe4:	4152      	adcs	r2, r2
1000ebe6:	1a41      	subs	r1, r0, r1
1000ebe8:	d200      	bcs.n	1000ebec <__aeabi_uidiv+0xf8>
1000ebea:	4601      	mov	r1, r0
1000ebec:	4152      	adcs	r2, r2
1000ebee:	4610      	mov	r0, r2
1000ebf0:	4770      	bx	lr
1000ebf2:	e7ff      	b.n	1000ebf4 <__aeabi_uidiv+0x100>
1000ebf4:	b501      	push	{r0, lr}
1000ebf6:	2000      	movs	r0, #0
1000ebf8:	f000 f806 	bl	1000ec08 <__aeabi_idiv0>
1000ebfc:	bd02      	pop	{r1, pc}
1000ebfe:	46c0      	nop			; (mov r8, r8)

1000ec00 <__aeabi_uidivmod>:
1000ec00:	2900      	cmp	r1, #0
1000ec02:	d0f7      	beq.n	1000ebf4 <__aeabi_uidiv+0x100>
1000ec04:	e776      	b.n	1000eaf4 <__aeabi_uidiv>
1000ec06:	4770      	bx	lr

1000ec08 <__aeabi_idiv0>:
1000ec08:	4770      	bx	lr
1000ec0a:	46c0      	nop			; (mov r8, r8)

1000ec0c <__aeabi_f2uiz>:
1000ec0c:	219e      	movs	r1, #158	; 0x9e
1000ec0e:	b510      	push	{r4, lr}
1000ec10:	05c9      	lsls	r1, r1, #23
1000ec12:	1c04      	adds	r4, r0, #0
1000ec14:	f001 fa64 	bl	100100e0 <__aeabi_fcmpge>
1000ec18:	2800      	cmp	r0, #0
1000ec1a:	d103      	bne.n	1000ec24 <__aeabi_f2uiz+0x18>
1000ec1c:	1c20      	adds	r0, r4, #0
1000ec1e:	f000 fac5 	bl	1000f1ac <__aeabi_f2iz>
1000ec22:	bd10      	pop	{r4, pc}
1000ec24:	219e      	movs	r1, #158	; 0x9e
1000ec26:	1c20      	adds	r0, r4, #0
1000ec28:	05c9      	lsls	r1, r1, #23
1000ec2a:	f000 f939 	bl	1000eea0 <__aeabi_fsub>
1000ec2e:	f000 fabd 	bl	1000f1ac <__aeabi_f2iz>
1000ec32:	2380      	movs	r3, #128	; 0x80
1000ec34:	061b      	lsls	r3, r3, #24
1000ec36:	469c      	mov	ip, r3
1000ec38:	4460      	add	r0, ip
1000ec3a:	e7f2      	b.n	1000ec22 <__aeabi_f2uiz+0x16>

1000ec3c <__aeabi_d2uiz>:
1000ec3c:	b570      	push	{r4, r5, r6, lr}
1000ec3e:	2200      	movs	r2, #0
1000ec40:	4b0c      	ldr	r3, [pc, #48]	; (1000ec74 <__aeabi_d2uiz+0x38>)
1000ec42:	0004      	movs	r4, r0
1000ec44:	000d      	movs	r5, r1
1000ec46:	f001 fa11 	bl	1001006c <__aeabi_dcmpge>
1000ec4a:	2800      	cmp	r0, #0
1000ec4c:	d104      	bne.n	1000ec58 <__aeabi_d2uiz+0x1c>
1000ec4e:	0020      	movs	r0, r4
1000ec50:	0029      	movs	r1, r5
1000ec52:	f001 f89b 	bl	1000fd8c <__aeabi_d2iz>
1000ec56:	bd70      	pop	{r4, r5, r6, pc}
1000ec58:	4b06      	ldr	r3, [pc, #24]	; (1000ec74 <__aeabi_d2uiz+0x38>)
1000ec5a:	2200      	movs	r2, #0
1000ec5c:	0020      	movs	r0, r4
1000ec5e:	0029      	movs	r1, r5
1000ec60:	f000 fd40 	bl	1000f6e4 <__aeabi_dsub>
1000ec64:	f001 f892 	bl	1000fd8c <__aeabi_d2iz>
1000ec68:	2380      	movs	r3, #128	; 0x80
1000ec6a:	061b      	lsls	r3, r3, #24
1000ec6c:	469c      	mov	ip, r3
1000ec6e:	4460      	add	r0, ip
1000ec70:	e7f1      	b.n	1000ec56 <__aeabi_d2uiz+0x1a>
1000ec72:	46c0      	nop			; (mov r8, r8)
1000ec74:	41e00000 	.word	0x41e00000

1000ec78 <__aeabi_fmul>:
1000ec78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec7a:	4657      	mov	r7, sl
1000ec7c:	464e      	mov	r6, r9
1000ec7e:	4645      	mov	r5, r8
1000ec80:	0043      	lsls	r3, r0, #1
1000ec82:	b4e0      	push	{r5, r6, r7}
1000ec84:	0246      	lsls	r6, r0, #9
1000ec86:	4688      	mov	r8, r1
1000ec88:	0a76      	lsrs	r6, r6, #9
1000ec8a:	0e1f      	lsrs	r7, r3, #24
1000ec8c:	0fc4      	lsrs	r4, r0, #31
1000ec8e:	2f00      	cmp	r7, #0
1000ec90:	d047      	beq.n	1000ed22 <__aeabi_fmul+0xaa>
1000ec92:	2fff      	cmp	r7, #255	; 0xff
1000ec94:	d025      	beq.n	1000ece2 <__aeabi_fmul+0x6a>
1000ec96:	2300      	movs	r3, #0
1000ec98:	2580      	movs	r5, #128	; 0x80
1000ec9a:	469a      	mov	sl, r3
1000ec9c:	4699      	mov	r9, r3
1000ec9e:	00f6      	lsls	r6, r6, #3
1000eca0:	04ed      	lsls	r5, r5, #19
1000eca2:	432e      	orrs	r6, r5
1000eca4:	3f7f      	subs	r7, #127	; 0x7f
1000eca6:	4643      	mov	r3, r8
1000eca8:	4642      	mov	r2, r8
1000ecaa:	025d      	lsls	r5, r3, #9
1000ecac:	0fd2      	lsrs	r2, r2, #31
1000ecae:	005b      	lsls	r3, r3, #1
1000ecb0:	0a6d      	lsrs	r5, r5, #9
1000ecb2:	0e1b      	lsrs	r3, r3, #24
1000ecb4:	4690      	mov	r8, r2
1000ecb6:	d040      	beq.n	1000ed3a <__aeabi_fmul+0xc2>
1000ecb8:	2bff      	cmp	r3, #255	; 0xff
1000ecba:	d039      	beq.n	1000ed30 <__aeabi_fmul+0xb8>
1000ecbc:	2280      	movs	r2, #128	; 0x80
1000ecbe:	2000      	movs	r0, #0
1000ecc0:	00ed      	lsls	r5, r5, #3
1000ecc2:	04d2      	lsls	r2, r2, #19
1000ecc4:	4315      	orrs	r5, r2
1000ecc6:	3b7f      	subs	r3, #127	; 0x7f
1000ecc8:	18fb      	adds	r3, r7, r3
1000ecca:	4642      	mov	r2, r8
1000eccc:	4657      	mov	r7, sl
1000ecce:	1c59      	adds	r1, r3, #1
1000ecd0:	4062      	eors	r2, r4
1000ecd2:	468c      	mov	ip, r1
1000ecd4:	4307      	orrs	r7, r0
1000ecd6:	2f0f      	cmp	r7, #15
1000ecd8:	d85c      	bhi.n	1000ed94 <__aeabi_fmul+0x11c>
1000ecda:	496f      	ldr	r1, [pc, #444]	; (1000ee98 <__aeabi_fmul+0x220>)
1000ecdc:	00bf      	lsls	r7, r7, #2
1000ecde:	59c9      	ldr	r1, [r1, r7]
1000ece0:	468f      	mov	pc, r1
1000ece2:	2e00      	cmp	r6, #0
1000ece4:	d145      	bne.n	1000ed72 <__aeabi_fmul+0xfa>
1000ece6:	2308      	movs	r3, #8
1000ece8:	469a      	mov	sl, r3
1000ecea:	3b06      	subs	r3, #6
1000ecec:	4699      	mov	r9, r3
1000ecee:	e7da      	b.n	1000eca6 <__aeabi_fmul+0x2e>
1000ecf0:	4642      	mov	r2, r8
1000ecf2:	2802      	cmp	r0, #2
1000ecf4:	d02d      	beq.n	1000ed52 <__aeabi_fmul+0xda>
1000ecf6:	2803      	cmp	r0, #3
1000ecf8:	d100      	bne.n	1000ecfc <__aeabi_fmul+0x84>
1000ecfa:	e0c3      	b.n	1000ee84 <__aeabi_fmul+0x20c>
1000ecfc:	2801      	cmp	r0, #1
1000ecfe:	d000      	beq.n	1000ed02 <__aeabi_fmul+0x8a>
1000ed00:	e0a2      	b.n	1000ee48 <__aeabi_fmul+0x1d0>
1000ed02:	2500      	movs	r5, #0
1000ed04:	2600      	movs	r6, #0
1000ed06:	4002      	ands	r2, r0
1000ed08:	b2d4      	uxtb	r4, r2
1000ed0a:	0276      	lsls	r6, r6, #9
1000ed0c:	05ed      	lsls	r5, r5, #23
1000ed0e:	0a76      	lsrs	r6, r6, #9
1000ed10:	432e      	orrs	r6, r5
1000ed12:	07e4      	lsls	r4, r4, #31
1000ed14:	4326      	orrs	r6, r4
1000ed16:	0030      	movs	r0, r6
1000ed18:	bc1c      	pop	{r2, r3, r4}
1000ed1a:	4690      	mov	r8, r2
1000ed1c:	4699      	mov	r9, r3
1000ed1e:	46a2      	mov	sl, r4
1000ed20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed22:	2e00      	cmp	r6, #0
1000ed24:	d11a      	bne.n	1000ed5c <__aeabi_fmul+0xe4>
1000ed26:	2304      	movs	r3, #4
1000ed28:	469a      	mov	sl, r3
1000ed2a:	3b03      	subs	r3, #3
1000ed2c:	4699      	mov	r9, r3
1000ed2e:	e7ba      	b.n	1000eca6 <__aeabi_fmul+0x2e>
1000ed30:	002a      	movs	r2, r5
1000ed32:	1e51      	subs	r1, r2, #1
1000ed34:	418a      	sbcs	r2, r1
1000ed36:	1c90      	adds	r0, r2, #2
1000ed38:	e7c6      	b.n	1000ecc8 <__aeabi_fmul+0x50>
1000ed3a:	2001      	movs	r0, #1
1000ed3c:	2d00      	cmp	r5, #0
1000ed3e:	d0c3      	beq.n	1000ecc8 <__aeabi_fmul+0x50>
1000ed40:	0028      	movs	r0, r5
1000ed42:	f001 f9d7 	bl	100100f4 <__clzsi2>
1000ed46:	1f43      	subs	r3, r0, #5
1000ed48:	3076      	adds	r0, #118	; 0x76
1000ed4a:	409d      	lsls	r5, r3
1000ed4c:	4243      	negs	r3, r0
1000ed4e:	2000      	movs	r0, #0
1000ed50:	e7ba      	b.n	1000ecc8 <__aeabi_fmul+0x50>
1000ed52:	2401      	movs	r4, #1
1000ed54:	25ff      	movs	r5, #255	; 0xff
1000ed56:	4014      	ands	r4, r2
1000ed58:	2600      	movs	r6, #0
1000ed5a:	e7d6      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ed5c:	0030      	movs	r0, r6
1000ed5e:	f001 f9c9 	bl	100100f4 <__clzsi2>
1000ed62:	1f43      	subs	r3, r0, #5
1000ed64:	409e      	lsls	r6, r3
1000ed66:	2300      	movs	r3, #0
1000ed68:	3076      	adds	r0, #118	; 0x76
1000ed6a:	4247      	negs	r7, r0
1000ed6c:	469a      	mov	sl, r3
1000ed6e:	4699      	mov	r9, r3
1000ed70:	e799      	b.n	1000eca6 <__aeabi_fmul+0x2e>
1000ed72:	230c      	movs	r3, #12
1000ed74:	469a      	mov	sl, r3
1000ed76:	3b09      	subs	r3, #9
1000ed78:	4699      	mov	r9, r3
1000ed7a:	e794      	b.n	1000eca6 <__aeabi_fmul+0x2e>
1000ed7c:	2680      	movs	r6, #128	; 0x80
1000ed7e:	2400      	movs	r4, #0
1000ed80:	03f6      	lsls	r6, r6, #15
1000ed82:	25ff      	movs	r5, #255	; 0xff
1000ed84:	e7c1      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ed86:	0035      	movs	r5, r6
1000ed88:	4648      	mov	r0, r9
1000ed8a:	e7b2      	b.n	1000ecf2 <__aeabi_fmul+0x7a>
1000ed8c:	0035      	movs	r5, r6
1000ed8e:	0022      	movs	r2, r4
1000ed90:	4648      	mov	r0, r9
1000ed92:	e7ae      	b.n	1000ecf2 <__aeabi_fmul+0x7a>
1000ed94:	0429      	lsls	r1, r5, #16
1000ed96:	0c09      	lsrs	r1, r1, #16
1000ed98:	0008      	movs	r0, r1
1000ed9a:	0c37      	lsrs	r7, r6, #16
1000ed9c:	0436      	lsls	r6, r6, #16
1000ed9e:	0c36      	lsrs	r6, r6, #16
1000eda0:	0c2c      	lsrs	r4, r5, #16
1000eda2:	4379      	muls	r1, r7
1000eda4:	4370      	muls	r0, r6
1000eda6:	4367      	muls	r7, r4
1000eda8:	4374      	muls	r4, r6
1000edaa:	0c06      	lsrs	r6, r0, #16
1000edac:	1864      	adds	r4, r4, r1
1000edae:	1936      	adds	r6, r6, r4
1000edb0:	42b1      	cmp	r1, r6
1000edb2:	d903      	bls.n	1000edbc <__aeabi_fmul+0x144>
1000edb4:	2180      	movs	r1, #128	; 0x80
1000edb6:	0249      	lsls	r1, r1, #9
1000edb8:	4688      	mov	r8, r1
1000edba:	4447      	add	r7, r8
1000edbc:	0400      	lsls	r0, r0, #16
1000edbe:	0c00      	lsrs	r0, r0, #16
1000edc0:	0431      	lsls	r1, r6, #16
1000edc2:	1809      	adds	r1, r1, r0
1000edc4:	018d      	lsls	r5, r1, #6
1000edc6:	1e68      	subs	r0, r5, #1
1000edc8:	4185      	sbcs	r5, r0
1000edca:	0e89      	lsrs	r1, r1, #26
1000edcc:	4329      	orrs	r1, r5
1000edce:	0c35      	lsrs	r5, r6, #16
1000edd0:	19ed      	adds	r5, r5, r7
1000edd2:	01ad      	lsls	r5, r5, #6
1000edd4:	430d      	orrs	r5, r1
1000edd6:	0129      	lsls	r1, r5, #4
1000edd8:	d504      	bpl.n	1000ede4 <__aeabi_fmul+0x16c>
1000edda:	2301      	movs	r3, #1
1000eddc:	0869      	lsrs	r1, r5, #1
1000edde:	401d      	ands	r5, r3
1000ede0:	4663      	mov	r3, ip
1000ede2:	430d      	orrs	r5, r1
1000ede4:	0019      	movs	r1, r3
1000ede6:	317f      	adds	r1, #127	; 0x7f
1000ede8:	2900      	cmp	r1, #0
1000edea:	dd25      	ble.n	1000ee38 <__aeabi_fmul+0x1c0>
1000edec:	0768      	lsls	r0, r5, #29
1000edee:	d004      	beq.n	1000edfa <__aeabi_fmul+0x182>
1000edf0:	200f      	movs	r0, #15
1000edf2:	4028      	ands	r0, r5
1000edf4:	2804      	cmp	r0, #4
1000edf6:	d000      	beq.n	1000edfa <__aeabi_fmul+0x182>
1000edf8:	3504      	adds	r5, #4
1000edfa:	0128      	lsls	r0, r5, #4
1000edfc:	d503      	bpl.n	1000ee06 <__aeabi_fmul+0x18e>
1000edfe:	4927      	ldr	r1, [pc, #156]	; (1000ee9c <__aeabi_fmul+0x224>)
1000ee00:	3380      	adds	r3, #128	; 0x80
1000ee02:	400d      	ands	r5, r1
1000ee04:	0019      	movs	r1, r3
1000ee06:	29fe      	cmp	r1, #254	; 0xfe
1000ee08:	dca3      	bgt.n	1000ed52 <__aeabi_fmul+0xda>
1000ee0a:	2401      	movs	r4, #1
1000ee0c:	01ad      	lsls	r5, r5, #6
1000ee0e:	0a6e      	lsrs	r6, r5, #9
1000ee10:	4014      	ands	r4, r2
1000ee12:	b2cd      	uxtb	r5, r1
1000ee14:	e779      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee16:	2080      	movs	r0, #128	; 0x80
1000ee18:	03c0      	lsls	r0, r0, #15
1000ee1a:	4206      	tst	r6, r0
1000ee1c:	d007      	beq.n	1000ee2e <__aeabi_fmul+0x1b6>
1000ee1e:	4205      	tst	r5, r0
1000ee20:	d105      	bne.n	1000ee2e <__aeabi_fmul+0x1b6>
1000ee22:	4328      	orrs	r0, r5
1000ee24:	0246      	lsls	r6, r0, #9
1000ee26:	0a76      	lsrs	r6, r6, #9
1000ee28:	4644      	mov	r4, r8
1000ee2a:	25ff      	movs	r5, #255	; 0xff
1000ee2c:	e76d      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee2e:	4306      	orrs	r6, r0
1000ee30:	0276      	lsls	r6, r6, #9
1000ee32:	0a76      	lsrs	r6, r6, #9
1000ee34:	25ff      	movs	r5, #255	; 0xff
1000ee36:	e768      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee38:	2401      	movs	r4, #1
1000ee3a:	1a61      	subs	r1, r4, r1
1000ee3c:	291b      	cmp	r1, #27
1000ee3e:	dd05      	ble.n	1000ee4c <__aeabi_fmul+0x1d4>
1000ee40:	4014      	ands	r4, r2
1000ee42:	2500      	movs	r5, #0
1000ee44:	2600      	movs	r6, #0
1000ee46:	e760      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee48:	4663      	mov	r3, ip
1000ee4a:	e7cb      	b.n	1000ede4 <__aeabi_fmul+0x16c>
1000ee4c:	002e      	movs	r6, r5
1000ee4e:	2320      	movs	r3, #32
1000ee50:	40ce      	lsrs	r6, r1
1000ee52:	1a59      	subs	r1, r3, r1
1000ee54:	408d      	lsls	r5, r1
1000ee56:	1e6b      	subs	r3, r5, #1
1000ee58:	419d      	sbcs	r5, r3
1000ee5a:	432e      	orrs	r6, r5
1000ee5c:	0773      	lsls	r3, r6, #29
1000ee5e:	d004      	beq.n	1000ee6a <__aeabi_fmul+0x1f2>
1000ee60:	230f      	movs	r3, #15
1000ee62:	4033      	ands	r3, r6
1000ee64:	2b04      	cmp	r3, #4
1000ee66:	d000      	beq.n	1000ee6a <__aeabi_fmul+0x1f2>
1000ee68:	3604      	adds	r6, #4
1000ee6a:	0173      	lsls	r3, r6, #5
1000ee6c:	d504      	bpl.n	1000ee78 <__aeabi_fmul+0x200>
1000ee6e:	2401      	movs	r4, #1
1000ee70:	2501      	movs	r5, #1
1000ee72:	4014      	ands	r4, r2
1000ee74:	2600      	movs	r6, #0
1000ee76:	e748      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee78:	2401      	movs	r4, #1
1000ee7a:	01b6      	lsls	r6, r6, #6
1000ee7c:	0a76      	lsrs	r6, r6, #9
1000ee7e:	4014      	ands	r4, r2
1000ee80:	2500      	movs	r5, #0
1000ee82:	e742      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee84:	2680      	movs	r6, #128	; 0x80
1000ee86:	2401      	movs	r4, #1
1000ee88:	03f6      	lsls	r6, r6, #15
1000ee8a:	432e      	orrs	r6, r5
1000ee8c:	0276      	lsls	r6, r6, #9
1000ee8e:	0a76      	lsrs	r6, r6, #9
1000ee90:	4014      	ands	r4, r2
1000ee92:	25ff      	movs	r5, #255	; 0xff
1000ee94:	e739      	b.n	1000ed0a <__aeabi_fmul+0x92>
1000ee96:	46c0      	nop			; (mov r8, r8)
1000ee98:	100123e0 	.word	0x100123e0
1000ee9c:	f7ffffff 	.word	0xf7ffffff

1000eea0 <__aeabi_fsub>:
1000eea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000eea2:	024a      	lsls	r2, r1, #9
1000eea4:	004e      	lsls	r6, r1, #1
1000eea6:	0243      	lsls	r3, r0, #9
1000eea8:	0044      	lsls	r4, r0, #1
1000eeaa:	0e24      	lsrs	r4, r4, #24
1000eeac:	0fc5      	lsrs	r5, r0, #31
1000eeae:	099b      	lsrs	r3, r3, #6
1000eeb0:	0e36      	lsrs	r6, r6, #24
1000eeb2:	0fc9      	lsrs	r1, r1, #31
1000eeb4:	0992      	lsrs	r2, r2, #6
1000eeb6:	2eff      	cmp	r6, #255	; 0xff
1000eeb8:	d100      	bne.n	1000eebc <__aeabi_fsub+0x1c>
1000eeba:	e083      	b.n	1000efc4 <__aeabi_fsub+0x124>
1000eebc:	2001      	movs	r0, #1
1000eebe:	4041      	eors	r1, r0
1000eec0:	1ba0      	subs	r0, r4, r6
1000eec2:	42a9      	cmp	r1, r5
1000eec4:	d05c      	beq.n	1000ef80 <__aeabi_fsub+0xe0>
1000eec6:	2800      	cmp	r0, #0
1000eec8:	dc00      	bgt.n	1000eecc <__aeabi_fsub+0x2c>
1000eeca:	e095      	b.n	1000eff8 <__aeabi_fsub+0x158>
1000eecc:	2e00      	cmp	r6, #0
1000eece:	d11c      	bne.n	1000ef0a <__aeabi_fsub+0x6a>
1000eed0:	2a00      	cmp	r2, #0
1000eed2:	d000      	beq.n	1000eed6 <__aeabi_fsub+0x36>
1000eed4:	e081      	b.n	1000efda <__aeabi_fsub+0x13a>
1000eed6:	075a      	lsls	r2, r3, #29
1000eed8:	d004      	beq.n	1000eee4 <__aeabi_fsub+0x44>
1000eeda:	220f      	movs	r2, #15
1000eedc:	401a      	ands	r2, r3
1000eede:	2a04      	cmp	r2, #4
1000eee0:	d000      	beq.n	1000eee4 <__aeabi_fsub+0x44>
1000eee2:	3304      	adds	r3, #4
1000eee4:	015a      	lsls	r2, r3, #5
1000eee6:	d53b      	bpl.n	1000ef60 <__aeabi_fsub+0xc0>
1000eee8:	3401      	adds	r4, #1
1000eeea:	2cff      	cmp	r4, #255	; 0xff
1000eeec:	d100      	bne.n	1000eef0 <__aeabi_fsub+0x50>
1000eeee:	e091      	b.n	1000f014 <__aeabi_fsub+0x174>
1000eef0:	2001      	movs	r0, #1
1000eef2:	019b      	lsls	r3, r3, #6
1000eef4:	0a5b      	lsrs	r3, r3, #9
1000eef6:	b2e4      	uxtb	r4, r4
1000eef8:	4005      	ands	r5, r0
1000eefa:	025b      	lsls	r3, r3, #9
1000eefc:	05e4      	lsls	r4, r4, #23
1000eefe:	0a5b      	lsrs	r3, r3, #9
1000ef00:	07ed      	lsls	r5, r5, #31
1000ef02:	4323      	orrs	r3, r4
1000ef04:	432b      	orrs	r3, r5
1000ef06:	0018      	movs	r0, r3
1000ef08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef0a:	2cff      	cmp	r4, #255	; 0xff
1000ef0c:	d0e3      	beq.n	1000eed6 <__aeabi_fsub+0x36>
1000ef0e:	2180      	movs	r1, #128	; 0x80
1000ef10:	04c9      	lsls	r1, r1, #19
1000ef12:	430a      	orrs	r2, r1
1000ef14:	281b      	cmp	r0, #27
1000ef16:	dd00      	ble.n	1000ef1a <__aeabi_fsub+0x7a>
1000ef18:	e090      	b.n	1000f03c <__aeabi_fsub+0x19c>
1000ef1a:	0016      	movs	r6, r2
1000ef1c:	2120      	movs	r1, #32
1000ef1e:	40c6      	lsrs	r6, r0
1000ef20:	1a08      	subs	r0, r1, r0
1000ef22:	4082      	lsls	r2, r0
1000ef24:	1e51      	subs	r1, r2, #1
1000ef26:	418a      	sbcs	r2, r1
1000ef28:	4332      	orrs	r2, r6
1000ef2a:	1a9b      	subs	r3, r3, r2
1000ef2c:	015a      	lsls	r2, r3, #5
1000ef2e:	d515      	bpl.n	1000ef5c <__aeabi_fsub+0xbc>
1000ef30:	019b      	lsls	r3, r3, #6
1000ef32:	099e      	lsrs	r6, r3, #6
1000ef34:	0030      	movs	r0, r6
1000ef36:	f001 f8dd 	bl	100100f4 <__clzsi2>
1000ef3a:	3805      	subs	r0, #5
1000ef3c:	4086      	lsls	r6, r0
1000ef3e:	4284      	cmp	r4, r0
1000ef40:	dc6c      	bgt.n	1000f01c <__aeabi_fsub+0x17c>
1000ef42:	1b04      	subs	r4, r0, r4
1000ef44:	0033      	movs	r3, r6
1000ef46:	2020      	movs	r0, #32
1000ef48:	3401      	adds	r4, #1
1000ef4a:	40e3      	lsrs	r3, r4
1000ef4c:	1b04      	subs	r4, r0, r4
1000ef4e:	40a6      	lsls	r6, r4
1000ef50:	1e72      	subs	r2, r6, #1
1000ef52:	4196      	sbcs	r6, r2
1000ef54:	2400      	movs	r4, #0
1000ef56:	4333      	orrs	r3, r6
1000ef58:	e7bd      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000ef5a:	000d      	movs	r5, r1
1000ef5c:	075a      	lsls	r2, r3, #29
1000ef5e:	d1bc      	bne.n	1000eeda <__aeabi_fsub+0x3a>
1000ef60:	08df      	lsrs	r7, r3, #3
1000ef62:	2301      	movs	r3, #1
1000ef64:	401d      	ands	r5, r3
1000ef66:	2cff      	cmp	r4, #255	; 0xff
1000ef68:	d133      	bne.n	1000efd2 <__aeabi_fsub+0x132>
1000ef6a:	2f00      	cmp	r7, #0
1000ef6c:	d100      	bne.n	1000ef70 <__aeabi_fsub+0xd0>
1000ef6e:	e090      	b.n	1000f092 <__aeabi_fsub+0x1f2>
1000ef70:	2280      	movs	r2, #128	; 0x80
1000ef72:	03d2      	lsls	r2, r2, #15
1000ef74:	0013      	movs	r3, r2
1000ef76:	433b      	orrs	r3, r7
1000ef78:	025b      	lsls	r3, r3, #9
1000ef7a:	0a5b      	lsrs	r3, r3, #9
1000ef7c:	24ff      	movs	r4, #255	; 0xff
1000ef7e:	e7bc      	b.n	1000eefa <__aeabi_fsub+0x5a>
1000ef80:	2800      	cmp	r0, #0
1000ef82:	dd4f      	ble.n	1000f024 <__aeabi_fsub+0x184>
1000ef84:	2e00      	cmp	r6, #0
1000ef86:	d02e      	beq.n	1000efe6 <__aeabi_fsub+0x146>
1000ef88:	2cff      	cmp	r4, #255	; 0xff
1000ef8a:	d0a4      	beq.n	1000eed6 <__aeabi_fsub+0x36>
1000ef8c:	2580      	movs	r5, #128	; 0x80
1000ef8e:	04ed      	lsls	r5, r5, #19
1000ef90:	432a      	orrs	r2, r5
1000ef92:	281b      	cmp	r0, #27
1000ef94:	dd00      	ble.n	1000ef98 <__aeabi_fsub+0xf8>
1000ef96:	e097      	b.n	1000f0c8 <__aeabi_fsub+0x228>
1000ef98:	0016      	movs	r6, r2
1000ef9a:	2520      	movs	r5, #32
1000ef9c:	40c6      	lsrs	r6, r0
1000ef9e:	1a28      	subs	r0, r5, r0
1000efa0:	4082      	lsls	r2, r0
1000efa2:	1e50      	subs	r0, r2, #1
1000efa4:	4182      	sbcs	r2, r0
1000efa6:	4332      	orrs	r2, r6
1000efa8:	189b      	adds	r3, r3, r2
1000efaa:	015a      	lsls	r2, r3, #5
1000efac:	d5d5      	bpl.n	1000ef5a <__aeabi_fsub+0xba>
1000efae:	3401      	adds	r4, #1
1000efb0:	2cff      	cmp	r4, #255	; 0xff
1000efb2:	d06d      	beq.n	1000f090 <__aeabi_fsub+0x1f0>
1000efb4:	2201      	movs	r2, #1
1000efb6:	487b      	ldr	r0, [pc, #492]	; (1000f1a4 <__aeabi_fsub+0x304>)
1000efb8:	401a      	ands	r2, r3
1000efba:	085b      	lsrs	r3, r3, #1
1000efbc:	4003      	ands	r3, r0
1000efbe:	4313      	orrs	r3, r2
1000efc0:	000d      	movs	r5, r1
1000efc2:	e788      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000efc4:	2a00      	cmp	r2, #0
1000efc6:	d000      	beq.n	1000efca <__aeabi_fsub+0x12a>
1000efc8:	e77a      	b.n	1000eec0 <__aeabi_fsub+0x20>
1000efca:	e777      	b.n	1000eebc <__aeabi_fsub+0x1c>
1000efcc:	1e03      	subs	r3, r0, #0
1000efce:	d1c5      	bne.n	1000ef5c <__aeabi_fsub+0xbc>
1000efd0:	2500      	movs	r5, #0
1000efd2:	027b      	lsls	r3, r7, #9
1000efd4:	0a5b      	lsrs	r3, r3, #9
1000efd6:	b2e4      	uxtb	r4, r4
1000efd8:	e78f      	b.n	1000eefa <__aeabi_fsub+0x5a>
1000efda:	3801      	subs	r0, #1
1000efdc:	2800      	cmp	r0, #0
1000efde:	d0a4      	beq.n	1000ef2a <__aeabi_fsub+0x8a>
1000efe0:	2cff      	cmp	r4, #255	; 0xff
1000efe2:	d197      	bne.n	1000ef14 <__aeabi_fsub+0x74>
1000efe4:	e777      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000efe6:	2a00      	cmp	r2, #0
1000efe8:	d100      	bne.n	1000efec <__aeabi_fsub+0x14c>
1000efea:	e774      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000efec:	3801      	subs	r0, #1
1000efee:	2800      	cmp	r0, #0
1000eff0:	d0da      	beq.n	1000efa8 <__aeabi_fsub+0x108>
1000eff2:	2cff      	cmp	r4, #255	; 0xff
1000eff4:	d1cd      	bne.n	1000ef92 <__aeabi_fsub+0xf2>
1000eff6:	e76e      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000eff8:	2800      	cmp	r0, #0
1000effa:	d121      	bne.n	1000f040 <__aeabi_fsub+0x1a0>
1000effc:	1c60      	adds	r0, r4, #1
1000effe:	b2c0      	uxtb	r0, r0
1000f000:	2801      	cmp	r0, #1
1000f002:	dd58      	ble.n	1000f0b6 <__aeabi_fsub+0x216>
1000f004:	2780      	movs	r7, #128	; 0x80
1000f006:	1a9e      	subs	r6, r3, r2
1000f008:	04ff      	lsls	r7, r7, #19
1000f00a:	4037      	ands	r7, r6
1000f00c:	d02f      	beq.n	1000f06e <__aeabi_fsub+0x1ce>
1000f00e:	1ad6      	subs	r6, r2, r3
1000f010:	000d      	movs	r5, r1
1000f012:	e78f      	b.n	1000ef34 <__aeabi_fsub+0x94>
1000f014:	2301      	movs	r3, #1
1000f016:	401d      	ands	r5, r3
1000f018:	2300      	movs	r3, #0
1000f01a:	e76e      	b.n	1000eefa <__aeabi_fsub+0x5a>
1000f01c:	4b62      	ldr	r3, [pc, #392]	; (1000f1a8 <__aeabi_fsub+0x308>)
1000f01e:	1a24      	subs	r4, r4, r0
1000f020:	4033      	ands	r3, r6
1000f022:	e758      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f024:	2800      	cmp	r0, #0
1000f026:	d151      	bne.n	1000f0cc <__aeabi_fsub+0x22c>
1000f028:	1c60      	adds	r0, r4, #1
1000f02a:	b2c6      	uxtb	r6, r0
1000f02c:	2e01      	cmp	r6, #1
1000f02e:	dd33      	ble.n	1000f098 <__aeabi_fsub+0x1f8>
1000f030:	28ff      	cmp	r0, #255	; 0xff
1000f032:	d02d      	beq.n	1000f090 <__aeabi_fsub+0x1f0>
1000f034:	189b      	adds	r3, r3, r2
1000f036:	085b      	lsrs	r3, r3, #1
1000f038:	0004      	movs	r4, r0
1000f03a:	e74c      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f03c:	2201      	movs	r2, #1
1000f03e:	e774      	b.n	1000ef2a <__aeabi_fsub+0x8a>
1000f040:	2c00      	cmp	r4, #0
1000f042:	d01a      	beq.n	1000f07a <__aeabi_fsub+0x1da>
1000f044:	2eff      	cmp	r6, #255	; 0xff
1000f046:	d01f      	beq.n	1000f088 <__aeabi_fsub+0x1e8>
1000f048:	2480      	movs	r4, #128	; 0x80
1000f04a:	04e4      	lsls	r4, r4, #19
1000f04c:	4240      	negs	r0, r0
1000f04e:	4323      	orrs	r3, r4
1000f050:	281b      	cmp	r0, #27
1000f052:	dd00      	ble.n	1000f056 <__aeabi_fsub+0x1b6>
1000f054:	e096      	b.n	1000f184 <__aeabi_fsub+0x2e4>
1000f056:	001d      	movs	r5, r3
1000f058:	2420      	movs	r4, #32
1000f05a:	40c5      	lsrs	r5, r0
1000f05c:	1a20      	subs	r0, r4, r0
1000f05e:	4083      	lsls	r3, r0
1000f060:	1e58      	subs	r0, r3, #1
1000f062:	4183      	sbcs	r3, r0
1000f064:	432b      	orrs	r3, r5
1000f066:	1ad3      	subs	r3, r2, r3
1000f068:	0034      	movs	r4, r6
1000f06a:	000d      	movs	r5, r1
1000f06c:	e75e      	b.n	1000ef2c <__aeabi_fsub+0x8c>
1000f06e:	2e00      	cmp	r6, #0
1000f070:	d000      	beq.n	1000f074 <__aeabi_fsub+0x1d4>
1000f072:	e75f      	b.n	1000ef34 <__aeabi_fsub+0x94>
1000f074:	2500      	movs	r5, #0
1000f076:	2400      	movs	r4, #0
1000f078:	e7ab      	b.n	1000efd2 <__aeabi_fsub+0x132>
1000f07a:	2b00      	cmp	r3, #0
1000f07c:	d044      	beq.n	1000f108 <__aeabi_fsub+0x268>
1000f07e:	43c0      	mvns	r0, r0
1000f080:	2800      	cmp	r0, #0
1000f082:	d0f0      	beq.n	1000f066 <__aeabi_fsub+0x1c6>
1000f084:	2eff      	cmp	r6, #255	; 0xff
1000f086:	d1e3      	bne.n	1000f050 <__aeabi_fsub+0x1b0>
1000f088:	0013      	movs	r3, r2
1000f08a:	24ff      	movs	r4, #255	; 0xff
1000f08c:	000d      	movs	r5, r1
1000f08e:	e722      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f090:	000d      	movs	r5, r1
1000f092:	24ff      	movs	r4, #255	; 0xff
1000f094:	2300      	movs	r3, #0
1000f096:	e730      	b.n	1000eefa <__aeabi_fsub+0x5a>
1000f098:	2c00      	cmp	r4, #0
1000f09a:	d15d      	bne.n	1000f158 <__aeabi_fsub+0x2b8>
1000f09c:	2b00      	cmp	r3, #0
1000f09e:	d07d      	beq.n	1000f19c <__aeabi_fsub+0x2fc>
1000f0a0:	2a00      	cmp	r2, #0
1000f0a2:	d100      	bne.n	1000f0a6 <__aeabi_fsub+0x206>
1000f0a4:	e717      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f0a6:	189b      	adds	r3, r3, r2
1000f0a8:	015a      	lsls	r2, r3, #5
1000f0aa:	d400      	bmi.n	1000f0ae <__aeabi_fsub+0x20e>
1000f0ac:	e756      	b.n	1000ef5c <__aeabi_fsub+0xbc>
1000f0ae:	4a3e      	ldr	r2, [pc, #248]	; (1000f1a8 <__aeabi_fsub+0x308>)
1000f0b0:	0004      	movs	r4, r0
1000f0b2:	4013      	ands	r3, r2
1000f0b4:	e70f      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f0b6:	2c00      	cmp	r4, #0
1000f0b8:	d11e      	bne.n	1000f0f8 <__aeabi_fsub+0x258>
1000f0ba:	2b00      	cmp	r3, #0
1000f0bc:	d12f      	bne.n	1000f11e <__aeabi_fsub+0x27e>
1000f0be:	2a00      	cmp	r2, #0
1000f0c0:	d065      	beq.n	1000f18e <__aeabi_fsub+0x2ee>
1000f0c2:	0013      	movs	r3, r2
1000f0c4:	000d      	movs	r5, r1
1000f0c6:	e706      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f0c8:	2201      	movs	r2, #1
1000f0ca:	e76d      	b.n	1000efa8 <__aeabi_fsub+0x108>
1000f0cc:	2c00      	cmp	r4, #0
1000f0ce:	d11f      	bne.n	1000f110 <__aeabi_fsub+0x270>
1000f0d0:	2b00      	cmp	r3, #0
1000f0d2:	d059      	beq.n	1000f188 <__aeabi_fsub+0x2e8>
1000f0d4:	43c0      	mvns	r0, r0
1000f0d6:	2800      	cmp	r0, #0
1000f0d8:	d00b      	beq.n	1000f0f2 <__aeabi_fsub+0x252>
1000f0da:	2eff      	cmp	r6, #255	; 0xff
1000f0dc:	d04f      	beq.n	1000f17e <__aeabi_fsub+0x2de>
1000f0de:	281b      	cmp	r0, #27
1000f0e0:	dc5e      	bgt.n	1000f1a0 <__aeabi_fsub+0x300>
1000f0e2:	001d      	movs	r5, r3
1000f0e4:	2420      	movs	r4, #32
1000f0e6:	40c5      	lsrs	r5, r0
1000f0e8:	1a20      	subs	r0, r4, r0
1000f0ea:	4083      	lsls	r3, r0
1000f0ec:	1e58      	subs	r0, r3, #1
1000f0ee:	4183      	sbcs	r3, r0
1000f0f0:	432b      	orrs	r3, r5
1000f0f2:	189b      	adds	r3, r3, r2
1000f0f4:	0034      	movs	r4, r6
1000f0f6:	e758      	b.n	1000efaa <__aeabi_fsub+0x10a>
1000f0f8:	2b00      	cmp	r3, #0
1000f0fa:	d11c      	bne.n	1000f136 <__aeabi_fsub+0x296>
1000f0fc:	2a00      	cmp	r2, #0
1000f0fe:	d049      	beq.n	1000f194 <__aeabi_fsub+0x2f4>
1000f100:	0013      	movs	r3, r2
1000f102:	000d      	movs	r5, r1
1000f104:	24ff      	movs	r4, #255	; 0xff
1000f106:	e6e6      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f108:	0013      	movs	r3, r2
1000f10a:	0034      	movs	r4, r6
1000f10c:	000d      	movs	r5, r1
1000f10e:	e6e2      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f110:	2eff      	cmp	r6, #255	; 0xff
1000f112:	d034      	beq.n	1000f17e <__aeabi_fsub+0x2de>
1000f114:	2480      	movs	r4, #128	; 0x80
1000f116:	04e4      	lsls	r4, r4, #19
1000f118:	4240      	negs	r0, r0
1000f11a:	4323      	orrs	r3, r4
1000f11c:	e7df      	b.n	1000f0de <__aeabi_fsub+0x23e>
1000f11e:	2a00      	cmp	r2, #0
1000f120:	d100      	bne.n	1000f124 <__aeabi_fsub+0x284>
1000f122:	e6d8      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f124:	2780      	movs	r7, #128	; 0x80
1000f126:	1a98      	subs	r0, r3, r2
1000f128:	04ff      	lsls	r7, r7, #19
1000f12a:	4007      	ands	r7, r0
1000f12c:	d100      	bne.n	1000f130 <__aeabi_fsub+0x290>
1000f12e:	e74d      	b.n	1000efcc <__aeabi_fsub+0x12c>
1000f130:	1ad3      	subs	r3, r2, r3
1000f132:	000d      	movs	r5, r1
1000f134:	e6cf      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f136:	24ff      	movs	r4, #255	; 0xff
1000f138:	2a00      	cmp	r2, #0
1000f13a:	d100      	bne.n	1000f13e <__aeabi_fsub+0x29e>
1000f13c:	e6cb      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f13e:	2080      	movs	r0, #128	; 0x80
1000f140:	08db      	lsrs	r3, r3, #3
1000f142:	03c0      	lsls	r0, r0, #15
1000f144:	4203      	tst	r3, r0
1000f146:	d004      	beq.n	1000f152 <__aeabi_fsub+0x2b2>
1000f148:	08d2      	lsrs	r2, r2, #3
1000f14a:	4202      	tst	r2, r0
1000f14c:	d101      	bne.n	1000f152 <__aeabi_fsub+0x2b2>
1000f14e:	0013      	movs	r3, r2
1000f150:	000d      	movs	r5, r1
1000f152:	00db      	lsls	r3, r3, #3
1000f154:	24ff      	movs	r4, #255	; 0xff
1000f156:	e6be      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f158:	2b00      	cmp	r3, #0
1000f15a:	d010      	beq.n	1000f17e <__aeabi_fsub+0x2de>
1000f15c:	24ff      	movs	r4, #255	; 0xff
1000f15e:	2a00      	cmp	r2, #0
1000f160:	d100      	bne.n	1000f164 <__aeabi_fsub+0x2c4>
1000f162:	e6b8      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f164:	2080      	movs	r0, #128	; 0x80
1000f166:	08db      	lsrs	r3, r3, #3
1000f168:	03c0      	lsls	r0, r0, #15
1000f16a:	4203      	tst	r3, r0
1000f16c:	d003      	beq.n	1000f176 <__aeabi_fsub+0x2d6>
1000f16e:	08d2      	lsrs	r2, r2, #3
1000f170:	4202      	tst	r2, r0
1000f172:	d100      	bne.n	1000f176 <__aeabi_fsub+0x2d6>
1000f174:	0013      	movs	r3, r2
1000f176:	00db      	lsls	r3, r3, #3
1000f178:	000d      	movs	r5, r1
1000f17a:	24ff      	movs	r4, #255	; 0xff
1000f17c:	e6ab      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f17e:	0013      	movs	r3, r2
1000f180:	24ff      	movs	r4, #255	; 0xff
1000f182:	e6a8      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f184:	2301      	movs	r3, #1
1000f186:	e76e      	b.n	1000f066 <__aeabi_fsub+0x1c6>
1000f188:	0013      	movs	r3, r2
1000f18a:	0034      	movs	r4, r6
1000f18c:	e6a3      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f18e:	2700      	movs	r7, #0
1000f190:	2500      	movs	r5, #0
1000f192:	e71e      	b.n	1000efd2 <__aeabi_fsub+0x132>
1000f194:	2780      	movs	r7, #128	; 0x80
1000f196:	2500      	movs	r5, #0
1000f198:	03ff      	lsls	r7, r7, #15
1000f19a:	e6e9      	b.n	1000ef70 <__aeabi_fsub+0xd0>
1000f19c:	0013      	movs	r3, r2
1000f19e:	e69a      	b.n	1000eed6 <__aeabi_fsub+0x36>
1000f1a0:	2301      	movs	r3, #1
1000f1a2:	e7a6      	b.n	1000f0f2 <__aeabi_fsub+0x252>
1000f1a4:	7dffffff 	.word	0x7dffffff
1000f1a8:	fbffffff 	.word	0xfbffffff

1000f1ac <__aeabi_f2iz>:
1000f1ac:	0243      	lsls	r3, r0, #9
1000f1ae:	0a59      	lsrs	r1, r3, #9
1000f1b0:	0043      	lsls	r3, r0, #1
1000f1b2:	0fc2      	lsrs	r2, r0, #31
1000f1b4:	0e1b      	lsrs	r3, r3, #24
1000f1b6:	2000      	movs	r0, #0
1000f1b8:	2b7e      	cmp	r3, #126	; 0x7e
1000f1ba:	dd0e      	ble.n	1000f1da <__aeabi_f2iz+0x2e>
1000f1bc:	2b9d      	cmp	r3, #157	; 0x9d
1000f1be:	dc0d      	bgt.n	1000f1dc <__aeabi_f2iz+0x30>
1000f1c0:	2080      	movs	r0, #128	; 0x80
1000f1c2:	0400      	lsls	r0, r0, #16
1000f1c4:	4301      	orrs	r1, r0
1000f1c6:	2b95      	cmp	r3, #149	; 0x95
1000f1c8:	dc0b      	bgt.n	1000f1e2 <__aeabi_f2iz+0x36>
1000f1ca:	2096      	movs	r0, #150	; 0x96
1000f1cc:	1ac3      	subs	r3, r0, r3
1000f1ce:	40d9      	lsrs	r1, r3
1000f1d0:	000b      	movs	r3, r1
1000f1d2:	4258      	negs	r0, r3
1000f1d4:	2a00      	cmp	r2, #0
1000f1d6:	d100      	bne.n	1000f1da <__aeabi_f2iz+0x2e>
1000f1d8:	0018      	movs	r0, r3
1000f1da:	4770      	bx	lr
1000f1dc:	4b03      	ldr	r3, [pc, #12]	; (1000f1ec <__aeabi_f2iz+0x40>)
1000f1de:	18d0      	adds	r0, r2, r3
1000f1e0:	e7fb      	b.n	1000f1da <__aeabi_f2iz+0x2e>
1000f1e2:	3b96      	subs	r3, #150	; 0x96
1000f1e4:	4099      	lsls	r1, r3
1000f1e6:	000b      	movs	r3, r1
1000f1e8:	e7f3      	b.n	1000f1d2 <__aeabi_f2iz+0x26>
1000f1ea:	46c0      	nop			; (mov r8, r8)
1000f1ec:	7fffffff 	.word	0x7fffffff

1000f1f0 <__aeabi_dmul>:
1000f1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f1f2:	465f      	mov	r7, fp
1000f1f4:	4656      	mov	r6, sl
1000f1f6:	464d      	mov	r5, r9
1000f1f8:	4644      	mov	r4, r8
1000f1fa:	b4f0      	push	{r4, r5, r6, r7}
1000f1fc:	030d      	lsls	r5, r1, #12
1000f1fe:	4699      	mov	r9, r3
1000f200:	004e      	lsls	r6, r1, #1
1000f202:	0b2b      	lsrs	r3, r5, #12
1000f204:	b087      	sub	sp, #28
1000f206:	0007      	movs	r7, r0
1000f208:	4692      	mov	sl, r2
1000f20a:	4680      	mov	r8, r0
1000f20c:	469b      	mov	fp, r3
1000f20e:	0d76      	lsrs	r6, r6, #21
1000f210:	0fcc      	lsrs	r4, r1, #31
1000f212:	2e00      	cmp	r6, #0
1000f214:	d069      	beq.n	1000f2ea <__aeabi_dmul+0xfa>
1000f216:	4b6d      	ldr	r3, [pc, #436]	; (1000f3cc <__aeabi_dmul+0x1dc>)
1000f218:	429e      	cmp	r6, r3
1000f21a:	d035      	beq.n	1000f288 <__aeabi_dmul+0x98>
1000f21c:	465b      	mov	r3, fp
1000f21e:	2280      	movs	r2, #128	; 0x80
1000f220:	00dd      	lsls	r5, r3, #3
1000f222:	0412      	lsls	r2, r2, #16
1000f224:	0f43      	lsrs	r3, r0, #29
1000f226:	4313      	orrs	r3, r2
1000f228:	432b      	orrs	r3, r5
1000f22a:	469b      	mov	fp, r3
1000f22c:	00c3      	lsls	r3, r0, #3
1000f22e:	4698      	mov	r8, r3
1000f230:	4b67      	ldr	r3, [pc, #412]	; (1000f3d0 <__aeabi_dmul+0x1e0>)
1000f232:	2700      	movs	r7, #0
1000f234:	469c      	mov	ip, r3
1000f236:	2300      	movs	r3, #0
1000f238:	4466      	add	r6, ip
1000f23a:	9301      	str	r3, [sp, #4]
1000f23c:	464a      	mov	r2, r9
1000f23e:	0315      	lsls	r5, r2, #12
1000f240:	0050      	lsls	r0, r2, #1
1000f242:	0fd2      	lsrs	r2, r2, #31
1000f244:	4653      	mov	r3, sl
1000f246:	0b2d      	lsrs	r5, r5, #12
1000f248:	0d40      	lsrs	r0, r0, #21
1000f24a:	4691      	mov	r9, r2
1000f24c:	d100      	bne.n	1000f250 <__aeabi_dmul+0x60>
1000f24e:	e076      	b.n	1000f33e <__aeabi_dmul+0x14e>
1000f250:	4a5e      	ldr	r2, [pc, #376]	; (1000f3cc <__aeabi_dmul+0x1dc>)
1000f252:	4290      	cmp	r0, r2
1000f254:	d06c      	beq.n	1000f330 <__aeabi_dmul+0x140>
1000f256:	2280      	movs	r2, #128	; 0x80
1000f258:	0f5b      	lsrs	r3, r3, #29
1000f25a:	0412      	lsls	r2, r2, #16
1000f25c:	4313      	orrs	r3, r2
1000f25e:	4a5c      	ldr	r2, [pc, #368]	; (1000f3d0 <__aeabi_dmul+0x1e0>)
1000f260:	00ed      	lsls	r5, r5, #3
1000f262:	4694      	mov	ip, r2
1000f264:	431d      	orrs	r5, r3
1000f266:	4653      	mov	r3, sl
1000f268:	2200      	movs	r2, #0
1000f26a:	00db      	lsls	r3, r3, #3
1000f26c:	4460      	add	r0, ip
1000f26e:	4649      	mov	r1, r9
1000f270:	1836      	adds	r6, r6, r0
1000f272:	1c70      	adds	r0, r6, #1
1000f274:	4061      	eors	r1, r4
1000f276:	9002      	str	r0, [sp, #8]
1000f278:	4317      	orrs	r7, r2
1000f27a:	2f0f      	cmp	r7, #15
1000f27c:	d900      	bls.n	1000f280 <__aeabi_dmul+0x90>
1000f27e:	e0af      	b.n	1000f3e0 <__aeabi_dmul+0x1f0>
1000f280:	4854      	ldr	r0, [pc, #336]	; (1000f3d4 <__aeabi_dmul+0x1e4>)
1000f282:	00bf      	lsls	r7, r7, #2
1000f284:	59c7      	ldr	r7, [r0, r7]
1000f286:	46bf      	mov	pc, r7
1000f288:	465b      	mov	r3, fp
1000f28a:	431f      	orrs	r7, r3
1000f28c:	d000      	beq.n	1000f290 <__aeabi_dmul+0xa0>
1000f28e:	e088      	b.n	1000f3a2 <__aeabi_dmul+0x1b2>
1000f290:	2300      	movs	r3, #0
1000f292:	469b      	mov	fp, r3
1000f294:	4698      	mov	r8, r3
1000f296:	3302      	adds	r3, #2
1000f298:	2708      	movs	r7, #8
1000f29a:	9301      	str	r3, [sp, #4]
1000f29c:	e7ce      	b.n	1000f23c <__aeabi_dmul+0x4c>
1000f29e:	4649      	mov	r1, r9
1000f2a0:	2a02      	cmp	r2, #2
1000f2a2:	d06a      	beq.n	1000f37a <__aeabi_dmul+0x18a>
1000f2a4:	2a03      	cmp	r2, #3
1000f2a6:	d100      	bne.n	1000f2aa <__aeabi_dmul+0xba>
1000f2a8:	e209      	b.n	1000f6be <__aeabi_dmul+0x4ce>
1000f2aa:	2a01      	cmp	r2, #1
1000f2ac:	d000      	beq.n	1000f2b0 <__aeabi_dmul+0xc0>
1000f2ae:	e1bb      	b.n	1000f628 <__aeabi_dmul+0x438>
1000f2b0:	4011      	ands	r1, r2
1000f2b2:	2200      	movs	r2, #0
1000f2b4:	2300      	movs	r3, #0
1000f2b6:	2500      	movs	r5, #0
1000f2b8:	4690      	mov	r8, r2
1000f2ba:	b2cc      	uxtb	r4, r1
1000f2bc:	2100      	movs	r1, #0
1000f2be:	032d      	lsls	r5, r5, #12
1000f2c0:	0d0a      	lsrs	r2, r1, #20
1000f2c2:	0512      	lsls	r2, r2, #20
1000f2c4:	0b2d      	lsrs	r5, r5, #12
1000f2c6:	4315      	orrs	r5, r2
1000f2c8:	4a43      	ldr	r2, [pc, #268]	; (1000f3d8 <__aeabi_dmul+0x1e8>)
1000f2ca:	051b      	lsls	r3, r3, #20
1000f2cc:	4015      	ands	r5, r2
1000f2ce:	431d      	orrs	r5, r3
1000f2d0:	006d      	lsls	r5, r5, #1
1000f2d2:	07e4      	lsls	r4, r4, #31
1000f2d4:	086d      	lsrs	r5, r5, #1
1000f2d6:	4325      	orrs	r5, r4
1000f2d8:	4640      	mov	r0, r8
1000f2da:	0029      	movs	r1, r5
1000f2dc:	b007      	add	sp, #28
1000f2de:	bc3c      	pop	{r2, r3, r4, r5}
1000f2e0:	4690      	mov	r8, r2
1000f2e2:	4699      	mov	r9, r3
1000f2e4:	46a2      	mov	sl, r4
1000f2e6:	46ab      	mov	fp, r5
1000f2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2ea:	4303      	orrs	r3, r0
1000f2ec:	d052      	beq.n	1000f394 <__aeabi_dmul+0x1a4>
1000f2ee:	465b      	mov	r3, fp
1000f2f0:	2b00      	cmp	r3, #0
1000f2f2:	d100      	bne.n	1000f2f6 <__aeabi_dmul+0x106>
1000f2f4:	e18a      	b.n	1000f60c <__aeabi_dmul+0x41c>
1000f2f6:	4658      	mov	r0, fp
1000f2f8:	f000 fefc 	bl	100100f4 <__clzsi2>
1000f2fc:	0003      	movs	r3, r0
1000f2fe:	3b0b      	subs	r3, #11
1000f300:	2b1c      	cmp	r3, #28
1000f302:	dd00      	ble.n	1000f306 <__aeabi_dmul+0x116>
1000f304:	e17b      	b.n	1000f5fe <__aeabi_dmul+0x40e>
1000f306:	221d      	movs	r2, #29
1000f308:	1ad3      	subs	r3, r2, r3
1000f30a:	003a      	movs	r2, r7
1000f30c:	0001      	movs	r1, r0
1000f30e:	465d      	mov	r5, fp
1000f310:	40da      	lsrs	r2, r3
1000f312:	3908      	subs	r1, #8
1000f314:	408d      	lsls	r5, r1
1000f316:	0013      	movs	r3, r2
1000f318:	408f      	lsls	r7, r1
1000f31a:	432b      	orrs	r3, r5
1000f31c:	469b      	mov	fp, r3
1000f31e:	46b8      	mov	r8, r7
1000f320:	4b2e      	ldr	r3, [pc, #184]	; (1000f3dc <__aeabi_dmul+0x1ec>)
1000f322:	2700      	movs	r7, #0
1000f324:	469c      	mov	ip, r3
1000f326:	2300      	movs	r3, #0
1000f328:	4460      	add	r0, ip
1000f32a:	4246      	negs	r6, r0
1000f32c:	9301      	str	r3, [sp, #4]
1000f32e:	e785      	b.n	1000f23c <__aeabi_dmul+0x4c>
1000f330:	4652      	mov	r2, sl
1000f332:	432a      	orrs	r2, r5
1000f334:	d12c      	bne.n	1000f390 <__aeabi_dmul+0x1a0>
1000f336:	2500      	movs	r5, #0
1000f338:	2300      	movs	r3, #0
1000f33a:	2202      	movs	r2, #2
1000f33c:	e797      	b.n	1000f26e <__aeabi_dmul+0x7e>
1000f33e:	4652      	mov	r2, sl
1000f340:	432a      	orrs	r2, r5
1000f342:	d021      	beq.n	1000f388 <__aeabi_dmul+0x198>
1000f344:	2d00      	cmp	r5, #0
1000f346:	d100      	bne.n	1000f34a <__aeabi_dmul+0x15a>
1000f348:	e154      	b.n	1000f5f4 <__aeabi_dmul+0x404>
1000f34a:	0028      	movs	r0, r5
1000f34c:	f000 fed2 	bl	100100f4 <__clzsi2>
1000f350:	0003      	movs	r3, r0
1000f352:	3b0b      	subs	r3, #11
1000f354:	2b1c      	cmp	r3, #28
1000f356:	dd00      	ble.n	1000f35a <__aeabi_dmul+0x16a>
1000f358:	e146      	b.n	1000f5e8 <__aeabi_dmul+0x3f8>
1000f35a:	211d      	movs	r1, #29
1000f35c:	1acb      	subs	r3, r1, r3
1000f35e:	4651      	mov	r1, sl
1000f360:	0002      	movs	r2, r0
1000f362:	40d9      	lsrs	r1, r3
1000f364:	4653      	mov	r3, sl
1000f366:	3a08      	subs	r2, #8
1000f368:	4095      	lsls	r5, r2
1000f36a:	4093      	lsls	r3, r2
1000f36c:	430d      	orrs	r5, r1
1000f36e:	4a1b      	ldr	r2, [pc, #108]	; (1000f3dc <__aeabi_dmul+0x1ec>)
1000f370:	4694      	mov	ip, r2
1000f372:	4460      	add	r0, ip
1000f374:	4240      	negs	r0, r0
1000f376:	2200      	movs	r2, #0
1000f378:	e779      	b.n	1000f26e <__aeabi_dmul+0x7e>
1000f37a:	2401      	movs	r4, #1
1000f37c:	2200      	movs	r2, #0
1000f37e:	400c      	ands	r4, r1
1000f380:	4b12      	ldr	r3, [pc, #72]	; (1000f3cc <__aeabi_dmul+0x1dc>)
1000f382:	2500      	movs	r5, #0
1000f384:	4690      	mov	r8, r2
1000f386:	e799      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f388:	2500      	movs	r5, #0
1000f38a:	2300      	movs	r3, #0
1000f38c:	2201      	movs	r2, #1
1000f38e:	e76e      	b.n	1000f26e <__aeabi_dmul+0x7e>
1000f390:	2203      	movs	r2, #3
1000f392:	e76c      	b.n	1000f26e <__aeabi_dmul+0x7e>
1000f394:	2300      	movs	r3, #0
1000f396:	469b      	mov	fp, r3
1000f398:	4698      	mov	r8, r3
1000f39a:	3301      	adds	r3, #1
1000f39c:	2704      	movs	r7, #4
1000f39e:	9301      	str	r3, [sp, #4]
1000f3a0:	e74c      	b.n	1000f23c <__aeabi_dmul+0x4c>
1000f3a2:	2303      	movs	r3, #3
1000f3a4:	270c      	movs	r7, #12
1000f3a6:	9301      	str	r3, [sp, #4]
1000f3a8:	e748      	b.n	1000f23c <__aeabi_dmul+0x4c>
1000f3aa:	2300      	movs	r3, #0
1000f3ac:	2580      	movs	r5, #128	; 0x80
1000f3ae:	4698      	mov	r8, r3
1000f3b0:	2400      	movs	r4, #0
1000f3b2:	032d      	lsls	r5, r5, #12
1000f3b4:	4b05      	ldr	r3, [pc, #20]	; (1000f3cc <__aeabi_dmul+0x1dc>)
1000f3b6:	e781      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f3b8:	465d      	mov	r5, fp
1000f3ba:	4643      	mov	r3, r8
1000f3bc:	9a01      	ldr	r2, [sp, #4]
1000f3be:	e76f      	b.n	1000f2a0 <__aeabi_dmul+0xb0>
1000f3c0:	465d      	mov	r5, fp
1000f3c2:	4643      	mov	r3, r8
1000f3c4:	0021      	movs	r1, r4
1000f3c6:	9a01      	ldr	r2, [sp, #4]
1000f3c8:	e76a      	b.n	1000f2a0 <__aeabi_dmul+0xb0>
1000f3ca:	46c0      	nop			; (mov r8, r8)
1000f3cc:	000007ff 	.word	0x000007ff
1000f3d0:	fffffc01 	.word	0xfffffc01
1000f3d4:	10012420 	.word	0x10012420
1000f3d8:	800fffff 	.word	0x800fffff
1000f3dc:	000003f3 	.word	0x000003f3
1000f3e0:	4642      	mov	r2, r8
1000f3e2:	0c12      	lsrs	r2, r2, #16
1000f3e4:	4691      	mov	r9, r2
1000f3e6:	0c1a      	lsrs	r2, r3, #16
1000f3e8:	4694      	mov	ip, r2
1000f3ea:	4642      	mov	r2, r8
1000f3ec:	0417      	lsls	r7, r2, #16
1000f3ee:	464a      	mov	r2, r9
1000f3f0:	041b      	lsls	r3, r3, #16
1000f3f2:	0c1b      	lsrs	r3, r3, #16
1000f3f4:	435a      	muls	r2, r3
1000f3f6:	4660      	mov	r0, ip
1000f3f8:	4690      	mov	r8, r2
1000f3fa:	464a      	mov	r2, r9
1000f3fc:	4342      	muls	r2, r0
1000f3fe:	0010      	movs	r0, r2
1000f400:	9203      	str	r2, [sp, #12]
1000f402:	4662      	mov	r2, ip
1000f404:	001c      	movs	r4, r3
1000f406:	0c3f      	lsrs	r7, r7, #16
1000f408:	437a      	muls	r2, r7
1000f40a:	437c      	muls	r4, r7
1000f40c:	4442      	add	r2, r8
1000f40e:	9201      	str	r2, [sp, #4]
1000f410:	0c22      	lsrs	r2, r4, #16
1000f412:	4692      	mov	sl, r2
1000f414:	9a01      	ldr	r2, [sp, #4]
1000f416:	4452      	add	r2, sl
1000f418:	4590      	cmp	r8, r2
1000f41a:	d906      	bls.n	1000f42a <__aeabi_dmul+0x23a>
1000f41c:	4682      	mov	sl, r0
1000f41e:	2080      	movs	r0, #128	; 0x80
1000f420:	0240      	lsls	r0, r0, #9
1000f422:	4680      	mov	r8, r0
1000f424:	44c2      	add	sl, r8
1000f426:	4650      	mov	r0, sl
1000f428:	9003      	str	r0, [sp, #12]
1000f42a:	0c10      	lsrs	r0, r2, #16
1000f42c:	9004      	str	r0, [sp, #16]
1000f42e:	4648      	mov	r0, r9
1000f430:	0424      	lsls	r4, r4, #16
1000f432:	0c24      	lsrs	r4, r4, #16
1000f434:	0412      	lsls	r2, r2, #16
1000f436:	1912      	adds	r2, r2, r4
1000f438:	9205      	str	r2, [sp, #20]
1000f43a:	0c2a      	lsrs	r2, r5, #16
1000f43c:	042d      	lsls	r5, r5, #16
1000f43e:	0c2d      	lsrs	r5, r5, #16
1000f440:	4368      	muls	r0, r5
1000f442:	002c      	movs	r4, r5
1000f444:	4682      	mov	sl, r0
1000f446:	4648      	mov	r0, r9
1000f448:	437c      	muls	r4, r7
1000f44a:	4350      	muls	r0, r2
1000f44c:	4681      	mov	r9, r0
1000f44e:	0c20      	lsrs	r0, r4, #16
1000f450:	4680      	mov	r8, r0
1000f452:	4357      	muls	r7, r2
1000f454:	4457      	add	r7, sl
1000f456:	4447      	add	r7, r8
1000f458:	45ba      	cmp	sl, r7
1000f45a:	d903      	bls.n	1000f464 <__aeabi_dmul+0x274>
1000f45c:	2080      	movs	r0, #128	; 0x80
1000f45e:	0240      	lsls	r0, r0, #9
1000f460:	4680      	mov	r8, r0
1000f462:	44c1      	add	r9, r8
1000f464:	0c38      	lsrs	r0, r7, #16
1000f466:	043f      	lsls	r7, r7, #16
1000f468:	46b8      	mov	r8, r7
1000f46a:	4448      	add	r0, r9
1000f46c:	0424      	lsls	r4, r4, #16
1000f46e:	0c24      	lsrs	r4, r4, #16
1000f470:	9001      	str	r0, [sp, #4]
1000f472:	9804      	ldr	r0, [sp, #16]
1000f474:	44a0      	add	r8, r4
1000f476:	4440      	add	r0, r8
1000f478:	9004      	str	r0, [sp, #16]
1000f47a:	4658      	mov	r0, fp
1000f47c:	0c00      	lsrs	r0, r0, #16
1000f47e:	4681      	mov	r9, r0
1000f480:	4658      	mov	r0, fp
1000f482:	0404      	lsls	r4, r0, #16
1000f484:	0c20      	lsrs	r0, r4, #16
1000f486:	4682      	mov	sl, r0
1000f488:	0007      	movs	r7, r0
1000f48a:	4648      	mov	r0, r9
1000f48c:	435f      	muls	r7, r3
1000f48e:	464c      	mov	r4, r9
1000f490:	4343      	muls	r3, r0
1000f492:	4660      	mov	r0, ip
1000f494:	4360      	muls	r0, r4
1000f496:	4664      	mov	r4, ip
1000f498:	4683      	mov	fp, r0
1000f49a:	4650      	mov	r0, sl
1000f49c:	4344      	muls	r4, r0
1000f49e:	0c38      	lsrs	r0, r7, #16
1000f4a0:	4684      	mov	ip, r0
1000f4a2:	18e4      	adds	r4, r4, r3
1000f4a4:	4464      	add	r4, ip
1000f4a6:	42a3      	cmp	r3, r4
1000f4a8:	d903      	bls.n	1000f4b2 <__aeabi_dmul+0x2c2>
1000f4aa:	2380      	movs	r3, #128	; 0x80
1000f4ac:	025b      	lsls	r3, r3, #9
1000f4ae:	469c      	mov	ip, r3
1000f4b0:	44e3      	add	fp, ip
1000f4b2:	4648      	mov	r0, r9
1000f4b4:	043f      	lsls	r7, r7, #16
1000f4b6:	0c23      	lsrs	r3, r4, #16
1000f4b8:	0c3f      	lsrs	r7, r7, #16
1000f4ba:	0424      	lsls	r4, r4, #16
1000f4bc:	19e4      	adds	r4, r4, r7
1000f4be:	4657      	mov	r7, sl
1000f4c0:	4368      	muls	r0, r5
1000f4c2:	436f      	muls	r7, r5
1000f4c4:	4684      	mov	ip, r0
1000f4c6:	464d      	mov	r5, r9
1000f4c8:	4650      	mov	r0, sl
1000f4ca:	4355      	muls	r5, r2
1000f4cc:	4342      	muls	r2, r0
1000f4ce:	0c38      	lsrs	r0, r7, #16
1000f4d0:	4681      	mov	r9, r0
1000f4d2:	4462      	add	r2, ip
1000f4d4:	444a      	add	r2, r9
1000f4d6:	445b      	add	r3, fp
1000f4d8:	4594      	cmp	ip, r2
1000f4da:	d903      	bls.n	1000f4e4 <__aeabi_dmul+0x2f4>
1000f4dc:	2080      	movs	r0, #128	; 0x80
1000f4de:	0240      	lsls	r0, r0, #9
1000f4e0:	4684      	mov	ip, r0
1000f4e2:	4465      	add	r5, ip
1000f4e4:	9803      	ldr	r0, [sp, #12]
1000f4e6:	043f      	lsls	r7, r7, #16
1000f4e8:	4683      	mov	fp, r0
1000f4ea:	9804      	ldr	r0, [sp, #16]
1000f4ec:	0c3f      	lsrs	r7, r7, #16
1000f4ee:	4684      	mov	ip, r0
1000f4f0:	44e3      	add	fp, ip
1000f4f2:	45c3      	cmp	fp, r8
1000f4f4:	4180      	sbcs	r0, r0
1000f4f6:	4240      	negs	r0, r0
1000f4f8:	4682      	mov	sl, r0
1000f4fa:	0410      	lsls	r0, r2, #16
1000f4fc:	4684      	mov	ip, r0
1000f4fe:	9801      	ldr	r0, [sp, #4]
1000f500:	4467      	add	r7, ip
1000f502:	4684      	mov	ip, r0
1000f504:	4467      	add	r7, ip
1000f506:	44a3      	add	fp, r4
1000f508:	46bc      	mov	ip, r7
1000f50a:	45a3      	cmp	fp, r4
1000f50c:	41a4      	sbcs	r4, r4
1000f50e:	4699      	mov	r9, r3
1000f510:	44d4      	add	ip, sl
1000f512:	4264      	negs	r4, r4
1000f514:	4287      	cmp	r7, r0
1000f516:	41bf      	sbcs	r7, r7
1000f518:	45d4      	cmp	ip, sl
1000f51a:	4180      	sbcs	r0, r0
1000f51c:	44e1      	add	r9, ip
1000f51e:	46a0      	mov	r8, r4
1000f520:	4599      	cmp	r9, r3
1000f522:	419b      	sbcs	r3, r3
1000f524:	427f      	negs	r7, r7
1000f526:	4240      	negs	r0, r0
1000f528:	44c8      	add	r8, r9
1000f52a:	4307      	orrs	r7, r0
1000f52c:	0c12      	lsrs	r2, r2, #16
1000f52e:	18ba      	adds	r2, r7, r2
1000f530:	45a0      	cmp	r8, r4
1000f532:	41a4      	sbcs	r4, r4
1000f534:	425f      	negs	r7, r3
1000f536:	003b      	movs	r3, r7
1000f538:	4264      	negs	r4, r4
1000f53a:	4323      	orrs	r3, r4
1000f53c:	18d7      	adds	r7, r2, r3
1000f53e:	4643      	mov	r3, r8
1000f540:	197d      	adds	r5, r7, r5
1000f542:	0ddb      	lsrs	r3, r3, #23
1000f544:	026d      	lsls	r5, r5, #9
1000f546:	431d      	orrs	r5, r3
1000f548:	465b      	mov	r3, fp
1000f54a:	025a      	lsls	r2, r3, #9
1000f54c:	9b05      	ldr	r3, [sp, #20]
1000f54e:	431a      	orrs	r2, r3
1000f550:	1e53      	subs	r3, r2, #1
1000f552:	419a      	sbcs	r2, r3
1000f554:	465b      	mov	r3, fp
1000f556:	0ddb      	lsrs	r3, r3, #23
1000f558:	431a      	orrs	r2, r3
1000f55a:	4643      	mov	r3, r8
1000f55c:	025b      	lsls	r3, r3, #9
1000f55e:	4313      	orrs	r3, r2
1000f560:	01ea      	lsls	r2, r5, #7
1000f562:	d507      	bpl.n	1000f574 <__aeabi_dmul+0x384>
1000f564:	2201      	movs	r2, #1
1000f566:	085c      	lsrs	r4, r3, #1
1000f568:	4013      	ands	r3, r2
1000f56a:	4323      	orrs	r3, r4
1000f56c:	07ea      	lsls	r2, r5, #31
1000f56e:	9e02      	ldr	r6, [sp, #8]
1000f570:	4313      	orrs	r3, r2
1000f572:	086d      	lsrs	r5, r5, #1
1000f574:	4a57      	ldr	r2, [pc, #348]	; (1000f6d4 <__aeabi_dmul+0x4e4>)
1000f576:	18b2      	adds	r2, r6, r2
1000f578:	2a00      	cmp	r2, #0
1000f57a:	dd4b      	ble.n	1000f614 <__aeabi_dmul+0x424>
1000f57c:	0758      	lsls	r0, r3, #29
1000f57e:	d009      	beq.n	1000f594 <__aeabi_dmul+0x3a4>
1000f580:	200f      	movs	r0, #15
1000f582:	4018      	ands	r0, r3
1000f584:	2804      	cmp	r0, #4
1000f586:	d005      	beq.n	1000f594 <__aeabi_dmul+0x3a4>
1000f588:	1d18      	adds	r0, r3, #4
1000f58a:	4298      	cmp	r0, r3
1000f58c:	419b      	sbcs	r3, r3
1000f58e:	425b      	negs	r3, r3
1000f590:	18ed      	adds	r5, r5, r3
1000f592:	0003      	movs	r3, r0
1000f594:	01e8      	lsls	r0, r5, #7
1000f596:	d504      	bpl.n	1000f5a2 <__aeabi_dmul+0x3b2>
1000f598:	4a4f      	ldr	r2, [pc, #316]	; (1000f6d8 <__aeabi_dmul+0x4e8>)
1000f59a:	4015      	ands	r5, r2
1000f59c:	2280      	movs	r2, #128	; 0x80
1000f59e:	00d2      	lsls	r2, r2, #3
1000f5a0:	18b2      	adds	r2, r6, r2
1000f5a2:	484e      	ldr	r0, [pc, #312]	; (1000f6dc <__aeabi_dmul+0x4ec>)
1000f5a4:	4282      	cmp	r2, r0
1000f5a6:	dd00      	ble.n	1000f5aa <__aeabi_dmul+0x3ba>
1000f5a8:	e6e7      	b.n	1000f37a <__aeabi_dmul+0x18a>
1000f5aa:	2401      	movs	r4, #1
1000f5ac:	08db      	lsrs	r3, r3, #3
1000f5ae:	0768      	lsls	r0, r5, #29
1000f5b0:	4318      	orrs	r0, r3
1000f5b2:	026d      	lsls	r5, r5, #9
1000f5b4:	0553      	lsls	r3, r2, #21
1000f5b6:	4680      	mov	r8, r0
1000f5b8:	0b2d      	lsrs	r5, r5, #12
1000f5ba:	0d5b      	lsrs	r3, r3, #21
1000f5bc:	400c      	ands	r4, r1
1000f5be:	e67d      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f5c0:	2280      	movs	r2, #128	; 0x80
1000f5c2:	4659      	mov	r1, fp
1000f5c4:	0312      	lsls	r2, r2, #12
1000f5c6:	4211      	tst	r1, r2
1000f5c8:	d008      	beq.n	1000f5dc <__aeabi_dmul+0x3ec>
1000f5ca:	4215      	tst	r5, r2
1000f5cc:	d106      	bne.n	1000f5dc <__aeabi_dmul+0x3ec>
1000f5ce:	4315      	orrs	r5, r2
1000f5d0:	032d      	lsls	r5, r5, #12
1000f5d2:	4698      	mov	r8, r3
1000f5d4:	0b2d      	lsrs	r5, r5, #12
1000f5d6:	464c      	mov	r4, r9
1000f5d8:	4b41      	ldr	r3, [pc, #260]	; (1000f6e0 <__aeabi_dmul+0x4f0>)
1000f5da:	e66f      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f5dc:	465d      	mov	r5, fp
1000f5de:	4315      	orrs	r5, r2
1000f5e0:	032d      	lsls	r5, r5, #12
1000f5e2:	0b2d      	lsrs	r5, r5, #12
1000f5e4:	4b3e      	ldr	r3, [pc, #248]	; (1000f6e0 <__aeabi_dmul+0x4f0>)
1000f5e6:	e669      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f5e8:	0003      	movs	r3, r0
1000f5ea:	4655      	mov	r5, sl
1000f5ec:	3b28      	subs	r3, #40	; 0x28
1000f5ee:	409d      	lsls	r5, r3
1000f5f0:	2300      	movs	r3, #0
1000f5f2:	e6bc      	b.n	1000f36e <__aeabi_dmul+0x17e>
1000f5f4:	4650      	mov	r0, sl
1000f5f6:	f000 fd7d 	bl	100100f4 <__clzsi2>
1000f5fa:	3020      	adds	r0, #32
1000f5fc:	e6a8      	b.n	1000f350 <__aeabi_dmul+0x160>
1000f5fe:	0003      	movs	r3, r0
1000f600:	3b28      	subs	r3, #40	; 0x28
1000f602:	409f      	lsls	r7, r3
1000f604:	2300      	movs	r3, #0
1000f606:	46bb      	mov	fp, r7
1000f608:	4698      	mov	r8, r3
1000f60a:	e689      	b.n	1000f320 <__aeabi_dmul+0x130>
1000f60c:	f000 fd72 	bl	100100f4 <__clzsi2>
1000f610:	3020      	adds	r0, #32
1000f612:	e673      	b.n	1000f2fc <__aeabi_dmul+0x10c>
1000f614:	2401      	movs	r4, #1
1000f616:	1aa6      	subs	r6, r4, r2
1000f618:	2e38      	cmp	r6, #56	; 0x38
1000f61a:	dd07      	ble.n	1000f62c <__aeabi_dmul+0x43c>
1000f61c:	2200      	movs	r2, #0
1000f61e:	400c      	ands	r4, r1
1000f620:	2300      	movs	r3, #0
1000f622:	2500      	movs	r5, #0
1000f624:	4690      	mov	r8, r2
1000f626:	e649      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f628:	9e02      	ldr	r6, [sp, #8]
1000f62a:	e7a3      	b.n	1000f574 <__aeabi_dmul+0x384>
1000f62c:	2e1f      	cmp	r6, #31
1000f62e:	dc20      	bgt.n	1000f672 <__aeabi_dmul+0x482>
1000f630:	2220      	movs	r2, #32
1000f632:	002c      	movs	r4, r5
1000f634:	0018      	movs	r0, r3
1000f636:	1b92      	subs	r2, r2, r6
1000f638:	40f0      	lsrs	r0, r6
1000f63a:	4094      	lsls	r4, r2
1000f63c:	4093      	lsls	r3, r2
1000f63e:	4304      	orrs	r4, r0
1000f640:	1e58      	subs	r0, r3, #1
1000f642:	4183      	sbcs	r3, r0
1000f644:	431c      	orrs	r4, r3
1000f646:	40f5      	lsrs	r5, r6
1000f648:	0763      	lsls	r3, r4, #29
1000f64a:	d009      	beq.n	1000f660 <__aeabi_dmul+0x470>
1000f64c:	230f      	movs	r3, #15
1000f64e:	4023      	ands	r3, r4
1000f650:	2b04      	cmp	r3, #4
1000f652:	d005      	beq.n	1000f660 <__aeabi_dmul+0x470>
1000f654:	0023      	movs	r3, r4
1000f656:	1d1c      	adds	r4, r3, #4
1000f658:	429c      	cmp	r4, r3
1000f65a:	4192      	sbcs	r2, r2
1000f65c:	4252      	negs	r2, r2
1000f65e:	18ad      	adds	r5, r5, r2
1000f660:	022b      	lsls	r3, r5, #8
1000f662:	d51f      	bpl.n	1000f6a4 <__aeabi_dmul+0x4b4>
1000f664:	2401      	movs	r4, #1
1000f666:	2200      	movs	r2, #0
1000f668:	400c      	ands	r4, r1
1000f66a:	2301      	movs	r3, #1
1000f66c:	2500      	movs	r5, #0
1000f66e:	4690      	mov	r8, r2
1000f670:	e624      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f672:	201f      	movs	r0, #31
1000f674:	002c      	movs	r4, r5
1000f676:	4240      	negs	r0, r0
1000f678:	1a82      	subs	r2, r0, r2
1000f67a:	40d4      	lsrs	r4, r2
1000f67c:	2e20      	cmp	r6, #32
1000f67e:	d01c      	beq.n	1000f6ba <__aeabi_dmul+0x4ca>
1000f680:	2240      	movs	r2, #64	; 0x40
1000f682:	1b96      	subs	r6, r2, r6
1000f684:	40b5      	lsls	r5, r6
1000f686:	432b      	orrs	r3, r5
1000f688:	1e58      	subs	r0, r3, #1
1000f68a:	4183      	sbcs	r3, r0
1000f68c:	2007      	movs	r0, #7
1000f68e:	4323      	orrs	r3, r4
1000f690:	4018      	ands	r0, r3
1000f692:	2500      	movs	r5, #0
1000f694:	2800      	cmp	r0, #0
1000f696:	d009      	beq.n	1000f6ac <__aeabi_dmul+0x4bc>
1000f698:	220f      	movs	r2, #15
1000f69a:	2500      	movs	r5, #0
1000f69c:	401a      	ands	r2, r3
1000f69e:	001c      	movs	r4, r3
1000f6a0:	2a04      	cmp	r2, #4
1000f6a2:	d1d8      	bne.n	1000f656 <__aeabi_dmul+0x466>
1000f6a4:	0023      	movs	r3, r4
1000f6a6:	0768      	lsls	r0, r5, #29
1000f6a8:	026d      	lsls	r5, r5, #9
1000f6aa:	0b2d      	lsrs	r5, r5, #12
1000f6ac:	2401      	movs	r4, #1
1000f6ae:	08db      	lsrs	r3, r3, #3
1000f6b0:	4303      	orrs	r3, r0
1000f6b2:	4698      	mov	r8, r3
1000f6b4:	400c      	ands	r4, r1
1000f6b6:	2300      	movs	r3, #0
1000f6b8:	e600      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f6ba:	2500      	movs	r5, #0
1000f6bc:	e7e3      	b.n	1000f686 <__aeabi_dmul+0x496>
1000f6be:	2280      	movs	r2, #128	; 0x80
1000f6c0:	2401      	movs	r4, #1
1000f6c2:	0312      	lsls	r2, r2, #12
1000f6c4:	4315      	orrs	r5, r2
1000f6c6:	032d      	lsls	r5, r5, #12
1000f6c8:	4698      	mov	r8, r3
1000f6ca:	0b2d      	lsrs	r5, r5, #12
1000f6cc:	400c      	ands	r4, r1
1000f6ce:	4b04      	ldr	r3, [pc, #16]	; (1000f6e0 <__aeabi_dmul+0x4f0>)
1000f6d0:	e5f4      	b.n	1000f2bc <__aeabi_dmul+0xcc>
1000f6d2:	46c0      	nop			; (mov r8, r8)
1000f6d4:	000003ff 	.word	0x000003ff
1000f6d8:	feffffff 	.word	0xfeffffff
1000f6dc:	000007fe 	.word	0x000007fe
1000f6e0:	000007ff 	.word	0x000007ff

1000f6e4 <__aeabi_dsub>:
1000f6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6e6:	4657      	mov	r7, sl
1000f6e8:	464e      	mov	r6, r9
1000f6ea:	4645      	mov	r5, r8
1000f6ec:	b4e0      	push	{r5, r6, r7}
1000f6ee:	000e      	movs	r6, r1
1000f6f0:	0011      	movs	r1, r2
1000f6f2:	0ff2      	lsrs	r2, r6, #31
1000f6f4:	4692      	mov	sl, r2
1000f6f6:	00c5      	lsls	r5, r0, #3
1000f6f8:	0f42      	lsrs	r2, r0, #29
1000f6fa:	0318      	lsls	r0, r3, #12
1000f6fc:	0337      	lsls	r7, r6, #12
1000f6fe:	0074      	lsls	r4, r6, #1
1000f700:	0a40      	lsrs	r0, r0, #9
1000f702:	0f4e      	lsrs	r6, r1, #29
1000f704:	0a7f      	lsrs	r7, r7, #9
1000f706:	4330      	orrs	r0, r6
1000f708:	4ecf      	ldr	r6, [pc, #828]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f70a:	4317      	orrs	r7, r2
1000f70c:	005a      	lsls	r2, r3, #1
1000f70e:	0d64      	lsrs	r4, r4, #21
1000f710:	0d52      	lsrs	r2, r2, #21
1000f712:	0fdb      	lsrs	r3, r3, #31
1000f714:	00c9      	lsls	r1, r1, #3
1000f716:	42b2      	cmp	r2, r6
1000f718:	d100      	bne.n	1000f71c <__aeabi_dsub+0x38>
1000f71a:	e0e5      	b.n	1000f8e8 <__aeabi_dsub+0x204>
1000f71c:	2601      	movs	r6, #1
1000f71e:	4073      	eors	r3, r6
1000f720:	1aa6      	subs	r6, r4, r2
1000f722:	46b4      	mov	ip, r6
1000f724:	4553      	cmp	r3, sl
1000f726:	d100      	bne.n	1000f72a <__aeabi_dsub+0x46>
1000f728:	e0af      	b.n	1000f88a <__aeabi_dsub+0x1a6>
1000f72a:	2e00      	cmp	r6, #0
1000f72c:	dc00      	bgt.n	1000f730 <__aeabi_dsub+0x4c>
1000f72e:	e10d      	b.n	1000f94c <__aeabi_dsub+0x268>
1000f730:	2a00      	cmp	r2, #0
1000f732:	d13a      	bne.n	1000f7aa <__aeabi_dsub+0xc6>
1000f734:	0003      	movs	r3, r0
1000f736:	430b      	orrs	r3, r1
1000f738:	d000      	beq.n	1000f73c <__aeabi_dsub+0x58>
1000f73a:	e0e4      	b.n	1000f906 <__aeabi_dsub+0x222>
1000f73c:	076b      	lsls	r3, r5, #29
1000f73e:	d009      	beq.n	1000f754 <__aeabi_dsub+0x70>
1000f740:	230f      	movs	r3, #15
1000f742:	402b      	ands	r3, r5
1000f744:	2b04      	cmp	r3, #4
1000f746:	d005      	beq.n	1000f754 <__aeabi_dsub+0x70>
1000f748:	1d2b      	adds	r3, r5, #4
1000f74a:	42ab      	cmp	r3, r5
1000f74c:	41ad      	sbcs	r5, r5
1000f74e:	426d      	negs	r5, r5
1000f750:	197f      	adds	r7, r7, r5
1000f752:	001d      	movs	r5, r3
1000f754:	023b      	lsls	r3, r7, #8
1000f756:	d400      	bmi.n	1000f75a <__aeabi_dsub+0x76>
1000f758:	e088      	b.n	1000f86c <__aeabi_dsub+0x188>
1000f75a:	4bbb      	ldr	r3, [pc, #748]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f75c:	3401      	adds	r4, #1
1000f75e:	429c      	cmp	r4, r3
1000f760:	d100      	bne.n	1000f764 <__aeabi_dsub+0x80>
1000f762:	e110      	b.n	1000f986 <__aeabi_dsub+0x2a2>
1000f764:	003a      	movs	r2, r7
1000f766:	4bb9      	ldr	r3, [pc, #740]	; (1000fa4c <__aeabi_dsub+0x368>)
1000f768:	4651      	mov	r1, sl
1000f76a:	401a      	ands	r2, r3
1000f76c:	2301      	movs	r3, #1
1000f76e:	0750      	lsls	r0, r2, #29
1000f770:	08ed      	lsrs	r5, r5, #3
1000f772:	0252      	lsls	r2, r2, #9
1000f774:	0564      	lsls	r4, r4, #21
1000f776:	4305      	orrs	r5, r0
1000f778:	0b12      	lsrs	r2, r2, #12
1000f77a:	0d64      	lsrs	r4, r4, #21
1000f77c:	400b      	ands	r3, r1
1000f77e:	2100      	movs	r1, #0
1000f780:	0028      	movs	r0, r5
1000f782:	0312      	lsls	r2, r2, #12
1000f784:	0d0d      	lsrs	r5, r1, #20
1000f786:	0b12      	lsrs	r2, r2, #12
1000f788:	0564      	lsls	r4, r4, #21
1000f78a:	052d      	lsls	r5, r5, #20
1000f78c:	4315      	orrs	r5, r2
1000f78e:	0862      	lsrs	r2, r4, #1
1000f790:	4caf      	ldr	r4, [pc, #700]	; (1000fa50 <__aeabi_dsub+0x36c>)
1000f792:	07db      	lsls	r3, r3, #31
1000f794:	402c      	ands	r4, r5
1000f796:	4314      	orrs	r4, r2
1000f798:	0064      	lsls	r4, r4, #1
1000f79a:	0864      	lsrs	r4, r4, #1
1000f79c:	431c      	orrs	r4, r3
1000f79e:	0021      	movs	r1, r4
1000f7a0:	bc1c      	pop	{r2, r3, r4}
1000f7a2:	4690      	mov	r8, r2
1000f7a4:	4699      	mov	r9, r3
1000f7a6:	46a2      	mov	sl, r4
1000f7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7aa:	4ba7      	ldr	r3, [pc, #668]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f7ac:	429c      	cmp	r4, r3
1000f7ae:	d0c5      	beq.n	1000f73c <__aeabi_dsub+0x58>
1000f7b0:	2380      	movs	r3, #128	; 0x80
1000f7b2:	041b      	lsls	r3, r3, #16
1000f7b4:	4318      	orrs	r0, r3
1000f7b6:	4663      	mov	r3, ip
1000f7b8:	2b38      	cmp	r3, #56	; 0x38
1000f7ba:	dd00      	ble.n	1000f7be <__aeabi_dsub+0xda>
1000f7bc:	e0fd      	b.n	1000f9ba <__aeabi_dsub+0x2d6>
1000f7be:	2b1f      	cmp	r3, #31
1000f7c0:	dd00      	ble.n	1000f7c4 <__aeabi_dsub+0xe0>
1000f7c2:	e130      	b.n	1000fa26 <__aeabi_dsub+0x342>
1000f7c4:	4662      	mov	r2, ip
1000f7c6:	2320      	movs	r3, #32
1000f7c8:	1a9b      	subs	r3, r3, r2
1000f7ca:	0002      	movs	r2, r0
1000f7cc:	409a      	lsls	r2, r3
1000f7ce:	4666      	mov	r6, ip
1000f7d0:	4690      	mov	r8, r2
1000f7d2:	000a      	movs	r2, r1
1000f7d4:	4099      	lsls	r1, r3
1000f7d6:	40f2      	lsrs	r2, r6
1000f7d8:	4646      	mov	r6, r8
1000f7da:	1e4b      	subs	r3, r1, #1
1000f7dc:	4199      	sbcs	r1, r3
1000f7de:	4332      	orrs	r2, r6
1000f7e0:	4311      	orrs	r1, r2
1000f7e2:	4663      	mov	r3, ip
1000f7e4:	0002      	movs	r2, r0
1000f7e6:	40da      	lsrs	r2, r3
1000f7e8:	1a69      	subs	r1, r5, r1
1000f7ea:	428d      	cmp	r5, r1
1000f7ec:	419b      	sbcs	r3, r3
1000f7ee:	000d      	movs	r5, r1
1000f7f0:	1aba      	subs	r2, r7, r2
1000f7f2:	425b      	negs	r3, r3
1000f7f4:	1ad7      	subs	r7, r2, r3
1000f7f6:	023b      	lsls	r3, r7, #8
1000f7f8:	d535      	bpl.n	1000f866 <__aeabi_dsub+0x182>
1000f7fa:	027a      	lsls	r2, r7, #9
1000f7fc:	0a53      	lsrs	r3, r2, #9
1000f7fe:	4698      	mov	r8, r3
1000f800:	4643      	mov	r3, r8
1000f802:	2b00      	cmp	r3, #0
1000f804:	d100      	bne.n	1000f808 <__aeabi_dsub+0x124>
1000f806:	e0c4      	b.n	1000f992 <__aeabi_dsub+0x2ae>
1000f808:	4640      	mov	r0, r8
1000f80a:	f000 fc73 	bl	100100f4 <__clzsi2>
1000f80e:	0003      	movs	r3, r0
1000f810:	3b08      	subs	r3, #8
1000f812:	2b1f      	cmp	r3, #31
1000f814:	dd00      	ble.n	1000f818 <__aeabi_dsub+0x134>
1000f816:	e0c5      	b.n	1000f9a4 <__aeabi_dsub+0x2c0>
1000f818:	2220      	movs	r2, #32
1000f81a:	0029      	movs	r1, r5
1000f81c:	1ad2      	subs	r2, r2, r3
1000f81e:	4647      	mov	r7, r8
1000f820:	40d1      	lsrs	r1, r2
1000f822:	409f      	lsls	r7, r3
1000f824:	000a      	movs	r2, r1
1000f826:	409d      	lsls	r5, r3
1000f828:	433a      	orrs	r2, r7
1000f82a:	429c      	cmp	r4, r3
1000f82c:	dd00      	ble.n	1000f830 <__aeabi_dsub+0x14c>
1000f82e:	e0c0      	b.n	1000f9b2 <__aeabi_dsub+0x2ce>
1000f830:	1b1c      	subs	r4, r3, r4
1000f832:	1c63      	adds	r3, r4, #1
1000f834:	2b1f      	cmp	r3, #31
1000f836:	dd00      	ble.n	1000f83a <__aeabi_dsub+0x156>
1000f838:	e0e4      	b.n	1000fa04 <__aeabi_dsub+0x320>
1000f83a:	2120      	movs	r1, #32
1000f83c:	0014      	movs	r4, r2
1000f83e:	0028      	movs	r0, r5
1000f840:	1ac9      	subs	r1, r1, r3
1000f842:	40d8      	lsrs	r0, r3
1000f844:	408c      	lsls	r4, r1
1000f846:	408d      	lsls	r5, r1
1000f848:	4304      	orrs	r4, r0
1000f84a:	40da      	lsrs	r2, r3
1000f84c:	1e68      	subs	r0, r5, #1
1000f84e:	4185      	sbcs	r5, r0
1000f850:	0017      	movs	r7, r2
1000f852:	4325      	orrs	r5, r4
1000f854:	2400      	movs	r4, #0
1000f856:	e771      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f858:	4642      	mov	r2, r8
1000f85a:	4663      	mov	r3, ip
1000f85c:	431a      	orrs	r2, r3
1000f85e:	d100      	bne.n	1000f862 <__aeabi_dsub+0x17e>
1000f860:	e24c      	b.n	1000fcfc <__aeabi_dsub+0x618>
1000f862:	4667      	mov	r7, ip
1000f864:	4645      	mov	r5, r8
1000f866:	076b      	lsls	r3, r5, #29
1000f868:	d000      	beq.n	1000f86c <__aeabi_dsub+0x188>
1000f86a:	e769      	b.n	1000f740 <__aeabi_dsub+0x5c>
1000f86c:	2301      	movs	r3, #1
1000f86e:	4651      	mov	r1, sl
1000f870:	0778      	lsls	r0, r7, #29
1000f872:	08ed      	lsrs	r5, r5, #3
1000f874:	08fa      	lsrs	r2, r7, #3
1000f876:	400b      	ands	r3, r1
1000f878:	4305      	orrs	r5, r0
1000f87a:	4973      	ldr	r1, [pc, #460]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f87c:	428c      	cmp	r4, r1
1000f87e:	d038      	beq.n	1000f8f2 <__aeabi_dsub+0x20e>
1000f880:	0312      	lsls	r2, r2, #12
1000f882:	0564      	lsls	r4, r4, #21
1000f884:	0b12      	lsrs	r2, r2, #12
1000f886:	0d64      	lsrs	r4, r4, #21
1000f888:	e779      	b.n	1000f77e <__aeabi_dsub+0x9a>
1000f88a:	2e00      	cmp	r6, #0
1000f88c:	dc00      	bgt.n	1000f890 <__aeabi_dsub+0x1ac>
1000f88e:	e09a      	b.n	1000f9c6 <__aeabi_dsub+0x2e2>
1000f890:	2a00      	cmp	r2, #0
1000f892:	d047      	beq.n	1000f924 <__aeabi_dsub+0x240>
1000f894:	4a6c      	ldr	r2, [pc, #432]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f896:	4294      	cmp	r4, r2
1000f898:	d100      	bne.n	1000f89c <__aeabi_dsub+0x1b8>
1000f89a:	e74f      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f89c:	2280      	movs	r2, #128	; 0x80
1000f89e:	0412      	lsls	r2, r2, #16
1000f8a0:	4310      	orrs	r0, r2
1000f8a2:	4662      	mov	r2, ip
1000f8a4:	2a38      	cmp	r2, #56	; 0x38
1000f8a6:	dc00      	bgt.n	1000f8aa <__aeabi_dsub+0x1c6>
1000f8a8:	e108      	b.n	1000fabc <__aeabi_dsub+0x3d8>
1000f8aa:	4301      	orrs	r1, r0
1000f8ac:	1e48      	subs	r0, r1, #1
1000f8ae:	4181      	sbcs	r1, r0
1000f8b0:	2200      	movs	r2, #0
1000f8b2:	b2c9      	uxtb	r1, r1
1000f8b4:	1949      	adds	r1, r1, r5
1000f8b6:	19d2      	adds	r2, r2, r7
1000f8b8:	42a9      	cmp	r1, r5
1000f8ba:	41bf      	sbcs	r7, r7
1000f8bc:	000d      	movs	r5, r1
1000f8be:	427f      	negs	r7, r7
1000f8c0:	18bf      	adds	r7, r7, r2
1000f8c2:	023a      	lsls	r2, r7, #8
1000f8c4:	d400      	bmi.n	1000f8c8 <__aeabi_dsub+0x1e4>
1000f8c6:	e142      	b.n	1000fb4e <__aeabi_dsub+0x46a>
1000f8c8:	4a5f      	ldr	r2, [pc, #380]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f8ca:	3401      	adds	r4, #1
1000f8cc:	4294      	cmp	r4, r2
1000f8ce:	d100      	bne.n	1000f8d2 <__aeabi_dsub+0x1ee>
1000f8d0:	e14e      	b.n	1000fb70 <__aeabi_dsub+0x48c>
1000f8d2:	2001      	movs	r0, #1
1000f8d4:	4a5d      	ldr	r2, [pc, #372]	; (1000fa4c <__aeabi_dsub+0x368>)
1000f8d6:	0869      	lsrs	r1, r5, #1
1000f8d8:	403a      	ands	r2, r7
1000f8da:	4028      	ands	r0, r5
1000f8dc:	4308      	orrs	r0, r1
1000f8de:	07d5      	lsls	r5, r2, #31
1000f8e0:	4305      	orrs	r5, r0
1000f8e2:	0857      	lsrs	r7, r2, #1
1000f8e4:	469a      	mov	sl, r3
1000f8e6:	e729      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f8e8:	0006      	movs	r6, r0
1000f8ea:	430e      	orrs	r6, r1
1000f8ec:	d000      	beq.n	1000f8f0 <__aeabi_dsub+0x20c>
1000f8ee:	e717      	b.n	1000f720 <__aeabi_dsub+0x3c>
1000f8f0:	e714      	b.n	1000f71c <__aeabi_dsub+0x38>
1000f8f2:	0029      	movs	r1, r5
1000f8f4:	4311      	orrs	r1, r2
1000f8f6:	d100      	bne.n	1000f8fa <__aeabi_dsub+0x216>
1000f8f8:	e1f9      	b.n	1000fcee <__aeabi_dsub+0x60a>
1000f8fa:	2180      	movs	r1, #128	; 0x80
1000f8fc:	0309      	lsls	r1, r1, #12
1000f8fe:	430a      	orrs	r2, r1
1000f900:	0312      	lsls	r2, r2, #12
1000f902:	0b12      	lsrs	r2, r2, #12
1000f904:	e73b      	b.n	1000f77e <__aeabi_dsub+0x9a>
1000f906:	2301      	movs	r3, #1
1000f908:	425b      	negs	r3, r3
1000f90a:	4698      	mov	r8, r3
1000f90c:	44c4      	add	ip, r8
1000f90e:	4663      	mov	r3, ip
1000f910:	2b00      	cmp	r3, #0
1000f912:	d172      	bne.n	1000f9fa <__aeabi_dsub+0x316>
1000f914:	1a69      	subs	r1, r5, r1
1000f916:	428d      	cmp	r5, r1
1000f918:	419b      	sbcs	r3, r3
1000f91a:	1a3f      	subs	r7, r7, r0
1000f91c:	425b      	negs	r3, r3
1000f91e:	1aff      	subs	r7, r7, r3
1000f920:	000d      	movs	r5, r1
1000f922:	e768      	b.n	1000f7f6 <__aeabi_dsub+0x112>
1000f924:	0002      	movs	r2, r0
1000f926:	430a      	orrs	r2, r1
1000f928:	d100      	bne.n	1000f92c <__aeabi_dsub+0x248>
1000f92a:	e707      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f92c:	2201      	movs	r2, #1
1000f92e:	4252      	negs	r2, r2
1000f930:	4690      	mov	r8, r2
1000f932:	44c4      	add	ip, r8
1000f934:	4662      	mov	r2, ip
1000f936:	2a00      	cmp	r2, #0
1000f938:	d000      	beq.n	1000f93c <__aeabi_dsub+0x258>
1000f93a:	e0e6      	b.n	1000fb0a <__aeabi_dsub+0x426>
1000f93c:	1869      	adds	r1, r5, r1
1000f93e:	42a9      	cmp	r1, r5
1000f940:	41b6      	sbcs	r6, r6
1000f942:	183f      	adds	r7, r7, r0
1000f944:	4276      	negs	r6, r6
1000f946:	19f7      	adds	r7, r6, r7
1000f948:	000d      	movs	r5, r1
1000f94a:	e7ba      	b.n	1000f8c2 <__aeabi_dsub+0x1de>
1000f94c:	2e00      	cmp	r6, #0
1000f94e:	d000      	beq.n	1000f952 <__aeabi_dsub+0x26e>
1000f950:	e080      	b.n	1000fa54 <__aeabi_dsub+0x370>
1000f952:	1c62      	adds	r2, r4, #1
1000f954:	0552      	lsls	r2, r2, #21
1000f956:	0d52      	lsrs	r2, r2, #21
1000f958:	2a01      	cmp	r2, #1
1000f95a:	dc00      	bgt.n	1000f95e <__aeabi_dsub+0x27a>
1000f95c:	e0f9      	b.n	1000fb52 <__aeabi_dsub+0x46e>
1000f95e:	1a6a      	subs	r2, r5, r1
1000f960:	4691      	mov	r9, r2
1000f962:	454d      	cmp	r5, r9
1000f964:	41b6      	sbcs	r6, r6
1000f966:	1a3a      	subs	r2, r7, r0
1000f968:	4276      	negs	r6, r6
1000f96a:	1b92      	subs	r2, r2, r6
1000f96c:	4690      	mov	r8, r2
1000f96e:	0212      	lsls	r2, r2, #8
1000f970:	d400      	bmi.n	1000f974 <__aeabi_dsub+0x290>
1000f972:	e099      	b.n	1000faa8 <__aeabi_dsub+0x3c4>
1000f974:	1b4d      	subs	r5, r1, r5
1000f976:	42a9      	cmp	r1, r5
1000f978:	4189      	sbcs	r1, r1
1000f97a:	1bc7      	subs	r7, r0, r7
1000f97c:	4249      	negs	r1, r1
1000f97e:	1a7a      	subs	r2, r7, r1
1000f980:	4690      	mov	r8, r2
1000f982:	469a      	mov	sl, r3
1000f984:	e73c      	b.n	1000f800 <__aeabi_dsub+0x11c>
1000f986:	4652      	mov	r2, sl
1000f988:	2301      	movs	r3, #1
1000f98a:	2500      	movs	r5, #0
1000f98c:	4013      	ands	r3, r2
1000f98e:	2200      	movs	r2, #0
1000f990:	e6f5      	b.n	1000f77e <__aeabi_dsub+0x9a>
1000f992:	0028      	movs	r0, r5
1000f994:	f000 fbae 	bl	100100f4 <__clzsi2>
1000f998:	3020      	adds	r0, #32
1000f99a:	0003      	movs	r3, r0
1000f99c:	3b08      	subs	r3, #8
1000f99e:	2b1f      	cmp	r3, #31
1000f9a0:	dc00      	bgt.n	1000f9a4 <__aeabi_dsub+0x2c0>
1000f9a2:	e739      	b.n	1000f818 <__aeabi_dsub+0x134>
1000f9a4:	002a      	movs	r2, r5
1000f9a6:	3828      	subs	r0, #40	; 0x28
1000f9a8:	4082      	lsls	r2, r0
1000f9aa:	2500      	movs	r5, #0
1000f9ac:	429c      	cmp	r4, r3
1000f9ae:	dc00      	bgt.n	1000f9b2 <__aeabi_dsub+0x2ce>
1000f9b0:	e73e      	b.n	1000f830 <__aeabi_dsub+0x14c>
1000f9b2:	4f26      	ldr	r7, [pc, #152]	; (1000fa4c <__aeabi_dsub+0x368>)
1000f9b4:	1ae4      	subs	r4, r4, r3
1000f9b6:	4017      	ands	r7, r2
1000f9b8:	e6c0      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f9ba:	4301      	orrs	r1, r0
1000f9bc:	1e48      	subs	r0, r1, #1
1000f9be:	4181      	sbcs	r1, r0
1000f9c0:	2200      	movs	r2, #0
1000f9c2:	b2c9      	uxtb	r1, r1
1000f9c4:	e710      	b.n	1000f7e8 <__aeabi_dsub+0x104>
1000f9c6:	2e00      	cmp	r6, #0
1000f9c8:	d000      	beq.n	1000f9cc <__aeabi_dsub+0x2e8>
1000f9ca:	e0f1      	b.n	1000fbb0 <__aeabi_dsub+0x4cc>
1000f9cc:	1c62      	adds	r2, r4, #1
1000f9ce:	4694      	mov	ip, r2
1000f9d0:	0552      	lsls	r2, r2, #21
1000f9d2:	0d52      	lsrs	r2, r2, #21
1000f9d4:	2a01      	cmp	r2, #1
1000f9d6:	dc00      	bgt.n	1000f9da <__aeabi_dsub+0x2f6>
1000f9d8:	e0a0      	b.n	1000fb1c <__aeabi_dsub+0x438>
1000f9da:	4a1b      	ldr	r2, [pc, #108]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f9dc:	4594      	cmp	ip, r2
1000f9de:	d100      	bne.n	1000f9e2 <__aeabi_dsub+0x2fe>
1000f9e0:	e0c5      	b.n	1000fb6e <__aeabi_dsub+0x48a>
1000f9e2:	1869      	adds	r1, r5, r1
1000f9e4:	42a9      	cmp	r1, r5
1000f9e6:	4192      	sbcs	r2, r2
1000f9e8:	183f      	adds	r7, r7, r0
1000f9ea:	4252      	negs	r2, r2
1000f9ec:	19d2      	adds	r2, r2, r7
1000f9ee:	0849      	lsrs	r1, r1, #1
1000f9f0:	07d5      	lsls	r5, r2, #31
1000f9f2:	430d      	orrs	r5, r1
1000f9f4:	0857      	lsrs	r7, r2, #1
1000f9f6:	4664      	mov	r4, ip
1000f9f8:	e6a0      	b.n	1000f73c <__aeabi_dsub+0x58>
1000f9fa:	4b13      	ldr	r3, [pc, #76]	; (1000fa48 <__aeabi_dsub+0x364>)
1000f9fc:	429c      	cmp	r4, r3
1000f9fe:	d000      	beq.n	1000fa02 <__aeabi_dsub+0x31e>
1000fa00:	e6d9      	b.n	1000f7b6 <__aeabi_dsub+0xd2>
1000fa02:	e69b      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fa04:	0011      	movs	r1, r2
1000fa06:	3c1f      	subs	r4, #31
1000fa08:	40e1      	lsrs	r1, r4
1000fa0a:	000c      	movs	r4, r1
1000fa0c:	2b20      	cmp	r3, #32
1000fa0e:	d100      	bne.n	1000fa12 <__aeabi_dsub+0x32e>
1000fa10:	e080      	b.n	1000fb14 <__aeabi_dsub+0x430>
1000fa12:	2140      	movs	r1, #64	; 0x40
1000fa14:	1acb      	subs	r3, r1, r3
1000fa16:	409a      	lsls	r2, r3
1000fa18:	4315      	orrs	r5, r2
1000fa1a:	1e6a      	subs	r2, r5, #1
1000fa1c:	4195      	sbcs	r5, r2
1000fa1e:	2700      	movs	r7, #0
1000fa20:	4325      	orrs	r5, r4
1000fa22:	2400      	movs	r4, #0
1000fa24:	e71f      	b.n	1000f866 <__aeabi_dsub+0x182>
1000fa26:	4663      	mov	r3, ip
1000fa28:	0002      	movs	r2, r0
1000fa2a:	3b20      	subs	r3, #32
1000fa2c:	40da      	lsrs	r2, r3
1000fa2e:	4663      	mov	r3, ip
1000fa30:	2b20      	cmp	r3, #32
1000fa32:	d071      	beq.n	1000fb18 <__aeabi_dsub+0x434>
1000fa34:	2340      	movs	r3, #64	; 0x40
1000fa36:	4666      	mov	r6, ip
1000fa38:	1b9b      	subs	r3, r3, r6
1000fa3a:	4098      	lsls	r0, r3
1000fa3c:	4301      	orrs	r1, r0
1000fa3e:	1e48      	subs	r0, r1, #1
1000fa40:	4181      	sbcs	r1, r0
1000fa42:	4311      	orrs	r1, r2
1000fa44:	2200      	movs	r2, #0
1000fa46:	e6cf      	b.n	1000f7e8 <__aeabi_dsub+0x104>
1000fa48:	000007ff 	.word	0x000007ff
1000fa4c:	ff7fffff 	.word	0xff7fffff
1000fa50:	800fffff 	.word	0x800fffff
1000fa54:	2c00      	cmp	r4, #0
1000fa56:	d048      	beq.n	1000faea <__aeabi_dsub+0x406>
1000fa58:	4cca      	ldr	r4, [pc, #808]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fa5a:	42a2      	cmp	r2, r4
1000fa5c:	d100      	bne.n	1000fa60 <__aeabi_dsub+0x37c>
1000fa5e:	e0a2      	b.n	1000fba6 <__aeabi_dsub+0x4c2>
1000fa60:	4274      	negs	r4, r6
1000fa62:	46a1      	mov	r9, r4
1000fa64:	2480      	movs	r4, #128	; 0x80
1000fa66:	0424      	lsls	r4, r4, #16
1000fa68:	4327      	orrs	r7, r4
1000fa6a:	464c      	mov	r4, r9
1000fa6c:	2c38      	cmp	r4, #56	; 0x38
1000fa6e:	dd00      	ble.n	1000fa72 <__aeabi_dsub+0x38e>
1000fa70:	e0db      	b.n	1000fc2a <__aeabi_dsub+0x546>
1000fa72:	2c1f      	cmp	r4, #31
1000fa74:	dd00      	ble.n	1000fa78 <__aeabi_dsub+0x394>
1000fa76:	e144      	b.n	1000fd02 <__aeabi_dsub+0x61e>
1000fa78:	464e      	mov	r6, r9
1000fa7a:	2420      	movs	r4, #32
1000fa7c:	1ba4      	subs	r4, r4, r6
1000fa7e:	003e      	movs	r6, r7
1000fa80:	40a6      	lsls	r6, r4
1000fa82:	46a2      	mov	sl, r4
1000fa84:	46b0      	mov	r8, r6
1000fa86:	464c      	mov	r4, r9
1000fa88:	002e      	movs	r6, r5
1000fa8a:	40e6      	lsrs	r6, r4
1000fa8c:	46b4      	mov	ip, r6
1000fa8e:	4646      	mov	r6, r8
1000fa90:	4664      	mov	r4, ip
1000fa92:	4326      	orrs	r6, r4
1000fa94:	4654      	mov	r4, sl
1000fa96:	40a5      	lsls	r5, r4
1000fa98:	1e6c      	subs	r4, r5, #1
1000fa9a:	41a5      	sbcs	r5, r4
1000fa9c:	0034      	movs	r4, r6
1000fa9e:	432c      	orrs	r4, r5
1000faa0:	464d      	mov	r5, r9
1000faa2:	40ef      	lsrs	r7, r5
1000faa4:	1b0d      	subs	r5, r1, r4
1000faa6:	e028      	b.n	1000fafa <__aeabi_dsub+0x416>
1000faa8:	464a      	mov	r2, r9
1000faaa:	4643      	mov	r3, r8
1000faac:	464d      	mov	r5, r9
1000faae:	431a      	orrs	r2, r3
1000fab0:	d000      	beq.n	1000fab4 <__aeabi_dsub+0x3d0>
1000fab2:	e6a5      	b.n	1000f800 <__aeabi_dsub+0x11c>
1000fab4:	2300      	movs	r3, #0
1000fab6:	2400      	movs	r4, #0
1000fab8:	2500      	movs	r5, #0
1000faba:	e6de      	b.n	1000f87a <__aeabi_dsub+0x196>
1000fabc:	2a1f      	cmp	r2, #31
1000fabe:	dc5a      	bgt.n	1000fb76 <__aeabi_dsub+0x492>
1000fac0:	4666      	mov	r6, ip
1000fac2:	2220      	movs	r2, #32
1000fac4:	1b92      	subs	r2, r2, r6
1000fac6:	0006      	movs	r6, r0
1000fac8:	4096      	lsls	r6, r2
1000faca:	4691      	mov	r9, r2
1000facc:	46b0      	mov	r8, r6
1000face:	4662      	mov	r2, ip
1000fad0:	000e      	movs	r6, r1
1000fad2:	40d6      	lsrs	r6, r2
1000fad4:	4642      	mov	r2, r8
1000fad6:	4316      	orrs	r6, r2
1000fad8:	464a      	mov	r2, r9
1000fada:	4091      	lsls	r1, r2
1000fadc:	1e4a      	subs	r2, r1, #1
1000fade:	4191      	sbcs	r1, r2
1000fae0:	0002      	movs	r2, r0
1000fae2:	4660      	mov	r0, ip
1000fae4:	4331      	orrs	r1, r6
1000fae6:	40c2      	lsrs	r2, r0
1000fae8:	e6e4      	b.n	1000f8b4 <__aeabi_dsub+0x1d0>
1000faea:	003c      	movs	r4, r7
1000faec:	432c      	orrs	r4, r5
1000faee:	d05a      	beq.n	1000fba6 <__aeabi_dsub+0x4c2>
1000faf0:	43f4      	mvns	r4, r6
1000faf2:	46a1      	mov	r9, r4
1000faf4:	2c00      	cmp	r4, #0
1000faf6:	d152      	bne.n	1000fb9e <__aeabi_dsub+0x4ba>
1000faf8:	1b4d      	subs	r5, r1, r5
1000fafa:	42a9      	cmp	r1, r5
1000fafc:	4189      	sbcs	r1, r1
1000fafe:	1bc7      	subs	r7, r0, r7
1000fb00:	4249      	negs	r1, r1
1000fb02:	1a7f      	subs	r7, r7, r1
1000fb04:	0014      	movs	r4, r2
1000fb06:	469a      	mov	sl, r3
1000fb08:	e675      	b.n	1000f7f6 <__aeabi_dsub+0x112>
1000fb0a:	4a9e      	ldr	r2, [pc, #632]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fb0c:	4294      	cmp	r4, r2
1000fb0e:	d000      	beq.n	1000fb12 <__aeabi_dsub+0x42e>
1000fb10:	e6c7      	b.n	1000f8a2 <__aeabi_dsub+0x1be>
1000fb12:	e613      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fb14:	2200      	movs	r2, #0
1000fb16:	e77f      	b.n	1000fa18 <__aeabi_dsub+0x334>
1000fb18:	2000      	movs	r0, #0
1000fb1a:	e78f      	b.n	1000fa3c <__aeabi_dsub+0x358>
1000fb1c:	2c00      	cmp	r4, #0
1000fb1e:	d000      	beq.n	1000fb22 <__aeabi_dsub+0x43e>
1000fb20:	e0c8      	b.n	1000fcb4 <__aeabi_dsub+0x5d0>
1000fb22:	003b      	movs	r3, r7
1000fb24:	432b      	orrs	r3, r5
1000fb26:	d100      	bne.n	1000fb2a <__aeabi_dsub+0x446>
1000fb28:	e10f      	b.n	1000fd4a <__aeabi_dsub+0x666>
1000fb2a:	0003      	movs	r3, r0
1000fb2c:	430b      	orrs	r3, r1
1000fb2e:	d100      	bne.n	1000fb32 <__aeabi_dsub+0x44e>
1000fb30:	e604      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fb32:	1869      	adds	r1, r5, r1
1000fb34:	42a9      	cmp	r1, r5
1000fb36:	419b      	sbcs	r3, r3
1000fb38:	183f      	adds	r7, r7, r0
1000fb3a:	425b      	negs	r3, r3
1000fb3c:	19df      	adds	r7, r3, r7
1000fb3e:	023b      	lsls	r3, r7, #8
1000fb40:	d400      	bmi.n	1000fb44 <__aeabi_dsub+0x460>
1000fb42:	e11a      	b.n	1000fd7a <__aeabi_dsub+0x696>
1000fb44:	4b90      	ldr	r3, [pc, #576]	; (1000fd88 <__aeabi_dsub+0x6a4>)
1000fb46:	000d      	movs	r5, r1
1000fb48:	401f      	ands	r7, r3
1000fb4a:	4664      	mov	r4, ip
1000fb4c:	e5f6      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fb4e:	469a      	mov	sl, r3
1000fb50:	e689      	b.n	1000f866 <__aeabi_dsub+0x182>
1000fb52:	003a      	movs	r2, r7
1000fb54:	432a      	orrs	r2, r5
1000fb56:	2c00      	cmp	r4, #0
1000fb58:	d15c      	bne.n	1000fc14 <__aeabi_dsub+0x530>
1000fb5a:	2a00      	cmp	r2, #0
1000fb5c:	d175      	bne.n	1000fc4a <__aeabi_dsub+0x566>
1000fb5e:	0002      	movs	r2, r0
1000fb60:	430a      	orrs	r2, r1
1000fb62:	d100      	bne.n	1000fb66 <__aeabi_dsub+0x482>
1000fb64:	e0ca      	b.n	1000fcfc <__aeabi_dsub+0x618>
1000fb66:	0007      	movs	r7, r0
1000fb68:	000d      	movs	r5, r1
1000fb6a:	469a      	mov	sl, r3
1000fb6c:	e5e6      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fb6e:	4664      	mov	r4, ip
1000fb70:	2200      	movs	r2, #0
1000fb72:	2500      	movs	r5, #0
1000fb74:	e681      	b.n	1000f87a <__aeabi_dsub+0x196>
1000fb76:	4662      	mov	r2, ip
1000fb78:	0006      	movs	r6, r0
1000fb7a:	3a20      	subs	r2, #32
1000fb7c:	40d6      	lsrs	r6, r2
1000fb7e:	4662      	mov	r2, ip
1000fb80:	46b0      	mov	r8, r6
1000fb82:	2a20      	cmp	r2, #32
1000fb84:	d100      	bne.n	1000fb88 <__aeabi_dsub+0x4a4>
1000fb86:	e0b7      	b.n	1000fcf8 <__aeabi_dsub+0x614>
1000fb88:	2240      	movs	r2, #64	; 0x40
1000fb8a:	4666      	mov	r6, ip
1000fb8c:	1b92      	subs	r2, r2, r6
1000fb8e:	4090      	lsls	r0, r2
1000fb90:	4301      	orrs	r1, r0
1000fb92:	4642      	mov	r2, r8
1000fb94:	1e48      	subs	r0, r1, #1
1000fb96:	4181      	sbcs	r1, r0
1000fb98:	4311      	orrs	r1, r2
1000fb9a:	2200      	movs	r2, #0
1000fb9c:	e68a      	b.n	1000f8b4 <__aeabi_dsub+0x1d0>
1000fb9e:	4c79      	ldr	r4, [pc, #484]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fba0:	42a2      	cmp	r2, r4
1000fba2:	d000      	beq.n	1000fba6 <__aeabi_dsub+0x4c2>
1000fba4:	e761      	b.n	1000fa6a <__aeabi_dsub+0x386>
1000fba6:	0007      	movs	r7, r0
1000fba8:	000d      	movs	r5, r1
1000fbaa:	0014      	movs	r4, r2
1000fbac:	469a      	mov	sl, r3
1000fbae:	e5c5      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fbb0:	2c00      	cmp	r4, #0
1000fbb2:	d141      	bne.n	1000fc38 <__aeabi_dsub+0x554>
1000fbb4:	003c      	movs	r4, r7
1000fbb6:	432c      	orrs	r4, r5
1000fbb8:	d078      	beq.n	1000fcac <__aeabi_dsub+0x5c8>
1000fbba:	43f4      	mvns	r4, r6
1000fbbc:	46a1      	mov	r9, r4
1000fbbe:	2c00      	cmp	r4, #0
1000fbc0:	d020      	beq.n	1000fc04 <__aeabi_dsub+0x520>
1000fbc2:	4c70      	ldr	r4, [pc, #448]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fbc4:	42a2      	cmp	r2, r4
1000fbc6:	d071      	beq.n	1000fcac <__aeabi_dsub+0x5c8>
1000fbc8:	464c      	mov	r4, r9
1000fbca:	2c38      	cmp	r4, #56	; 0x38
1000fbcc:	dd00      	ble.n	1000fbd0 <__aeabi_dsub+0x4ec>
1000fbce:	e0b2      	b.n	1000fd36 <__aeabi_dsub+0x652>
1000fbd0:	2c1f      	cmp	r4, #31
1000fbd2:	dd00      	ble.n	1000fbd6 <__aeabi_dsub+0x4f2>
1000fbd4:	e0bc      	b.n	1000fd50 <__aeabi_dsub+0x66c>
1000fbd6:	2620      	movs	r6, #32
1000fbd8:	1b34      	subs	r4, r6, r4
1000fbda:	46a2      	mov	sl, r4
1000fbdc:	003c      	movs	r4, r7
1000fbde:	4656      	mov	r6, sl
1000fbe0:	40b4      	lsls	r4, r6
1000fbe2:	464e      	mov	r6, r9
1000fbe4:	46a0      	mov	r8, r4
1000fbe6:	002c      	movs	r4, r5
1000fbe8:	40f4      	lsrs	r4, r6
1000fbea:	46a4      	mov	ip, r4
1000fbec:	4644      	mov	r4, r8
1000fbee:	4666      	mov	r6, ip
1000fbf0:	4334      	orrs	r4, r6
1000fbf2:	46a4      	mov	ip, r4
1000fbf4:	4654      	mov	r4, sl
1000fbf6:	40a5      	lsls	r5, r4
1000fbf8:	4664      	mov	r4, ip
1000fbfa:	1e6e      	subs	r6, r5, #1
1000fbfc:	41b5      	sbcs	r5, r6
1000fbfe:	4325      	orrs	r5, r4
1000fc00:	464c      	mov	r4, r9
1000fc02:	40e7      	lsrs	r7, r4
1000fc04:	186d      	adds	r5, r5, r1
1000fc06:	428d      	cmp	r5, r1
1000fc08:	4189      	sbcs	r1, r1
1000fc0a:	183f      	adds	r7, r7, r0
1000fc0c:	4249      	negs	r1, r1
1000fc0e:	19cf      	adds	r7, r1, r7
1000fc10:	0014      	movs	r4, r2
1000fc12:	e656      	b.n	1000f8c2 <__aeabi_dsub+0x1de>
1000fc14:	2a00      	cmp	r2, #0
1000fc16:	d12f      	bne.n	1000fc78 <__aeabi_dsub+0x594>
1000fc18:	0002      	movs	r2, r0
1000fc1a:	430a      	orrs	r2, r1
1000fc1c:	d100      	bne.n	1000fc20 <__aeabi_dsub+0x53c>
1000fc1e:	e084      	b.n	1000fd2a <__aeabi_dsub+0x646>
1000fc20:	0007      	movs	r7, r0
1000fc22:	000d      	movs	r5, r1
1000fc24:	469a      	mov	sl, r3
1000fc26:	4c57      	ldr	r4, [pc, #348]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fc28:	e588      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fc2a:	433d      	orrs	r5, r7
1000fc2c:	1e6f      	subs	r7, r5, #1
1000fc2e:	41bd      	sbcs	r5, r7
1000fc30:	b2ec      	uxtb	r4, r5
1000fc32:	2700      	movs	r7, #0
1000fc34:	1b0d      	subs	r5, r1, r4
1000fc36:	e760      	b.n	1000fafa <__aeabi_dsub+0x416>
1000fc38:	4c52      	ldr	r4, [pc, #328]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fc3a:	42a2      	cmp	r2, r4
1000fc3c:	d036      	beq.n	1000fcac <__aeabi_dsub+0x5c8>
1000fc3e:	4274      	negs	r4, r6
1000fc40:	2680      	movs	r6, #128	; 0x80
1000fc42:	0436      	lsls	r6, r6, #16
1000fc44:	46a1      	mov	r9, r4
1000fc46:	4337      	orrs	r7, r6
1000fc48:	e7be      	b.n	1000fbc8 <__aeabi_dsub+0x4e4>
1000fc4a:	0002      	movs	r2, r0
1000fc4c:	430a      	orrs	r2, r1
1000fc4e:	d100      	bne.n	1000fc52 <__aeabi_dsub+0x56e>
1000fc50:	e574      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fc52:	1a6a      	subs	r2, r5, r1
1000fc54:	4690      	mov	r8, r2
1000fc56:	4545      	cmp	r5, r8
1000fc58:	41b6      	sbcs	r6, r6
1000fc5a:	1a3a      	subs	r2, r7, r0
1000fc5c:	4276      	negs	r6, r6
1000fc5e:	1b92      	subs	r2, r2, r6
1000fc60:	4694      	mov	ip, r2
1000fc62:	0212      	lsls	r2, r2, #8
1000fc64:	d400      	bmi.n	1000fc68 <__aeabi_dsub+0x584>
1000fc66:	e5f7      	b.n	1000f858 <__aeabi_dsub+0x174>
1000fc68:	1b4d      	subs	r5, r1, r5
1000fc6a:	42a9      	cmp	r1, r5
1000fc6c:	4189      	sbcs	r1, r1
1000fc6e:	1bc7      	subs	r7, r0, r7
1000fc70:	4249      	negs	r1, r1
1000fc72:	1a7f      	subs	r7, r7, r1
1000fc74:	469a      	mov	sl, r3
1000fc76:	e561      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fc78:	0002      	movs	r2, r0
1000fc7a:	430a      	orrs	r2, r1
1000fc7c:	d03a      	beq.n	1000fcf4 <__aeabi_dsub+0x610>
1000fc7e:	08ed      	lsrs	r5, r5, #3
1000fc80:	077c      	lsls	r4, r7, #29
1000fc82:	432c      	orrs	r4, r5
1000fc84:	2580      	movs	r5, #128	; 0x80
1000fc86:	08fa      	lsrs	r2, r7, #3
1000fc88:	032d      	lsls	r5, r5, #12
1000fc8a:	422a      	tst	r2, r5
1000fc8c:	d008      	beq.n	1000fca0 <__aeabi_dsub+0x5bc>
1000fc8e:	08c7      	lsrs	r7, r0, #3
1000fc90:	422f      	tst	r7, r5
1000fc92:	d105      	bne.n	1000fca0 <__aeabi_dsub+0x5bc>
1000fc94:	0745      	lsls	r5, r0, #29
1000fc96:	002c      	movs	r4, r5
1000fc98:	003a      	movs	r2, r7
1000fc9a:	469a      	mov	sl, r3
1000fc9c:	08c9      	lsrs	r1, r1, #3
1000fc9e:	430c      	orrs	r4, r1
1000fca0:	0f67      	lsrs	r7, r4, #29
1000fca2:	00d2      	lsls	r2, r2, #3
1000fca4:	00e5      	lsls	r5, r4, #3
1000fca6:	4317      	orrs	r7, r2
1000fca8:	4c36      	ldr	r4, [pc, #216]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fcaa:	e547      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fcac:	0007      	movs	r7, r0
1000fcae:	000d      	movs	r5, r1
1000fcb0:	0014      	movs	r4, r2
1000fcb2:	e543      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fcb4:	003a      	movs	r2, r7
1000fcb6:	432a      	orrs	r2, r5
1000fcb8:	d043      	beq.n	1000fd42 <__aeabi_dsub+0x65e>
1000fcba:	0002      	movs	r2, r0
1000fcbc:	430a      	orrs	r2, r1
1000fcbe:	d019      	beq.n	1000fcf4 <__aeabi_dsub+0x610>
1000fcc0:	08ed      	lsrs	r5, r5, #3
1000fcc2:	077c      	lsls	r4, r7, #29
1000fcc4:	432c      	orrs	r4, r5
1000fcc6:	2580      	movs	r5, #128	; 0x80
1000fcc8:	08fa      	lsrs	r2, r7, #3
1000fcca:	032d      	lsls	r5, r5, #12
1000fccc:	422a      	tst	r2, r5
1000fcce:	d007      	beq.n	1000fce0 <__aeabi_dsub+0x5fc>
1000fcd0:	08c6      	lsrs	r6, r0, #3
1000fcd2:	422e      	tst	r6, r5
1000fcd4:	d104      	bne.n	1000fce0 <__aeabi_dsub+0x5fc>
1000fcd6:	0747      	lsls	r7, r0, #29
1000fcd8:	003c      	movs	r4, r7
1000fcda:	0032      	movs	r2, r6
1000fcdc:	08c9      	lsrs	r1, r1, #3
1000fcde:	430c      	orrs	r4, r1
1000fce0:	00d7      	lsls	r7, r2, #3
1000fce2:	0f62      	lsrs	r2, r4, #29
1000fce4:	00e5      	lsls	r5, r4, #3
1000fce6:	4317      	orrs	r7, r2
1000fce8:	469a      	mov	sl, r3
1000fcea:	4c26      	ldr	r4, [pc, #152]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fcec:	e526      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fcee:	2200      	movs	r2, #0
1000fcf0:	2500      	movs	r5, #0
1000fcf2:	e544      	b.n	1000f77e <__aeabi_dsub+0x9a>
1000fcf4:	4c23      	ldr	r4, [pc, #140]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fcf6:	e521      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fcf8:	2000      	movs	r0, #0
1000fcfa:	e749      	b.n	1000fb90 <__aeabi_dsub+0x4ac>
1000fcfc:	2300      	movs	r3, #0
1000fcfe:	2500      	movs	r5, #0
1000fd00:	e5bb      	b.n	1000f87a <__aeabi_dsub+0x196>
1000fd02:	464c      	mov	r4, r9
1000fd04:	003e      	movs	r6, r7
1000fd06:	3c20      	subs	r4, #32
1000fd08:	40e6      	lsrs	r6, r4
1000fd0a:	464c      	mov	r4, r9
1000fd0c:	46b4      	mov	ip, r6
1000fd0e:	2c20      	cmp	r4, #32
1000fd10:	d031      	beq.n	1000fd76 <__aeabi_dsub+0x692>
1000fd12:	2440      	movs	r4, #64	; 0x40
1000fd14:	464e      	mov	r6, r9
1000fd16:	1ba6      	subs	r6, r4, r6
1000fd18:	40b7      	lsls	r7, r6
1000fd1a:	433d      	orrs	r5, r7
1000fd1c:	1e6c      	subs	r4, r5, #1
1000fd1e:	41a5      	sbcs	r5, r4
1000fd20:	4664      	mov	r4, ip
1000fd22:	432c      	orrs	r4, r5
1000fd24:	2700      	movs	r7, #0
1000fd26:	1b0d      	subs	r5, r1, r4
1000fd28:	e6e7      	b.n	1000fafa <__aeabi_dsub+0x416>
1000fd2a:	2280      	movs	r2, #128	; 0x80
1000fd2c:	2300      	movs	r3, #0
1000fd2e:	0312      	lsls	r2, r2, #12
1000fd30:	4c14      	ldr	r4, [pc, #80]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fd32:	2500      	movs	r5, #0
1000fd34:	e5a1      	b.n	1000f87a <__aeabi_dsub+0x196>
1000fd36:	433d      	orrs	r5, r7
1000fd38:	1e6f      	subs	r7, r5, #1
1000fd3a:	41bd      	sbcs	r5, r7
1000fd3c:	2700      	movs	r7, #0
1000fd3e:	b2ed      	uxtb	r5, r5
1000fd40:	e760      	b.n	1000fc04 <__aeabi_dsub+0x520>
1000fd42:	0007      	movs	r7, r0
1000fd44:	000d      	movs	r5, r1
1000fd46:	4c0f      	ldr	r4, [pc, #60]	; (1000fd84 <__aeabi_dsub+0x6a0>)
1000fd48:	e4f8      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fd4a:	0007      	movs	r7, r0
1000fd4c:	000d      	movs	r5, r1
1000fd4e:	e4f5      	b.n	1000f73c <__aeabi_dsub+0x58>
1000fd50:	464e      	mov	r6, r9
1000fd52:	003c      	movs	r4, r7
1000fd54:	3e20      	subs	r6, #32
1000fd56:	40f4      	lsrs	r4, r6
1000fd58:	46a0      	mov	r8, r4
1000fd5a:	464c      	mov	r4, r9
1000fd5c:	2c20      	cmp	r4, #32
1000fd5e:	d00e      	beq.n	1000fd7e <__aeabi_dsub+0x69a>
1000fd60:	2440      	movs	r4, #64	; 0x40
1000fd62:	464e      	mov	r6, r9
1000fd64:	1ba4      	subs	r4, r4, r6
1000fd66:	40a7      	lsls	r7, r4
1000fd68:	433d      	orrs	r5, r7
1000fd6a:	1e6f      	subs	r7, r5, #1
1000fd6c:	41bd      	sbcs	r5, r7
1000fd6e:	4644      	mov	r4, r8
1000fd70:	2700      	movs	r7, #0
1000fd72:	4325      	orrs	r5, r4
1000fd74:	e746      	b.n	1000fc04 <__aeabi_dsub+0x520>
1000fd76:	2700      	movs	r7, #0
1000fd78:	e7cf      	b.n	1000fd1a <__aeabi_dsub+0x636>
1000fd7a:	000d      	movs	r5, r1
1000fd7c:	e573      	b.n	1000f866 <__aeabi_dsub+0x182>
1000fd7e:	2700      	movs	r7, #0
1000fd80:	e7f2      	b.n	1000fd68 <__aeabi_dsub+0x684>
1000fd82:	46c0      	nop			; (mov r8, r8)
1000fd84:	000007ff 	.word	0x000007ff
1000fd88:	ff7fffff 	.word	0xff7fffff

1000fd8c <__aeabi_d2iz>:
1000fd8c:	030b      	lsls	r3, r1, #12
1000fd8e:	b530      	push	{r4, r5, lr}
1000fd90:	4d13      	ldr	r5, [pc, #76]	; (1000fde0 <__aeabi_d2iz+0x54>)
1000fd92:	0b1a      	lsrs	r2, r3, #12
1000fd94:	004b      	lsls	r3, r1, #1
1000fd96:	0d5b      	lsrs	r3, r3, #21
1000fd98:	0fc9      	lsrs	r1, r1, #31
1000fd9a:	2400      	movs	r4, #0
1000fd9c:	42ab      	cmp	r3, r5
1000fd9e:	dd11      	ble.n	1000fdc4 <__aeabi_d2iz+0x38>
1000fda0:	4c10      	ldr	r4, [pc, #64]	; (1000fde4 <__aeabi_d2iz+0x58>)
1000fda2:	42a3      	cmp	r3, r4
1000fda4:	dc10      	bgt.n	1000fdc8 <__aeabi_d2iz+0x3c>
1000fda6:	2480      	movs	r4, #128	; 0x80
1000fda8:	0364      	lsls	r4, r4, #13
1000fdaa:	4322      	orrs	r2, r4
1000fdac:	4c0e      	ldr	r4, [pc, #56]	; (1000fde8 <__aeabi_d2iz+0x5c>)
1000fdae:	1ae4      	subs	r4, r4, r3
1000fdb0:	2c1f      	cmp	r4, #31
1000fdb2:	dd0c      	ble.n	1000fdce <__aeabi_d2iz+0x42>
1000fdb4:	480d      	ldr	r0, [pc, #52]	; (1000fdec <__aeabi_d2iz+0x60>)
1000fdb6:	1ac3      	subs	r3, r0, r3
1000fdb8:	40da      	lsrs	r2, r3
1000fdba:	0013      	movs	r3, r2
1000fdbc:	425c      	negs	r4, r3
1000fdbe:	2900      	cmp	r1, #0
1000fdc0:	d100      	bne.n	1000fdc4 <__aeabi_d2iz+0x38>
1000fdc2:	001c      	movs	r4, r3
1000fdc4:	0020      	movs	r0, r4
1000fdc6:	bd30      	pop	{r4, r5, pc}
1000fdc8:	4b09      	ldr	r3, [pc, #36]	; (1000fdf0 <__aeabi_d2iz+0x64>)
1000fdca:	18cc      	adds	r4, r1, r3
1000fdcc:	e7fa      	b.n	1000fdc4 <__aeabi_d2iz+0x38>
1000fdce:	40e0      	lsrs	r0, r4
1000fdd0:	4c08      	ldr	r4, [pc, #32]	; (1000fdf4 <__aeabi_d2iz+0x68>)
1000fdd2:	46a4      	mov	ip, r4
1000fdd4:	4463      	add	r3, ip
1000fdd6:	409a      	lsls	r2, r3
1000fdd8:	0013      	movs	r3, r2
1000fdda:	4303      	orrs	r3, r0
1000fddc:	e7ee      	b.n	1000fdbc <__aeabi_d2iz+0x30>
1000fdde:	46c0      	nop			; (mov r8, r8)
1000fde0:	000003fe 	.word	0x000003fe
1000fde4:	0000041d 	.word	0x0000041d
1000fde8:	00000433 	.word	0x00000433
1000fdec:	00000413 	.word	0x00000413
1000fdf0:	7fffffff 	.word	0x7fffffff
1000fdf4:	fffffbed 	.word	0xfffffbed

1000fdf8 <__aeabi_i2d>:
1000fdf8:	b570      	push	{r4, r5, r6, lr}
1000fdfa:	2800      	cmp	r0, #0
1000fdfc:	d030      	beq.n	1000fe60 <__aeabi_i2d+0x68>
1000fdfe:	17c3      	asrs	r3, r0, #31
1000fe00:	18c4      	adds	r4, r0, r3
1000fe02:	405c      	eors	r4, r3
1000fe04:	0fc5      	lsrs	r5, r0, #31
1000fe06:	0020      	movs	r0, r4
1000fe08:	f000 f974 	bl	100100f4 <__clzsi2>
1000fe0c:	4b17      	ldr	r3, [pc, #92]	; (1000fe6c <__aeabi_i2d+0x74>)
1000fe0e:	4a18      	ldr	r2, [pc, #96]	; (1000fe70 <__aeabi_i2d+0x78>)
1000fe10:	1a1b      	subs	r3, r3, r0
1000fe12:	1ad2      	subs	r2, r2, r3
1000fe14:	2a1f      	cmp	r2, #31
1000fe16:	dd18      	ble.n	1000fe4a <__aeabi_i2d+0x52>
1000fe18:	4a16      	ldr	r2, [pc, #88]	; (1000fe74 <__aeabi_i2d+0x7c>)
1000fe1a:	1ad2      	subs	r2, r2, r3
1000fe1c:	4094      	lsls	r4, r2
1000fe1e:	2200      	movs	r2, #0
1000fe20:	0324      	lsls	r4, r4, #12
1000fe22:	055b      	lsls	r3, r3, #21
1000fe24:	0b24      	lsrs	r4, r4, #12
1000fe26:	0d5b      	lsrs	r3, r3, #21
1000fe28:	2100      	movs	r1, #0
1000fe2a:	0010      	movs	r0, r2
1000fe2c:	0324      	lsls	r4, r4, #12
1000fe2e:	0d0a      	lsrs	r2, r1, #20
1000fe30:	0512      	lsls	r2, r2, #20
1000fe32:	0b24      	lsrs	r4, r4, #12
1000fe34:	4314      	orrs	r4, r2
1000fe36:	4a10      	ldr	r2, [pc, #64]	; (1000fe78 <__aeabi_i2d+0x80>)
1000fe38:	051b      	lsls	r3, r3, #20
1000fe3a:	4014      	ands	r4, r2
1000fe3c:	431c      	orrs	r4, r3
1000fe3e:	0064      	lsls	r4, r4, #1
1000fe40:	07ed      	lsls	r5, r5, #31
1000fe42:	0864      	lsrs	r4, r4, #1
1000fe44:	432c      	orrs	r4, r5
1000fe46:	0021      	movs	r1, r4
1000fe48:	bd70      	pop	{r4, r5, r6, pc}
1000fe4a:	0021      	movs	r1, r4
1000fe4c:	4091      	lsls	r1, r2
1000fe4e:	000a      	movs	r2, r1
1000fe50:	210b      	movs	r1, #11
1000fe52:	1a08      	subs	r0, r1, r0
1000fe54:	40c4      	lsrs	r4, r0
1000fe56:	055b      	lsls	r3, r3, #21
1000fe58:	0324      	lsls	r4, r4, #12
1000fe5a:	0b24      	lsrs	r4, r4, #12
1000fe5c:	0d5b      	lsrs	r3, r3, #21
1000fe5e:	e7e3      	b.n	1000fe28 <__aeabi_i2d+0x30>
1000fe60:	2500      	movs	r5, #0
1000fe62:	2300      	movs	r3, #0
1000fe64:	2400      	movs	r4, #0
1000fe66:	2200      	movs	r2, #0
1000fe68:	e7de      	b.n	1000fe28 <__aeabi_i2d+0x30>
1000fe6a:	46c0      	nop			; (mov r8, r8)
1000fe6c:	0000041e 	.word	0x0000041e
1000fe70:	00000433 	.word	0x00000433
1000fe74:	00000413 	.word	0x00000413
1000fe78:	800fffff 	.word	0x800fffff

1000fe7c <__aeabi_ui2d>:
1000fe7c:	b570      	push	{r4, r5, r6, lr}
1000fe7e:	1e05      	subs	r5, r0, #0
1000fe80:	d028      	beq.n	1000fed4 <__aeabi_ui2d+0x58>
1000fe82:	f000 f937 	bl	100100f4 <__clzsi2>
1000fe86:	4b15      	ldr	r3, [pc, #84]	; (1000fedc <__aeabi_ui2d+0x60>)
1000fe88:	4a15      	ldr	r2, [pc, #84]	; (1000fee0 <__aeabi_ui2d+0x64>)
1000fe8a:	1a1b      	subs	r3, r3, r0
1000fe8c:	1ad2      	subs	r2, r2, r3
1000fe8e:	2a1f      	cmp	r2, #31
1000fe90:	dd16      	ble.n	1000fec0 <__aeabi_ui2d+0x44>
1000fe92:	002c      	movs	r4, r5
1000fe94:	4a13      	ldr	r2, [pc, #76]	; (1000fee4 <__aeabi_ui2d+0x68>)
1000fe96:	2500      	movs	r5, #0
1000fe98:	1ad2      	subs	r2, r2, r3
1000fe9a:	4094      	lsls	r4, r2
1000fe9c:	055a      	lsls	r2, r3, #21
1000fe9e:	0324      	lsls	r4, r4, #12
1000fea0:	0b24      	lsrs	r4, r4, #12
1000fea2:	0d52      	lsrs	r2, r2, #21
1000fea4:	2100      	movs	r1, #0
1000fea6:	0324      	lsls	r4, r4, #12
1000fea8:	0d0b      	lsrs	r3, r1, #20
1000feaa:	0b24      	lsrs	r4, r4, #12
1000feac:	051b      	lsls	r3, r3, #20
1000feae:	4323      	orrs	r3, r4
1000feb0:	4c0d      	ldr	r4, [pc, #52]	; (1000fee8 <__aeabi_ui2d+0x6c>)
1000feb2:	0512      	lsls	r2, r2, #20
1000feb4:	4023      	ands	r3, r4
1000feb6:	4313      	orrs	r3, r2
1000feb8:	005b      	lsls	r3, r3, #1
1000feba:	0028      	movs	r0, r5
1000febc:	0859      	lsrs	r1, r3, #1
1000febe:	bd70      	pop	{r4, r5, r6, pc}
1000fec0:	210b      	movs	r1, #11
1000fec2:	002c      	movs	r4, r5
1000fec4:	1a08      	subs	r0, r1, r0
1000fec6:	40c4      	lsrs	r4, r0
1000fec8:	4095      	lsls	r5, r2
1000feca:	0324      	lsls	r4, r4, #12
1000fecc:	055a      	lsls	r2, r3, #21
1000fece:	0b24      	lsrs	r4, r4, #12
1000fed0:	0d52      	lsrs	r2, r2, #21
1000fed2:	e7e7      	b.n	1000fea4 <__aeabi_ui2d+0x28>
1000fed4:	2200      	movs	r2, #0
1000fed6:	2400      	movs	r4, #0
1000fed8:	e7e4      	b.n	1000fea4 <__aeabi_ui2d+0x28>
1000feda:	46c0      	nop			; (mov r8, r8)
1000fedc:	0000041e 	.word	0x0000041e
1000fee0:	00000433 	.word	0x00000433
1000fee4:	00000413 	.word	0x00000413
1000fee8:	800fffff 	.word	0x800fffff

1000feec <__aeabi_d2f>:
1000feec:	004b      	lsls	r3, r1, #1
1000feee:	b570      	push	{r4, r5, r6, lr}
1000fef0:	0d5e      	lsrs	r6, r3, #21
1000fef2:	030c      	lsls	r4, r1, #12
1000fef4:	1c75      	adds	r5, r6, #1
1000fef6:	0a64      	lsrs	r4, r4, #9
1000fef8:	0f42      	lsrs	r2, r0, #29
1000fefa:	056d      	lsls	r5, r5, #21
1000fefc:	4322      	orrs	r2, r4
1000fefe:	0fc9      	lsrs	r1, r1, #31
1000ff00:	00c4      	lsls	r4, r0, #3
1000ff02:	0d6d      	lsrs	r5, r5, #21
1000ff04:	2d01      	cmp	r5, #1
1000ff06:	dd2a      	ble.n	1000ff5e <__aeabi_d2f+0x72>
1000ff08:	4b3b      	ldr	r3, [pc, #236]	; (1000fff8 <__aeabi_d2f+0x10c>)
1000ff0a:	18f3      	adds	r3, r6, r3
1000ff0c:	2bfe      	cmp	r3, #254	; 0xfe
1000ff0e:	dc1a      	bgt.n	1000ff46 <__aeabi_d2f+0x5a>
1000ff10:	2b00      	cmp	r3, #0
1000ff12:	dd42      	ble.n	1000ff9a <__aeabi_d2f+0xae>
1000ff14:	0180      	lsls	r0, r0, #6
1000ff16:	1e45      	subs	r5, r0, #1
1000ff18:	41a8      	sbcs	r0, r5
1000ff1a:	00d2      	lsls	r2, r2, #3
1000ff1c:	4310      	orrs	r0, r2
1000ff1e:	0f62      	lsrs	r2, r4, #29
1000ff20:	4302      	orrs	r2, r0
1000ff22:	0750      	lsls	r0, r2, #29
1000ff24:	d004      	beq.n	1000ff30 <__aeabi_d2f+0x44>
1000ff26:	200f      	movs	r0, #15
1000ff28:	4010      	ands	r0, r2
1000ff2a:	2804      	cmp	r0, #4
1000ff2c:	d000      	beq.n	1000ff30 <__aeabi_d2f+0x44>
1000ff2e:	3204      	adds	r2, #4
1000ff30:	2080      	movs	r0, #128	; 0x80
1000ff32:	04c0      	lsls	r0, r0, #19
1000ff34:	4010      	ands	r0, r2
1000ff36:	d021      	beq.n	1000ff7c <__aeabi_d2f+0x90>
1000ff38:	3301      	adds	r3, #1
1000ff3a:	2bff      	cmp	r3, #255	; 0xff
1000ff3c:	d003      	beq.n	1000ff46 <__aeabi_d2f+0x5a>
1000ff3e:	0192      	lsls	r2, r2, #6
1000ff40:	0a52      	lsrs	r2, r2, #9
1000ff42:	b2db      	uxtb	r3, r3
1000ff44:	e001      	b.n	1000ff4a <__aeabi_d2f+0x5e>
1000ff46:	23ff      	movs	r3, #255	; 0xff
1000ff48:	2200      	movs	r2, #0
1000ff4a:	0252      	lsls	r2, r2, #9
1000ff4c:	0a52      	lsrs	r2, r2, #9
1000ff4e:	05db      	lsls	r3, r3, #23
1000ff50:	4313      	orrs	r3, r2
1000ff52:	005b      	lsls	r3, r3, #1
1000ff54:	07c9      	lsls	r1, r1, #31
1000ff56:	085b      	lsrs	r3, r3, #1
1000ff58:	430b      	orrs	r3, r1
1000ff5a:	0018      	movs	r0, r3
1000ff5c:	bd70      	pop	{r4, r5, r6, pc}
1000ff5e:	2e00      	cmp	r6, #0
1000ff60:	d007      	beq.n	1000ff72 <__aeabi_d2f+0x86>
1000ff62:	4314      	orrs	r4, r2
1000ff64:	d0ef      	beq.n	1000ff46 <__aeabi_d2f+0x5a>
1000ff66:	2080      	movs	r0, #128	; 0x80
1000ff68:	00d2      	lsls	r2, r2, #3
1000ff6a:	0480      	lsls	r0, r0, #18
1000ff6c:	4302      	orrs	r2, r0
1000ff6e:	23ff      	movs	r3, #255	; 0xff
1000ff70:	e7d7      	b.n	1000ff22 <__aeabi_d2f+0x36>
1000ff72:	4322      	orrs	r2, r4
1000ff74:	2300      	movs	r3, #0
1000ff76:	2a00      	cmp	r2, #0
1000ff78:	d003      	beq.n	1000ff82 <__aeabi_d2f+0x96>
1000ff7a:	2205      	movs	r2, #5
1000ff7c:	08d2      	lsrs	r2, r2, #3
1000ff7e:	2bff      	cmp	r3, #255	; 0xff
1000ff80:	d003      	beq.n	1000ff8a <__aeabi_d2f+0x9e>
1000ff82:	0252      	lsls	r2, r2, #9
1000ff84:	0a52      	lsrs	r2, r2, #9
1000ff86:	b2db      	uxtb	r3, r3
1000ff88:	e7df      	b.n	1000ff4a <__aeabi_d2f+0x5e>
1000ff8a:	2a00      	cmp	r2, #0
1000ff8c:	d032      	beq.n	1000fff4 <__aeabi_d2f+0x108>
1000ff8e:	2080      	movs	r0, #128	; 0x80
1000ff90:	03c0      	lsls	r0, r0, #15
1000ff92:	4302      	orrs	r2, r0
1000ff94:	0252      	lsls	r2, r2, #9
1000ff96:	0a52      	lsrs	r2, r2, #9
1000ff98:	e7d7      	b.n	1000ff4a <__aeabi_d2f+0x5e>
1000ff9a:	0018      	movs	r0, r3
1000ff9c:	3017      	adds	r0, #23
1000ff9e:	db14      	blt.n	1000ffca <__aeabi_d2f+0xde>
1000ffa0:	2080      	movs	r0, #128	; 0x80
1000ffa2:	0400      	lsls	r0, r0, #16
1000ffa4:	4302      	orrs	r2, r0
1000ffa6:	201e      	movs	r0, #30
1000ffa8:	1ac0      	subs	r0, r0, r3
1000ffaa:	281f      	cmp	r0, #31
1000ffac:	dc0f      	bgt.n	1000ffce <__aeabi_d2f+0xe2>
1000ffae:	0025      	movs	r5, r4
1000ffb0:	4b12      	ldr	r3, [pc, #72]	; (1000fffc <__aeabi_d2f+0x110>)
1000ffb2:	18f3      	adds	r3, r6, r3
1000ffb4:	409d      	lsls	r5, r3
1000ffb6:	1e6e      	subs	r6, r5, #1
1000ffb8:	41b5      	sbcs	r5, r6
1000ffba:	409a      	lsls	r2, r3
1000ffbc:	002b      	movs	r3, r5
1000ffbe:	4313      	orrs	r3, r2
1000ffc0:	0022      	movs	r2, r4
1000ffc2:	40c2      	lsrs	r2, r0
1000ffc4:	431a      	orrs	r2, r3
1000ffc6:	2300      	movs	r3, #0
1000ffc8:	e7ab      	b.n	1000ff22 <__aeabi_d2f+0x36>
1000ffca:	2300      	movs	r3, #0
1000ffcc:	e7d5      	b.n	1000ff7a <__aeabi_d2f+0x8e>
1000ffce:	2502      	movs	r5, #2
1000ffd0:	426d      	negs	r5, r5
1000ffd2:	1aeb      	subs	r3, r5, r3
1000ffd4:	0015      	movs	r5, r2
1000ffd6:	40dd      	lsrs	r5, r3
1000ffd8:	2820      	cmp	r0, #32
1000ffda:	d009      	beq.n	1000fff0 <__aeabi_d2f+0x104>
1000ffdc:	4b08      	ldr	r3, [pc, #32]	; (10010000 <__aeabi_d2f+0x114>)
1000ffde:	18f3      	adds	r3, r6, r3
1000ffe0:	409a      	lsls	r2, r3
1000ffe2:	4314      	orrs	r4, r2
1000ffe4:	1e62      	subs	r2, r4, #1
1000ffe6:	4194      	sbcs	r4, r2
1000ffe8:	0022      	movs	r2, r4
1000ffea:	2300      	movs	r3, #0
1000ffec:	432a      	orrs	r2, r5
1000ffee:	e798      	b.n	1000ff22 <__aeabi_d2f+0x36>
1000fff0:	2200      	movs	r2, #0
1000fff2:	e7f6      	b.n	1000ffe2 <__aeabi_d2f+0xf6>
1000fff4:	2200      	movs	r2, #0
1000fff6:	e7a8      	b.n	1000ff4a <__aeabi_d2f+0x5e>
1000fff8:	fffffc80 	.word	0xfffffc80
1000fffc:	fffffc82 	.word	0xfffffc82
10010000:	fffffca2 	.word	0xfffffca2

10010004 <__aeabi_cdrcmple>:
10010004:	4684      	mov	ip, r0
10010006:	1c10      	adds	r0, r2, #0
10010008:	4662      	mov	r2, ip
1001000a:	468c      	mov	ip, r1
1001000c:	1c19      	adds	r1, r3, #0
1001000e:	4663      	mov	r3, ip
10010010:	e000      	b.n	10010014 <__aeabi_cdcmpeq>
10010012:	46c0      	nop			; (mov r8, r8)

10010014 <__aeabi_cdcmpeq>:
10010014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010016:	f000 f9df 	bl	100103d8 <__ledf2>
1001001a:	2800      	cmp	r0, #0
1001001c:	d401      	bmi.n	10010022 <__aeabi_cdcmpeq+0xe>
1001001e:	2100      	movs	r1, #0
10010020:	42c8      	cmn	r0, r1
10010022:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010024 <__aeabi_dcmpeq>:
10010024:	b510      	push	{r4, lr}
10010026:	f000 f933 	bl	10010290 <__eqdf2>
1001002a:	4240      	negs	r0, r0
1001002c:	3001      	adds	r0, #1
1001002e:	bd10      	pop	{r4, pc}

10010030 <__aeabi_dcmplt>:
10010030:	b510      	push	{r4, lr}
10010032:	f000 f9d1 	bl	100103d8 <__ledf2>
10010036:	2800      	cmp	r0, #0
10010038:	db01      	blt.n	1001003e <__aeabi_dcmplt+0xe>
1001003a:	2000      	movs	r0, #0
1001003c:	bd10      	pop	{r4, pc}
1001003e:	2001      	movs	r0, #1
10010040:	bd10      	pop	{r4, pc}
10010042:	46c0      	nop			; (mov r8, r8)

10010044 <__aeabi_dcmple>:
10010044:	b510      	push	{r4, lr}
10010046:	f000 f9c7 	bl	100103d8 <__ledf2>
1001004a:	2800      	cmp	r0, #0
1001004c:	dd01      	ble.n	10010052 <__aeabi_dcmple+0xe>
1001004e:	2000      	movs	r0, #0
10010050:	bd10      	pop	{r4, pc}
10010052:	2001      	movs	r0, #1
10010054:	bd10      	pop	{r4, pc}
10010056:	46c0      	nop			; (mov r8, r8)

10010058 <__aeabi_dcmpgt>:
10010058:	b510      	push	{r4, lr}
1001005a:	f000 f959 	bl	10010310 <__gedf2>
1001005e:	2800      	cmp	r0, #0
10010060:	dc01      	bgt.n	10010066 <__aeabi_dcmpgt+0xe>
10010062:	2000      	movs	r0, #0
10010064:	bd10      	pop	{r4, pc}
10010066:	2001      	movs	r0, #1
10010068:	bd10      	pop	{r4, pc}
1001006a:	46c0      	nop			; (mov r8, r8)

1001006c <__aeabi_dcmpge>:
1001006c:	b510      	push	{r4, lr}
1001006e:	f000 f94f 	bl	10010310 <__gedf2>
10010072:	2800      	cmp	r0, #0
10010074:	da01      	bge.n	1001007a <__aeabi_dcmpge+0xe>
10010076:	2000      	movs	r0, #0
10010078:	bd10      	pop	{r4, pc}
1001007a:	2001      	movs	r0, #1
1001007c:	bd10      	pop	{r4, pc}
1001007e:	46c0      	nop			; (mov r8, r8)

10010080 <__aeabi_cfrcmple>:
10010080:	4684      	mov	ip, r0
10010082:	1c08      	adds	r0, r1, #0
10010084:	4661      	mov	r1, ip
10010086:	e7ff      	b.n	10010088 <__aeabi_cfcmpeq>

10010088 <__aeabi_cfcmpeq>:
10010088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001008a:	f000 f8bd 	bl	10010208 <__lesf2>
1001008e:	2800      	cmp	r0, #0
10010090:	d401      	bmi.n	10010096 <__aeabi_cfcmpeq+0xe>
10010092:	2100      	movs	r1, #0
10010094:	42c8      	cmn	r0, r1
10010096:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010098 <__aeabi_fcmpeq>:
10010098:	b510      	push	{r4, lr}
1001009a:	f000 f849 	bl	10010130 <__eqsf2>
1001009e:	4240      	negs	r0, r0
100100a0:	3001      	adds	r0, #1
100100a2:	bd10      	pop	{r4, pc}

100100a4 <__aeabi_fcmplt>:
100100a4:	b510      	push	{r4, lr}
100100a6:	f000 f8af 	bl	10010208 <__lesf2>
100100aa:	2800      	cmp	r0, #0
100100ac:	db01      	blt.n	100100b2 <__aeabi_fcmplt+0xe>
100100ae:	2000      	movs	r0, #0
100100b0:	bd10      	pop	{r4, pc}
100100b2:	2001      	movs	r0, #1
100100b4:	bd10      	pop	{r4, pc}
100100b6:	46c0      	nop			; (mov r8, r8)

100100b8 <__aeabi_fcmple>:
100100b8:	b510      	push	{r4, lr}
100100ba:	f000 f8a5 	bl	10010208 <__lesf2>
100100be:	2800      	cmp	r0, #0
100100c0:	dd01      	ble.n	100100c6 <__aeabi_fcmple+0xe>
100100c2:	2000      	movs	r0, #0
100100c4:	bd10      	pop	{r4, pc}
100100c6:	2001      	movs	r0, #1
100100c8:	bd10      	pop	{r4, pc}
100100ca:	46c0      	nop			; (mov r8, r8)

100100cc <__aeabi_fcmpgt>:
100100cc:	b510      	push	{r4, lr}
100100ce:	f000 f857 	bl	10010180 <__gesf2>
100100d2:	2800      	cmp	r0, #0
100100d4:	dc01      	bgt.n	100100da <__aeabi_fcmpgt+0xe>
100100d6:	2000      	movs	r0, #0
100100d8:	bd10      	pop	{r4, pc}
100100da:	2001      	movs	r0, #1
100100dc:	bd10      	pop	{r4, pc}
100100de:	46c0      	nop			; (mov r8, r8)

100100e0 <__aeabi_fcmpge>:
100100e0:	b510      	push	{r4, lr}
100100e2:	f000 f84d 	bl	10010180 <__gesf2>
100100e6:	2800      	cmp	r0, #0
100100e8:	da01      	bge.n	100100ee <__aeabi_fcmpge+0xe>
100100ea:	2000      	movs	r0, #0
100100ec:	bd10      	pop	{r4, pc}
100100ee:	2001      	movs	r0, #1
100100f0:	bd10      	pop	{r4, pc}
100100f2:	46c0      	nop			; (mov r8, r8)

100100f4 <__clzsi2>:
100100f4:	211c      	movs	r1, #28
100100f6:	2301      	movs	r3, #1
100100f8:	041b      	lsls	r3, r3, #16
100100fa:	4298      	cmp	r0, r3
100100fc:	d301      	bcc.n	10010102 <__clzsi2+0xe>
100100fe:	0c00      	lsrs	r0, r0, #16
10010100:	3910      	subs	r1, #16
10010102:	0a1b      	lsrs	r3, r3, #8
10010104:	4298      	cmp	r0, r3
10010106:	d301      	bcc.n	1001010c <__clzsi2+0x18>
10010108:	0a00      	lsrs	r0, r0, #8
1001010a:	3908      	subs	r1, #8
1001010c:	091b      	lsrs	r3, r3, #4
1001010e:	4298      	cmp	r0, r3
10010110:	d301      	bcc.n	10010116 <__clzsi2+0x22>
10010112:	0900      	lsrs	r0, r0, #4
10010114:	3904      	subs	r1, #4
10010116:	a202      	add	r2, pc, #8	; (adr r2, 10010120 <__clzsi2+0x2c>)
10010118:	5c10      	ldrb	r0, [r2, r0]
1001011a:	1840      	adds	r0, r0, r1
1001011c:	4770      	bx	lr
1001011e:	46c0      	nop			; (mov r8, r8)
10010120:	02020304 	.word	0x02020304
10010124:	01010101 	.word	0x01010101
	...

10010130 <__eqsf2>:
10010130:	0243      	lsls	r3, r0, #9
10010132:	b570      	push	{r4, r5, r6, lr}
10010134:	0042      	lsls	r2, r0, #1
10010136:	004c      	lsls	r4, r1, #1
10010138:	0a5d      	lsrs	r5, r3, #9
1001013a:	0fc3      	lsrs	r3, r0, #31
1001013c:	0248      	lsls	r0, r1, #9
1001013e:	0e12      	lsrs	r2, r2, #24
10010140:	0a46      	lsrs	r6, r0, #9
10010142:	0e24      	lsrs	r4, r4, #24
10010144:	0fc9      	lsrs	r1, r1, #31
10010146:	2aff      	cmp	r2, #255	; 0xff
10010148:	d00f      	beq.n	1001016a <__eqsf2+0x3a>
1001014a:	2cff      	cmp	r4, #255	; 0xff
1001014c:	d011      	beq.n	10010172 <__eqsf2+0x42>
1001014e:	2001      	movs	r0, #1
10010150:	42a2      	cmp	r2, r4
10010152:	d000      	beq.n	10010156 <__eqsf2+0x26>
10010154:	bd70      	pop	{r4, r5, r6, pc}
10010156:	42b5      	cmp	r5, r6
10010158:	d1fc      	bne.n	10010154 <__eqsf2+0x24>
1001015a:	428b      	cmp	r3, r1
1001015c:	d00d      	beq.n	1001017a <__eqsf2+0x4a>
1001015e:	2a00      	cmp	r2, #0
10010160:	d1f8      	bne.n	10010154 <__eqsf2+0x24>
10010162:	0028      	movs	r0, r5
10010164:	1e43      	subs	r3, r0, #1
10010166:	4198      	sbcs	r0, r3
10010168:	e7f4      	b.n	10010154 <__eqsf2+0x24>
1001016a:	2001      	movs	r0, #1
1001016c:	2d00      	cmp	r5, #0
1001016e:	d1f1      	bne.n	10010154 <__eqsf2+0x24>
10010170:	e7eb      	b.n	1001014a <__eqsf2+0x1a>
10010172:	2001      	movs	r0, #1
10010174:	2e00      	cmp	r6, #0
10010176:	d1ed      	bne.n	10010154 <__eqsf2+0x24>
10010178:	e7e9      	b.n	1001014e <__eqsf2+0x1e>
1001017a:	2000      	movs	r0, #0
1001017c:	e7ea      	b.n	10010154 <__eqsf2+0x24>
1001017e:	46c0      	nop			; (mov r8, r8)

10010180 <__gesf2>:
10010180:	0243      	lsls	r3, r0, #9
10010182:	b5f0      	push	{r4, r5, r6, r7, lr}
10010184:	0042      	lsls	r2, r0, #1
10010186:	0a5d      	lsrs	r5, r3, #9
10010188:	0fc3      	lsrs	r3, r0, #31
1001018a:	0248      	lsls	r0, r1, #9
1001018c:	0a44      	lsrs	r4, r0, #9
1001018e:	0048      	lsls	r0, r1, #1
10010190:	0e12      	lsrs	r2, r2, #24
10010192:	0e00      	lsrs	r0, r0, #24
10010194:	0fc9      	lsrs	r1, r1, #31
10010196:	2aff      	cmp	r2, #255	; 0xff
10010198:	d01f      	beq.n	100101da <__gesf2+0x5a>
1001019a:	28ff      	cmp	r0, #255	; 0xff
1001019c:	d022      	beq.n	100101e4 <__gesf2+0x64>
1001019e:	2a00      	cmp	r2, #0
100101a0:	d109      	bne.n	100101b6 <__gesf2+0x36>
100101a2:	426e      	negs	r6, r5
100101a4:	416e      	adcs	r6, r5
100101a6:	2800      	cmp	r0, #0
100101a8:	d10f      	bne.n	100101ca <__gesf2+0x4a>
100101aa:	2c00      	cmp	r4, #0
100101ac:	d10d      	bne.n	100101ca <__gesf2+0x4a>
100101ae:	2000      	movs	r0, #0
100101b0:	2d00      	cmp	r5, #0
100101b2:	d009      	beq.n	100101c8 <__gesf2+0x48>
100101b4:	e005      	b.n	100101c2 <__gesf2+0x42>
100101b6:	2800      	cmp	r0, #0
100101b8:	d101      	bne.n	100101be <__gesf2+0x3e>
100101ba:	2c00      	cmp	r4, #0
100101bc:	d001      	beq.n	100101c2 <__gesf2+0x42>
100101be:	428b      	cmp	r3, r1
100101c0:	d013      	beq.n	100101ea <__gesf2+0x6a>
100101c2:	4258      	negs	r0, r3
100101c4:	2301      	movs	r3, #1
100101c6:	4318      	orrs	r0, r3
100101c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101ca:	2e00      	cmp	r6, #0
100101cc:	d0f7      	beq.n	100101be <__gesf2+0x3e>
100101ce:	4248      	negs	r0, r1
100101d0:	4141      	adcs	r1, r0
100101d2:	2001      	movs	r0, #1
100101d4:	4249      	negs	r1, r1
100101d6:	4308      	orrs	r0, r1
100101d8:	e7f6      	b.n	100101c8 <__gesf2+0x48>
100101da:	2d00      	cmp	r5, #0
100101dc:	d0dd      	beq.n	1001019a <__gesf2+0x1a>
100101de:	2002      	movs	r0, #2
100101e0:	4240      	negs	r0, r0
100101e2:	e7f1      	b.n	100101c8 <__gesf2+0x48>
100101e4:	2c00      	cmp	r4, #0
100101e6:	d0da      	beq.n	1001019e <__gesf2+0x1e>
100101e8:	e7f9      	b.n	100101de <__gesf2+0x5e>
100101ea:	4282      	cmp	r2, r0
100101ec:	dce9      	bgt.n	100101c2 <__gesf2+0x42>
100101ee:	db04      	blt.n	100101fa <__gesf2+0x7a>
100101f0:	42a5      	cmp	r5, r4
100101f2:	d8e6      	bhi.n	100101c2 <__gesf2+0x42>
100101f4:	2000      	movs	r0, #0
100101f6:	42a5      	cmp	r5, r4
100101f8:	d2e6      	bcs.n	100101c8 <__gesf2+0x48>
100101fa:	4258      	negs	r0, r3
100101fc:	4143      	adcs	r3, r0
100101fe:	2001      	movs	r0, #1
10010200:	425b      	negs	r3, r3
10010202:	4318      	orrs	r0, r3
10010204:	e7e0      	b.n	100101c8 <__gesf2+0x48>
10010206:	46c0      	nop			; (mov r8, r8)

10010208 <__lesf2>:
10010208:	0243      	lsls	r3, r0, #9
1001020a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001020c:	0042      	lsls	r2, r0, #1
1001020e:	004c      	lsls	r4, r1, #1
10010210:	0a5e      	lsrs	r6, r3, #9
10010212:	0fc3      	lsrs	r3, r0, #31
10010214:	0248      	lsls	r0, r1, #9
10010216:	0e12      	lsrs	r2, r2, #24
10010218:	0a45      	lsrs	r5, r0, #9
1001021a:	0e24      	lsrs	r4, r4, #24
1001021c:	0fc9      	lsrs	r1, r1, #31
1001021e:	2aff      	cmp	r2, #255	; 0xff
10010220:	d017      	beq.n	10010252 <__lesf2+0x4a>
10010222:	2cff      	cmp	r4, #255	; 0xff
10010224:	d019      	beq.n	1001025a <__lesf2+0x52>
10010226:	2a00      	cmp	r2, #0
10010228:	d10b      	bne.n	10010242 <__lesf2+0x3a>
1001022a:	4270      	negs	r0, r6
1001022c:	4170      	adcs	r0, r6
1001022e:	2c00      	cmp	r4, #0
10010230:	d017      	beq.n	10010262 <__lesf2+0x5a>
10010232:	2800      	cmp	r0, #0
10010234:	d007      	beq.n	10010246 <__lesf2+0x3e>
10010236:	4248      	negs	r0, r1
10010238:	4141      	adcs	r1, r0
1001023a:	2001      	movs	r0, #1
1001023c:	4249      	negs	r1, r1
1001023e:	4308      	orrs	r0, r1
10010240:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010242:	2c00      	cmp	r4, #0
10010244:	d013      	beq.n	1001026e <__lesf2+0x66>
10010246:	428b      	cmp	r3, r1
10010248:	d014      	beq.n	10010274 <__lesf2+0x6c>
1001024a:	4258      	negs	r0, r3
1001024c:	2301      	movs	r3, #1
1001024e:	4318      	orrs	r0, r3
10010250:	e7f6      	b.n	10010240 <__lesf2+0x38>
10010252:	2002      	movs	r0, #2
10010254:	2e00      	cmp	r6, #0
10010256:	d1f3      	bne.n	10010240 <__lesf2+0x38>
10010258:	e7e3      	b.n	10010222 <__lesf2+0x1a>
1001025a:	2002      	movs	r0, #2
1001025c:	2d00      	cmp	r5, #0
1001025e:	d1ef      	bne.n	10010240 <__lesf2+0x38>
10010260:	e7e1      	b.n	10010226 <__lesf2+0x1e>
10010262:	2d00      	cmp	r5, #0
10010264:	d1e5      	bne.n	10010232 <__lesf2+0x2a>
10010266:	2000      	movs	r0, #0
10010268:	2e00      	cmp	r6, #0
1001026a:	d0e9      	beq.n	10010240 <__lesf2+0x38>
1001026c:	e7ed      	b.n	1001024a <__lesf2+0x42>
1001026e:	2d00      	cmp	r5, #0
10010270:	d1e9      	bne.n	10010246 <__lesf2+0x3e>
10010272:	e7ea      	b.n	1001024a <__lesf2+0x42>
10010274:	42a2      	cmp	r2, r4
10010276:	dce8      	bgt.n	1001024a <__lesf2+0x42>
10010278:	db04      	blt.n	10010284 <__lesf2+0x7c>
1001027a:	42ae      	cmp	r6, r5
1001027c:	d8e5      	bhi.n	1001024a <__lesf2+0x42>
1001027e:	2000      	movs	r0, #0
10010280:	42ae      	cmp	r6, r5
10010282:	d2dd      	bcs.n	10010240 <__lesf2+0x38>
10010284:	4258      	negs	r0, r3
10010286:	4143      	adcs	r3, r0
10010288:	2001      	movs	r0, #1
1001028a:	425b      	negs	r3, r3
1001028c:	4318      	orrs	r0, r3
1001028e:	e7d7      	b.n	10010240 <__lesf2+0x38>

10010290 <__eqdf2>:
10010290:	b5f0      	push	{r4, r5, r6, r7, lr}
10010292:	465f      	mov	r7, fp
10010294:	4656      	mov	r6, sl
10010296:	464d      	mov	r5, r9
10010298:	4644      	mov	r4, r8
1001029a:	b4f0      	push	{r4, r5, r6, r7}
1001029c:	031f      	lsls	r7, r3, #12
1001029e:	005c      	lsls	r4, r3, #1
100102a0:	0fdb      	lsrs	r3, r3, #31
100102a2:	469a      	mov	sl, r3
100102a4:	4b19      	ldr	r3, [pc, #100]	; (1001030c <__eqdf2+0x7c>)
100102a6:	030e      	lsls	r6, r1, #12
100102a8:	004d      	lsls	r5, r1, #1
100102aa:	0fc9      	lsrs	r1, r1, #31
100102ac:	4680      	mov	r8, r0
100102ae:	0b36      	lsrs	r6, r6, #12
100102b0:	0d6d      	lsrs	r5, r5, #21
100102b2:	468b      	mov	fp, r1
100102b4:	4691      	mov	r9, r2
100102b6:	0b3f      	lsrs	r7, r7, #12
100102b8:	0d64      	lsrs	r4, r4, #21
100102ba:	429d      	cmp	r5, r3
100102bc:	d019      	beq.n	100102f2 <__eqdf2+0x62>
100102be:	4b13      	ldr	r3, [pc, #76]	; (1001030c <__eqdf2+0x7c>)
100102c0:	429c      	cmp	r4, r3
100102c2:	d01b      	beq.n	100102fc <__eqdf2+0x6c>
100102c4:	2301      	movs	r3, #1
100102c6:	42a5      	cmp	r5, r4
100102c8:	d006      	beq.n	100102d8 <__eqdf2+0x48>
100102ca:	0018      	movs	r0, r3
100102cc:	bc3c      	pop	{r2, r3, r4, r5}
100102ce:	4690      	mov	r8, r2
100102d0:	4699      	mov	r9, r3
100102d2:	46a2      	mov	sl, r4
100102d4:	46ab      	mov	fp, r5
100102d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102d8:	42be      	cmp	r6, r7
100102da:	d1f6      	bne.n	100102ca <__eqdf2+0x3a>
100102dc:	45c8      	cmp	r8, r9
100102de:	d1f4      	bne.n	100102ca <__eqdf2+0x3a>
100102e0:	45d3      	cmp	fp, sl
100102e2:	d010      	beq.n	10010306 <__eqdf2+0x76>
100102e4:	2d00      	cmp	r5, #0
100102e6:	d1f0      	bne.n	100102ca <__eqdf2+0x3a>
100102e8:	4330      	orrs	r0, r6
100102ea:	0003      	movs	r3, r0
100102ec:	1e5a      	subs	r2, r3, #1
100102ee:	4193      	sbcs	r3, r2
100102f0:	e7eb      	b.n	100102ca <__eqdf2+0x3a>
100102f2:	0031      	movs	r1, r6
100102f4:	2301      	movs	r3, #1
100102f6:	4301      	orrs	r1, r0
100102f8:	d1e7      	bne.n	100102ca <__eqdf2+0x3a>
100102fa:	e7e0      	b.n	100102be <__eqdf2+0x2e>
100102fc:	433a      	orrs	r2, r7
100102fe:	2301      	movs	r3, #1
10010300:	2a00      	cmp	r2, #0
10010302:	d1e2      	bne.n	100102ca <__eqdf2+0x3a>
10010304:	e7de      	b.n	100102c4 <__eqdf2+0x34>
10010306:	2300      	movs	r3, #0
10010308:	e7df      	b.n	100102ca <__eqdf2+0x3a>
1001030a:	46c0      	nop			; (mov r8, r8)
1001030c:	000007ff 	.word	0x000007ff

10010310 <__gedf2>:
10010310:	b5f0      	push	{r4, r5, r6, r7, lr}
10010312:	465f      	mov	r7, fp
10010314:	4644      	mov	r4, r8
10010316:	4656      	mov	r6, sl
10010318:	464d      	mov	r5, r9
1001031a:	b4f0      	push	{r4, r5, r6, r7}
1001031c:	031f      	lsls	r7, r3, #12
1001031e:	0b3c      	lsrs	r4, r7, #12
10010320:	4f2c      	ldr	r7, [pc, #176]	; (100103d4 <__gedf2+0xc4>)
10010322:	030e      	lsls	r6, r1, #12
10010324:	004d      	lsls	r5, r1, #1
10010326:	46a3      	mov	fp, r4
10010328:	005c      	lsls	r4, r3, #1
1001032a:	4684      	mov	ip, r0
1001032c:	0b36      	lsrs	r6, r6, #12
1001032e:	0d6d      	lsrs	r5, r5, #21
10010330:	0fc9      	lsrs	r1, r1, #31
10010332:	4690      	mov	r8, r2
10010334:	0d64      	lsrs	r4, r4, #21
10010336:	0fdb      	lsrs	r3, r3, #31
10010338:	42bd      	cmp	r5, r7
1001033a:	d02b      	beq.n	10010394 <__gedf2+0x84>
1001033c:	4f25      	ldr	r7, [pc, #148]	; (100103d4 <__gedf2+0xc4>)
1001033e:	42bc      	cmp	r4, r7
10010340:	d02e      	beq.n	100103a0 <__gedf2+0x90>
10010342:	2d00      	cmp	r5, #0
10010344:	d10e      	bne.n	10010364 <__gedf2+0x54>
10010346:	4330      	orrs	r0, r6
10010348:	0007      	movs	r7, r0
1001034a:	4681      	mov	r9, r0
1001034c:	4278      	negs	r0, r7
1001034e:	4178      	adcs	r0, r7
10010350:	2c00      	cmp	r4, #0
10010352:	d117      	bne.n	10010384 <__gedf2+0x74>
10010354:	465f      	mov	r7, fp
10010356:	433a      	orrs	r2, r7
10010358:	d114      	bne.n	10010384 <__gedf2+0x74>
1001035a:	464b      	mov	r3, r9
1001035c:	2000      	movs	r0, #0
1001035e:	2b00      	cmp	r3, #0
10010360:	d00a      	beq.n	10010378 <__gedf2+0x68>
10010362:	e006      	b.n	10010372 <__gedf2+0x62>
10010364:	2c00      	cmp	r4, #0
10010366:	d102      	bne.n	1001036e <__gedf2+0x5e>
10010368:	4658      	mov	r0, fp
1001036a:	4302      	orrs	r2, r0
1001036c:	d001      	beq.n	10010372 <__gedf2+0x62>
1001036e:	4299      	cmp	r1, r3
10010370:	d01a      	beq.n	100103a8 <__gedf2+0x98>
10010372:	2301      	movs	r3, #1
10010374:	4248      	negs	r0, r1
10010376:	4318      	orrs	r0, r3
10010378:	bc3c      	pop	{r2, r3, r4, r5}
1001037a:	4690      	mov	r8, r2
1001037c:	4699      	mov	r9, r3
1001037e:	46a2      	mov	sl, r4
10010380:	46ab      	mov	fp, r5
10010382:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010384:	2800      	cmp	r0, #0
10010386:	d0f2      	beq.n	1001036e <__gedf2+0x5e>
10010388:	4258      	negs	r0, r3
1001038a:	4158      	adcs	r0, r3
1001038c:	2201      	movs	r2, #1
1001038e:	4240      	negs	r0, r0
10010390:	4310      	orrs	r0, r2
10010392:	e7f1      	b.n	10010378 <__gedf2+0x68>
10010394:	0037      	movs	r7, r6
10010396:	4307      	orrs	r7, r0
10010398:	d0d0      	beq.n	1001033c <__gedf2+0x2c>
1001039a:	2002      	movs	r0, #2
1001039c:	4240      	negs	r0, r0
1001039e:	e7eb      	b.n	10010378 <__gedf2+0x68>
100103a0:	465f      	mov	r7, fp
100103a2:	4317      	orrs	r7, r2
100103a4:	d0cd      	beq.n	10010342 <__gedf2+0x32>
100103a6:	e7f8      	b.n	1001039a <__gedf2+0x8a>
100103a8:	42a5      	cmp	r5, r4
100103aa:	dce2      	bgt.n	10010372 <__gedf2+0x62>
100103ac:	db05      	blt.n	100103ba <__gedf2+0xaa>
100103ae:	455e      	cmp	r6, fp
100103b0:	d8df      	bhi.n	10010372 <__gedf2+0x62>
100103b2:	d008      	beq.n	100103c6 <__gedf2+0xb6>
100103b4:	2000      	movs	r0, #0
100103b6:	455e      	cmp	r6, fp
100103b8:	d2de      	bcs.n	10010378 <__gedf2+0x68>
100103ba:	4248      	negs	r0, r1
100103bc:	4148      	adcs	r0, r1
100103be:	2301      	movs	r3, #1
100103c0:	4240      	negs	r0, r0
100103c2:	4318      	orrs	r0, r3
100103c4:	e7d8      	b.n	10010378 <__gedf2+0x68>
100103c6:	45c4      	cmp	ip, r8
100103c8:	d8d3      	bhi.n	10010372 <__gedf2+0x62>
100103ca:	2000      	movs	r0, #0
100103cc:	45c4      	cmp	ip, r8
100103ce:	d3f4      	bcc.n	100103ba <__gedf2+0xaa>
100103d0:	e7d2      	b.n	10010378 <__gedf2+0x68>
100103d2:	46c0      	nop			; (mov r8, r8)
100103d4:	000007ff 	.word	0x000007ff

100103d8 <__ledf2>:
100103d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100103da:	465f      	mov	r7, fp
100103dc:	464d      	mov	r5, r9
100103de:	4644      	mov	r4, r8
100103e0:	4656      	mov	r6, sl
100103e2:	b4f0      	push	{r4, r5, r6, r7}
100103e4:	031c      	lsls	r4, r3, #12
100103e6:	0b24      	lsrs	r4, r4, #12
100103e8:	46a4      	mov	ip, r4
100103ea:	4c2f      	ldr	r4, [pc, #188]	; (100104a8 <__ledf2+0xd0>)
100103ec:	030f      	lsls	r7, r1, #12
100103ee:	004d      	lsls	r5, r1, #1
100103f0:	005e      	lsls	r6, r3, #1
100103f2:	0fc9      	lsrs	r1, r1, #31
100103f4:	4680      	mov	r8, r0
100103f6:	0b3f      	lsrs	r7, r7, #12
100103f8:	0d6d      	lsrs	r5, r5, #21
100103fa:	468b      	mov	fp, r1
100103fc:	4691      	mov	r9, r2
100103fe:	0d76      	lsrs	r6, r6, #21
10010400:	0fdb      	lsrs	r3, r3, #31
10010402:	42a5      	cmp	r5, r4
10010404:	d020      	beq.n	10010448 <__ledf2+0x70>
10010406:	4c28      	ldr	r4, [pc, #160]	; (100104a8 <__ledf2+0xd0>)
10010408:	42a6      	cmp	r6, r4
1001040a:	d022      	beq.n	10010452 <__ledf2+0x7a>
1001040c:	2d00      	cmp	r5, #0
1001040e:	d112      	bne.n	10010436 <__ledf2+0x5e>
10010410:	4338      	orrs	r0, r7
10010412:	4244      	negs	r4, r0
10010414:	4144      	adcs	r4, r0
10010416:	2e00      	cmp	r6, #0
10010418:	d020      	beq.n	1001045c <__ledf2+0x84>
1001041a:	2c00      	cmp	r4, #0
1001041c:	d00d      	beq.n	1001043a <__ledf2+0x62>
1001041e:	425c      	negs	r4, r3
10010420:	4163      	adcs	r3, r4
10010422:	2401      	movs	r4, #1
10010424:	425b      	negs	r3, r3
10010426:	431c      	orrs	r4, r3
10010428:	0020      	movs	r0, r4
1001042a:	bc3c      	pop	{r2, r3, r4, r5}
1001042c:	4690      	mov	r8, r2
1001042e:	4699      	mov	r9, r3
10010430:	46a2      	mov	sl, r4
10010432:	46ab      	mov	fp, r5
10010434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010436:	2e00      	cmp	r6, #0
10010438:	d017      	beq.n	1001046a <__ledf2+0x92>
1001043a:	455b      	cmp	r3, fp
1001043c:	d019      	beq.n	10010472 <__ledf2+0x9a>
1001043e:	465b      	mov	r3, fp
10010440:	425c      	negs	r4, r3
10010442:	2301      	movs	r3, #1
10010444:	431c      	orrs	r4, r3
10010446:	e7ef      	b.n	10010428 <__ledf2+0x50>
10010448:	0039      	movs	r1, r7
1001044a:	2402      	movs	r4, #2
1001044c:	4301      	orrs	r1, r0
1001044e:	d1eb      	bne.n	10010428 <__ledf2+0x50>
10010450:	e7d9      	b.n	10010406 <__ledf2+0x2e>
10010452:	4661      	mov	r1, ip
10010454:	2402      	movs	r4, #2
10010456:	4311      	orrs	r1, r2
10010458:	d1e6      	bne.n	10010428 <__ledf2+0x50>
1001045a:	e7d7      	b.n	1001040c <__ledf2+0x34>
1001045c:	4661      	mov	r1, ip
1001045e:	430a      	orrs	r2, r1
10010460:	d1db      	bne.n	1001041a <__ledf2+0x42>
10010462:	2400      	movs	r4, #0
10010464:	2800      	cmp	r0, #0
10010466:	d0df      	beq.n	10010428 <__ledf2+0x50>
10010468:	e7e9      	b.n	1001043e <__ledf2+0x66>
1001046a:	4661      	mov	r1, ip
1001046c:	430a      	orrs	r2, r1
1001046e:	d1e4      	bne.n	1001043a <__ledf2+0x62>
10010470:	e7e5      	b.n	1001043e <__ledf2+0x66>
10010472:	42b5      	cmp	r5, r6
10010474:	dd03      	ble.n	1001047e <__ledf2+0xa6>
10010476:	2201      	movs	r2, #1
10010478:	425c      	negs	r4, r3
1001047a:	4314      	orrs	r4, r2
1001047c:	e7d4      	b.n	10010428 <__ledf2+0x50>
1001047e:	42b5      	cmp	r5, r6
10010480:	dbcd      	blt.n	1001041e <__ledf2+0x46>
10010482:	4567      	cmp	r7, ip
10010484:	d8db      	bhi.n	1001043e <__ledf2+0x66>
10010486:	d009      	beq.n	1001049c <__ledf2+0xc4>
10010488:	2400      	movs	r4, #0
1001048a:	4567      	cmp	r7, ip
1001048c:	d2cc      	bcs.n	10010428 <__ledf2+0x50>
1001048e:	4659      	mov	r1, fp
10010490:	424c      	negs	r4, r1
10010492:	4161      	adcs	r1, r4
10010494:	2401      	movs	r4, #1
10010496:	4249      	negs	r1, r1
10010498:	430c      	orrs	r4, r1
1001049a:	e7c5      	b.n	10010428 <__ledf2+0x50>
1001049c:	45c8      	cmp	r8, r9
1001049e:	d8ce      	bhi.n	1001043e <__ledf2+0x66>
100104a0:	2400      	movs	r4, #0
100104a2:	45c8      	cmp	r8, r9
100104a4:	d3f3      	bcc.n	1001048e <__ledf2+0xb6>
100104a6:	e7bf      	b.n	10010428 <__ledf2+0x50>
100104a8:	000007ff 	.word	0x000007ff

100104ac <__libc_init_array>:
100104ac:	4b0e      	ldr	r3, [pc, #56]	; (100104e8 <__libc_init_array+0x3c>)
100104ae:	b570      	push	{r4, r5, r6, lr}
100104b0:	2500      	movs	r5, #0
100104b2:	001e      	movs	r6, r3
100104b4:	4c0d      	ldr	r4, [pc, #52]	; (100104ec <__libc_init_array+0x40>)
100104b6:	1ae4      	subs	r4, r4, r3
100104b8:	10a4      	asrs	r4, r4, #2
100104ba:	42a5      	cmp	r5, r4
100104bc:	d004      	beq.n	100104c8 <__libc_init_array+0x1c>
100104be:	00ab      	lsls	r3, r5, #2
100104c0:	58f3      	ldr	r3, [r6, r3]
100104c2:	4798      	blx	r3
100104c4:	3501      	adds	r5, #1
100104c6:	e7f8      	b.n	100104ba <__libc_init_array+0xe>
100104c8:	f002 f818 	bl	100124fc <_init>
100104cc:	4b08      	ldr	r3, [pc, #32]	; (100104f0 <__libc_init_array+0x44>)
100104ce:	2500      	movs	r5, #0
100104d0:	001e      	movs	r6, r3
100104d2:	4c08      	ldr	r4, [pc, #32]	; (100104f4 <__libc_init_array+0x48>)
100104d4:	1ae4      	subs	r4, r4, r3
100104d6:	10a4      	asrs	r4, r4, #2
100104d8:	42a5      	cmp	r5, r4
100104da:	d004      	beq.n	100104e6 <__libc_init_array+0x3a>
100104dc:	00ab      	lsls	r3, r5, #2
100104de:	58f3      	ldr	r3, [r6, r3]
100104e0:	4798      	blx	r3
100104e2:	3501      	adds	r5, #1
100104e4:	e7f8      	b.n	100104d8 <__libc_init_array+0x2c>
100104e6:	bd70      	pop	{r4, r5, r6, pc}
100104e8:	10012508 	.word	0x10012508
100104ec:	10012508 	.word	0x10012508
100104f0:	10012508 	.word	0x10012508
100104f4:	1001250c 	.word	0x1001250c

100104f8 <memcmp>:
100104f8:	b530      	push	{r4, r5, lr}
100104fa:	2400      	movs	r4, #0
100104fc:	42a2      	cmp	r2, r4
100104fe:	d008      	beq.n	10010512 <memcmp+0x1a>
10010500:	5d03      	ldrb	r3, [r0, r4]
10010502:	1c65      	adds	r5, r4, #1
10010504:	5d0c      	ldrb	r4, [r1, r4]
10010506:	42a3      	cmp	r3, r4
10010508:	d001      	beq.n	1001050e <memcmp+0x16>
1001050a:	1b18      	subs	r0, r3, r4
1001050c:	e002      	b.n	10010514 <memcmp+0x1c>
1001050e:	002c      	movs	r4, r5
10010510:	e7f4      	b.n	100104fc <memcmp+0x4>
10010512:	2000      	movs	r0, #0
10010514:	bd30      	pop	{r4, r5, pc}

10010516 <memcpy>:
10010516:	2300      	movs	r3, #0
10010518:	b510      	push	{r4, lr}
1001051a:	429a      	cmp	r2, r3
1001051c:	d003      	beq.n	10010526 <memcpy+0x10>
1001051e:	5ccc      	ldrb	r4, [r1, r3]
10010520:	54c4      	strb	r4, [r0, r3]
10010522:	3301      	adds	r3, #1
10010524:	e7f9      	b.n	1001051a <memcpy+0x4>
10010526:	bd10      	pop	{r4, pc}

10010528 <memset>:
10010528:	0003      	movs	r3, r0
1001052a:	1882      	adds	r2, r0, r2
1001052c:	4293      	cmp	r3, r2
1001052e:	d002      	beq.n	10010536 <memset+0xe>
10010530:	7019      	strb	r1, [r3, #0]
10010532:	3301      	adds	r3, #1
10010534:	e7fa      	b.n	1001052c <memset+0x4>
10010536:	4770      	bx	lr

10010538 <iprintf>:
10010538:	b40f      	push	{r0, r1, r2, r3}
1001053a:	4b0b      	ldr	r3, [pc, #44]	; (10010568 <iprintf+0x30>)
1001053c:	b513      	push	{r0, r1, r4, lr}
1001053e:	681c      	ldr	r4, [r3, #0]
10010540:	2c00      	cmp	r4, #0
10010542:	d005      	beq.n	10010550 <iprintf+0x18>
10010544:	69a3      	ldr	r3, [r4, #24]
10010546:	2b00      	cmp	r3, #0
10010548:	d102      	bne.n	10010550 <iprintf+0x18>
1001054a:	0020      	movs	r0, r4
1001054c:	f000 fb46 	bl	10010bdc <__sinit>
10010550:	ab05      	add	r3, sp, #20
10010552:	9a04      	ldr	r2, [sp, #16]
10010554:	68a1      	ldr	r1, [r4, #8]
10010556:	0020      	movs	r0, r4
10010558:	9301      	str	r3, [sp, #4]
1001055a:	f000 fd05 	bl	10010f68 <_vfiprintf_r>
1001055e:	bc16      	pop	{r1, r2, r4}
10010560:	bc08      	pop	{r3}
10010562:	b004      	add	sp, #16
10010564:	4718      	bx	r3
10010566:	46c0      	nop			; (mov r8, r8)
10010568:	10012590 	.word	0x10012590

1001056c <putchar>:
1001056c:	4b08      	ldr	r3, [pc, #32]	; (10010590 <putchar+0x24>)
1001056e:	b570      	push	{r4, r5, r6, lr}
10010570:	681c      	ldr	r4, [r3, #0]
10010572:	0005      	movs	r5, r0
10010574:	2c00      	cmp	r4, #0
10010576:	d005      	beq.n	10010584 <putchar+0x18>
10010578:	69a3      	ldr	r3, [r4, #24]
1001057a:	2b00      	cmp	r3, #0
1001057c:	d102      	bne.n	10010584 <putchar+0x18>
1001057e:	0020      	movs	r0, r4
10010580:	f000 fb2c 	bl	10010bdc <__sinit>
10010584:	0029      	movs	r1, r5
10010586:	68a2      	ldr	r2, [r4, #8]
10010588:	0020      	movs	r0, r4
1001058a:	f000 ff99 	bl	100114c0 <_putc_r>
1001058e:	bd70      	pop	{r4, r5, r6, pc}
10010590:	10012590 	.word	0x10012590

10010594 <_puts_r>:
10010594:	b570      	push	{r4, r5, r6, lr}
10010596:	0005      	movs	r5, r0
10010598:	000e      	movs	r6, r1
1001059a:	2800      	cmp	r0, #0
1001059c:	d004      	beq.n	100105a8 <_puts_r+0x14>
1001059e:	6983      	ldr	r3, [r0, #24]
100105a0:	2b00      	cmp	r3, #0
100105a2:	d101      	bne.n	100105a8 <_puts_r+0x14>
100105a4:	f000 fb1a 	bl	10010bdc <__sinit>
100105a8:	69ab      	ldr	r3, [r5, #24]
100105aa:	68ac      	ldr	r4, [r5, #8]
100105ac:	2b00      	cmp	r3, #0
100105ae:	d102      	bne.n	100105b6 <_puts_r+0x22>
100105b0:	0028      	movs	r0, r5
100105b2:	f000 fb13 	bl	10010bdc <__sinit>
100105b6:	4b25      	ldr	r3, [pc, #148]	; (1001064c <_puts_r+0xb8>)
100105b8:	429c      	cmp	r4, r3
100105ba:	d101      	bne.n	100105c0 <_puts_r+0x2c>
100105bc:	686c      	ldr	r4, [r5, #4]
100105be:	e008      	b.n	100105d2 <_puts_r+0x3e>
100105c0:	4b23      	ldr	r3, [pc, #140]	; (10010650 <_puts_r+0xbc>)
100105c2:	429c      	cmp	r4, r3
100105c4:	d101      	bne.n	100105ca <_puts_r+0x36>
100105c6:	68ac      	ldr	r4, [r5, #8]
100105c8:	e003      	b.n	100105d2 <_puts_r+0x3e>
100105ca:	4b22      	ldr	r3, [pc, #136]	; (10010654 <_puts_r+0xc0>)
100105cc:	429c      	cmp	r4, r3
100105ce:	d100      	bne.n	100105d2 <_puts_r+0x3e>
100105d0:	68ec      	ldr	r4, [r5, #12]
100105d2:	89a3      	ldrh	r3, [r4, #12]
100105d4:	071b      	lsls	r3, r3, #28
100105d6:	d502      	bpl.n	100105de <_puts_r+0x4a>
100105d8:	6923      	ldr	r3, [r4, #16]
100105da:	2b00      	cmp	r3, #0
100105dc:	d111      	bne.n	10010602 <_puts_r+0x6e>
100105de:	0021      	movs	r1, r4
100105e0:	0028      	movs	r0, r5
100105e2:	f000 f991 	bl	10010908 <__swsetup_r>
100105e6:	2800      	cmp	r0, #0
100105e8:	d00b      	beq.n	10010602 <_puts_r+0x6e>
100105ea:	2001      	movs	r0, #1
100105ec:	4240      	negs	r0, r0
100105ee:	e02b      	b.n	10010648 <_puts_r+0xb4>
100105f0:	3b01      	subs	r3, #1
100105f2:	3601      	adds	r6, #1
100105f4:	60a3      	str	r3, [r4, #8]
100105f6:	2b00      	cmp	r3, #0
100105f8:	db08      	blt.n	1001060c <_puts_r+0x78>
100105fa:	6823      	ldr	r3, [r4, #0]
100105fc:	1c5a      	adds	r2, r3, #1
100105fe:	6022      	str	r2, [r4, #0]
10010600:	7019      	strb	r1, [r3, #0]
10010602:	7831      	ldrb	r1, [r6, #0]
10010604:	68a3      	ldr	r3, [r4, #8]
10010606:	2900      	cmp	r1, #0
10010608:	d1f2      	bne.n	100105f0 <_puts_r+0x5c>
1001060a:	e00b      	b.n	10010624 <_puts_r+0x90>
1001060c:	69a2      	ldr	r2, [r4, #24]
1001060e:	4293      	cmp	r3, r2
10010610:	db01      	blt.n	10010616 <_puts_r+0x82>
10010612:	290a      	cmp	r1, #10
10010614:	d1f1      	bne.n	100105fa <_puts_r+0x66>
10010616:	0022      	movs	r2, r4
10010618:	0028      	movs	r0, r5
1001061a:	f000 f91d 	bl	10010858 <__swbuf_r>
1001061e:	1c43      	adds	r3, r0, #1
10010620:	d1ef      	bne.n	10010602 <_puts_r+0x6e>
10010622:	e7e2      	b.n	100105ea <_puts_r+0x56>
10010624:	3b01      	subs	r3, #1
10010626:	60a3      	str	r3, [r4, #8]
10010628:	2b00      	cmp	r3, #0
1001062a:	da08      	bge.n	1001063e <_puts_r+0xaa>
1001062c:	0022      	movs	r2, r4
1001062e:	310a      	adds	r1, #10
10010630:	0028      	movs	r0, r5
10010632:	f000 f911 	bl	10010858 <__swbuf_r>
10010636:	1c43      	adds	r3, r0, #1
10010638:	d0d7      	beq.n	100105ea <_puts_r+0x56>
1001063a:	200a      	movs	r0, #10
1001063c:	e004      	b.n	10010648 <_puts_r+0xb4>
1001063e:	200a      	movs	r0, #10
10010640:	6823      	ldr	r3, [r4, #0]
10010642:	1c5a      	adds	r2, r3, #1
10010644:	6022      	str	r2, [r4, #0]
10010646:	7018      	strb	r0, [r3, #0]
10010648:	bd70      	pop	{r4, r5, r6, pc}
1001064a:	46c0      	nop			; (mov r8, r8)
1001064c:	10012468 	.word	0x10012468
10010650:	10012488 	.word	0x10012488
10010654:	100124a8 	.word	0x100124a8

10010658 <puts>:
10010658:	b510      	push	{r4, lr}
1001065a:	4b03      	ldr	r3, [pc, #12]	; (10010668 <puts+0x10>)
1001065c:	0001      	movs	r1, r0
1001065e:	6818      	ldr	r0, [r3, #0]
10010660:	f7ff ff98 	bl	10010594 <_puts_r>
10010664:	bd10      	pop	{r4, pc}
10010666:	46c0      	nop			; (mov r8, r8)
10010668:	10012590 	.word	0x10012590

1001066c <rand>:
1001066c:	4b15      	ldr	r3, [pc, #84]	; (100106c4 <rand+0x58>)
1001066e:	b510      	push	{r4, lr}
10010670:	681c      	ldr	r4, [r3, #0]
10010672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10010674:	2b00      	cmp	r3, #0
10010676:	d115      	bne.n	100106a4 <rand+0x38>
10010678:	2018      	movs	r0, #24
1001067a:	f000 fba7 	bl	10010dcc <malloc>
1001067e:	4b12      	ldr	r3, [pc, #72]	; (100106c8 <rand+0x5c>)
10010680:	63a0      	str	r0, [r4, #56]	; 0x38
10010682:	8003      	strh	r3, [r0, #0]
10010684:	4b11      	ldr	r3, [pc, #68]	; (100106cc <rand+0x60>)
10010686:	2201      	movs	r2, #1
10010688:	8043      	strh	r3, [r0, #2]
1001068a:	4b11      	ldr	r3, [pc, #68]	; (100106d0 <rand+0x64>)
1001068c:	8083      	strh	r3, [r0, #4]
1001068e:	4b11      	ldr	r3, [pc, #68]	; (100106d4 <rand+0x68>)
10010690:	80c3      	strh	r3, [r0, #6]
10010692:	4b11      	ldr	r3, [pc, #68]	; (100106d8 <rand+0x6c>)
10010694:	8103      	strh	r3, [r0, #8]
10010696:	2305      	movs	r3, #5
10010698:	8143      	strh	r3, [r0, #10]
1001069a:	3306      	adds	r3, #6
1001069c:	8183      	strh	r3, [r0, #12]
1001069e:	2300      	movs	r3, #0
100106a0:	6102      	str	r2, [r0, #16]
100106a2:	6143      	str	r3, [r0, #20]
100106a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100106a6:	4a0d      	ldr	r2, [pc, #52]	; (100106dc <rand+0x70>)
100106a8:	6920      	ldr	r0, [r4, #16]
100106aa:	6961      	ldr	r1, [r4, #20]
100106ac:	4b0c      	ldr	r3, [pc, #48]	; (100106e0 <rand+0x74>)
100106ae:	f001 f819 	bl	100116e4 <__aeabi_lmul>
100106b2:	2201      	movs	r2, #1
100106b4:	2300      	movs	r3, #0
100106b6:	1880      	adds	r0, r0, r2
100106b8:	4159      	adcs	r1, r3
100106ba:	6120      	str	r0, [r4, #16]
100106bc:	6161      	str	r1, [r4, #20]
100106be:	0048      	lsls	r0, r1, #1
100106c0:	0840      	lsrs	r0, r0, #1
100106c2:	bd10      	pop	{r4, pc}
100106c4:	10012590 	.word	0x10012590
100106c8:	0000330e 	.word	0x0000330e
100106cc:	ffffabcd 	.word	0xffffabcd
100106d0:	00001234 	.word	0x00001234
100106d4:	ffffe66d 	.word	0xffffe66d
100106d8:	ffffdeec 	.word	0xffffdeec
100106dc:	4c957f2d 	.word	0x4c957f2d
100106e0:	5851f42d 	.word	0x5851f42d

100106e4 <setbuf>:
100106e4:	424a      	negs	r2, r1
100106e6:	414a      	adcs	r2, r1
100106e8:	2380      	movs	r3, #128	; 0x80
100106ea:	b510      	push	{r4, lr}
100106ec:	0052      	lsls	r2, r2, #1
100106ee:	00db      	lsls	r3, r3, #3
100106f0:	f000 f802 	bl	100106f8 <setvbuf>
100106f4:	bd10      	pop	{r4, pc}
	...

100106f8 <setvbuf>:
100106f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100106fa:	001d      	movs	r5, r3
100106fc:	4b51      	ldr	r3, [pc, #324]	; (10010844 <setvbuf+0x14c>)
100106fe:	b085      	sub	sp, #20
10010700:	681e      	ldr	r6, [r3, #0]
10010702:	0004      	movs	r4, r0
10010704:	000f      	movs	r7, r1
10010706:	9200      	str	r2, [sp, #0]
10010708:	2e00      	cmp	r6, #0
1001070a:	d005      	beq.n	10010718 <setvbuf+0x20>
1001070c:	69b3      	ldr	r3, [r6, #24]
1001070e:	2b00      	cmp	r3, #0
10010710:	d102      	bne.n	10010718 <setvbuf+0x20>
10010712:	0030      	movs	r0, r6
10010714:	f000 fa62 	bl	10010bdc <__sinit>
10010718:	4b4b      	ldr	r3, [pc, #300]	; (10010848 <setvbuf+0x150>)
1001071a:	429c      	cmp	r4, r3
1001071c:	d101      	bne.n	10010722 <setvbuf+0x2a>
1001071e:	6874      	ldr	r4, [r6, #4]
10010720:	e008      	b.n	10010734 <setvbuf+0x3c>
10010722:	4b4a      	ldr	r3, [pc, #296]	; (1001084c <setvbuf+0x154>)
10010724:	429c      	cmp	r4, r3
10010726:	d101      	bne.n	1001072c <setvbuf+0x34>
10010728:	68b4      	ldr	r4, [r6, #8]
1001072a:	e003      	b.n	10010734 <setvbuf+0x3c>
1001072c:	4b48      	ldr	r3, [pc, #288]	; (10010850 <setvbuf+0x158>)
1001072e:	429c      	cmp	r4, r3
10010730:	d100      	bne.n	10010734 <setvbuf+0x3c>
10010732:	68f4      	ldr	r4, [r6, #12]
10010734:	9b00      	ldr	r3, [sp, #0]
10010736:	2b02      	cmp	r3, #2
10010738:	d005      	beq.n	10010746 <setvbuf+0x4e>
1001073a:	2b01      	cmp	r3, #1
1001073c:	d900      	bls.n	10010740 <setvbuf+0x48>
1001073e:	e07c      	b.n	1001083a <setvbuf+0x142>
10010740:	2d00      	cmp	r5, #0
10010742:	da00      	bge.n	10010746 <setvbuf+0x4e>
10010744:	e079      	b.n	1001083a <setvbuf+0x142>
10010746:	0021      	movs	r1, r4
10010748:	0030      	movs	r0, r6
1001074a:	f000 f9d9 	bl	10010b00 <_fflush_r>
1001074e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010750:	2900      	cmp	r1, #0
10010752:	d008      	beq.n	10010766 <setvbuf+0x6e>
10010754:	0023      	movs	r3, r4
10010756:	3344      	adds	r3, #68	; 0x44
10010758:	4299      	cmp	r1, r3
1001075a:	d002      	beq.n	10010762 <setvbuf+0x6a>
1001075c:	0030      	movs	r0, r6
1001075e:	f000 fb3f 	bl	10010de0 <_free_r>
10010762:	2300      	movs	r3, #0
10010764:	6363      	str	r3, [r4, #52]	; 0x34
10010766:	2300      	movs	r3, #0
10010768:	61a3      	str	r3, [r4, #24]
1001076a:	6063      	str	r3, [r4, #4]
1001076c:	89a3      	ldrh	r3, [r4, #12]
1001076e:	061b      	lsls	r3, r3, #24
10010770:	d503      	bpl.n	1001077a <setvbuf+0x82>
10010772:	6921      	ldr	r1, [r4, #16]
10010774:	0030      	movs	r0, r6
10010776:	f000 fb33 	bl	10010de0 <_free_r>
1001077a:	89a2      	ldrh	r2, [r4, #12]
1001077c:	4b35      	ldr	r3, [pc, #212]	; (10010854 <setvbuf+0x15c>)
1001077e:	4013      	ands	r3, r2
10010780:	81a3      	strh	r3, [r4, #12]
10010782:	9b00      	ldr	r3, [sp, #0]
10010784:	2b02      	cmp	r3, #2
10010786:	d021      	beq.n	100107cc <setvbuf+0xd4>
10010788:	ab03      	add	r3, sp, #12
1001078a:	aa02      	add	r2, sp, #8
1001078c:	0021      	movs	r1, r4
1001078e:	0030      	movs	r0, r6
10010790:	f000 fab8 	bl	10010d04 <__swhatbuf_r>
10010794:	89a3      	ldrh	r3, [r4, #12]
10010796:	4318      	orrs	r0, r3
10010798:	81a0      	strh	r0, [r4, #12]
1001079a:	2d00      	cmp	r5, #0
1001079c:	d101      	bne.n	100107a2 <setvbuf+0xaa>
1001079e:	9d02      	ldr	r5, [sp, #8]
100107a0:	e001      	b.n	100107a6 <setvbuf+0xae>
100107a2:	2f00      	cmp	r7, #0
100107a4:	d125      	bne.n	100107f2 <setvbuf+0xfa>
100107a6:	0028      	movs	r0, r5
100107a8:	f000 fb10 	bl	10010dcc <malloc>
100107ac:	9501      	str	r5, [sp, #4]
100107ae:	1e07      	subs	r7, r0, #0
100107b0:	d11a      	bne.n	100107e8 <setvbuf+0xf0>
100107b2:	9b02      	ldr	r3, [sp, #8]
100107b4:	9301      	str	r3, [sp, #4]
100107b6:	42ab      	cmp	r3, r5
100107b8:	d102      	bne.n	100107c0 <setvbuf+0xc8>
100107ba:	2001      	movs	r0, #1
100107bc:	4240      	negs	r0, r0
100107be:	e006      	b.n	100107ce <setvbuf+0xd6>
100107c0:	9801      	ldr	r0, [sp, #4]
100107c2:	f000 fb03 	bl	10010dcc <malloc>
100107c6:	1e07      	subs	r7, r0, #0
100107c8:	d10e      	bne.n	100107e8 <setvbuf+0xf0>
100107ca:	e7f6      	b.n	100107ba <setvbuf+0xc2>
100107cc:	2000      	movs	r0, #0
100107ce:	2202      	movs	r2, #2
100107d0:	89a3      	ldrh	r3, [r4, #12]
100107d2:	4313      	orrs	r3, r2
100107d4:	81a3      	strh	r3, [r4, #12]
100107d6:	2300      	movs	r3, #0
100107d8:	60a3      	str	r3, [r4, #8]
100107da:	0023      	movs	r3, r4
100107dc:	3347      	adds	r3, #71	; 0x47
100107de:	6023      	str	r3, [r4, #0]
100107e0:	6123      	str	r3, [r4, #16]
100107e2:	2301      	movs	r3, #1
100107e4:	6163      	str	r3, [r4, #20]
100107e6:	e02a      	b.n	1001083e <setvbuf+0x146>
100107e8:	2280      	movs	r2, #128	; 0x80
100107ea:	89a3      	ldrh	r3, [r4, #12]
100107ec:	9d01      	ldr	r5, [sp, #4]
100107ee:	4313      	orrs	r3, r2
100107f0:	81a3      	strh	r3, [r4, #12]
100107f2:	69b3      	ldr	r3, [r6, #24]
100107f4:	2b00      	cmp	r3, #0
100107f6:	d102      	bne.n	100107fe <setvbuf+0x106>
100107f8:	0030      	movs	r0, r6
100107fa:	f000 f9ef 	bl	10010bdc <__sinit>
100107fe:	9b00      	ldr	r3, [sp, #0]
10010800:	2b01      	cmp	r3, #1
10010802:	d103      	bne.n	1001080c <setvbuf+0x114>
10010804:	89a3      	ldrh	r3, [r4, #12]
10010806:	9a00      	ldr	r2, [sp, #0]
10010808:	431a      	orrs	r2, r3
1001080a:	81a2      	strh	r2, [r4, #12]
1001080c:	2308      	movs	r3, #8
1001080e:	89a2      	ldrh	r2, [r4, #12]
10010810:	6027      	str	r7, [r4, #0]
10010812:	4013      	ands	r3, r2
10010814:	6127      	str	r7, [r4, #16]
10010816:	6165      	str	r5, [r4, #20]
10010818:	1e18      	subs	r0, r3, #0
1001081a:	d00c      	beq.n	10010836 <setvbuf+0x13e>
1001081c:	2301      	movs	r3, #1
1001081e:	401a      	ands	r2, r3
10010820:	2300      	movs	r3, #0
10010822:	1e10      	subs	r0, r2, #0
10010824:	4298      	cmp	r0, r3
10010826:	d004      	beq.n	10010832 <setvbuf+0x13a>
10010828:	426d      	negs	r5, r5
1001082a:	60a3      	str	r3, [r4, #8]
1001082c:	61a5      	str	r5, [r4, #24]
1001082e:	0018      	movs	r0, r3
10010830:	e005      	b.n	1001083e <setvbuf+0x146>
10010832:	60a5      	str	r5, [r4, #8]
10010834:	e003      	b.n	1001083e <setvbuf+0x146>
10010836:	60a3      	str	r3, [r4, #8]
10010838:	e001      	b.n	1001083e <setvbuf+0x146>
1001083a:	2001      	movs	r0, #1
1001083c:	4240      	negs	r0, r0
1001083e:	b005      	add	sp, #20
10010840:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010842:	46c0      	nop			; (mov r8, r8)
10010844:	10012590 	.word	0x10012590
10010848:	10012468 	.word	0x10012468
1001084c:	10012488 	.word	0x10012488
10010850:	100124a8 	.word	0x100124a8
10010854:	fffff35c 	.word	0xfffff35c

10010858 <__swbuf_r>:
10010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001085a:	0005      	movs	r5, r0
1001085c:	000f      	movs	r7, r1
1001085e:	0014      	movs	r4, r2
10010860:	2800      	cmp	r0, #0
10010862:	d004      	beq.n	1001086e <__swbuf_r+0x16>
10010864:	6983      	ldr	r3, [r0, #24]
10010866:	2b00      	cmp	r3, #0
10010868:	d101      	bne.n	1001086e <__swbuf_r+0x16>
1001086a:	f000 f9b7 	bl	10010bdc <__sinit>
1001086e:	4b23      	ldr	r3, [pc, #140]	; (100108fc <__swbuf_r+0xa4>)
10010870:	429c      	cmp	r4, r3
10010872:	d101      	bne.n	10010878 <__swbuf_r+0x20>
10010874:	686c      	ldr	r4, [r5, #4]
10010876:	e008      	b.n	1001088a <__swbuf_r+0x32>
10010878:	4b21      	ldr	r3, [pc, #132]	; (10010900 <__swbuf_r+0xa8>)
1001087a:	429c      	cmp	r4, r3
1001087c:	d101      	bne.n	10010882 <__swbuf_r+0x2a>
1001087e:	68ac      	ldr	r4, [r5, #8]
10010880:	e003      	b.n	1001088a <__swbuf_r+0x32>
10010882:	4b20      	ldr	r3, [pc, #128]	; (10010904 <__swbuf_r+0xac>)
10010884:	429c      	cmp	r4, r3
10010886:	d100      	bne.n	1001088a <__swbuf_r+0x32>
10010888:	68ec      	ldr	r4, [r5, #12]
1001088a:	69a3      	ldr	r3, [r4, #24]
1001088c:	60a3      	str	r3, [r4, #8]
1001088e:	89a3      	ldrh	r3, [r4, #12]
10010890:	071b      	lsls	r3, r3, #28
10010892:	d50a      	bpl.n	100108aa <__swbuf_r+0x52>
10010894:	6923      	ldr	r3, [r4, #16]
10010896:	2b00      	cmp	r3, #0
10010898:	d007      	beq.n	100108aa <__swbuf_r+0x52>
1001089a:	6823      	ldr	r3, [r4, #0]
1001089c:	6922      	ldr	r2, [r4, #16]
1001089e:	b2fe      	uxtb	r6, r7
100108a0:	1a98      	subs	r0, r3, r2
100108a2:	6963      	ldr	r3, [r4, #20]
100108a4:	4298      	cmp	r0, r3
100108a6:	db0f      	blt.n	100108c8 <__swbuf_r+0x70>
100108a8:	e008      	b.n	100108bc <__swbuf_r+0x64>
100108aa:	0021      	movs	r1, r4
100108ac:	0028      	movs	r0, r5
100108ae:	f000 f82b 	bl	10010908 <__swsetup_r>
100108b2:	2800      	cmp	r0, #0
100108b4:	d0f1      	beq.n	1001089a <__swbuf_r+0x42>
100108b6:	2001      	movs	r0, #1
100108b8:	4240      	negs	r0, r0
100108ba:	e01d      	b.n	100108f8 <__swbuf_r+0xa0>
100108bc:	0021      	movs	r1, r4
100108be:	0028      	movs	r0, r5
100108c0:	f000 f91e 	bl	10010b00 <_fflush_r>
100108c4:	2800      	cmp	r0, #0
100108c6:	d1f6      	bne.n	100108b6 <__swbuf_r+0x5e>
100108c8:	68a3      	ldr	r3, [r4, #8]
100108ca:	3001      	adds	r0, #1
100108cc:	3b01      	subs	r3, #1
100108ce:	60a3      	str	r3, [r4, #8]
100108d0:	6823      	ldr	r3, [r4, #0]
100108d2:	1c5a      	adds	r2, r3, #1
100108d4:	6022      	str	r2, [r4, #0]
100108d6:	701f      	strb	r7, [r3, #0]
100108d8:	6963      	ldr	r3, [r4, #20]
100108da:	4298      	cmp	r0, r3
100108dc:	d005      	beq.n	100108ea <__swbuf_r+0x92>
100108de:	89a3      	ldrh	r3, [r4, #12]
100108e0:	0030      	movs	r0, r6
100108e2:	07db      	lsls	r3, r3, #31
100108e4:	d508      	bpl.n	100108f8 <__swbuf_r+0xa0>
100108e6:	2e0a      	cmp	r6, #10
100108e8:	d106      	bne.n	100108f8 <__swbuf_r+0xa0>
100108ea:	0021      	movs	r1, r4
100108ec:	0028      	movs	r0, r5
100108ee:	f000 f907 	bl	10010b00 <_fflush_r>
100108f2:	2800      	cmp	r0, #0
100108f4:	d1df      	bne.n	100108b6 <__swbuf_r+0x5e>
100108f6:	0030      	movs	r0, r6
100108f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100108fa:	46c0      	nop			; (mov r8, r8)
100108fc:	10012468 	.word	0x10012468
10010900:	10012488 	.word	0x10012488
10010904:	100124a8 	.word	0x100124a8

10010908 <__swsetup_r>:
10010908:	4b36      	ldr	r3, [pc, #216]	; (100109e4 <__swsetup_r+0xdc>)
1001090a:	b570      	push	{r4, r5, r6, lr}
1001090c:	681d      	ldr	r5, [r3, #0]
1001090e:	0006      	movs	r6, r0
10010910:	000c      	movs	r4, r1
10010912:	2d00      	cmp	r5, #0
10010914:	d005      	beq.n	10010922 <__swsetup_r+0x1a>
10010916:	69ab      	ldr	r3, [r5, #24]
10010918:	2b00      	cmp	r3, #0
1001091a:	d102      	bne.n	10010922 <__swsetup_r+0x1a>
1001091c:	0028      	movs	r0, r5
1001091e:	f000 f95d 	bl	10010bdc <__sinit>
10010922:	4b31      	ldr	r3, [pc, #196]	; (100109e8 <__swsetup_r+0xe0>)
10010924:	429c      	cmp	r4, r3
10010926:	d101      	bne.n	1001092c <__swsetup_r+0x24>
10010928:	686c      	ldr	r4, [r5, #4]
1001092a:	e008      	b.n	1001093e <__swsetup_r+0x36>
1001092c:	4b2f      	ldr	r3, [pc, #188]	; (100109ec <__swsetup_r+0xe4>)
1001092e:	429c      	cmp	r4, r3
10010930:	d101      	bne.n	10010936 <__swsetup_r+0x2e>
10010932:	68ac      	ldr	r4, [r5, #8]
10010934:	e003      	b.n	1001093e <__swsetup_r+0x36>
10010936:	4b2e      	ldr	r3, [pc, #184]	; (100109f0 <__swsetup_r+0xe8>)
10010938:	429c      	cmp	r4, r3
1001093a:	d100      	bne.n	1001093e <__swsetup_r+0x36>
1001093c:	68ec      	ldr	r4, [r5, #12]
1001093e:	220c      	movs	r2, #12
10010940:	5ea3      	ldrsh	r3, [r4, r2]
10010942:	b29a      	uxth	r2, r3
10010944:	0711      	lsls	r1, r2, #28
10010946:	d423      	bmi.n	10010990 <__swsetup_r+0x88>
10010948:	06d1      	lsls	r1, r2, #27
1001094a:	d407      	bmi.n	1001095c <__swsetup_r+0x54>
1001094c:	2209      	movs	r2, #9
1001094e:	2001      	movs	r0, #1
10010950:	6032      	str	r2, [r6, #0]
10010952:	3237      	adds	r2, #55	; 0x37
10010954:	4313      	orrs	r3, r2
10010956:	81a3      	strh	r3, [r4, #12]
10010958:	4240      	negs	r0, r0
1001095a:	e042      	b.n	100109e2 <__swsetup_r+0xda>
1001095c:	0753      	lsls	r3, r2, #29
1001095e:	d513      	bpl.n	10010988 <__swsetup_r+0x80>
10010960:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010962:	2900      	cmp	r1, #0
10010964:	d008      	beq.n	10010978 <__swsetup_r+0x70>
10010966:	0023      	movs	r3, r4
10010968:	3344      	adds	r3, #68	; 0x44
1001096a:	4299      	cmp	r1, r3
1001096c:	d002      	beq.n	10010974 <__swsetup_r+0x6c>
1001096e:	0030      	movs	r0, r6
10010970:	f000 fa36 	bl	10010de0 <_free_r>
10010974:	2300      	movs	r3, #0
10010976:	6363      	str	r3, [r4, #52]	; 0x34
10010978:	2224      	movs	r2, #36	; 0x24
1001097a:	89a3      	ldrh	r3, [r4, #12]
1001097c:	4393      	bics	r3, r2
1001097e:	81a3      	strh	r3, [r4, #12]
10010980:	2300      	movs	r3, #0
10010982:	6063      	str	r3, [r4, #4]
10010984:	6923      	ldr	r3, [r4, #16]
10010986:	6023      	str	r3, [r4, #0]
10010988:	2208      	movs	r2, #8
1001098a:	89a3      	ldrh	r3, [r4, #12]
1001098c:	4313      	orrs	r3, r2
1001098e:	81a3      	strh	r3, [r4, #12]
10010990:	6923      	ldr	r3, [r4, #16]
10010992:	2b00      	cmp	r3, #0
10010994:	d10b      	bne.n	100109ae <__swsetup_r+0xa6>
10010996:	23a0      	movs	r3, #160	; 0xa0
10010998:	89a2      	ldrh	r2, [r4, #12]
1001099a:	009b      	lsls	r3, r3, #2
1001099c:	4013      	ands	r3, r2
1001099e:	2280      	movs	r2, #128	; 0x80
100109a0:	0092      	lsls	r2, r2, #2
100109a2:	4293      	cmp	r3, r2
100109a4:	d003      	beq.n	100109ae <__swsetup_r+0xa6>
100109a6:	0021      	movs	r1, r4
100109a8:	0030      	movs	r0, r6
100109aa:	f000 f9d1 	bl	10010d50 <__smakebuf_r>
100109ae:	2301      	movs	r3, #1
100109b0:	89a2      	ldrh	r2, [r4, #12]
100109b2:	4013      	ands	r3, r2
100109b4:	d005      	beq.n	100109c2 <__swsetup_r+0xba>
100109b6:	2300      	movs	r3, #0
100109b8:	60a3      	str	r3, [r4, #8]
100109ba:	6963      	ldr	r3, [r4, #20]
100109bc:	425b      	negs	r3, r3
100109be:	61a3      	str	r3, [r4, #24]
100109c0:	e003      	b.n	100109ca <__swsetup_r+0xc2>
100109c2:	0792      	lsls	r2, r2, #30
100109c4:	d400      	bmi.n	100109c8 <__swsetup_r+0xc0>
100109c6:	6963      	ldr	r3, [r4, #20]
100109c8:	60a3      	str	r3, [r4, #8]
100109ca:	2000      	movs	r0, #0
100109cc:	6923      	ldr	r3, [r4, #16]
100109ce:	4283      	cmp	r3, r0
100109d0:	d107      	bne.n	100109e2 <__swsetup_r+0xda>
100109d2:	220c      	movs	r2, #12
100109d4:	5ea3      	ldrsh	r3, [r4, r2]
100109d6:	061a      	lsls	r2, r3, #24
100109d8:	d503      	bpl.n	100109e2 <__swsetup_r+0xda>
100109da:	2240      	movs	r2, #64	; 0x40
100109dc:	4313      	orrs	r3, r2
100109de:	81a3      	strh	r3, [r4, #12]
100109e0:	3801      	subs	r0, #1
100109e2:	bd70      	pop	{r4, r5, r6, pc}
100109e4:	10012590 	.word	0x10012590
100109e8:	10012468 	.word	0x10012468
100109ec:	10012488 	.word	0x10012488
100109f0:	100124a8 	.word	0x100124a8

100109f4 <__sflush_r>:
100109f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100109f6:	898a      	ldrh	r2, [r1, #12]
100109f8:	0005      	movs	r5, r0
100109fa:	000c      	movs	r4, r1
100109fc:	0713      	lsls	r3, r2, #28
100109fe:	d45a      	bmi.n	10010ab6 <__sflush_r+0xc2>
10010a00:	684b      	ldr	r3, [r1, #4]
10010a02:	2b00      	cmp	r3, #0
10010a04:	dc02      	bgt.n	10010a0c <__sflush_r+0x18>
10010a06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10010a08:	2b00      	cmp	r3, #0
10010a0a:	dd19      	ble.n	10010a40 <__sflush_r+0x4c>
10010a0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010a0e:	2f00      	cmp	r7, #0
10010a10:	d016      	beq.n	10010a40 <__sflush_r+0x4c>
10010a12:	2300      	movs	r3, #0
10010a14:	682e      	ldr	r6, [r5, #0]
10010a16:	602b      	str	r3, [r5, #0]
10010a18:	2380      	movs	r3, #128	; 0x80
10010a1a:	015b      	lsls	r3, r3, #5
10010a1c:	401a      	ands	r2, r3
10010a1e:	d001      	beq.n	10010a24 <__sflush_r+0x30>
10010a20:	6d60      	ldr	r0, [r4, #84]	; 0x54
10010a22:	e014      	b.n	10010a4e <__sflush_r+0x5a>
10010a24:	2301      	movs	r3, #1
10010a26:	6a21      	ldr	r1, [r4, #32]
10010a28:	0028      	movs	r0, r5
10010a2a:	47b8      	blx	r7
10010a2c:	1c43      	adds	r3, r0, #1
10010a2e:	d10e      	bne.n	10010a4e <__sflush_r+0x5a>
10010a30:	682b      	ldr	r3, [r5, #0]
10010a32:	2b00      	cmp	r3, #0
10010a34:	d00b      	beq.n	10010a4e <__sflush_r+0x5a>
10010a36:	2b1d      	cmp	r3, #29
10010a38:	d001      	beq.n	10010a3e <__sflush_r+0x4a>
10010a3a:	2b16      	cmp	r3, #22
10010a3c:	d102      	bne.n	10010a44 <__sflush_r+0x50>
10010a3e:	602e      	str	r6, [r5, #0]
10010a40:	2000      	movs	r0, #0
10010a42:	e05a      	b.n	10010afa <__sflush_r+0x106>
10010a44:	2240      	movs	r2, #64	; 0x40
10010a46:	89a3      	ldrh	r3, [r4, #12]
10010a48:	4313      	orrs	r3, r2
10010a4a:	81a3      	strh	r3, [r4, #12]
10010a4c:	e055      	b.n	10010afa <__sflush_r+0x106>
10010a4e:	89a3      	ldrh	r3, [r4, #12]
10010a50:	075b      	lsls	r3, r3, #29
10010a52:	d506      	bpl.n	10010a62 <__sflush_r+0x6e>
10010a54:	6863      	ldr	r3, [r4, #4]
10010a56:	1ac0      	subs	r0, r0, r3
10010a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
10010a5a:	2b00      	cmp	r3, #0
10010a5c:	d001      	beq.n	10010a62 <__sflush_r+0x6e>
10010a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10010a60:	1ac0      	subs	r0, r0, r3
10010a62:	2300      	movs	r3, #0
10010a64:	0002      	movs	r2, r0
10010a66:	6a21      	ldr	r1, [r4, #32]
10010a68:	0028      	movs	r0, r5
10010a6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10010a6c:	47b8      	blx	r7
10010a6e:	89a3      	ldrh	r3, [r4, #12]
10010a70:	1c42      	adds	r2, r0, #1
10010a72:	d106      	bne.n	10010a82 <__sflush_r+0x8e>
10010a74:	6829      	ldr	r1, [r5, #0]
10010a76:	291d      	cmp	r1, #29
10010a78:	d83a      	bhi.n	10010af0 <__sflush_r+0xfc>
10010a7a:	4a20      	ldr	r2, [pc, #128]	; (10010afc <__sflush_r+0x108>)
10010a7c:	40ca      	lsrs	r2, r1
10010a7e:	07d2      	lsls	r2, r2, #31
10010a80:	d536      	bpl.n	10010af0 <__sflush_r+0xfc>
10010a82:	2200      	movs	r2, #0
10010a84:	6062      	str	r2, [r4, #4]
10010a86:	6922      	ldr	r2, [r4, #16]
10010a88:	6022      	str	r2, [r4, #0]
10010a8a:	04db      	lsls	r3, r3, #19
10010a8c:	d505      	bpl.n	10010a9a <__sflush_r+0xa6>
10010a8e:	1c43      	adds	r3, r0, #1
10010a90:	d102      	bne.n	10010a98 <__sflush_r+0xa4>
10010a92:	682b      	ldr	r3, [r5, #0]
10010a94:	2b00      	cmp	r3, #0
10010a96:	d100      	bne.n	10010a9a <__sflush_r+0xa6>
10010a98:	6560      	str	r0, [r4, #84]	; 0x54
10010a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010a9c:	602e      	str	r6, [r5, #0]
10010a9e:	2900      	cmp	r1, #0
10010aa0:	d0ce      	beq.n	10010a40 <__sflush_r+0x4c>
10010aa2:	0023      	movs	r3, r4
10010aa4:	3344      	adds	r3, #68	; 0x44
10010aa6:	4299      	cmp	r1, r3
10010aa8:	d002      	beq.n	10010ab0 <__sflush_r+0xbc>
10010aaa:	0028      	movs	r0, r5
10010aac:	f000 f998 	bl	10010de0 <_free_r>
10010ab0:	2000      	movs	r0, #0
10010ab2:	6360      	str	r0, [r4, #52]	; 0x34
10010ab4:	e021      	b.n	10010afa <__sflush_r+0x106>
10010ab6:	690f      	ldr	r7, [r1, #16]
10010ab8:	2f00      	cmp	r7, #0
10010aba:	d0c1      	beq.n	10010a40 <__sflush_r+0x4c>
10010abc:	680b      	ldr	r3, [r1, #0]
10010abe:	600f      	str	r7, [r1, #0]
10010ac0:	1bdb      	subs	r3, r3, r7
10010ac2:	9301      	str	r3, [sp, #4]
10010ac4:	2300      	movs	r3, #0
10010ac6:	0792      	lsls	r2, r2, #30
10010ac8:	d100      	bne.n	10010acc <__sflush_r+0xd8>
10010aca:	694b      	ldr	r3, [r1, #20]
10010acc:	60a3      	str	r3, [r4, #8]
10010ace:	e003      	b.n	10010ad8 <__sflush_r+0xe4>
10010ad0:	9b01      	ldr	r3, [sp, #4]
10010ad2:	183f      	adds	r7, r7, r0
10010ad4:	1a1b      	subs	r3, r3, r0
10010ad6:	9301      	str	r3, [sp, #4]
10010ad8:	9b01      	ldr	r3, [sp, #4]
10010ada:	2b00      	cmp	r3, #0
10010adc:	ddb0      	ble.n	10010a40 <__sflush_r+0x4c>
10010ade:	9b01      	ldr	r3, [sp, #4]
10010ae0:	003a      	movs	r2, r7
10010ae2:	6a21      	ldr	r1, [r4, #32]
10010ae4:	0028      	movs	r0, r5
10010ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10010ae8:	47b0      	blx	r6
10010aea:	2800      	cmp	r0, #0
10010aec:	dcf0      	bgt.n	10010ad0 <__sflush_r+0xdc>
10010aee:	89a3      	ldrh	r3, [r4, #12]
10010af0:	2240      	movs	r2, #64	; 0x40
10010af2:	2001      	movs	r0, #1
10010af4:	4313      	orrs	r3, r2
10010af6:	81a3      	strh	r3, [r4, #12]
10010af8:	4240      	negs	r0, r0
10010afa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010afc:	20400001 	.word	0x20400001

10010b00 <_fflush_r>:
10010b00:	690b      	ldr	r3, [r1, #16]
10010b02:	b570      	push	{r4, r5, r6, lr}
10010b04:	0005      	movs	r5, r0
10010b06:	000c      	movs	r4, r1
10010b08:	2b00      	cmp	r3, #0
10010b0a:	d101      	bne.n	10010b10 <_fflush_r+0x10>
10010b0c:	2000      	movs	r0, #0
10010b0e:	e01c      	b.n	10010b4a <_fflush_r+0x4a>
10010b10:	2800      	cmp	r0, #0
10010b12:	d004      	beq.n	10010b1e <_fflush_r+0x1e>
10010b14:	6983      	ldr	r3, [r0, #24]
10010b16:	2b00      	cmp	r3, #0
10010b18:	d101      	bne.n	10010b1e <_fflush_r+0x1e>
10010b1a:	f000 f85f 	bl	10010bdc <__sinit>
10010b1e:	4b0b      	ldr	r3, [pc, #44]	; (10010b4c <_fflush_r+0x4c>)
10010b20:	429c      	cmp	r4, r3
10010b22:	d101      	bne.n	10010b28 <_fflush_r+0x28>
10010b24:	686c      	ldr	r4, [r5, #4]
10010b26:	e008      	b.n	10010b3a <_fflush_r+0x3a>
10010b28:	4b09      	ldr	r3, [pc, #36]	; (10010b50 <_fflush_r+0x50>)
10010b2a:	429c      	cmp	r4, r3
10010b2c:	d101      	bne.n	10010b32 <_fflush_r+0x32>
10010b2e:	68ac      	ldr	r4, [r5, #8]
10010b30:	e003      	b.n	10010b3a <_fflush_r+0x3a>
10010b32:	4b08      	ldr	r3, [pc, #32]	; (10010b54 <_fflush_r+0x54>)
10010b34:	429c      	cmp	r4, r3
10010b36:	d100      	bne.n	10010b3a <_fflush_r+0x3a>
10010b38:	68ec      	ldr	r4, [r5, #12]
10010b3a:	220c      	movs	r2, #12
10010b3c:	5ea3      	ldrsh	r3, [r4, r2]
10010b3e:	2b00      	cmp	r3, #0
10010b40:	d0e4      	beq.n	10010b0c <_fflush_r+0xc>
10010b42:	0021      	movs	r1, r4
10010b44:	0028      	movs	r0, r5
10010b46:	f7ff ff55 	bl	100109f4 <__sflush_r>
10010b4a:	bd70      	pop	{r4, r5, r6, pc}
10010b4c:	10012468 	.word	0x10012468
10010b50:	10012488 	.word	0x10012488
10010b54:	100124a8 	.word	0x100124a8

10010b58 <_cleanup_r>:
10010b58:	b510      	push	{r4, lr}
10010b5a:	4902      	ldr	r1, [pc, #8]	; (10010b64 <_cleanup_r+0xc>)
10010b5c:	f000 f8b0 	bl	10010cc0 <_fwalk_reent>
10010b60:	bd10      	pop	{r4, pc}
10010b62:	46c0      	nop			; (mov r8, r8)
10010b64:	10010b01 	.word	0x10010b01

10010b68 <std.isra.0>:
10010b68:	2300      	movs	r3, #0
10010b6a:	b510      	push	{r4, lr}
10010b6c:	0004      	movs	r4, r0
10010b6e:	6003      	str	r3, [r0, #0]
10010b70:	6043      	str	r3, [r0, #4]
10010b72:	6083      	str	r3, [r0, #8]
10010b74:	8181      	strh	r1, [r0, #12]
10010b76:	6643      	str	r3, [r0, #100]	; 0x64
10010b78:	81c2      	strh	r2, [r0, #14]
10010b7a:	6103      	str	r3, [r0, #16]
10010b7c:	6143      	str	r3, [r0, #20]
10010b7e:	6183      	str	r3, [r0, #24]
10010b80:	0019      	movs	r1, r3
10010b82:	2208      	movs	r2, #8
10010b84:	305c      	adds	r0, #92	; 0x5c
10010b86:	f7ff fccf 	bl	10010528 <memset>
10010b8a:	4b05      	ldr	r3, [pc, #20]	; (10010ba0 <std.isra.0+0x38>)
10010b8c:	6224      	str	r4, [r4, #32]
10010b8e:	6263      	str	r3, [r4, #36]	; 0x24
10010b90:	4b04      	ldr	r3, [pc, #16]	; (10010ba4 <std.isra.0+0x3c>)
10010b92:	62a3      	str	r3, [r4, #40]	; 0x28
10010b94:	4b04      	ldr	r3, [pc, #16]	; (10010ba8 <std.isra.0+0x40>)
10010b96:	62e3      	str	r3, [r4, #44]	; 0x2c
10010b98:	4b04      	ldr	r3, [pc, #16]	; (10010bac <std.isra.0+0x44>)
10010b9a:	6323      	str	r3, [r4, #48]	; 0x30
10010b9c:	bd10      	pop	{r4, pc}
10010b9e:	46c0      	nop			; (mov r8, r8)
10010ba0:	10011551 	.word	0x10011551
10010ba4:	10011579 	.word	0x10011579
10010ba8:	100115b1 	.word	0x100115b1
10010bac:	100115dd 	.word	0x100115dd

10010bb0 <__sfmoreglue>:
10010bb0:	b570      	push	{r4, r5, r6, lr}
10010bb2:	2568      	movs	r5, #104	; 0x68
10010bb4:	1e4b      	subs	r3, r1, #1
10010bb6:	435d      	muls	r5, r3
10010bb8:	000e      	movs	r6, r1
10010bba:	0029      	movs	r1, r5
10010bbc:	3174      	adds	r1, #116	; 0x74
10010bbe:	f000 f955 	bl	10010e6c <_malloc_r>
10010bc2:	1e04      	subs	r4, r0, #0
10010bc4:	d008      	beq.n	10010bd8 <__sfmoreglue+0x28>
10010bc6:	2100      	movs	r1, #0
10010bc8:	002a      	movs	r2, r5
10010bca:	6001      	str	r1, [r0, #0]
10010bcc:	6046      	str	r6, [r0, #4]
10010bce:	300c      	adds	r0, #12
10010bd0:	60a0      	str	r0, [r4, #8]
10010bd2:	3268      	adds	r2, #104	; 0x68
10010bd4:	f7ff fca8 	bl	10010528 <memset>
10010bd8:	0020      	movs	r0, r4
10010bda:	bd70      	pop	{r4, r5, r6, pc}

10010bdc <__sinit>:
10010bdc:	6983      	ldr	r3, [r0, #24]
10010bde:	b513      	push	{r0, r1, r4, lr}
10010be0:	0004      	movs	r4, r0
10010be2:	2b00      	cmp	r3, #0
10010be4:	d128      	bne.n	10010c38 <__sinit+0x5c>
10010be6:	6483      	str	r3, [r0, #72]	; 0x48
10010be8:	64c3      	str	r3, [r0, #76]	; 0x4c
10010bea:	6503      	str	r3, [r0, #80]	; 0x50
10010bec:	4b13      	ldr	r3, [pc, #76]	; (10010c3c <__sinit+0x60>)
10010bee:	4a14      	ldr	r2, [pc, #80]	; (10010c40 <__sinit+0x64>)
10010bf0:	681b      	ldr	r3, [r3, #0]
10010bf2:	6282      	str	r2, [r0, #40]	; 0x28
10010bf4:	9301      	str	r3, [sp, #4]
10010bf6:	4298      	cmp	r0, r3
10010bf8:	d101      	bne.n	10010bfe <__sinit+0x22>
10010bfa:	2301      	movs	r3, #1
10010bfc:	6183      	str	r3, [r0, #24]
10010bfe:	0020      	movs	r0, r4
10010c00:	f000 f820 	bl	10010c44 <__sfp>
10010c04:	6060      	str	r0, [r4, #4]
10010c06:	0020      	movs	r0, r4
10010c08:	f000 f81c 	bl	10010c44 <__sfp>
10010c0c:	60a0      	str	r0, [r4, #8]
10010c0e:	0020      	movs	r0, r4
10010c10:	f000 f818 	bl	10010c44 <__sfp>
10010c14:	2200      	movs	r2, #0
10010c16:	60e0      	str	r0, [r4, #12]
10010c18:	2104      	movs	r1, #4
10010c1a:	6860      	ldr	r0, [r4, #4]
10010c1c:	f7ff ffa4 	bl	10010b68 <std.isra.0>
10010c20:	2201      	movs	r2, #1
10010c22:	2109      	movs	r1, #9
10010c24:	68a0      	ldr	r0, [r4, #8]
10010c26:	f7ff ff9f 	bl	10010b68 <std.isra.0>
10010c2a:	2202      	movs	r2, #2
10010c2c:	2112      	movs	r1, #18
10010c2e:	68e0      	ldr	r0, [r4, #12]
10010c30:	f7ff ff9a 	bl	10010b68 <std.isra.0>
10010c34:	2301      	movs	r3, #1
10010c36:	61a3      	str	r3, [r4, #24]
10010c38:	bd13      	pop	{r0, r1, r4, pc}
10010c3a:	46c0      	nop			; (mov r8, r8)
10010c3c:	10012464 	.word	0x10012464
10010c40:	10010b59 	.word	0x10010b59

10010c44 <__sfp>:
10010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010c46:	4b1d      	ldr	r3, [pc, #116]	; (10010cbc <__sfp+0x78>)
10010c48:	0006      	movs	r6, r0
10010c4a:	681d      	ldr	r5, [r3, #0]
10010c4c:	69ab      	ldr	r3, [r5, #24]
10010c4e:	2b00      	cmp	r3, #0
10010c50:	d102      	bne.n	10010c58 <__sfp+0x14>
10010c52:	0028      	movs	r0, r5
10010c54:	f7ff ffc2 	bl	10010bdc <__sinit>
10010c58:	3548      	adds	r5, #72	; 0x48
10010c5a:	68ac      	ldr	r4, [r5, #8]
10010c5c:	686b      	ldr	r3, [r5, #4]
10010c5e:	3b01      	subs	r3, #1
10010c60:	d405      	bmi.n	10010c6e <__sfp+0x2a>
10010c62:	220c      	movs	r2, #12
10010c64:	5ea7      	ldrsh	r7, [r4, r2]
10010c66:	2f00      	cmp	r7, #0
10010c68:	d010      	beq.n	10010c8c <__sfp+0x48>
10010c6a:	3468      	adds	r4, #104	; 0x68
10010c6c:	e7f7      	b.n	10010c5e <__sfp+0x1a>
10010c6e:	682b      	ldr	r3, [r5, #0]
10010c70:	2b00      	cmp	r3, #0
10010c72:	d001      	beq.n	10010c78 <__sfp+0x34>
10010c74:	682d      	ldr	r5, [r5, #0]
10010c76:	e7f0      	b.n	10010c5a <__sfp+0x16>
10010c78:	2104      	movs	r1, #4
10010c7a:	0030      	movs	r0, r6
10010c7c:	f7ff ff98 	bl	10010bb0 <__sfmoreglue>
10010c80:	6028      	str	r0, [r5, #0]
10010c82:	2800      	cmp	r0, #0
10010c84:	d1f6      	bne.n	10010c74 <__sfp+0x30>
10010c86:	230c      	movs	r3, #12
10010c88:	6033      	str	r3, [r6, #0]
10010c8a:	e016      	b.n	10010cba <__sfp+0x76>
10010c8c:	2301      	movs	r3, #1
10010c8e:	0020      	movs	r0, r4
10010c90:	425b      	negs	r3, r3
10010c92:	81e3      	strh	r3, [r4, #14]
10010c94:	3302      	adds	r3, #2
10010c96:	81a3      	strh	r3, [r4, #12]
10010c98:	6667      	str	r7, [r4, #100]	; 0x64
10010c9a:	6027      	str	r7, [r4, #0]
10010c9c:	60a7      	str	r7, [r4, #8]
10010c9e:	6067      	str	r7, [r4, #4]
10010ca0:	6127      	str	r7, [r4, #16]
10010ca2:	6167      	str	r7, [r4, #20]
10010ca4:	61a7      	str	r7, [r4, #24]
10010ca6:	305c      	adds	r0, #92	; 0x5c
10010ca8:	2208      	movs	r2, #8
10010caa:	0039      	movs	r1, r7
10010cac:	f7ff fc3c 	bl	10010528 <memset>
10010cb0:	0020      	movs	r0, r4
10010cb2:	6367      	str	r7, [r4, #52]	; 0x34
10010cb4:	63a7      	str	r7, [r4, #56]	; 0x38
10010cb6:	64a7      	str	r7, [r4, #72]	; 0x48
10010cb8:	64e7      	str	r7, [r4, #76]	; 0x4c
10010cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010cbc:	10012464 	.word	0x10012464

10010cc0 <_fwalk_reent>:
10010cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010cc2:	0004      	movs	r4, r0
10010cc4:	0007      	movs	r7, r0
10010cc6:	2600      	movs	r6, #0
10010cc8:	9101      	str	r1, [sp, #4]
10010cca:	3448      	adds	r4, #72	; 0x48
10010ccc:	2c00      	cmp	r4, #0
10010cce:	d016      	beq.n	10010cfe <_fwalk_reent+0x3e>
10010cd0:	6863      	ldr	r3, [r4, #4]
10010cd2:	68a5      	ldr	r5, [r4, #8]
10010cd4:	9300      	str	r3, [sp, #0]
10010cd6:	9b00      	ldr	r3, [sp, #0]
10010cd8:	3b01      	subs	r3, #1
10010cda:	9300      	str	r3, [sp, #0]
10010cdc:	d40d      	bmi.n	10010cfa <_fwalk_reent+0x3a>
10010cde:	89ab      	ldrh	r3, [r5, #12]
10010ce0:	2b01      	cmp	r3, #1
10010ce2:	d908      	bls.n	10010cf6 <_fwalk_reent+0x36>
10010ce4:	220e      	movs	r2, #14
10010ce6:	5eab      	ldrsh	r3, [r5, r2]
10010ce8:	3301      	adds	r3, #1
10010cea:	d004      	beq.n	10010cf6 <_fwalk_reent+0x36>
10010cec:	0029      	movs	r1, r5
10010cee:	0038      	movs	r0, r7
10010cf0:	9b01      	ldr	r3, [sp, #4]
10010cf2:	4798      	blx	r3
10010cf4:	4306      	orrs	r6, r0
10010cf6:	3568      	adds	r5, #104	; 0x68
10010cf8:	e7ed      	b.n	10010cd6 <_fwalk_reent+0x16>
10010cfa:	6824      	ldr	r4, [r4, #0]
10010cfc:	e7e6      	b.n	10010ccc <_fwalk_reent+0xc>
10010cfe:	0030      	movs	r0, r6
10010d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010d04 <__swhatbuf_r>:
10010d04:	b570      	push	{r4, r5, r6, lr}
10010d06:	000e      	movs	r6, r1
10010d08:	001d      	movs	r5, r3
10010d0a:	230e      	movs	r3, #14
10010d0c:	5ec9      	ldrsh	r1, [r1, r3]
10010d0e:	b090      	sub	sp, #64	; 0x40
10010d10:	0014      	movs	r4, r2
10010d12:	2900      	cmp	r1, #0
10010d14:	da06      	bge.n	10010d24 <__swhatbuf_r+0x20>
10010d16:	2300      	movs	r3, #0
10010d18:	602b      	str	r3, [r5, #0]
10010d1a:	89b3      	ldrh	r3, [r6, #12]
10010d1c:	061b      	lsls	r3, r3, #24
10010d1e:	d50f      	bpl.n	10010d40 <__swhatbuf_r+0x3c>
10010d20:	2340      	movs	r3, #64	; 0x40
10010d22:	e00f      	b.n	10010d44 <__swhatbuf_r+0x40>
10010d24:	aa01      	add	r2, sp, #4
10010d26:	f000 fc85 	bl	10011634 <_fstat_r>
10010d2a:	2800      	cmp	r0, #0
10010d2c:	dbf3      	blt.n	10010d16 <__swhatbuf_r+0x12>
10010d2e:	23f0      	movs	r3, #240	; 0xf0
10010d30:	9a02      	ldr	r2, [sp, #8]
10010d32:	021b      	lsls	r3, r3, #8
10010d34:	4013      	ands	r3, r2
10010d36:	4a05      	ldr	r2, [pc, #20]	; (10010d4c <__swhatbuf_r+0x48>)
10010d38:	189b      	adds	r3, r3, r2
10010d3a:	425a      	negs	r2, r3
10010d3c:	4153      	adcs	r3, r2
10010d3e:	602b      	str	r3, [r5, #0]
10010d40:	2380      	movs	r3, #128	; 0x80
10010d42:	00db      	lsls	r3, r3, #3
10010d44:	2000      	movs	r0, #0
10010d46:	6023      	str	r3, [r4, #0]
10010d48:	b010      	add	sp, #64	; 0x40
10010d4a:	bd70      	pop	{r4, r5, r6, pc}
10010d4c:	ffffe000 	.word	0xffffe000

10010d50 <__smakebuf_r>:
10010d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010d52:	2602      	movs	r6, #2
10010d54:	898b      	ldrh	r3, [r1, #12]
10010d56:	0005      	movs	r5, r0
10010d58:	000c      	movs	r4, r1
10010d5a:	4233      	tst	r3, r6
10010d5c:	d110      	bne.n	10010d80 <__smakebuf_r+0x30>
10010d5e:	ab01      	add	r3, sp, #4
10010d60:	466a      	mov	r2, sp
10010d62:	f7ff ffcf 	bl	10010d04 <__swhatbuf_r>
10010d66:	9900      	ldr	r1, [sp, #0]
10010d68:	0007      	movs	r7, r0
10010d6a:	0028      	movs	r0, r5
10010d6c:	f000 f87e 	bl	10010e6c <_malloc_r>
10010d70:	2800      	cmp	r0, #0
10010d72:	d10c      	bne.n	10010d8e <__smakebuf_r+0x3e>
10010d74:	220c      	movs	r2, #12
10010d76:	5ea3      	ldrsh	r3, [r4, r2]
10010d78:	059a      	lsls	r2, r3, #22
10010d7a:	d423      	bmi.n	10010dc4 <__smakebuf_r+0x74>
10010d7c:	4333      	orrs	r3, r6
10010d7e:	81a3      	strh	r3, [r4, #12]
10010d80:	0023      	movs	r3, r4
10010d82:	3347      	adds	r3, #71	; 0x47
10010d84:	6023      	str	r3, [r4, #0]
10010d86:	6123      	str	r3, [r4, #16]
10010d88:	2301      	movs	r3, #1
10010d8a:	6163      	str	r3, [r4, #20]
10010d8c:	e01a      	b.n	10010dc4 <__smakebuf_r+0x74>
10010d8e:	2280      	movs	r2, #128	; 0x80
10010d90:	4b0d      	ldr	r3, [pc, #52]	; (10010dc8 <__smakebuf_r+0x78>)
10010d92:	62ab      	str	r3, [r5, #40]	; 0x28
10010d94:	89a3      	ldrh	r3, [r4, #12]
10010d96:	6020      	str	r0, [r4, #0]
10010d98:	4313      	orrs	r3, r2
10010d9a:	81a3      	strh	r3, [r4, #12]
10010d9c:	9b00      	ldr	r3, [sp, #0]
10010d9e:	6120      	str	r0, [r4, #16]
10010da0:	6163      	str	r3, [r4, #20]
10010da2:	9b01      	ldr	r3, [sp, #4]
10010da4:	2b00      	cmp	r3, #0
10010da6:	d00a      	beq.n	10010dbe <__smakebuf_r+0x6e>
10010da8:	230e      	movs	r3, #14
10010daa:	5ee1      	ldrsh	r1, [r4, r3]
10010dac:	0028      	movs	r0, r5
10010dae:	f000 fc53 	bl	10011658 <_isatty_r>
10010db2:	2800      	cmp	r0, #0
10010db4:	d003      	beq.n	10010dbe <__smakebuf_r+0x6e>
10010db6:	2201      	movs	r2, #1
10010db8:	89a3      	ldrh	r3, [r4, #12]
10010dba:	4313      	orrs	r3, r2
10010dbc:	81a3      	strh	r3, [r4, #12]
10010dbe:	89a3      	ldrh	r3, [r4, #12]
10010dc0:	431f      	orrs	r7, r3
10010dc2:	81a7      	strh	r7, [r4, #12]
10010dc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010dc6:	46c0      	nop			; (mov r8, r8)
10010dc8:	10010b59 	.word	0x10010b59

10010dcc <malloc>:
10010dcc:	b510      	push	{r4, lr}
10010dce:	4b03      	ldr	r3, [pc, #12]	; (10010ddc <malloc+0x10>)
10010dd0:	0001      	movs	r1, r0
10010dd2:	6818      	ldr	r0, [r3, #0]
10010dd4:	f000 f84a 	bl	10010e6c <_malloc_r>
10010dd8:	bd10      	pop	{r4, pc}
10010dda:	46c0      	nop			; (mov r8, r8)
10010ddc:	10012590 	.word	0x10012590

10010de0 <_free_r>:
10010de0:	b530      	push	{r4, r5, lr}
10010de2:	2900      	cmp	r1, #0
10010de4:	d03e      	beq.n	10010e64 <_free_r+0x84>
10010de6:	3904      	subs	r1, #4
10010de8:	680b      	ldr	r3, [r1, #0]
10010dea:	2b00      	cmp	r3, #0
10010dec:	da00      	bge.n	10010df0 <_free_r+0x10>
10010dee:	18c9      	adds	r1, r1, r3
10010df0:	4a1d      	ldr	r2, [pc, #116]	; (10010e68 <_free_r+0x88>)
10010df2:	6813      	ldr	r3, [r2, #0]
10010df4:	0014      	movs	r4, r2
10010df6:	2b00      	cmp	r3, #0
10010df8:	d102      	bne.n	10010e00 <_free_r+0x20>
10010dfa:	604b      	str	r3, [r1, #4]
10010dfc:	6011      	str	r1, [r2, #0]
10010dfe:	e031      	b.n	10010e64 <_free_r+0x84>
10010e00:	428b      	cmp	r3, r1
10010e02:	d90d      	bls.n	10010e20 <_free_r+0x40>
10010e04:	680a      	ldr	r2, [r1, #0]
10010e06:	1888      	adds	r0, r1, r2
10010e08:	4283      	cmp	r3, r0
10010e0a:	d103      	bne.n	10010e14 <_free_r+0x34>
10010e0c:	6818      	ldr	r0, [r3, #0]
10010e0e:	685b      	ldr	r3, [r3, #4]
10010e10:	1882      	adds	r2, r0, r2
10010e12:	600a      	str	r2, [r1, #0]
10010e14:	604b      	str	r3, [r1, #4]
10010e16:	6021      	str	r1, [r4, #0]
10010e18:	e024      	b.n	10010e64 <_free_r+0x84>
10010e1a:	428a      	cmp	r2, r1
10010e1c:	d803      	bhi.n	10010e26 <_free_r+0x46>
10010e1e:	0013      	movs	r3, r2
10010e20:	685a      	ldr	r2, [r3, #4]
10010e22:	2a00      	cmp	r2, #0
10010e24:	d1f9      	bne.n	10010e1a <_free_r+0x3a>
10010e26:	681d      	ldr	r5, [r3, #0]
10010e28:	195c      	adds	r4, r3, r5
10010e2a:	428c      	cmp	r4, r1
10010e2c:	d10b      	bne.n	10010e46 <_free_r+0x66>
10010e2e:	6809      	ldr	r1, [r1, #0]
10010e30:	1869      	adds	r1, r5, r1
10010e32:	1858      	adds	r0, r3, r1
10010e34:	6019      	str	r1, [r3, #0]
10010e36:	4282      	cmp	r2, r0
10010e38:	d114      	bne.n	10010e64 <_free_r+0x84>
10010e3a:	6810      	ldr	r0, [r2, #0]
10010e3c:	6852      	ldr	r2, [r2, #4]
10010e3e:	1841      	adds	r1, r0, r1
10010e40:	6019      	str	r1, [r3, #0]
10010e42:	605a      	str	r2, [r3, #4]
10010e44:	e00e      	b.n	10010e64 <_free_r+0x84>
10010e46:	428c      	cmp	r4, r1
10010e48:	d902      	bls.n	10010e50 <_free_r+0x70>
10010e4a:	230c      	movs	r3, #12
10010e4c:	6003      	str	r3, [r0, #0]
10010e4e:	e009      	b.n	10010e64 <_free_r+0x84>
10010e50:	6808      	ldr	r0, [r1, #0]
10010e52:	180c      	adds	r4, r1, r0
10010e54:	42a2      	cmp	r2, r4
10010e56:	d103      	bne.n	10010e60 <_free_r+0x80>
10010e58:	6814      	ldr	r4, [r2, #0]
10010e5a:	6852      	ldr	r2, [r2, #4]
10010e5c:	1820      	adds	r0, r4, r0
10010e5e:	6008      	str	r0, [r1, #0]
10010e60:	604a      	str	r2, [r1, #4]
10010e62:	6059      	str	r1, [r3, #4]
10010e64:	bd30      	pop	{r4, r5, pc}
10010e66:	46c0      	nop			; (mov r8, r8)
10010e68:	10014070 	.word	0x10014070

10010e6c <_malloc_r>:
10010e6c:	2303      	movs	r3, #3
10010e6e:	b570      	push	{r4, r5, r6, lr}
10010e70:	1ccd      	adds	r5, r1, #3
10010e72:	439d      	bics	r5, r3
10010e74:	3508      	adds	r5, #8
10010e76:	0006      	movs	r6, r0
10010e78:	2d0c      	cmp	r5, #12
10010e7a:	d201      	bcs.n	10010e80 <_malloc_r+0x14>
10010e7c:	250c      	movs	r5, #12
10010e7e:	e005      	b.n	10010e8c <_malloc_r+0x20>
10010e80:	2d00      	cmp	r5, #0
10010e82:	da03      	bge.n	10010e8c <_malloc_r+0x20>
10010e84:	230c      	movs	r3, #12
10010e86:	2000      	movs	r0, #0
10010e88:	6033      	str	r3, [r6, #0]
10010e8a:	e040      	b.n	10010f0e <_malloc_r+0xa2>
10010e8c:	42a9      	cmp	r1, r5
10010e8e:	d8f9      	bhi.n	10010e84 <_malloc_r+0x18>
10010e90:	4b1f      	ldr	r3, [pc, #124]	; (10010f10 <_malloc_r+0xa4>)
10010e92:	681c      	ldr	r4, [r3, #0]
10010e94:	001a      	movs	r2, r3
10010e96:	0021      	movs	r1, r4
10010e98:	2900      	cmp	r1, #0
10010e9a:	d013      	beq.n	10010ec4 <_malloc_r+0x58>
10010e9c:	680b      	ldr	r3, [r1, #0]
10010e9e:	1b5b      	subs	r3, r3, r5
10010ea0:	d40d      	bmi.n	10010ebe <_malloc_r+0x52>
10010ea2:	2b0b      	cmp	r3, #11
10010ea4:	d902      	bls.n	10010eac <_malloc_r+0x40>
10010ea6:	600b      	str	r3, [r1, #0]
10010ea8:	18cc      	adds	r4, r1, r3
10010eaa:	e01e      	b.n	10010eea <_malloc_r+0x7e>
10010eac:	428c      	cmp	r4, r1
10010eae:	d102      	bne.n	10010eb6 <_malloc_r+0x4a>
10010eb0:	6863      	ldr	r3, [r4, #4]
10010eb2:	6013      	str	r3, [r2, #0]
10010eb4:	e01a      	b.n	10010eec <_malloc_r+0x80>
10010eb6:	684b      	ldr	r3, [r1, #4]
10010eb8:	6063      	str	r3, [r4, #4]
10010eba:	000c      	movs	r4, r1
10010ebc:	e016      	b.n	10010eec <_malloc_r+0x80>
10010ebe:	000c      	movs	r4, r1
10010ec0:	6849      	ldr	r1, [r1, #4]
10010ec2:	e7e9      	b.n	10010e98 <_malloc_r+0x2c>
10010ec4:	4c13      	ldr	r4, [pc, #76]	; (10010f14 <_malloc_r+0xa8>)
10010ec6:	6823      	ldr	r3, [r4, #0]
10010ec8:	2b00      	cmp	r3, #0
10010eca:	d103      	bne.n	10010ed4 <_malloc_r+0x68>
10010ecc:	0030      	movs	r0, r6
10010ece:	f000 fb2d 	bl	1001152c <_sbrk_r>
10010ed2:	6020      	str	r0, [r4, #0]
10010ed4:	0029      	movs	r1, r5
10010ed6:	0030      	movs	r0, r6
10010ed8:	f000 fb28 	bl	1001152c <_sbrk_r>
10010edc:	1c43      	adds	r3, r0, #1
10010ede:	d0d1      	beq.n	10010e84 <_malloc_r+0x18>
10010ee0:	2303      	movs	r3, #3
10010ee2:	1cc4      	adds	r4, r0, #3
10010ee4:	439c      	bics	r4, r3
10010ee6:	42a0      	cmp	r0, r4
10010ee8:	d10a      	bne.n	10010f00 <_malloc_r+0x94>
10010eea:	6025      	str	r5, [r4, #0]
10010eec:	0020      	movs	r0, r4
10010eee:	2207      	movs	r2, #7
10010ef0:	300b      	adds	r0, #11
10010ef2:	1d23      	adds	r3, r4, #4
10010ef4:	4390      	bics	r0, r2
10010ef6:	1ac3      	subs	r3, r0, r3
10010ef8:	d009      	beq.n	10010f0e <_malloc_r+0xa2>
10010efa:	425a      	negs	r2, r3
10010efc:	50e2      	str	r2, [r4, r3]
10010efe:	e006      	b.n	10010f0e <_malloc_r+0xa2>
10010f00:	1a21      	subs	r1, r4, r0
10010f02:	0030      	movs	r0, r6
10010f04:	f000 fb12 	bl	1001152c <_sbrk_r>
10010f08:	1c43      	adds	r3, r0, #1
10010f0a:	d1ee      	bne.n	10010eea <_malloc_r+0x7e>
10010f0c:	e7ba      	b.n	10010e84 <_malloc_r+0x18>
10010f0e:	bd70      	pop	{r4, r5, r6, pc}
10010f10:	10014070 	.word	0x10014070
10010f14:	1001406c 	.word	0x1001406c

10010f18 <__sfputc_r>:
10010f18:	6893      	ldr	r3, [r2, #8]
10010f1a:	b510      	push	{r4, lr}
10010f1c:	3b01      	subs	r3, #1
10010f1e:	6093      	str	r3, [r2, #8]
10010f20:	2b00      	cmp	r3, #0
10010f22:	da05      	bge.n	10010f30 <__sfputc_r+0x18>
10010f24:	6994      	ldr	r4, [r2, #24]
10010f26:	42a3      	cmp	r3, r4
10010f28:	db08      	blt.n	10010f3c <__sfputc_r+0x24>
10010f2a:	b2cb      	uxtb	r3, r1
10010f2c:	2b0a      	cmp	r3, #10
10010f2e:	d005      	beq.n	10010f3c <__sfputc_r+0x24>
10010f30:	6813      	ldr	r3, [r2, #0]
10010f32:	1c58      	adds	r0, r3, #1
10010f34:	6010      	str	r0, [r2, #0]
10010f36:	7019      	strb	r1, [r3, #0]
10010f38:	b2c8      	uxtb	r0, r1
10010f3a:	e001      	b.n	10010f40 <__sfputc_r+0x28>
10010f3c:	f7ff fc8c 	bl	10010858 <__swbuf_r>
10010f40:	bd10      	pop	{r4, pc}

10010f42 <__sfputs_r>:
10010f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010f44:	0006      	movs	r6, r0
10010f46:	000f      	movs	r7, r1
10010f48:	0014      	movs	r4, r2
10010f4a:	18d5      	adds	r5, r2, r3
10010f4c:	42ac      	cmp	r4, r5
10010f4e:	d008      	beq.n	10010f62 <__sfputs_r+0x20>
10010f50:	7821      	ldrb	r1, [r4, #0]
10010f52:	003a      	movs	r2, r7
10010f54:	0030      	movs	r0, r6
10010f56:	f7ff ffdf 	bl	10010f18 <__sfputc_r>
10010f5a:	3401      	adds	r4, #1
10010f5c:	1c43      	adds	r3, r0, #1
10010f5e:	d1f5      	bne.n	10010f4c <__sfputs_r+0xa>
10010f60:	e000      	b.n	10010f64 <__sfputs_r+0x22>
10010f62:	2000      	movs	r0, #0
10010f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010f68 <_vfiprintf_r>:
10010f68:	b5f0      	push	{r4, r5, r6, r7, lr}
10010f6a:	b09f      	sub	sp, #124	; 0x7c
10010f6c:	0006      	movs	r6, r0
10010f6e:	000f      	movs	r7, r1
10010f70:	9202      	str	r2, [sp, #8]
10010f72:	9305      	str	r3, [sp, #20]
10010f74:	2800      	cmp	r0, #0
10010f76:	d004      	beq.n	10010f82 <_vfiprintf_r+0x1a>
10010f78:	6983      	ldr	r3, [r0, #24]
10010f7a:	2b00      	cmp	r3, #0
10010f7c:	d101      	bne.n	10010f82 <_vfiprintf_r+0x1a>
10010f7e:	f7ff fe2d 	bl	10010bdc <__sinit>
10010f82:	4b7f      	ldr	r3, [pc, #508]	; (10011180 <_vfiprintf_r+0x218>)
10010f84:	429f      	cmp	r7, r3
10010f86:	d101      	bne.n	10010f8c <_vfiprintf_r+0x24>
10010f88:	6877      	ldr	r7, [r6, #4]
10010f8a:	e008      	b.n	10010f9e <_vfiprintf_r+0x36>
10010f8c:	4b7d      	ldr	r3, [pc, #500]	; (10011184 <_vfiprintf_r+0x21c>)
10010f8e:	429f      	cmp	r7, r3
10010f90:	d101      	bne.n	10010f96 <_vfiprintf_r+0x2e>
10010f92:	68b7      	ldr	r7, [r6, #8]
10010f94:	e003      	b.n	10010f9e <_vfiprintf_r+0x36>
10010f96:	4b7c      	ldr	r3, [pc, #496]	; (10011188 <_vfiprintf_r+0x220>)
10010f98:	429f      	cmp	r7, r3
10010f9a:	d100      	bne.n	10010f9e <_vfiprintf_r+0x36>
10010f9c:	68f7      	ldr	r7, [r6, #12]
10010f9e:	89bb      	ldrh	r3, [r7, #12]
10010fa0:	071b      	lsls	r3, r3, #28
10010fa2:	d50a      	bpl.n	10010fba <_vfiprintf_r+0x52>
10010fa4:	693b      	ldr	r3, [r7, #16]
10010fa6:	2b00      	cmp	r3, #0
10010fa8:	d007      	beq.n	10010fba <_vfiprintf_r+0x52>
10010faa:	2300      	movs	r3, #0
10010fac:	ad06      	add	r5, sp, #24
10010fae:	616b      	str	r3, [r5, #20]
10010fb0:	3320      	adds	r3, #32
10010fb2:	766b      	strb	r3, [r5, #25]
10010fb4:	3310      	adds	r3, #16
10010fb6:	76ab      	strb	r3, [r5, #26]
10010fb8:	e03d      	b.n	10011036 <_vfiprintf_r+0xce>
10010fba:	0039      	movs	r1, r7
10010fbc:	0030      	movs	r0, r6
10010fbe:	f7ff fca3 	bl	10010908 <__swsetup_r>
10010fc2:	2800      	cmp	r0, #0
10010fc4:	d0f1      	beq.n	10010faa <_vfiprintf_r+0x42>
10010fc6:	2001      	movs	r0, #1
10010fc8:	4240      	negs	r0, r0
10010fca:	e0d6      	b.n	1001117a <_vfiprintf_r+0x212>
10010fcc:	9a05      	ldr	r2, [sp, #20]
10010fce:	1d11      	adds	r1, r2, #4
10010fd0:	6812      	ldr	r2, [r2, #0]
10010fd2:	9105      	str	r1, [sp, #20]
10010fd4:	2a00      	cmp	r2, #0
10010fd6:	da00      	bge.n	10010fda <_vfiprintf_r+0x72>
10010fd8:	e07f      	b.n	100110da <_vfiprintf_r+0x172>
10010fda:	9209      	str	r2, [sp, #36]	; 0x24
10010fdc:	3401      	adds	r4, #1
10010fde:	7823      	ldrb	r3, [r4, #0]
10010fe0:	2b2e      	cmp	r3, #46	; 0x2e
10010fe2:	d100      	bne.n	10010fe6 <_vfiprintf_r+0x7e>
10010fe4:	e08d      	b.n	10011102 <_vfiprintf_r+0x19a>
10010fe6:	7821      	ldrb	r1, [r4, #0]
10010fe8:	2203      	movs	r2, #3
10010fea:	4868      	ldr	r0, [pc, #416]	; (1001118c <_vfiprintf_r+0x224>)
10010fec:	f000 fb5a 	bl	100116a4 <memchr>
10010ff0:	2800      	cmp	r0, #0
10010ff2:	d007      	beq.n	10011004 <_vfiprintf_r+0x9c>
10010ff4:	4b65      	ldr	r3, [pc, #404]	; (1001118c <_vfiprintf_r+0x224>)
10010ff6:	682a      	ldr	r2, [r5, #0]
10010ff8:	1ac0      	subs	r0, r0, r3
10010ffa:	2340      	movs	r3, #64	; 0x40
10010ffc:	4083      	lsls	r3, r0
10010ffe:	4313      	orrs	r3, r2
10011000:	602b      	str	r3, [r5, #0]
10011002:	3401      	adds	r4, #1
10011004:	7821      	ldrb	r1, [r4, #0]
10011006:	1c63      	adds	r3, r4, #1
10011008:	2206      	movs	r2, #6
1001100a:	4861      	ldr	r0, [pc, #388]	; (10011190 <_vfiprintf_r+0x228>)
1001100c:	9302      	str	r3, [sp, #8]
1001100e:	7629      	strb	r1, [r5, #24]
10011010:	f000 fb48 	bl	100116a4 <memchr>
10011014:	2800      	cmp	r0, #0
10011016:	d100      	bne.n	1001101a <_vfiprintf_r+0xb2>
10011018:	e09d      	b.n	10011156 <_vfiprintf_r+0x1ee>
1001101a:	4b5e      	ldr	r3, [pc, #376]	; (10011194 <_vfiprintf_r+0x22c>)
1001101c:	2b00      	cmp	r3, #0
1001101e:	d000      	beq.n	10011022 <_vfiprintf_r+0xba>
10011020:	e090      	b.n	10011144 <_vfiprintf_r+0x1dc>
10011022:	2207      	movs	r2, #7
10011024:	9b05      	ldr	r3, [sp, #20]
10011026:	3307      	adds	r3, #7
10011028:	4393      	bics	r3, r2
1001102a:	3308      	adds	r3, #8
1001102c:	9305      	str	r3, [sp, #20]
1001102e:	696b      	ldr	r3, [r5, #20]
10011030:	9a03      	ldr	r2, [sp, #12]
10011032:	189b      	adds	r3, r3, r2
10011034:	616b      	str	r3, [r5, #20]
10011036:	9c02      	ldr	r4, [sp, #8]
10011038:	7823      	ldrb	r3, [r4, #0]
1001103a:	2b00      	cmp	r3, #0
1001103c:	d104      	bne.n	10011048 <_vfiprintf_r+0xe0>
1001103e:	9b02      	ldr	r3, [sp, #8]
10011040:	1ae3      	subs	r3, r4, r3
10011042:	9304      	str	r3, [sp, #16]
10011044:	d012      	beq.n	1001106c <_vfiprintf_r+0x104>
10011046:	e003      	b.n	10011050 <_vfiprintf_r+0xe8>
10011048:	2b25      	cmp	r3, #37	; 0x25
1001104a:	d0f8      	beq.n	1001103e <_vfiprintf_r+0xd6>
1001104c:	3401      	adds	r4, #1
1001104e:	e7f3      	b.n	10011038 <_vfiprintf_r+0xd0>
10011050:	9b04      	ldr	r3, [sp, #16]
10011052:	9a02      	ldr	r2, [sp, #8]
10011054:	0039      	movs	r1, r7
10011056:	0030      	movs	r0, r6
10011058:	f7ff ff73 	bl	10010f42 <__sfputs_r>
1001105c:	1c43      	adds	r3, r0, #1
1001105e:	d100      	bne.n	10011062 <_vfiprintf_r+0xfa>
10011060:	e086      	b.n	10011170 <_vfiprintf_r+0x208>
10011062:	696a      	ldr	r2, [r5, #20]
10011064:	9b04      	ldr	r3, [sp, #16]
10011066:	4694      	mov	ip, r2
10011068:	4463      	add	r3, ip
1001106a:	616b      	str	r3, [r5, #20]
1001106c:	7823      	ldrb	r3, [r4, #0]
1001106e:	2b00      	cmp	r3, #0
10011070:	d07e      	beq.n	10011170 <_vfiprintf_r+0x208>
10011072:	2201      	movs	r2, #1
10011074:	2300      	movs	r3, #0
10011076:	4252      	negs	r2, r2
10011078:	606a      	str	r2, [r5, #4]
1001107a:	a902      	add	r1, sp, #8
1001107c:	3254      	adds	r2, #84	; 0x54
1001107e:	1852      	adds	r2, r2, r1
10011080:	3401      	adds	r4, #1
10011082:	602b      	str	r3, [r5, #0]
10011084:	60eb      	str	r3, [r5, #12]
10011086:	60ab      	str	r3, [r5, #8]
10011088:	7013      	strb	r3, [r2, #0]
1001108a:	65ab      	str	r3, [r5, #88]	; 0x58
1001108c:	7821      	ldrb	r1, [r4, #0]
1001108e:	2205      	movs	r2, #5
10011090:	4841      	ldr	r0, [pc, #260]	; (10011198 <_vfiprintf_r+0x230>)
10011092:	f000 fb07 	bl	100116a4 <memchr>
10011096:	2800      	cmp	r0, #0
10011098:	d008      	beq.n	100110ac <_vfiprintf_r+0x144>
1001109a:	4b3f      	ldr	r3, [pc, #252]	; (10011198 <_vfiprintf_r+0x230>)
1001109c:	682a      	ldr	r2, [r5, #0]
1001109e:	1ac0      	subs	r0, r0, r3
100110a0:	2301      	movs	r3, #1
100110a2:	4083      	lsls	r3, r0
100110a4:	4313      	orrs	r3, r2
100110a6:	602b      	str	r3, [r5, #0]
100110a8:	3401      	adds	r4, #1
100110aa:	e7ef      	b.n	1001108c <_vfiprintf_r+0x124>
100110ac:	682b      	ldr	r3, [r5, #0]
100110ae:	06da      	lsls	r2, r3, #27
100110b0:	d504      	bpl.n	100110bc <_vfiprintf_r+0x154>
100110b2:	2253      	movs	r2, #83	; 0x53
100110b4:	2120      	movs	r1, #32
100110b6:	a802      	add	r0, sp, #8
100110b8:	1812      	adds	r2, r2, r0
100110ba:	7011      	strb	r1, [r2, #0]
100110bc:	071a      	lsls	r2, r3, #28
100110be:	d504      	bpl.n	100110ca <_vfiprintf_r+0x162>
100110c0:	2253      	movs	r2, #83	; 0x53
100110c2:	212b      	movs	r1, #43	; 0x2b
100110c4:	a802      	add	r0, sp, #8
100110c6:	1812      	adds	r2, r2, r0
100110c8:	7011      	strb	r1, [r2, #0]
100110ca:	7822      	ldrb	r2, [r4, #0]
100110cc:	2a2a      	cmp	r2, #42	; 0x2a
100110ce:	d100      	bne.n	100110d2 <_vfiprintf_r+0x16a>
100110d0:	e77c      	b.n	10010fcc <_vfiprintf_r+0x64>
100110d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100110d4:	2000      	movs	r0, #0
100110d6:	210a      	movs	r1, #10
100110d8:	e005      	b.n	100110e6 <_vfiprintf_r+0x17e>
100110da:	4252      	negs	r2, r2
100110dc:	60ea      	str	r2, [r5, #12]
100110de:	2202      	movs	r2, #2
100110e0:	4313      	orrs	r3, r2
100110e2:	602b      	str	r3, [r5, #0]
100110e4:	e77a      	b.n	10010fdc <_vfiprintf_r+0x74>
100110e6:	7822      	ldrb	r2, [r4, #0]
100110e8:	3a30      	subs	r2, #48	; 0x30
100110ea:	2a09      	cmp	r2, #9
100110ec:	d804      	bhi.n	100110f8 <_vfiprintf_r+0x190>
100110ee:	434b      	muls	r3, r1
100110f0:	3401      	adds	r4, #1
100110f2:	189b      	adds	r3, r3, r2
100110f4:	2001      	movs	r0, #1
100110f6:	e7f6      	b.n	100110e6 <_vfiprintf_r+0x17e>
100110f8:	2800      	cmp	r0, #0
100110fa:	d100      	bne.n	100110fe <_vfiprintf_r+0x196>
100110fc:	e76f      	b.n	10010fde <_vfiprintf_r+0x76>
100110fe:	9309      	str	r3, [sp, #36]	; 0x24
10011100:	e76d      	b.n	10010fde <_vfiprintf_r+0x76>
10011102:	7863      	ldrb	r3, [r4, #1]
10011104:	2b2a      	cmp	r3, #42	; 0x2a
10011106:	d10a      	bne.n	1001111e <_vfiprintf_r+0x1b6>
10011108:	9b05      	ldr	r3, [sp, #20]
1001110a:	3402      	adds	r4, #2
1001110c:	1d1a      	adds	r2, r3, #4
1001110e:	681b      	ldr	r3, [r3, #0]
10011110:	9205      	str	r2, [sp, #20]
10011112:	2b00      	cmp	r3, #0
10011114:	da01      	bge.n	1001111a <_vfiprintf_r+0x1b2>
10011116:	2301      	movs	r3, #1
10011118:	425b      	negs	r3, r3
1001111a:	9307      	str	r3, [sp, #28]
1001111c:	e763      	b.n	10010fe6 <_vfiprintf_r+0x7e>
1001111e:	2300      	movs	r3, #0
10011120:	200a      	movs	r0, #10
10011122:	001a      	movs	r2, r3
10011124:	3401      	adds	r4, #1
10011126:	606b      	str	r3, [r5, #4]
10011128:	7821      	ldrb	r1, [r4, #0]
1001112a:	3930      	subs	r1, #48	; 0x30
1001112c:	2909      	cmp	r1, #9
1001112e:	d804      	bhi.n	1001113a <_vfiprintf_r+0x1d2>
10011130:	4342      	muls	r2, r0
10011132:	3401      	adds	r4, #1
10011134:	1852      	adds	r2, r2, r1
10011136:	2301      	movs	r3, #1
10011138:	e7f6      	b.n	10011128 <_vfiprintf_r+0x1c0>
1001113a:	2b00      	cmp	r3, #0
1001113c:	d100      	bne.n	10011140 <_vfiprintf_r+0x1d8>
1001113e:	e752      	b.n	10010fe6 <_vfiprintf_r+0x7e>
10011140:	9207      	str	r2, [sp, #28]
10011142:	e750      	b.n	10010fe6 <_vfiprintf_r+0x7e>
10011144:	ab05      	add	r3, sp, #20
10011146:	9300      	str	r3, [sp, #0]
10011148:	003a      	movs	r2, r7
1001114a:	4b14      	ldr	r3, [pc, #80]	; (1001119c <_vfiprintf_r+0x234>)
1001114c:	0029      	movs	r1, r5
1001114e:	0030      	movs	r0, r6
10011150:	e000      	b.n	10011154 <_vfiprintf_r+0x1ec>
10011152:	bf00      	nop
10011154:	e007      	b.n	10011166 <_vfiprintf_r+0x1fe>
10011156:	ab05      	add	r3, sp, #20
10011158:	9300      	str	r3, [sp, #0]
1001115a:	003a      	movs	r2, r7
1001115c:	4b0f      	ldr	r3, [pc, #60]	; (1001119c <_vfiprintf_r+0x234>)
1001115e:	0029      	movs	r1, r5
10011160:	0030      	movs	r0, r6
10011162:	f000 f88b 	bl	1001127c <_printf_i>
10011166:	9003      	str	r0, [sp, #12]
10011168:	9b03      	ldr	r3, [sp, #12]
1001116a:	3301      	adds	r3, #1
1001116c:	d000      	beq.n	10011170 <_vfiprintf_r+0x208>
1001116e:	e75e      	b.n	1001102e <_vfiprintf_r+0xc6>
10011170:	89bb      	ldrh	r3, [r7, #12]
10011172:	065b      	lsls	r3, r3, #25
10011174:	d500      	bpl.n	10011178 <_vfiprintf_r+0x210>
10011176:	e726      	b.n	10010fc6 <_vfiprintf_r+0x5e>
10011178:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001117a:	b01f      	add	sp, #124	; 0x7c
1001117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001117e:	46c0      	nop			; (mov r8, r8)
10011180:	10012468 	.word	0x10012468
10011184:	10012488 	.word	0x10012488
10011188:	100124a8 	.word	0x100124a8
1001118c:	100124ce 	.word	0x100124ce
10011190:	100124d2 	.word	0x100124d2
10011194:	00000000 	.word	0x00000000
10011198:	100124c8 	.word	0x100124c8
1001119c:	10010f43 	.word	0x10010f43

100111a0 <_printf_common>:
100111a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100111a2:	0017      	movs	r7, r2
100111a4:	9301      	str	r3, [sp, #4]
100111a6:	688a      	ldr	r2, [r1, #8]
100111a8:	690b      	ldr	r3, [r1, #16]
100111aa:	9000      	str	r0, [sp, #0]
100111ac:	000c      	movs	r4, r1
100111ae:	4293      	cmp	r3, r2
100111b0:	da00      	bge.n	100111b4 <_printf_common+0x14>
100111b2:	0013      	movs	r3, r2
100111b4:	0022      	movs	r2, r4
100111b6:	603b      	str	r3, [r7, #0]
100111b8:	3243      	adds	r2, #67	; 0x43
100111ba:	7812      	ldrb	r2, [r2, #0]
100111bc:	2a00      	cmp	r2, #0
100111be:	d001      	beq.n	100111c4 <_printf_common+0x24>
100111c0:	3301      	adds	r3, #1
100111c2:	603b      	str	r3, [r7, #0]
100111c4:	6823      	ldr	r3, [r4, #0]
100111c6:	069b      	lsls	r3, r3, #26
100111c8:	d502      	bpl.n	100111d0 <_printf_common+0x30>
100111ca:	683b      	ldr	r3, [r7, #0]
100111cc:	3302      	adds	r3, #2
100111ce:	603b      	str	r3, [r7, #0]
100111d0:	2506      	movs	r5, #6
100111d2:	6823      	ldr	r3, [r4, #0]
100111d4:	401d      	ands	r5, r3
100111d6:	d01e      	beq.n	10011216 <_printf_common+0x76>
100111d8:	0023      	movs	r3, r4
100111da:	3343      	adds	r3, #67	; 0x43
100111dc:	781b      	ldrb	r3, [r3, #0]
100111de:	1e5a      	subs	r2, r3, #1
100111e0:	4193      	sbcs	r3, r2
100111e2:	6822      	ldr	r2, [r4, #0]
100111e4:	0692      	lsls	r2, r2, #26
100111e6:	d51c      	bpl.n	10011222 <_printf_common+0x82>
100111e8:	2030      	movs	r0, #48	; 0x30
100111ea:	18e1      	adds	r1, r4, r3
100111ec:	3143      	adds	r1, #67	; 0x43
100111ee:	7008      	strb	r0, [r1, #0]
100111f0:	0021      	movs	r1, r4
100111f2:	1c5a      	adds	r2, r3, #1
100111f4:	3145      	adds	r1, #69	; 0x45
100111f6:	7809      	ldrb	r1, [r1, #0]
100111f8:	18a2      	adds	r2, r4, r2
100111fa:	3243      	adds	r2, #67	; 0x43
100111fc:	3302      	adds	r3, #2
100111fe:	7011      	strb	r1, [r2, #0]
10011200:	e00f      	b.n	10011222 <_printf_common+0x82>
10011202:	0022      	movs	r2, r4
10011204:	2301      	movs	r3, #1
10011206:	3219      	adds	r2, #25
10011208:	9901      	ldr	r1, [sp, #4]
1001120a:	9800      	ldr	r0, [sp, #0]
1001120c:	9e08      	ldr	r6, [sp, #32]
1001120e:	47b0      	blx	r6
10011210:	1c43      	adds	r3, r0, #1
10011212:	d00e      	beq.n	10011232 <_printf_common+0x92>
10011214:	3501      	adds	r5, #1
10011216:	68e3      	ldr	r3, [r4, #12]
10011218:	683a      	ldr	r2, [r7, #0]
1001121a:	1a9b      	subs	r3, r3, r2
1001121c:	429d      	cmp	r5, r3
1001121e:	dbf0      	blt.n	10011202 <_printf_common+0x62>
10011220:	e7da      	b.n	100111d8 <_printf_common+0x38>
10011222:	0022      	movs	r2, r4
10011224:	9901      	ldr	r1, [sp, #4]
10011226:	3243      	adds	r2, #67	; 0x43
10011228:	9800      	ldr	r0, [sp, #0]
1001122a:	9d08      	ldr	r5, [sp, #32]
1001122c:	47a8      	blx	r5
1001122e:	1c43      	adds	r3, r0, #1
10011230:	d102      	bne.n	10011238 <_printf_common+0x98>
10011232:	2001      	movs	r0, #1
10011234:	4240      	negs	r0, r0
10011236:	e020      	b.n	1001127a <_printf_common+0xda>
10011238:	2306      	movs	r3, #6
1001123a:	6820      	ldr	r0, [r4, #0]
1001123c:	68e1      	ldr	r1, [r4, #12]
1001123e:	683a      	ldr	r2, [r7, #0]
10011240:	4003      	ands	r3, r0
10011242:	2500      	movs	r5, #0
10011244:	2b04      	cmp	r3, #4
10011246:	d103      	bne.n	10011250 <_printf_common+0xb0>
10011248:	1a8d      	subs	r5, r1, r2
1001124a:	43eb      	mvns	r3, r5
1001124c:	17db      	asrs	r3, r3, #31
1001124e:	401d      	ands	r5, r3
10011250:	68a3      	ldr	r3, [r4, #8]
10011252:	6922      	ldr	r2, [r4, #16]
10011254:	4293      	cmp	r3, r2
10011256:	dd01      	ble.n	1001125c <_printf_common+0xbc>
10011258:	1a9b      	subs	r3, r3, r2
1001125a:	18ed      	adds	r5, r5, r3
1001125c:	2700      	movs	r7, #0
1001125e:	42bd      	cmp	r5, r7
10011260:	d00a      	beq.n	10011278 <_printf_common+0xd8>
10011262:	0022      	movs	r2, r4
10011264:	2301      	movs	r3, #1
10011266:	321a      	adds	r2, #26
10011268:	9901      	ldr	r1, [sp, #4]
1001126a:	9800      	ldr	r0, [sp, #0]
1001126c:	9e08      	ldr	r6, [sp, #32]
1001126e:	47b0      	blx	r6
10011270:	1c43      	adds	r3, r0, #1
10011272:	d0de      	beq.n	10011232 <_printf_common+0x92>
10011274:	3701      	adds	r7, #1
10011276:	e7f2      	b.n	1001125e <_printf_common+0xbe>
10011278:	2000      	movs	r0, #0
1001127a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001127c <_printf_i>:
1001127c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001127e:	b08b      	sub	sp, #44	; 0x2c
10011280:	9206      	str	r2, [sp, #24]
10011282:	000a      	movs	r2, r1
10011284:	3243      	adds	r2, #67	; 0x43
10011286:	9307      	str	r3, [sp, #28]
10011288:	9005      	str	r0, [sp, #20]
1001128a:	9204      	str	r2, [sp, #16]
1001128c:	7e0a      	ldrb	r2, [r1, #24]
1001128e:	000c      	movs	r4, r1
10011290:	9b10      	ldr	r3, [sp, #64]	; 0x40
10011292:	2a6e      	cmp	r2, #110	; 0x6e
10011294:	d100      	bne.n	10011298 <_printf_i+0x1c>
10011296:	e0ab      	b.n	100113f0 <_printf_i+0x174>
10011298:	d811      	bhi.n	100112be <_printf_i+0x42>
1001129a:	2a63      	cmp	r2, #99	; 0x63
1001129c:	d022      	beq.n	100112e4 <_printf_i+0x68>
1001129e:	d809      	bhi.n	100112b4 <_printf_i+0x38>
100112a0:	2a00      	cmp	r2, #0
100112a2:	d100      	bne.n	100112a6 <_printf_i+0x2a>
100112a4:	e0b5      	b.n	10011412 <_printf_i+0x196>
100112a6:	2a58      	cmp	r2, #88	; 0x58
100112a8:	d000      	beq.n	100112ac <_printf_i+0x30>
100112aa:	e0c5      	b.n	10011438 <_printf_i+0x1bc>
100112ac:	3145      	adds	r1, #69	; 0x45
100112ae:	700a      	strb	r2, [r1, #0]
100112b0:	4a81      	ldr	r2, [pc, #516]	; (100114b8 <_printf_i+0x23c>)
100112b2:	e04f      	b.n	10011354 <_printf_i+0xd8>
100112b4:	2a64      	cmp	r2, #100	; 0x64
100112b6:	d01d      	beq.n	100112f4 <_printf_i+0x78>
100112b8:	2a69      	cmp	r2, #105	; 0x69
100112ba:	d01b      	beq.n	100112f4 <_printf_i+0x78>
100112bc:	e0bc      	b.n	10011438 <_printf_i+0x1bc>
100112be:	2a73      	cmp	r2, #115	; 0x73
100112c0:	d100      	bne.n	100112c4 <_printf_i+0x48>
100112c2:	e0aa      	b.n	1001141a <_printf_i+0x19e>
100112c4:	d809      	bhi.n	100112da <_printf_i+0x5e>
100112c6:	2a6f      	cmp	r2, #111	; 0x6f
100112c8:	d029      	beq.n	1001131e <_printf_i+0xa2>
100112ca:	2a70      	cmp	r2, #112	; 0x70
100112cc:	d000      	beq.n	100112d0 <_printf_i+0x54>
100112ce:	e0b3      	b.n	10011438 <_printf_i+0x1bc>
100112d0:	2220      	movs	r2, #32
100112d2:	6809      	ldr	r1, [r1, #0]
100112d4:	430a      	orrs	r2, r1
100112d6:	6022      	str	r2, [r4, #0]
100112d8:	e037      	b.n	1001134a <_printf_i+0xce>
100112da:	2a75      	cmp	r2, #117	; 0x75
100112dc:	d01f      	beq.n	1001131e <_printf_i+0xa2>
100112de:	2a78      	cmp	r2, #120	; 0x78
100112e0:	d033      	beq.n	1001134a <_printf_i+0xce>
100112e2:	e0a9      	b.n	10011438 <_printf_i+0x1bc>
100112e4:	000e      	movs	r6, r1
100112e6:	681a      	ldr	r2, [r3, #0]
100112e8:	3642      	adds	r6, #66	; 0x42
100112ea:	1d11      	adds	r1, r2, #4
100112ec:	6019      	str	r1, [r3, #0]
100112ee:	6813      	ldr	r3, [r2, #0]
100112f0:	7033      	strb	r3, [r6, #0]
100112f2:	e0a4      	b.n	1001143e <_printf_i+0x1c2>
100112f4:	6821      	ldr	r1, [r4, #0]
100112f6:	681a      	ldr	r2, [r3, #0]
100112f8:	0608      	lsls	r0, r1, #24
100112fa:	d406      	bmi.n	1001130a <_printf_i+0x8e>
100112fc:	0649      	lsls	r1, r1, #25
100112fe:	d504      	bpl.n	1001130a <_printf_i+0x8e>
10011300:	1d11      	adds	r1, r2, #4
10011302:	6019      	str	r1, [r3, #0]
10011304:	2300      	movs	r3, #0
10011306:	5ed5      	ldrsh	r5, [r2, r3]
10011308:	e002      	b.n	10011310 <_printf_i+0x94>
1001130a:	1d11      	adds	r1, r2, #4
1001130c:	6019      	str	r1, [r3, #0]
1001130e:	6815      	ldr	r5, [r2, #0]
10011310:	2d00      	cmp	r5, #0
10011312:	da3b      	bge.n	1001138c <_printf_i+0x110>
10011314:	232d      	movs	r3, #45	; 0x2d
10011316:	9a04      	ldr	r2, [sp, #16]
10011318:	426d      	negs	r5, r5
1001131a:	7013      	strb	r3, [r2, #0]
1001131c:	e036      	b.n	1001138c <_printf_i+0x110>
1001131e:	6821      	ldr	r1, [r4, #0]
10011320:	681a      	ldr	r2, [r3, #0]
10011322:	0608      	lsls	r0, r1, #24
10011324:	d406      	bmi.n	10011334 <_printf_i+0xb8>
10011326:	0649      	lsls	r1, r1, #25
10011328:	d504      	bpl.n	10011334 <_printf_i+0xb8>
1001132a:	6815      	ldr	r5, [r2, #0]
1001132c:	1d11      	adds	r1, r2, #4
1001132e:	6019      	str	r1, [r3, #0]
10011330:	b2ad      	uxth	r5, r5
10011332:	e002      	b.n	1001133a <_printf_i+0xbe>
10011334:	1d11      	adds	r1, r2, #4
10011336:	6019      	str	r1, [r3, #0]
10011338:	6815      	ldr	r5, [r2, #0]
1001133a:	4b5f      	ldr	r3, [pc, #380]	; (100114b8 <_printf_i+0x23c>)
1001133c:	7e22      	ldrb	r2, [r4, #24]
1001133e:	9303      	str	r3, [sp, #12]
10011340:	2708      	movs	r7, #8
10011342:	2a6f      	cmp	r2, #111	; 0x6f
10011344:	d01d      	beq.n	10011382 <_printf_i+0x106>
10011346:	270a      	movs	r7, #10
10011348:	e01b      	b.n	10011382 <_printf_i+0x106>
1001134a:	0022      	movs	r2, r4
1001134c:	2178      	movs	r1, #120	; 0x78
1001134e:	3245      	adds	r2, #69	; 0x45
10011350:	7011      	strb	r1, [r2, #0]
10011352:	4a5a      	ldr	r2, [pc, #360]	; (100114bc <_printf_i+0x240>)
10011354:	6819      	ldr	r1, [r3, #0]
10011356:	9203      	str	r2, [sp, #12]
10011358:	1d08      	adds	r0, r1, #4
1001135a:	6822      	ldr	r2, [r4, #0]
1001135c:	6018      	str	r0, [r3, #0]
1001135e:	680d      	ldr	r5, [r1, #0]
10011360:	0610      	lsls	r0, r2, #24
10011362:	d402      	bmi.n	1001136a <_printf_i+0xee>
10011364:	0650      	lsls	r0, r2, #25
10011366:	d500      	bpl.n	1001136a <_printf_i+0xee>
10011368:	b2ad      	uxth	r5, r5
1001136a:	07d3      	lsls	r3, r2, #31
1001136c:	d502      	bpl.n	10011374 <_printf_i+0xf8>
1001136e:	2320      	movs	r3, #32
10011370:	431a      	orrs	r2, r3
10011372:	6022      	str	r2, [r4, #0]
10011374:	2710      	movs	r7, #16
10011376:	2d00      	cmp	r5, #0
10011378:	d103      	bne.n	10011382 <_printf_i+0x106>
1001137a:	2320      	movs	r3, #32
1001137c:	6822      	ldr	r2, [r4, #0]
1001137e:	439a      	bics	r2, r3
10011380:	6022      	str	r2, [r4, #0]
10011382:	0023      	movs	r3, r4
10011384:	2200      	movs	r2, #0
10011386:	3343      	adds	r3, #67	; 0x43
10011388:	701a      	strb	r2, [r3, #0]
1001138a:	e002      	b.n	10011392 <_printf_i+0x116>
1001138c:	270a      	movs	r7, #10
1001138e:	4b4a      	ldr	r3, [pc, #296]	; (100114b8 <_printf_i+0x23c>)
10011390:	9303      	str	r3, [sp, #12]
10011392:	6863      	ldr	r3, [r4, #4]
10011394:	60a3      	str	r3, [r4, #8]
10011396:	2b00      	cmp	r3, #0
10011398:	db09      	blt.n	100113ae <_printf_i+0x132>
1001139a:	2204      	movs	r2, #4
1001139c:	6821      	ldr	r1, [r4, #0]
1001139e:	4391      	bics	r1, r2
100113a0:	6021      	str	r1, [r4, #0]
100113a2:	2d00      	cmp	r5, #0
100113a4:	d105      	bne.n	100113b2 <_printf_i+0x136>
100113a6:	9e04      	ldr	r6, [sp, #16]
100113a8:	2b00      	cmp	r3, #0
100113aa:	d011      	beq.n	100113d0 <_printf_i+0x154>
100113ac:	e07b      	b.n	100114a6 <_printf_i+0x22a>
100113ae:	2d00      	cmp	r5, #0
100113b0:	d079      	beq.n	100114a6 <_printf_i+0x22a>
100113b2:	9e04      	ldr	r6, [sp, #16]
100113b4:	0028      	movs	r0, r5
100113b6:	0039      	movs	r1, r7
100113b8:	f7fd fc22 	bl	1000ec00 <__aeabi_uidivmod>
100113bc:	9b03      	ldr	r3, [sp, #12]
100113be:	3e01      	subs	r6, #1
100113c0:	5c5b      	ldrb	r3, [r3, r1]
100113c2:	0028      	movs	r0, r5
100113c4:	7033      	strb	r3, [r6, #0]
100113c6:	0039      	movs	r1, r7
100113c8:	f7fd fb94 	bl	1000eaf4 <__aeabi_uidiv>
100113cc:	1e05      	subs	r5, r0, #0
100113ce:	d1f1      	bne.n	100113b4 <_printf_i+0x138>
100113d0:	2f08      	cmp	r7, #8
100113d2:	d109      	bne.n	100113e8 <_printf_i+0x16c>
100113d4:	6823      	ldr	r3, [r4, #0]
100113d6:	07db      	lsls	r3, r3, #31
100113d8:	d506      	bpl.n	100113e8 <_printf_i+0x16c>
100113da:	6863      	ldr	r3, [r4, #4]
100113dc:	6922      	ldr	r2, [r4, #16]
100113de:	4293      	cmp	r3, r2
100113e0:	dc02      	bgt.n	100113e8 <_printf_i+0x16c>
100113e2:	2330      	movs	r3, #48	; 0x30
100113e4:	3e01      	subs	r6, #1
100113e6:	7033      	strb	r3, [r6, #0]
100113e8:	9b04      	ldr	r3, [sp, #16]
100113ea:	1b9b      	subs	r3, r3, r6
100113ec:	6123      	str	r3, [r4, #16]
100113ee:	e02b      	b.n	10011448 <_printf_i+0x1cc>
100113f0:	6809      	ldr	r1, [r1, #0]
100113f2:	681a      	ldr	r2, [r3, #0]
100113f4:	0608      	lsls	r0, r1, #24
100113f6:	d407      	bmi.n	10011408 <_printf_i+0x18c>
100113f8:	0649      	lsls	r1, r1, #25
100113fa:	d505      	bpl.n	10011408 <_printf_i+0x18c>
100113fc:	1d11      	adds	r1, r2, #4
100113fe:	6019      	str	r1, [r3, #0]
10011400:	6813      	ldr	r3, [r2, #0]
10011402:	8aa2      	ldrh	r2, [r4, #20]
10011404:	801a      	strh	r2, [r3, #0]
10011406:	e004      	b.n	10011412 <_printf_i+0x196>
10011408:	1d11      	adds	r1, r2, #4
1001140a:	6019      	str	r1, [r3, #0]
1001140c:	6813      	ldr	r3, [r2, #0]
1001140e:	6962      	ldr	r2, [r4, #20]
10011410:	601a      	str	r2, [r3, #0]
10011412:	2300      	movs	r3, #0
10011414:	9e04      	ldr	r6, [sp, #16]
10011416:	6123      	str	r3, [r4, #16]
10011418:	e016      	b.n	10011448 <_printf_i+0x1cc>
1001141a:	681a      	ldr	r2, [r3, #0]
1001141c:	1d11      	adds	r1, r2, #4
1001141e:	6019      	str	r1, [r3, #0]
10011420:	6816      	ldr	r6, [r2, #0]
10011422:	2100      	movs	r1, #0
10011424:	6862      	ldr	r2, [r4, #4]
10011426:	0030      	movs	r0, r6
10011428:	f000 f93c 	bl	100116a4 <memchr>
1001142c:	2800      	cmp	r0, #0
1001142e:	d001      	beq.n	10011434 <_printf_i+0x1b8>
10011430:	1b80      	subs	r0, r0, r6
10011432:	6060      	str	r0, [r4, #4]
10011434:	6863      	ldr	r3, [r4, #4]
10011436:	e003      	b.n	10011440 <_printf_i+0x1c4>
10011438:	0026      	movs	r6, r4
1001143a:	3642      	adds	r6, #66	; 0x42
1001143c:	7032      	strb	r2, [r6, #0]
1001143e:	2301      	movs	r3, #1
10011440:	6123      	str	r3, [r4, #16]
10011442:	2300      	movs	r3, #0
10011444:	9a04      	ldr	r2, [sp, #16]
10011446:	7013      	strb	r3, [r2, #0]
10011448:	9b07      	ldr	r3, [sp, #28]
1001144a:	aa09      	add	r2, sp, #36	; 0x24
1001144c:	9300      	str	r3, [sp, #0]
1001144e:	0021      	movs	r1, r4
10011450:	9b06      	ldr	r3, [sp, #24]
10011452:	9805      	ldr	r0, [sp, #20]
10011454:	f7ff fea4 	bl	100111a0 <_printf_common>
10011458:	1c43      	adds	r3, r0, #1
1001145a:	d102      	bne.n	10011462 <_printf_i+0x1e6>
1001145c:	2001      	movs	r0, #1
1001145e:	4240      	negs	r0, r0
10011460:	e027      	b.n	100114b2 <_printf_i+0x236>
10011462:	6923      	ldr	r3, [r4, #16]
10011464:	0032      	movs	r2, r6
10011466:	9906      	ldr	r1, [sp, #24]
10011468:	9805      	ldr	r0, [sp, #20]
1001146a:	9d07      	ldr	r5, [sp, #28]
1001146c:	47a8      	blx	r5
1001146e:	1c43      	adds	r3, r0, #1
10011470:	d0f4      	beq.n	1001145c <_printf_i+0x1e0>
10011472:	6823      	ldr	r3, [r4, #0]
10011474:	2500      	movs	r5, #0
10011476:	079b      	lsls	r3, r3, #30
10011478:	d40f      	bmi.n	1001149a <_printf_i+0x21e>
1001147a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001147c:	68e0      	ldr	r0, [r4, #12]
1001147e:	4298      	cmp	r0, r3
10011480:	da17      	bge.n	100114b2 <_printf_i+0x236>
10011482:	0018      	movs	r0, r3
10011484:	e015      	b.n	100114b2 <_printf_i+0x236>
10011486:	0022      	movs	r2, r4
10011488:	2301      	movs	r3, #1
1001148a:	3219      	adds	r2, #25
1001148c:	9906      	ldr	r1, [sp, #24]
1001148e:	9805      	ldr	r0, [sp, #20]
10011490:	9e07      	ldr	r6, [sp, #28]
10011492:	47b0      	blx	r6
10011494:	1c43      	adds	r3, r0, #1
10011496:	d0e1      	beq.n	1001145c <_printf_i+0x1e0>
10011498:	3501      	adds	r5, #1
1001149a:	68e3      	ldr	r3, [r4, #12]
1001149c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001149e:	1a9b      	subs	r3, r3, r2
100114a0:	429d      	cmp	r5, r3
100114a2:	dbf0      	blt.n	10011486 <_printf_i+0x20a>
100114a4:	e7e9      	b.n	1001147a <_printf_i+0x1fe>
100114a6:	0026      	movs	r6, r4
100114a8:	9b03      	ldr	r3, [sp, #12]
100114aa:	3642      	adds	r6, #66	; 0x42
100114ac:	781b      	ldrb	r3, [r3, #0]
100114ae:	7033      	strb	r3, [r6, #0]
100114b0:	e78e      	b.n	100113d0 <_printf_i+0x154>
100114b2:	b00b      	add	sp, #44	; 0x2c
100114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100114b6:	46c0      	nop			; (mov r8, r8)
100114b8:	100124d9 	.word	0x100124d9
100114bc:	100124ea 	.word	0x100124ea

100114c0 <_putc_r>:
100114c0:	b570      	push	{r4, r5, r6, lr}
100114c2:	0006      	movs	r6, r0
100114c4:	000d      	movs	r5, r1
100114c6:	0014      	movs	r4, r2
100114c8:	2800      	cmp	r0, #0
100114ca:	d004      	beq.n	100114d6 <_putc_r+0x16>
100114cc:	6983      	ldr	r3, [r0, #24]
100114ce:	2b00      	cmp	r3, #0
100114d0:	d101      	bne.n	100114d6 <_putc_r+0x16>
100114d2:	f7ff fb83 	bl	10010bdc <__sinit>
100114d6:	4b12      	ldr	r3, [pc, #72]	; (10011520 <_putc_r+0x60>)
100114d8:	429c      	cmp	r4, r3
100114da:	d101      	bne.n	100114e0 <_putc_r+0x20>
100114dc:	6874      	ldr	r4, [r6, #4]
100114de:	e008      	b.n	100114f2 <_putc_r+0x32>
100114e0:	4b10      	ldr	r3, [pc, #64]	; (10011524 <_putc_r+0x64>)
100114e2:	429c      	cmp	r4, r3
100114e4:	d101      	bne.n	100114ea <_putc_r+0x2a>
100114e6:	68b4      	ldr	r4, [r6, #8]
100114e8:	e003      	b.n	100114f2 <_putc_r+0x32>
100114ea:	4b0f      	ldr	r3, [pc, #60]	; (10011528 <_putc_r+0x68>)
100114ec:	429c      	cmp	r4, r3
100114ee:	d100      	bne.n	100114f2 <_putc_r+0x32>
100114f0:	68f4      	ldr	r4, [r6, #12]
100114f2:	68a3      	ldr	r3, [r4, #8]
100114f4:	3b01      	subs	r3, #1
100114f6:	60a3      	str	r3, [r4, #8]
100114f8:	2b00      	cmp	r3, #0
100114fa:	da05      	bge.n	10011508 <_putc_r+0x48>
100114fc:	69a2      	ldr	r2, [r4, #24]
100114fe:	4293      	cmp	r3, r2
10011500:	db08      	blt.n	10011514 <_putc_r+0x54>
10011502:	b2eb      	uxtb	r3, r5
10011504:	2b0a      	cmp	r3, #10
10011506:	d005      	beq.n	10011514 <_putc_r+0x54>
10011508:	6823      	ldr	r3, [r4, #0]
1001150a:	b2e8      	uxtb	r0, r5
1001150c:	1c5a      	adds	r2, r3, #1
1001150e:	6022      	str	r2, [r4, #0]
10011510:	701d      	strb	r5, [r3, #0]
10011512:	e004      	b.n	1001151e <_putc_r+0x5e>
10011514:	0022      	movs	r2, r4
10011516:	0029      	movs	r1, r5
10011518:	0030      	movs	r0, r6
1001151a:	f7ff f99d 	bl	10010858 <__swbuf_r>
1001151e:	bd70      	pop	{r4, r5, r6, pc}
10011520:	10012468 	.word	0x10012468
10011524:	10012488 	.word	0x10012488
10011528:	100124a8 	.word	0x100124a8

1001152c <_sbrk_r>:
1001152c:	2300      	movs	r3, #0
1001152e:	b570      	push	{r4, r5, r6, lr}
10011530:	4c06      	ldr	r4, [pc, #24]	; (1001154c <_sbrk_r+0x20>)
10011532:	0005      	movs	r5, r0
10011534:	0008      	movs	r0, r1
10011536:	6023      	str	r3, [r4, #0]
10011538:	f7f8 fb48 	bl	10009bcc <_sbrk>
1001153c:	1c43      	adds	r3, r0, #1
1001153e:	d103      	bne.n	10011548 <_sbrk_r+0x1c>
10011540:	6823      	ldr	r3, [r4, #0]
10011542:	2b00      	cmp	r3, #0
10011544:	d000      	beq.n	10011548 <_sbrk_r+0x1c>
10011546:	602b      	str	r3, [r5, #0]
10011548:	bd70      	pop	{r4, r5, r6, pc}
1001154a:	46c0      	nop			; (mov r8, r8)
1001154c:	1001525c 	.word	0x1001525c

10011550 <__sread>:
10011550:	b570      	push	{r4, r5, r6, lr}
10011552:	000c      	movs	r4, r1
10011554:	250e      	movs	r5, #14
10011556:	5f49      	ldrsh	r1, [r1, r5]
10011558:	f000 f8b0 	bl	100116bc <_read_r>
1001155c:	2800      	cmp	r0, #0
1001155e:	db03      	blt.n	10011568 <__sread+0x18>
10011560:	6d63      	ldr	r3, [r4, #84]	; 0x54
10011562:	181b      	adds	r3, r3, r0
10011564:	6563      	str	r3, [r4, #84]	; 0x54
10011566:	e003      	b.n	10011570 <__sread+0x20>
10011568:	89a2      	ldrh	r2, [r4, #12]
1001156a:	4b02      	ldr	r3, [pc, #8]	; (10011574 <__sread+0x24>)
1001156c:	4013      	ands	r3, r2
1001156e:	81a3      	strh	r3, [r4, #12]
10011570:	bd70      	pop	{r4, r5, r6, pc}
10011572:	46c0      	nop			; (mov r8, r8)
10011574:	ffffefff 	.word	0xffffefff

10011578 <__swrite>:
10011578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001157a:	001f      	movs	r7, r3
1001157c:	898b      	ldrh	r3, [r1, #12]
1001157e:	0005      	movs	r5, r0
10011580:	000c      	movs	r4, r1
10011582:	0016      	movs	r6, r2
10011584:	05db      	lsls	r3, r3, #23
10011586:	d505      	bpl.n	10011594 <__swrite+0x1c>
10011588:	230e      	movs	r3, #14
1001158a:	5ec9      	ldrsh	r1, [r1, r3]
1001158c:	2200      	movs	r2, #0
1001158e:	2302      	movs	r3, #2
10011590:	f000 f874 	bl	1001167c <_lseek_r>
10011594:	89a2      	ldrh	r2, [r4, #12]
10011596:	4b05      	ldr	r3, [pc, #20]	; (100115ac <__swrite+0x34>)
10011598:	0028      	movs	r0, r5
1001159a:	4013      	ands	r3, r2
1001159c:	81a3      	strh	r3, [r4, #12]
1001159e:	0032      	movs	r2, r6
100115a0:	230e      	movs	r3, #14
100115a2:	5ee1      	ldrsh	r1, [r4, r3]
100115a4:	003b      	movs	r3, r7
100115a6:	f000 f81f 	bl	100115e8 <_write_r>
100115aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100115ac:	ffffefff 	.word	0xffffefff

100115b0 <__sseek>:
100115b0:	b570      	push	{r4, r5, r6, lr}
100115b2:	000c      	movs	r4, r1
100115b4:	250e      	movs	r5, #14
100115b6:	5f49      	ldrsh	r1, [r1, r5]
100115b8:	f000 f860 	bl	1001167c <_lseek_r>
100115bc:	89a3      	ldrh	r3, [r4, #12]
100115be:	1c42      	adds	r2, r0, #1
100115c0:	d103      	bne.n	100115ca <__sseek+0x1a>
100115c2:	4a05      	ldr	r2, [pc, #20]	; (100115d8 <__sseek+0x28>)
100115c4:	4013      	ands	r3, r2
100115c6:	81a3      	strh	r3, [r4, #12]
100115c8:	e004      	b.n	100115d4 <__sseek+0x24>
100115ca:	2280      	movs	r2, #128	; 0x80
100115cc:	0152      	lsls	r2, r2, #5
100115ce:	4313      	orrs	r3, r2
100115d0:	81a3      	strh	r3, [r4, #12]
100115d2:	6560      	str	r0, [r4, #84]	; 0x54
100115d4:	bd70      	pop	{r4, r5, r6, pc}
100115d6:	46c0      	nop			; (mov r8, r8)
100115d8:	ffffefff 	.word	0xffffefff

100115dc <__sclose>:
100115dc:	b510      	push	{r4, lr}
100115de:	230e      	movs	r3, #14
100115e0:	5ec9      	ldrsh	r1, [r1, r3]
100115e2:	f000 f815 	bl	10011610 <_close_r>
100115e6:	bd10      	pop	{r4, pc}

100115e8 <_write_r>:
100115e8:	b570      	push	{r4, r5, r6, lr}
100115ea:	0005      	movs	r5, r0
100115ec:	0008      	movs	r0, r1
100115ee:	0011      	movs	r1, r2
100115f0:	2200      	movs	r2, #0
100115f2:	4c06      	ldr	r4, [pc, #24]	; (1001160c <_write_r+0x24>)
100115f4:	6022      	str	r2, [r4, #0]
100115f6:	001a      	movs	r2, r3
100115f8:	f7f8 fac0 	bl	10009b7c <_write>
100115fc:	1c43      	adds	r3, r0, #1
100115fe:	d103      	bne.n	10011608 <_write_r+0x20>
10011600:	6823      	ldr	r3, [r4, #0]
10011602:	2b00      	cmp	r3, #0
10011604:	d000      	beq.n	10011608 <_write_r+0x20>
10011606:	602b      	str	r3, [r5, #0]
10011608:	bd70      	pop	{r4, r5, r6, pc}
1001160a:	46c0      	nop			; (mov r8, r8)
1001160c:	1001525c 	.word	0x1001525c

10011610 <_close_r>:
10011610:	2300      	movs	r3, #0
10011612:	b570      	push	{r4, r5, r6, lr}
10011614:	4c06      	ldr	r4, [pc, #24]	; (10011630 <_close_r+0x20>)
10011616:	0005      	movs	r5, r0
10011618:	0008      	movs	r0, r1
1001161a:	6023      	str	r3, [r4, #0]
1001161c:	f7f8 fae8 	bl	10009bf0 <_close>
10011620:	1c43      	adds	r3, r0, #1
10011622:	d103      	bne.n	1001162c <_close_r+0x1c>
10011624:	6823      	ldr	r3, [r4, #0]
10011626:	2b00      	cmp	r3, #0
10011628:	d000      	beq.n	1001162c <_close_r+0x1c>
1001162a:	602b      	str	r3, [r5, #0]
1001162c:	bd70      	pop	{r4, r5, r6, pc}
1001162e:	46c0      	nop			; (mov r8, r8)
10011630:	1001525c 	.word	0x1001525c

10011634 <_fstat_r>:
10011634:	2300      	movs	r3, #0
10011636:	b570      	push	{r4, r5, r6, lr}
10011638:	4c06      	ldr	r4, [pc, #24]	; (10011654 <_fstat_r+0x20>)
1001163a:	0005      	movs	r5, r0
1001163c:	0008      	movs	r0, r1
1001163e:	0011      	movs	r1, r2
10011640:	6023      	str	r3, [r4, #0]
10011642:	f7f8 fad9 	bl	10009bf8 <_fstat>
10011646:	1c43      	adds	r3, r0, #1
10011648:	d103      	bne.n	10011652 <_fstat_r+0x1e>
1001164a:	6823      	ldr	r3, [r4, #0]
1001164c:	2b00      	cmp	r3, #0
1001164e:	d000      	beq.n	10011652 <_fstat_r+0x1e>
10011650:	602b      	str	r3, [r5, #0]
10011652:	bd70      	pop	{r4, r5, r6, pc}
10011654:	1001525c 	.word	0x1001525c

10011658 <_isatty_r>:
10011658:	2300      	movs	r3, #0
1001165a:	b570      	push	{r4, r5, r6, lr}
1001165c:	4c06      	ldr	r4, [pc, #24]	; (10011678 <_isatty_r+0x20>)
1001165e:	0005      	movs	r5, r0
10011660:	0008      	movs	r0, r1
10011662:	6023      	str	r3, [r4, #0]
10011664:	f7f8 face 	bl	10009c04 <_isatty>
10011668:	1c43      	adds	r3, r0, #1
1001166a:	d103      	bne.n	10011674 <_isatty_r+0x1c>
1001166c:	6823      	ldr	r3, [r4, #0]
1001166e:	2b00      	cmp	r3, #0
10011670:	d000      	beq.n	10011674 <_isatty_r+0x1c>
10011672:	602b      	str	r3, [r5, #0]
10011674:	bd70      	pop	{r4, r5, r6, pc}
10011676:	46c0      	nop			; (mov r8, r8)
10011678:	1001525c 	.word	0x1001525c

1001167c <_lseek_r>:
1001167c:	b570      	push	{r4, r5, r6, lr}
1001167e:	0005      	movs	r5, r0
10011680:	0008      	movs	r0, r1
10011682:	0011      	movs	r1, r2
10011684:	2200      	movs	r2, #0
10011686:	4c06      	ldr	r4, [pc, #24]	; (100116a0 <_lseek_r+0x24>)
10011688:	6022      	str	r2, [r4, #0]
1001168a:	001a      	movs	r2, r3
1001168c:	f7f8 fabc 	bl	10009c08 <_lseek>
10011690:	1c43      	adds	r3, r0, #1
10011692:	d103      	bne.n	1001169c <_lseek_r+0x20>
10011694:	6823      	ldr	r3, [r4, #0]
10011696:	2b00      	cmp	r3, #0
10011698:	d000      	beq.n	1001169c <_lseek_r+0x20>
1001169a:	602b      	str	r3, [r5, #0]
1001169c:	bd70      	pop	{r4, r5, r6, pc}
1001169e:	46c0      	nop			; (mov r8, r8)
100116a0:	1001525c 	.word	0x1001525c

100116a4 <memchr>:
100116a4:	b2c9      	uxtb	r1, r1
100116a6:	1882      	adds	r2, r0, r2
100116a8:	4290      	cmp	r0, r2
100116aa:	d004      	beq.n	100116b6 <memchr+0x12>
100116ac:	7803      	ldrb	r3, [r0, #0]
100116ae:	428b      	cmp	r3, r1
100116b0:	d002      	beq.n	100116b8 <memchr+0x14>
100116b2:	3001      	adds	r0, #1
100116b4:	e7f8      	b.n	100116a8 <memchr+0x4>
100116b6:	2000      	movs	r0, #0
100116b8:	4770      	bx	lr
	...

100116bc <_read_r>:
100116bc:	b570      	push	{r4, r5, r6, lr}
100116be:	0005      	movs	r5, r0
100116c0:	0008      	movs	r0, r1
100116c2:	0011      	movs	r1, r2
100116c4:	2200      	movs	r2, #0
100116c6:	4c06      	ldr	r4, [pc, #24]	; (100116e0 <_read_r+0x24>)
100116c8:	6022      	str	r2, [r4, #0]
100116ca:	001a      	movs	r2, r3
100116cc:	f7f8 fa36 	bl	10009b3c <_read>
100116d0:	1c43      	adds	r3, r0, #1
100116d2:	d103      	bne.n	100116dc <_read_r+0x20>
100116d4:	6823      	ldr	r3, [r4, #0]
100116d6:	2b00      	cmp	r3, #0
100116d8:	d000      	beq.n	100116dc <_read_r+0x20>
100116da:	602b      	str	r3, [r5, #0]
100116dc:	bd70      	pop	{r4, r5, r6, pc}
100116de:	46c0      	nop			; (mov r8, r8)
100116e0:	1001525c 	.word	0x1001525c

100116e4 <__aeabi_lmul>:
100116e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100116e6:	464f      	mov	r7, r9
100116e8:	4646      	mov	r6, r8
100116ea:	b4c0      	push	{r6, r7}
100116ec:	0416      	lsls	r6, r2, #16
100116ee:	0c36      	lsrs	r6, r6, #16
100116f0:	4699      	mov	r9, r3
100116f2:	0033      	movs	r3, r6
100116f4:	0405      	lsls	r5, r0, #16
100116f6:	0c2c      	lsrs	r4, r5, #16
100116f8:	0c07      	lsrs	r7, r0, #16
100116fa:	0c15      	lsrs	r5, r2, #16
100116fc:	4363      	muls	r3, r4
100116fe:	437e      	muls	r6, r7
10011700:	436f      	muls	r7, r5
10011702:	4365      	muls	r5, r4
10011704:	0c1c      	lsrs	r4, r3, #16
10011706:	19ad      	adds	r5, r5, r6
10011708:	1964      	adds	r4, r4, r5
1001170a:	469c      	mov	ip, r3
1001170c:	42a6      	cmp	r6, r4
1001170e:	d903      	bls.n	10011718 <__aeabi_lmul+0x34>
10011710:	2380      	movs	r3, #128	; 0x80
10011712:	025b      	lsls	r3, r3, #9
10011714:	4698      	mov	r8, r3
10011716:	4447      	add	r7, r8
10011718:	4663      	mov	r3, ip
1001171a:	0c25      	lsrs	r5, r4, #16
1001171c:	19ef      	adds	r7, r5, r7
1001171e:	041d      	lsls	r5, r3, #16
10011720:	464b      	mov	r3, r9
10011722:	434a      	muls	r2, r1
10011724:	4343      	muls	r3, r0
10011726:	0c2d      	lsrs	r5, r5, #16
10011728:	0424      	lsls	r4, r4, #16
1001172a:	1964      	adds	r4, r4, r5
1001172c:	1899      	adds	r1, r3, r2
1001172e:	19c9      	adds	r1, r1, r7
10011730:	0020      	movs	r0, r4
10011732:	bc0c      	pop	{r2, r3}
10011734:	4690      	mov	r8, r2
10011736:	4699      	mov	r9, r3
10011738:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001173a:	46c0      	nop			; (mov r8, r8)
1001173c:	10008e58 	.word	0x10008e58
10011740:	10008e66 	.word	0x10008e66
10011744:	10008e74 	.word	0x10008e74
10011748:	10008e82 	.word	0x10008e82
1001174c:	10008e90 	.word	0x10008e90
10011750:	10008e9e 	.word	0x10008e9e
10011754:	10008eac 	.word	0x10008eac
10011758:	10008ebc 	.word	0x10008ebc
1001175c:	10008ecc 	.word	0x10008ecc
10011760:	10008edc 	.word	0x10008edc
10011764:	10008eec 	.word	0x10008eec
10011768:	10008efc 	.word	0x10008efc
1001176c:	10008f0c 	.word	0x10008f0c
10011770:	10008f1c 	.word	0x10008f1c
10011774:	10008f2c 	.word	0x10008f2c
10011778:	10008f3c 	.word	0x10008f3c
1001177c:	10008f4c 	.word	0x10008f4c
10011780:	10008f5c 	.word	0x10008f5c
10011784:	10008f6c 	.word	0x10008f6c
10011788:	10008f7c 	.word	0x10008f7c
1001178c:	10008f8c 	.word	0x10008f8c
10011790:	10008f9c 	.word	0x10008f9c
10011794:	10008fac 	.word	0x10008fac
10011798:	10008fbc 	.word	0x10008fbc
1001179c:	10008fcc 	.word	0x10008fcc
100117a0:	10008fdc 	.word	0x10008fdc
100117a4:	10008fec 	.word	0x10008fec
100117a8:	10008ffc 	.word	0x10008ffc
100117ac:	1000900a 	.word	0x1000900a
100117b0:	10009018 	.word	0x10009018
100117b4:	10009026 	.word	0x10009026
100117b8:	10009034 	.word	0x10009034
100117bc:	10009042 	.word	0x10009042
100117c0:	10009050 	.word	0x10009050
100117c4:	1000905e 	.word	0x1000905e
100117c8:	1000906c 	.word	0x1000906c
100117cc:	1000907c 	.word	0x1000907c
100117d0:	1000908c 	.word	0x1000908c
100117d4:	1000909c 	.word	0x1000909c
100117d8:	100090ac 	.word	0x100090ac
100117dc:	100090bc 	.word	0x100090bc
100117e0:	100090cc 	.word	0x100090cc
100117e4:	100090dc 	.word	0x100090dc
100117e8:	100090ec 	.word	0x100090ec
100117ec:	100090fc 	.word	0x100090fc
100117f0:	1000910c 	.word	0x1000910c
100117f4:	1000911c 	.word	0x1000911c
100117f8:	1000912c 	.word	0x1000912c
100117fc:	1000913c 	.word	0x1000913c
10011800:	1000914c 	.word	0x1000914c
10011804:	1000915c 	.word	0x1000915c
10011808:	1000916c 	.word	0x1000916c
1001180c:	1000917a 	.word	0x1000917a
10011810:	10009188 	.word	0x10009188
10011814:	100091c8 	.word	0x100091c8
10011818:	100091f0 	.word	0x100091f0
1001181c:	10009218 	.word	0x10009218
10011820:	10009240 	.word	0x10009240
10011824:	10009480 	.word	0x10009480
10011828:	10009270 	.word	0x10009270
1001182c:	10009288 	.word	0x10009288
10011830:	10009300 	.word	0x10009300
10011834:	10009318 	.word	0x10009318
10011838:	100092a0 	.word	0x100092a0
1001183c:	100092b8 	.word	0x100092b8
10011840:	100092d0 	.word	0x100092d0
10011844:	100092e8 	.word	0x100092e8
10011848:	10009330 	.word	0x10009330
1001184c:	100095f4 	.word	0x100095f4
10011850:	100095f4 	.word	0x100095f4
10011854:	100095f4 	.word	0x100095f4
10011858:	100095f4 	.word	0x100095f4
1001185c:	100095f4 	.word	0x100095f4
10011860:	100095f4 	.word	0x100095f4
10011864:	100095f4 	.word	0x100095f4
10011868:	100095f4 	.word	0x100095f4
1001186c:	100093d8 	.word	0x100093d8
10011870:	100093f0 	.word	0x100093f0
10011874:	10009408 	.word	0x10009408
10011878:	10009496 	.word	0x10009496
1001187c:	10009360 	.word	0x10009360
10011880:	100095f4 	.word	0x100095f4
10011884:	100095f4 	.word	0x100095f4
10011888:	100095f4 	.word	0x100095f4
1001188c:	100095f4 	.word	0x100095f4
10011890:	100095f4 	.word	0x100095f4
10011894:	100095f4 	.word	0x100095f4
10011898:	10009420 	.word	0x10009420
1001189c:	10009438 	.word	0x10009438
100118a0:	10009450 	.word	0x10009450
100118a4:	10009468 	.word	0x10009468
100118a8:	100095f4 	.word	0x100095f4
100118ac:	100095ac 	.word	0x100095ac
100118b0:	100095c4 	.word	0x100095c4
100118b4:	100095f4 	.word	0x100095f4
100118b8:	100095f4 	.word	0x100095f4
100118bc:	100094c2 	.word	0x100094c2
100118c0:	100094d8 	.word	0x100094d8
100118c4:	100094ee 	.word	0x100094ee
100118c8:	10009504 	.word	0x10009504
100118cc:	100095f4 	.word	0x100095f4
100118d0:	100095f4 	.word	0x100095f4
100118d4:	100095f4 	.word	0x100095f4
100118d8:	100095f4 	.word	0x100095f4
100118dc:	100095f4 	.word	0x100095f4
100118e0:	100095f4 	.word	0x100095f4
100118e4:	100095f4 	.word	0x100095f4
100118e8:	100095f4 	.word	0x100095f4
100118ec:	100091b4 	.word	0x100091b4
100118f0:	100091dc 	.word	0x100091dc
100118f4:	10009204 	.word	0x10009204
100118f8:	1000922c 	.word	0x1000922c
100118fc:	10009258 	.word	0x10009258
10011900:	10009348 	.word	0x10009348
10011904:	10009378 	.word	0x10009378
10011908:	10009390 	.word	0x10009390
1001190c:	100093a8 	.word	0x100093a8
10011910:	100093c0 	.word	0x100093c0
10011914:	100094ac 	.word	0x100094ac
10011918:	1000951a 	.word	0x1000951a
1001191c:	10009594 	.word	0x10009594
10011920:	100095dc 	.word	0x100095dc
10011924:	10009ccc 	.word	0x10009ccc
10011928:	10009cce 	.word	0x10009cce
1001192c:	10009cb4 	.word	0x10009cb4
10011930:	10009cb4 	.word	0x10009cb4
10011934:	10009cb4 	.word	0x10009cb4
10011938:	10009ccc 	.word	0x10009ccc
1001193c:	10009cb4 	.word	0x10009cb4
10011940:	10009cb4 	.word	0x10009cb4
10011944:	1000a51a 	.word	0x1000a51a
10011948:	1000a58e 	.word	0x1000a58e
1001194c:	1000a502 	.word	0x1000a502
10011950:	1000a594 	.word	0x1000a594
10011954:	1000a508 	.word	0x1000a508
10011958:	1000a50e 	.word	0x1000a50e
1001195c:	1000a514 	.word	0x1000a514
10011960:	1000abec 	.word	0x1000abec
10011964:	1000abec 	.word	0x1000abec
10011968:	1000abec 	.word	0x1000abec
1001196c:	1000abec 	.word	0x1000abec
10011970:	1000abec 	.word	0x1000abec
10011974:	1000abec 	.word	0x1000abec
10011978:	1000abec 	.word	0x1000abec
1001197c:	1000abec 	.word	0x1000abec
10011980:	1000abec 	.word	0x1000abec
10011984:	1000abec 	.word	0x1000abec
10011988:	1000abec 	.word	0x1000abec
1001198c:	1000abec 	.word	0x1000abec
10011990:	1000abec 	.word	0x1000abec
10011994:	1000abec 	.word	0x1000abec
10011998:	1000abec 	.word	0x1000abec
1001199c:	1000abec 	.word	0x1000abec
100119a0:	1000abec 	.word	0x1000abec
100119a4:	1000abec 	.word	0x1000abec
100119a8:	1000abec 	.word	0x1000abec
100119ac:	1000ac0a 	.word	0x1000ac0a
100119b0:	1000ac0a 	.word	0x1000ac0a
100119b4:	1000ac0a 	.word	0x1000ac0a
100119b8:	1000ac0a 	.word	0x1000ac0a
100119bc:	1000ac0a 	.word	0x1000ac0a
100119c0:	1000ac0a 	.word	0x1000ac0a
100119c4:	1000ac0a 	.word	0x1000ac0a
100119c8:	1000ac0a 	.word	0x1000ac0a
100119cc:	1000ac0a 	.word	0x1000ac0a
100119d0:	1000ac0a 	.word	0x1000ac0a
100119d4:	1000ac2c 	.word	0x1000ac2c
100119d8:	1000ac2c 	.word	0x1000ac2c
100119dc:	1000ac2c 	.word	0x1000ac2c
100119e0:	1000ac2c 	.word	0x1000ac2c
100119e4:	1000ac2c 	.word	0x1000ac2c
100119e8:	1000ac2c 	.word	0x1000ac2c
100119ec:	1000ac2c 	.word	0x1000ac2c
100119f0:	1000ac2c 	.word	0x1000ac2c
100119f4:	1000ac2c 	.word	0x1000ac2c
100119f8:	1000ac2c 	.word	0x1000ac2c
100119fc:	1000ac4e 	.word	0x1000ac4e
10011a00:	1000ac4e 	.word	0x1000ac4e
10011a04:	1000ac4e 	.word	0x1000ac4e
10011a08:	1000ac4e 	.word	0x1000ac4e
10011a0c:	1000ac4e 	.word	0x1000ac4e
10011a10:	1000ac4e 	.word	0x1000ac4e
10011a14:	1000ac68 	.word	0x1000ac68
10011a18:	1000ac68 	.word	0x1000ac68
10011a1c:	1000ac68 	.word	0x1000ac68
10011a20:	1000ac68 	.word	0x1000ac68
10011a24:	1000ac68 	.word	0x1000ac68
10011a28:	1000ac68 	.word	0x1000ac68
10011a2c:	1000ac68 	.word	0x1000ac68
10011a30:	1000ac68 	.word	0x1000ac68
10011a34:	1000ac68 	.word	0x1000ac68
10011a38:	1000ac82 	.word	0x1000ac82
10011a3c:	1000ac82 	.word	0x1000ac82
10011a40:	1000aca4 	.word	0x1000aca4
10011a44:	1000aca4 	.word	0x1000aca4
10011a48:	1000acbe 	.word	0x1000acbe
10011a4c:	1000aca4 	.word	0x1000aca4
10011a50:	34333231 	.word	0x34333231
10011a54:	00003635 	.word	0x00003635
10011a58:	efcdab00 	.word	0xefcdab00
10011a5c:	00efcdab 	.word	0x00efcdab
10011a60:	b2d60600 	.word	0xb2d60600
10011a64:	f8f005f0 	.word	0xf8f005f0
10011a68:	00000000 	.word	0x00000000

10011a6c <ble_mgr_gatt_server_handle>:
	...
10011a84:	10009c11 10009c4d 10009c15 00000000     ....M...........
10011a94:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
10011aa4:	64656c69 00000000 2055544d 6e616843     iled....MTU Chan
10011ab4:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10011ac4:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10011ad4:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10011ae4:	69766544 64206563 6f637369 63656e6e     Device disconnec
10011af4:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10011b04:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10011b14:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10011b24:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10011b34:	6c706d6f 64657465 63757320 73736563     ompleted success
10011b44:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10011b54:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10011b64:	74707972 206e6f69 6f666e69 00000000     ryption info....
10011b74:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10011b84:	7320666f 206e6163 69766564 72206563     of scan device r
10011b94:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10011ba4:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10011bb4:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10011bc4:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10011bd4:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10011be4:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10011bf4:	46207473 656c6961 00000064 72696150     st Failed...Pair
10011c04:	20676e69 636f7270 72756465 6f632065     ing procedure co
10011c14:	656c706d 20646574 63637573 66737365     mpleted successf
10011c24:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10011c34:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10011c44:	726f7473 68742065 61702065 6e697269     store the pairin
10011c54:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10011c64:	4e206e6f 7320746f 74726174 00006465     on Not started..
10011c74:	76616c53 65532065 69727563 52207974     Slave Security R
10011c84:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10011c94:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10011ca4:	71655220 74736575 41202d20 65687475      Request - Authe
10011cb4:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10011cc4:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10011cd4:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10011ce4:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10011cf4:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10011d04:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10011d14:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10011d24:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10011d34:	206e6f28 6568746f 65442072 65636976     (on other Device
10011d44:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10011d54:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10011d64:	74616546 20657275 20746f4e 70707573     Feature Not supp
10011d74:	6574726f 00000064 65746e45 20646572     orted...Entered 
10011d84:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10011d94:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10011da4:	7020666f 20726565 69766564 69206563     of peer device i
10011db4:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10011dc4:	00000000 61656c50 75206573 6961706e     ....Please unpai
10011dd4:	68742072 65642065 65636976 6f726620     r the device fro
10011de4:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10011df4:	656c6962 65732029 6e697474 6d207367     bile) settings m
10011e04:	20756e65 20646e61 72617473 61702074     enu and start pa
10011e14:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10011e24:	69747079 52206e6f 65757165 52207473     yption Request R
10011e34:	796c7065 69614620 0064656c 74696e49     eply Failed.Init
10011e44:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10011e54:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10011e64:	6f697461 6166206e 64656c69 00000000     ation failed....
10011e74:	61656c50 63206573 6b636568 65687420     Please check the
10011e84:	776f7020 61207265 6320646e 656e6e6f      power and conne
10011e94:	6f697463 202f206e 64726168 65726177     ction / hardware
10011ea4:	6e6f6320 7463656e 0000726f 454d5441      connector..ATME
10011eb4:	4c422d4c 00000045 69766544 6e206563     L-BLE...Device n
10011ec4:	20656d61 20746573 6c696166 00006465     ame set failed..
10011ed4:	61204442 65726464 67207373 66207465     BD address get f
10011ee4:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10011ef4:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10011f04:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10011f14:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10011f24:	20746553 20454c42 69766544 63206563     Set BLE Device c
10011f34:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10011f44:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10011f54:	41206563 65726464 66207373 656c6961     ce Address faile
10011f64:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10011f74:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10011f84:	76616c53 65732065 69727563 72207974     Slave security r
10011f94:	65757165 66207473 656c6961 00000064     equest failed...
10011fa4:	6e6e6f43 65746365 6f742064 65657020     Connected to pee
10011fb4:	65642072 65636976 74697720 64612068     r device with ad
10011fc4:	73657264 78302073 78323025 78323025     dress 0x%02x%02x
10011fd4:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10011fe4:	00000000 6e6e6f43 69746365 48206e6f     ....Connection H
10011ff4:	6c646e61 64252065 00000000 6f736552     andle %d....Reso
10012004:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10012014:	73736572 69616620 2a64656c 0000002a     ress failed**...
10012024:	2078614d 626d756e 6f207265 6f632066     Max number of co
10012034:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10012044:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10012054:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10012064:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10012074:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10012084:	00000064 20454c42 65766441 73697472     d...BLE Advertis
10012094:	6e656d65 61642074 73206174 66207465     ement data set f
100120a4:	656c6961 00000064                       ailed...

100120ac <ble_mgr_gap_handle>:
100120ac:	10009c0d 10009dc9 10009c25 00000000     ........%.......
100120bc:	00000000 1000a8b5 10009c7d 10009c21     ........}...!...
100120cc:	10009f69 10009e49 1000a16d 10009f81     i...I...m.......
100120dc:	1000a2c1 1000a405 10009d05 1000aaf1     ................
	...

100120f8 <app_gap_cb>:
	...
10012110:	1000b9d5 00000000 00000000 1000b919     ................
	...
10012144:	72617453 20646574 20505448 706d6554     Started HTP Temp
10012154:	74617265 20657275 69746f4e 61636966     erature Notifica
10012164:	6e6f6974 00000000 20505448 706d6554     tion....HTP Temp
10012174:	74617265 20657275 69746f4e 61636966     erature Notifica
10012184:	6e6f6974 6f745320 64657070 00000000     tion Stopped....
10012194:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
100121a4:	70704120 6163696c 6e6f6974 69617020      Application pai
100121b4:	20646572 00000000 7373410a 6d6e6769     red .....Assignm
100121c4:	20746e65 3a312e34 616e6520 20656c62     ent 4.1: enable 
100121d4:	6c616568 74206874 65706d65 75746172     health temperatu
100121e4:	73206572 69767265 00206563 202a2a2a     re service .*** 
100121f4:	6c696146 20657275 48206e69 50205054     Failure in HTP P
10012204:	69666f72 4520656c 6c62616e 00000065     rofile Enable...
10012214:	7373410a 6d6e6769 20746e65 20312e32     .Assignment 2.1 
10012224:	7453203a 20747261 65766441 73697472     : Start Advertis
10012234:	00676e69 23230d0a 76644120 69747265     ing...## Adverti
10012244:	656d6573 6420746e 20617461 20746573     sement data set 
10012254:	6c696166 3a206465 72726520 2520726f     failed : error %
10012264:	00000078 7373410a 6d6e6769 20746e65     x....Assignment 
10012274:	3a322e33 70704120 6163696c 6e6f6974     3.2: Application
10012284:	73696420 6e6e6f63 65746365 00002064      disconnected ..
10012294:	706d6554 74617265 3a657275 20642520     Temperature: %d 
100122a4:	20676544 736c6543 00737569 7373410a     Deg Celsius..Ass
100122b4:	6d6e6769 20746e65 3a312e34 696e4920     ignment 4.1: Ini
100122c4:	65482074 68746c61 6d657420 61726570     t Health tempera
100122d4:	65727574 72657320 65636976 00000020     ture service ...
100122e4:	20505448 61746144 73614220 72632065     HTP Data Base cr
100122f4:	69746165 66206e6f 656c6961 00000064     eation failed...
10012304:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10012314:	67655220 65747369 6c622072 6f746575      Register blueto
10012324:	2068746f 6e657665 63207374 626c6c61     oth events callb
10012334:	736b6361 00000000 4523230a 726f7272     acks.....##Error
10012344:	65687720 6552206e 74736967 6e697265      when Registerin
10012354:	53202067 31424d41 61672031 61632070     g  SAMB11 gap ca
10012364:	61626c6c 00736b63 4523230a 726f7272     llbacks..##Error
10012374:	65687720 6552206e 74736967 6e697265      when Registerin
10012384:	53202067 31424d41 74682031 63207470     g  SAMB11 htpt c
10012394:	626c6c61 736b6361 00000000              allbacks....

100123a0 <app_htpt_handle>:
	...
100123b4:	1000b8e1 00000000 00000000 00000000     ................
100123c4:	656d7441 6f43206c 002e7072                       Atmel Corp.

100123cf <CSWTCH.47>:
100123cf:	03010300 03030303 03030303 00020303     ................
100123df:	00ed9400 00ecf210 00ecf210 00ecf010     ................
100123ef:	00ed8610 00ed8610 00ed7c10 00ecf010     .........|......
100123ff:	00ed8610 00ed7c10 00ed8610 00ecf010     .....|..........
1001240f:	00ed8c10 00ed8c10 00ed8c10 00ee1610     ................
1001241f:	00f3e010 00f2a010 00f2a010 00f29e10     ................
1001242f:	00f3b810 00f3b810 00f3aa10 00f29e10     ................
1001243f:	00f3b810 00f3aa10 00f3b810 00f29e10     ................
1001244f:	00f3c010 00f3c010 00f3c010 00f5c010     ................
1001245f:	00004310 01253000                                .C...

10012464 <_global_impure_ptr>:
10012464:	10012530                                0%..

10012468 <__sf_fake_stdin>:
	...

10012488 <__sf_fake_stdout>:
	...

100124a8 <__sf_fake_stderr>:
	...
100124c8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100124d8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100124e8:	31300046 35343332 39383736 64636261     F.0123456789abcd
100124f8:	00006665                                ef..

100124fc <_init>:
100124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100124fe:	46c0      	nop			; (mov r8, r8)
10012500:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012502:	bc08      	pop	{r3}
10012504:	469e      	mov	lr, r3
10012506:	4770      	bx	lr

10012508 <__init_array_start>:
10012508:	100080b1 	.word	0x100080b1

1001250c <_fini>:
1001250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001250e:	46c0      	nop			; (mov r8, r8)
10012510:	bcf8      	pop	{r3, r4, r5, r6, r7}
10012512:	bc08      	pop	{r3}
10012514:	469e      	mov	lr, r3
10012516:	4770      	bx	lr

10012518 <__fini_array_start>:
10012518:	10008089 	.word	0x10008089
