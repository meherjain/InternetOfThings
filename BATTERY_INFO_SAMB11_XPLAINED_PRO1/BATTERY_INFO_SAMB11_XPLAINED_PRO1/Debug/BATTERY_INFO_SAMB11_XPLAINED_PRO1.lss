
BATTERY_INFO_SAMB11_XPLAINED_PRO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b83c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  1001383c  1001383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002d3c  100138b4  100138b4  000138b4  2**2
                  ALLOC
  3 .stack        00000800  100165f0  100165f0  000138b4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000138b4  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000138dc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00031e8d  00000000  00000000  00013990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cb4  00000000  00000000  0004581d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000084eb  00000000  00000000  000494d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000910  00000000  00000000  000519bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000938  00000000  00000000  000522cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e8b9  00000000  00000000  00052c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f1a2  00000000  00000000  000714bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010d2f1  00000000  00000000  0008065f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002274  00000000  00000000  0018d950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001383c 	.word	0x1001383c
10008068:	1001383c 	.word	0x1001383c
1000806c:	100138b4 	.word	0x100138b4
10008070:	100165f0 	.word	0x100165f0
10008074:	100138b4 	.word	0x100138b4
10008078:	10013840 	.word	0x10013840
1000807c:	100138b8 	.word	0x100138b8
10008080:	10011631 	.word	0x10011631
10008084:	1000c24d 	.word	0x1000c24d

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100138b4 	.word	0x100138b4
100080a8:	00000000 	.word	0x00000000
100080ac:	1001383c 	.word	0x1001383c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100138b8 	.word	0x100138b8
100080dc:	1001383c 	.word	0x1001383c
100080e0:	1001383c 	.word	0x1001383c
100080e4:	00000000 	.word	0x00000000

100080e8 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
100080e8:	b510      	push	{r4, lr}
100080ea:	b086      	sub	sp, #24
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
100080ec:	a801      	add	r0, sp, #4
100080ee:	4b0c      	ldr	r3, [pc, #48]	; (10008120 <at30tse_init+0x38>)
100080f0:	4798      	blx	r3

	conf.pin_number_pad0 = AT30TSE_PIN_PAD0;
100080f2:	2308      	movs	r3, #8
100080f4:	9302      	str	r3, [sp, #8]
	conf.pin_number_pad1 = AT30TSE_PIN_PAD1;
100080f6:	3301      	adds	r3, #1
100080f8:	9304      	str	r3, [sp, #16]
	
	conf.pinmux_sel_pad0 = AT30TSE_MUX_PAD0;
100080fa:	3b07      	subs	r3, #7
100080fc:	9303      	str	r3, [sp, #12]
	conf.pinmux_sel_pad1 = AT30TSE_MUX_PAD1;
100080fe:	9305      	str	r3, [sp, #20]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_I2C_MODULE, &conf);
10008100:	4c08      	ldr	r4, [pc, #32]	; (10008124 <at30tse_init+0x3c>)
10008102:	aa01      	add	r2, sp, #4
10008104:	4908      	ldr	r1, [pc, #32]	; (10008128 <at30tse_init+0x40>)
10008106:	0020      	movs	r0, r4
10008108:	4b08      	ldr	r3, [pc, #32]	; (1000812c <at30tse_init+0x44>)
1000810a:	4798      	blx	r3
	i2c_enable(dev_inst_at30tse75x.hw);
1000810c:	6822      	ldr	r2, [r4, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000810e:	2128      	movs	r1, #40	; 0x28
10008110:	5c53      	ldrb	r3, [r2, r1]
10008112:	07db      	lsls	r3, r3, #31
10008114:	d4fc      	bmi.n	10008110 <at30tse_init+0x28>
static inline void i2c_enable(I2C *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
10008116:	2301      	movs	r3, #1
10008118:	7513      	strb	r3, [r2, #20]
}
1000811a:	b006      	add	sp, #24
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	10008779 	.word	0x10008779
10008124:	100153ac 	.word	0x100153ac
10008128:	40003000 	.word	0x40003000
1000812c:	10008791 	.word	0x10008791

10008130 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
10008130:	b570      	push	{r4, r5, r6, lr}
10008132:	b086      	sub	sp, #24
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
10008134:	ac05      	add	r4, sp, #20
10008136:	4301      	orrs	r1, r0
10008138:	7021      	strb	r1, [r4, #0]
	buffer[1] = 0;
1000813a:	2300      	movs	r3, #0
1000813c:	7063      	strb	r3, [r4, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
1000813e:	a903      	add	r1, sp, #12
10008140:	3348      	adds	r3, #72	; 0x48
10008142:	800b      	strh	r3, [r1, #0]
10008144:	2001      	movs	r0, #1
10008146:	8048      	strh	r0, [r1, #2]
10008148:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1,
		.data        = buffer,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
1000814a:	ad01      	add	r5, sp, #4
1000814c:	802b      	strh	r3, [r5, #0]
1000814e:	806a      	strh	r2, [r5, #2]
10008150:	9402      	str	r4, [sp, #8]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = reg_size,
		.data        = buffer,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
10008152:	4e07      	ldr	r6, [pc, #28]	; (10008170 <at30tse_read_register+0x40>)
10008154:	0030      	movs	r0, r6
10008156:	4b07      	ldr	r3, [pc, #28]	; (10008174 <at30tse_read_register+0x44>)
10008158:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
1000815a:	0029      	movs	r1, r5
1000815c:	0030      	movs	r0, r6
1000815e:	4b06      	ldr	r3, [pc, #24]	; (10008178 <at30tse_read_register+0x48>)
10008160:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
10008162:	7820      	ldrb	r0, [r4, #0]
10008164:	0200      	lsls	r0, r0, #8
10008166:	7863      	ldrb	r3, [r4, #1]
10008168:	4318      	orrs	r0, r3
}
1000816a:	b006      	add	sp, #24
1000816c:	bd70      	pop	{r4, r5, r6, pc}
1000816e:	46c0      	nop			; (mov r8, r8)
10008170:	100153ac 	.word	0x100153ac
10008174:	100088d5 	.word	0x100088d5
10008178:	10008875 	.word	0x10008875

1000817c <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
1000817c:	b510      	push	{r4, lr}
1000817e:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
10008180:	ac03      	add	r4, sp, #12
10008182:	4301      	orrs	r1, r0
10008184:	7021      	strb	r1, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
10008186:	0a19      	lsrs	r1, r3, #8
10008188:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
1000818a:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
1000818c:	a901      	add	r1, sp, #4
1000818e:	2348      	movs	r3, #72	; 0x48
10008190:	800b      	strh	r3, [r1, #0]
10008192:	3201      	adds	r2, #1
10008194:	804a      	strh	r2, [r1, #2]
10008196:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1 + reg_size,
		.data        = data,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
10008198:	4802      	ldr	r0, [pc, #8]	; (100081a4 <at30tse_write_register+0x28>)
1000819a:	4b03      	ldr	r3, [pc, #12]	; (100081a8 <at30tse_write_register+0x2c>)
1000819c:	4798      	blx	r3
}
1000819e:	b004      	add	sp, #16
100081a0:	bd10      	pop	{r4, pc}
100081a2:	46c0      	nop			; (mov r8, r8)
100081a4:	100153ac 	.word	0x100153ac
100081a8:	100088a5 	.word	0x100088a5

100081ac <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
100081ac:	b570      	push	{r4, r5, r6, lr}
100081ae:	0004      	movs	r4, r0
	at30tse_write_register(AT30TSE_CONFIG_REG,
100081b0:	0003      	movs	r3, r0
100081b2:	2201      	movs	r2, #1
100081b4:	2100      	movs	r1, #0
100081b6:	2001      	movs	r0, #1
100081b8:	4d03      	ldr	r5, [pc, #12]	; (100081c8 <at30tse_write_config_register+0x1c>)
100081ba:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
100081bc:	0464      	lsls	r4, r4, #17
100081be:	0fa4      	lsrs	r4, r4, #30
100081c0:	4b02      	ldr	r3, [pc, #8]	; (100081cc <at30tse_write_config_register+0x20>)
100081c2:	701c      	strb	r4, [r3, #0]

}
100081c4:	bd70      	pop	{r4, r5, r6, pc}
100081c6:	46c0      	nop			; (mov r8, r8)
100081c8:	1000817d 	.word	0x1000817d
100081cc:	100138d0 	.word	0x100138d0

100081d0 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature(void)
{
100081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
100081d2:	2202      	movs	r2, #2
100081d4:	2100      	movs	r1, #0
100081d6:	2000      	movs	r0, #0
100081d8:	4b21      	ldr	r3, [pc, #132]	; (10008260 <at30tse_read_temperature+0x90>)
100081da:	4798      	blx	r3
100081dc:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
100081de:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
100081e0:	0402      	lsls	r2, r0, #16
100081e2:	d502      	bpl.n	100081ea <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
100081e4:	0440      	lsls	r0, r0, #17
100081e6:	0c43      	lsrs	r3, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
100081e8:	3f02      	subs	r7, #2
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
100081ea:	4a1e      	ldr	r2, [pc, #120]	; (10008264 <at30tse_read_temperature+0x94>)
100081ec:	7816      	ldrb	r6, [r2, #0]
100081ee:	2e01      	cmp	r6, #1
100081f0:	d011      	beq.n	10008216 <at30tse_read_temperature+0x46>
100081f2:	2e00      	cmp	r6, #0
100081f4:	d004      	beq.n	10008200 <at30tse_read_temperature+0x30>
100081f6:	2e02      	cmp	r6, #2
100081f8:	d018      	beq.n	1000822c <at30tse_read_temperature+0x5c>
100081fa:	2e03      	cmp	r6, #3
100081fc:	d022      	beq.n	10008244 <at30tse_read_temperature+0x74>
100081fe:	e02c      	b.n	1000825a <at30tse_read_temperature+0x8a>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			temperature = data * sign * 0.5;
10008200:	09db      	lsrs	r3, r3, #7
10008202:	b29d      	uxth	r5, r3
10008204:	0038      	movs	r0, r7
10008206:	4368      	muls	r0, r5
10008208:	4b17      	ldr	r3, [pc, #92]	; (10008268 <at30tse_read_temperature+0x98>)
1000820a:	4798      	blx	r3
1000820c:	2200      	movs	r2, #0
1000820e:	4b17      	ldr	r3, [pc, #92]	; (1000826c <at30tse_read_temperature+0x9c>)
10008210:	4c17      	ldr	r4, [pc, #92]	; (10008270 <at30tse_read_temperature+0xa0>)
10008212:	47a0      	blx	r4
			break;
10008214:	e023      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			temperature = data * sign * 0.25;
10008216:	099b      	lsrs	r3, r3, #6
10008218:	b29c      	uxth	r4, r3
1000821a:	0038      	movs	r0, r7
1000821c:	4360      	muls	r0, r4
1000821e:	4b12      	ldr	r3, [pc, #72]	; (10008268 <at30tse_read_temperature+0x98>)
10008220:	4798      	blx	r3
10008222:	2200      	movs	r2, #0
10008224:	4b13      	ldr	r3, [pc, #76]	; (10008274 <at30tse_read_temperature+0xa4>)
10008226:	4c12      	ldr	r4, [pc, #72]	; (10008270 <at30tse_read_temperature+0xa0>)
10008228:	47a0      	blx	r4
			break;
1000822a:	e018      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			temperature = data * sign * 0.125;
1000822c:	095b      	lsrs	r3, r3, #5
1000822e:	b299      	uxth	r1, r3
10008230:	0038      	movs	r0, r7
10008232:	4348      	muls	r0, r1
10008234:	4b0c      	ldr	r3, [pc, #48]	; (10008268 <at30tse_read_temperature+0x98>)
10008236:	4798      	blx	r3
10008238:	2200      	movs	r2, #0
1000823a:	23ff      	movs	r3, #255	; 0xff
1000823c:	059b      	lsls	r3, r3, #22
1000823e:	4c0c      	ldr	r4, [pc, #48]	; (10008270 <at30tse_read_temperature+0xa0>)
10008240:	47a0      	blx	r4
			break;
10008242:	e00c      	b.n	1000825e <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
10008244:	091b      	lsrs	r3, r3, #4
10008246:	b29a      	uxth	r2, r3
10008248:	0038      	movs	r0, r7
1000824a:	4350      	muls	r0, r2
1000824c:	4b06      	ldr	r3, [pc, #24]	; (10008268 <at30tse_read_temperature+0x98>)
1000824e:	4798      	blx	r3
10008250:	2200      	movs	r2, #0
10008252:	4b09      	ldr	r3, [pc, #36]	; (10008278 <at30tse_read_temperature+0xa8>)
10008254:	4c06      	ldr	r4, [pc, #24]	; (10008270 <at30tse_read_temperature+0xa0>)
10008256:	47a0      	blx	r4
			break;
10008258:	e001      	b.n	1000825e <at30tse_read_temperature+0x8e>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
1000825a:	2000      	movs	r0, #0
1000825c:	2100      	movs	r1, #0
			break;
		default:
			break;
	}
	return temperature;
}
1000825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008260:	10008131 	.word	0x10008131
10008264:	100138d0 	.word	0x100138d0
10008268:	10010f7d 	.word	0x10010f7d
1000826c:	3fe00000 	.word	0x3fe00000
10008270:	10010375 	.word	0x10010375
10008274:	3fd00000 	.word	0x3fd00000
10008278:	3fb00000 	.word	0x3fb00000

1000827c <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
1000827c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000827e:	4647      	mov	r7, r8
10008280:	b480      	push	{r7}
10008282:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
10008284:	2380      	movs	r3, #128	; 0x80
10008286:	011b      	lsls	r3, r3, #4
10008288:	4a3a      	ldr	r2, [pc, #232]	; (10008374 <dma_isr_handler+0xf8>)
1000828a:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
1000828c:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000828e:	230f      	movs	r3, #15
10008290:	401c      	ands	r4, r3
10008292:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008294:	4b38      	ldr	r3, [pc, #224]	; (10008378 <dma_isr_handler+0xfc>)
10008296:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008298:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
1000829a:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
1000829c:	2100      	movs	r1, #0
1000829e:	e000      	b.n	100082a2 <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
100082a0:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
100082a2:	0852      	lsrs	r2, r2, #1
		index++;
100082a4:	1c4b      	adds	r3, r1, #1
100082a6:	b2db      	uxtb	r3, r3
	} while (channel);
100082a8:	2a00      	cmp	r2, #0
100082aa:	d1f9      	bne.n	100082a0 <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
100082ac:	0089      	lsls	r1, r1, #2
100082ae:	4643      	mov	r3, r8
100082b0:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082b2:	7803      	ldrb	r3, [r0, #0]
100082b4:	021b      	lsls	r3, r3, #8
100082b6:	4a31      	ldr	r2, [pc, #196]	; (1000837c <dma_isr_handler+0x100>)
100082b8:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100082ba:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082bc:	4a30      	ldr	r2, [pc, #192]	; (10008380 <dma_isr_handler+0x104>)
100082be:	589a      	ldr	r2, [r3, r2]
100082c0:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
100082c2:	22ff      	movs	r2, #255	; 0xff
100082c4:	4022      	ands	r2, r4
100082c6:	4215      	tst	r5, r2
100082c8:	d003      	beq.n	100082d2 <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
100082ca:	2600      	movs	r6, #0
100082cc:	2225      	movs	r2, #37	; 0x25
100082ce:	5486      	strb	r6, [r0, r2]
100082d0:	e02f      	b.n	10008332 <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
100082d2:	0797      	lsls	r7, r2, #30
100082d4:	d504      	bpl.n	100082e0 <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082d6:	2610      	movs	r6, #16
100082d8:	2225      	movs	r2, #37	; 0x25
100082da:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
100082dc:	002e      	movs	r6, r5
100082de:	e028      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
100082e0:	0757      	lsls	r7, r2, #29
100082e2:	d504      	bpl.n	100082ee <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082e4:	2610      	movs	r6, #16
100082e6:	2225      	movs	r2, #37	; 0x25
100082e8:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
100082ea:	3e0e      	subs	r6, #14
100082ec:	e021      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
100082ee:	0717      	lsls	r7, r2, #28
100082f0:	d504      	bpl.n	100082fc <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100082f2:	2610      	movs	r6, #16
100082f4:	2225      	movs	r2, #37	; 0x25
100082f6:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
100082f8:	3e0d      	subs	r6, #13
100082fa:	e01a      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
100082fc:	06d7      	lsls	r7, r2, #27
100082fe:	d504      	bpl.n	1000830a <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008300:	2610      	movs	r6, #16
10008302:	2225      	movs	r2, #37	; 0x25
10008304:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
10008306:	3e0c      	subs	r6, #12
10008308:	e013      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
1000830a:	0697      	lsls	r7, r2, #26
1000830c:	d504      	bpl.n	10008318 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000830e:	2610      	movs	r6, #16
10008310:	2225      	movs	r2, #37	; 0x25
10008312:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
10008314:	3e0b      	subs	r6, #11
10008316:	e00c      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008318:	0652      	lsls	r2, r2, #25
1000831a:	d504      	bpl.n	10008326 <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000831c:	2610      	movs	r6, #16
1000831e:	2225      	movs	r2, #37	; 0x25
10008320:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
10008322:	3e0a      	subs	r6, #10
10008324:	e005      	b.n	10008332 <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
10008326:	0622      	lsls	r2, r4, #24
10008328:	d503      	bpl.n	10008332 <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000832a:	2610      	movs	r6, #16
1000832c:	2225      	movs	r2, #37	; 0x25
1000832e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
10008330:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
10008332:	2900      	cmp	r1, #0
10008334:	d00e      	beq.n	10008354 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008336:	4913      	ldr	r1, [pc, #76]	; (10008384 <dma_isr_handler+0x108>)
10008338:	002a      	movs	r2, r5
1000833a:	40b2      	lsls	r2, r6
1000833c:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000833e:	2324      	movs	r3, #36	; 0x24
10008340:	5cc3      	ldrb	r3, [r0, r3]
10008342:	4133      	asrs	r3, r6
10008344:	421d      	tst	r5, r3
10008346:	d005      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
10008348:	00b3      	lsls	r3, r6, #2
1000834a:	18c3      	adds	r3, r0, r3
1000834c:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
1000834e:	2b00      	cmp	r3, #0
10008350:	d000      	beq.n	10008354 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
10008352:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
10008354:	002b      	movs	r3, r5
10008356:	40b3      	lsls	r3, r6
10008358:	439c      	bics	r4, r3
1000835a:	b263      	sxtb	r3, r4
1000835c:	2b00      	cmp	r3, #0
1000835e:	d19c      	bne.n	1000829a <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008360:	2180      	movs	r1, #128	; 0x80
10008362:	0209      	lsls	r1, r1, #8
10008364:	3381      	adds	r3, #129	; 0x81
10008366:	33ff      	adds	r3, #255	; 0xff
10008368:	4a07      	ldr	r2, [pc, #28]	; (10008388 <dma_isr_handler+0x10c>)
1000836a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
1000836c:	b002      	add	sp, #8
1000836e:	bc04      	pop	{r2}
10008370:	4690      	mov	r8, r2
10008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008374:	40002000 	.word	0x40002000
10008378:	100138d4 	.word	0x100138d4
1000837c:	400020ac 	.word	0x400020ac
10008380:	40002050 	.word	0x40002050
10008384:	400020a4 	.word	0x400020a4
10008388:	e000e100 	.word	0xe000e100

1000838c <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
1000838c:	2201      	movs	r2, #1
1000838e:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
10008390:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
10008392:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008394:	2300      	movs	r3, #0
10008396:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
10008398:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
1000839a:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
1000839c:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
1000839e:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
100083a0:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
100083a2:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
100083a4:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
100083a6:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
100083a8:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
100083aa:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
100083ac:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
100083ae:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
100083b0:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
100083b2:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
100083b4:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
100083b6:	74c3      	strb	r3, [r0, #19]
}
100083b8:	4770      	bx	lr
100083ba:	46c0      	nop			; (mov r8, r8)

100083bc <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
100083bc:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
100083be:	2325      	movs	r3, #37	; 0x25
100083c0:	5cc3      	ldrb	r3, [r0, r3]
100083c2:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
100083c4:	2b05      	cmp	r3, #5
100083c6:	d042      	beq.n	1000844e <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
100083c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
100083ca:	2a00      	cmp	r2, #0
100083cc:	d007      	beq.n	100083de <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
100083ce:	2303      	movs	r3, #3
100083d0:	68d4      	ldr	r4, [r2, #12]
100083d2:	439c      	bics	r4, r3
100083d4:	0023      	movs	r3, r4
100083d6:	2403      	movs	r4, #3
100083d8:	2b00      	cmp	r3, #0
100083da:	d11f      	bne.n	1000841c <dma_add_descriptor+0x60>
100083dc:	e02d      	b.n	1000843a <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
100083de:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083e0:	7803      	ldrb	r3, [r0, #0]
100083e2:	021b      	lsls	r3, r3, #8
100083e4:	4a1b      	ldr	r2, [pc, #108]	; (10008454 <dma_add_descriptor+0x98>)
100083e6:	4694      	mov	ip, r2
100083e8:	4463      	add	r3, ip
100083ea:	680a      	ldr	r2, [r1, #0]
100083ec:	601a      	str	r2, [r3, #0]
100083ee:	7803      	ldrb	r3, [r0, #0]
100083f0:	021b      	lsls	r3, r3, #8
100083f2:	4a19      	ldr	r2, [pc, #100]	; (10008458 <dma_add_descriptor+0x9c>)
100083f4:	4694      	mov	ip, r2
100083f6:	4463      	add	r3, ip
100083f8:	684a      	ldr	r2, [r1, #4]
100083fa:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
100083fc:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083fe:	7803      	ldrb	r3, [r0, #0]
10008400:	021b      	lsls	r3, r3, #8
10008402:	4916      	ldr	r1, [pc, #88]	; (1000845c <dma_add_descriptor+0xa0>)
10008404:	468c      	mov	ip, r1
10008406:	4463      	add	r3, ip
10008408:	601a      	str	r2, [r3, #0]
1000840a:	7803      	ldrb	r3, [r0, #0]
1000840c:	021b      	lsls	r3, r3, #8
1000840e:	4a14      	ldr	r2, [pc, #80]	; (10008460 <dma_add_descriptor+0xa4>)
10008410:	4694      	mov	ip, r2
10008412:	4463      	add	r3, ip
10008414:	2203      	movs	r2, #3
10008416:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008418:	2300      	movs	r3, #0
1000841a:	e018      	b.n	1000844e <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
1000841c:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000841e:	68d3      	ldr	r3, [r2, #12]
10008420:	43a3      	bics	r3, r4
10008422:	d1fb      	bne.n	1000841c <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
10008424:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008426:	2303      	movs	r3, #3
10008428:	68ca      	ldr	r2, [r1, #12]
1000842a:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
1000842c:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000842e:	2a00      	cmp	r2, #0
10008430:	d00d      	beq.n	1000844e <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
10008432:	3303      	adds	r3, #3
10008434:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
10008436:	2300      	movs	r3, #0
10008438:	e009      	b.n	1000844e <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000843a:	7803      	ldrb	r3, [r0, #0]
1000843c:	021b      	lsls	r3, r3, #8
1000843e:	4808      	ldr	r0, [pc, #32]	; (10008460 <dma_add_descriptor+0xa4>)
10008440:	4684      	mov	ip, r0
10008442:	4463      	add	r3, ip
10008444:	2003      	movs	r0, #3
10008446:	000c      	movs	r4, r1
10008448:	4384      	bics	r4, r0
1000844a:	601c      	str	r4, [r3, #0]
1000844c:	e7ea      	b.n	10008424 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
1000844e:	0018      	movs	r0, r3
10008450:	bd10      	pop	{r4, pc}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	40002000 	.word	0x40002000
10008458:	40002004 	.word	0x40002004
1000845c:	40002008 	.word	0x40002008
10008460:	4000200c 	.word	0x4000200c

10008464 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
10008464:	b082      	sub	sp, #8
10008466:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
10008468:	2325      	movs	r3, #37	; 0x25
1000846a:	5cc3      	ldrb	r3, [r0, r3]
1000846c:	b2d8      	uxtb	r0, r3
1000846e:	2805      	cmp	r0, #5
10008470:	d027      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008472:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
10008474:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
10008476:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008478:	2b00      	cmp	r3, #0
1000847a:	d022      	beq.n	100084c2 <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
1000847c:	7813      	ldrb	r3, [r2, #0]
1000847e:	021b      	lsls	r3, r3, #8
10008480:	4911      	ldr	r1, [pc, #68]	; (100084c8 <dma_start_transfer_job+0x64>)
10008482:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008484:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
10008486:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008488:	4910      	ldr	r1, [pc, #64]	; (100084cc <dma_start_transfer_job+0x68>)
1000848a:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
1000848c:	2324      	movs	r3, #36	; 0x24
1000848e:	5cd3      	ldrb	r3, [r2, r3]
10008490:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
10008492:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008494:	7813      	ldrb	r3, [r2, #0]
10008496:	021b      	lsls	r3, r3, #8
10008498:	480d      	ldr	r0, [pc, #52]	; (100084d0 <dma_start_transfer_job+0x6c>)
1000849a:	4684      	mov	ip, r0
1000849c:	4463      	add	r3, ip
1000849e:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
100084a0:	2105      	movs	r1, #5
100084a2:	2325      	movs	r3, #37	; 0x25
100084a4:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100084a6:	7813      	ldrb	r3, [r2, #0]
100084a8:	021b      	lsls	r3, r3, #8
100084aa:	490a      	ldr	r1, [pc, #40]	; (100084d4 <dma_start_transfer_job+0x70>)
100084ac:	468c      	mov	ip, r1
100084ae:	4463      	add	r3, ip
100084b0:	2101      	movs	r1, #1
100084b2:	6019      	str	r1, [r3, #0]
100084b4:	7813      	ldrb	r3, [r2, #0]
100084b6:	021b      	lsls	r3, r3, #8
100084b8:	4a07      	ldr	r2, [pc, #28]	; (100084d8 <dma_start_transfer_job+0x74>)
100084ba:	4694      	mov	ip, r2
100084bc:	4463      	add	r3, ip
100084be:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
100084c0:	2000      	movs	r0, #0
}
100084c2:	b002      	add	sp, #8
100084c4:	4770      	bx	lr
100084c6:	46c0      	nop			; (mov r8, r8)
100084c8:	400020ac 	.word	0x400020ac
100084cc:	400020a4 	.word	0x400020a4
100084d0:	400020a8 	.word	0x400020a8
100084d4:	40002040 	.word	0x40002040
100084d8:	40002044 	.word	0x40002044

100084dc <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
100084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100084de:	0004      	movs	r4, r0
100084e0:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
100084e2:	4b62      	ldr	r3, [pc, #392]	; (1000866c <dma_allocate+0x190>)
100084e4:	781b      	ldrb	r3, [r3, #0]
100084e6:	2b00      	cmp	r3, #0
100084e8:	d112      	bne.n	10008510 <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
100084ea:	2043      	movs	r0, #67	; 0x43
100084ec:	4b60      	ldr	r3, [pc, #384]	; (10008670 <dma_allocate+0x194>)
100084ee:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
100084f0:	4960      	ldr	r1, [pc, #384]	; (10008674 <dma_allocate+0x198>)
100084f2:	22cc      	movs	r2, #204	; 0xcc
100084f4:	5888      	ldr	r0, [r1, r2]
100084f6:	4b60      	ldr	r3, [pc, #384]	; (10008678 <dma_allocate+0x19c>)
100084f8:	4003      	ands	r3, r0
100084fa:	2080      	movs	r0, #128	; 0x80
100084fc:	0540      	lsls	r0, r0, #21
100084fe:	4303      	orrs	r3, r0
10008500:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
10008502:	495e      	ldr	r1, [pc, #376]	; (1000867c <dma_allocate+0x1a0>)
10008504:	201f      	movs	r0, #31
10008506:	4b5e      	ldr	r3, [pc, #376]	; (10008680 <dma_allocate+0x1a4>)
10008508:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
1000850a:	2201      	movs	r2, #1
1000850c:	4b57      	ldr	r3, [pc, #348]	; (1000866c <dma_allocate+0x190>)
1000850e:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
10008510:	4b56      	ldr	r3, [pc, #344]	; (1000866c <dma_allocate+0x190>)
10008512:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008514:	07d3      	lsls	r3, r2, #31
10008516:	d500      	bpl.n	1000851a <dma_allocate+0x3e>
10008518:	e0a2      	b.n	10008660 <dma_allocate+0x184>
1000851a:	e002      	b.n	10008522 <dma_allocate+0x46>
1000851c:	4211      	tst	r1, r2
1000851e:	d10e      	bne.n	1000853e <dma_allocate+0x62>
10008520:	e000      	b.n	10008524 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008522:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008524:	4a51      	ldr	r2, [pc, #324]	; (1000866c <dma_allocate+0x190>)
10008526:	6850      	ldr	r0, [r2, #4]
10008528:	2101      	movs	r1, #1
1000852a:	4099      	lsls	r1, r3
1000852c:	4301      	orrs	r1, r0
1000852e:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
10008530:	7a11      	ldrb	r1, [r2, #8]
10008532:	3901      	subs	r1, #1
10008534:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008536:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
10008538:	2bff      	cmp	r3, #255	; 0xff
1000853a:	d107      	bne.n	1000854c <dma_allocate+0x70>
1000853c:	e094      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
1000853e:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008540:	3301      	adds	r3, #1
10008542:	b2db      	uxtb	r3, r3
10008544:	2b05      	cmp	r3, #5
10008546:	d1e9      	bne.n	1000851c <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008548:	2014      	movs	r0, #20
1000854a:	e08d      	b.n	10008668 <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
1000854c:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000854e:	021b      	lsls	r3, r3, #8
10008550:	4a4c      	ldr	r2, [pc, #304]	; (10008684 <dma_allocate+0x1a8>)
10008552:	4694      	mov	ip, r2
10008554:	4463      	add	r3, ip
10008556:	782a      	ldrb	r2, [r5, #0]
10008558:	267f      	movs	r6, #127	; 0x7f
1000855a:	4032      	ands	r2, r6
1000855c:	78a9      	ldrb	r1, [r5, #2]
1000855e:	07c9      	lsls	r1, r1, #31
10008560:	430a      	orrs	r2, r1
10008562:	7869      	ldrb	r1, [r5, #1]
10008564:	0409      	lsls	r1, r1, #16
10008566:	20fc      	movs	r0, #252	; 0xfc
10008568:	0380      	lsls	r0, r0, #14
1000856a:	4001      	ands	r1, r0
1000856c:	430a      	orrs	r2, r1
1000856e:	601a      	str	r2, [r3, #0]
10008570:	7823      	ldrb	r3, [r4, #0]
10008572:	021b      	lsls	r3, r3, #8
10008574:	4a44      	ldr	r2, [pc, #272]	; (10008688 <dma_allocate+0x1ac>)
10008576:	4694      	mov	ip, r2
10008578:	4463      	add	r3, ip
1000857a:	7a6a      	ldrb	r2, [r5, #9]
1000857c:	4032      	ands	r2, r6
1000857e:	7ae9      	ldrb	r1, [r5, #11]
10008580:	07c9      	lsls	r1, r1, #31
10008582:	430a      	orrs	r2, r1
10008584:	7aa9      	ldrb	r1, [r5, #10]
10008586:	0409      	lsls	r1, r1, #16
10008588:	4008      	ands	r0, r1
1000858a:	4310      	orrs	r0, r2
1000858c:	6018      	str	r0, [r3, #0]
1000858e:	7823      	ldrb	r3, [r4, #0]
10008590:	021b      	lsls	r3, r3, #8
10008592:	4a3e      	ldr	r2, [pc, #248]	; (1000868c <dma_allocate+0x1b0>)
10008594:	4694      	mov	ip, r2
10008596:	4463      	add	r3, ip
10008598:	7cea      	ldrb	r2, [r5, #19]
1000859a:	0712      	lsls	r2, r2, #28
1000859c:	21c0      	movs	r1, #192	; 0xc0
1000859e:	0589      	lsls	r1, r1, #22
100085a0:	400a      	ands	r2, r1
100085a2:	7ca9      	ldrb	r1, [r5, #18]
100085a4:	0409      	lsls	r1, r1, #16
100085a6:	430a      	orrs	r2, r1
100085a8:	601a      	str	r2, [r3, #0]
100085aa:	7823      	ldrb	r3, [r4, #0]
100085ac:	021b      	lsls	r3, r3, #8
100085ae:	4a38      	ldr	r2, [pc, #224]	; (10008690 <dma_allocate+0x1b4>)
100085b0:	4694      	mov	ip, r2
100085b2:	4463      	add	r3, ip
100085b4:	792f      	ldrb	r7, [r5, #4]
100085b6:	023f      	lsls	r7, r7, #8
100085b8:	21e0      	movs	r1, #224	; 0xe0
100085ba:	00c9      	lsls	r1, r1, #3
100085bc:	003a      	movs	r2, r7
100085be:	400a      	ands	r2, r1
100085c0:	7b2e      	ldrb	r6, [r5, #12]
100085c2:	0436      	lsls	r6, r6, #16
100085c4:	20f8      	movs	r0, #248	; 0xf8
100085c6:	0340      	lsls	r0, r0, #13
100085c8:	4006      	ands	r6, r0
100085ca:	4332      	orrs	r2, r6
100085cc:	0017      	movs	r7, r2
100085ce:	78e8      	ldrb	r0, [r5, #3]
100085d0:	221f      	movs	r2, #31
100085d2:	4002      	ands	r2, r0
100085d4:	003e      	movs	r6, r7
100085d6:	4316      	orrs	r6, r2
100085d8:	7b6a      	ldrb	r2, [r5, #13]
100085da:	0612      	lsls	r2, r2, #24
100085dc:	20e0      	movs	r0, #224	; 0xe0
100085de:	04c0      	lsls	r0, r0, #19
100085e0:	4002      	ands	r2, r0
100085e2:	4332      	orrs	r2, r6
100085e4:	601a      	str	r2, [r3, #0]
100085e6:	7820      	ldrb	r0, [r4, #0]
100085e8:	0200      	lsls	r0, r0, #8
100085ea:	4b2a      	ldr	r3, [pc, #168]	; (10008694 <dma_allocate+0x1b8>)
100085ec:	469c      	mov	ip, r3
100085ee:	4460      	add	r0, ip
100085f0:	79ab      	ldrb	r3, [r5, #6]
100085f2:	2607      	movs	r6, #7
100085f4:	4033      	ands	r3, r6
100085f6:	796e      	ldrb	r6, [r5, #5]
100085f8:	2208      	movs	r2, #8
100085fa:	40b2      	lsls	r2, r6
100085fc:	4313      	orrs	r3, r2
100085fe:	79ee      	ldrb	r6, [r5, #7]
10008600:	2280      	movs	r2, #128	; 0x80
10008602:	40b2      	lsls	r2, r6
10008604:	4313      	orrs	r3, r2
10008606:	7bae      	ldrb	r6, [r5, #14]
10008608:	2280      	movs	r2, #128	; 0x80
1000860a:	0112      	lsls	r2, r2, #4
1000860c:	40b2      	lsls	r2, r6
1000860e:	4313      	orrs	r3, r2
10008610:	7c2e      	ldrb	r6, [r5, #16]
10008612:	2280      	movs	r2, #128	; 0x80
10008614:	0212      	lsls	r2, r2, #8
10008616:	40b2      	lsls	r2, r6
10008618:	4313      	orrs	r3, r2
1000861a:	001e      	movs	r6, r3
1000861c:	7a2a      	ldrb	r2, [r5, #8]
1000861e:	0112      	lsls	r2, r2, #4
10008620:	2370      	movs	r3, #112	; 0x70
10008622:	401a      	ands	r2, r3
10008624:	0033      	movs	r3, r6
10008626:	4313      	orrs	r3, r2
10008628:	7bea      	ldrb	r2, [r5, #15]
1000862a:	0212      	lsls	r2, r2, #8
1000862c:	4011      	ands	r1, r2
1000862e:	430b      	orrs	r3, r1
10008630:	7c69      	ldrb	r1, [r5, #17]
10008632:	0309      	lsls	r1, r1, #12
10008634:	22e0      	movs	r2, #224	; 0xe0
10008636:	01d2      	lsls	r2, r2, #7
10008638:	4011      	ands	r1, r2
1000863a:	430b      	orrs	r3, r1
1000863c:	6003      	str	r3, [r0, #0]
1000863e:	1d23      	adds	r3, r4, #4
10008640:	0021      	movs	r1, r4
10008642:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
10008644:	2200      	movs	r2, #0
10008646:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
10008648:	428b      	cmp	r3, r1
1000864a:	d1fc      	bne.n	10008646 <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
1000864c:	2300      	movs	r3, #0
1000864e:	2224      	movs	r2, #36	; 0x24
10008650:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
10008652:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
10008654:	7823      	ldrb	r3, [r4, #0]
10008656:	009b      	lsls	r3, r3, #2
10008658:	4a0f      	ldr	r2, [pc, #60]	; (10008698 <dma_allocate+0x1bc>)
1000865a:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
1000865c:	2000      	movs	r0, #0
1000865e:	e003      	b.n	10008668 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
10008660:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008662:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
10008664:	2101      	movs	r1, #1
10008666:	e759      	b.n	1000851c <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
10008668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000866a:	46c0      	nop			; (mov r8, r8)
1000866c:	1001383c 	.word	0x1001383c
10008670:	10009541 	.word	0x10009541
10008674:	4000b000 	.word	0x4000b000
10008678:	e0ffffff 	.word	0xe0ffffff
1000867c:	1000827d 	.word	0x1000827d
10008680:	100099a9 	.word	0x100099a9
10008684:	40002010 	.word	0x40002010
10008688:	40002014 	.word	0x40002014
1000868c:	40002018 	.word	0x40002018
10008690:	40002020 	.word	0x40002020
10008694:	40002838 	.word	0x40002838
10008698:	100138d4 	.word	0x100138d4

1000869c <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000869c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000869e:	464f      	mov	r7, r9
100086a0:	4646      	mov	r6, r8
100086a2:	b4c0      	push	{r6, r7}
100086a4:	4681      	mov	r9, r0
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
100086a6:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
100086a8:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
100086aa:	2d00      	cmp	r5, #0
100086ac:	d02f      	beq.n	1000870e <_i2c_master_read_packet+0x72>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2C *const i2c_module    = (module->hw);
100086ae:	6802      	ldr	r2, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100086b0:	2428      	movs	r4, #40	; 0x28
100086b2:	5d13      	ldrb	r3, [r2, r4]
100086b4:	07db      	lsls	r3, r3, #31
100086b6:	d4fc      	bmi.n	100086b2 <_i2c_master_read_packet+0x16>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100086b8:	2301      	movs	r3, #1
100086ba:	2434      	movs	r4, #52	; 0x34
100086bc:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
100086be:	3c14      	subs	r4, #20
100086c0:	5513      	strb	r3, [r2, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
100086c2:	880b      	ldrh	r3, [r1, #0]
100086c4:	005b      	lsls	r3, r3, #1
100086c6:	2402      	movs	r4, #2
100086c8:	34ff      	adds	r4, #255	; 0xff
100086ca:	4323      	orrs	r3, r4
100086cc:	b29b      	uxth	r3, r3
100086ce:	8013      	strh	r3, [r2, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
100086d0:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086d2:	2301      	movs	r3, #1
100086d4:	4698      	mov	r8, r3
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;
	do {
		status = i2c_module->RECEIVE_STATUS.reg;
100086d6:	7b13      	ldrb	r3, [r2, #12]
100086d8:	b2db      	uxtb	r3, r3
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
100086da:	4640      	mov	r0, r8
100086dc:	4218      	tst	r0, r3
100086de:	d006      	beq.n	100086ee <_i2c_master_read_packet+0x52>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
100086e0:	1c67      	adds	r7, r4, #1
100086e2:	7910      	ldrb	r0, [r2, #4]
100086e4:	4684      	mov	ip, r0
100086e6:	6848      	ldr	r0, [r1, #4]
100086e8:	4666      	mov	r6, ip
100086ea:	5506      	strb	r6, [r0, r4]
100086ec:	b2bc      	uxth	r4, r7
	} while (counter < length); 
100086ee:	42ac      	cmp	r4, r5
100086f0:	d3f1      	bcc.n	100086d6 <_i2c_master_read_packet+0x3a>

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086f2:	06db      	lsls	r3, r3, #27
100086f4:	d403      	bmi.n	100086fe <_i2c_master_read_packet+0x62>
100086f6:	2110      	movs	r1, #16
		status = i2c_module->TRANSMIT_STATUS.reg;
100086f8:	7a13      	ldrb	r3, [r2, #8]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100086fa:	420b      	tst	r3, r1
100086fc:	d0fc      	beq.n	100086f8 <_i2c_master_read_packet+0x5c>
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
100086fe:	464b      	mov	r3, r9
10008700:	7959      	ldrb	r1, [r3, #5]
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
	}

	return STATUS_OK;
10008702:	2300      	movs	r3, #0
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition. */
	if (!module->no_stop) {
10008704:	2900      	cmp	r1, #0
10008706:	d102      	bne.n	1000870e <_i2c_master_read_packet+0x72>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008708:	3320      	adds	r3, #32
1000870a:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
1000870c:	2300      	movs	r3, #0
}
1000870e:	0018      	movs	r0, r3
10008710:	bc0c      	pop	{r2, r3}
10008712:	4690      	mov	r8, r2
10008714:	4699      	mov	r9, r3
10008716:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008718 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008718:	b5f0      	push	{r4, r5, r6, r7, lr}
1000871a:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
1000871c:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
1000871e:	884e      	ldrh	r6, [r1, #2]
10008720:	2428      	movs	r4, #40	; 0x28
10008722:	5d13      	ldrb	r3, [r2, r4]
10008724:	07db      	lsls	r3, r3, #31
10008726:	d4fc      	bmi.n	10008722 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008728:	2301      	movs	r3, #1
1000872a:	2434      	movs	r4, #52	; 0x34
1000872c:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
1000872e:	3c14      	subs	r4, #20
10008730:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
10008732:	880b      	ldrh	r3, [r1, #0]
10008734:	005b      	lsls	r3, r3, #1
10008736:	34e0      	adds	r4, #224	; 0xe0
10008738:	4323      	orrs	r3, r4
1000873a:	b29b      	uxth	r3, r3
1000873c:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
	uint16_t counter = 0;
1000873e:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008740:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
10008742:	7a13      	ldrb	r3, [r2, #8]
10008744:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
10008746:	421d      	tst	r5, r3
10008748:	d004      	beq.n	10008754 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
1000874a:	1c67      	adds	r7, r4, #1
1000874c:	6848      	ldr	r0, [r1, #4]
1000874e:	5d04      	ldrb	r4, [r0, r4]
10008750:	8014      	strh	r4, [r2, #0]
10008752:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
10008754:	42b4      	cmp	r4, r6
10008756:	d3f4      	bcc.n	10008742 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008758:	06db      	lsls	r3, r3, #27
1000875a:	d403      	bmi.n	10008764 <_i2c_master_write_packet+0x4c>
1000875c:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
1000875e:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008760:	420b      	tst	r3, r1
10008762:	d0fc      	beq.n	1000875e <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
10008764:	4663      	mov	r3, ip
10008766:	795b      	ldrb	r3, [r3, #5]
10008768:	2b00      	cmp	r3, #0
1000876a:	d102      	bne.n	10008772 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000876c:	2100      	movs	r1, #0
1000876e:	3320      	adds	r3, #32
10008770:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
10008772:	2000      	movs	r0, #0
10008774:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008776:	46c0      	nop			; (mov r8, r8)

10008778 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008778:	2303      	movs	r3, #3
1000877a:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
1000877c:	330d      	adds	r3, #13
1000877e:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
10008780:	3b08      	subs	r3, #8
10008782:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
10008784:	3301      	adds	r3, #1
10008786:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
10008788:	3b07      	subs	r3, #7
1000878a:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
1000878c:	6103      	str	r3, [r0, #16]
}
1000878e:	4770      	bx	lr

10008790 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
10008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008792:	0004      	movs	r4, r0
10008794:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008796:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008798:	2800      	cmp	r0, #0
1000879a:	d056      	beq.n	1000884a <i2c_master_init+0xba>
1000879c:	2a00      	cmp	r2, #0
1000879e:	d056      	beq.n	1000884e <i2c_master_init+0xbe>
100087a0:	2228      	movs	r2, #40	; 0x28
100087a2:	5c8b      	ldrb	r3, [r1, r2]
100087a4:	07db      	lsls	r3, r3, #31
100087a6:	d4fc      	bmi.n	100087a2 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100087a8:	2300      	movs	r3, #0
100087aa:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100087ac:	6823      	ldr	r3, [r4, #0]
100087ae:	4a29      	ldr	r2, [pc, #164]	; (10008854 <i2c_master_init+0xc4>)
100087b0:	4293      	cmp	r3, r2
100087b2:	d103      	bne.n	100087bc <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100087b4:	2003      	movs	r0, #3
100087b6:	4b28      	ldr	r3, [pc, #160]	; (10008858 <i2c_master_init+0xc8>)
100087b8:	4798      	blx	r3
100087ba:	e006      	b.n	100087ca <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100087bc:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100087be:	4a27      	ldr	r2, [pc, #156]	; (1000885c <i2c_master_init+0xcc>)
100087c0:	4293      	cmp	r3, r2
100087c2:	d145      	bne.n	10008850 <i2c_master_init+0xc0>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100087c4:	3002      	adds	r0, #2
100087c6:	4b24      	ldr	r3, [pc, #144]	; (10008858 <i2c_master_init+0xc8>)
100087c8:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
100087ca:	2300      	movs	r3, #0
100087cc:	7423      	strb	r3, [r4, #16]
	module->enabled_callback    = 0;
100087ce:	7463      	strb	r3, [r4, #17]
	module->buffer_length       = 0;
100087d0:	8263      	strh	r3, [r4, #18]
	module->buffer_remaining    = 0;
100087d2:	82a3      	strh	r3, [r4, #20]
	module->status              = STATUS_OK;
100087d4:	2200      	movs	r2, #0
100087d6:	7762      	strb	r2, [r4, #29]
	module->buffer              = NULL;
100087d8:	61a3      	str	r3, [r4, #24]

	_i2c_instances = (void*)module;
100087da:	4b21      	ldr	r3, [pc, #132]	; (10008860 <i2c_master_init+0xd0>)
100087dc:	601c      	str	r4, [r3, #0]
	if (module->hw == I2C0) {
100087de:	6823      	ldr	r3, [r4, #0]
100087e0:	4a1c      	ldr	r2, [pc, #112]	; (10008854 <i2c_master_init+0xc4>)
100087e2:	4293      	cmp	r3, r2
100087e4:	d10f      	bne.n	10008806 <i2c_master_init+0x76>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087e6:	4f1f      	ldr	r7, [pc, #124]	; (10008864 <i2c_master_init+0xd4>)
100087e8:	0039      	movs	r1, r7
100087ea:	2018      	movs	r0, #24
100087ec:	4e1e      	ldr	r6, [pc, #120]	; (10008868 <i2c_master_init+0xd8>)
100087ee:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
100087f0:	0039      	movs	r1, r7
100087f2:	2019      	movs	r0, #25
100087f4:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100087f6:	4b1d      	ldr	r3, [pc, #116]	; (1000886c <i2c_master_init+0xdc>)
100087f8:	2280      	movs	r2, #128	; 0x80
100087fa:	0052      	lsls	r2, r2, #1
100087fc:	601a      	str	r2, [r3, #0]
100087fe:	3201      	adds	r2, #1
10008800:	32ff      	adds	r2, #255	; 0xff
10008802:	601a      	str	r2, [r3, #0]
10008804:	e011      	b.n	1000882a <i2c_master_init+0x9a>
		NVIC_EnableIRQ(I2C0_RX_IRQn);
		NVIC_EnableIRQ(I2C0_TX_IRQn);
	} else if (module->hw == I2C1) {
10008806:	4a15      	ldr	r2, [pc, #84]	; (1000885c <i2c_master_init+0xcc>)
10008808:	4293      	cmp	r3, r2
1000880a:	d10e      	bne.n	1000882a <i2c_master_init+0x9a>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000880c:	4f15      	ldr	r7, [pc, #84]	; (10008864 <i2c_master_init+0xd4>)
1000880e:	0039      	movs	r1, r7
10008810:	201a      	movs	r0, #26
10008812:	4e15      	ldr	r6, [pc, #84]	; (10008868 <i2c_master_init+0xd8>)
10008814:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
10008816:	0039      	movs	r1, r7
10008818:	201b      	movs	r0, #27
1000881a:	47b0      	blx	r6
1000881c:	4b13      	ldr	r3, [pc, #76]	; (1000886c <i2c_master_init+0xdc>)
1000881e:	2280      	movs	r2, #128	; 0x80
10008820:	00d2      	lsls	r2, r2, #3
10008822:	601a      	str	r2, [r3, #0]
10008824:	2280      	movs	r2, #128	; 0x80
10008826:	0112      	lsls	r2, r2, #4
10008828:	601a      	str	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000882a:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
1000882c:	8929      	ldrh	r1, [r5, #8]
1000882e:	7928      	ldrb	r0, [r5, #4]
10008830:	4e0f      	ldr	r6, [pc, #60]	; (10008870 <i2c_master_init+0xe0>)
10008832:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008834:	8a29      	ldrh	r1, [r5, #16]
10008836:	7b28      	ldrb	r0, [r5, #12]
10008838:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000883a:	782b      	ldrb	r3, [r5, #0]
1000883c:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000883e:	886b      	ldrh	r3, [r5, #2]
10008840:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
10008842:	2301      	movs	r3, #1
10008844:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008846:	2000      	movs	r0, #0
10008848:	e002      	b.n	10008850 <i2c_master_init+0xc0>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
1000884a:	2017      	movs	r0, #23
1000884c:	e000      	b.n	10008850 <i2c_master_init+0xc0>
1000884e:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008852:	46c0      	nop			; (mov r8, r8)
10008854:	40003000 	.word	0x40003000
10008858:	10009541 	.word	0x10009541
1000885c:	40003400 	.word	0x40003400
10008860:	100153cc 	.word	0x100153cc
10008864:	10008905 	.word	0x10008905
10008868:	100099a9 	.word	0x100099a9
1000886c:	e000e100 	.word	0xe000e100
10008870:	10009009 	.word	0x10009009

10008874 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008874:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008876:	2800      	cmp	r0, #0
10008878:	d00c      	beq.n	10008894 <i2c_master_read_packet_wait+0x20>
1000887a:	2900      	cmp	r1, #0
1000887c:	d00c      	beq.n	10008898 <i2c_master_read_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
1000887e:	8a82      	ldrh	r2, [r0, #20]
10008880:	b292      	uxth	r2, r2
		return STATUS_BUSY;
10008882:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
10008884:	2a00      	cmp	r2, #0
10008886:	d108      	bne.n	1000889a <i2c_master_read_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
10008888:	2300      	movs	r3, #0
1000888a:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
1000888c:	4b04      	ldr	r3, [pc, #16]	; (100088a0 <i2c_master_read_packet_wait+0x2c>)
1000888e:	4798      	blx	r3
10008890:	0003      	movs	r3, r0
10008892:	e002      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
10008894:	2317      	movs	r3, #23
10008896:	e000      	b.n	1000889a <i2c_master_read_packet_wait+0x26>
10008898:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
1000889a:	0018      	movs	r0, r3
1000889c:	bd10      	pop	{r4, pc}
1000889e:	46c0      	nop			; (mov r8, r8)
100088a0:	1000869d 	.word	0x1000869d

100088a4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088a4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100088a6:	2800      	cmp	r0, #0
100088a8:	d00c      	beq.n	100088c4 <i2c_master_write_packet_wait+0x20>
100088aa:	2900      	cmp	r1, #0
100088ac:	d00c      	beq.n	100088c8 <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088ae:	8a82      	ldrh	r2, [r0, #20]
100088b0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088b2:	2305      	movs	r3, #5
	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100088b4:	2a00      	cmp	r2, #0
100088b6:	d108      	bne.n	100088ca <i2c_master_write_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100088b8:	2300      	movs	r3, #0
100088ba:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088bc:	4b04      	ldr	r3, [pc, #16]	; (100088d0 <i2c_master_write_packet_wait+0x2c>)
100088be:	4798      	blx	r3
100088c0:	0003      	movs	r3, r0
100088c2:	e002      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088c4:	2317      	movs	r3, #23
100088c6:	e000      	b.n	100088ca <i2c_master_write_packet_wait+0x26>
100088c8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100088ca:	0018      	movs	r0, r3
100088cc:	bd10      	pop	{r4, pc}
100088ce:	46c0      	nop			; (mov r8, r8)
100088d0:	10008719 	.word	0x10008719

100088d4 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100088d4:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100088d6:	2800      	cmp	r0, #0
100088d8:	d00c      	beq.n	100088f4 <i2c_master_write_packet_wait_no_stop+0x20>
100088da:	2900      	cmp	r1, #0
100088dc:	d00c      	beq.n	100088f8 <i2c_master_write_packet_wait_no_stop+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088de:	8a82      	ldrh	r2, [r0, #20]
100088e0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100088e2:	2305      	movs	r3, #5
	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
100088e4:	2a00      	cmp	r2, #0
100088e6:	d108      	bne.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100088e8:	3b04      	subs	r3, #4
100088ea:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100088ec:	4b04      	ldr	r3, [pc, #16]	; (10008900 <i2c_master_write_packet_wait_no_stop+0x2c>)
100088ee:	4798      	blx	r3
100088f0:	0003      	movs	r3, r0
100088f2:	e002      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100088f4:	2317      	movs	r3, #23
100088f6:	e000      	b.n	100088fa <i2c_master_write_packet_wait_no_stop+0x26>
100088f8:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100088fa:	0018      	movs	r0, r3
100088fc:	bd10      	pop	{r4, pc}
100088fe:	46c0      	nop			; (mov r8, r8)
10008900:	10008719 	.word	0x10008719

10008904 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
10008904:	b570      	push	{r4, r5, r6, lr}
10008906:	b082      	sub	sp, #8
	/* Get software module for callback handling */
	struct i2c_master_module *module =
10008908:	4b57      	ldr	r3, [pc, #348]	; (10008a68 <_i2c_master_isr_handler+0x164>)
1000890a:	681c      	ldr	r4, [r3, #0]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
1000890c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
1000890e:	7c63      	ldrb	r3, [r4, #17]
			module->registered_callback;
10008910:	7c25      	ldrb	r5, [r4, #16]
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008912:	401d      	ands	r5, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
10008914:	8a63      	ldrh	r3, [r4, #18]
10008916:	b29b      	uxth	r3, r3
10008918:	2b00      	cmp	r3, #0
1000891a:	d107      	bne.n	1000892c <_i2c_master_isr_handler+0x28>
1000891c:	8aa3      	ldrh	r3, [r4, #20]
1000891e:	b29b      	uxth	r3, r3
10008920:	2b00      	cmp	r3, #0
10008922:	d003      	beq.n	1000892c <_i2c_master_isr_handler+0x28>
		module->buffer_length = module->buffer_remaining;
10008924:	8aa3      	ldrh	r3, [r4, #20]
10008926:	b29b      	uxth	r3, r3
10008928:	8263      	strh	r3, [r4, #18]
1000892a:	e04e      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000892c:	8a63      	ldrh	r3, [r4, #18]
1000892e:	b29b      	uxth	r3, r3
10008930:	2b00      	cmp	r3, #0
10008932:	d019      	beq.n	10008968 <_i2c_master_isr_handler+0x64>
10008934:	8aa3      	ldrh	r3, [r4, #20]
10008936:	b29b      	uxth	r3, r3
10008938:	2b00      	cmp	r3, #0
1000893a:	d115      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
1000893c:	7f63      	ldrb	r3, [r4, #29]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
1000893e:	2b05      	cmp	r3, #5
10008940:	d112      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
10008942:	7f23      	ldrb	r3, [r4, #28]

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008944:	2b00      	cmp	r3, #0
10008946:	d10f      	bne.n	10008968 <_i2c_master_isr_handler+0x64>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
10008948:	222c      	movs	r2, #44	; 0x2c
1000894a:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
1000894c:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
1000894e:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008950:	7963      	ldrb	r3, [r4, #5]
10008952:	2b00      	cmp	r3, #0
10008954:	d102      	bne.n	1000895c <_i2c_master_isr_handler+0x58>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
10008956:	2200      	movs	r2, #0
10008958:	3320      	adds	r3, #32
1000895a:	54f2      	strb	r2, [r6, r3]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
1000895c:	07eb      	lsls	r3, r5, #31
1000895e:	d534      	bpl.n	100089ca <_i2c_master_isr_handler+0xc6>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
10008960:	68a3      	ldr	r3, [r4, #8]
10008962:	0020      	movs	r0, r4
10008964:	4798      	blx	r3
10008966:	e030      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
10008968:	8a63      	ldrh	r3, [r4, #18]
1000896a:	b29b      	uxth	r3, r3
1000896c:	2b00      	cmp	r3, #0
1000896e:	d02c      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
10008970:	8aa3      	ldrh	r3, [r4, #20]
10008972:	b29b      	uxth	r3, r3
10008974:	2b00      	cmp	r3, #0
10008976:	d028      	beq.n	100089ca <_i2c_master_isr_handler+0xc6>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
10008978:	7f23      	ldrb	r3, [r4, #28]
1000897a:	2b00      	cmp	r3, #0
1000897c:	d117      	bne.n	100089ae <_i2c_master_isr_handler+0xaa>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
1000897e:	8a63      	ldrh	r3, [r4, #18]
10008980:	8aa2      	ldrh	r2, [r4, #20]
10008982:	1a9b      	subs	r3, r3, r2
10008984:	b29b      	uxth	r3, r3
10008986:	466a      	mov	r2, sp
10008988:	80d3      	strh	r3, [r2, #6]

	module->buffer_remaining--;
1000898a:	8aa3      	ldrh	r3, [r4, #20]
1000898c:	3b01      	subs	r3, #1
1000898e:	b29b      	uxth	r3, r3
10008990:	82a3      	strh	r3, [r4, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
10008992:	88d3      	ldrh	r3, [r2, #6]
10008994:	69a2      	ldr	r2, [r4, #24]
10008996:	4694      	mov	ip, r2
10008998:	4463      	add	r3, ip
1000899a:	781b      	ldrb	r3, [r3, #0]
1000899c:	8033      	strh	r3, [r6, #0]
	
	if (module->buffer_remaining <= 0) {
1000899e:	8aa3      	ldrh	r3, [r4, #20]
100089a0:	b29b      	uxth	r3, r3
100089a2:	2b00      	cmp	r3, #0
100089a4:	d111      	bne.n	100089ca <_i2c_master_isr_handler+0xc6>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100089a6:	2210      	movs	r2, #16
100089a8:	332c      	adds	r3, #44	; 0x2c
100089aa:	54f2      	strb	r2, [r6, r3]
100089ac:	e00d      	b.n	100089ca <_i2c_master_isr_handler+0xc6>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100089ae:	8a63      	ldrh	r3, [r4, #18]
100089b0:	8aa1      	ldrh	r1, [r4, #20]

	module->buffer_remaining--;
100089b2:	8aa2      	ldrh	r2, [r4, #20]
100089b4:	3a01      	subs	r2, #1
100089b6:	b292      	uxth	r2, r2
100089b8:	82a2      	strh	r2, [r4, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
100089ba:	1a5b      	subs	r3, r3, r1
100089bc:	b29b      	uxth	r3, r3
100089be:	69a2      	ldr	r2, [r4, #24]
100089c0:	4694      	mov	ip, r2
100089c2:	4463      	add	r3, ip
100089c4:	7932      	ldrb	r2, [r6, #4]
100089c6:	b2d2      	uxtb	r2, r2
100089c8:	701a      	strb	r2, [r3, #0]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089ca:	8a63      	ldrh	r3, [r4, #18]
100089cc:	b29b      	uxth	r3, r3
100089ce:	2b00      	cmp	r3, #0
100089d0:	d01c      	beq.n	10008a0c <_i2c_master_isr_handler+0x108>
100089d2:	8aa3      	ldrh	r3, [r4, #20]
100089d4:	b29b      	uxth	r3, r3
100089d6:	2b00      	cmp	r3, #0
100089d8:	d118      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
100089da:	7f63      	ldrb	r3, [r4, #29]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100089dc:	2b05      	cmp	r3, #5
100089de:	d115      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
100089e0:	7f23      	ldrb	r3, [r4, #28]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
100089e2:	2b01      	cmp	r3, #1
100089e4:	d112      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
100089e6:	2300      	movs	r3, #0
100089e8:	2230      	movs	r2, #48	; 0x30
100089ea:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
100089ec:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
100089ee:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
100089f0:	7963      	ldrb	r3, [r4, #5]
100089f2:	2b00      	cmp	r3, #0
100089f4:	d102      	bne.n	100089fc <_i2c_master_isr_handler+0xf8>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
100089f6:	2200      	movs	r2, #0
100089f8:	3320      	adds	r3, #32
100089fa:	54f2      	strb	r2, [r6, r3]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
100089fc:	07ab      	lsls	r3, r5, #30
100089fe:	d505      	bpl.n	10008a0c <_i2c_master_isr_handler+0x108>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
10008a00:	7f23      	ldrb	r3, [r4, #28]
10008a02:	2b01      	cmp	r3, #1
10008a04:	d102      	bne.n	10008a0c <_i2c_master_isr_handler+0x108>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
10008a06:	68e3      	ldr	r3, [r4, #12]
10008a08:	0020      	movs	r0, r4
10008a0a:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
10008a0c:	7f23      	ldrb	r3, [r4, #28]
10008a0e:	2b01      	cmp	r3, #1
10008a10:	d114      	bne.n	10008a3c <_i2c_master_isr_handler+0x138>
		if (module->hw == I2C0) {
10008a12:	6823      	ldr	r3, [r4, #0]
10008a14:	4a15      	ldr	r2, [pc, #84]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a16:	4293      	cmp	r3, r2
10008a18:	d106      	bne.n	10008a28 <_i2c_master_isr_handler+0x124>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008a1a:	2180      	movs	r1, #128	; 0x80
10008a1c:	0049      	lsls	r1, r1, #1
10008a1e:	23c0      	movs	r3, #192	; 0xc0
10008a20:	005b      	lsls	r3, r3, #1
10008a22:	4a13      	ldr	r2, [pc, #76]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a24:	50d1      	str	r1, [r2, r3]
10008a26:	e01d      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
10008a28:	4a12      	ldr	r2, [pc, #72]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a2a:	4293      	cmp	r3, r2
10008a2c:	d11a      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a2e:	2180      	movs	r1, #128	; 0x80
10008a30:	00c9      	lsls	r1, r1, #3
10008a32:	23c0      	movs	r3, #192	; 0xc0
10008a34:	005b      	lsls	r3, r3, #1
10008a36:	4a0e      	ldr	r2, [pc, #56]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a38:	50d1      	str	r1, [r2, r3]
10008a3a:	e013      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
10008a3c:	6823      	ldr	r3, [r4, #0]
10008a3e:	4a0b      	ldr	r2, [pc, #44]	; (10008a6c <_i2c_master_isr_handler+0x168>)
10008a40:	4293      	cmp	r3, r2
10008a42:	d106      	bne.n	10008a52 <_i2c_master_isr_handler+0x14e>
10008a44:	2180      	movs	r1, #128	; 0x80
10008a46:	0089      	lsls	r1, r1, #2
10008a48:	23c0      	movs	r3, #192	; 0xc0
10008a4a:	005b      	lsls	r3, r3, #1
10008a4c:	4a08      	ldr	r2, [pc, #32]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a4e:	50d1      	str	r1, [r2, r3]
10008a50:	e008      	b.n	10008a64 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
10008a52:	4a08      	ldr	r2, [pc, #32]	; (10008a74 <_i2c_master_isr_handler+0x170>)
10008a54:	4293      	cmp	r3, r2
10008a56:	d105      	bne.n	10008a64 <_i2c_master_isr_handler+0x160>
10008a58:	2180      	movs	r1, #128	; 0x80
10008a5a:	0109      	lsls	r1, r1, #4
10008a5c:	23c0      	movs	r3, #192	; 0xc0
10008a5e:	005b      	lsls	r3, r3, #1
10008a60:	4a03      	ldr	r2, [pc, #12]	; (10008a70 <_i2c_master_isr_handler+0x16c>)
10008a62:	50d1      	str	r1, [r2, r3]
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
10008a64:	b002      	add	sp, #8
10008a66:	bd70      	pop	{r4, r5, r6, pc}
10008a68:	100153cc 	.word	0x100153cc
10008a6c:	40003000 	.word	0x40003000
10008a70:	e000e100 	.word	0xe000e100
10008a74:	40003400 	.word	0x40003400

10008a78 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008a78:	2301      	movs	r3, #1
10008a7a:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008a7c:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008a7e:	23fa      	movs	r3, #250	; 0xfa
10008a80:	01db      	lsls	r3, r3, #7
10008a82:	6043      	str	r3, [r0, #4]
}
10008a84:	4770      	bx	lr
10008a86:	46c0      	nop			; (mov r8, r8)

10008a88 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008a88:	4b06      	ldr	r3, [pc, #24]	; (10008aa4 <aon_sleep_timer_disable+0x1c>)
10008a8a:	2200      	movs	r2, #0
10008a8c:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008a8e:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008a90:	2103      	movs	r1, #3
10008a92:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008a94:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008a96:	0019      	movs	r1, r3
10008a98:	2280      	movs	r2, #128	; 0x80
10008a9a:	01d2      	lsls	r2, r2, #7
10008a9c:	680b      	ldr	r3, [r1, #0]
10008a9e:	4213      	tst	r3, r2
10008aa0:	d1fc      	bne.n	10008a9c <aon_sleep_timer_disable+0x14>
	}
}
10008aa2:	4770      	bx	lr
10008aa4:	4000d000 	.word	0x4000d000

10008aa8 <aon_sleep_timer_sleep_timer_active>:
 *
 * \return Active status of the AON Sleep Timer.
 */
bool aon_sleep_timer_sleep_timer_active(void)
{
	return AON_SLEEP_TIMER0->CONTROL.bit.SLEEP_TIMER_ACTIVE;
10008aa8:	4b02      	ldr	r3, [pc, #8]	; (10008ab4 <aon_sleep_timer_sleep_timer_active+0xc>)
10008aaa:	6818      	ldr	r0, [r3, #0]
10008aac:	0040      	lsls	r0, r0, #1
10008aae:	0fc0      	lsrs	r0, r0, #31
}
10008ab0:	4770      	bx	lr
10008ab2:	46c0      	nop			; (mov r8, r8)
10008ab4:	4000d000 	.word	0x4000d000

10008ab8 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008ab8:	4a02      	ldr	r2, [pc, #8]	; (10008ac4 <aon_sleep_timer_clear_interrup+0xc>)
10008aba:	6811      	ldr	r1, [r2, #0]
10008abc:	2310      	movs	r3, #16
10008abe:	430b      	orrs	r3, r1
10008ac0:	6013      	str	r3, [r2, #0]
}
10008ac2:	4770      	bx	lr
10008ac4:	4000d000 	.word	0x4000d000

10008ac8 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008ac8:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
10008aca:	4b04      	ldr	r3, [pc, #16]	; (10008adc <aon_sleep_timer_isr_handler+0x14>)
10008acc:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
10008ace:	4b04      	ldr	r3, [pc, #16]	; (10008ae0 <aon_sleep_timer_isr_handler+0x18>)
10008ad0:	681b      	ldr	r3, [r3, #0]
10008ad2:	2b00      	cmp	r3, #0
10008ad4:	d000      	beq.n	10008ad8 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008ad6:	4798      	blx	r3
	}
}
10008ad8:	bd10      	pop	{r4, pc}
10008ada:	46c0      	nop			; (mov r8, r8)
10008adc:	10008ab9 	.word	0x10008ab9
10008ae0:	100138e8 	.word	0x100138e8

10008ae4 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008ae4:	4b01      	ldr	r3, [pc, #4]	; (10008aec <aon_sleep_timer_register_callback+0x8>)
10008ae6:	6018      	str	r0, [r3, #0]
}
10008ae8:	4770      	bx	lr
10008aea:	46c0      	nop			; (mov r8, r8)
10008aec:	100138e8 	.word	0x100138e8

10008af0 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008af0:	2200      	movs	r2, #0
10008af2:	4b01      	ldr	r3, [pc, #4]	; (10008af8 <aon_sleep_timer_unregister_callback+0x8>)
10008af4:	601a      	str	r2, [r3, #0]
}
10008af6:	4770      	bx	lr
10008af8:	100138e8 	.word	0x100138e8

10008afc <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
10008afc:	b5f0      	push	{r4, r5, r6, r7, lr}
10008afe:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008b00:	2200      	movs	r2, #0
10008b02:	4b2b      	ldr	r3, [pc, #172]	; (10008bb0 <aon_sleep_timer_init+0xb4>)
10008b04:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008b06:	7803      	ldrb	r3, [r0, #0]
10008b08:	2b02      	cmp	r3, #2
10008b0a:	d105      	bne.n	10008b18 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008b0c:	4a28      	ldr	r2, [pc, #160]	; (10008bb0 <aon_sleep_timer_init+0xb4>)
10008b0e:	7b11      	ldrb	r1, [r2, #12]
10008b10:	3301      	adds	r3, #1
10008b12:	430b      	orrs	r3, r1
10008b14:	7313      	strb	r3, [r2, #12]
10008b16:	e005      	b.n	10008b24 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008b18:	2b01      	cmp	r3, #1
10008b1a:	d103      	bne.n	10008b24 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008b1c:	4a24      	ldr	r2, [pc, #144]	; (10008bb0 <aon_sleep_timer_init+0xb4>)
10008b1e:	7b11      	ldrb	r1, [r2, #12]
10008b20:	430b      	orrs	r3, r1
10008b22:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008b24:	4b23      	ldr	r3, [pc, #140]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008b26:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008b28:	0053      	lsls	r3, r2, #1
10008b2a:	d01f      	beq.n	10008b6c <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008b2c:	4d21      	ldr	r5, [pc, #132]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008b2e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008b30:	262c      	movs	r6, #44	; 0x2c
10008b32:	36ff      	adds	r6, #255	; 0xff
10008b34:	2180      	movs	r1, #128	; 0x80
10008b36:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008b38:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008b3a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008b3c:	9701      	str	r7, [sp, #4]
10008b3e:	9b01      	ldr	r3, [sp, #4]
10008b40:	42b3      	cmp	r3, r6
10008b42:	d806      	bhi.n	10008b52 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
10008b44:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008b46:	9b01      	ldr	r3, [sp, #4]
10008b48:	3301      	adds	r3, #1
10008b4a:	9301      	str	r3, [sp, #4]
10008b4c:	9b01      	ldr	r3, [sp, #4]
10008b4e:	42b3      	cmp	r3, r6
10008b50:	d9f8      	bls.n	10008b44 <aon_sleep_timer_init+0x48>
10008b52:	7844      	ldrb	r4, [r0, #1]
10008b54:	000b      	movs	r3, r1
10008b56:	2c00      	cmp	r4, #0
10008b58:	d103      	bne.n	10008b62 <aon_sleep_timer_init+0x66>
10008b5a:	2380      	movs	r3, #128	; 0x80
10008b5c:	009b      	lsls	r3, r3, #2
10008b5e:	e000      	b.n	10008b62 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008b60:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
10008b62:	4213      	tst	r3, r2
10008b64:	d1fc      	bne.n	10008b60 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008b66:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008b68:	0053      	lsls	r3, r2, #1
10008b6a:	d1e5      	bne.n	10008b38 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008b6c:	7843      	ldrb	r3, [r0, #1]
10008b6e:	2b00      	cmp	r3, #0
10008b70:	d105      	bne.n	10008b7e <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008b72:	4b10      	ldr	r3, [pc, #64]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008b74:	6842      	ldr	r2, [r0, #4]
10008b76:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008b78:	2201      	movs	r2, #1
10008b7a:	601a      	str	r2, [r3, #0]
10008b7c:	e004      	b.n	10008b88 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008b7e:	4b0d      	ldr	r3, [pc, #52]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008b80:	6842      	ldr	r2, [r0, #4]
10008b82:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008b84:	2202      	movs	r2, #2
10008b86:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008b88:	7843      	ldrb	r3, [r0, #1]
10008b8a:	2b01      	cmp	r3, #1
10008b8c:	d109      	bne.n	10008ba2 <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008b8e:	4909      	ldr	r1, [pc, #36]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008b90:	22e0      	movs	r2, #224	; 0xe0
10008b92:	01d2      	lsls	r2, r2, #7
10008b94:	680b      	ldr	r3, [r1, #0]
10008b96:	4013      	ands	r3, r2
10008b98:	4293      	cmp	r3, r2
10008b9a:	d1fb      	bne.n	10008b94 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008b9c:	2200      	movs	r2, #0
10008b9e:	4b05      	ldr	r3, [pc, #20]	; (10008bb4 <aon_sleep_timer_init+0xb8>)
10008ba0:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008ba2:	4905      	ldr	r1, [pc, #20]	; (10008bb8 <aon_sleep_timer_init+0xbc>)
10008ba4:	202b      	movs	r0, #43	; 0x2b
10008ba6:	4b05      	ldr	r3, [pc, #20]	; (10008bbc <aon_sleep_timer_init+0xc0>)
10008ba8:	4798      	blx	r3
}
10008baa:	b003      	add	sp, #12
10008bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008bae:	46c0      	nop			; (mov r8, r8)
10008bb0:	4000e000 	.word	0x4000e000
10008bb4:	4000d000 	.word	0x4000d000
10008bb8:	10008ac9 	.word	0x10008ac9
10008bbc:	100099a9 	.word	0x100099a9

10008bc0 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008bc0:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10008bc2:	4b0d      	ldr	r3, [pc, #52]	; (10008bf8 <dualtimer_isr_handler+0x38>)
10008bc4:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008bc6:	2b00      	cmp	r3, #0
10008bc8:	d007      	beq.n	10008bda <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008bca:	2201      	movs	r2, #1
10008bcc:	4b0a      	ldr	r3, [pc, #40]	; (10008bf8 <dualtimer_isr_handler+0x38>)
10008bce:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008bd0:	4b0a      	ldr	r3, [pc, #40]	; (10008bfc <dualtimer_isr_handler+0x3c>)
10008bd2:	681b      	ldr	r3, [r3, #0]
10008bd4:	2b00      	cmp	r3, #0
10008bd6:	d000      	beq.n	10008bda <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008bd8:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008bda:	2334      	movs	r3, #52	; 0x34
10008bdc:	4a06      	ldr	r2, [pc, #24]	; (10008bf8 <dualtimer_isr_handler+0x38>)
10008bde:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008be0:	2b00      	cmp	r3, #0
10008be2:	d007      	beq.n	10008bf4 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10008be4:	2101      	movs	r1, #1
10008be6:	232c      	movs	r3, #44	; 0x2c
10008be8:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008bea:	4b05      	ldr	r3, [pc, #20]	; (10008c00 <dualtimer_isr_handler+0x40>)
10008bec:	681b      	ldr	r3, [r3, #0]
10008bee:	2b00      	cmp	r3, #0
10008bf0:	d000      	beq.n	10008bf4 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10008bf2:	4798      	blx	r3
	}
}
10008bf4:	bd10      	pop	{r4, pc}
10008bf6:	46c0      	nop			; (mov r8, r8)
10008bf8:	40001000 	.word	0x40001000
10008bfc:	100138ec 	.word	0x100138ec
10008c00:	100138f0 	.word	0x100138f0

10008c04 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10008c04:	2301      	movs	r3, #1
10008c06:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008c08:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008c0a:	2202      	movs	r2, #2
10008c0c:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008c0e:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008c10:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008c12:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008c14:	2200      	movs	r2, #0
10008c16:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008c18:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008c1a:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008c1c:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008c1e:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008c20:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10008c22:	7602      	strb	r2, [r0, #24]
}
10008c24:	4770      	bx	lr
10008c26:	46c0      	nop			; (mov r8, r8)

10008c28 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008c28:	2800      	cmp	r0, #0
10008c2a:	d107      	bne.n	10008c3c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008c2c:	2900      	cmp	r1, #0
10008c2e:	d102      	bne.n	10008c36 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008c30:	4b06      	ldr	r3, [pc, #24]	; (10008c4c <dualtimer_set_counter+0x24>)
10008c32:	601a      	str	r2, [r3, #0]
10008c34:	e009      	b.n	10008c4a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008c36:	4b05      	ldr	r3, [pc, #20]	; (10008c4c <dualtimer_set_counter+0x24>)
10008c38:	619a      	str	r2, [r3, #24]
10008c3a:	e006      	b.n	10008c4a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008c3c:	2900      	cmp	r1, #0
10008c3e:	d102      	bne.n	10008c46 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008c40:	4b02      	ldr	r3, [pc, #8]	; (10008c4c <dualtimer_set_counter+0x24>)
10008c42:	621a      	str	r2, [r3, #32]
10008c44:	e001      	b.n	10008c4a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008c46:	4b01      	ldr	r3, [pc, #4]	; (10008c4c <dualtimer_set_counter+0x24>)
10008c48:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008c4a:	4770      	bx	lr
10008c4c:	40001000 	.word	0x40001000

10008c50 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008c50:	2800      	cmp	r0, #0
10008c52:	d105      	bne.n	10008c60 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008c54:	4a06      	ldr	r2, [pc, #24]	; (10008c70 <dualtimer_enable+0x20>)
10008c56:	7a11      	ldrb	r1, [r2, #8]
10008c58:	2380      	movs	r3, #128	; 0x80
10008c5a:	430b      	orrs	r3, r1
10008c5c:	7213      	strb	r3, [r2, #8]
10008c5e:	e005      	b.n	10008c6c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008c60:	4903      	ldr	r1, [pc, #12]	; (10008c70 <dualtimer_enable+0x20>)
10008c62:	2228      	movs	r2, #40	; 0x28
10008c64:	5c88      	ldrb	r0, [r1, r2]
10008c66:	2380      	movs	r3, #128	; 0x80
10008c68:	4303      	orrs	r3, r0
10008c6a:	548b      	strb	r3, [r1, r2]
	}
}
10008c6c:	4770      	bx	lr
10008c6e:	46c0      	nop			; (mov r8, r8)
10008c70:	40001000 	.word	0x40001000

10008c74 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008c74:	2800      	cmp	r0, #0
10008c76:	d105      	bne.n	10008c84 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008c78:	4a06      	ldr	r2, [pc, #24]	; (10008c94 <dualtimer_disable+0x20>)
10008c7a:	7a11      	ldrb	r1, [r2, #8]
10008c7c:	237f      	movs	r3, #127	; 0x7f
10008c7e:	400b      	ands	r3, r1
10008c80:	7213      	strb	r3, [r2, #8]
10008c82:	e005      	b.n	10008c90 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008c84:	4903      	ldr	r1, [pc, #12]	; (10008c94 <dualtimer_disable+0x20>)
10008c86:	2228      	movs	r2, #40	; 0x28
10008c88:	5c88      	ldrb	r0, [r1, r2]
10008c8a:	237f      	movs	r3, #127	; 0x7f
10008c8c:	4003      	ands	r3, r0
10008c8e:	548b      	strb	r3, [r1, r2]
	}
}
10008c90:	4770      	bx	lr
10008c92:	46c0      	nop			; (mov r8, r8)
10008c94:	40001000 	.word	0x40001000

10008c98 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008c98:	b570      	push	{r4, r5, r6, lr}
10008c9a:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008c9c:	2004      	movs	r0, #4
10008c9e:	4b39      	ldr	r3, [pc, #228]	; (10008d84 <dualtimer_init+0xec>)
10008ca0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10008ca2:	7823      	ldrb	r3, [r4, #0]
10008ca4:	2b00      	cmp	r3, #0
10008ca6:	d102      	bne.n	10008cae <dualtimer_init+0x16>
10008ca8:	7b23      	ldrb	r3, [r4, #12]
10008caa:	2b00      	cmp	r3, #0
10008cac:	d065      	beq.n	10008d7a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10008cae:	4936      	ldr	r1, [pc, #216]	; (10008d88 <dualtimer_init+0xf0>)
10008cb0:	68ca      	ldr	r2, [r1, #12]
10008cb2:	2320      	movs	r3, #32
10008cb4:	4313      	orrs	r3, r2
10008cb6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008cb8:	7e22      	ldrb	r2, [r4, #24]
10008cba:	698b      	ldr	r3, [r1, #24]
10008cbc:	2003      	movs	r0, #3
10008cbe:	4002      	ands	r2, r0
10008cc0:	0112      	lsls	r2, r2, #4
10008cc2:	302d      	adds	r0, #45	; 0x2d
10008cc4:	4383      	bics	r3, r0
10008cc6:	4313      	orrs	r3, r2
10008cc8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008cca:	7823      	ldrb	r3, [r4, #0]
10008ccc:	2b00      	cmp	r3, #0
10008cce:	d026      	beq.n	10008d1e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008cd0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10008cd2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008cd4:	2b00      	cmp	r3, #0
10008cd6:	d003      	beq.n	10008ce0 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008cd8:	3b02      	subs	r3, #2
10008cda:	425d      	negs	r5, r3
10008cdc:	415d      	adcs	r5, r3
10008cde:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008ce0:	78a2      	ldrb	r2, [r4, #2]
10008ce2:	0052      	lsls	r2, r2, #1
10008ce4:	2502      	movs	r5, #2
10008ce6:	402a      	ands	r2, r5
10008ce8:	78e3      	ldrb	r3, [r4, #3]
10008cea:	009b      	lsls	r3, r3, #2
10008cec:	350a      	adds	r5, #10
10008cee:	402b      	ands	r3, r5
10008cf0:	431a      	orrs	r2, r3
10008cf2:	0015      	movs	r5, r2
10008cf4:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10008cf6:	7923      	ldrb	r3, [r4, #4]
10008cf8:	2b00      	cmp	r3, #0
10008cfa:	d001      	beq.n	10008d00 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008cfc:	2320      	movs	r3, #32
10008cfe:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008d00:	4b22      	ldr	r3, [pc, #136]	; (10008d8c <dualtimer_init+0xf4>)
10008d02:	68a2      	ldr	r2, [r4, #8]
10008d04:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10008d06:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008d08:	491f      	ldr	r1, [pc, #124]	; (10008d88 <dualtimer_init+0xf0>)
10008d0a:	22c4      	movs	r2, #196	; 0xc4
10008d0c:	0052      	lsls	r2, r2, #1
10008d0e:	5c88      	ldrb	r0, [r1, r2]
10008d10:	2301      	movs	r3, #1
10008d12:	4303      	orrs	r3, r0
10008d14:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10008d16:	2000      	movs	r0, #0
10008d18:	4b1d      	ldr	r3, [pc, #116]	; (10008d90 <dualtimer_init+0xf8>)
10008d1a:	4798      	blx	r3
10008d1c:	e000      	b.n	10008d20 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008d1e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008d20:	7b23      	ldrb	r3, [r4, #12]
10008d22:	2b00      	cmp	r3, #0
10008d24:	d029      	beq.n	10008d7a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008d26:	7b63      	ldrb	r3, [r4, #13]
10008d28:	2b00      	cmp	r3, #0
10008d2a:	d005      	beq.n	10008d38 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008d2c:	2b01      	cmp	r3, #1
10008d2e:	d005      	beq.n	10008d3c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008d30:	2b02      	cmp	r3, #2
10008d32:	d104      	bne.n	10008d3e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008d34:	2540      	movs	r5, #64	; 0x40
10008d36:	e002      	b.n	10008d3e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008d38:	2501      	movs	r5, #1
10008d3a:	e000      	b.n	10008d3e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008d3c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008d3e:	7ba3      	ldrb	r3, [r4, #14]
10008d40:	005b      	lsls	r3, r3, #1
10008d42:	2102      	movs	r1, #2
10008d44:	4019      	ands	r1, r3
10008d46:	7be2      	ldrb	r2, [r4, #15]
10008d48:	0092      	lsls	r2, r2, #2
10008d4a:	230c      	movs	r3, #12
10008d4c:	4013      	ands	r3, r2
10008d4e:	430b      	orrs	r3, r1
10008d50:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008d52:	7c23      	ldrb	r3, [r4, #16]
10008d54:	2b00      	cmp	r3, #0
10008d56:	d001      	beq.n	10008d5c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008d58:	2320      	movs	r3, #32
10008d5a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008d5c:	6962      	ldr	r2, [r4, #20]
10008d5e:	4b0b      	ldr	r3, [pc, #44]	; (10008d8c <dualtimer_init+0xf4>)
10008d60:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008d62:	2228      	movs	r2, #40	; 0x28
10008d64:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008d66:	4908      	ldr	r1, [pc, #32]	; (10008d88 <dualtimer_init+0xf0>)
10008d68:	3261      	adds	r2, #97	; 0x61
10008d6a:	32ff      	adds	r2, #255	; 0xff
10008d6c:	5c88      	ldrb	r0, [r1, r2]
10008d6e:	2302      	movs	r3, #2
10008d70:	4303      	orrs	r3, r0
10008d72:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008d74:	2001      	movs	r0, #1
10008d76:	4b06      	ldr	r3, [pc, #24]	; (10008d90 <dualtimer_init+0xf8>)
10008d78:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008d7a:	4906      	ldr	r1, [pc, #24]	; (10008d94 <dualtimer_init+0xfc>)
10008d7c:	201e      	movs	r0, #30
10008d7e:	4b06      	ldr	r3, [pc, #24]	; (10008d98 <dualtimer_init+0x100>)
10008d80:	4798      	blx	r3
}
10008d82:	bd70      	pop	{r4, r5, r6, pc}
10008d84:	10009541 	.word	0x10009541
10008d88:	4000b000 	.word	0x4000b000
10008d8c:	40001000 	.word	0x40001000
10008d90:	10008c51 	.word	0x10008c51
10008d94:	10008bc1 	.word	0x10008bc1
10008d98:	100099a9 	.word	0x100099a9

10008d9c <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008d9c:	2800      	cmp	r0, #0
10008d9e:	d102      	bne.n	10008da6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008da0:	4b02      	ldr	r3, [pc, #8]	; (10008dac <dualtimer_register_callback+0x10>)
10008da2:	6019      	str	r1, [r3, #0]
10008da4:	e001      	b.n	10008daa <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008da6:	4b02      	ldr	r3, [pc, #8]	; (10008db0 <dualtimer_register_callback+0x14>)
10008da8:	6019      	str	r1, [r3, #0]
	}
}
10008daa:	4770      	bx	lr
10008dac:	100138ec 	.word	0x100138ec
10008db0:	100138f0 	.word	0x100138f0

10008db4 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008db4:	2300      	movs	r3, #0
10008db6:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008db8:	2201      	movs	r2, #1
10008dba:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008dbc:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008dbe:	70c3      	strb	r3, [r0, #3]
}
10008dc0:	4770      	bx	lr
10008dc2:	46c0      	nop			; (mov r8, r8)

10008dc4 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008dc4:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008dc6:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008dc8:	2801      	cmp	r0, #1
10008dca:	d800      	bhi.n	10008dce <gpio_pin_set_config+0xa>
10008dcc:	e0c8      	b.n	10008f60 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008dce:	2807      	cmp	r0, #7
10008dd0:	d809      	bhi.n	10008de6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008dd2:	4d64      	ldr	r5, [pc, #400]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008dd4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008dd6:	3b10      	subs	r3, #16
10008dd8:	4003      	ands	r3, r0
10008dda:	009b      	lsls	r3, r3, #2
10008ddc:	2407      	movs	r4, #7
10008dde:	409c      	lsls	r4, r3
10008de0:	43a2      	bics	r2, r4
10008de2:	646a      	str	r2, [r5, #68]	; 0x44
10008de4:	e029      	b.n	10008e3a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008de6:	280f      	cmp	r0, #15
10008de8:	d809      	bhi.n	10008dfe <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008dea:	4d5e      	ldr	r5, [pc, #376]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008dec:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008dee:	2307      	movs	r3, #7
10008df0:	4003      	ands	r3, r0
10008df2:	009b      	lsls	r3, r3, #2
10008df4:	2407      	movs	r4, #7
10008df6:	409c      	lsls	r4, r3
10008df8:	43a2      	bics	r2, r4
10008dfa:	64aa      	str	r2, [r5, #72]	; 0x48
10008dfc:	e01d      	b.n	10008e3a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008dfe:	2817      	cmp	r0, #23
10008e00:	d809      	bhi.n	10008e16 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008e02:	4d58      	ldr	r5, [pc, #352]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008e04:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008e06:	2307      	movs	r3, #7
10008e08:	4003      	ands	r3, r0
10008e0a:	009b      	lsls	r3, r3, #2
10008e0c:	2407      	movs	r4, #7
10008e0e:	409c      	lsls	r4, r3
10008e10:	43a2      	bics	r2, r4
10008e12:	64ea      	str	r2, [r5, #76]	; 0x4c
10008e14:	e011      	b.n	10008e3a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008e16:	0003      	movs	r3, r0
10008e18:	3b2c      	subs	r3, #44	; 0x2c
10008e1a:	2b03      	cmp	r3, #3
10008e1c:	d80d      	bhi.n	10008e3a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008e1e:	4d52      	ldr	r5, [pc, #328]	; (10008f68 <gpio_pin_set_config+0x1a4>)
10008e20:	2482      	movs	r4, #130	; 0x82
10008e22:	00e4      	lsls	r4, r4, #3
10008e24:	5d2a      	ldrb	r2, [r5, r4]
10008e26:	0712      	lsls	r2, r2, #28
10008e28:	2601      	movs	r6, #1
10008e2a:	409e      	lsls	r6, r3
10008e2c:	0f12      	lsrs	r2, r2, #28
10008e2e:	5d2b      	ldrb	r3, [r5, r4]
10008e30:	43b2      	bics	r2, r6
10008e32:	260f      	movs	r6, #15
10008e34:	43b3      	bics	r3, r6
10008e36:	4313      	orrs	r3, r2
10008e38:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008e3a:	0003      	movs	r3, r0
10008e3c:	3b1d      	subs	r3, #29
10008e3e:	2b02      	cmp	r3, #2
10008e40:	d829      	bhi.n	10008e96 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008e42:	784b      	ldrb	r3, [r1, #1]
10008e44:	2b01      	cmp	r3, #1
10008e46:	d108      	bne.n	10008e5a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008e48:	4d47      	ldr	r5, [pc, #284]	; (10008f68 <gpio_pin_set_config+0x1a4>)
10008e4a:	7d2b      	ldrb	r3, [r5, #20]
10008e4c:	241f      	movs	r4, #31
10008e4e:	1a24      	subs	r4, r4, r0
10008e50:	2201      	movs	r2, #1
10008e52:	40a2      	lsls	r2, r4
10008e54:	4393      	bics	r3, r2
10008e56:	752b      	strb	r3, [r5, #20]
10008e58:	e008      	b.n	10008e6c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008e5a:	4c43      	ldr	r4, [pc, #268]	; (10008f68 <gpio_pin_set_config+0x1a4>)
10008e5c:	7d25      	ldrb	r5, [r4, #20]
10008e5e:	221f      	movs	r2, #31
10008e60:	1a12      	subs	r2, r2, r0
10008e62:	2301      	movs	r3, #1
10008e64:	4093      	lsls	r3, r2
10008e66:	432b      	orrs	r3, r5
10008e68:	b2db      	uxtb	r3, r3
10008e6a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008e6c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008e6e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008e70:	2a00      	cmp	r2, #0
10008e72:	d075      	beq.n	10008f60 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008e74:	493c      	ldr	r1, [pc, #240]	; (10008f68 <gpio_pin_set_config+0x1a4>)
10008e76:	880c      	ldrh	r4, [r1, #0]
10008e78:	221f      	movs	r2, #31
10008e7a:	1a10      	subs	r0, r2, r0
10008e7c:	0080      	lsls	r0, r0, #2
10008e7e:	3301      	adds	r3, #1
10008e80:	4083      	lsls	r3, r0
10008e82:	4323      	orrs	r3, r4
10008e84:	b29b      	uxth	r3, r3
10008e86:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008e88:	4a38      	ldr	r2, [pc, #224]	; (10008f6c <gpio_pin_set_config+0x1a8>)
10008e8a:	7811      	ldrb	r1, [r2, #0]
10008e8c:	2302      	movs	r3, #2
10008e8e:	430b      	orrs	r3, r1
10008e90:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008e92:	2300      	movs	r3, #0
10008e94:	e064      	b.n	10008f60 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008e96:	780a      	ldrb	r2, [r1, #0]
10008e98:	2a00      	cmp	r2, #0
10008e9a:	d140      	bne.n	10008f1e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008e9c:	280f      	cmp	r0, #15
10008e9e:	d808      	bhi.n	10008eb2 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008ea0:	2301      	movs	r3, #1
10008ea2:	4083      	lsls	r3, r0
10008ea4:	b29b      	uxth	r3, r3
10008ea6:	4a32      	ldr	r2, [pc, #200]	; (10008f70 <gpio_pin_set_config+0x1ac>)
10008ea8:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008eaa:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008eac:	281f      	cmp	r0, #31
10008eae:	d857      	bhi.n	10008f60 <gpio_pin_set_config+0x19c>
10008eb0:	e012      	b.n	10008ed8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008eb2:	281f      	cmp	r0, #31
10008eb4:	d807      	bhi.n	10008ec6 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008eb6:	220f      	movs	r2, #15
10008eb8:	4002      	ands	r2, r0
10008eba:	2301      	movs	r3, #1
10008ebc:	4093      	lsls	r3, r2
10008ebe:	b29b      	uxth	r3, r3
10008ec0:	4a2c      	ldr	r2, [pc, #176]	; (10008f74 <gpio_pin_set_config+0x1b0>)
10008ec2:	8293      	strh	r3, [r2, #20]
10008ec4:	e008      	b.n	10008ed8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008ec6:	230f      	movs	r3, #15
10008ec8:	4018      	ands	r0, r3
10008eca:	3b0e      	subs	r3, #14
10008ecc:	4083      	lsls	r3, r0
10008ece:	b29b      	uxth	r3, r3
10008ed0:	4a29      	ldr	r2, [pc, #164]	; (10008f78 <gpio_pin_set_config+0x1b4>)
10008ed2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ed4:	2300      	movs	r3, #0
10008ed6:	e043      	b.n	10008f60 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008ed8:	784b      	ldrb	r3, [r1, #1]
10008eda:	2b01      	cmp	r3, #1
10008edc:	d00c      	beq.n	10008ef8 <gpio_pin_set_config+0x134>
10008ede:	2b00      	cmp	r3, #0
10008ee0:	d002      	beq.n	10008ee8 <gpio_pin_set_config+0x124>
10008ee2:	2b02      	cmp	r3, #2
10008ee4:	d010      	beq.n	10008f08 <gpio_pin_set_config+0x144>
10008ee6:	e03a      	b.n	10008f5e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008ee8:	491e      	ldr	r1, [pc, #120]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008eea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008eec:	2301      	movs	r3, #1
10008eee:	4083      	lsls	r3, r0
10008ef0:	4313      	orrs	r3, r2
10008ef2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ef4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008ef6:	e033      	b.n	10008f60 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008ef8:	491a      	ldr	r1, [pc, #104]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008efa:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008efc:	2201      	movs	r2, #1
10008efe:	4082      	lsls	r2, r0
10008f00:	4393      	bics	r3, r2
10008f02:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f04:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008f06:	e02b      	b.n	10008f60 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008f08:	4b16      	ldr	r3, [pc, #88]	; (10008f64 <gpio_pin_set_config+0x1a0>)
10008f0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008f0c:	2201      	movs	r2, #1
10008f0e:	4082      	lsls	r2, r0
10008f10:	4311      	orrs	r1, r2
10008f12:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008f14:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008f16:	4391      	bics	r1, r2
10008f18:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f1a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008f1c:	e020      	b.n	10008f60 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f1e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008f20:	2a01      	cmp	r2, #1
10008f22:	d11d      	bne.n	10008f60 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008f24:	280f      	cmp	r0, #15
10008f26:	d806      	bhi.n	10008f36 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008f28:	3301      	adds	r3, #1
10008f2a:	4083      	lsls	r3, r0
10008f2c:	b29b      	uxth	r3, r3
10008f2e:	4a10      	ldr	r2, [pc, #64]	; (10008f70 <gpio_pin_set_config+0x1ac>)
10008f30:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f32:	2300      	movs	r3, #0
10008f34:	e014      	b.n	10008f60 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008f36:	281f      	cmp	r0, #31
10008f38:	d808      	bhi.n	10008f4c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008f3a:	230f      	movs	r3, #15
10008f3c:	4018      	ands	r0, r3
10008f3e:	3b0e      	subs	r3, #14
10008f40:	4083      	lsls	r3, r0
10008f42:	b29b      	uxth	r3, r3
10008f44:	4a0b      	ldr	r2, [pc, #44]	; (10008f74 <gpio_pin_set_config+0x1b0>)
10008f46:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f48:	2300      	movs	r3, #0
10008f4a:	e009      	b.n	10008f60 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008f4c:	230f      	movs	r3, #15
10008f4e:	4018      	ands	r0, r3
10008f50:	3b0e      	subs	r3, #14
10008f52:	4083      	lsls	r3, r0
10008f54:	b29b      	uxth	r3, r3
10008f56:	4a08      	ldr	r2, [pc, #32]	; (10008f78 <gpio_pin_set_config+0x1b4>)
10008f58:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008f5a:	2300      	movs	r3, #0
10008f5c:	e000      	b.n	10008f60 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008f5e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008f60:	0018      	movs	r0, r3
10008f62:	bd70      	pop	{r4, r5, r6, pc}
10008f64:	4000b000 	.word	0x4000b000
10008f68:	4000f000 	.word	0x4000f000
10008f6c:	4000e000 	.word	0x4000e000
10008f70:	40010000 	.word	0x40010000
10008f74:	40011000 	.word	0x40011000
10008f78:	40013000 	.word	0x40013000

10008f7c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
10008f7c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
10008f7e:	280f      	cmp	r0, #15
10008f80:	d810      	bhi.n	10008fa4 <gpio_pin_set_output_level+0x28>
		if(level) {
10008f82:	2900      	cmp	r1, #0
10008f84:	d007      	beq.n	10008f96 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
10008f86:	4a1d      	ldr	r2, [pc, #116]	; (10008ffc <gpio_pin_set_output_level+0x80>)
10008f88:	8891      	ldrh	r1, [r2, #4]
10008f8a:	2301      	movs	r3, #1
10008f8c:	4083      	lsls	r3, r0
10008f8e:	430b      	orrs	r3, r1
10008f90:	b29b      	uxth	r3, r3
10008f92:	8093      	strh	r3, [r2, #4]
10008f94:	e031      	b.n	10008ffa <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
10008f96:	4919      	ldr	r1, [pc, #100]	; (10008ffc <gpio_pin_set_output_level+0x80>)
10008f98:	888b      	ldrh	r3, [r1, #4]
10008f9a:	2201      	movs	r2, #1
10008f9c:	4082      	lsls	r2, r0
10008f9e:	4393      	bics	r3, r2
10008fa0:	808b      	strh	r3, [r1, #4]
10008fa2:	e02a      	b.n	10008ffa <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
10008fa4:	281f      	cmp	r0, #31
10008fa6:	d814      	bhi.n	10008fd2 <gpio_pin_set_output_level+0x56>
		if(level) {
10008fa8:	2900      	cmp	r1, #0
10008faa:	d009      	beq.n	10008fc0 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008fac:	4914      	ldr	r1, [pc, #80]	; (10009000 <gpio_pin_set_output_level+0x84>)
10008fae:	888c      	ldrh	r4, [r1, #4]
10008fb0:	220f      	movs	r2, #15
10008fb2:	4010      	ands	r0, r2
10008fb4:	2301      	movs	r3, #1
10008fb6:	4083      	lsls	r3, r0
10008fb8:	4323      	orrs	r3, r4
10008fba:	b29b      	uxth	r3, r3
10008fbc:	808b      	strh	r3, [r1, #4]
10008fbe:	e01c      	b.n	10008ffa <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008fc0:	490f      	ldr	r1, [pc, #60]	; (10009000 <gpio_pin_set_output_level+0x84>)
10008fc2:	888b      	ldrh	r3, [r1, #4]
10008fc4:	220f      	movs	r2, #15
10008fc6:	4010      	ands	r0, r2
10008fc8:	3a0e      	subs	r2, #14
10008fca:	4082      	lsls	r2, r0
10008fcc:	4393      	bics	r3, r2
10008fce:	808b      	strh	r3, [r1, #4]
10008fd0:	e013      	b.n	10008ffa <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
10008fd2:	2900      	cmp	r1, #0
10008fd4:	d009      	beq.n	10008fea <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
10008fd6:	490b      	ldr	r1, [pc, #44]	; (10009004 <gpio_pin_set_output_level+0x88>)
10008fd8:	888c      	ldrh	r4, [r1, #4]
10008fda:	220f      	movs	r2, #15
10008fdc:	4010      	ands	r0, r2
10008fde:	2301      	movs	r3, #1
10008fe0:	4083      	lsls	r3, r0
10008fe2:	4323      	orrs	r3, r4
10008fe4:	b29b      	uxth	r3, r3
10008fe6:	808b      	strh	r3, [r1, #4]
10008fe8:	e007      	b.n	10008ffa <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
10008fea:	4906      	ldr	r1, [pc, #24]	; (10009004 <gpio_pin_set_output_level+0x88>)
10008fec:	888b      	ldrh	r3, [r1, #4]
10008fee:	220f      	movs	r2, #15
10008ff0:	4010      	ands	r0, r2
10008ff2:	3a0e      	subs	r2, #14
10008ff4:	4082      	lsls	r2, r0
10008ff6:	4393      	bics	r3, r2
10008ff8:	808b      	strh	r3, [r1, #4]
		}
	}
}
10008ffa:	bd10      	pop	{r4, pc}
10008ffc:	40010000 	.word	0x40010000
10009000:	40011000 	.word	0x40011000
10009004:	40013000 	.word	0x40013000

10009008 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10009008:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000900a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000900c:	23ff      	movs	r3, #255	; 0xff
1000900e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10009010:	2807      	cmp	r0, #7
10009012:	d833      	bhi.n	1000907c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009014:	4a4e      	ldr	r2, [pc, #312]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
10009016:	6c54      	ldr	r4, [r2, #68]	; 0x44
10009018:	3bf8      	subs	r3, #248	; 0xf8
1000901a:	4003      	ands	r3, r0
1000901c:	009b      	lsls	r3, r3, #2
1000901e:	2607      	movs	r6, #7
10009020:	409e      	lsls	r6, r3
10009022:	43b4      	bics	r4, r6
10009024:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10009026:	6c54      	ldr	r4, [r2, #68]	; 0x44
10009028:	000e      	movs	r6, r1
1000902a:	409e      	lsls	r6, r3
1000902c:	0033      	movs	r3, r6
1000902e:	4323      	orrs	r3, r4
10009030:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10009032:	2901      	cmp	r1, #1
10009034:	d000      	beq.n	10009038 <gpio_pinmux_cofiguration+0x30>
10009036:	e08a      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10009038:	2803      	cmp	r0, #3
1000903a:	d80f      	bhi.n	1000905c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000903c:	0011      	movs	r1, r2
1000903e:	22d0      	movs	r2, #208	; 0xd0
10009040:	0052      	lsls	r2, r2, #1
10009042:	588c      	ldr	r4, [r1, r2]
10009044:	2303      	movs	r3, #3
10009046:	4018      	ands	r0, r3
10009048:	00c0      	lsls	r0, r0, #3
1000904a:	333c      	adds	r3, #60	; 0x3c
1000904c:	4083      	lsls	r3, r0
1000904e:	439c      	bics	r4, r3
10009050:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009052:	588b      	ldr	r3, [r1, r2]
10009054:	4085      	lsls	r5, r0
10009056:	431d      	orrs	r5, r3
10009058:	508d      	str	r5, [r1, r2]
1000905a:	e078      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000905c:	493c      	ldr	r1, [pc, #240]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
1000905e:	22d2      	movs	r2, #210	; 0xd2
10009060:	0052      	lsls	r2, r2, #1
10009062:	588c      	ldr	r4, [r1, r2]
10009064:	2303      	movs	r3, #3
10009066:	4018      	ands	r0, r3
10009068:	00c0      	lsls	r0, r0, #3
1000906a:	333c      	adds	r3, #60	; 0x3c
1000906c:	4083      	lsls	r3, r0
1000906e:	439c      	bics	r4, r3
10009070:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009072:	588b      	ldr	r3, [r1, r2]
10009074:	4085      	lsls	r5, r0
10009076:	431d      	orrs	r5, r3
10009078:	508d      	str	r5, [r1, r2]
1000907a:	e068      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000907c:	280f      	cmp	r0, #15
1000907e:	d832      	bhi.n	100090e6 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009080:	4a33      	ldr	r2, [pc, #204]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
10009082:	6c94      	ldr	r4, [r2, #72]	; 0x48
10009084:	2307      	movs	r3, #7
10009086:	4003      	ands	r3, r0
10009088:	009b      	lsls	r3, r3, #2
1000908a:	2607      	movs	r6, #7
1000908c:	409e      	lsls	r6, r3
1000908e:	43b4      	bics	r4, r6
10009090:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10009092:	6c94      	ldr	r4, [r2, #72]	; 0x48
10009094:	000e      	movs	r6, r1
10009096:	409e      	lsls	r6, r3
10009098:	0033      	movs	r3, r6
1000909a:	4323      	orrs	r3, r4
1000909c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000909e:	2901      	cmp	r1, #1
100090a0:	d155      	bne.n	1000914e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
100090a2:	280b      	cmp	r0, #11
100090a4:	d80f      	bhi.n	100090c6 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100090a6:	0011      	movs	r1, r2
100090a8:	22d4      	movs	r2, #212	; 0xd4
100090aa:	0052      	lsls	r2, r2, #1
100090ac:	588c      	ldr	r4, [r1, r2]
100090ae:	2303      	movs	r3, #3
100090b0:	4018      	ands	r0, r3
100090b2:	00c0      	lsls	r0, r0, #3
100090b4:	333c      	adds	r3, #60	; 0x3c
100090b6:	4083      	lsls	r3, r0
100090b8:	439c      	bics	r4, r3
100090ba:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100090bc:	588b      	ldr	r3, [r1, r2]
100090be:	4085      	lsls	r5, r0
100090c0:	431d      	orrs	r5, r3
100090c2:	508d      	str	r5, [r1, r2]
100090c4:	e043      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
100090c6:	4922      	ldr	r1, [pc, #136]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
100090c8:	22d6      	movs	r2, #214	; 0xd6
100090ca:	0052      	lsls	r2, r2, #1
100090cc:	588c      	ldr	r4, [r1, r2]
100090ce:	2303      	movs	r3, #3
100090d0:	4018      	ands	r0, r3
100090d2:	00c0      	lsls	r0, r0, #3
100090d4:	333c      	adds	r3, #60	; 0x3c
100090d6:	4083      	lsls	r3, r0
100090d8:	439c      	bics	r4, r3
100090da:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
100090dc:	588b      	ldr	r3, [r1, r2]
100090de:	4085      	lsls	r5, r0
100090e0:	431d      	orrs	r5, r3
100090e2:	508d      	str	r5, [r1, r2]
100090e4:	e033      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
100090e6:	2817      	cmp	r0, #23
100090e8:	d831      	bhi.n	1000914e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
100090ea:	4a19      	ldr	r2, [pc, #100]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
100090ec:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100090ee:	2307      	movs	r3, #7
100090f0:	4003      	ands	r3, r0
100090f2:	009b      	lsls	r3, r3, #2
100090f4:	2607      	movs	r6, #7
100090f6:	409e      	lsls	r6, r3
100090f8:	43b4      	bics	r4, r6
100090fa:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
100090fc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
100090fe:	000e      	movs	r6, r1
10009100:	409e      	lsls	r6, r3
10009102:	0033      	movs	r3, r6
10009104:	4323      	orrs	r3, r4
10009106:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10009108:	2901      	cmp	r1, #1
1000910a:	d120      	bne.n	1000914e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000910c:	2813      	cmp	r0, #19
1000910e:	d80f      	bhi.n	10009130 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009110:	0011      	movs	r1, r2
10009112:	22d8      	movs	r2, #216	; 0xd8
10009114:	0052      	lsls	r2, r2, #1
10009116:	588c      	ldr	r4, [r1, r2]
10009118:	2303      	movs	r3, #3
1000911a:	4018      	ands	r0, r3
1000911c:	00c0      	lsls	r0, r0, #3
1000911e:	333c      	adds	r3, #60	; 0x3c
10009120:	4083      	lsls	r3, r0
10009122:	439c      	bics	r4, r3
10009124:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009126:	588b      	ldr	r3, [r1, r2]
10009128:	4085      	lsls	r5, r0
1000912a:	431d      	orrs	r5, r3
1000912c:	508d      	str	r5, [r1, r2]
1000912e:	e00e      	b.n	1000914e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10009130:	4a07      	ldr	r2, [pc, #28]	; (10009150 <gpio_pinmux_cofiguration+0x148>)
10009132:	23da      	movs	r3, #218	; 0xda
10009134:	005b      	lsls	r3, r3, #1
10009136:	58d1      	ldr	r1, [r2, r3]
10009138:	2403      	movs	r4, #3
1000913a:	4020      	ands	r0, r4
1000913c:	00c0      	lsls	r0, r0, #3
1000913e:	343c      	adds	r4, #60	; 0x3c
10009140:	4084      	lsls	r4, r0
10009142:	43a1      	bics	r1, r4
10009144:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10009146:	58d1      	ldr	r1, [r2, r3]
10009148:	4085      	lsls	r5, r0
1000914a:	430d      	orrs	r5, r1
1000914c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000914e:	bd70      	pop	{r4, r5, r6, pc}
10009150:	4000b000 	.word	0x4000b000

10009154 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10009154:	2801      	cmp	r0, #1
10009156:	d00d      	beq.n	10009174 <system_clock_config+0x20>
10009158:	2800      	cmp	r0, #0
1000915a:	d002      	beq.n	10009162 <system_clock_config+0xe>
1000915c:	2802      	cmp	r0, #2
1000915e:	d01c      	beq.n	1000919a <system_clock_config+0x46>
10009160:	e02e      	b.n	100091c0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009162:	4a18      	ldr	r2, [pc, #96]	; (100091c4 <system_clock_config+0x70>)
10009164:	6990      	ldr	r0, [r2, #24]
10009166:	230c      	movs	r3, #12
10009168:	4303      	orrs	r3, r0
1000916a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000916c:	4a16      	ldr	r2, [pc, #88]	; (100091c8 <system_clock_config+0x74>)
1000916e:	4b17      	ldr	r3, [pc, #92]	; (100091cc <system_clock_config+0x78>)
10009170:	601a      	str	r2, [r3, #0]
			break;
10009172:	e01a      	b.n	100091aa <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10009174:	4b13      	ldr	r3, [pc, #76]	; (100091c4 <system_clock_config+0x70>)
10009176:	6998      	ldr	r0, [r3, #24]
10009178:	2208      	movs	r2, #8
1000917a:	4302      	orrs	r2, r0
1000917c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000917e:	699a      	ldr	r2, [r3, #24]
10009180:	2004      	movs	r0, #4
10009182:	4382      	bics	r2, r0
10009184:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10009186:	4a12      	ldr	r2, [pc, #72]	; (100091d0 <system_clock_config+0x7c>)
10009188:	6853      	ldr	r3, [r2, #4]
1000918a:	2080      	movs	r0, #128	; 0x80
1000918c:	0300      	lsls	r0, r0, #12
1000918e:	4303      	orrs	r3, r0
10009190:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10009192:	4a10      	ldr	r2, [pc, #64]	; (100091d4 <system_clock_config+0x80>)
10009194:	4b0d      	ldr	r3, [pc, #52]	; (100091cc <system_clock_config+0x78>)
10009196:	601a      	str	r2, [r3, #0]
			break;
10009198:	e007      	b.n	100091aa <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
1000919a:	4a0a      	ldr	r2, [pc, #40]	; (100091c4 <system_clock_config+0x70>)
1000919c:	6993      	ldr	r3, [r2, #24]
1000919e:	200c      	movs	r0, #12
100091a0:	4383      	bics	r3, r0
100091a2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
100091a4:	4a08      	ldr	r2, [pc, #32]	; (100091c8 <system_clock_config+0x74>)
100091a6:	4b09      	ldr	r3, [pc, #36]	; (100091cc <system_clock_config+0x78>)
100091a8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
100091aa:	4b06      	ldr	r3, [pc, #24]	; (100091c4 <system_clock_config+0x70>)
100091ac:	699a      	ldr	r2, [r3, #24]
100091ae:	2003      	movs	r0, #3
100091b0:	4382      	bics	r2, r0
100091b2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
100091b4:	699a      	ldr	r2, [r3, #24]
100091b6:	4001      	ands	r1, r0
100091b8:	4311      	orrs	r1, r2
100091ba:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
100091bc:	2000      	movs	r0, #0
100091be:	e000      	b.n	100091c2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
100091c0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
100091c2:	4770      	bx	lr
100091c4:	4000b000 	.word	0x4000b000
100091c8:	018cba80 	.word	0x018cba80
100091cc:	100153d0 	.word	0x100153d0
100091d0:	4000f000 	.word	0x4000f000
100091d4:	001e8480 	.word	0x001e8480

100091d8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
100091d8:	4b01      	ldr	r3, [pc, #4]	; (100091e0 <system_clock_get_value+0x8>)
100091da:	6818      	ldr	r0, [r3, #0]
}
100091dc:	4770      	bx	lr
100091de:	46c0      	nop			; (mov r8, r8)
100091e0:	100153d0 	.word	0x100153d0

100091e4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
100091e4:	b500      	push	{lr}
	switch (peripheral) {
100091e6:	2835      	cmp	r0, #53	; 0x35
100091e8:	d900      	bls.n	100091ec <system_clock_peripheral_enable+0x8>
100091ea:	e1a2      	b.n	10009532 <system_clock_peripheral_enable+0x34e>
100091ec:	0080      	lsls	r0, r0, #2
100091ee:	4bd2      	ldr	r3, [pc, #840]	; (10009538 <system_clock_peripheral_enable+0x354>)
100091f0:	581b      	ldr	r3, [r3, r0]
100091f2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100091f4:	4ad1      	ldr	r2, [pc, #836]	; (1000953c <system_clock_peripheral_enable+0x358>)
100091f6:	68d1      	ldr	r1, [r2, #12]
100091f8:	2302      	movs	r3, #2
100091fa:	430b      	orrs	r3, r1
100091fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091fe:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10009200:	e198      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009202:	4ace      	ldr	r2, [pc, #824]	; (1000953c <system_clock_peripheral_enable+0x358>)
10009204:	68d1      	ldr	r1, [r2, #12]
10009206:	2304      	movs	r3, #4
10009208:	430b      	orrs	r3, r1
1000920a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000920c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
1000920e:	e191      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009210:	4aca      	ldr	r2, [pc, #808]	; (1000953c <system_clock_peripheral_enable+0x358>)
10009212:	68d1      	ldr	r1, [r2, #12]
10009214:	2308      	movs	r3, #8
10009216:	430b      	orrs	r3, r1
10009218:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000921a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
1000921c:	e18a      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000921e:	4ac7      	ldr	r2, [pc, #796]	; (1000953c <system_clock_peripheral_enable+0x358>)
10009220:	68d1      	ldr	r1, [r2, #12]
10009222:	2310      	movs	r3, #16
10009224:	430b      	orrs	r3, r1
10009226:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009228:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
1000922a:	e183      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000922c:	4ac3      	ldr	r2, [pc, #780]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000922e:	68d1      	ldr	r1, [r2, #12]
10009230:	2320      	movs	r3, #32
10009232:	430b      	orrs	r3, r1
10009234:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009236:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10009238:	e17c      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000923a:	4ac0      	ldr	r2, [pc, #768]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000923c:	68d1      	ldr	r1, [r2, #12]
1000923e:	2380      	movs	r3, #128	; 0x80
10009240:	430b      	orrs	r3, r1
10009242:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009244:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10009246:	e175      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009248:	4abc      	ldr	r2, [pc, #752]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000924a:	68d3      	ldr	r3, [r2, #12]
1000924c:	2180      	movs	r1, #128	; 0x80
1000924e:	0049      	lsls	r1, r1, #1
10009250:	430b      	orrs	r3, r1
10009252:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009254:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10009256:	e16d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009258:	4ab8      	ldr	r2, [pc, #736]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000925a:	68d3      	ldr	r3, [r2, #12]
1000925c:	2180      	movs	r1, #128	; 0x80
1000925e:	0109      	lsls	r1, r1, #4
10009260:	430b      	orrs	r3, r1
10009262:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009264:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10009266:	e165      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009268:	4ab4      	ldr	r2, [pc, #720]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000926a:	68d3      	ldr	r3, [r2, #12]
1000926c:	2180      	movs	r1, #128	; 0x80
1000926e:	0149      	lsls	r1, r1, #5
10009270:	430b      	orrs	r3, r1
10009272:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009274:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10009276:	e15d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009278:	4ab0      	ldr	r2, [pc, #704]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000927a:	68d3      	ldr	r3, [r2, #12]
1000927c:	2180      	movs	r1, #128	; 0x80
1000927e:	0189      	lsls	r1, r1, #6
10009280:	430b      	orrs	r3, r1
10009282:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009284:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10009286:	e155      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009288:	4aac      	ldr	r2, [pc, #688]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000928a:	68d3      	ldr	r3, [r2, #12]
1000928c:	2180      	movs	r1, #128	; 0x80
1000928e:	01c9      	lsls	r1, r1, #7
10009290:	430b      	orrs	r3, r1
10009292:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009294:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10009296:	e14d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009298:	4aa8      	ldr	r2, [pc, #672]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000929a:	68d3      	ldr	r3, [r2, #12]
1000929c:	2180      	movs	r1, #128	; 0x80
1000929e:	0209      	lsls	r1, r1, #8
100092a0:	430b      	orrs	r3, r1
100092a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
100092a6:	e145      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092a8:	4aa4      	ldr	r2, [pc, #656]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092aa:	68d3      	ldr	r3, [r2, #12]
100092ac:	2180      	movs	r1, #128	; 0x80
100092ae:	0249      	lsls	r1, r1, #9
100092b0:	430b      	orrs	r3, r1
100092b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
100092b6:	e13d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092b8:	4aa0      	ldr	r2, [pc, #640]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092ba:	68d3      	ldr	r3, [r2, #12]
100092bc:	2180      	movs	r1, #128	; 0x80
100092be:	0289      	lsls	r1, r1, #10
100092c0:	430b      	orrs	r3, r1
100092c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
100092c6:	e135      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092c8:	4a9c      	ldr	r2, [pc, #624]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092ca:	68d3      	ldr	r3, [r2, #12]
100092cc:	2180      	movs	r1, #128	; 0x80
100092ce:	02c9      	lsls	r1, r1, #11
100092d0:	430b      	orrs	r3, r1
100092d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
100092d6:	e12d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092d8:	4a98      	ldr	r2, [pc, #608]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092da:	68d3      	ldr	r3, [r2, #12]
100092dc:	2180      	movs	r1, #128	; 0x80
100092de:	0309      	lsls	r1, r1, #12
100092e0:	430b      	orrs	r3, r1
100092e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
100092e6:	e125      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092e8:	4a94      	ldr	r2, [pc, #592]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092ea:	68d3      	ldr	r3, [r2, #12]
100092ec:	2180      	movs	r1, #128	; 0x80
100092ee:	0349      	lsls	r1, r1, #13
100092f0:	430b      	orrs	r3, r1
100092f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
100092f6:	e11d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
100092f8:	4a90      	ldr	r2, [pc, #576]	; (1000953c <system_clock_peripheral_enable+0x358>)
100092fa:	68d3      	ldr	r3, [r2, #12]
100092fc:	2180      	movs	r1, #128	; 0x80
100092fe:	0389      	lsls	r1, r1, #14
10009300:	430b      	orrs	r3, r1
10009302:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009304:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10009306:	e115      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009308:	4a8c      	ldr	r2, [pc, #560]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000930a:	68d3      	ldr	r3, [r2, #12]
1000930c:	2180      	movs	r1, #128	; 0x80
1000930e:	03c9      	lsls	r1, r1, #15
10009310:	430b      	orrs	r3, r1
10009312:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009314:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10009316:	e10d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009318:	4a88      	ldr	r2, [pc, #544]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000931a:	68d3      	ldr	r3, [r2, #12]
1000931c:	2180      	movs	r1, #128	; 0x80
1000931e:	0409      	lsls	r1, r1, #16
10009320:	430b      	orrs	r3, r1
10009322:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009324:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10009326:	e105      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009328:	4a84      	ldr	r2, [pc, #528]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000932a:	68d3      	ldr	r3, [r2, #12]
1000932c:	2180      	movs	r1, #128	; 0x80
1000932e:	0449      	lsls	r1, r1, #17
10009330:	430b      	orrs	r3, r1
10009332:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009334:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10009336:	e0fd      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009338:	4a80      	ldr	r2, [pc, #512]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000933a:	68d3      	ldr	r3, [r2, #12]
1000933c:	2180      	movs	r1, #128	; 0x80
1000933e:	0489      	lsls	r1, r1, #18
10009340:	430b      	orrs	r3, r1
10009342:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009344:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10009346:	e0f5      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009348:	4a7c      	ldr	r2, [pc, #496]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000934a:	68d3      	ldr	r3, [r2, #12]
1000934c:	2180      	movs	r1, #128	; 0x80
1000934e:	04c9      	lsls	r1, r1, #19
10009350:	430b      	orrs	r3, r1
10009352:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009354:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10009356:	e0ed      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009358:	4a78      	ldr	r2, [pc, #480]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000935a:	68d3      	ldr	r3, [r2, #12]
1000935c:	2180      	movs	r1, #128	; 0x80
1000935e:	0509      	lsls	r1, r1, #20
10009360:	430b      	orrs	r3, r1
10009362:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10009366:	e0e5      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009368:	4a74      	ldr	r2, [pc, #464]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000936a:	68d3      	ldr	r3, [r2, #12]
1000936c:	2180      	movs	r1, #128	; 0x80
1000936e:	0549      	lsls	r1, r1, #21
10009370:	430b      	orrs	r3, r1
10009372:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009374:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10009376:	e0dd      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009378:	4a70      	ldr	r2, [pc, #448]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000937a:	68d3      	ldr	r3, [r2, #12]
1000937c:	2180      	movs	r1, #128	; 0x80
1000937e:	0589      	lsls	r1, r1, #22
10009380:	430b      	orrs	r3, r1
10009382:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009384:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10009386:	e0d5      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10009388:	4a6c      	ldr	r2, [pc, #432]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000938a:	68d3      	ldr	r3, [r2, #12]
1000938c:	2180      	movs	r1, #128	; 0x80
1000938e:	05c9      	lsls	r1, r1, #23
10009390:	430b      	orrs	r3, r1
10009392:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009394:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10009396:	e0cd      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009398:	4a68      	ldr	r2, [pc, #416]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000939a:	6911      	ldr	r1, [r2, #16]
1000939c:	2301      	movs	r3, #1
1000939e:	430b      	orrs	r3, r1
100093a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
100093a4:	e0c6      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093a6:	4a65      	ldr	r2, [pc, #404]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093a8:	6911      	ldr	r1, [r2, #16]
100093aa:	2302      	movs	r3, #2
100093ac:	430b      	orrs	r3, r1
100093ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
100093b2:	e0bf      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093b4:	4a61      	ldr	r2, [pc, #388]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093b6:	6911      	ldr	r1, [r2, #16]
100093b8:	2304      	movs	r3, #4
100093ba:	430b      	orrs	r3, r1
100093bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
100093c0:	e0b8      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093c2:	4a5e      	ldr	r2, [pc, #376]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093c4:	6911      	ldr	r1, [r2, #16]
100093c6:	2308      	movs	r3, #8
100093c8:	430b      	orrs	r3, r1
100093ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
100093ce:	e0b1      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093d0:	4a5a      	ldr	r2, [pc, #360]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093d2:	6911      	ldr	r1, [r2, #16]
100093d4:	2310      	movs	r3, #16
100093d6:	430b      	orrs	r3, r1
100093d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
100093dc:	e0aa      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093de:	4a57      	ldr	r2, [pc, #348]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093e0:	6911      	ldr	r1, [r2, #16]
100093e2:	2320      	movs	r3, #32
100093e4:	430b      	orrs	r3, r1
100093e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
100093ea:	e0a3      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093ec:	4a53      	ldr	r2, [pc, #332]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093ee:	6911      	ldr	r1, [r2, #16]
100093f0:	2340      	movs	r3, #64	; 0x40
100093f2:	430b      	orrs	r3, r1
100093f4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
100093f8:	e09c      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100093fa:	4a50      	ldr	r2, [pc, #320]	; (1000953c <system_clock_peripheral_enable+0x358>)
100093fc:	6911      	ldr	r1, [r2, #16]
100093fe:	2380      	movs	r3, #128	; 0x80
10009400:	430b      	orrs	r3, r1
10009402:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009404:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10009406:	e095      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009408:	4a4c      	ldr	r2, [pc, #304]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000940a:	6913      	ldr	r3, [r2, #16]
1000940c:	2180      	movs	r1, #128	; 0x80
1000940e:	0049      	lsls	r1, r1, #1
10009410:	430b      	orrs	r3, r1
10009412:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009414:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10009416:	e08d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009418:	4a48      	ldr	r2, [pc, #288]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000941a:	6913      	ldr	r3, [r2, #16]
1000941c:	2180      	movs	r1, #128	; 0x80
1000941e:	0089      	lsls	r1, r1, #2
10009420:	430b      	orrs	r3, r1
10009422:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009424:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10009426:	e085      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009428:	4a44      	ldr	r2, [pc, #272]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000942a:	6913      	ldr	r3, [r2, #16]
1000942c:	2180      	movs	r1, #128	; 0x80
1000942e:	00c9      	lsls	r1, r1, #3
10009430:	430b      	orrs	r3, r1
10009432:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009434:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009436:	e07d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009438:	4a40      	ldr	r2, [pc, #256]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000943a:	6913      	ldr	r3, [r2, #16]
1000943c:	2180      	movs	r1, #128	; 0x80
1000943e:	0109      	lsls	r1, r1, #4
10009440:	430b      	orrs	r3, r1
10009442:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009444:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009446:	e075      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009448:	4a3c      	ldr	r2, [pc, #240]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000944a:	6913      	ldr	r3, [r2, #16]
1000944c:	2180      	movs	r1, #128	; 0x80
1000944e:	0149      	lsls	r1, r1, #5
10009450:	430b      	orrs	r3, r1
10009452:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009454:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009456:	e06d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009458:	4a38      	ldr	r2, [pc, #224]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000945a:	6913      	ldr	r3, [r2, #16]
1000945c:	2180      	movs	r1, #128	; 0x80
1000945e:	0189      	lsls	r1, r1, #6
10009460:	430b      	orrs	r3, r1
10009462:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009464:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009466:	e065      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009468:	4a34      	ldr	r2, [pc, #208]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000946a:	6913      	ldr	r3, [r2, #16]
1000946c:	2180      	movs	r1, #128	; 0x80
1000946e:	01c9      	lsls	r1, r1, #7
10009470:	430b      	orrs	r3, r1
10009472:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009474:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
10009476:	e05d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009478:	4a30      	ldr	r2, [pc, #192]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000947a:	6913      	ldr	r3, [r2, #16]
1000947c:	2180      	movs	r1, #128	; 0x80
1000947e:	0209      	lsls	r1, r1, #8
10009480:	430b      	orrs	r3, r1
10009482:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009484:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
10009486:	e055      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009488:	4a2c      	ldr	r2, [pc, #176]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000948a:	6913      	ldr	r3, [r2, #16]
1000948c:	2180      	movs	r1, #128	; 0x80
1000948e:	0249      	lsls	r1, r1, #9
10009490:	430b      	orrs	r3, r1
10009492:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009494:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
10009496:	e04d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009498:	4a28      	ldr	r2, [pc, #160]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000949a:	6913      	ldr	r3, [r2, #16]
1000949c:	2180      	movs	r1, #128	; 0x80
1000949e:	0289      	lsls	r1, r1, #10
100094a0:	430b      	orrs	r3, r1
100094a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100094a6:	e045      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094a8:	4a24      	ldr	r2, [pc, #144]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094aa:	6913      	ldr	r3, [r2, #16]
100094ac:	2180      	movs	r1, #128	; 0x80
100094ae:	02c9      	lsls	r1, r1, #11
100094b0:	430b      	orrs	r3, r1
100094b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100094b6:	e03d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094b8:	4a20      	ldr	r2, [pc, #128]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094ba:	6913      	ldr	r3, [r2, #16]
100094bc:	2180      	movs	r1, #128	; 0x80
100094be:	0309      	lsls	r1, r1, #12
100094c0:	430b      	orrs	r3, r1
100094c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100094c6:	e035      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094c8:	4a1c      	ldr	r2, [pc, #112]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094ca:	6913      	ldr	r3, [r2, #16]
100094cc:	2180      	movs	r1, #128	; 0x80
100094ce:	0349      	lsls	r1, r1, #13
100094d0:	430b      	orrs	r3, r1
100094d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
100094d6:	e02d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094d8:	4a18      	ldr	r2, [pc, #96]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094da:	6913      	ldr	r3, [r2, #16]
100094dc:	2180      	movs	r1, #128	; 0x80
100094de:	0389      	lsls	r1, r1, #14
100094e0:	430b      	orrs	r3, r1
100094e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
100094e6:	e025      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094e8:	4a14      	ldr	r2, [pc, #80]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094ea:	6913      	ldr	r3, [r2, #16]
100094ec:	2180      	movs	r1, #128	; 0x80
100094ee:	03c9      	lsls	r1, r1, #15
100094f0:	430b      	orrs	r3, r1
100094f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
100094f6:	e01d      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100094f8:	4a10      	ldr	r2, [pc, #64]	; (1000953c <system_clock_peripheral_enable+0x358>)
100094fa:	6913      	ldr	r3, [r2, #16]
100094fc:	2180      	movs	r1, #128	; 0x80
100094fe:	0409      	lsls	r1, r1, #16
10009500:	430b      	orrs	r3, r1
10009502:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009504:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009506:	e015      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009508:	4a0c      	ldr	r2, [pc, #48]	; (1000953c <system_clock_peripheral_enable+0x358>)
1000950a:	7d11      	ldrb	r1, [r2, #20]
1000950c:	2301      	movs	r3, #1
1000950e:	430b      	orrs	r3, r1
10009510:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009512:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009514:	e00e      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009516:	4a09      	ldr	r2, [pc, #36]	; (1000953c <system_clock_peripheral_enable+0x358>)
10009518:	7d11      	ldrb	r1, [r2, #20]
1000951a:	2302      	movs	r3, #2
1000951c:	430b      	orrs	r3, r1
1000951e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009520:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10009522:	e007      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009524:	4a05      	ldr	r2, [pc, #20]	; (1000953c <system_clock_peripheral_enable+0x358>)
10009526:	7d11      	ldrb	r1, [r2, #20]
10009528:	2304      	movs	r3, #4
1000952a:	430b      	orrs	r3, r1
1000952c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000952e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10009530:	e000      	b.n	10009534 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10009532:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009534:	bd00      	pop	{pc}
10009536:	46c0      	nop			; (mov r8, r8)
10009538:	100128d0 	.word	0x100128d0
1000953c:	4000b000 	.word	0x4000b000

10009540 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009540:	b500      	push	{lr}
	switch (peripheral) {
10009542:	2843      	cmp	r0, #67	; 0x43
10009544:	d900      	bls.n	10009548 <system_peripheral_reset+0x8>
10009546:	e223      	b.n	10009990 <system_peripheral_reset+0x450>
10009548:	0080      	lsls	r0, r0, #2
1000954a:	4be0      	ldr	r3, [pc, #896]	; (100098cc <system_peripheral_reset+0x38c>)
1000954c:	581b      	ldr	r3, [r3, r0]
1000954e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009550:	4bdf      	ldr	r3, [pc, #892]	; (100098d0 <system_peripheral_reset+0x390>)
10009552:	6859      	ldr	r1, [r3, #4]
10009554:	2202      	movs	r2, #2
10009556:	4391      	bics	r1, r2
10009558:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000955a:	6859      	ldr	r1, [r3, #4]
1000955c:	430a      	orrs	r2, r1
1000955e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009560:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
10009562:	e216      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009564:	4bda      	ldr	r3, [pc, #872]	; (100098d0 <system_peripheral_reset+0x390>)
10009566:	6859      	ldr	r1, [r3, #4]
10009568:	2204      	movs	r2, #4
1000956a:	4391      	bics	r1, r2
1000956c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000956e:	6859      	ldr	r1, [r3, #4]
10009570:	430a      	orrs	r2, r1
10009572:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009574:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
10009576:	e20c      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009578:	4bd5      	ldr	r3, [pc, #852]	; (100098d0 <system_peripheral_reset+0x390>)
1000957a:	6859      	ldr	r1, [r3, #4]
1000957c:	2208      	movs	r2, #8
1000957e:	4391      	bics	r1, r2
10009580:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009582:	6859      	ldr	r1, [r3, #4]
10009584:	430a      	orrs	r2, r1
10009586:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009588:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
1000958a:	e202      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000958c:	4bd0      	ldr	r3, [pc, #832]	; (100098d0 <system_peripheral_reset+0x390>)
1000958e:	6859      	ldr	r1, [r3, #4]
10009590:	2210      	movs	r2, #16
10009592:	4391      	bics	r1, r2
10009594:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009596:	6859      	ldr	r1, [r3, #4]
10009598:	430a      	orrs	r2, r1
1000959a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000959c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
1000959e:	e1f8      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095a0:	4bcb      	ldr	r3, [pc, #812]	; (100098d0 <system_peripheral_reset+0x390>)
100095a2:	6859      	ldr	r1, [r3, #4]
100095a4:	2220      	movs	r2, #32
100095a6:	4391      	bics	r1, r2
100095a8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095aa:	6859      	ldr	r1, [r3, #4]
100095ac:	430a      	orrs	r2, r1
100095ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
100095b2:	e1ee      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095b4:	4bc6      	ldr	r3, [pc, #792]	; (100098d0 <system_peripheral_reset+0x390>)
100095b6:	6859      	ldr	r1, [r3, #4]
100095b8:	2240      	movs	r2, #64	; 0x40
100095ba:	4391      	bics	r1, r2
100095bc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095be:	6859      	ldr	r1, [r3, #4]
100095c0:	430a      	orrs	r2, r1
100095c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095c4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
100095c6:	e1e4      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095c8:	4bc1      	ldr	r3, [pc, #772]	; (100098d0 <system_peripheral_reset+0x390>)
100095ca:	6859      	ldr	r1, [r3, #4]
100095cc:	2280      	movs	r2, #128	; 0x80
100095ce:	4391      	bics	r1, r2
100095d0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095d2:	6859      	ldr	r1, [r3, #4]
100095d4:	430a      	orrs	r2, r1
100095d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095d8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
100095da:	e1da      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095dc:	4bbc      	ldr	r3, [pc, #752]	; (100098d0 <system_peripheral_reset+0x390>)
100095de:	6859      	ldr	r1, [r3, #4]
100095e0:	4abc      	ldr	r2, [pc, #752]	; (100098d4 <system_peripheral_reset+0x394>)
100095e2:	400a      	ands	r2, r1
100095e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095e6:	685a      	ldr	r2, [r3, #4]
100095e8:	2180      	movs	r1, #128	; 0x80
100095ea:	0049      	lsls	r1, r1, #1
100095ec:	430a      	orrs	r2, r1
100095ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095f0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
100095f2:	e1ce      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100095f4:	4bb6      	ldr	r3, [pc, #728]	; (100098d0 <system_peripheral_reset+0x390>)
100095f6:	6859      	ldr	r1, [r3, #4]
100095f8:	4ab7      	ldr	r2, [pc, #732]	; (100098d8 <system_peripheral_reset+0x398>)
100095fa:	400a      	ands	r2, r1
100095fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100095fe:	685a      	ldr	r2, [r3, #4]
10009600:	2180      	movs	r1, #128	; 0x80
10009602:	0089      	lsls	r1, r1, #2
10009604:	430a      	orrs	r2, r1
10009606:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009608:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000960a:	e1c2      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000960c:	4bb0      	ldr	r3, [pc, #704]	; (100098d0 <system_peripheral_reset+0x390>)
1000960e:	6859      	ldr	r1, [r3, #4]
10009610:	4ab2      	ldr	r2, [pc, #712]	; (100098dc <system_peripheral_reset+0x39c>)
10009612:	400a      	ands	r2, r1
10009614:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009616:	685a      	ldr	r2, [r3, #4]
10009618:	2180      	movs	r1, #128	; 0x80
1000961a:	00c9      	lsls	r1, r1, #3
1000961c:	430a      	orrs	r2, r1
1000961e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009620:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009622:	e1b6      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009624:	4baa      	ldr	r3, [pc, #680]	; (100098d0 <system_peripheral_reset+0x390>)
10009626:	6859      	ldr	r1, [r3, #4]
10009628:	4aad      	ldr	r2, [pc, #692]	; (100098e0 <system_peripheral_reset+0x3a0>)
1000962a:	400a      	ands	r2, r1
1000962c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000962e:	685a      	ldr	r2, [r3, #4]
10009630:	2180      	movs	r1, #128	; 0x80
10009632:	0109      	lsls	r1, r1, #4
10009634:	430a      	orrs	r2, r1
10009636:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009638:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000963a:	e1aa      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000963c:	4ba4      	ldr	r3, [pc, #656]	; (100098d0 <system_peripheral_reset+0x390>)
1000963e:	6859      	ldr	r1, [r3, #4]
10009640:	4aa8      	ldr	r2, [pc, #672]	; (100098e4 <system_peripheral_reset+0x3a4>)
10009642:	400a      	ands	r2, r1
10009644:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009646:	685a      	ldr	r2, [r3, #4]
10009648:	2180      	movs	r1, #128	; 0x80
1000964a:	0149      	lsls	r1, r1, #5
1000964c:	430a      	orrs	r2, r1
1000964e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009650:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10009652:	e19e      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009654:	4b9e      	ldr	r3, [pc, #632]	; (100098d0 <system_peripheral_reset+0x390>)
10009656:	6859      	ldr	r1, [r3, #4]
10009658:	4aa3      	ldr	r2, [pc, #652]	; (100098e8 <system_peripheral_reset+0x3a8>)
1000965a:	400a      	ands	r2, r1
1000965c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000965e:	685a      	ldr	r2, [r3, #4]
10009660:	2180      	movs	r1, #128	; 0x80
10009662:	0189      	lsls	r1, r1, #6
10009664:	430a      	orrs	r2, r1
10009666:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009668:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
1000966a:	e192      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000966c:	4b98      	ldr	r3, [pc, #608]	; (100098d0 <system_peripheral_reset+0x390>)
1000966e:	6859      	ldr	r1, [r3, #4]
10009670:	4a9e      	ldr	r2, [pc, #632]	; (100098ec <system_peripheral_reset+0x3ac>)
10009672:	400a      	ands	r2, r1
10009674:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009676:	685a      	ldr	r2, [r3, #4]
10009678:	2180      	movs	r1, #128	; 0x80
1000967a:	01c9      	lsls	r1, r1, #7
1000967c:	430a      	orrs	r2, r1
1000967e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009680:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
10009682:	e186      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009684:	4b92      	ldr	r3, [pc, #584]	; (100098d0 <system_peripheral_reset+0x390>)
10009686:	6859      	ldr	r1, [r3, #4]
10009688:	4a99      	ldr	r2, [pc, #612]	; (100098f0 <system_peripheral_reset+0x3b0>)
1000968a:	400a      	ands	r2, r1
1000968c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000968e:	685a      	ldr	r2, [r3, #4]
10009690:	2180      	movs	r1, #128	; 0x80
10009692:	0209      	lsls	r1, r1, #8
10009694:	430a      	orrs	r2, r1
10009696:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009698:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
1000969a:	e17a      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000969c:	4b8c      	ldr	r3, [pc, #560]	; (100098d0 <system_peripheral_reset+0x390>)
1000969e:	6859      	ldr	r1, [r3, #4]
100096a0:	4a94      	ldr	r2, [pc, #592]	; (100098f4 <system_peripheral_reset+0x3b4>)
100096a2:	400a      	ands	r2, r1
100096a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096a6:	685a      	ldr	r2, [r3, #4]
100096a8:	2180      	movs	r1, #128	; 0x80
100096aa:	0249      	lsls	r1, r1, #9
100096ac:	430a      	orrs	r2, r1
100096ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096b0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100096b2:	e16e      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096b4:	4b86      	ldr	r3, [pc, #536]	; (100098d0 <system_peripheral_reset+0x390>)
100096b6:	6859      	ldr	r1, [r3, #4]
100096b8:	4a8f      	ldr	r2, [pc, #572]	; (100098f8 <system_peripheral_reset+0x3b8>)
100096ba:	400a      	ands	r2, r1
100096bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096be:	685a      	ldr	r2, [r3, #4]
100096c0:	2180      	movs	r1, #128	; 0x80
100096c2:	0289      	lsls	r1, r1, #10
100096c4:	430a      	orrs	r2, r1
100096c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096c8:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
100096ca:	e162      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096cc:	4b80      	ldr	r3, [pc, #512]	; (100098d0 <system_peripheral_reset+0x390>)
100096ce:	6859      	ldr	r1, [r3, #4]
100096d0:	4a8a      	ldr	r2, [pc, #552]	; (100098fc <system_peripheral_reset+0x3bc>)
100096d2:	400a      	ands	r2, r1
100096d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096d6:	685a      	ldr	r2, [r3, #4]
100096d8:	2180      	movs	r1, #128	; 0x80
100096da:	02c9      	lsls	r1, r1, #11
100096dc:	430a      	orrs	r2, r1
100096de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096e0:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
100096e2:	e156      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096e4:	4b7a      	ldr	r3, [pc, #488]	; (100098d0 <system_peripheral_reset+0x390>)
100096e6:	6859      	ldr	r1, [r3, #4]
100096e8:	4a85      	ldr	r2, [pc, #532]	; (10009900 <system_peripheral_reset+0x3c0>)
100096ea:	400a      	ands	r2, r1
100096ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100096ee:	685a      	ldr	r2, [r3, #4]
100096f0:	2180      	movs	r1, #128	; 0x80
100096f2:	0309      	lsls	r1, r1, #12
100096f4:	430a      	orrs	r2, r1
100096f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100096f8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
100096fa:	e14a      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100096fc:	4b74      	ldr	r3, [pc, #464]	; (100098d0 <system_peripheral_reset+0x390>)
100096fe:	6859      	ldr	r1, [r3, #4]
10009700:	4a80      	ldr	r2, [pc, #512]	; (10009904 <system_peripheral_reset+0x3c4>)
10009702:	400a      	ands	r2, r1
10009704:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009706:	685a      	ldr	r2, [r3, #4]
10009708:	2180      	movs	r1, #128	; 0x80
1000970a:	0349      	lsls	r1, r1, #13
1000970c:	430a      	orrs	r2, r1
1000970e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009710:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009712:	e13e      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009714:	4b6e      	ldr	r3, [pc, #440]	; (100098d0 <system_peripheral_reset+0x390>)
10009716:	6859      	ldr	r1, [r3, #4]
10009718:	4a7b      	ldr	r2, [pc, #492]	; (10009908 <system_peripheral_reset+0x3c8>)
1000971a:	400a      	ands	r2, r1
1000971c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000971e:	685a      	ldr	r2, [r3, #4]
10009720:	2180      	movs	r1, #128	; 0x80
10009722:	0389      	lsls	r1, r1, #14
10009724:	430a      	orrs	r2, r1
10009726:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009728:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000972a:	e132      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000972c:	4b68      	ldr	r3, [pc, #416]	; (100098d0 <system_peripheral_reset+0x390>)
1000972e:	6859      	ldr	r1, [r3, #4]
10009730:	4a76      	ldr	r2, [pc, #472]	; (1000990c <system_peripheral_reset+0x3cc>)
10009732:	400a      	ands	r2, r1
10009734:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009736:	685a      	ldr	r2, [r3, #4]
10009738:	2180      	movs	r1, #128	; 0x80
1000973a:	03c9      	lsls	r1, r1, #15
1000973c:	430a      	orrs	r2, r1
1000973e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009740:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009742:	e126      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009744:	4b62      	ldr	r3, [pc, #392]	; (100098d0 <system_peripheral_reset+0x390>)
10009746:	6859      	ldr	r1, [r3, #4]
10009748:	4a71      	ldr	r2, [pc, #452]	; (10009910 <system_peripheral_reset+0x3d0>)
1000974a:	400a      	ands	r2, r1
1000974c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000974e:	685a      	ldr	r2, [r3, #4]
10009750:	2180      	movs	r1, #128	; 0x80
10009752:	0409      	lsls	r1, r1, #16
10009754:	430a      	orrs	r2, r1
10009756:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009758:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000975a:	e11a      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000975c:	4b5c      	ldr	r3, [pc, #368]	; (100098d0 <system_peripheral_reset+0x390>)
1000975e:	6859      	ldr	r1, [r3, #4]
10009760:	4a6c      	ldr	r2, [pc, #432]	; (10009914 <system_peripheral_reset+0x3d4>)
10009762:	400a      	ands	r2, r1
10009764:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009766:	685a      	ldr	r2, [r3, #4]
10009768:	2180      	movs	r1, #128	; 0x80
1000976a:	0449      	lsls	r1, r1, #17
1000976c:	430a      	orrs	r2, r1
1000976e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009770:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
10009772:	e10e      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009774:	4b56      	ldr	r3, [pc, #344]	; (100098d0 <system_peripheral_reset+0x390>)
10009776:	6859      	ldr	r1, [r3, #4]
10009778:	4a67      	ldr	r2, [pc, #412]	; (10009918 <system_peripheral_reset+0x3d8>)
1000977a:	400a      	ands	r2, r1
1000977c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000977e:	685a      	ldr	r2, [r3, #4]
10009780:	2180      	movs	r1, #128	; 0x80
10009782:	0489      	lsls	r1, r1, #18
10009784:	430a      	orrs	r2, r1
10009786:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009788:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
1000978a:	e102      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000978c:	4b50      	ldr	r3, [pc, #320]	; (100098d0 <system_peripheral_reset+0x390>)
1000978e:	6859      	ldr	r1, [r3, #4]
10009790:	4a62      	ldr	r2, [pc, #392]	; (1000991c <system_peripheral_reset+0x3dc>)
10009792:	400a      	ands	r2, r1
10009794:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009796:	685a      	ldr	r2, [r3, #4]
10009798:	2180      	movs	r1, #128	; 0x80
1000979a:	04c9      	lsls	r1, r1, #19
1000979c:	430a      	orrs	r2, r1
1000979e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097a0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
100097a2:	e0f6      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097a4:	4b4a      	ldr	r3, [pc, #296]	; (100098d0 <system_peripheral_reset+0x390>)
100097a6:	6859      	ldr	r1, [r3, #4]
100097a8:	4a5d      	ldr	r2, [pc, #372]	; (10009920 <system_peripheral_reset+0x3e0>)
100097aa:	400a      	ands	r2, r1
100097ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097ae:	685a      	ldr	r2, [r3, #4]
100097b0:	2180      	movs	r1, #128	; 0x80
100097b2:	0509      	lsls	r1, r1, #20
100097b4:	430a      	orrs	r2, r1
100097b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097b8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
100097ba:	e0ea      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097bc:	4b44      	ldr	r3, [pc, #272]	; (100098d0 <system_peripheral_reset+0x390>)
100097be:	6859      	ldr	r1, [r3, #4]
100097c0:	4a58      	ldr	r2, [pc, #352]	; (10009924 <system_peripheral_reset+0x3e4>)
100097c2:	400a      	ands	r2, r1
100097c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097c6:	685a      	ldr	r2, [r3, #4]
100097c8:	2180      	movs	r1, #128	; 0x80
100097ca:	0549      	lsls	r1, r1, #21
100097cc:	430a      	orrs	r2, r1
100097ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097d0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
100097d2:	e0de      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097d4:	4b3e      	ldr	r3, [pc, #248]	; (100098d0 <system_peripheral_reset+0x390>)
100097d6:	6859      	ldr	r1, [r3, #4]
100097d8:	4a53      	ldr	r2, [pc, #332]	; (10009928 <system_peripheral_reset+0x3e8>)
100097da:	400a      	ands	r2, r1
100097dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097de:	685a      	ldr	r2, [r3, #4]
100097e0:	2180      	movs	r1, #128	; 0x80
100097e2:	0589      	lsls	r1, r1, #22
100097e4:	430a      	orrs	r2, r1
100097e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100097e8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
100097ea:	e0d2      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100097ec:	4b38      	ldr	r3, [pc, #224]	; (100098d0 <system_peripheral_reset+0x390>)
100097ee:	6859      	ldr	r1, [r3, #4]
100097f0:	4a4e      	ldr	r2, [pc, #312]	; (1000992c <system_peripheral_reset+0x3ec>)
100097f2:	400a      	ands	r2, r1
100097f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100097f6:	685a      	ldr	r2, [r3, #4]
100097f8:	2180      	movs	r1, #128	; 0x80
100097fa:	05c9      	lsls	r1, r1, #23
100097fc:	430a      	orrs	r2, r1
100097fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009800:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10009802:	e0c6      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009804:	4a32      	ldr	r2, [pc, #200]	; (100098d0 <system_peripheral_reset+0x390>)
10009806:	6853      	ldr	r3, [r2, #4]
10009808:	005b      	lsls	r3, r3, #1
1000980a:	085b      	lsrs	r3, r3, #1
1000980c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000980e:	6853      	ldr	r3, [r2, #4]
10009810:	2180      	movs	r1, #128	; 0x80
10009812:	0609      	lsls	r1, r1, #24
10009814:	430b      	orrs	r3, r1
10009816:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009818:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000981a:	e0ba      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000981c:	4b2c      	ldr	r3, [pc, #176]	; (100098d0 <system_peripheral_reset+0x390>)
1000981e:	891a      	ldrh	r2, [r3, #8]
10009820:	2101      	movs	r1, #1
10009822:	438a      	bics	r2, r1
10009824:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009826:	8919      	ldrh	r1, [r3, #8]
10009828:	2201      	movs	r2, #1
1000982a:	430a      	orrs	r2, r1
1000982c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000982e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009830:	e0af      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009832:	4b27      	ldr	r3, [pc, #156]	; (100098d0 <system_peripheral_reset+0x390>)
10009834:	891a      	ldrh	r2, [r3, #8]
10009836:	2102      	movs	r1, #2
10009838:	438a      	bics	r2, r1
1000983a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000983c:	8919      	ldrh	r1, [r3, #8]
1000983e:	2202      	movs	r2, #2
10009840:	430a      	orrs	r2, r1
10009842:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009844:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10009846:	e0a4      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009848:	4b21      	ldr	r3, [pc, #132]	; (100098d0 <system_peripheral_reset+0x390>)
1000984a:	891a      	ldrh	r2, [r3, #8]
1000984c:	2104      	movs	r1, #4
1000984e:	438a      	bics	r2, r1
10009850:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009852:	8919      	ldrh	r1, [r3, #8]
10009854:	2204      	movs	r2, #4
10009856:	430a      	orrs	r2, r1
10009858:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000985a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
1000985c:	e099      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000985e:	4b1c      	ldr	r3, [pc, #112]	; (100098d0 <system_peripheral_reset+0x390>)
10009860:	891a      	ldrh	r2, [r3, #8]
10009862:	2108      	movs	r1, #8
10009864:	438a      	bics	r2, r1
10009866:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009868:	8919      	ldrh	r1, [r3, #8]
1000986a:	2208      	movs	r2, #8
1000986c:	430a      	orrs	r2, r1
1000986e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009870:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
10009872:	e08e      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009874:	4b16      	ldr	r3, [pc, #88]	; (100098d0 <system_peripheral_reset+0x390>)
10009876:	891a      	ldrh	r2, [r3, #8]
10009878:	2110      	movs	r1, #16
1000987a:	438a      	bics	r2, r1
1000987c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000987e:	8919      	ldrh	r1, [r3, #8]
10009880:	2210      	movs	r2, #16
10009882:	430a      	orrs	r2, r1
10009884:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009886:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
10009888:	e083      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000988a:	4b11      	ldr	r3, [pc, #68]	; (100098d0 <system_peripheral_reset+0x390>)
1000988c:	891a      	ldrh	r2, [r3, #8]
1000988e:	2120      	movs	r1, #32
10009890:	438a      	bics	r2, r1
10009892:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009894:	8919      	ldrh	r1, [r3, #8]
10009896:	2220      	movs	r2, #32
10009898:	430a      	orrs	r2, r1
1000989a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000989c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000989e:	e078      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100098a0:	4b0b      	ldr	r3, [pc, #44]	; (100098d0 <system_peripheral_reset+0x390>)
100098a2:	891a      	ldrh	r2, [r3, #8]
100098a4:	2140      	movs	r1, #64	; 0x40
100098a6:	438a      	bics	r2, r1
100098a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100098aa:	8919      	ldrh	r1, [r3, #8]
100098ac:	2240      	movs	r2, #64	; 0x40
100098ae:	430a      	orrs	r2, r1
100098b0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098b2:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100098b4:	e06d      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100098b6:	4b06      	ldr	r3, [pc, #24]	; (100098d0 <system_peripheral_reset+0x390>)
100098b8:	891a      	ldrh	r2, [r3, #8]
100098ba:	2180      	movs	r1, #128	; 0x80
100098bc:	438a      	bics	r2, r1
100098be:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100098c0:	8919      	ldrh	r1, [r3, #8]
100098c2:	2280      	movs	r2, #128	; 0x80
100098c4:	430a      	orrs	r2, r1
100098c6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100098c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
100098ca:	e062      	b.n	10009992 <system_peripheral_reset+0x452>
100098cc:	100129a8 	.word	0x100129a8
100098d0:	4000b000 	.word	0x4000b000
100098d4:	fffffeff 	.word	0xfffffeff
100098d8:	fffffdff 	.word	0xfffffdff
100098dc:	fffffbff 	.word	0xfffffbff
100098e0:	fffff7ff 	.word	0xfffff7ff
100098e4:	ffffefff 	.word	0xffffefff
100098e8:	ffffdfff 	.word	0xffffdfff
100098ec:	ffffbfff 	.word	0xffffbfff
100098f0:	ffff7fff 	.word	0xffff7fff
100098f4:	fffeffff 	.word	0xfffeffff
100098f8:	fffdffff 	.word	0xfffdffff
100098fc:	fffbffff 	.word	0xfffbffff
10009900:	fff7ffff 	.word	0xfff7ffff
10009904:	ffefffff 	.word	0xffefffff
10009908:	ffdfffff 	.word	0xffdfffff
1000990c:	ffbfffff 	.word	0xffbfffff
10009910:	ff7fffff 	.word	0xff7fffff
10009914:	feffffff 	.word	0xfeffffff
10009918:	fdffffff 	.word	0xfdffffff
1000991c:	fbffffff 	.word	0xfbffffff
10009920:	f7ffffff 	.word	0xf7ffffff
10009924:	efffffff 	.word	0xefffffff
10009928:	dfffffff 	.word	0xdfffffff
1000992c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009930:	4b18      	ldr	r3, [pc, #96]	; (10009994 <system_peripheral_reset+0x454>)
10009932:	8919      	ldrh	r1, [r3, #8]
10009934:	4a18      	ldr	r2, [pc, #96]	; (10009998 <system_peripheral_reset+0x458>)
10009936:	400a      	ands	r2, r1
10009938:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000993a:	8919      	ldrh	r1, [r3, #8]
1000993c:	2280      	movs	r2, #128	; 0x80
1000993e:	0052      	lsls	r2, r2, #1
10009940:	430a      	orrs	r2, r1
10009942:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009944:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10009946:	e024      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009948:	4b12      	ldr	r3, [pc, #72]	; (10009994 <system_peripheral_reset+0x454>)
1000994a:	8919      	ldrh	r1, [r3, #8]
1000994c:	4a13      	ldr	r2, [pc, #76]	; (1000999c <system_peripheral_reset+0x45c>)
1000994e:	400a      	ands	r2, r1
10009950:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009952:	8919      	ldrh	r1, [r3, #8]
10009954:	2280      	movs	r2, #128	; 0x80
10009956:	0092      	lsls	r2, r2, #2
10009958:	430a      	orrs	r2, r1
1000995a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000995c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000995e:	e018      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009960:	4b0c      	ldr	r3, [pc, #48]	; (10009994 <system_peripheral_reset+0x454>)
10009962:	8919      	ldrh	r1, [r3, #8]
10009964:	4a0e      	ldr	r2, [pc, #56]	; (100099a0 <system_peripheral_reset+0x460>)
10009966:	400a      	ands	r2, r1
10009968:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000996a:	8919      	ldrh	r1, [r3, #8]
1000996c:	2280      	movs	r2, #128	; 0x80
1000996e:	00d2      	lsls	r2, r2, #3
10009970:	430a      	orrs	r2, r1
10009972:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009974:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
10009976:	e00c      	b.n	10009992 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009978:	4b06      	ldr	r3, [pc, #24]	; (10009994 <system_peripheral_reset+0x454>)
1000997a:	8919      	ldrh	r1, [r3, #8]
1000997c:	4a09      	ldr	r2, [pc, #36]	; (100099a4 <system_peripheral_reset+0x464>)
1000997e:	400a      	ands	r2, r1
10009980:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009982:	8919      	ldrh	r1, [r3, #8]
10009984:	2280      	movs	r2, #128	; 0x80
10009986:	0112      	lsls	r2, r2, #4
10009988:	430a      	orrs	r2, r1
1000998a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000998c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
1000998e:	e000      	b.n	10009992 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
10009990:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009992:	bd00      	pop	{pc}
10009994:	4000b000 	.word	0x4000b000
10009998:	fffffeff 	.word	0xfffffeff
1000999c:	fffffdff 	.word	0xfffffdff
100099a0:	fffffbff 	.word	0xfffffbff
100099a4:	fffff7ff 	.word	0xfffff7ff

100099a8 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100099a8:	2380      	movs	r3, #128	; 0x80
100099aa:	04db      	lsls	r3, r3, #19
100099ac:	469c      	mov	ip, r3
100099ae:	4460      	add	r0, ip
100099b0:	0080      	lsls	r0, r0, #2
100099b2:	6001      	str	r1, [r0, #0]
}
100099b4:	4770      	bx	lr
100099b6:	46c0      	nop			; (mov r8, r8)

100099b8 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
100099b8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100099ba:	4b20      	ldr	r3, [pc, #128]	; (10009a3c <uart_rx0_isr_handler+0x84>)
100099bc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100099be:	6823      	ldr	r3, [r4, #0]
100099c0:	7d1d      	ldrb	r5, [r3, #20]
100099c2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100099c4:	066a      	lsls	r2, r5, #25
100099c6:	d513      	bpl.n	100099f0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100099c8:	211e      	movs	r1, #30
100099ca:	2222      	movs	r2, #34	; 0x22
100099cc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100099ce:	7e1a      	ldrb	r2, [r3, #24]
100099d0:	3123      	adds	r1, #35	; 0x23
100099d2:	438a      	bics	r2, r1
100099d4:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100099d6:	2321      	movs	r3, #33	; 0x21
100099d8:	5ce3      	ldrb	r3, [r4, r3]
100099da:	071b      	lsls	r3, r3, #28
100099dc:	d506      	bpl.n	100099ec <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
100099de:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
100099e0:	5ce3      	ldrb	r3, [r4, r3]
100099e2:	071b      	lsls	r3, r3, #28
100099e4:	d502      	bpl.n	100099ec <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
100099e6:	0020      	movs	r0, r4
100099e8:	6923      	ldr	r3, [r4, #16]
100099ea:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
100099ec:	6823      	ldr	r3, [r4, #0]
100099ee:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100099f0:	07eb      	lsls	r3, r5, #31
100099f2:	d522      	bpl.n	10009a3a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
100099f4:	6823      	ldr	r3, [r4, #0]
100099f6:	7c1b      	ldrb	r3, [r3, #16]
100099f8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
100099fa:	6962      	ldr	r2, [r4, #20]
100099fc:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
100099fe:	6963      	ldr	r3, [r4, #20]
10009a00:	3301      	adds	r3, #1
10009a02:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009a04:	8ba3      	ldrh	r3, [r4, #28]
10009a06:	3b01      	subs	r3, #1
10009a08:	b29b      	uxth	r3, r3
10009a0a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009a0c:	8ba3      	ldrh	r3, [r4, #28]
10009a0e:	b29b      	uxth	r3, r3
10009a10:	2b00      	cmp	r3, #0
10009a12:	d112      	bne.n	10009a3a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009a14:	3321      	adds	r3, #33	; 0x21
10009a16:	5ce3      	ldrb	r3, [r4, r3]
10009a18:	075b      	lsls	r3, r3, #29
10009a1a:	d50e      	bpl.n	10009a3a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009a1c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009a1e:	5ce3      	ldrb	r3, [r4, r3]
10009a20:	075b      	lsls	r3, r3, #29
10009a22:	d50a      	bpl.n	10009a3a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009a24:	2200      	movs	r2, #0
10009a26:	2322      	movs	r3, #34	; 0x22
10009a28:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009a2a:	6822      	ldr	r2, [r4, #0]
10009a2c:	7e13      	ldrb	r3, [r2, #24]
10009a2e:	2101      	movs	r1, #1
10009a30:	438b      	bics	r3, r1
10009a32:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009a34:	68e3      	ldr	r3, [r4, #12]
10009a36:	0020      	movs	r0, r4
10009a38:	4798      	blx	r3
			}
		}
	}
}
10009a3a:	bd70      	pop	{r4, r5, r6, pc}
10009a3c:	100153d4 	.word	0x100153d4

10009a40 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009a40:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009a42:	4b21      	ldr	r3, [pc, #132]	; (10009ac8 <uart_tx0_isr_handler+0x88>)
10009a44:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009a46:	6823      	ldr	r3, [r4, #0]
10009a48:	791d      	ldrb	r5, [r3, #4]
10009a4a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009a4c:	07ea      	lsls	r2, r5, #31
10009a4e:	d517      	bpl.n	10009a80 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009a50:	69a2      	ldr	r2, [r4, #24]
10009a52:	7811      	ldrb	r1, [r2, #0]
10009a54:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009a56:	3201      	adds	r2, #1
10009a58:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009a5a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009a5c:	8be3      	ldrh	r3, [r4, #30]
10009a5e:	3b01      	subs	r3, #1
10009a60:	b29b      	uxth	r3, r3
10009a62:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009a64:	8be3      	ldrh	r3, [r4, #30]
10009a66:	b29b      	uxth	r3, r3
10009a68:	2b00      	cmp	r3, #0
10009a6a:	d109      	bne.n	10009a80 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a6c:	6822      	ldr	r2, [r4, #0]
10009a6e:	7a13      	ldrb	r3, [r2, #8]
10009a70:	2101      	movs	r1, #1
10009a72:	438b      	bics	r3, r1
10009a74:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009a76:	6822      	ldr	r2, [r4, #0]
10009a78:	7a11      	ldrb	r1, [r2, #8]
10009a7a:	2310      	movs	r3, #16
10009a7c:	430b      	orrs	r3, r1
10009a7e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009a80:	06eb      	lsls	r3, r5, #27
10009a82:	d512      	bpl.n	10009aaa <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a84:	2321      	movs	r3, #33	; 0x21
10009a86:	5ce3      	ldrb	r3, [r4, r3]
10009a88:	07db      	lsls	r3, r3, #31
10009a8a:	d50e      	bpl.n	10009aaa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009a8c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009a8e:	5ce3      	ldrb	r3, [r4, r3]
10009a90:	07db      	lsls	r3, r3, #31
10009a92:	d50a      	bpl.n	10009aaa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009a94:	2200      	movs	r2, #0
10009a96:	2322      	movs	r3, #34	; 0x22
10009a98:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009a9a:	6822      	ldr	r2, [r4, #0]
10009a9c:	7a13      	ldrb	r3, [r2, #8]
10009a9e:	2110      	movs	r1, #16
10009aa0:	438b      	bics	r3, r1
10009aa2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009aa4:	0020      	movs	r0, r4
10009aa6:	6863      	ldr	r3, [r4, #4]
10009aa8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009aaa:	06ab      	lsls	r3, r5, #26
10009aac:	d50a      	bpl.n	10009ac4 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009aae:	2321      	movs	r3, #33	; 0x21
10009ab0:	5ce3      	ldrb	r3, [r4, r3]
10009ab2:	079b      	lsls	r3, r3, #30
10009ab4:	d506      	bpl.n	10009ac4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009ab6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009ab8:	5ce3      	ldrb	r3, [r4, r3]
10009aba:	079b      	lsls	r3, r3, #30
10009abc:	d502      	bpl.n	10009ac4 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009abe:	68a3      	ldr	r3, [r4, #8]
10009ac0:	0020      	movs	r0, r4
10009ac2:	4798      	blx	r3
		}

	}
}
10009ac4:	bd70      	pop	{r4, r5, r6, pc}
10009ac6:	46c0      	nop			; (mov r8, r8)
10009ac8:	100153d4 	.word	0x100153d4

10009acc <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
10009acc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009ace:	4b20      	ldr	r3, [pc, #128]	; (10009b50 <uart_rx1_isr_handler+0x84>)
10009ad0:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009ad2:	6823      	ldr	r3, [r4, #0]
10009ad4:	7d1d      	ldrb	r5, [r3, #20]
10009ad6:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009ad8:	066a      	lsls	r2, r5, #25
10009ada:	d513      	bpl.n	10009b04 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009adc:	211e      	movs	r1, #30
10009ade:	2222      	movs	r2, #34	; 0x22
10009ae0:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009ae2:	7e1a      	ldrb	r2, [r3, #24]
10009ae4:	3123      	adds	r1, #35	; 0x23
10009ae6:	438a      	bics	r2, r1
10009ae8:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009aea:	2321      	movs	r3, #33	; 0x21
10009aec:	5ce3      	ldrb	r3, [r4, r3]
10009aee:	071b      	lsls	r3, r3, #28
10009af0:	d506      	bpl.n	10009b00 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009af2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009af4:	5ce3      	ldrb	r3, [r4, r3]
10009af6:	071b      	lsls	r3, r3, #28
10009af8:	d502      	bpl.n	10009b00 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009afa:	0020      	movs	r0, r4
10009afc:	6923      	ldr	r3, [r4, #16]
10009afe:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009b00:	6823      	ldr	r3, [r4, #0]
10009b02:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009b04:	07eb      	lsls	r3, r5, #31
10009b06:	d522      	bpl.n	10009b4e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009b08:	6823      	ldr	r3, [r4, #0]
10009b0a:	7c1b      	ldrb	r3, [r3, #16]
10009b0c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009b0e:	6962      	ldr	r2, [r4, #20]
10009b10:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009b12:	6963      	ldr	r3, [r4, #20]
10009b14:	3301      	adds	r3, #1
10009b16:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009b18:	8ba3      	ldrh	r3, [r4, #28]
10009b1a:	3b01      	subs	r3, #1
10009b1c:	b29b      	uxth	r3, r3
10009b1e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009b20:	8ba3      	ldrh	r3, [r4, #28]
10009b22:	b29b      	uxth	r3, r3
10009b24:	2b00      	cmp	r3, #0
10009b26:	d112      	bne.n	10009b4e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009b28:	3321      	adds	r3, #33	; 0x21
10009b2a:	5ce3      	ldrb	r3, [r4, r3]
10009b2c:	075b      	lsls	r3, r3, #29
10009b2e:	d50e      	bpl.n	10009b4e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009b30:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009b32:	5ce3      	ldrb	r3, [r4, r3]
10009b34:	075b      	lsls	r3, r3, #29
10009b36:	d50a      	bpl.n	10009b4e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009b38:	2200      	movs	r2, #0
10009b3a:	2322      	movs	r3, #34	; 0x22
10009b3c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009b3e:	6822      	ldr	r2, [r4, #0]
10009b40:	7e13      	ldrb	r3, [r2, #24]
10009b42:	2101      	movs	r1, #1
10009b44:	438b      	bics	r3, r1
10009b46:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009b48:	68e3      	ldr	r3, [r4, #12]
10009b4a:	0020      	movs	r0, r4
10009b4c:	4798      	blx	r3
			}
		}
	}
}
10009b4e:	bd70      	pop	{r4, r5, r6, pc}
10009b50:	100153d4 	.word	0x100153d4

10009b54 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009b54:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009b56:	4b21      	ldr	r3, [pc, #132]	; (10009bdc <uart_tx1_isr_handler+0x88>)
10009b58:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009b5a:	6823      	ldr	r3, [r4, #0]
10009b5c:	791d      	ldrb	r5, [r3, #4]
10009b5e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009b60:	07ea      	lsls	r2, r5, #31
10009b62:	d517      	bpl.n	10009b94 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009b64:	69a2      	ldr	r2, [r4, #24]
10009b66:	7811      	ldrb	r1, [r2, #0]
10009b68:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009b6a:	3201      	adds	r2, #1
10009b6c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009b6e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009b70:	8be3      	ldrh	r3, [r4, #30]
10009b72:	3b01      	subs	r3, #1
10009b74:	b29b      	uxth	r3, r3
10009b76:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009b78:	8be3      	ldrh	r3, [r4, #30]
10009b7a:	b29b      	uxth	r3, r3
10009b7c:	2b00      	cmp	r3, #0
10009b7e:	d109      	bne.n	10009b94 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009b80:	6822      	ldr	r2, [r4, #0]
10009b82:	7a13      	ldrb	r3, [r2, #8]
10009b84:	2101      	movs	r1, #1
10009b86:	438b      	bics	r3, r1
10009b88:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
10009b8a:	6822      	ldr	r2, [r4, #0]
10009b8c:	7a11      	ldrb	r1, [r2, #8]
10009b8e:	2310      	movs	r3, #16
10009b90:	430b      	orrs	r3, r1
10009b92:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
10009b94:	06eb      	lsls	r3, r5, #27
10009b96:	d512      	bpl.n	10009bbe <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009b98:	2321      	movs	r3, #33	; 0x21
10009b9a:	5ce3      	ldrb	r3, [r4, r3]
10009b9c:	07db      	lsls	r3, r3, #31
10009b9e:	d50e      	bpl.n	10009bbe <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
10009ba0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
10009ba2:	5ce3      	ldrb	r3, [r4, r3]
10009ba4:	07db      	lsls	r3, r3, #31
10009ba6:	d50a      	bpl.n	10009bbe <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
10009ba8:	2200      	movs	r2, #0
10009baa:	2322      	movs	r3, #34	; 0x22
10009bac:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
10009bae:	6822      	ldr	r2, [r4, #0]
10009bb0:	7a13      	ldrb	r3, [r2, #8]
10009bb2:	2110      	movs	r1, #16
10009bb4:	438b      	bics	r3, r1
10009bb6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
10009bb8:	0020      	movs	r0, r4
10009bba:	6863      	ldr	r3, [r4, #4]
10009bbc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
10009bbe:	06ab      	lsls	r3, r5, #26
10009bc0:	d50a      	bpl.n	10009bd8 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009bc2:	2321      	movs	r3, #33	; 0x21
10009bc4:	5ce3      	ldrb	r3, [r4, r3]
10009bc6:	079b      	lsls	r3, r3, #30
10009bc8:	d506      	bpl.n	10009bd8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
10009bca:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009bcc:	5ce3      	ldrb	r3, [r4, r3]
10009bce:	079b      	lsls	r3, r3, #30
10009bd0:	d502      	bpl.n	10009bd8 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009bd2:	68a3      	ldr	r3, [r4, #8]
10009bd4:	0020      	movs	r0, r4
10009bd6:	4798      	blx	r3
		}

	}
}
10009bd8:	bd70      	pop	{r4, r5, r6, pc}
10009bda:	46c0      	nop			; (mov r8, r8)
10009bdc:	100153d4 	.word	0x100153d4

10009be0 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009be0:	23e1      	movs	r3, #225	; 0xe1
10009be2:	025b      	lsls	r3, r3, #9
10009be4:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009be6:	2300      	movs	r3, #0
10009be8:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009bea:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009bec:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
10009bee:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009bf0:	3302      	adds	r3, #2
10009bf2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009bf4:	2203      	movs	r2, #3
10009bf6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009bf8:	3201      	adds	r2, #1
10009bfa:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009bfc:	3201      	adds	r2, #1
10009bfe:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009c00:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009c02:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009c04:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10009c06:	6243      	str	r3, [r0, #36]	; 0x24
}
10009c08:	4770      	bx	lr
10009c0a:	46c0      	nop			; (mov r8, r8)

10009c0c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c0e:	464f      	mov	r7, r9
10009c10:	4646      	mov	r6, r8
10009c12:	b4c0      	push	{r6, r7}
10009c14:	0005      	movs	r5, r0
10009c16:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009c18:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009c1a:	2300      	movs	r3, #0
10009c1c:	6043      	str	r3, [r0, #4]
10009c1e:	6083      	str	r3, [r0, #8]
10009c20:	60c3      	str	r3, [r0, #12]
10009c22:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009c24:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009c26:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009c28:	2200      	movs	r2, #0
10009c2a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009c2c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
10009c2e:	3320      	adds	r3, #32
10009c30:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009c32:	3301      	adds	r3, #1
10009c34:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009c36:	3301      	adds	r3, #1
10009c38:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009c3a:	4b55      	ldr	r3, [pc, #340]	; (10009d90 <uart_init+0x184>)
10009c3c:	4299      	cmp	r1, r3
10009c3e:	d118      	bne.n	10009c72 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009c40:	2009      	movs	r0, #9
10009c42:	4c54      	ldr	r4, [pc, #336]	; (10009d94 <uart_init+0x188>)
10009c44:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009c46:	200a      	movs	r0, #10
10009c48:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009c4a:	2009      	movs	r0, #9
10009c4c:	4c52      	ldr	r4, [pc, #328]	; (10009d98 <uart_init+0x18c>)
10009c4e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009c50:	200a      	movs	r0, #10
10009c52:	47a0      	blx	r4
		_uart_instances[0] = module;
10009c54:	4b51      	ldr	r3, [pc, #324]	; (10009d9c <uart_init+0x190>)
10009c56:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009c58:	4951      	ldr	r1, [pc, #324]	; (10009da0 <uart_init+0x194>)
10009c5a:	2010      	movs	r0, #16
10009c5c:	4c51      	ldr	r4, [pc, #324]	; (10009da4 <uart_init+0x198>)
10009c5e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
10009c60:	4951      	ldr	r1, [pc, #324]	; (10009da8 <uart_init+0x19c>)
10009c62:	2011      	movs	r0, #17
10009c64:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009c66:	4b51      	ldr	r3, [pc, #324]	; (10009dac <uart_init+0x1a0>)
10009c68:	2201      	movs	r2, #1
10009c6a:	601a      	str	r2, [r3, #0]
10009c6c:	3201      	adds	r2, #1
10009c6e:	601a      	str	r2, [r3, #0]
10009c70:	e01a      	b.n	10009ca8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
10009c72:	4b4f      	ldr	r3, [pc, #316]	; (10009db0 <uart_init+0x1a4>)
10009c74:	4299      	cmp	r1, r3
10009c76:	d117      	bne.n	10009ca8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
10009c78:	200b      	movs	r0, #11
10009c7a:	4c46      	ldr	r4, [pc, #280]	; (10009d94 <uart_init+0x188>)
10009c7c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
10009c7e:	200c      	movs	r0, #12
10009c80:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
10009c82:	200b      	movs	r0, #11
10009c84:	4c44      	ldr	r4, [pc, #272]	; (10009d98 <uart_init+0x18c>)
10009c86:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
10009c88:	200c      	movs	r0, #12
10009c8a:	47a0      	blx	r4
		_uart_instances[1] = module;
10009c8c:	4b43      	ldr	r3, [pc, #268]	; (10009d9c <uart_init+0x190>)
10009c8e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
10009c90:	4948      	ldr	r1, [pc, #288]	; (10009db4 <uart_init+0x1a8>)
10009c92:	2012      	movs	r0, #18
10009c94:	4c43      	ldr	r4, [pc, #268]	; (10009da4 <uart_init+0x198>)
10009c96:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
10009c98:	4947      	ldr	r1, [pc, #284]	; (10009db8 <uart_init+0x1ac>)
10009c9a:	2013      	movs	r0, #19
10009c9c:	47a0      	blx	r4
10009c9e:	4b43      	ldr	r3, [pc, #268]	; (10009dac <uart_init+0x1a0>)
10009ca0:	2204      	movs	r2, #4
10009ca2:	601a      	str	r2, [r3, #0]
10009ca4:	3204      	adds	r2, #4
10009ca6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009ca8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
10009caa:	2204      	movs	r2, #4
10009cac:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
10009cae:	2b00      	cmp	r3, #0
10009cb0:	d152      	bne.n	10009d58 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
10009cb2:	3302      	adds	r3, #2
10009cb4:	4698      	mov	r8, r3
10009cb6:	e04f      	b.n	10009d58 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009cb8:	8a31      	ldrh	r1, [r6, #16]
10009cba:	ce01      	ldmia	r6!, {r0}
10009cbc:	b2c0      	uxtb	r0, r0
10009cbe:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009cc0:	3401      	adds	r4, #1
10009cc2:	b2e4      	uxtb	r4, r4
10009cc4:	4544      	cmp	r4, r8
10009cc6:	d3f7      	bcc.n	10009cb8 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009cc8:	682b      	ldr	r3, [r5, #0]
10009cca:	7d1a      	ldrb	r2, [r3, #20]
10009ccc:	07d2      	lsls	r2, r2, #31
10009cce:	d504      	bpl.n	10009cda <uart_init+0xce>
10009cd0:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009cd2:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009cd4:	7d1a      	ldrb	r2, [r3, #20]
10009cd6:	420a      	tst	r2, r1
10009cd8:	d1fb      	bne.n	10009cd2 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009cda:	2100      	movs	r1, #0
10009cdc:	2220      	movs	r2, #32
10009cde:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009ce0:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009ce2:	1e59      	subs	r1, r3, #1
10009ce4:	418b      	sbcs	r3, r1
10009ce6:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009ce8:	793b      	ldrb	r3, [r7, #4]
10009cea:	797a      	ldrb	r2, [r7, #5]
10009cec:	4313      	orrs	r3, r2
10009cee:	430b      	orrs	r3, r1
	switch(config->parity) {
10009cf0:	79ba      	ldrb	r2, [r7, #6]
10009cf2:	2a02      	cmp	r2, #2
10009cf4:	d00d      	beq.n	10009d12 <uart_init+0x106>
10009cf6:	b2d1      	uxtb	r1, r2
10009cf8:	2902      	cmp	r1, #2
10009cfa:	d802      	bhi.n	10009d02 <uart_init+0xf6>
10009cfc:	2a01      	cmp	r2, #1
10009cfe:	d005      	beq.n	10009d0c <uart_init+0x100>
10009d00:	e00f      	b.n	10009d22 <uart_init+0x116>
10009d02:	2a03      	cmp	r2, #3
10009d04:	d008      	beq.n	10009d18 <uart_init+0x10c>
10009d06:	2a04      	cmp	r2, #4
10009d08:	d009      	beq.n	10009d1e <uart_init+0x112>
10009d0a:	e00a      	b.n	10009d22 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009d0c:	2202      	movs	r2, #2
10009d0e:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009d10:	e007      	b.n	10009d22 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10009d12:	2206      	movs	r2, #6
10009d14:	4313      	orrs	r3, r2
			break;
10009d16:	e004      	b.n	10009d22 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009d18:	220a      	movs	r2, #10
10009d1a:	4313      	orrs	r3, r2
			break;
10009d1c:	e001      	b.n	10009d22 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
10009d1e:	220e      	movs	r2, #14
10009d20:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009d22:	2220      	movs	r2, #32
10009d24:	6829      	ldr	r1, [r5, #0]
10009d26:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009d28:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009d2a:	4b24      	ldr	r3, [pc, #144]	; (10009dbc <uart_init+0x1b0>)
10009d2c:	4798      	blx	r3
10009d2e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009d30:	0031      	movs	r1, r6
10009d32:	4b23      	ldr	r3, [pc, #140]	; (10009dc0 <uart_init+0x1b4>)
10009d34:	4798      	blx	r3
10009d36:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009d38:	0400      	lsls	r0, r0, #16
10009d3a:	0c00      	lsrs	r0, r0, #16
10009d3c:	4370      	muls	r0, r6
10009d3e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009d40:	0931      	lsrs	r1, r6, #4
10009d42:	4288      	cmp	r0, r1
10009d44:	d906      	bls.n	10009d54 <uart_init+0x148>
10009d46:	2300      	movs	r3, #0
		i++;
10009d48:	3301      	adds	r3, #1
10009d4a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009d4c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
10009d4e:	4288      	cmp	r0, r1
10009d50:	d8fa      	bhi.n	10009d48 <uart_init+0x13c>
10009d52:	e007      	b.n	10009d64 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009d54:	2300      	movs	r3, #0
10009d56:	e005      	b.n	10009d64 <uart_init+0x158>
10009d58:	003e      	movs	r6, r7
10009d5a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009d5c:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
10009d5e:	4b19      	ldr	r3, [pc, #100]	; (10009dc4 <uart_init+0x1b8>)
10009d60:	4699      	mov	r9, r3
10009d62:	e7a9      	b.n	10009cb8 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009d64:	2100      	movs	r1, #0
10009d66:	2028      	movs	r0, #40	; 0x28
10009d68:	682c      	ldr	r4, [r5, #0]
10009d6a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009d6c:	3301      	adds	r3, #1
10009d6e:	071b      	lsls	r3, r3, #28
10009d70:	0f5b      	lsrs	r3, r3, #29
10009d72:	00d2      	lsls	r2, r2, #3
10009d74:	4313      	orrs	r3, r2
10009d76:	b29b      	uxth	r3, r3
10009d78:	682a      	ldr	r2, [r5, #0]
10009d7a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
10009d7c:	682b      	ldr	r3, [r5, #0]
10009d7e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
10009d80:	682b      	ldr	r3, [r5, #0]
10009d82:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
10009d84:	2000      	movs	r0, #0
10009d86:	bc0c      	pop	{r2, r3}
10009d88:	4690      	mov	r8, r2
10009d8a:	4699      	mov	r9, r3
10009d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d8e:	46c0      	nop			; (mov r8, r8)
10009d90:	40004000 	.word	0x40004000
10009d94:	10009541 	.word	0x10009541
10009d98:	100091e5 	.word	0x100091e5
10009d9c:	100153d4 	.word	0x100153d4
10009da0:	100099b9 	.word	0x100099b9
10009da4:	100099a9 	.word	0x100099a9
10009da8:	10009a41 	.word	0x10009a41
10009dac:	e000e100 	.word	0xe000e100
10009db0:	40005000 	.word	0x40005000
10009db4:	10009acd 	.word	0x10009acd
10009db8:	10009b55 	.word	0x10009b55
10009dbc:	100091d9 	.word	0x100091d9
10009dc0:	1000fc79 	.word	0x1000fc79
10009dc4:	10009009 	.word	0x10009009

10009dc8 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009dc8:	6802      	ldr	r2, [r0, #0]
10009dca:	2001      	movs	r0, #1
10009dcc:	7913      	ldrb	r3, [r2, #4]
10009dce:	4203      	tst	r3, r0
10009dd0:	d0fc      	beq.n	10009dcc <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009dd2:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009dd4:	2000      	movs	r0, #0
10009dd6:	4770      	bx	lr

10009dd8 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009dd8:	6802      	ldr	r2, [r0, #0]
10009dda:	2001      	movs	r0, #1
10009ddc:	7d13      	ldrb	r3, [r2, #20]
10009dde:	4203      	tst	r3, r0
10009de0:	d0fc      	beq.n	10009ddc <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009de2:	7c13      	ldrb	r3, [r2, #16]
10009de4:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009de6:	2000      	movs	r0, #0
10009de8:	4770      	bx	lr
10009dea:	46c0      	nop			; (mov r8, r8)

10009dec <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009dec:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009dee:	2a00      	cmp	r2, #0
10009df0:	d00d      	beq.n	10009e0e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009df2:	330b      	adds	r3, #11
10009df4:	5cc3      	ldrb	r3, [r0, r3]
10009df6:	b2db      	uxtb	r3, r3
10009df8:	2b05      	cmp	r3, #5
10009dfa:	d008      	beq.n	10009e0e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009dfc:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009dfe:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009e00:	2205      	movs	r2, #5
10009e02:	2322      	movs	r3, #34	; 0x22
10009e04:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009e06:	6803      	ldr	r3, [r0, #0]
10009e08:	3a04      	subs	r2, #4
10009e0a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009e0c:	2300      	movs	r3, #0
}
10009e0e:	0018      	movs	r0, r3
10009e10:	4770      	bx	lr
10009e12:	46c0      	nop			; (mov r8, r8)

10009e14 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009e14:	0093      	lsls	r3, r2, #2
10009e16:	18c3      	adds	r3, r0, r3
10009e18:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009e1a:	2120      	movs	r1, #32
10009e1c:	2301      	movs	r3, #1
10009e1e:	4093      	lsls	r3, r2
10009e20:	5c42      	ldrb	r2, [r0, r1]
10009e22:	4313      	orrs	r3, r2
10009e24:	5443      	strb	r3, [r0, r1]
}
10009e26:	4770      	bx	lr

10009e28 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009e28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009e2a:	2221      	movs	r2, #33	; 0x21
10009e2c:	2301      	movs	r3, #1
10009e2e:	408b      	lsls	r3, r1
10009e30:	5c84      	ldrb	r4, [r0, r2]
10009e32:	4323      	orrs	r3, r4
10009e34:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009e36:	2901      	cmp	r1, #1
10009e38:	d104      	bne.n	10009e44 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009e3a:	6802      	ldr	r2, [r0, #0]
10009e3c:	7a11      	ldrb	r1, [r2, #8]
10009e3e:	2320      	movs	r3, #32
10009e40:	430b      	orrs	r3, r1
10009e42:	7213      	strb	r3, [r2, #8]
	}
}
10009e44:	bd10      	pop	{r4, pc}
10009e46:	46c0      	nop			; (mov r8, r8)

10009e48 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009e48:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009e4a:	2201      	movs	r2, #1
10009e4c:	408a      	lsls	r2, r1
10009e4e:	2421      	movs	r4, #33	; 0x21
10009e50:	5d03      	ldrb	r3, [r0, r4]
10009e52:	4393      	bics	r3, r2
10009e54:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009e56:	2901      	cmp	r1, #1
10009e58:	d104      	bne.n	10009e64 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009e5a:	6802      	ldr	r2, [r0, #0]
10009e5c:	7a13      	ldrb	r3, [r2, #8]
10009e5e:	311f      	adds	r1, #31
10009e60:	438b      	bics	r3, r1
10009e62:	7213      	strb	r3, [r2, #8]
	}

}
10009e64:	bd10      	pop	{r4, pc}
10009e66:	46c0      	nop			; (mov r8, r8)

10009e68 <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
10009e68:	6802      	ldr	r2, [r0, #0]
10009e6a:	7a11      	ldrb	r1, [r2, #8]
10009e6c:	2310      	movs	r3, #16
10009e6e:	430b      	orrs	r3, r1
10009e70:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009e72:	6803      	ldr	r3, [r0, #0]
10009e74:	4a07      	ldr	r2, [pc, #28]	; (10009e94 <uart_enable_transmit_dma+0x2c>)
10009e76:	4293      	cmp	r3, r2
10009e78:	d104      	bne.n	10009e84 <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009e7a:	2102      	movs	r1, #2
10009e7c:	2380      	movs	r3, #128	; 0x80
10009e7e:	4a06      	ldr	r2, [pc, #24]	; (10009e98 <uart_enable_transmit_dma+0x30>)
10009e80:	50d1      	str	r1, [r2, r3]
10009e82:	e006      	b.n	10009e92 <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009e84:	4a05      	ldr	r2, [pc, #20]	; (10009e9c <uart_enable_transmit_dma+0x34>)
10009e86:	4293      	cmp	r3, r2
10009e88:	d103      	bne.n	10009e92 <uart_enable_transmit_dma+0x2a>
10009e8a:	2108      	movs	r1, #8
10009e8c:	2380      	movs	r3, #128	; 0x80
10009e8e:	4a02      	ldr	r2, [pc, #8]	; (10009e98 <uart_enable_transmit_dma+0x30>)
10009e90:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009e92:	4770      	bx	lr
10009e94:	40004000 	.word	0x40004000
10009e98:	e000e100 	.word	0xe000e100
10009e9c:	40005000 	.word	0x40005000

10009ea0 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009ea0:	6802      	ldr	r2, [r0, #0]
10009ea2:	7e11      	ldrb	r1, [r2, #24]
10009ea4:	2301      	movs	r3, #1
10009ea6:	430b      	orrs	r3, r1
10009ea8:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009eaa:	6803      	ldr	r3, [r0, #0]
10009eac:	4a07      	ldr	r2, [pc, #28]	; (10009ecc <uart_enable_receive_dma+0x2c>)
10009eae:	4293      	cmp	r3, r2
10009eb0:	d104      	bne.n	10009ebc <uart_enable_receive_dma+0x1c>
10009eb2:	2102      	movs	r1, #2
10009eb4:	2380      	movs	r3, #128	; 0x80
10009eb6:	4a06      	ldr	r2, [pc, #24]	; (10009ed0 <uart_enable_receive_dma+0x30>)
10009eb8:	50d1      	str	r1, [r2, r3]
10009eba:	e006      	b.n	10009eca <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009ebc:	4a05      	ldr	r2, [pc, #20]	; (10009ed4 <uart_enable_receive_dma+0x34>)
10009ebe:	4293      	cmp	r3, r2
10009ec0:	d103      	bne.n	10009eca <uart_enable_receive_dma+0x2a>
10009ec2:	2108      	movs	r1, #8
10009ec4:	2380      	movs	r3, #128	; 0x80
10009ec6:	4a02      	ldr	r2, [pc, #8]	; (10009ed0 <uart_enable_receive_dma+0x30>)
10009ec8:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009eca:	4770      	bx	lr
10009ecc:	40004000 	.word	0x40004000
10009ed0:	e000e100 	.word	0xe000e100
10009ed4:	40005000 	.word	0x40005000

10009ed8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
10009eda:	4647      	mov	r7, r8
10009edc:	b480      	push	{r7}
10009ede:	000c      	movs	r4, r1
10009ee0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009ee2:	2800      	cmp	r0, #0
10009ee4:	d10d      	bne.n	10009f02 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009ee6:	2a00      	cmp	r2, #0
10009ee8:	dd0e      	ble.n	10009f08 <_read+0x30>
10009eea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009eec:	4e08      	ldr	r6, [pc, #32]	; (10009f10 <_read+0x38>)
10009eee:	4d09      	ldr	r5, [pc, #36]	; (10009f14 <_read+0x3c>)
10009ef0:	6830      	ldr	r0, [r6, #0]
10009ef2:	0021      	movs	r1, r4
10009ef4:	682b      	ldr	r3, [r5, #0]
10009ef6:	4798      	blx	r3
		ptr++;
10009ef8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009efa:	42a7      	cmp	r7, r4
10009efc:	d1f8      	bne.n	10009ef0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009efe:	4640      	mov	r0, r8
10009f00:	e003      	b.n	10009f0a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009f02:	2001      	movs	r0, #1
10009f04:	4240      	negs	r0, r0
10009f06:	e000      	b.n	10009f0a <_read+0x32>
	}

	for (; len > 0; --len) {
10009f08:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009f0a:	bc04      	pop	{r2}
10009f0c:	4690      	mov	r8, r2
10009f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f10:	100153e4 	.word	0x100153e4
10009f14:	100153dc 	.word	0x100153dc

10009f18 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009f18:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f1a:	4647      	mov	r7, r8
10009f1c:	b480      	push	{r7}
10009f1e:	000e      	movs	r6, r1
10009f20:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009f22:	3801      	subs	r0, #1
10009f24:	2802      	cmp	r0, #2
10009f26:	d811      	bhi.n	10009f4c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009f28:	2a00      	cmp	r2, #0
10009f2a:	d012      	beq.n	10009f52 <_write+0x3a>
10009f2c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009f2e:	4b0c      	ldr	r3, [pc, #48]	; (10009f60 <_write+0x48>)
10009f30:	4698      	mov	r8, r3
10009f32:	4f0c      	ldr	r7, [pc, #48]	; (10009f64 <_write+0x4c>)
10009f34:	4643      	mov	r3, r8
10009f36:	6818      	ldr	r0, [r3, #0]
10009f38:	5d31      	ldrb	r1, [r6, r4]
10009f3a:	683b      	ldr	r3, [r7, #0]
10009f3c:	4798      	blx	r3
10009f3e:	2800      	cmp	r0, #0
10009f40:	db09      	blt.n	10009f56 <_write+0x3e>
			return -1;
		}
		++nChars;
10009f42:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009f44:	42a5      	cmp	r5, r4
10009f46:	d1f5      	bne.n	10009f34 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009f48:	0020      	movs	r0, r4
10009f4a:	e006      	b.n	10009f5a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009f4c:	2001      	movs	r0, #1
10009f4e:	4240      	negs	r0, r0
10009f50:	e003      	b.n	10009f5a <_write+0x42>
	}

	for (; len != 0; --len) {
10009f52:	2000      	movs	r0, #0
10009f54:	e001      	b.n	10009f5a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009f56:	2001      	movs	r0, #1
10009f58:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009f5a:	bc04      	pop	{r2}
10009f5c:	4690      	mov	r8, r2
10009f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f60:	100153e4 	.word	0x100153e4
10009f64:	100153e0 	.word	0x100153e0

10009f68 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009f68:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009f6a:	4a06      	ldr	r2, [pc, #24]	; (10009f84 <_sbrk+0x1c>)
10009f6c:	6812      	ldr	r2, [r2, #0]
10009f6e:	2a00      	cmp	r2, #0
10009f70:	d102      	bne.n	10009f78 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009f72:	4905      	ldr	r1, [pc, #20]	; (10009f88 <_sbrk+0x20>)
10009f74:	4a03      	ldr	r2, [pc, #12]	; (10009f84 <_sbrk+0x1c>)
10009f76:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009f78:	4a02      	ldr	r2, [pc, #8]	; (10009f84 <_sbrk+0x1c>)
10009f7a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009f7c:	18c3      	adds	r3, r0, r3
10009f7e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009f80:	4770      	bx	lr
10009f82:	46c0      	nop			; (mov r8, r8)
10009f84:	100138f4 	.word	0x100138f4
10009f88:	10016df0 	.word	0x10016df0

10009f8c <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009f8c:	2001      	movs	r0, #1
10009f8e:	4240      	negs	r0, r0
10009f90:	4770      	bx	lr
10009f92:	46c0      	nop			; (mov r8, r8)

10009f94 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009f94:	2380      	movs	r3, #128	; 0x80
10009f96:	019b      	lsls	r3, r3, #6
10009f98:	604b      	str	r3, [r1, #4]

	return 0;
}
10009f9a:	2000      	movs	r0, #0
10009f9c:	4770      	bx	lr
10009f9e:	46c0      	nop			; (mov r8, r8)

10009fa0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009fa0:	2001      	movs	r0, #1
10009fa2:	4770      	bx	lr

10009fa4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009fa4:	2000      	movs	r0, #0
10009fa6:	4770      	bx	lr

10009fa8 <bat_init_service>:
extern ble_connected_dev_info_t ble_dev_info[BLE_MAX_DEVICE_CONNECTED];

/**@brief Initialize the service with its included service, characteristics, and descriptors
 */
void bat_init_service(bat_gatt_service_handler_t *battery_serv, uint8_t *battery_value)
{
10009fa8:	b530      	push	{r4, r5, lr}
	battery_serv->serv_handle = 0;
10009faa:	2300      	movs	r3, #0
10009fac:	2200      	movs	r2, #0
10009fae:	8243      	strh	r3, [r0, #18]
	battery_serv->serv_uuid.type = AT_BLE_UUID_16;
10009fb0:	7002      	strb	r2, [r0, #0]
	battery_serv->serv_uuid.uuid[0] = (uint8_t) BAT_SERVICE_UUID;
10009fb2:	210f      	movs	r1, #15
10009fb4:	7041      	strb	r1, [r0, #1]
	battery_serv->serv_uuid.uuid[1] = (uint8_t) (BAT_SERVICE_UUID >> 8);
10009fb6:	3109      	adds	r1, #9
10009fb8:	7081      	strb	r1, [r0, #2]
	
	//Battery service characteristic
	battery_serv->serv_chars.char_val_handle = 0;          /* handle stored here */
10009fba:	8283      	strh	r3, [r0, #20]
	battery_serv->serv_chars.uuid.type = AT_BLE_UUID_16;
10009fbc:	7582      	strb	r2, [r0, #22]
	battery_serv->serv_chars.uuid.uuid[0] = (uint8_t) BAT_CHAR_BAT_LEVEL_UUID;          /* UUID : Manufacturer Name String */
10009fbe:	2419      	movs	r4, #25
10009fc0:	75c4      	strb	r4, [r0, #23]
	battery_serv->serv_chars.uuid.uuid[1] = (uint8_t) (BAT_CHAR_BAT_LEVEL_UUID >> 8);          /* UUID : Manufacturer Name String */
10009fc2:	3411      	adds	r4, #17
10009fc4:	7604      	strb	r4, [r0, #24]
	battery_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
10009fc6:	3c18      	subs	r4, #24
10009fc8:	8504      	strh	r4, [r0, #40]	; 0x28
	battery_serv->serv_chars.init_value = &battery_init_value;             /* value */
10009fca:	4c11      	ldr	r4, [pc, #68]	; (1000a010 <bat_init_service+0x68>)
10009fcc:	62c4      	str	r4, [r0, #44]	; 0x2c
	battery_serv->serv_chars.value_init_len = sizeof(uint8_t);
10009fce:	2401      	movs	r4, #1
10009fd0:	8604      	strh	r4, [r0, #48]	; 0x30
	battery_serv->serv_chars.value_max_len = sizeof(uint8_t);
10009fd2:	8644      	strh	r4, [r0, #50]	; 0x32
#if BLE_PAIR_ENABLE
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR |
10009fd4:	2522      	movs	r5, #34	; 0x22
10009fd6:	3433      	adds	r4, #51	; 0x33
10009fd8:	5505      	strb	r5, [r0, r4]
												 AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);   /* permissions */
#else
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR |
												 AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
#endif
	battery_serv->serv_chars.user_desc = NULL;           /* user defined name */
10009fda:	6383      	str	r3, [r0, #56]	; 0x38
	battery_serv->serv_chars.user_desc_len = 0;
10009fdc:	8783      	strh	r3, [r0, #60]	; 0x3c
	battery_serv->serv_chars.user_desc_max_len = 0;
10009fde:	87c3      	strh	r3, [r0, #62]	; 0x3e
	battery_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
10009fe0:	3410      	adds	r4, #16
10009fe2:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10009fe4:	3401      	adds	r4, #1
10009fe6:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
10009fe8:	3401      	adds	r4, #1
10009fea:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.user_desc_handle = 0;             /*user desc handles*/
10009fec:	3402      	adds	r4, #2
10009fee:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
10009ff0:	3402      	adds	r4, #2
10009ff2:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
10009ff4:	3402      	adds	r4, #2
10009ff6:	5303      	strh	r3, [r0, r4]
	
	presentation_format.format = AT_BLE_PRES_FORMAT_UINT8;
10009ff8:	4b06      	ldr	r3, [pc, #24]	; (1000a014 <bat_init_service+0x6c>)
10009ffa:	3c48      	subs	r4, #72	; 0x48
10009ffc:	701c      	strb	r4, [r3, #0]
	presentation_format.exponent = BAT_CHAR_PRESENTATION_FORMAT_EXPONENT;
10009ffe:	705a      	strb	r2, [r3, #1]
	presentation_format.unit = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_UNIT;
	presentation_format.unit = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_UNIT >> 8);
1000a000:	8059      	strh	r1, [r3, #2]
	presentation_format.name_space = BAT_CHAR_PRESENTATION_FORMAT_NAMESPACE;
1000a002:	2201      	movs	r2, #1
1000a004:	711a      	strb	r2, [r3, #4]
	presentation_format.description = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR;
	presentation_format.description = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
1000a006:	2210      	movs	r2, #16
1000a008:	80da      	strh	r2, [r3, #6]
	
	battery_serv->serv_chars.presentation_format = &presentation_format;       /* presentation format */
1000a00a:	6403      	str	r3, [r0, #64]	; 0x40
	ALL_UNUSED(battery_value);
}
1000a00c:	bd30      	pop	{r4, r5, pc}
1000a00e:	46c0      	nop			; (mov r8, r8)
1000a010:	10013848 	.word	0x10013848
1000a014:	100153e8 	.word	0x100153e8

1000a018 <bat_primary_service_define>:

/**@brief defining a initialized service 
 */
at_ble_status_t bat_primary_service_define(bat_gatt_service_handler_t *battery_service)
{
1000a018:	b510      	push	{r4, lr}
1000a01a:	b082      	sub	sp, #8
	return(at_ble_primary_service_define(&battery_service->serv_uuid,
1000a01c:	0001      	movs	r1, r0
1000a01e:	3112      	adds	r1, #18
1000a020:	2301      	movs	r3, #1
1000a022:	9301      	str	r3, [sp, #4]
1000a024:	0003      	movs	r3, r0
1000a026:	3314      	adds	r3, #20
1000a028:	9300      	str	r3, [sp, #0]
1000a02a:	2300      	movs	r3, #0
1000a02c:	2200      	movs	r2, #0
1000a02e:	4c02      	ldr	r4, [pc, #8]	; (1000a038 <bat_primary_service_define+0x20>)
1000a030:	47a0      	blx	r4
	&battery_service->serv_handle,
	NULL, 0,
	&battery_service->serv_chars, 1));
}
1000a032:	b002      	add	sp, #8
1000a034:	bd10      	pop	{r4, pc}
1000a036:	46c0      	nop			; (mov r8, r8)
1000a038:	1000dae1 	.word	0x1000dae1

1000a03c <bat_update_char_value>:

/**@brief Function used to update characteristic value
 */
at_ble_status_t bat_update_char_value (at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_serv , uint8_t char_data,bool volatile *flag)
{
1000a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a03e:	b083      	sub	sp, #12
1000a040:	0006      	movs	r6, r0
1000a042:	000f      	movs	r7, r1
1000a044:	001d      	movs	r5, r3
1000a046:	466b      	mov	r3, sp
1000a048:	1dd9      	adds	r1, r3, #7
1000a04a:	700a      	strb	r2, [r1, #0]
	at_ble_status_t status = AT_BLE_SUCCESS;
	/* Updating the att data base */
	if ((status = at_ble_characteristic_value_set(battery_serv->serv_chars.char_val_handle, &char_data, sizeof(uint8_t))) != AT_BLE_SUCCESS){
1000a04c:	8ab8      	ldrh	r0, [r7, #20]
1000a04e:	2201      	movs	r2, #1
1000a050:	4b12      	ldr	r3, [pc, #72]	; (1000a09c <bat_update_char_value+0x60>)
1000a052:	4798      	blx	r3
1000a054:	1e04      	subs	r4, r0, #0
1000a056:	d008      	beq.n	1000a06a <bat_update_char_value+0x2e>
		DBG_LOG("updating the characteristic failed%d",status);
1000a058:	4811      	ldr	r0, [pc, #68]	; (1000a0a0 <bat_update_char_value+0x64>)
1000a05a:	4b12      	ldr	r3, [pc, #72]	; (1000a0a4 <bat_update_char_value+0x68>)
1000a05c:	4798      	blx	r3
1000a05e:	0021      	movs	r1, r4
1000a060:	4811      	ldr	r0, [pc, #68]	; (1000a0a8 <bat_update_char_value+0x6c>)
1000a062:	4b12      	ldr	r3, [pc, #72]	; (1000a0ac <bat_update_char_value+0x70>)
1000a064:	4798      	blx	r3
		return status;
1000a066:	0020      	movs	r0, r4
1000a068:	e016      	b.n	1000a098 <bat_update_char_value+0x5c>
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
1000a06a:	4b11      	ldr	r3, [pc, #68]	; (1000a0b0 <bat_update_char_value+0x74>)
1000a06c:	781b      	ldrb	r3, [r3, #0]
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
			return status;
		}
	}
	return status;
1000a06e:	2000      	movs	r0, #0
		return status;
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
1000a070:	2b00      	cmp	r3, #0
1000a072:	d011      	beq.n	1000a098 <bat_update_char_value+0x5c>
		/* sending notification to the peer about change in the battery level */ 
		if((status = at_ble_notification_send(conn_handle, battery_serv->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
1000a074:	8ab9      	ldrh	r1, [r7, #20]
1000a076:	0030      	movs	r0, r6
1000a078:	4b0e      	ldr	r3, [pc, #56]	; (1000a0b4 <bat_update_char_value+0x78>)
1000a07a:	4798      	blx	r3
1000a07c:	1e04      	subs	r4, r0, #0
1000a07e:	d008      	beq.n	1000a092 <bat_update_char_value+0x56>
			DBG_LOG("sending notification failed%d",status);
1000a080:	4807      	ldr	r0, [pc, #28]	; (1000a0a0 <bat_update_char_value+0x64>)
1000a082:	4b08      	ldr	r3, [pc, #32]	; (1000a0a4 <bat_update_char_value+0x68>)
1000a084:	4798      	blx	r3
1000a086:	0021      	movs	r1, r4
1000a088:	480b      	ldr	r0, [pc, #44]	; (1000a0b8 <bat_update_char_value+0x7c>)
1000a08a:	4b08      	ldr	r3, [pc, #32]	; (1000a0ac <bat_update_char_value+0x70>)
1000a08c:	4798      	blx	r3
			return status;
1000a08e:	0020      	movs	r0, r4
1000a090:	e002      	b.n	1000a098 <bat_update_char_value+0x5c>
		}
		else {
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
1000a092:	2300      	movs	r3, #0
1000a094:	702b      	strb	r3, [r5, #0]
			return status;
1000a096:	2000      	movs	r0, #0
		}
	}
	return status;
}
1000a098:	b003      	add	sp, #12
1000a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a09c:	1000db01 	.word	0x1000db01
1000a0a0:	10012ab8 	.word	0x10012ab8
1000a0a4:	100117dd 	.word	0x100117dd
1000a0a8:	10012abc 	.word	0x10012abc
1000a0ac:	100116bd 	.word	0x100116bd
1000a0b0:	100138f8 	.word	0x100138f8
1000a0b4:	1000dca1 	.word	0x1000dca1
1000a0b8:	10012ae4 	.word	0x10012ae4

1000a0bc <bat_char_changed_event>:
/**@brief function to check the client characteristic configuration value. 
 */
at_ble_status_t bat_char_changed_event(at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_service, at_ble_characteristic_changed_t *char_handle, bool volatile *flag)
{
1000a0bc:	b570      	push	{r4, r5, r6, lr}
1000a0be:	4c19      	ldr	r4, [pc, #100]	; (1000a124 <bat_char_changed_event+0x68>)
1000a0c0:	44a5      	add	sp, r4
1000a0c2:	0006      	movs	r6, r0
1000a0c4:	000c      	movs	r4, r1
1000a0c6:	0011      	movs	r1, r2
1000a0c8:	001d      	movs	r5, r3
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
1000a0ca:	4a17      	ldr	r2, [pc, #92]	; (1000a128 <bat_char_changed_event+0x6c>)
1000a0cc:	a801      	add	r0, sp, #4
1000a0ce:	4b17      	ldr	r3, [pc, #92]	; (1000a12c <bat_char_changed_event+0x70>)
1000a0d0:	4798      	blx	r3
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
1000a0d2:	234a      	movs	r3, #74	; 0x4a
1000a0d4:	5ae2      	ldrh	r2, [r4, r3]
1000a0d6:	ab01      	add	r3, sp, #4
1000a0d8:	885b      	ldrh	r3, [r3, #2]
		else
		{
			bat_notification_flag = false;			
		}
	}
	return status;
1000a0da:	2000      	movs	r0, #0
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
1000a0dc:	429a      	cmp	r2, r3
1000a0de:	d11d      	bne.n	1000a11c <bat_char_changed_event+0x60>
	{
		if(change_params.char_new_value[0])
1000a0e0:	ab01      	add	r3, sp, #4
1000a0e2:	7a1b      	ldrb	r3, [r3, #8]
1000a0e4:	2b00      	cmp	r3, #0
1000a0e6:	d015      	beq.n	1000a114 <bat_char_changed_event+0x58>
		{
			bat_notification_flag = true;
1000a0e8:	2201      	movs	r2, #1
1000a0ea:	4b11      	ldr	r3, [pc, #68]	; (1000a130 <bat_char_changed_event+0x74>)
1000a0ec:	701a      	strb	r2, [r3, #0]
			/* sending notification to the peer about change in the battery level */
			if((status = at_ble_notification_send(conn_handle, battery_service->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
1000a0ee:	8aa1      	ldrh	r1, [r4, #20]
1000a0f0:	0030      	movs	r0, r6
1000a0f2:	4b10      	ldr	r3, [pc, #64]	; (1000a134 <bat_char_changed_event+0x78>)
1000a0f4:	4798      	blx	r3
1000a0f6:	1e04      	subs	r4, r0, #0
1000a0f8:	d008      	beq.n	1000a10c <bat_char_changed_event+0x50>
				DBG_LOG("sending notification failed%d",status);
1000a0fa:	480f      	ldr	r0, [pc, #60]	; (1000a138 <bat_char_changed_event+0x7c>)
1000a0fc:	4b0f      	ldr	r3, [pc, #60]	; (1000a13c <bat_char_changed_event+0x80>)
1000a0fe:	4798      	blx	r3
1000a100:	0021      	movs	r1, r4
1000a102:	480f      	ldr	r0, [pc, #60]	; (1000a140 <bat_char_changed_event+0x84>)
1000a104:	4b0f      	ldr	r3, [pc, #60]	; (1000a144 <bat_char_changed_event+0x88>)
1000a106:	4798      	blx	r3
				return status;
1000a108:	0020      	movs	r0, r4
1000a10a:	e007      	b.n	1000a11c <bat_char_changed_event+0x60>
			}
			else {
				DBG_LOG_DEV("sending notification successful");
				*flag = false;
1000a10c:	2300      	movs	r3, #0
1000a10e:	702b      	strb	r3, [r5, #0]
				return status;
1000a110:	2000      	movs	r0, #0
1000a112:	e003      	b.n	1000a11c <bat_char_changed_event+0x60>
			}			
		}
		else
		{
			bat_notification_flag = false;			
1000a114:	2200      	movs	r2, #0
1000a116:	4b06      	ldr	r3, [pc, #24]	; (1000a130 <bat_char_changed_event+0x74>)
1000a118:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
1000a11a:	2000      	movs	r0, #0
}
1000a11c:	2384      	movs	r3, #132	; 0x84
1000a11e:	009b      	lsls	r3, r3, #2
1000a120:	449d      	add	sp, r3
1000a122:	bd70      	pop	{r4, r5, r6, pc}
1000a124:	fffffdf0 	.word	0xfffffdf0
1000a128:	0000020a 	.word	0x0000020a
1000a12c:	1001169b 	.word	0x1001169b
1000a130:	100138f8 	.word	0x100138f8
1000a134:	1000dca1 	.word	0x1000dca1
1000a138:	10012ab8 	.word	0x10012ab8
1000a13c:	100117dd 	.word	0x100117dd
1000a140:	10012ae4 	.word	0x10012ae4
1000a144:	100116bd 	.word	0x100116bd

1000a148 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000a148:	2000      	movs	r0, #0
1000a14a:	4770      	bx	lr

1000a14c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000a14c:	2000      	movs	r0, #0
1000a14e:	4770      	bx	lr

1000a150 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a150:	78c0      	ldrb	r0, [r0, #3]
1000a152:	2800      	cmp	r0, #0
1000a154:	d000      	beq.n	1000a158 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a156:	20e2      	movs	r0, #226	; 0xe2
}
1000a158:	4770      	bx	lr
1000a15a:	46c0      	nop			; (mov r8, r8)

1000a15c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000a15c:	2000      	movs	r0, #0
1000a15e:	4770      	bx	lr

1000a160 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a160:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a162:	7800      	ldrb	r0, [r0, #0]
1000a164:	2800      	cmp	r0, #0
1000a166:	d006      	beq.n	1000a176 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a168:	4803      	ldr	r0, [pc, #12]	; (1000a178 <ble_scan_report_handler+0x18>)
1000a16a:	4b04      	ldr	r3, [pc, #16]	; (1000a17c <ble_scan_report_handler+0x1c>)
1000a16c:	4798      	blx	r3
1000a16e:	4804      	ldr	r0, [pc, #16]	; (1000a180 <ble_scan_report_handler+0x20>)
1000a170:	4b04      	ldr	r3, [pc, #16]	; (1000a184 <ble_scan_report_handler+0x24>)
1000a172:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000a174:	20e2      	movs	r0, #226	; 0xe2
}
1000a176:	bd10      	pop	{r4, pc}
1000a178:	10012ab8 	.word	0x10012ab8
1000a17c:	100117dd 	.word	0x100117dd
1000a180:	10012c74 	.word	0x10012c74
1000a184:	100116bd 	.word	0x100116bd

1000a188 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a188:	b510      	push	{r4, lr}
1000a18a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a18c:	78c0      	ldrb	r0, [r0, #3]
1000a18e:	2800      	cmp	r0, #0
1000a190:	d008      	beq.n	1000a1a4 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a192:	4805      	ldr	r0, [pc, #20]	; (1000a1a8 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000a194:	4b05      	ldr	r3, [pc, #20]	; (1000a1ac <ble_mtu_changed_cmd_complete_handler+0x24>)
1000a196:	4798      	blx	r3
1000a198:	78a2      	ldrb	r2, [r4, #2]
1000a19a:	8821      	ldrh	r1, [r4, #0]
1000a19c:	4804      	ldr	r0, [pc, #16]	; (1000a1b0 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000a19e:	4b05      	ldr	r3, [pc, #20]	; (1000a1b4 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000a1a0:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a1a2:	20e2      	movs	r0, #226	; 0xe2
}
1000a1a4:	bd10      	pop	{r4, pc}
1000a1a6:	46c0      	nop			; (mov r8, r8)
1000a1a8:	10012ab8 	.word	0x10012ab8
1000a1ac:	100117dd 	.word	0x100117dd
1000a1b0:	10012c88 	.word	0x10012c88
1000a1b4:	100116bd 	.word	0x100116bd

1000a1b8 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a1ba:	0004      	movs	r4, r0
1000a1bc:	4b19      	ldr	r3, [pc, #100]	; (1000a224 <ble_disconnected_state_handler+0x6c>)
1000a1be:	229b      	movs	r2, #155	; 0x9b
1000a1c0:	0092      	lsls	r2, r2, #2
1000a1c2:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a1c4:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a1c6:	2600      	movs	r6, #0
1000a1c8:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a1ca:	001a      	movs	r2, r3
1000a1cc:	3a56      	subs	r2, #86	; 0x56
1000a1ce:	8811      	ldrh	r1, [r2, #0]
1000a1d0:	8822      	ldrh	r2, [r4, #0]
1000a1d2:	4291      	cmp	r1, r2
1000a1d4:	d119      	bne.n	1000a20a <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a1d6:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a1d8:	2a05      	cmp	r2, #5
1000a1da:	d001      	beq.n	1000a1e0 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a1dc:	2a08      	cmp	r2, #8
1000a1de:	d101      	bne.n	1000a1e4 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a1e0:	7007      	strb	r7, [r0, #0]
1000a1e2:	e012      	b.n	1000a20a <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000a1e4:	2a07      	cmp	r2, #7
1000a1e6:	d80f      	bhi.n	1000a208 <ble_disconnected_state_handler+0x50>
1000a1e8:	0092      	lsls	r2, r2, #2
1000a1ea:	490f      	ldr	r1, [pc, #60]	; (1000a228 <ble_disconnected_state_handler+0x70>)
1000a1ec:	588a      	ldr	r2, [r1, r2]
1000a1ee:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a1f0:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000a1f2:	4a0e      	ldr	r2, [pc, #56]	; (1000a22c <ble_disconnected_state_handler+0x74>)
1000a1f4:	7812      	ldrb	r2, [r2, #0]
1000a1f6:	2a00      	cmp	r2, #0
1000a1f8:	d007      	beq.n	1000a20a <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000a1fa:	4a0c      	ldr	r2, [pc, #48]	; (1000a22c <ble_disconnected_state_handler+0x74>)
1000a1fc:	7812      	ldrb	r2, [r2, #0]
1000a1fe:	3a01      	subs	r2, #1
1000a200:	b2d2      	uxtb	r2, r2
1000a202:	490a      	ldr	r1, [pc, #40]	; (1000a22c <ble_disconnected_state_handler+0x74>)
1000a204:	700a      	strb	r2, [r1, #0]
1000a206:	e000      	b.n	1000a20a <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a208:	7006      	strb	r6, [r0, #0]
1000a20a:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a20c:	42ab      	cmp	r3, r5
1000a20e:	d1db      	bne.n	1000a1c8 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000a210:	4807      	ldr	r0, [pc, #28]	; (1000a230 <ble_disconnected_state_handler+0x78>)
1000a212:	4b08      	ldr	r3, [pc, #32]	; (1000a234 <ble_disconnected_state_handler+0x7c>)
1000a214:	4798      	blx	r3
1000a216:	8822      	ldrh	r2, [r4, #0]
1000a218:	78a1      	ldrb	r1, [r4, #2]
1000a21a:	4807      	ldr	r0, [pc, #28]	; (1000a238 <ble_disconnected_state_handler+0x80>)
1000a21c:	4b07      	ldr	r3, [pc, #28]	; (1000a23c <ble_disconnected_state_handler+0x84>)
1000a21e:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a220:	2000      	movs	r0, #0
1000a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a224:	10015466 	.word	0x10015466
1000a228:	10012b04 	.word	0x10012b04
1000a22c:	10015674 	.word	0x10015674
1000a230:	10012ab8 	.word	0x10012ab8
1000a234:	100117dd 	.word	0x100117dd
1000a238:	10012cc0 	.word	0x10012cc0
1000a23c:	100116bd 	.word	0x100116bd

1000a240 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a242:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a244:	8801      	ldrh	r1, [r0, #0]
1000a246:	4b28      	ldr	r3, [pc, #160]	; (1000a2e8 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a248:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a24a:	891a      	ldrh	r2, [r3, #8]
1000a24c:	428a      	cmp	r2, r1
1000a24e:	d104      	bne.n	1000a25a <ble_encryption_status_change_handler+0x1a>
1000a250:	001a      	movs	r2, r3
1000a252:	325e      	adds	r2, #94	; 0x5e
1000a254:	7812      	ldrb	r2, [r2, #0]
1000a256:	2a06      	cmp	r2, #6
1000a258:	d02e      	beq.n	1000a2b8 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a25a:	3401      	adds	r4, #1
1000a25c:	b2e4      	uxtb	r4, r4
1000a25e:	337c      	adds	r3, #124	; 0x7c
1000a260:	2c05      	cmp	r4, #5
1000a262:	d1f2      	bne.n	1000a24a <ble_encryption_status_change_handler+0xa>
1000a264:	e039      	b.n	1000a2da <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a266:	4920      	ldr	r1, [pc, #128]	; (1000a2e8 <ble_encryption_status_change_handler+0xa8>)
1000a268:	0163      	lsls	r3, r4, #5
1000a26a:	1b1a      	subs	r2, r3, r4
1000a26c:	0092      	lsls	r2, r2, #2
1000a26e:	188a      	adds	r2, r1, r2
1000a270:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a272:	0014      	movs	r4, r2
1000a274:	345e      	adds	r4, #94	; 0x5e
1000a276:	2307      	movs	r3, #7
1000a278:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a27a:	481c      	ldr	r0, [pc, #112]	; (1000a2ec <ble_encryption_status_change_handler+0xac>)
1000a27c:	4b1c      	ldr	r3, [pc, #112]	; (1000a2f0 <ble_encryption_status_change_handler+0xb0>)
1000a27e:	4798      	blx	r3
1000a280:	481c      	ldr	r0, [pc, #112]	; (1000a2f4 <ble_encryption_status_change_handler+0xb4>)
1000a282:	4b1d      	ldr	r3, [pc, #116]	; (1000a2f8 <ble_encryption_status_change_handler+0xb8>)
1000a284:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a286:	25e2      	movs	r5, #226	; 0xe2
1000a288:	e02b      	b.n	1000a2e2 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a28a:	4818      	ldr	r0, [pc, #96]	; (1000a2ec <ble_encryption_status_change_handler+0xac>)
1000a28c:	4b18      	ldr	r3, [pc, #96]	; (1000a2f0 <ble_encryption_status_change_handler+0xb0>)
1000a28e:	4798      	blx	r3
1000a290:	481a      	ldr	r0, [pc, #104]	; (1000a2fc <ble_encryption_status_change_handler+0xbc>)
1000a292:	4b19      	ldr	r3, [pc, #100]	; (1000a2f8 <ble_encryption_status_change_handler+0xb8>)
1000a294:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a296:	4914      	ldr	r1, [pc, #80]	; (1000a2e8 <ble_encryption_status_change_handler+0xa8>)
1000a298:	0163      	lsls	r3, r4, #5
1000a29a:	1b1a      	subs	r2, r3, r4
1000a29c:	0092      	lsls	r2, r2, #2
1000a29e:	188a      	adds	r2, r1, r2
1000a2a0:	0010      	movs	r0, r2
1000a2a2:	305e      	adds	r0, #94	; 0x5e
1000a2a4:	2708      	movs	r7, #8
1000a2a6:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a2a8:	78f0      	ldrb	r0, [r6, #3]
1000a2aa:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a2ac:	78b2      	ldrb	r2, [r6, #2]
1000a2ae:	1b1c      	subs	r4, r3, r4
1000a2b0:	00a4      	lsls	r4, r4, #2
1000a2b2:	190c      	adds	r4, r1, r4
1000a2b4:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a2b6:	e014      	b.n	1000a2e2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a2b8:	78b5      	ldrb	r5, [r6, #2]
1000a2ba:	2d00      	cmp	r5, #0
1000a2bc:	d0e5      	beq.n	1000a28a <ble_encryption_status_change_handler+0x4a>
1000a2be:	e7d2      	b.n	1000a266 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000a2c0:	4e0a      	ldr	r6, [pc, #40]	; (1000a2ec <ble_encryption_status_change_handler+0xac>)
1000a2c2:	0030      	movs	r0, r6
1000a2c4:	4d0a      	ldr	r5, [pc, #40]	; (1000a2f0 <ble_encryption_status_change_handler+0xb0>)
1000a2c6:	47a8      	blx	r5
1000a2c8:	480c      	ldr	r0, [pc, #48]	; (1000a2fc <ble_encryption_status_change_handler+0xbc>)
1000a2ca:	4c0b      	ldr	r4, [pc, #44]	; (1000a2f8 <ble_encryption_status_change_handler+0xb8>)
1000a2cc:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a2ce:	0030      	movs	r0, r6
1000a2d0:	47a8      	blx	r5
1000a2d2:	480b      	ldr	r0, [pc, #44]	; (1000a300 <ble_encryption_status_change_handler+0xc0>)
1000a2d4:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a2d6:	25e2      	movs	r5, #226	; 0xe2
1000a2d8:	e003      	b.n	1000a2e2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a2da:	78b5      	ldrb	r5, [r6, #2]
1000a2dc:	2d00      	cmp	r5, #0
1000a2de:	d1c2      	bne.n	1000a266 <ble_encryption_status_change_handler+0x26>
1000a2e0:	e7ee      	b.n	1000a2c0 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000a2e2:	0028      	movs	r0, r5
1000a2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a2e6:	46c0      	nop			; (mov r8, r8)
1000a2e8:	10015408 	.word	0x10015408
1000a2ec:	10012ab8 	.word	0x10012ab8
1000a2f0:	100117dd 	.word	0x100117dd
1000a2f4:	10012cf0 	.word	0x10012cf0
1000a2f8:	100116bd 	.word	0x100116bd
1000a2fc:	10012d04 	.word	0x10012d04
1000a300:	10012d28 	.word	0x10012d28

1000a304 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a304:	b510      	push	{r4, lr}
1000a306:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a308:	4b15      	ldr	r3, [pc, #84]	; (1000a360 <ble_scan_info_handler+0x5c>)
1000a30a:	781b      	ldrb	r3, [r3, #0]
1000a30c:	b2db      	uxtb	r3, r3
1000a30e:	2b13      	cmp	r3, #19
1000a310:	d812      	bhi.n	1000a338 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a312:	4c13      	ldr	r4, [pc, #76]	; (1000a360 <ble_scan_info_handler+0x5c>)
1000a314:	7823      	ldrb	r3, [r4, #0]
1000a316:	b2db      	uxtb	r3, r3
1000a318:	0098      	lsls	r0, r3, #2
1000a31a:	18c0      	adds	r0, r0, r3
1000a31c:	00c0      	lsls	r0, r0, #3
1000a31e:	18c3      	adds	r3, r0, r3
1000a320:	4810      	ldr	r0, [pc, #64]	; (1000a364 <ble_scan_info_handler+0x60>)
1000a322:	1818      	adds	r0, r3, r0
1000a324:	2229      	movs	r2, #41	; 0x29
1000a326:	4b10      	ldr	r3, [pc, #64]	; (1000a368 <ble_scan_info_handler+0x64>)
1000a328:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a32a:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a32c:	7823      	ldrb	r3, [r4, #0]
1000a32e:	3301      	adds	r3, #1
1000a330:	b2db      	uxtb	r3, r3
1000a332:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000a334:	2300      	movs	r3, #0
1000a336:	e011      	b.n	1000a35c <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a338:	480c      	ldr	r0, [pc, #48]	; (1000a36c <ble_scan_info_handler+0x68>)
1000a33a:	4b0d      	ldr	r3, [pc, #52]	; (1000a370 <ble_scan_info_handler+0x6c>)
1000a33c:	4798      	blx	r3
1000a33e:	480d      	ldr	r0, [pc, #52]	; (1000a374 <ble_scan_info_handler+0x70>)
1000a340:	4b0d      	ldr	r3, [pc, #52]	; (1000a378 <ble_scan_info_handler+0x74>)
1000a342:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a344:	4b0d      	ldr	r3, [pc, #52]	; (1000a37c <ble_scan_info_handler+0x78>)
1000a346:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a348:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a34a:	2800      	cmp	r0, #0
1000a34c:	d006      	beq.n	1000a35c <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000a34e:	4807      	ldr	r0, [pc, #28]	; (1000a36c <ble_scan_info_handler+0x68>)
1000a350:	4b07      	ldr	r3, [pc, #28]	; (1000a370 <ble_scan_info_handler+0x6c>)
1000a352:	4798      	blx	r3
1000a354:	480a      	ldr	r0, [pc, #40]	; (1000a380 <ble_scan_info_handler+0x7c>)
1000a356:	4b08      	ldr	r3, [pc, #32]	; (1000a378 <ble_scan_info_handler+0x74>)
1000a358:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a35a:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000a35c:	0018      	movs	r0, r3
1000a35e:	bd10      	pop	{r4, pc}
1000a360:	100141e0 	.word	0x100141e0
1000a364:	100156ec 	.word	0x100156ec
1000a368:	1001169b 	.word	0x1001169b
1000a36c:	10012ab8 	.word	0x10012ab8
1000a370:	100117dd 	.word	0x100117dd
1000a374:	10012d50 	.word	0x10012d50
1000a378:	100116bd 	.word	0x100116bd
1000a37c:	1000d365 	.word	0x1000d365
1000a380:	10012d88 	.word	0x10012d88

1000a384 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a386:	464f      	mov	r7, r9
1000a388:	4646      	mov	r6, r8
1000a38a:	b4c0      	push	{r6, r7}
1000a38c:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a38e:	8841      	ldrh	r1, [r0, #2]
1000a390:	4b3a      	ldr	r3, [pc, #232]	; (1000a47c <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a392:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a394:	891a      	ldrh	r2, [r3, #8]
1000a396:	428a      	cmp	r2, r1
1000a398:	d104      	bne.n	1000a3a4 <ble_pair_done_handler+0x20>
1000a39a:	001a      	movs	r2, r3
1000a39c:	325e      	adds	r2, #94	; 0x5e
1000a39e:	7812      	ldrb	r2, [r2, #0]
1000a3a0:	2a03      	cmp	r2, #3
1000a3a2:	d062      	beq.n	1000a46a <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3a4:	3401      	adds	r4, #1
1000a3a6:	b2e4      	uxtb	r4, r4
1000a3a8:	337c      	adds	r3, #124	; 0x7c
1000a3aa:	2c05      	cmp	r4, #5
1000a3ac:	d1f2      	bne.n	1000a394 <ble_pair_done_handler+0x10>
1000a3ae:	e02b      	b.n	1000a408 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a3b0:	0163      	lsls	r3, r4, #5
1000a3b2:	1b1c      	subs	r4, r3, r4
1000a3b4:	00a4      	lsls	r4, r4, #2
1000a3b6:	4b31      	ldr	r3, [pc, #196]	; (1000a47c <ble_pair_done_handler+0xf8>)
1000a3b8:	191c      	adds	r4, r3, r4
1000a3ba:	345e      	adds	r4, #94	; 0x5e
1000a3bc:	7823      	ldrb	r3, [r4, #0]
1000a3be:	2b01      	cmp	r3, #1
1000a3c0:	d913      	bls.n	1000a3ea <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000a3c2:	482f      	ldr	r0, [pc, #188]	; (1000a480 <ble_pair_done_handler+0xfc>)
1000a3c4:	4b2f      	ldr	r3, [pc, #188]	; (1000a484 <ble_pair_done_handler+0x100>)
1000a3c6:	4798      	blx	r3
1000a3c8:	482f      	ldr	r0, [pc, #188]	; (1000a488 <ble_pair_done_handler+0x104>)
1000a3ca:	4b30      	ldr	r3, [pc, #192]	; (1000a48c <ble_pair_done_handler+0x108>)
1000a3cc:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a3ce:	8868      	ldrh	r0, [r5, #2]
1000a3d0:	2113      	movs	r1, #19
1000a3d2:	4b2f      	ldr	r3, [pc, #188]	; (1000a490 <ble_pair_done_handler+0x10c>)
1000a3d4:	4798      	blx	r3
1000a3d6:	1e06      	subs	r6, r0, #0
1000a3d8:	d04b      	beq.n	1000a472 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000a3da:	4829      	ldr	r0, [pc, #164]	; (1000a480 <ble_pair_done_handler+0xfc>)
1000a3dc:	4b29      	ldr	r3, [pc, #164]	; (1000a484 <ble_pair_done_handler+0x100>)
1000a3de:	4798      	blx	r3
1000a3e0:	482c      	ldr	r0, [pc, #176]	; (1000a494 <ble_pair_done_handler+0x110>)
1000a3e2:	4b2a      	ldr	r3, [pc, #168]	; (1000a48c <ble_pair_done_handler+0x108>)
1000a3e4:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a3e6:	26e2      	movs	r6, #226	; 0xe2
1000a3e8:	e043      	b.n	1000a472 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a3ea:	2600      	movs	r6, #0
1000a3ec:	e041      	b.n	1000a472 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a3ee:	4e24      	ldr	r6, [pc, #144]	; (1000a480 <ble_pair_done_handler+0xfc>)
1000a3f0:	0030      	movs	r0, r6
1000a3f2:	4d24      	ldr	r5, [pc, #144]	; (1000a484 <ble_pair_done_handler+0x100>)
1000a3f4:	47a8      	blx	r5
1000a3f6:	4828      	ldr	r0, [pc, #160]	; (1000a498 <ble_pair_done_handler+0x114>)
1000a3f8:	4c24      	ldr	r4, [pc, #144]	; (1000a48c <ble_pair_done_handler+0x108>)
1000a3fa:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a3fc:	0030      	movs	r0, r6
1000a3fe:	47a8      	blx	r5
1000a400:	4826      	ldr	r0, [pc, #152]	; (1000a49c <ble_pair_done_handler+0x118>)
1000a402:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a404:	26e2      	movs	r6, #226	; 0xe2
1000a406:	e034      	b.n	1000a472 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a408:	792b      	ldrb	r3, [r5, #4]
1000a40a:	2b00      	cmp	r3, #0
1000a40c:	d1d0      	bne.n	1000a3b0 <ble_pair_done_handler+0x2c>
1000a40e:	e7ee      	b.n	1000a3ee <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a410:	481b      	ldr	r0, [pc, #108]	; (1000a480 <ble_pair_done_handler+0xfc>)
1000a412:	4b1c      	ldr	r3, [pc, #112]	; (1000a484 <ble_pair_done_handler+0x100>)
1000a414:	4798      	blx	r3
1000a416:	4820      	ldr	r0, [pc, #128]	; (1000a498 <ble_pair_done_handler+0x114>)
1000a418:	4b1c      	ldr	r3, [pc, #112]	; (1000a48c <ble_pair_done_handler+0x108>)
1000a41a:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a41c:	782a      	ldrb	r2, [r5, #0]
1000a41e:	4b17      	ldr	r3, [pc, #92]	; (1000a47c <ble_pair_done_handler+0xf8>)
1000a420:	4699      	mov	r9, r3
1000a422:	0167      	lsls	r7, r4, #5
1000a424:	1b3b      	subs	r3, r7, r4
1000a426:	009b      	lsls	r3, r3, #2
1000a428:	444b      	add	r3, r9
1000a42a:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a42c:	792a      	ldrb	r2, [r5, #4]
1000a42e:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a430:	335e      	adds	r3, #94	; 0x5e
1000a432:	2205      	movs	r2, #5
1000a434:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a436:	1b38      	subs	r0, r7, r4
1000a438:	0080      	lsls	r0, r0, #2
1000a43a:	4448      	add	r0, r9
1000a43c:	3036      	adds	r0, #54	; 0x36
1000a43e:	0029      	movs	r1, r5
1000a440:	3122      	adds	r1, #34	; 0x22
1000a442:	320b      	adds	r2, #11
1000a444:	4b16      	ldr	r3, [pc, #88]	; (1000a4a0 <ble_pair_done_handler+0x11c>)
1000a446:	4698      	mov	r8, r3
1000a448:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a44a:	1b38      	subs	r0, r7, r4
1000a44c:	0080      	lsls	r0, r0, #2
1000a44e:	4448      	add	r0, r9
1000a450:	3046      	adds	r0, #70	; 0x46
1000a452:	0029      	movs	r1, r5
1000a454:	3132      	adds	r1, #50	; 0x32
1000a456:	2217      	movs	r2, #23
1000a458:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a45a:	1b38      	subs	r0, r7, r4
1000a45c:	0080      	lsls	r0, r0, #2
1000a45e:	4448      	add	r0, r9
1000a460:	301a      	adds	r0, #26
1000a462:	1da9      	adds	r1, r5, #6
1000a464:	221c      	movs	r2, #28
1000a466:	47c0      	blx	r8
1000a468:	e003      	b.n	1000a472 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a46a:	792e      	ldrb	r6, [r5, #4]
1000a46c:	2e00      	cmp	r6, #0
1000a46e:	d0cf      	beq.n	1000a410 <ble_pair_done_handler+0x8c>
1000a470:	e79e      	b.n	1000a3b0 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a472:	0030      	movs	r0, r6
1000a474:	bc0c      	pop	{r2, r3}
1000a476:	4690      	mov	r8, r2
1000a478:	4699      	mov	r9, r3
1000a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a47c:	10015408 	.word	0x10015408
1000a480:	10012ab8 	.word	0x10012ab8
1000a484:	100117dd 	.word	0x100117dd
1000a488:	10012da0 	.word	0x10012da0
1000a48c:	100116bd 	.word	0x100116bd
1000a490:	1000d385 	.word	0x1000d385
1000a494:	10012dc0 	.word	0x10012dc0
1000a498:	10012ddc 	.word	0x10012ddc
1000a49c:	10012e08 	.word	0x10012e08
1000a4a0:	1001169b 	.word	0x1001169b

1000a4a4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a4a4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a4a6:	8800      	ldrh	r0, [r0, #0]
1000a4a8:	2378      	movs	r3, #120	; 0x78
1000a4aa:	2201      	movs	r2, #1
1000a4ac:	2101      	movs	r1, #1
1000a4ae:	4c02      	ldr	r4, [pc, #8]	; (1000a4b8 <ble_conn_param_update_req+0x14>)
1000a4b0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a4b2:	2000      	movs	r0, #0
1000a4b4:	bd10      	pop	{r4, pc}
1000a4b6:	46c0      	nop			; (mov r8, r8)
1000a4b8:	1000d3a5 	.word	0x1000d3a5

1000a4bc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4be:	4657      	mov	r7, sl
1000a4c0:	464e      	mov	r6, r9
1000a4c2:	4645      	mov	r5, r8
1000a4c4:	b4e0      	push	{r5, r6, r7}
1000a4c6:	b084      	sub	sp, #16
1000a4c8:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a4ca:	2209      	movs	r2, #9
1000a4cc:	2100      	movs	r1, #0
1000a4ce:	a801      	add	r0, sp, #4
1000a4d0:	4b6b      	ldr	r3, [pc, #428]	; (1000a680 <ble_slave_security_request_handler+0x1c4>)
1000a4d2:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a4d4:	8825      	ldrh	r5, [r4, #0]
1000a4d6:	496b      	ldr	r1, [pc, #428]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a4d8:	000a      	movs	r2, r1
1000a4da:	2300      	movs	r3, #0
1000a4dc:	8910      	ldrh	r0, [r2, #8]
1000a4de:	42a8      	cmp	r0, r5
1000a4e0:	d116      	bne.n	1000a510 <ble_slave_security_request_handler+0x54>
1000a4e2:	0010      	movs	r0, r2
1000a4e4:	305e      	adds	r0, #94	; 0x5e
1000a4e6:	7800      	ldrb	r0, [r0, #0]
1000a4e8:	2802      	cmp	r0, #2
1000a4ea:	d111      	bne.n	1000a510 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a4ec:	4865      	ldr	r0, [pc, #404]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a4ee:	015a      	lsls	r2, r3, #5
1000a4f0:	1ad6      	subs	r6, r2, r3
1000a4f2:	00b6      	lsls	r6, r6, #2
1000a4f4:	1986      	adds	r6, r0, r6
1000a4f6:	365e      	adds	r6, #94	; 0x5e
1000a4f8:	2206      	movs	r2, #6
1000a4fa:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a4fc:	32f9      	adds	r2, #249	; 0xf9
1000a4fe:	4013      	ands	r3, r2
1000a500:	015a      	lsls	r2, r3, #5
1000a502:	1ad2      	subs	r2, r2, r3
1000a504:	0092      	lsls	r2, r2, #2
1000a506:	1882      	adds	r2, r0, r2
1000a508:	7d12      	ldrb	r2, [r2, #20]
1000a50a:	07d0      	lsls	r0, r2, #31
1000a50c:	d405      	bmi.n	1000a51a <ble_slave_security_request_handler+0x5e>
1000a50e:	e01b      	b.n	1000a548 <ble_slave_security_request_handler+0x8c>
1000a510:	3301      	adds	r3, #1
1000a512:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a514:	2b05      	cmp	r3, #5
1000a516:	d1e1      	bne.n	1000a4dc <ble_slave_security_request_handler+0x20>
1000a518:	e01e      	b.n	1000a558 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a51a:	78e0      	ldrb	r0, [r4, #3]
1000a51c:	2800      	cmp	r0, #0
1000a51e:	d013      	beq.n	1000a548 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a520:	0159      	lsls	r1, r3, #5
1000a522:	1ac9      	subs	r1, r1, r3
1000a524:	008b      	lsls	r3, r1, #2
1000a526:	4957      	ldr	r1, [pc, #348]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a528:	18c9      	adds	r1, r1, r3
1000a52a:	311a      	adds	r1, #26
1000a52c:	8820      	ldrh	r0, [r4, #0]
1000a52e:	4b56      	ldr	r3, [pc, #344]	; (1000a688 <ble_slave_security_request_handler+0x1cc>)
1000a530:	4798      	blx	r3
1000a532:	2800      	cmp	r0, #0
1000a534:	d100      	bne.n	1000a538 <ble_slave_security_request_handler+0x7c>
1000a536:	e09d      	b.n	1000a674 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a538:	4854      	ldr	r0, [pc, #336]	; (1000a68c <ble_slave_security_request_handler+0x1d0>)
1000a53a:	4b55      	ldr	r3, [pc, #340]	; (1000a690 <ble_slave_security_request_handler+0x1d4>)
1000a53c:	4798      	blx	r3
1000a53e:	4855      	ldr	r0, [pc, #340]	; (1000a694 <ble_slave_security_request_handler+0x1d8>)
1000a540:	4b55      	ldr	r3, [pc, #340]	; (1000a698 <ble_slave_security_request_handler+0x1dc>)
1000a542:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a544:	20e2      	movs	r0, #226	; 0xe2
1000a546:	e095      	b.n	1000a674 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a548:	015a      	lsls	r2, r3, #5
1000a54a:	1ad3      	subs	r3, r2, r3
1000a54c:	009b      	lsls	r3, r3, #2
1000a54e:	4a4d      	ldr	r2, [pc, #308]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a550:	18d3      	adds	r3, r2, r3
1000a552:	335e      	adds	r3, #94	; 0x5e
1000a554:	2202      	movs	r2, #2
1000a556:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a558:	8825      	ldrh	r5, [r4, #0]
1000a55a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a55c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a55e:	0016      	movs	r6, r2
1000a560:	8908      	ldrh	r0, [r1, #8]
1000a562:	42a8      	cmp	r0, r5
1000a564:	d10d      	bne.n	1000a582 <ble_slave_security_request_handler+0xc6>
1000a566:	0008      	movs	r0, r1
1000a568:	305e      	adds	r0, #94	; 0x5e
1000a56a:	7800      	ldrb	r0, [r0, #0]
1000a56c:	2802      	cmp	r0, #2
1000a56e:	d108      	bne.n	1000a582 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a570:	0152      	lsls	r2, r2, #5
1000a572:	1b92      	subs	r2, r2, r6
1000a574:	0096      	lsls	r6, r2, #2
1000a576:	4a43      	ldr	r2, [pc, #268]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a578:	1992      	adds	r2, r2, r6
1000a57a:	325e      	adds	r2, #94	; 0x5e
1000a57c:	2103      	movs	r1, #3
1000a57e:	7011      	strb	r1, [r2, #0]
			break;
1000a580:	e005      	b.n	1000a58e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a582:	3301      	adds	r3, #1
1000a584:	b2db      	uxtb	r3, r3
1000a586:	3201      	adds	r2, #1
1000a588:	317c      	adds	r1, #124	; 0x7c
1000a58a:	2b05      	cmp	r3, #5
1000a58c:	d1e7      	bne.n	1000a55e <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a58e:	aa01      	add	r2, sp, #4
1000a590:	2102      	movs	r1, #2
1000a592:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a594:	78e1      	ldrb	r1, [r4, #3]
1000a596:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a598:	2101      	movs	r1, #1
1000a59a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a59c:	3103      	adds	r1, #3
1000a59e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a5a0:	001f      	movs	r7, r3
1000a5a2:	015a      	lsls	r2, r3, #5
1000a5a4:	1ad2      	subs	r2, r2, r3
1000a5a6:	0092      	lsls	r2, r2, #2
1000a5a8:	4936      	ldr	r1, [pc, #216]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a5aa:	5c52      	ldrb	r2, [r2, r1]
1000a5ac:	2a02      	cmp	r2, #2
1000a5ae:	d104      	bne.n	1000a5ba <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a5b0:	aa01      	add	r2, sp, #4
1000a5b2:	2103      	movs	r1, #3
1000a5b4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a5b6:	71d1      	strb	r1, [r2, #7]
1000a5b8:	e003      	b.n	1000a5c2 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a5ba:	aa01      	add	r2, sp, #4
1000a5bc:	2101      	movs	r1, #1
1000a5be:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a5c0:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a5c2:	aa01      	add	r2, sp, #4
1000a5c4:	2110      	movs	r1, #16
1000a5c6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a5c8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a5ca:	017a      	lsls	r2, r7, #5
1000a5cc:	1bd2      	subs	r2, r2, r7
1000a5ce:	0092      	lsls	r2, r2, #2
1000a5d0:	492c      	ldr	r1, [pc, #176]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a5d2:	188a      	adds	r2, r1, r2
1000a5d4:	7e12      	ldrb	r2, [r2, #24]
1000a5d6:	2a40      	cmp	r2, #64	; 0x40
1000a5d8:	d134      	bne.n	1000a644 <ble_slave_security_request_handler+0x188>
1000a5da:	015a      	lsls	r2, r3, #5
1000a5dc:	1ad3      	subs	r3, r2, r3
1000a5de:	009b      	lsls	r3, r3, #2
1000a5e0:	469a      	mov	sl, r3
1000a5e2:	001e      	movs	r6, r3
1000a5e4:	3660      	adds	r6, #96	; 0x60
1000a5e6:	1876      	adds	r6, r6, r1
1000a5e8:	4655      	mov	r5, sl
1000a5ea:	3568      	adds	r5, #104	; 0x68
1000a5ec:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a5ee:	4b2b      	ldr	r3, [pc, #172]	; (1000a69c <ble_slave_security_request_handler+0x1e0>)
1000a5f0:	4699      	mov	r9, r3
1000a5f2:	230f      	movs	r3, #15
1000a5f4:	4698      	mov	r8, r3
1000a5f6:	47c8      	blx	r9
1000a5f8:	4643      	mov	r3, r8
1000a5fa:	4018      	ands	r0, r3
1000a5fc:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a5fe:	47c8      	blx	r9
1000a600:	4643      	mov	r3, r8
1000a602:	4018      	ands	r0, r3
1000a604:	74b0      	strb	r0, [r6, #18]
1000a606:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a608:	42ae      	cmp	r6, r5
1000a60a:	d1f4      	bne.n	1000a5f6 <ble_slave_security_request_handler+0x13a>
1000a60c:	4656      	mov	r6, sl
1000a60e:	3670      	adds	r6, #112	; 0x70
1000a610:	4a1c      	ldr	r2, [pc, #112]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a612:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a614:	4b21      	ldr	r3, [pc, #132]	; (1000a69c <ble_slave_security_request_handler+0x1e0>)
1000a616:	4699      	mov	r9, r3
1000a618:	230f      	movs	r3, #15
1000a61a:	4698      	mov	r8, r3
1000a61c:	47c8      	blx	r9
1000a61e:	4643      	mov	r3, r8
1000a620:	4018      	ands	r0, r3
1000a622:	7028      	strb	r0, [r5, #0]
1000a624:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a626:	42b5      	cmp	r5, r6
1000a628:	d1f8      	bne.n	1000a61c <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a62a:	4b1c      	ldr	r3, [pc, #112]	; (1000a69c <ble_slave_security_request_handler+0x1e0>)
1000a62c:	4798      	blx	r3
1000a62e:	017b      	lsls	r3, r7, #5
1000a630:	1bdb      	subs	r3, r3, r7
1000a632:	009b      	lsls	r3, r3, #2
1000a634:	4a13      	ldr	r2, [pc, #76]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a636:	18d3      	adds	r3, r2, r3
1000a638:	001a      	movs	r2, r3
1000a63a:	3270      	adds	r2, #112	; 0x70
1000a63c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a63e:	337a      	adds	r3, #122	; 0x7a
1000a640:	2210      	movs	r2, #16
1000a642:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a644:	017a      	lsls	r2, r7, #5
1000a646:	1bd7      	subs	r7, r2, r7
1000a648:	00bf      	lsls	r7, r7, #2
1000a64a:	3760      	adds	r7, #96	; 0x60
1000a64c:	4a0d      	ldr	r2, [pc, #52]	; (1000a684 <ble_slave_security_request_handler+0x1c8>)
1000a64e:	18ba      	adds	r2, r7, r2
1000a650:	8820      	ldrh	r0, [r4, #0]
1000a652:	2300      	movs	r3, #0
1000a654:	a901      	add	r1, sp, #4
1000a656:	4c12      	ldr	r4, [pc, #72]	; (1000a6a0 <ble_slave_security_request_handler+0x1e4>)
1000a658:	47a0      	blx	r4
1000a65a:	2800      	cmp	r0, #0
1000a65c:	d00a      	beq.n	1000a674 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a65e:	ab01      	add	r3, sp, #4
1000a660:	2200      	movs	r2, #0
1000a662:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a664:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a666:	4809      	ldr	r0, [pc, #36]	; (1000a68c <ble_slave_security_request_handler+0x1d0>)
1000a668:	4b09      	ldr	r3, [pc, #36]	; (1000a690 <ble_slave_security_request_handler+0x1d4>)
1000a66a:	4798      	blx	r3
1000a66c:	480d      	ldr	r0, [pc, #52]	; (1000a6a4 <ble_slave_security_request_handler+0x1e8>)
1000a66e:	4b0a      	ldr	r3, [pc, #40]	; (1000a698 <ble_slave_security_request_handler+0x1dc>)
1000a670:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a672:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a674:	b004      	add	sp, #16
1000a676:	bc1c      	pop	{r2, r3, r4}
1000a678:	4690      	mov	r8, r2
1000a67a:	4699      	mov	r9, r3
1000a67c:	46a2      	mov	sl, r4
1000a67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a680:	100116ad 	.word	0x100116ad
1000a684:	10015408 	.word	0x10015408
1000a688:	1000df69 	.word	0x1000df69
1000a68c:	10012ab8 	.word	0x10012ab8
1000a690:	100117dd 	.word	0x100117dd
1000a694:	10012e38 	.word	0x10012e38
1000a698:	100116bd 	.word	0x100116bd
1000a69c:	100117f1 	.word	0x100117f1
1000a6a0:	1000dd7d 	.word	0x1000dd7d
1000a6a4:	10012e50 	.word	0x10012e50

1000a6a8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6aa:	465f      	mov	r7, fp
1000a6ac:	4656      	mov	r6, sl
1000a6ae:	464d      	mov	r5, r9
1000a6b0:	4644      	mov	r4, r8
1000a6b2:	b4f0      	push	{r4, r5, r6, r7}
1000a6b4:	b085      	sub	sp, #20
1000a6b6:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a6b8:	8804      	ldrh	r4, [r0, #0]
1000a6ba:	4a49      	ldr	r2, [pc, #292]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a6bc:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6be:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a6c0:	8910      	ldrh	r0, [r2, #8]
1000a6c2:	42a0      	cmp	r0, r4
1000a6c4:	d10d      	bne.n	1000a6e2 <ble_pair_request_handler+0x3a>
1000a6c6:	0010      	movs	r0, r2
1000a6c8:	305e      	adds	r0, #94	; 0x5e
1000a6ca:	7800      	ldrb	r0, [r0, #0]
1000a6cc:	2802      	cmp	r0, #2
1000a6ce:	d108      	bne.n	1000a6e2 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a6d0:	014a      	lsls	r2, r1, #5
1000a6d2:	1a52      	subs	r2, r2, r1
1000a6d4:	0095      	lsls	r5, r2, #2
1000a6d6:	4a42      	ldr	r2, [pc, #264]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a6d8:	1952      	adds	r2, r2, r5
1000a6da:	325e      	adds	r2, #94	; 0x5e
1000a6dc:	2103      	movs	r1, #3
1000a6de:	7011      	strb	r1, [r2, #0]
			break;
1000a6e0:	e005      	b.n	1000a6ee <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a6e2:	3301      	adds	r3, #1
1000a6e4:	b2db      	uxtb	r3, r3
1000a6e6:	3101      	adds	r1, #1
1000a6e8:	327c      	adds	r2, #124	; 0x7c
1000a6ea:	2b05      	cmp	r3, #5
1000a6ec:	d1e8      	bne.n	1000a6c0 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a6ee:	aa01      	add	r2, sp, #4
1000a6f0:	2102      	movs	r1, #2
1000a6f2:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a6f4:	3901      	subs	r1, #1
1000a6f6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a6f8:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a6fa:	2100      	movs	r1, #0
1000a6fc:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a6fe:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a700:	001f      	movs	r7, r3
1000a702:	015a      	lsls	r2, r3, #5
1000a704:	1ad2      	subs	r2, r2, r3
1000a706:	0092      	lsls	r2, r2, #2
1000a708:	4935      	ldr	r1, [pc, #212]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a70a:	5c52      	ldrb	r2, [r2, r1]
1000a70c:	2a02      	cmp	r2, #2
1000a70e:	d104      	bne.n	1000a71a <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a710:	aa01      	add	r2, sp, #4
1000a712:	2103      	movs	r1, #3
1000a714:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a716:	71d1      	strb	r1, [r2, #7]
1000a718:	e003      	b.n	1000a722 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a71a:	aa01      	add	r2, sp, #4
1000a71c:	2101      	movs	r1, #1
1000a71e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a720:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a722:	aa01      	add	r2, sp, #4
1000a724:	2110      	movs	r1, #16
1000a726:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a728:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a72a:	017a      	lsls	r2, r7, #5
1000a72c:	1bd2      	subs	r2, r2, r7
1000a72e:	0092      	lsls	r2, r2, #2
1000a730:	492b      	ldr	r1, [pc, #172]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a732:	188a      	adds	r2, r1, r2
1000a734:	7e12      	ldrb	r2, [r2, #24]
1000a736:	2a40      	cmp	r2, #64	; 0x40
1000a738:	d131      	bne.n	1000a79e <ble_pair_request_handler+0xf6>
1000a73a:	015a      	lsls	r2, r3, #5
1000a73c:	1ad3      	subs	r3, r2, r3
1000a73e:	009b      	lsls	r3, r3, #2
1000a740:	469a      	mov	sl, r3
1000a742:	001d      	movs	r5, r3
1000a744:	3560      	adds	r5, #96	; 0x60
1000a746:	186d      	adds	r5, r5, r1
1000a748:	4654      	mov	r4, sl
1000a74a:	3468      	adds	r4, #104	; 0x68
1000a74c:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a74e:	4b25      	ldr	r3, [pc, #148]	; (1000a7e4 <ble_pair_request_handler+0x13c>)
1000a750:	4699      	mov	r9, r3
1000a752:	260f      	movs	r6, #15
1000a754:	47c8      	blx	r9
1000a756:	4030      	ands	r0, r6
1000a758:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a75a:	47c8      	blx	r9
1000a75c:	4030      	ands	r0, r6
1000a75e:	74a8      	strb	r0, [r5, #18]
1000a760:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a762:	42a5      	cmp	r5, r4
1000a764:	d1f6      	bne.n	1000a754 <ble_pair_request_handler+0xac>
1000a766:	4655      	mov	r5, sl
1000a768:	3570      	adds	r5, #112	; 0x70
1000a76a:	4a1d      	ldr	r2, [pc, #116]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a76c:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a76e:	4b1d      	ldr	r3, [pc, #116]	; (1000a7e4 <ble_pair_request_handler+0x13c>)
1000a770:	4699      	mov	r9, r3
1000a772:	230f      	movs	r3, #15
1000a774:	4698      	mov	r8, r3
1000a776:	47c8      	blx	r9
1000a778:	4643      	mov	r3, r8
1000a77a:	4018      	ands	r0, r3
1000a77c:	7020      	strb	r0, [r4, #0]
1000a77e:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a780:	42ac      	cmp	r4, r5
1000a782:	d1f8      	bne.n	1000a776 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a784:	4b17      	ldr	r3, [pc, #92]	; (1000a7e4 <ble_pair_request_handler+0x13c>)
1000a786:	4798      	blx	r3
1000a788:	017b      	lsls	r3, r7, #5
1000a78a:	1bdb      	subs	r3, r3, r7
1000a78c:	009b      	lsls	r3, r3, #2
1000a78e:	4a14      	ldr	r2, [pc, #80]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a790:	18d3      	adds	r3, r2, r3
1000a792:	001a      	movs	r2, r3
1000a794:	3270      	adds	r2, #112	; 0x70
1000a796:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a798:	337a      	adds	r3, #122	; 0x7a
1000a79a:	2210      	movs	r2, #16
1000a79c:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a79e:	017a      	lsls	r2, r7, #5
1000a7a0:	1bd7      	subs	r7, r2, r7
1000a7a2:	00bf      	lsls	r7, r7, #2
1000a7a4:	3760      	adds	r7, #96	; 0x60
1000a7a6:	4a0e      	ldr	r2, [pc, #56]	; (1000a7e0 <ble_pair_request_handler+0x138>)
1000a7a8:	18ba      	adds	r2, r7, r2
1000a7aa:	465b      	mov	r3, fp
1000a7ac:	8818      	ldrh	r0, [r3, #0]
1000a7ae:	2300      	movs	r3, #0
1000a7b0:	a901      	add	r1, sp, #4
1000a7b2:	4c0d      	ldr	r4, [pc, #52]	; (1000a7e8 <ble_pair_request_handler+0x140>)
1000a7b4:	47a0      	blx	r4
1000a7b6:	2800      	cmp	r0, #0
1000a7b8:	d00a      	beq.n	1000a7d0 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a7ba:	ab01      	add	r3, sp, #4
1000a7bc:	2200      	movs	r2, #0
1000a7be:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a7c0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a7c2:	480a      	ldr	r0, [pc, #40]	; (1000a7ec <ble_pair_request_handler+0x144>)
1000a7c4:	4b0a      	ldr	r3, [pc, #40]	; (1000a7f0 <ble_pair_request_handler+0x148>)
1000a7c6:	4798      	blx	r3
1000a7c8:	480a      	ldr	r0, [pc, #40]	; (1000a7f4 <ble_pair_request_handler+0x14c>)
1000a7ca:	4b0b      	ldr	r3, [pc, #44]	; (1000a7f8 <ble_pair_request_handler+0x150>)
1000a7cc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a7ce:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a7d0:	b005      	add	sp, #20
1000a7d2:	bc3c      	pop	{r2, r3, r4, r5}
1000a7d4:	4690      	mov	r8, r2
1000a7d6:	4699      	mov	r9, r3
1000a7d8:	46a2      	mov	sl, r4
1000a7da:	46ab      	mov	fp, r5
1000a7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7de:	46c0      	nop			; (mov r8, r8)
1000a7e0:	10015408 	.word	0x10015408
1000a7e4:	100117f1 	.word	0x100117f1
1000a7e8:	1000dd7d 	.word	0x1000dd7d
1000a7ec:	10012ab8 	.word	0x10012ab8
1000a7f0:	100117dd 	.word	0x100117dd
1000a7f4:	10012e7c 	.word	0x10012e7c
1000a7f8:	100116bd 	.word	0x100116bd

1000a7fc <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a7fe:	b085      	sub	sp, #20
1000a800:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a802:	2206      	movs	r2, #6
1000a804:	493d      	ldr	r1, [pc, #244]	; (1000a8fc <ble_pair_key_request_handler+0x100>)
1000a806:	a802      	add	r0, sp, #8
1000a808:	4e3d      	ldr	r6, [pc, #244]	; (1000a900 <ble_pair_key_request_handler+0x104>)
1000a80a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a80c:	ac01      	add	r4, sp, #4
1000a80e:	2204      	movs	r2, #4
1000a810:	0029      	movs	r1, r5
1000a812:	0020      	movs	r0, r4
1000a814:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a816:	78e3      	ldrb	r3, [r4, #3]
1000a818:	2b00      	cmp	r3, #0
1000a81a:	d162      	bne.n	1000a8e2 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a81c:	4839      	ldr	r0, [pc, #228]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a81e:	4b3a      	ldr	r3, [pc, #232]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a820:	4798      	blx	r3
1000a822:	483a      	ldr	r0, [pc, #232]	; (1000a90c <ble_pair_key_request_handler+0x110>)
1000a824:	4b3a      	ldr	r3, [pc, #232]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a826:	4798      	blx	r3
1000a828:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a82a:	4c3a      	ldr	r4, [pc, #232]	; (1000a914 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a82c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a82e:	201e      	movs	r0, #30
1000a830:	47a0      	blx	r4
1000a832:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a834:	2b00      	cmp	r3, #0
1000a836:	d11a      	bne.n	1000a86e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a838:	4f32      	ldr	r7, [pc, #200]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a83a:	0038      	movs	r0, r7
1000a83c:	4e32      	ldr	r6, [pc, #200]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a83e:	47b0      	blx	r6
1000a840:	4835      	ldr	r0, [pc, #212]	; (1000a918 <ble_pair_key_request_handler+0x11c>)
1000a842:	4c33      	ldr	r4, [pc, #204]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a844:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a846:	0038      	movs	r0, r7
1000a848:	47b0      	blx	r6
1000a84a:	4834      	ldr	r0, [pc, #208]	; (1000a91c <ble_pair_key_request_handler+0x120>)
1000a84c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a84e:	8828      	ldrh	r0, [r5, #0]
1000a850:	2113      	movs	r1, #19
1000a852:	4b33      	ldr	r3, [pc, #204]	; (1000a920 <ble_pair_key_request_handler+0x124>)
1000a854:	4798      	blx	r3
1000a856:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a858:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a85a:	2b00      	cmp	r3, #0
1000a85c:	d04c      	beq.n	1000a8f8 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a85e:	4829      	ldr	r0, [pc, #164]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a860:	4b29      	ldr	r3, [pc, #164]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a862:	4798      	blx	r3
1000a864:	482f      	ldr	r0, [pc, #188]	; (1000a924 <ble_pair_key_request_handler+0x128>)
1000a866:	4b2a      	ldr	r3, [pc, #168]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a868:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a86a:	20e2      	movs	r0, #226	; 0xe2
1000a86c:	e044      	b.n	1000a8f8 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a86e:	001a      	movs	r2, r3
1000a870:	3a30      	subs	r2, #48	; 0x30
1000a872:	2a09      	cmp	r2, #9
1000a874:	d8db      	bhi.n	1000a82e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a876:	aa02      	add	r2, sp, #8
1000a878:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a87a:	4038      	ands	r0, r7
1000a87c:	4b2a      	ldr	r3, [pc, #168]	; (1000a928 <ble_pair_key_request_handler+0x12c>)
1000a87e:	4798      	blx	r3
1000a880:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a882:	2e06      	cmp	r6, #6
1000a884:	d026      	beq.n	1000a8d4 <ble_pair_key_request_handler+0xd8>
1000a886:	e7d2      	b.n	1000a82e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a888:	481e      	ldr	r0, [pc, #120]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a88a:	4b1f      	ldr	r3, [pc, #124]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a88c:	4798      	blx	r3
1000a88e:	4827      	ldr	r0, [pc, #156]	; (1000a92c <ble_pair_key_request_handler+0x130>)
1000a890:	4b1f      	ldr	r3, [pc, #124]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a892:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a894:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a896:	4e24      	ldr	r6, [pc, #144]	; (1000a928 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a898:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a89a:	5ce0      	ldrb	r0, [r4, r3]
1000a89c:	47b0      	blx	r6
1000a89e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a8a0:	2c06      	cmp	r4, #6
1000a8a2:	d1f9      	bne.n	1000a898 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a8a4:	ab01      	add	r3, sp, #4
1000a8a6:	7899      	ldrb	r1, [r3, #2]
1000a8a8:	8828      	ldrh	r0, [r5, #0]
1000a8aa:	aa02      	add	r2, sp, #8
1000a8ac:	4b20      	ldr	r3, [pc, #128]	; (1000a930 <ble_pair_key_request_handler+0x134>)
1000a8ae:	4798      	blx	r3
1000a8b0:	2800      	cmp	r0, #0
1000a8b2:	d021      	beq.n	1000a8f8 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a8b4:	4813      	ldr	r0, [pc, #76]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a8b6:	4b14      	ldr	r3, [pc, #80]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a8b8:	4798      	blx	r3
1000a8ba:	481e      	ldr	r0, [pc, #120]	; (1000a934 <ble_pair_key_request_handler+0x138>)
1000a8bc:	4b14      	ldr	r3, [pc, #80]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a8be:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a8c0:	2000      	movs	r0, #0
1000a8c2:	e019      	b.n	1000a8f8 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a8c4:	480f      	ldr	r0, [pc, #60]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a8c6:	4b10      	ldr	r3, [pc, #64]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a8c8:	4798      	blx	r3
1000a8ca:	481b      	ldr	r0, [pc, #108]	; (1000a938 <ble_pair_key_request_handler+0x13c>)
1000a8cc:	4b10      	ldr	r3, [pc, #64]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a8ce:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a8d0:	2000      	movs	r0, #0
1000a8d2:	e011      	b.n	1000a8f8 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a8d4:	480b      	ldr	r0, [pc, #44]	; (1000a904 <ble_pair_key_request_handler+0x108>)
1000a8d6:	4b0c      	ldr	r3, [pc, #48]	; (1000a908 <ble_pair_key_request_handler+0x10c>)
1000a8d8:	4798      	blx	r3
1000a8da:	4818      	ldr	r0, [pc, #96]	; (1000a93c <ble_pair_key_request_handler+0x140>)
1000a8dc:	4b0c      	ldr	r3, [pc, #48]	; (1000a910 <ble_pair_key_request_handler+0x114>)
1000a8de:	4798      	blx	r3
1000a8e0:	e7d8      	b.n	1000a894 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a8e2:	ab01      	add	r3, sp, #4
1000a8e4:	885a      	ldrh	r2, [r3, #2]
1000a8e6:	2380      	movs	r3, #128	; 0x80
1000a8e8:	005b      	lsls	r3, r3, #1
1000a8ea:	429a      	cmp	r2, r3
1000a8ec:	d0cc      	beq.n	1000a888 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a8ee:	ab01      	add	r3, sp, #4
1000a8f0:	789b      	ldrb	r3, [r3, #2]
1000a8f2:	2b01      	cmp	r3, #1
1000a8f4:	d0e6      	beq.n	1000a8c4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a8f6:	2000      	movs	r0, #0
}
1000a8f8:	b005      	add	sp, #20
1000a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8fc:	10012c30 	.word	0x10012c30
1000a900:	1001169b 	.word	0x1001169b
1000a904:	10012ab8 	.word	0x10012ab8
1000a908:	100117dd 	.word	0x100117dd
1000a90c:	10012ea4 	.word	0x10012ea4
1000a910:	100116bd 	.word	0x100116bd
1000a914:	1000b5c9 	.word	0x1000b5c9
1000a918:	10012ecc 	.word	0x10012ecc
1000a91c:	10012ed8 	.word	0x10012ed8
1000a920:	1000d385 	.word	0x1000d385
1000a924:	10012dc0 	.word	0x10012dc0
1000a928:	100116f1 	.word	0x100116f1
1000a92c:	10012eec 	.word	0x10012eec
1000a930:	1000dead 	.word	0x1000dead
1000a934:	10012f24 	.word	0x10012f24
1000a938:	10012f3c 	.word	0x10012f3c
1000a93c:	10012f58 	.word	0x10012f58

1000a940 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a942:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a944:	8805      	ldrh	r5, [r0, #0]
1000a946:	4b2f      	ldr	r3, [pc, #188]	; (1000aa04 <ble_encryption_request_handler+0xc4>)
1000a948:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a94a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a94c:	0010      	movs	r0, r2
1000a94e:	8919      	ldrh	r1, [r3, #8]
1000a950:	42a9      	cmp	r1, r5
1000a952:	d116      	bne.n	1000a982 <ble_encryption_request_handler+0x42>
1000a954:	0019      	movs	r1, r3
1000a956:	315e      	adds	r1, #94	; 0x5e
1000a958:	7809      	ldrb	r1, [r1, #0]
1000a95a:	2901      	cmp	r1, #1
1000a95c:	d911      	bls.n	1000a982 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a95e:	4929      	ldr	r1, [pc, #164]	; (1000aa04 <ble_encryption_request_handler+0xc4>)
1000a960:	0152      	lsls	r2, r2, #5
1000a962:	1a10      	subs	r0, r2, r0
1000a964:	0080      	lsls	r0, r0, #2
1000a966:	1808      	adds	r0, r1, r0
1000a968:	305e      	adds	r0, #94	; 0x5e
1000a96a:	2306      	movs	r3, #6
1000a96c:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a96e:	0162      	lsls	r2, r4, #5
1000a970:	1b13      	subs	r3, r2, r4
1000a972:	009b      	lsls	r3, r3, #2
1000a974:	18cb      	adds	r3, r1, r3
1000a976:	3370      	adds	r3, #112	; 0x70
1000a978:	881a      	ldrh	r2, [r3, #0]
1000a97a:	8873      	ldrh	r3, [r6, #2]
1000a97c:	429a      	cmp	r2, r3
1000a97e:	d113      	bne.n	1000a9a8 <ble_encryption_request_handler+0x68>
1000a980:	e006      	b.n	1000a990 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a982:	3401      	adds	r4, #1
1000a984:	b2e4      	uxtb	r4, r4
1000a986:	3201      	adds	r2, #1
1000a988:	337c      	adds	r3, #124	; 0x7c
1000a98a:	2c05      	cmp	r4, #5
1000a98c:	d1de      	bne.n	1000a94c <ble_encryption_request_handler+0xc>
1000a98e:	e00b      	b.n	1000a9a8 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a990:	0161      	lsls	r1, r4, #5
1000a992:	1b09      	subs	r1, r1, r4
1000a994:	0089      	lsls	r1, r1, #2
1000a996:	4b1b      	ldr	r3, [pc, #108]	; (1000aa04 <ble_encryption_request_handler+0xc4>)
1000a998:	1859      	adds	r1, r3, r1
1000a99a:	3172      	adds	r1, #114	; 0x72
1000a99c:	1d30      	adds	r0, r6, #4
1000a99e:	2208      	movs	r2, #8
1000a9a0:	4b19      	ldr	r3, [pc, #100]	; (1000aa08 <ble_encryption_request_handler+0xc8>)
1000a9a2:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a9a4:	2800      	cmp	r0, #0
1000a9a6:	d015      	beq.n	1000a9d4 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a9a8:	4f18      	ldr	r7, [pc, #96]	; (1000aa0c <ble_encryption_request_handler+0xcc>)
1000a9aa:	0038      	movs	r0, r7
1000a9ac:	4e18      	ldr	r6, [pc, #96]	; (1000aa10 <ble_encryption_request_handler+0xd0>)
1000a9ae:	47b0      	blx	r6
1000a9b0:	4818      	ldr	r0, [pc, #96]	; (1000aa14 <ble_encryption_request_handler+0xd4>)
1000a9b2:	4d19      	ldr	r5, [pc, #100]	; (1000aa18 <ble_encryption_request_handler+0xd8>)
1000a9b4:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a9b6:	0038      	movs	r0, r7
1000a9b8:	47b0      	blx	r6
1000a9ba:	4818      	ldr	r0, [pc, #96]	; (1000aa1c <ble_encryption_request_handler+0xdc>)
1000a9bc:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a9be:	0163      	lsls	r3, r4, #5
1000a9c0:	1b1c      	subs	r4, r3, r4
1000a9c2:	00a4      	lsls	r4, r4, #2
1000a9c4:	4b0f      	ldr	r3, [pc, #60]	; (1000aa04 <ble_encryption_request_handler+0xc4>)
1000a9c6:	191c      	adds	r4, r3, r4
1000a9c8:	8920      	ldrh	r0, [r4, #8]
1000a9ca:	2105      	movs	r1, #5
1000a9cc:	4b14      	ldr	r3, [pc, #80]	; (1000aa20 <ble_encryption_request_handler+0xe0>)
1000a9ce:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a9d0:	20e2      	movs	r0, #226	; 0xe2
1000a9d2:	e016      	b.n	1000aa02 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a9d4:	0162      	lsls	r2, r4, #5
1000a9d6:	1b13      	subs	r3, r2, r4
1000a9d8:	009b      	lsls	r3, r3, #2
1000a9da:	3360      	adds	r3, #96	; 0x60
1000a9dc:	4909      	ldr	r1, [pc, #36]	; (1000aa04 <ble_encryption_request_handler+0xc4>)
1000a9de:	185b      	adds	r3, r3, r1
1000a9e0:	1b14      	subs	r4, r2, r4
1000a9e2:	00a4      	lsls	r4, r4, #2
1000a9e4:	190c      	adds	r4, r1, r4
1000a9e6:	7d21      	ldrb	r1, [r4, #20]
1000a9e8:	8830      	ldrh	r0, [r6, #0]
1000a9ea:	2201      	movs	r2, #1
1000a9ec:	4c0d      	ldr	r4, [pc, #52]	; (1000aa24 <ble_encryption_request_handler+0xe4>)
1000a9ee:	47a0      	blx	r4
1000a9f0:	2800      	cmp	r0, #0
1000a9f2:	d006      	beq.n	1000aa02 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a9f4:	4805      	ldr	r0, [pc, #20]	; (1000aa0c <ble_encryption_request_handler+0xcc>)
1000a9f6:	4b06      	ldr	r3, [pc, #24]	; (1000aa10 <ble_encryption_request_handler+0xd0>)
1000a9f8:	4798      	blx	r3
1000a9fa:	480b      	ldr	r0, [pc, #44]	; (1000aa28 <ble_encryption_request_handler+0xe8>)
1000a9fc:	4b06      	ldr	r3, [pc, #24]	; (1000aa18 <ble_encryption_request_handler+0xd8>)
1000a9fe:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000aa00:	2000      	movs	r0, #0
}
1000aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aa04:	10015408 	.word	0x10015408
1000aa08:	1001167d 	.word	0x1001167d
1000aa0c:	10012ab8 	.word	0x10012ab8
1000aa10:	100117dd 	.word	0x100117dd
1000aa14:	10012f6c 	.word	0x10012f6c
1000aa18:	100116bd 	.word	0x100116bd
1000aa1c:	10012fa4 	.word	0x10012fa4
1000aa20:	1000d385 	.word	0x1000d385
1000aa24:	1000dfe1 	.word	0x1000dfe1
1000aa28:	10012ffc 	.word	0x10012ffc

1000aa2c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000aa2c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000aa2e:	2a00      	cmp	r2, #0
1000aa30:	d047      	beq.n	1000aac2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000aa32:	2906      	cmp	r1, #6
1000aa34:	d847      	bhi.n	1000aac6 <ble_mgr_events_callback_handler+0x9a>
1000aa36:	0089      	lsls	r1, r1, #2
1000aa38:	4b28      	ldr	r3, [pc, #160]	; (1000aadc <ble_mgr_events_callback_handler+0xb0>)
1000aa3a:	585b      	ldr	r3, [r3, r1]
1000aa3c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000aa3e:	4b28      	ldr	r3, [pc, #160]	; (1000aae0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000aa40:	2405      	movs	r4, #5
1000aa42:	e00a      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000aa44:	4b27      	ldr	r3, [pc, #156]	; (1000aae4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000aa46:	2401      	movs	r4, #1
			}
			break;
1000aa48:	e007      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000aa4a:	4b27      	ldr	r3, [pc, #156]	; (1000aae8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000aa4c:	2405      	movs	r4, #5
			}
			break;
1000aa4e:	e004      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000aa50:	4b26      	ldr	r3, [pc, #152]	; (1000aaec <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000aa52:	2401      	movs	r4, #1
			}
			break;
1000aa54:	e001      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000aa56:	4b26      	ldr	r3, [pc, #152]	; (1000aaf0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000aa58:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000aa5a:	2800      	cmp	r0, #0
1000aa5c:	d116      	bne.n	1000aa8c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aa5e:	6819      	ldr	r1, [r3, #0]
1000aa60:	2900      	cmp	r1, #0
1000aa62:	d10b      	bne.n	1000aa7c <ble_mgr_events_callback_handler+0x50>
1000aa64:	e006      	b.n	1000aa74 <ble_mgr_events_callback_handler+0x48>
1000aa66:	001d      	movs	r5, r3
1000aa68:	3304      	adds	r3, #4
1000aa6a:	1f18      	subs	r0, r3, #4
1000aa6c:	6800      	ldr	r0, [r0, #0]
1000aa6e:	2800      	cmp	r0, #0
1000aa70:	d106      	bne.n	1000aa80 <ble_mgr_events_callback_handler+0x54>
1000aa72:	e000      	b.n	1000aa76 <ble_mgr_events_callback_handler+0x4a>
1000aa74:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000aa76:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000aa78:	2101      	movs	r1, #1
						break;
1000aa7a:	e02c      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
1000aa7c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000aa7e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aa80:	3101      	adds	r1, #1
1000aa82:	b2c9      	uxtb	r1, r1
1000aa84:	42a1      	cmp	r1, r4
1000aa86:	d3ee      	bcc.n	1000aa66 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aa88:	2100      	movs	r1, #0
1000aa8a:	e024      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
1000aa8c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000aa8e:	2801      	cmp	r0, #1
1000aa90:	d121      	bne.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aa92:	6819      	ldr	r1, [r3, #0]
1000aa94:	428a      	cmp	r2, r1
1000aa96:	d10c      	bne.n	1000aab2 <ble_mgr_events_callback_handler+0x86>
1000aa98:	e006      	b.n	1000aaa8 <ble_mgr_events_callback_handler+0x7c>
1000aa9a:	001d      	movs	r5, r3
1000aa9c:	3304      	adds	r3, #4
1000aa9e:	1f18      	subs	r0, r3, #4
1000aaa0:	6800      	ldr	r0, [r0, #0]
1000aaa2:	4282      	cmp	r2, r0
1000aaa4:	d107      	bne.n	1000aab6 <ble_mgr_events_callback_handler+0x8a>
1000aaa6:	e000      	b.n	1000aaaa <ble_mgr_events_callback_handler+0x7e>
1000aaa8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000aaaa:	2300      	movs	r3, #0
1000aaac:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000aaae:	2101      	movs	r1, #1
						break;
1000aab0:	e011      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
1000aab2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000aab4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000aab6:	3101      	adds	r1, #1
1000aab8:	b2c9      	uxtb	r1, r1
1000aaba:	42a1      	cmp	r1, r4
1000aabc:	d3ed      	bcc.n	1000aa9a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000aabe:	2100      	movs	r1, #0
1000aac0:	e009      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000aac2:	2100      	movs	r1, #0
1000aac4:	e007      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000aac6:	2100      	movs	r1, #0
1000aac8:	e005      	b.n	1000aad6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000aaca:	4b0a      	ldr	r3, [pc, #40]	; (1000aaf4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000aacc:	2405      	movs	r4, #5
1000aace:	e7c4      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000aad0:	4b09      	ldr	r3, [pc, #36]	; (1000aaf8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000aad2:	2401      	movs	r4, #1
1000aad4:	e7c1      	b.n	1000aa5a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000aad6:	0008      	movs	r0, r1
1000aad8:	bd30      	pop	{r4, r5, pc}
1000aada:	46c0      	nop			; (mov r8, r8)
1000aadc:	10012b24 	.word	0x10012b24
1000aae0:	100153f4 	.word	0x100153f4
1000aae4:	100153f0 	.word	0x100153f0
1000aae8:	10015678 	.word	0x10015678
1000aaec:	10015c2c 	.word	0x10015c2c
1000aaf0:	1001568c 	.word	0x1001568c
1000aaf4:	100156a0 	.word	0x100156a0
1000aaf8:	100156e8 	.word	0x100156e8

1000aafc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aafe:	465f      	mov	r7, fp
1000ab00:	4656      	mov	r6, sl
1000ab02:	464d      	mov	r5, r9
1000ab04:	4644      	mov	r4, r8
1000ab06:	b4f0      	push	{r4, r5, r6, r7}
1000ab08:	b091      	sub	sp, #68	; 0x44
1000ab0a:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ab0c:	2400      	movs	r4, #0
1000ab0e:	4b7e      	ldr	r3, [pc, #504]	; (1000ad08 <ble_device_init+0x20c>)
1000ab10:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ab12:	2207      	movs	r2, #7
1000ab14:	2100      	movs	r1, #0
1000ab16:	487d      	ldr	r0, [pc, #500]	; (1000ad0c <ble_device_init+0x210>)
1000ab18:	4e7d      	ldr	r6, [pc, #500]	; (1000ad10 <ble_device_init+0x214>)
1000ab1a:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000ab1c:	2212      	movs	r2, #18
1000ab1e:	2100      	movs	r1, #0
1000ab20:	487c      	ldr	r0, [pc, #496]	; (1000ad14 <ble_device_init+0x218>)
1000ab22:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000ab24:	4a7c      	ldr	r2, [pc, #496]	; (1000ad18 <ble_device_init+0x21c>)
1000ab26:	2100      	movs	r1, #0
1000ab28:	487c      	ldr	r0, [pc, #496]	; (1000ad1c <ble_device_init+0x220>)
1000ab2a:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000ab2c:	4b7c      	ldr	r3, [pc, #496]	; (1000ad20 <ble_device_init+0x224>)
1000ab2e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000ab30:	22cd      	movs	r2, #205	; 0xcd
1000ab32:	0092      	lsls	r2, r2, #2
1000ab34:	2100      	movs	r1, #0
1000ab36:	487b      	ldr	r0, [pc, #492]	; (1000ad24 <ble_device_init+0x228>)
1000ab38:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000ab3a:	4b7b      	ldr	r3, [pc, #492]	; (1000ad28 <ble_device_init+0x22c>)
1000ab3c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000ab3e:	2283      	movs	r2, #131	; 0x83
1000ab40:	0092      	lsls	r2, r2, #2
1000ab42:	2100      	movs	r1, #0
1000ab44:	4879      	ldr	r0, [pc, #484]	; (1000ad2c <ble_device_init+0x230>)
1000ab46:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000ab48:	4b79      	ldr	r3, [pc, #484]	; (1000ad30 <ble_device_init+0x234>)
1000ab4a:	469b      	mov	fp, r3
1000ab4c:	2380      	movs	r3, #128	; 0x80
1000ab4e:	00db      	lsls	r3, r3, #3
1000ab50:	469a      	mov	sl, r3
1000ab52:	001a      	movs	r2, r3
1000ab54:	2100      	movs	r1, #0
1000ab56:	4658      	mov	r0, fp
1000ab58:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000ab5a:	4b76      	ldr	r3, [pc, #472]	; (1000ad34 <ble_device_init+0x238>)
1000ab5c:	4699      	mov	r9, r3
1000ab5e:	2380      	movs	r3, #128	; 0x80
1000ab60:	015b      	lsls	r3, r3, #5
1000ab62:	4698      	mov	r8, r3
1000ab64:	001a      	movs	r2, r3
1000ab66:	2100      	movs	r1, #0
1000ab68:	4648      	mov	r0, r9
1000ab6a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000ab6c:	4f72      	ldr	r7, [pc, #456]	; (1000ad38 <ble_device_init+0x23c>)
1000ab6e:	221c      	movs	r2, #28
1000ab70:	2100      	movs	r1, #0
1000ab72:	0038      	movs	r0, r7
1000ab74:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000ab76:	465b      	mov	r3, fp
1000ab78:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000ab7a:	4653      	mov	r3, sl
1000ab7c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000ab7e:	464b      	mov	r3, r9
1000ab80:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000ab82:	4643      	mov	r3, r8
1000ab84:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000ab86:	4b6d      	ldr	r3, [pc, #436]	; (1000ad3c <ble_device_init+0x240>)
1000ab88:	601c      	str	r4, [r3, #0]
1000ab8a:	605c      	str	r4, [r3, #4]
1000ab8c:	609c      	str	r4, [r3, #8]
1000ab8e:	60dc      	str	r4, [r3, #12]
1000ab90:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000ab92:	4b6b      	ldr	r3, [pc, #428]	; (1000ad40 <ble_device_init+0x244>)
1000ab94:	601c      	str	r4, [r3, #0]
1000ab96:	605c      	str	r4, [r3, #4]
1000ab98:	609c      	str	r4, [r3, #8]
1000ab9a:	60dc      	str	r4, [r3, #12]
1000ab9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000ab9e:	4b69      	ldr	r3, [pc, #420]	; (1000ad44 <ble_device_init+0x248>)
1000aba0:	601c      	str	r4, [r3, #0]
1000aba2:	605c      	str	r4, [r3, #4]
1000aba4:	609c      	str	r4, [r3, #8]
1000aba6:	60dc      	str	r4, [r3, #12]
1000aba8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000abaa:	4b67      	ldr	r3, [pc, #412]	; (1000ad48 <ble_device_init+0x24c>)
1000abac:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000abae:	4b67      	ldr	r3, [pc, #412]	; (1000ad4c <ble_device_init+0x250>)
1000abb0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000abb2:	4b67      	ldr	r3, [pc, #412]	; (1000ad50 <ble_device_init+0x254>)
1000abb4:	601c      	str	r4, [r3, #0]
1000abb6:	605c      	str	r4, [r3, #4]
1000abb8:	609c      	str	r4, [r3, #8]
1000abba:	60dc      	str	r4, [r3, #12]
1000abbc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000abbe:	4b65      	ldr	r3, [pc, #404]	; (1000ad54 <ble_device_init+0x258>)
1000abc0:	601c      	str	r4, [r3, #0]
1000abc2:	4c65      	ldr	r4, [pc, #404]	; (1000ad58 <ble_device_init+0x25c>)
1000abc4:	239b      	movs	r3, #155	; 0x9b
1000abc6:	009b      	lsls	r3, r3, #2
1000abc8:	4698      	mov	r8, r3
1000abca:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abcc:	4f50      	ldr	r7, [pc, #320]	; (1000ad10 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abce:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000abd0:	227c      	movs	r2, #124	; 0x7c
1000abd2:	2100      	movs	r1, #0
1000abd4:	0020      	movs	r0, r4
1000abd6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000abd8:	0023      	movs	r3, r4
1000abda:	335e      	adds	r3, #94	; 0x5e
1000abdc:	2200      	movs	r2, #0
1000abde:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000abe0:	7626      	strb	r6, [r4, #24]
1000abe2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000abe4:	45a0      	cmp	r8, r4
1000abe6:	d1f3      	bne.n	1000abd0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000abe8:	4b5c      	ldr	r3, [pc, #368]	; (1000ad5c <ble_device_init+0x260>)
1000abea:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000abec:	4c52      	ldr	r4, [pc, #328]	; (1000ad38 <ble_device_init+0x23c>)
1000abee:	4b4a      	ldr	r3, [pc, #296]	; (1000ad18 <ble_device_init+0x21c>)
1000abf0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000abf2:	4b4a      	ldr	r3, [pc, #296]	; (1000ad1c <ble_device_init+0x220>)
1000abf4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000abf6:	485a      	ldr	r0, [pc, #360]	; (1000ad60 <ble_device_init+0x264>)
1000abf8:	4b5a      	ldr	r3, [pc, #360]	; (1000ad64 <ble_device_init+0x268>)
1000abfa:	4798      	blx	r3
1000abfc:	485a      	ldr	r0, [pc, #360]	; (1000ad68 <ble_device_init+0x26c>)
1000abfe:	4b5b      	ldr	r3, [pc, #364]	; (1000ad6c <ble_device_init+0x270>)
1000ac00:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000ac02:	0020      	movs	r0, r4
1000ac04:	4b5a      	ldr	r3, [pc, #360]	; (1000ad70 <ble_device_init+0x274>)
1000ac06:	4798      	blx	r3
1000ac08:	2800      	cmp	r0, #0
1000ac0a:	d00b      	beq.n	1000ac24 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000ac0c:	4e54      	ldr	r6, [pc, #336]	; (1000ad60 <ble_device_init+0x264>)
1000ac0e:	0030      	movs	r0, r6
1000ac10:	4d54      	ldr	r5, [pc, #336]	; (1000ad64 <ble_device_init+0x268>)
1000ac12:	47a8      	blx	r5
1000ac14:	4857      	ldr	r0, [pc, #348]	; (1000ad74 <ble_device_init+0x278>)
1000ac16:	4c55      	ldr	r4, [pc, #340]	; (1000ad6c <ble_device_init+0x270>)
1000ac18:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000ac1a:	0030      	movs	r0, r6
1000ac1c:	47a8      	blx	r5
1000ac1e:	4856      	ldr	r0, [pc, #344]	; (1000ad78 <ble_device_init+0x27c>)
1000ac20:	47a0      	blx	r4
1000ac22:	e7fe      	b.n	1000ac22 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ac24:	4a55      	ldr	r2, [pc, #340]	; (1000ad7c <ble_device_init+0x280>)
1000ac26:	2100      	movs	r1, #0
1000ac28:	2000      	movs	r0, #0
1000ac2a:	4c55      	ldr	r4, [pc, #340]	; (1000ad80 <ble_device_init+0x284>)
1000ac2c:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ac2e:	4a55      	ldr	r2, [pc, #340]	; (1000ad84 <ble_device_init+0x288>)
1000ac30:	2102      	movs	r1, #2
1000ac32:	2000      	movs	r0, #0
1000ac34:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ac36:	2109      	movs	r1, #9
1000ac38:	4853      	ldr	r0, [pc, #332]	; (1000ad88 <ble_device_init+0x28c>)
1000ac3a:	4b54      	ldr	r3, [pc, #336]	; (1000ad8c <ble_device_init+0x290>)
1000ac3c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ac3e:	2800      	cmp	r0, #0
1000ac40:	d005      	beq.n	1000ac4e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ac42:	4847      	ldr	r0, [pc, #284]	; (1000ad60 <ble_device_init+0x264>)
1000ac44:	4b47      	ldr	r3, [pc, #284]	; (1000ad64 <ble_device_init+0x268>)
1000ac46:	4798      	blx	r3
1000ac48:	4851      	ldr	r0, [pc, #324]	; (1000ad90 <ble_device_init+0x294>)
1000ac4a:	4b48      	ldr	r3, [pc, #288]	; (1000ad6c <ble_device_init+0x270>)
1000ac4c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ac4e:	2207      	movs	r2, #7
1000ac50:	4950      	ldr	r1, [pc, #320]	; (1000ad94 <ble_device_init+0x298>)
1000ac52:	3108      	adds	r1, #8
1000ac54:	a804      	add	r0, sp, #16
1000ac56:	4b50      	ldr	r3, [pc, #320]	; (1000ad98 <ble_device_init+0x29c>)
1000ac58:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ac5a:	2226      	movs	r2, #38	; 0x26
1000ac5c:	2100      	movs	r1, #0
1000ac5e:	a806      	add	r0, sp, #24
1000ac60:	4b2b      	ldr	r3, [pc, #172]	; (1000ad10 <ble_device_init+0x214>)
1000ac62:	4798      	blx	r3
	
	if (addr == NULL)
1000ac64:	2d00      	cmp	r5, #0
1000ac66:	d10c      	bne.n	1000ac82 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac68:	a804      	add	r0, sp, #16
1000ac6a:	4b4c      	ldr	r3, [pc, #304]	; (1000ad9c <ble_device_init+0x2a0>)
1000ac6c:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac6e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ac70:	2800      	cmp	r0, #0
1000ac72:	d006      	beq.n	1000ac82 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000ac74:	483a      	ldr	r0, [pc, #232]	; (1000ad60 <ble_device_init+0x264>)
1000ac76:	4b3b      	ldr	r3, [pc, #236]	; (1000ad64 <ble_device_init+0x268>)
1000ac78:	4798      	blx	r3
1000ac7a:	4849      	ldr	r0, [pc, #292]	; (1000ada0 <ble_device_init+0x2a4>)
1000ac7c:	4b3b      	ldr	r3, [pc, #236]	; (1000ad6c <ble_device_init+0x270>)
1000ac7e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ac80:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ac82:	4837      	ldr	r0, [pc, #220]	; (1000ad60 <ble_device_init+0x264>)
1000ac84:	4b37      	ldr	r3, [pc, #220]	; (1000ad64 <ble_device_init+0x268>)
1000ac86:	4798      	blx	r3
1000ac88:	792b      	ldrb	r3, [r5, #4]
1000ac8a:	796a      	ldrb	r2, [r5, #5]
1000ac8c:	79a9      	ldrb	r1, [r5, #6]
1000ac8e:	7828      	ldrb	r0, [r5, #0]
1000ac90:	9003      	str	r0, [sp, #12]
1000ac92:	7868      	ldrb	r0, [r5, #1]
1000ac94:	9002      	str	r0, [sp, #8]
1000ac96:	78a8      	ldrb	r0, [r5, #2]
1000ac98:	9001      	str	r0, [sp, #4]
1000ac9a:	78e8      	ldrb	r0, [r5, #3]
1000ac9c:	9000      	str	r0, [sp, #0]
1000ac9e:	4841      	ldr	r0, [pc, #260]	; (1000ada4 <ble_device_init+0x2a8>)
1000aca0:	4c32      	ldr	r4, [pc, #200]	; (1000ad6c <ble_device_init+0x270>)
1000aca2:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000aca4:	ac06      	add	r4, sp, #24
1000aca6:	230a      	movs	r3, #10
1000aca8:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000acaa:	4b3f      	ldr	r3, [pc, #252]	; (1000ada8 <ble_device_init+0x2ac>)
1000acac:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000acae:	2207      	movs	r2, #7
1000acb0:	0029      	movs	r1, r5
1000acb2:	a807      	add	r0, sp, #28
1000acb4:	4b38      	ldr	r3, [pc, #224]	; (1000ad98 <ble_device_init+0x29c>)
1000acb6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000acb8:	2300      	movs	r3, #0
1000acba:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000acbc:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000acbe:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000acc0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000acc2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000acc4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000acc6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000acc8:	2380      	movs	r3, #128	; 0x80
1000acca:	009b      	lsls	r3, r3, #2
1000accc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000acce:	0020      	movs	r0, r4
1000acd0:	4b36      	ldr	r3, [pc, #216]	; (1000adac <ble_device_init+0x2b0>)
1000acd2:	4798      	blx	r3
1000acd4:	2800      	cmp	r0, #0
1000acd6:	d005      	beq.n	1000ace4 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000acd8:	4821      	ldr	r0, [pc, #132]	; (1000ad60 <ble_device_init+0x264>)
1000acda:	4b22      	ldr	r3, [pc, #136]	; (1000ad64 <ble_device_init+0x268>)
1000acdc:	4798      	blx	r3
1000acde:	4834      	ldr	r0, [pc, #208]	; (1000adb0 <ble_device_init+0x2b4>)
1000ace0:	4b22      	ldr	r3, [pc, #136]	; (1000ad6c <ble_device_init+0x270>)
1000ace2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000ace4:	0028      	movs	r0, r5
1000ace6:	4b33      	ldr	r3, [pc, #204]	; (1000adb4 <ble_device_init+0x2b8>)
1000ace8:	4798      	blx	r3
1000acea:	2800      	cmp	r0, #0
1000acec:	d005      	beq.n	1000acfa <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000acee:	481c      	ldr	r0, [pc, #112]	; (1000ad60 <ble_device_init+0x264>)
1000acf0:	4b1c      	ldr	r3, [pc, #112]	; (1000ad64 <ble_device_init+0x268>)
1000acf2:	4798      	blx	r3
1000acf4:	4830      	ldr	r0, [pc, #192]	; (1000adb8 <ble_device_init+0x2bc>)
1000acf6:	4b1d      	ldr	r3, [pc, #116]	; (1000ad6c <ble_device_init+0x270>)
1000acf8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000acfa:	b011      	add	sp, #68	; 0x44
1000acfc:	bc3c      	pop	{r2, r3, r4, r5}
1000acfe:	4690      	mov	r8, r2
1000ad00:	4699      	mov	r9, r3
1000ad02:	46a2      	mov	sl, r4
1000ad04:	46ab      	mov	fp, r5
1000ad06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ad08:	100141dc 	.word	0x100141dc
1000ad0c:	100141e4 	.word	0x100141e4
1000ad10:	100116ad 	.word	0x100116ad
1000ad14:	100156b4 	.word	0x100156b4
1000ad18:	000004e2 	.word	0x000004e2
1000ad1c:	10013cfc 	.word	0x10013cfc
1000ad20:	100141e0 	.word	0x100141e0
1000ad24:	100156ec 	.word	0x100156ec
1000ad28:	100156e4 	.word	0x100156e4
1000ad2c:	10015a20 	.word	0x10015a20
1000ad30:	100138fc 	.word	0x100138fc
1000ad34:	100141ec 	.word	0x100141ec
1000ad38:	100156c8 	.word	0x100156c8
1000ad3c:	1001568c 	.word	0x1001568c
1000ad40:	100156a0 	.word	0x100156a0
1000ad44:	100153f4 	.word	0x100153f4
1000ad48:	100156e8 	.word	0x100156e8
1000ad4c:	100153f0 	.word	0x100153f0
1000ad50:	10015678 	.word	0x10015678
1000ad54:	10015c2c 	.word	0x10015c2c
1000ad58:	10015408 	.word	0x10015408
1000ad5c:	10015674 	.word	0x10015674
1000ad60:	10012ab8 	.word	0x10012ab8
1000ad64:	100117dd 	.word	0x100117dd
1000ad68:	1001301c 	.word	0x1001301c
1000ad6c:	100116bd 	.word	0x100116bd
1000ad70:	1000cf9d 	.word	0x1000cf9d
1000ad74:	10013030 	.word	0x10013030
1000ad78:	10013050 	.word	0x10013050
1000ad7c:	10013288 	.word	0x10013288
1000ad80:	1000aa2d 	.word	0x1000aa2d
1000ad84:	10012c4c 	.word	0x10012c4c
1000ad88:	1001308c 	.word	0x1001308c
1000ad8c:	1000ceb5 	.word	0x1000ceb5
1000ad90:	10013098 	.word	0x10013098
1000ad94:	10012c30 	.word	0x10012c30
1000ad98:	1001169b 	.word	0x1001169b
1000ad9c:	1000cee9 	.word	0x1000cee9
1000ada0:	100130b0 	.word	0x100130b0
1000ada4:	100130c8 	.word	0x100130c8
1000ada8:	00003a98 	.word	0x00003a98
1000adac:	1000cf0d 	.word	0x1000cf0d
1000adb0:	10013100 	.word	0x10013100
1000adb4:	1000d151 	.word	0x1000d151
1000adb8:	10013124 	.word	0x10013124

1000adbc <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000adbc:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000adbe:	2201      	movs	r2, #1
1000adc0:	2101      	movs	r1, #1
1000adc2:	4b06      	ldr	r3, [pc, #24]	; (1000addc <ble_send_slave_sec_request+0x20>)
1000adc4:	4798      	blx	r3
1000adc6:	2800      	cmp	r0, #0
1000adc8:	d006      	beq.n	1000add8 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000adca:	4805      	ldr	r0, [pc, #20]	; (1000ade0 <ble_send_slave_sec_request+0x24>)
1000adcc:	4b05      	ldr	r3, [pc, #20]	; (1000ade4 <ble_send_slave_sec_request+0x28>)
1000adce:	4798      	blx	r3
1000add0:	4805      	ldr	r0, [pc, #20]	; (1000ade8 <ble_send_slave_sec_request+0x2c>)
1000add2:	4b06      	ldr	r3, [pc, #24]	; (1000adec <ble_send_slave_sec_request+0x30>)
1000add4:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000add6:	20e2      	movs	r0, #226	; 0xe2
}
1000add8:	bd10      	pop	{r4, pc}
1000adda:	46c0      	nop			; (mov r8, r8)
1000addc:	1000df29 	.word	0x1000df29
1000ade0:	10012ab8 	.word	0x10012ab8
1000ade4:	100117dd 	.word	0x100117dd
1000ade8:	10013160 	.word	0x10013160
1000adec:	100116bd 	.word	0x100116bd

1000adf0 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000adf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adf2:	465f      	mov	r7, fp
1000adf4:	464e      	mov	r6, r9
1000adf6:	4645      	mov	r5, r8
1000adf8:	b4e0      	push	{r5, r6, r7}
1000adfa:	b09a      	sub	sp, #104	; 0x68
1000adfc:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000adfe:	7a86      	ldrb	r6, [r0, #10]
1000ae00:	2e00      	cmp	r6, #0
1000ae02:	d000      	beq.n	1000ae06 <ble_connected_state_handler+0x16>
1000ae04:	e0c6      	b.n	1000af94 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000ae06:	4875      	ldr	r0, [pc, #468]	; (1000afdc <ble_connected_state_handler+0x1ec>)
1000ae08:	4f75      	ldr	r7, [pc, #468]	; (1000afe0 <ble_connected_state_handler+0x1f0>)
1000ae0a:	47b8      	blx	r7
1000ae0c:	792b      	ldrb	r3, [r5, #4]
1000ae0e:	796a      	ldrb	r2, [r5, #5]
1000ae10:	79a9      	ldrb	r1, [r5, #6]
1000ae12:	7868      	ldrb	r0, [r5, #1]
1000ae14:	9002      	str	r0, [sp, #8]
1000ae16:	78a8      	ldrb	r0, [r5, #2]
1000ae18:	9001      	str	r0, [sp, #4]
1000ae1a:	78e8      	ldrb	r0, [r5, #3]
1000ae1c:	9000      	str	r0, [sp, #0]
1000ae1e:	4871      	ldr	r0, [pc, #452]	; (1000afe4 <ble_connected_state_handler+0x1f4>)
1000ae20:	4c71      	ldr	r4, [pc, #452]	; (1000afe8 <ble_connected_state_handler+0x1f8>)
1000ae22:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ae24:	486d      	ldr	r0, [pc, #436]	; (1000afdc <ble_connected_state_handler+0x1ec>)
1000ae26:	47b8      	blx	r7
1000ae28:	8929      	ldrh	r1, [r5, #8]
1000ae2a:	4870      	ldr	r0, [pc, #448]	; (1000afec <ble_connected_state_handler+0x1fc>)
1000ae2c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ae2e:	2212      	movs	r2, #18
1000ae30:	0029      	movs	r1, r5
1000ae32:	486f      	ldr	r0, [pc, #444]	; (1000aff0 <ble_connected_state_handler+0x200>)
1000ae34:	4b6f      	ldr	r3, [pc, #444]	; (1000aff4 <ble_connected_state_handler+0x204>)
1000ae36:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ae38:	9504      	str	r5, [sp, #16]
1000ae3a:	2207      	movs	r2, #7
1000ae3c:	0029      	movs	r1, r5
1000ae3e:	486e      	ldr	r0, [pc, #440]	; (1000aff8 <ble_connected_state_handler+0x208>)
1000ae40:	4b6e      	ldr	r3, [pc, #440]	; (1000affc <ble_connected_state_handler+0x20c>)
1000ae42:	4798      	blx	r3
1000ae44:	2800      	cmp	r0, #0
1000ae46:	d100      	bne.n	1000ae4a <ble_connected_state_handler+0x5a>
1000ae48:	e0ad      	b.n	1000afa6 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ae4a:	782b      	ldrb	r3, [r5, #0]
1000ae4c:	2b02      	cmp	r3, #2
1000ae4e:	d000      	beq.n	1000ae52 <ble_connected_state_handler+0x62>
1000ae50:	e0a9      	b.n	1000afa6 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ae52:	2250      	movs	r2, #80	; 0x50
1000ae54:	2100      	movs	r1, #0
1000ae56:	a806      	add	r0, sp, #24
1000ae58:	4b69      	ldr	r3, [pc, #420]	; (1000b000 <ble_connected_state_handler+0x210>)
1000ae5a:	4798      	blx	r3
1000ae5c:	4f69      	ldr	r7, [pc, #420]	; (1000b004 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ae5e:	2300      	movs	r3, #0
1000ae60:	e00b      	b.n	1000ae7a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ae62:	1c59      	adds	r1, r3, #1
1000ae64:	7814      	ldrb	r4, [r2, #0]
1000ae66:	a806      	add	r0, sp, #24
1000ae68:	54c4      	strb	r4, [r0, r3]
1000ae6a:	3201      	adds	r2, #1
1000ae6c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ae6e:	42b3      	cmp	r3, r6
1000ae70:	d1f7      	bne.n	1000ae62 <ble_connected_state_handler+0x72>
1000ae72:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ae74:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ae76:	2b50      	cmp	r3, #80	; 0x50
1000ae78:	d004      	beq.n	1000ae84 <ble_connected_state_handler+0x94>
1000ae7a:	001e      	movs	r6, r3
1000ae7c:	3610      	adds	r6, #16
1000ae7e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ae80:	003a      	movs	r2, r7
1000ae82:	e7ee      	b.n	1000ae62 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ae84:	aa06      	add	r2, sp, #24
1000ae86:	0029      	movs	r1, r5
1000ae88:	2005      	movs	r0, #5
1000ae8a:	4b5f      	ldr	r3, [pc, #380]	; (1000b008 <ble_connected_state_handler+0x218>)
1000ae8c:	4798      	blx	r3
1000ae8e:	1e06      	subs	r6, r0, #0
1000ae90:	d100      	bne.n	1000ae94 <ble_connected_state_handler+0xa4>
1000ae92:	e09c      	b.n	1000afce <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ae94:	4851      	ldr	r0, [pc, #324]	; (1000afdc <ble_connected_state_handler+0x1ec>)
1000ae96:	4b52      	ldr	r3, [pc, #328]	; (1000afe0 <ble_connected_state_handler+0x1f0>)
1000ae98:	4798      	blx	r3
1000ae9a:	485c      	ldr	r0, [pc, #368]	; (1000b00c <ble_connected_state_handler+0x21c>)
1000ae9c:	4b52      	ldr	r3, [pc, #328]	; (1000afe8 <ble_connected_state_handler+0x1f8>)
1000ae9e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000aea0:	26e2      	movs	r6, #226	; 0xe2
1000aea2:	e094      	b.n	1000afce <ble_connected_state_handler+0x1de>
1000aea4:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aea6:	9405      	str	r4, [sp, #20]
1000aea8:	2207      	movs	r2, #7
1000aeaa:	9904      	ldr	r1, [sp, #16]
1000aeac:	4648      	mov	r0, r9
1000aeae:	47d8      	blx	fp
1000aeb0:	2800      	cmp	r0, #0
1000aeb2:	d109      	bne.n	1000aec8 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000aeb4:	9a05      	ldr	r2, [sp, #20]
1000aeb6:	0153      	lsls	r3, r2, #5
1000aeb8:	1a9b      	subs	r3, r3, r2
1000aeba:	009a      	lsls	r2, r3, #2
1000aebc:	4b54      	ldr	r3, [pc, #336]	; (1000b010 <ble_connected_state_handler+0x220>)
1000aebe:	189b      	adds	r3, r3, r2
1000aec0:	335e      	adds	r3, #94	; 0x5e
1000aec2:	2202      	movs	r2, #2
1000aec4:	701a      	strb	r2, [r3, #0]
1000aec6:	e02b      	b.n	1000af20 <ble_connected_state_handler+0x130>
1000aec8:	3401      	adds	r4, #1
1000aeca:	237c      	movs	r3, #124	; 0x7c
1000aecc:	469c      	mov	ip, r3
1000aece:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aed0:	2c05      	cmp	r4, #5
1000aed2:	d1e7      	bne.n	1000aea4 <ble_connected_state_handler+0xb4>
1000aed4:	e072      	b.n	1000afbc <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aed6:	001c      	movs	r4, r3
1000aed8:	7811      	ldrb	r1, [r2, #0]
1000aeda:	2900      	cmp	r1, #0
1000aedc:	d11a      	bne.n	1000af14 <ble_connected_state_handler+0x124>
1000aede:	e001      	b.n	1000aee4 <ble_connected_state_handler+0xf4>
1000aee0:	2400      	movs	r4, #0
1000aee2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000aee4:	0163      	lsls	r3, r4, #5
1000aee6:	4699      	mov	r9, r3
1000aee8:	1b18      	subs	r0, r3, r4
1000aeea:	0080      	lsls	r0, r0, #2
1000aeec:	4b48      	ldr	r3, [pc, #288]	; (1000b010 <ble_connected_state_handler+0x220>)
1000aeee:	4698      	mov	r8, r3
1000aef0:	4440      	add	r0, r8
1000aef2:	2212      	movs	r2, #18
1000aef4:	0029      	movs	r1, r5
1000aef6:	4b3f      	ldr	r3, [pc, #252]	; (1000aff4 <ble_connected_state_handler+0x204>)
1000aef8:	4798      	blx	r3
						ble_device_count++;
1000aefa:	4a46      	ldr	r2, [pc, #280]	; (1000b014 <ble_connected_state_handler+0x224>)
1000aefc:	7813      	ldrb	r3, [r2, #0]
1000aefe:	3301      	adds	r3, #1
1000af00:	b2db      	uxtb	r3, r3
1000af02:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000af04:	464b      	mov	r3, r9
1000af06:	1b1b      	subs	r3, r3, r4
1000af08:	009b      	lsls	r3, r3, #2
1000af0a:	4443      	add	r3, r8
1000af0c:	335e      	adds	r3, #94	; 0x5e
1000af0e:	2202      	movs	r2, #2
1000af10:	701a      	strb	r2, [r3, #0]
						break;
1000af12:	e005      	b.n	1000af20 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af14:	1c79      	adds	r1, r7, #1
1000af16:	b2cf      	uxtb	r7, r1
1000af18:	3301      	adds	r3, #1
1000af1a:	327c      	adds	r2, #124	; 0x7c
1000af1c:	2f05      	cmp	r7, #5
1000af1e:	d1da      	bne.n	1000aed6 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000af20:	2207      	movs	r2, #7
1000af22:	0029      	movs	r1, r5
1000af24:	4834      	ldr	r0, [pc, #208]	; (1000aff8 <ble_connected_state_handler+0x208>)
1000af26:	4b35      	ldr	r3, [pc, #212]	; (1000affc <ble_connected_state_handler+0x20c>)
1000af28:	4798      	blx	r3
1000af2a:	2800      	cmp	r0, #0
1000af2c:	d10c      	bne.n	1000af48 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000af2e:	017b      	lsls	r3, r7, #5
1000af30:	1bdb      	subs	r3, r3, r7
1000af32:	009b      	lsls	r3, r3, #2
1000af34:	4a36      	ldr	r2, [pc, #216]	; (1000b010 <ble_connected_state_handler+0x220>)
1000af36:	18d3      	adds	r3, r2, r3
1000af38:	2205      	movs	r2, #5
1000af3a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000af3c:	3202      	adds	r2, #2
1000af3e:	2100      	movs	r1, #0
1000af40:	482d      	ldr	r0, [pc, #180]	; (1000aff8 <ble_connected_state_handler+0x208>)
1000af42:	4b2f      	ldr	r3, [pc, #188]	; (1000b000 <ble_connected_state_handler+0x210>)
1000af44:	4798      	blx	r3
1000af46:	e042      	b.n	1000afce <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000af48:	4b31      	ldr	r3, [pc, #196]	; (1000b010 <ble_connected_state_handler+0x220>)
1000af4a:	4698      	mov	r8, r3
1000af4c:	017c      	lsls	r4, r7, #5
1000af4e:	1be3      	subs	r3, r4, r7
1000af50:	009b      	lsls	r3, r3, #2
1000af52:	4443      	add	r3, r8
1000af54:	220a      	movs	r2, #10
1000af56:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000af58:	3a03      	subs	r2, #3
1000af5a:	2100      	movs	r1, #0
1000af5c:	4826      	ldr	r0, [pc, #152]	; (1000aff8 <ble_connected_state_handler+0x208>)
1000af5e:	4b28      	ldr	r3, [pc, #160]	; (1000b000 <ble_connected_state_handler+0x210>)
1000af60:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000af62:	1be4      	subs	r4, r4, r7
1000af64:	00a4      	lsls	r4, r4, #2
1000af66:	4444      	add	r4, r8
1000af68:	7ca3      	ldrb	r3, [r4, #18]
1000af6a:	2b0a      	cmp	r3, #10
1000af6c:	d12f      	bne.n	1000afce <ble_connected_state_handler+0x1de>
1000af6e:	e00d      	b.n	1000af8c <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000af70:	481a      	ldr	r0, [pc, #104]	; (1000afdc <ble_connected_state_handler+0x1ec>)
1000af72:	4b1b      	ldr	r3, [pc, #108]	; (1000afe0 <ble_connected_state_handler+0x1f0>)
1000af74:	4798      	blx	r3
1000af76:	4b27      	ldr	r3, [pc, #156]	; (1000b014 <ble_connected_state_handler+0x224>)
1000af78:	7819      	ldrb	r1, [r3, #0]
1000af7a:	b2c9      	uxtb	r1, r1
1000af7c:	4826      	ldr	r0, [pc, #152]	; (1000b018 <ble_connected_state_handler+0x228>)
1000af7e:	4b1a      	ldr	r3, [pc, #104]	; (1000afe8 <ble_connected_state_handler+0x1f8>)
1000af80:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000af82:	8928      	ldrh	r0, [r5, #8]
1000af84:	2113      	movs	r1, #19
1000af86:	4b25      	ldr	r3, [pc, #148]	; (1000b01c <ble_connected_state_handler+0x22c>)
1000af88:	4798      	blx	r3
1000af8a:	e020      	b.n	1000afce <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000af8c:	8928      	ldrh	r0, [r5, #8]
1000af8e:	4b24      	ldr	r3, [pc, #144]	; (1000b020 <ble_connected_state_handler+0x230>)
1000af90:	4798      	blx	r3
1000af92:	e01c      	b.n	1000afce <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000af94:	4811      	ldr	r0, [pc, #68]	; (1000afdc <ble_connected_state_handler+0x1ec>)
1000af96:	4b12      	ldr	r3, [pc, #72]	; (1000afe0 <ble_connected_state_handler+0x1f0>)
1000af98:	4798      	blx	r3
1000af9a:	7aa9      	ldrb	r1, [r5, #10]
1000af9c:	4821      	ldr	r0, [pc, #132]	; (1000b024 <ble_connected_state_handler+0x234>)
1000af9e:	4b12      	ldr	r3, [pc, #72]	; (1000afe8 <ble_connected_state_handler+0x1f8>)
1000afa0:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000afa2:	2600      	movs	r6, #0
1000afa4:	e013      	b.n	1000afce <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000afa6:	4b1b      	ldr	r3, [pc, #108]	; (1000b014 <ble_connected_state_handler+0x224>)
1000afa8:	781b      	ldrb	r3, [r3, #0]
1000afaa:	b2db      	uxtb	r3, r3
1000afac:	2b04      	cmp	r3, #4
1000afae:	d8df      	bhi.n	1000af70 <ble_connected_state_handler+0x180>
1000afb0:	4b17      	ldr	r3, [pc, #92]	; (1000b010 <ble_connected_state_handler+0x220>)
1000afb2:	4699      	mov	r9, r3
1000afb4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000afb6:	4b11      	ldr	r3, [pc, #68]	; (1000affc <ble_connected_state_handler+0x20c>)
1000afb8:	469b      	mov	fp, r3
1000afba:	e773      	b.n	1000aea4 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000afbc:	235e      	movs	r3, #94	; 0x5e
1000afbe:	4a14      	ldr	r2, [pc, #80]	; (1000b010 <ble_connected_state_handler+0x220>)
1000afc0:	5cd3      	ldrb	r3, [r2, r3]
1000afc2:	2b00      	cmp	r3, #0
1000afc4:	d08c      	beq.n	1000aee0 <ble_connected_state_handler+0xf0>
1000afc6:	4a18      	ldr	r2, [pc, #96]	; (1000b028 <ble_connected_state_handler+0x238>)
1000afc8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afca:	2701      	movs	r7, #1
1000afcc:	e783      	b.n	1000aed6 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000afce:	0030      	movs	r0, r6
1000afd0:	b01a      	add	sp, #104	; 0x68
1000afd2:	bc1c      	pop	{r2, r3, r4}
1000afd4:	4690      	mov	r8, r2
1000afd6:	4699      	mov	r9, r3
1000afd8:	46a3      	mov	fp, r4
1000afda:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afdc:	10012ab8 	.word	0x10012ab8
1000afe0:	100117dd 	.word	0x100117dd
1000afe4:	10013180 	.word	0x10013180
1000afe8:	100116bd 	.word	0x100116bd
1000afec:	100131c4 	.word	0x100131c4
1000aff0:	100156b4 	.word	0x100156b4
1000aff4:	1001169b 	.word	0x1001169b
1000aff8:	100141e4 	.word	0x100141e4
1000affc:	1001167d 	.word	0x1001167d
1000b000:	100116ad 	.word	0x100116ad
1000b004:	1001544e 	.word	0x1001544e
1000b008:	1000d3b1 	.word	0x1000d3b1
1000b00c:	100131dc 	.word	0x100131dc
1000b010:	10015408 	.word	0x10015408
1000b014:	10015674 	.word	0x10015674
1000b018:	10013200 	.word	0x10013200
1000b01c:	1000d385 	.word	0x1000d385
1000b020:	1000adbd 	.word	0x1000adbd
1000b024:	1001323c 	.word	0x1001323c
1000b028:	100154e2 	.word	0x100154e2

1000b02c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000b02c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b02e:	4647      	mov	r7, r8
1000b030:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000b032:	7803      	ldrb	r3, [r0, #0]
1000b034:	2b00      	cmp	r3, #0
1000b036:	d141      	bne.n	1000b0bc <ble_resolv_rand_addr_handler+0x90>
1000b038:	4d2f      	ldr	r5, [pc, #188]	; (1000b0f8 <ble_resolv_rand_addr_handler+0xcc>)
1000b03a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000b03c:	1c46      	adds	r6, r0, #1
1000b03e:	4f2f      	ldr	r7, [pc, #188]	; (1000b0fc <ble_resolv_rand_addr_handler+0xd0>)
1000b040:	2210      	movs	r2, #16
1000b042:	0029      	movs	r1, r5
1000b044:	0030      	movs	r0, r6
1000b046:	47b8      	blx	r7
1000b048:	2800      	cmp	r0, #0
1000b04a:	d03f      	beq.n	1000b0cc <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b04c:	3401      	adds	r4, #1
1000b04e:	b2e4      	uxtb	r4, r4
1000b050:	357c      	adds	r5, #124	; 0x7c
1000b052:	2c05      	cmp	r4, #5
1000b054:	d1f4      	bne.n	1000b040 <ble_resolv_rand_addr_handler+0x14>
1000b056:	e031      	b.n	1000b0bc <ble_resolv_rand_addr_handler+0x90>
1000b058:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b05a:	001c      	movs	r4, r3
1000b05c:	7811      	ldrb	r1, [r2, #0]
1000b05e:	2900      	cmp	r1, #0
1000b060:	d122      	bne.n	1000b0a8 <ble_resolv_rand_addr_handler+0x7c>
1000b062:	e001      	b.n	1000b068 <ble_resolv_rand_addr_handler+0x3c>
1000b064:	2400      	movs	r4, #0
1000b066:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b068:	4b25      	ldr	r3, [pc, #148]	; (1000b100 <ble_resolv_rand_addr_handler+0xd4>)
1000b06a:	4698      	mov	r8, r3
1000b06c:	0166      	lsls	r6, r4, #5
1000b06e:	1b37      	subs	r7, r6, r4
1000b070:	00bf      	lsls	r7, r7, #2
1000b072:	4447      	add	r7, r8
1000b074:	2212      	movs	r2, #18
1000b076:	4923      	ldr	r1, [pc, #140]	; (1000b104 <ble_resolv_rand_addr_handler+0xd8>)
1000b078:	0038      	movs	r0, r7
1000b07a:	4b23      	ldr	r3, [pc, #140]	; (1000b108 <ble_resolv_rand_addr_handler+0xdc>)
1000b07c:	4798      	blx	r3
				ble_device_count++;
1000b07e:	4a23      	ldr	r2, [pc, #140]	; (1000b10c <ble_resolv_rand_addr_handler+0xe0>)
1000b080:	7813      	ldrb	r3, [r2, #0]
1000b082:	3301      	adds	r3, #1
1000b084:	b2db      	uxtb	r3, r3
1000b086:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b088:	375e      	adds	r7, #94	; 0x5e
1000b08a:	2302      	movs	r3, #2
1000b08c:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b08e:	1b34      	subs	r4, r6, r4
1000b090:	00a4      	lsls	r4, r4, #2
1000b092:	4444      	add	r4, r8
1000b094:	3308      	adds	r3, #8
1000b096:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000b098:	016b      	lsls	r3, r5, #5
1000b09a:	1b5d      	subs	r5, r3, r5
1000b09c:	00ad      	lsls	r5, r5, #2
1000b09e:	4445      	add	r5, r8
1000b0a0:	7cab      	ldrb	r3, [r5, #18]
1000b0a2:	2b0a      	cmp	r3, #10
1000b0a4:	d123      	bne.n	1000b0ee <ble_resolv_rand_addr_handler+0xc2>
1000b0a6:	e004      	b.n	1000b0b2 <ble_resolv_rand_addr_handler+0x86>
1000b0a8:	3301      	adds	r3, #1
1000b0aa:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b0ac:	2b05      	cmp	r3, #5
1000b0ae:	d1d3      	bne.n	1000b058 <ble_resolv_rand_addr_handler+0x2c>
1000b0b0:	e01d      	b.n	1000b0ee <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000b0b2:	4b14      	ldr	r3, [pc, #80]	; (1000b104 <ble_resolv_rand_addr_handler+0xd8>)
1000b0b4:	8918      	ldrh	r0, [r3, #8]
1000b0b6:	4b16      	ldr	r3, [pc, #88]	; (1000b110 <ble_resolv_rand_addr_handler+0xe4>)
1000b0b8:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000b0ba:	e018      	b.n	1000b0ee <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000b0bc:	235e      	movs	r3, #94	; 0x5e
1000b0be:	4a10      	ldr	r2, [pc, #64]	; (1000b100 <ble_resolv_rand_addr_handler+0xd4>)
1000b0c0:	5cd3      	ldrb	r3, [r2, r3]
1000b0c2:	2b00      	cmp	r3, #0
1000b0c4:	d0ce      	beq.n	1000b064 <ble_resolv_rand_addr_handler+0x38>
1000b0c6:	4a13      	ldr	r2, [pc, #76]	; (1000b114 <ble_resolv_rand_addr_handler+0xe8>)
1000b0c8:	2301      	movs	r3, #1
1000b0ca:	e7c5      	b.n	1000b058 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b0cc:	480c      	ldr	r0, [pc, #48]	; (1000b100 <ble_resolv_rand_addr_handler+0xd4>)
1000b0ce:	0163      	lsls	r3, r4, #5
1000b0d0:	1b1a      	subs	r2, r3, r4
1000b0d2:	0092      	lsls	r2, r2, #2
1000b0d4:	1882      	adds	r2, r0, r2
1000b0d6:	0011      	movs	r1, r2
1000b0d8:	315e      	adds	r1, #94	; 0x5e
1000b0da:	2502      	movs	r5, #2
1000b0dc:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000b0de:	210a      	movs	r1, #10
1000b0e0:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000b0e2:	0010      	movs	r0, r2
1000b0e4:	2212      	movs	r2, #18
1000b0e6:	4907      	ldr	r1, [pc, #28]	; (1000b104 <ble_resolv_rand_addr_handler+0xd8>)
1000b0e8:	4b07      	ldr	r3, [pc, #28]	; (1000b108 <ble_resolv_rand_addr_handler+0xdc>)
1000b0ea:	4798      	blx	r3
1000b0ec:	e7e1      	b.n	1000b0b2 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000b0ee:	2000      	movs	r0, #0
1000b0f0:	bc04      	pop	{r2}
1000b0f2:	4690      	mov	r8, r2
1000b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b0f6:	46c0      	nop			; (mov r8, r8)
1000b0f8:	1001544e 	.word	0x1001544e
1000b0fc:	1001167d 	.word	0x1001167d
1000b100:	10015408 	.word	0x10015408
1000b104:	100156b4 	.word	0x100156b4
1000b108:	1001169b 	.word	0x1001169b
1000b10c:	10015674 	.word	0x10015674
1000b110:	1000adbd 	.word	0x1000adbd
1000b114:	100154e2 	.word	0x100154e2

1000b118 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b11a:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000b11c:	283b      	cmp	r0, #59	; 0x3b
1000b11e:	d872      	bhi.n	1000b206 <ble_event_manager+0xee>
1000b120:	0083      	lsls	r3, r0, #2
1000b122:	4a3c      	ldr	r2, [pc, #240]	; (1000b214 <ble_event_manager+0xfc>)
1000b124:	58d3      	ldr	r3, [r2, r3]
1000b126:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b128:	0084      	lsls	r4, r0, #2
1000b12a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000b12c:	4f3a      	ldr	r7, [pc, #232]	; (1000b218 <ble_event_manager+0x100>)
1000b12e:	59bb      	ldr	r3, [r7, r6]
1000b130:	2b00      	cmp	r3, #0
1000b132:	d004      	beq.n	1000b13e <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b134:	591b      	ldr	r3, [r3, r4]
1000b136:	2b00      	cmp	r3, #0
1000b138:	d001      	beq.n	1000b13e <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000b13a:	0028      	movs	r0, r5
1000b13c:	4798      	blx	r3
1000b13e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b140:	2e14      	cmp	r6, #20
1000b142:	d1f4      	bne.n	1000b12e <ble_event_manager+0x16>
1000b144:	e065      	b.n	1000b212 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b146:	3813      	subs	r0, #19
1000b148:	b2c4      	uxtb	r4, r0
1000b14a:	00a4      	lsls	r4, r4, #2
1000b14c:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000b14e:	4f33      	ldr	r7, [pc, #204]	; (1000b21c <ble_event_manager+0x104>)
1000b150:	59bb      	ldr	r3, [r7, r6]
1000b152:	2b00      	cmp	r3, #0
1000b154:	d004      	beq.n	1000b160 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b156:	591b      	ldr	r3, [r3, r4]
1000b158:	2b00      	cmp	r3, #0
1000b15a:	d001      	beq.n	1000b160 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000b15c:	0028      	movs	r0, r5
1000b15e:	4798      	blx	r3
1000b160:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b162:	2e14      	cmp	r6, #20
1000b164:	d1f4      	bne.n	1000b150 <ble_event_manager+0x38>
1000b166:	e054      	b.n	1000b212 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b168:	381d      	subs	r0, #29
1000b16a:	b2c4      	uxtb	r4, r0
1000b16c:	00a4      	lsls	r4, r4, #2
1000b16e:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000b170:	4f2b      	ldr	r7, [pc, #172]	; (1000b220 <ble_event_manager+0x108>)
1000b172:	59bb      	ldr	r3, [r7, r6]
1000b174:	2b00      	cmp	r3, #0
1000b176:	d004      	beq.n	1000b182 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b178:	591b      	ldr	r3, [r3, r4]
1000b17a:	2b00      	cmp	r3, #0
1000b17c:	d001      	beq.n	1000b182 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000b17e:	0028      	movs	r0, r5
1000b180:	4798      	blx	r3
1000b182:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b184:	2e14      	cmp	r6, #20
1000b186:	d1f4      	bne.n	1000b172 <ble_event_manager+0x5a>
1000b188:	e043      	b.n	1000b212 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b18a:	3827      	subs	r0, #39	; 0x27
1000b18c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b18e:	4b25      	ldr	r3, [pc, #148]	; (1000b224 <ble_event_manager+0x10c>)
1000b190:	681b      	ldr	r3, [r3, #0]
1000b192:	2b00      	cmp	r3, #0
1000b194:	d03d      	beq.n	1000b212 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b196:	0080      	lsls	r0, r0, #2
1000b198:	58c3      	ldr	r3, [r0, r3]
1000b19a:	2b00      	cmp	r3, #0
1000b19c:	d039      	beq.n	1000b212 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b19e:	0008      	movs	r0, r1
1000b1a0:	4798      	blx	r3
1000b1a2:	e036      	b.n	1000b212 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b1a4:	382d      	subs	r0, #45	; 0x2d
1000b1a6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b1a8:	4b1f      	ldr	r3, [pc, #124]	; (1000b228 <ble_event_manager+0x110>)
1000b1aa:	681b      	ldr	r3, [r3, #0]
1000b1ac:	2b00      	cmp	r3, #0
1000b1ae:	d030      	beq.n	1000b212 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b1b0:	0080      	lsls	r0, r0, #2
1000b1b2:	58c3      	ldr	r3, [r0, r3]
1000b1b4:	2b00      	cmp	r3, #0
1000b1b6:	d02c      	beq.n	1000b212 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b1b8:	0008      	movs	r0, r1
1000b1ba:	4798      	blx	r3
1000b1bc:	e029      	b.n	1000b212 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b1be:	3836      	subs	r0, #54	; 0x36
1000b1c0:	b2c4      	uxtb	r4, r0
1000b1c2:	00a4      	lsls	r4, r4, #2
1000b1c4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b1c6:	4f19      	ldr	r7, [pc, #100]	; (1000b22c <ble_event_manager+0x114>)
1000b1c8:	59bb      	ldr	r3, [r7, r6]
1000b1ca:	2b00      	cmp	r3, #0
1000b1cc:	d004      	beq.n	1000b1d8 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b1ce:	591b      	ldr	r3, [r3, r4]
1000b1d0:	2b00      	cmp	r3, #0
1000b1d2:	d001      	beq.n	1000b1d8 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000b1d4:	0028      	movs	r0, r5
1000b1d6:	4798      	blx	r3
1000b1d8:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b1da:	2e14      	cmp	r6, #20
1000b1dc:	d1f4      	bne.n	1000b1c8 <ble_event_manager+0xb0>
1000b1de:	e018      	b.n	1000b212 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b1e0:	3838      	subs	r0, #56	; 0x38
1000b1e2:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b1e4:	4b12      	ldr	r3, [pc, #72]	; (1000b230 <ble_event_manager+0x118>)
1000b1e6:	681b      	ldr	r3, [r3, #0]
1000b1e8:	2b00      	cmp	r3, #0
1000b1ea:	d012      	beq.n	1000b212 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b1ec:	0080      	lsls	r0, r0, #2
1000b1ee:	58c3      	ldr	r3, [r0, r3]
1000b1f0:	2b00      	cmp	r3, #0
1000b1f2:	d00e      	beq.n	1000b212 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b1f4:	0008      	movs	r0, r1
1000b1f6:	4798      	blx	r3
1000b1f8:	e00b      	b.n	1000b212 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b1fa:	4b0e      	ldr	r3, [pc, #56]	; (1000b234 <ble_event_manager+0x11c>)
1000b1fc:	681b      	ldr	r3, [r3, #0]
1000b1fe:	2b00      	cmp	r3, #0
1000b200:	d007      	beq.n	1000b212 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000b202:	4798      	blx	r3
1000b204:	e005      	b.n	1000b212 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000b206:	4d0c      	ldr	r5, [pc, #48]	; (1000b238 <ble_event_manager+0x120>)
1000b208:	0028      	movs	r0, r5
1000b20a:	4c0c      	ldr	r4, [pc, #48]	; (1000b23c <ble_event_manager+0x124>)
1000b20c:	47a0      	blx	r4
1000b20e:	0028      	movs	r0, r5
1000b210:	47a0      	blx	r4
	}
	break;		
	}
}
1000b212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b214:	10012b40 	.word	0x10012b40
1000b218:	1001568c 	.word	0x1001568c
1000b21c:	100156a0 	.word	0x100156a0
1000b220:	100153f4 	.word	0x100153f4
1000b224:	100156e8 	.word	0x100156e8
1000b228:	100153f0 	.word	0x100153f0
1000b22c:	10015678 	.word	0x10015678
1000b230:	10015c2c 	.word	0x10015c2c
1000b234:	100141dc 	.word	0x100141dc
1000b238:	10012ab8 	.word	0x10012ab8
1000b23c:	100117dd 	.word	0x100117dd

1000b240 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b240:	b510      	push	{r4, lr}
1000b242:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000b244:	4906      	ldr	r1, [pc, #24]	; (1000b260 <ble_event_task+0x20>)
1000b246:	4807      	ldr	r0, [pc, #28]	; (1000b264 <ble_event_task+0x24>)
1000b248:	4b07      	ldr	r3, [pc, #28]	; (1000b268 <ble_event_task+0x28>)
1000b24a:	4798      	blx	r3
1000b24c:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000b24e:	d104      	bne.n	1000b25a <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000b250:	4b04      	ldr	r3, [pc, #16]	; (1000b264 <ble_event_task+0x24>)
1000b252:	7818      	ldrb	r0, [r3, #0]
1000b254:	4902      	ldr	r1, [pc, #8]	; (1000b260 <ble_event_task+0x20>)
1000b256:	4b05      	ldr	r3, [pc, #20]	; (1000b26c <ble_event_task+0x2c>)
1000b258:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000b25a:	0020      	movs	r0, r4
1000b25c:	bd10      	pop	{r4, pc}
1000b25e:	46c0      	nop			; (mov r8, r8)
1000b260:	10015a20 	.word	0x10015a20
1000b264:	100156e4 	.word	0x100156e4
1000b268:	1000c745 	.word	0x1000c745
1000b26c:	1000b119 	.word	0x1000b119

1000b270 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000b270:	b570      	push	{r4, r5, r6, lr}
1000b272:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000b274:	ac08      	add	r4, sp, #32
1000b276:	2303      	movs	r3, #3
1000b278:	7063      	strb	r3, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000b27a:	220f      	movs	r2, #15
1000b27c:	70a2      	strb	r2, [r4, #2]
1000b27e:	3209      	adds	r2, #9
1000b280:	70e2      	strb	r2, [r4, #3]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000b282:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000b284:	3307      	adds	r3, #7
1000b286:	7123      	strb	r3, [r4, #4]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000b288:	2609      	movs	r6, #9
1000b28a:	7166      	strb	r6, [r4, #5]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000b28c:	3a0f      	subs	r2, #15
1000b28e:	4912      	ldr	r1, [pc, #72]	; (1000b2d8 <ble_advertisement_data_set+0x68>)
1000b290:	2026      	movs	r0, #38	; 0x26
1000b292:	4468      	add	r0, sp
1000b294:	4d11      	ldr	r5, [pc, #68]	; (1000b2dc <ble_advertisement_data_set+0x6c>)
1000b296:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000b298:	2300      	movs	r3, #0
1000b29a:	466a      	mov	r2, sp
1000b29c:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000b29e:	3315      	adds	r3, #21
1000b2a0:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000b2a2:	73e6      	strb	r6, [r4, #15]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000b2a4:	33ea      	adds	r3, #234	; 0xea
1000b2a6:	7423      	strb	r3, [r4, #16]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000b2a8:	2208      	movs	r2, #8
1000b2aa:	490d      	ldr	r1, [pc, #52]	; (1000b2e0 <ble_advertisement_data_set+0x70>)
1000b2ac:	3110      	adds	r1, #16
1000b2ae:	2031      	movs	r0, #49	; 0x31
1000b2b0:	4468      	add	r0, sp
1000b2b2:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000b2b4:	2300      	movs	r3, #0
1000b2b6:	466a      	mov	r2, sp
1000b2b8:	2119      	movs	r1, #25
1000b2ba:	0020      	movs	r0, r4
1000b2bc:	4c09      	ldr	r4, [pc, #36]	; (1000b2e4 <ble_advertisement_data_set+0x74>)
1000b2be:	47a0      	blx	r4
1000b2c0:	2800      	cmp	r0, #0
1000b2c2:	d005      	beq.n	1000b2d0 <ble_advertisement_data_set+0x60>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000b2c4:	4808      	ldr	r0, [pc, #32]	; (1000b2e8 <ble_advertisement_data_set+0x78>)
1000b2c6:	4b09      	ldr	r3, [pc, #36]	; (1000b2ec <ble_advertisement_data_set+0x7c>)
1000b2c8:	4798      	blx	r3
1000b2ca:	4809      	ldr	r0, [pc, #36]	; (1000b2f0 <ble_advertisement_data_set+0x80>)
1000b2cc:	4b09      	ldr	r3, [pc, #36]	; (1000b2f4 <ble_advertisement_data_set+0x84>)
1000b2ce:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000b2d0:	2000      	movs	r0, #0
1000b2d2:	b010      	add	sp, #64	; 0x40
1000b2d4:	bd70      	pop	{r4, r5, r6, pc}
1000b2d6:	46c0      	nop			; (mov r8, r8)
1000b2d8:	1001308c 	.word	0x1001308c
1000b2dc:	1001169b 	.word	0x1001169b
1000b2e0:	10012c30 	.word	0x10012c30
1000b2e4:	1000d1a5 	.word	0x1000d1a5
1000b2e8:	10012ab8 	.word	0x10012ab8
1000b2ec:	100117dd 	.word	0x100117dd
1000b2f0:	10013264 	.word	0x10013264
1000b2f4:	100116bd 	.word	0x100116bd

1000b2f8 <aon_sleep_timer_service_init>:
 */

aon_timer_status aon_status = AON_TIMER_IDLE;

bool aon_sleep_timer_service_init(uint32_t _sec)
{
1000b2f8:	b510      	push	{r4, lr}
1000b2fa:	b082      	sub	sp, #8
1000b2fc:	1e04      	subs	r4, r0, #0
	#define CONF_AON_SLEEP_COUNTER      32768    /* About 1s */
	struct aon_sleep_timer_config config;
	
	if(_sec <= 0)
1000b2fe:	d100      	bne.n	1000b302 <aon_sleep_timer_service_init+0xa>
		_sec = 1;
1000b300:	3401      	adds	r4, #1

	aon_sleep_timer_get_config_defaults(&config);
1000b302:	4668      	mov	r0, sp
1000b304:	4b07      	ldr	r3, [pc, #28]	; (1000b324 <aon_sleep_timer_service_init+0x2c>)
1000b306:	4798      	blx	r3
	config.wakeup = AON_SLEEP_TIMER_WAKEUP_ARM_BLE;
1000b308:	2302      	movs	r3, #2
1000b30a:	466a      	mov	r2, sp
1000b30c:	7013      	strb	r3, [r2, #0]
	config.mode = AON_SLEEP_TIMER_RELOAD_MODE;//AON_SLEEP_TIMER_SINGLE_MODE
1000b30e:	2300      	movs	r3, #0
1000b310:	7053      	strb	r3, [r2, #1]
	config.counter = _sec * CONF_AON_SLEEP_COUNTER;
1000b312:	03e4      	lsls	r4, r4, #15
1000b314:	9401      	str	r4, [sp, #4]
	aon_sleep_timer_init(&config);
1000b316:	4668      	mov	r0, sp
1000b318:	4b03      	ldr	r3, [pc, #12]	; (1000b328 <aon_sleep_timer_service_init+0x30>)
1000b31a:	4798      	blx	r3
	
	return true;
}
1000b31c:	2001      	movs	r0, #1
1000b31e:	b002      	add	sp, #8
1000b320:	bd10      	pop	{r4, pc}
1000b322:	46c0      	nop			; (mov r8, r8)
1000b324:	10008a79 	.word	0x10008a79
1000b328:	10008afd 	.word	0x10008afd

1000b32c <aon_sleep_timer_service_start>:

bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
1000b32c:	b570      	push	{r4, r5, r6, lr}
	aon_sleep_timer_register_callback(callback);
1000b32e:	4b08      	ldr	r3, [pc, #32]	; (1000b350 <aon_sleep_timer_service_start+0x24>)
1000b330:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b332:	2280      	movs	r2, #128	; 0x80
1000b334:	0512      	lsls	r2, r2, #20
1000b336:	4b07      	ldr	r3, [pc, #28]	; (1000b354 <aon_sleep_timer_service_start+0x28>)
1000b338:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000b33a:	4c07      	ldr	r4, [pc, #28]	; (1000b358 <aon_sleep_timer_service_start+0x2c>)
	
	aon_status = AON_TIMER_ACTIVE;
1000b33c:	4e07      	ldr	r6, [pc, #28]	; (1000b35c <aon_sleep_timer_service_start+0x30>)
1000b33e:	2501      	movs	r5, #1
1000b340:	e000      	b.n	1000b344 <aon_sleep_timer_service_start+0x18>
1000b342:	7035      	strb	r5, [r6, #0]
bool aon_sleep_timer_service_start(aon_sleep_timer_callback_t callback)
{
	aon_sleep_timer_register_callback(callback);
	NVIC_EnableIRQ(AON_SLEEP_TIMER_IRQn);
		
	while(!aon_sleep_timer_sleep_timer_active())
1000b344:	47a0      	blx	r4
1000b346:	2800      	cmp	r0, #0
1000b348:	d0fb      	beq.n	1000b342 <aon_sleep_timer_service_start+0x16>
	
	aon_status = AON_TIMER_ACTIVE;
	return true;
}
1000b34a:	2001      	movs	r0, #1
1000b34c:	bd70      	pop	{r4, r5, r6, pc}
1000b34e:	46c0      	nop			; (mov r8, r8)
1000b350:	10008ae5 	.word	0x10008ae5
1000b354:	e000e100 	.word	0xe000e100
1000b358:	10008aa9 	.word	0x10008aa9
1000b35c:	100151ec 	.word	0x100151ec

1000b360 <aon_sleep_timer_service_stop>:

/**
 * \aon timemr stop
 */
void aon_sleep_timer_service_stop()
{	
1000b360:	b510      	push	{r4, lr}
	if( aon_status != AON_TIMER_ACTIVE )
1000b362:	4b08      	ldr	r3, [pc, #32]	; (1000b384 <aon_sleep_timer_service_stop+0x24>)
1000b364:	781b      	ldrb	r3, [r3, #0]
1000b366:	2b01      	cmp	r3, #1
1000b368:	d10b      	bne.n	1000b382 <aon_sleep_timer_service_stop+0x22>
		return ;
	
	aon_status = AON_TIMER_IDLE;
1000b36a:	2200      	movs	r2, #0
1000b36c:	4b05      	ldr	r3, [pc, #20]	; (1000b384 <aon_sleep_timer_service_stop+0x24>)
1000b36e:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_disable();
1000b370:	4b05      	ldr	r3, [pc, #20]	; (1000b388 <aon_sleep_timer_service_stop+0x28>)
1000b372:	4798      	blx	r3
	aon_sleep_timer_unregister_callback();
1000b374:	4b05      	ldr	r3, [pc, #20]	; (1000b38c <aon_sleep_timer_service_stop+0x2c>)
1000b376:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b378:	2180      	movs	r1, #128	; 0x80
1000b37a:	0509      	lsls	r1, r1, #20
1000b37c:	2380      	movs	r3, #128	; 0x80
1000b37e:	4a04      	ldr	r2, [pc, #16]	; (1000b390 <aon_sleep_timer_service_stop+0x30>)
1000b380:	50d1      	str	r1, [r2, r3]
	NVIC_DisableIRQ(AON_SLEEP_TIMER_IRQn);
}
1000b382:	bd10      	pop	{r4, pc}
1000b384:	100151ec 	.word	0x100151ec
1000b388:	10008a89 	.word	0x10008a89
1000b38c:	10008af1 	.word	0x10008af1
1000b390:	e000e100 	.word	0xe000e100

1000b394 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000b394:	4770      	bx	lr
1000b396:	46c0      	nop			; (mov r8, r8)

1000b398 <hw_timer_init>:

void hw_timer_init(void)
{
1000b398:	b500      	push	{lr}
1000b39a:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000b39c:	a801      	add	r0, sp, #4
1000b39e:	4b05      	ldr	r3, [pc, #20]	; (1000b3b4 <hw_timer_init+0x1c>)
1000b3a0:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000b3a2:	4b05      	ldr	r3, [pc, #20]	; (1000b3b8 <hw_timer_init+0x20>)
1000b3a4:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000b3a6:	4b05      	ldr	r3, [pc, #20]	; (1000b3bc <hw_timer_init+0x24>)
1000b3a8:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000b3aa:	a801      	add	r0, sp, #4
1000b3ac:	4b04      	ldr	r3, [pc, #16]	; (1000b3c0 <hw_timer_init+0x28>)
1000b3ae:	4798      	blx	r3
}
1000b3b0:	b009      	add	sp, #36	; 0x24
1000b3b2:	bd00      	pop	{pc}
1000b3b4:	10008c05 	.word	0x10008c05
1000b3b8:	018cba80 	.word	0x018cba80
1000b3bc:	03197500 	.word	0x03197500
1000b3c0:	10008c99 	.word	0x10008c99

1000b3c4 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000b3c4:	b510      	push	{r4, lr}
1000b3c6:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000b3c8:	2000      	movs	r0, #0
1000b3ca:	4c07      	ldr	r4, [pc, #28]	; (1000b3e8 <hw_timer_register_callback+0x24>)
1000b3cc:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000b3ce:	4907      	ldr	r1, [pc, #28]	; (1000b3ec <hw_timer_register_callback+0x28>)
1000b3d0:	2001      	movs	r0, #1
1000b3d2:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000b3d4:	2000      	movs	r0, #0
1000b3d6:	4c06      	ldr	r4, [pc, #24]	; (1000b3f0 <hw_timer_register_callback+0x2c>)
1000b3d8:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000b3da:	2001      	movs	r0, #1
1000b3dc:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b3de:	2280      	movs	r2, #128	; 0x80
1000b3e0:	01d2      	lsls	r2, r2, #7
1000b3e2:	4b04      	ldr	r3, [pc, #16]	; (1000b3f4 <hw_timer_register_callback+0x30>)
1000b3e4:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b3e6:	bd10      	pop	{r4, pc}
1000b3e8:	10008d9d 	.word	0x10008d9d
1000b3ec:	1000b395 	.word	0x1000b395
1000b3f0:	10008c75 	.word	0x10008c75
1000b3f4:	e000e100 	.word	0xe000e100

1000b3f8 <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000b3f8:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000b3fa:	2800      	cmp	r0, #0
1000b3fc:	d100      	bne.n	1000b400 <hw_timer_start+0x8>
		delay = 1;
1000b3fe:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000b400:	4b05      	ldr	r3, [pc, #20]	; (1000b418 <hw_timer_start+0x20>)
1000b402:	4343      	muls	r3, r0
1000b404:	001a      	movs	r2, r3
1000b406:	2100      	movs	r1, #0
1000b408:	2000      	movs	r0, #0
1000b40a:	4b04      	ldr	r3, [pc, #16]	; (1000b41c <hw_timer_start+0x24>)
1000b40c:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000b40e:	2000      	movs	r0, #0
1000b410:	4b03      	ldr	r3, [pc, #12]	; (1000b420 <hw_timer_start+0x28>)
1000b412:	4798      	blx	r3
}
1000b414:	bd10      	pop	{r4, pc}
1000b416:	46c0      	nop			; (mov r8, r8)
1000b418:	018cba80 	.word	0x018cba80
1000b41c:	10008c29 	.word	0x10008c29
1000b420:	10008c51 	.word	0x10008c51

1000b424 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000b424:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000b426:	2000      	movs	r0, #0
1000b428:	4b01      	ldr	r3, [pc, #4]	; (1000b430 <hw_timer_stop+0xc>)
1000b42a:	4798      	blx	r3
}
1000b42c:	bd10      	pop	{r4, pc}
1000b42e:	46c0      	nop			; (mov r8, r8)
1000b430:	10008c75 	.word	0x10008c75

1000b434 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000b434:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000b436:	4b0e      	ldr	r3, [pc, #56]	; (1000b470 <uart_read_complete_callback+0x3c>)
1000b438:	781b      	ldrb	r3, [r3, #0]
1000b43a:	2b01      	cmp	r3, #1
1000b43c:	d10b      	bne.n	1000b456 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000b43e:	2202      	movs	r2, #2
1000b440:	4b0b      	ldr	r3, [pc, #44]	; (1000b470 <uart_read_complete_callback+0x3c>)
1000b442:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000b444:	4b0b      	ldr	r3, [pc, #44]	; (1000b474 <uart_read_complete_callback+0x40>)
1000b446:	681b      	ldr	r3, [r3, #0]
1000b448:	2b00      	cmp	r3, #0
1000b44a:	d110      	bne.n	1000b46e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b44c:	2102      	movs	r1, #2
1000b44e:	480a      	ldr	r0, [pc, #40]	; (1000b478 <uart_read_complete_callback+0x44>)
1000b450:	4b0a      	ldr	r3, [pc, #40]	; (1000b47c <uart_read_complete_callback+0x48>)
1000b452:	4798      	blx	r3
1000b454:	e00b      	b.n	1000b46e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000b456:	4b07      	ldr	r3, [pc, #28]	; (1000b474 <uart_read_complete_callback+0x40>)
1000b458:	681b      	ldr	r3, [r3, #0]
1000b45a:	2b00      	cmp	r3, #0
1000b45c:	d007      	beq.n	1000b46e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000b45e:	4c08      	ldr	r4, [pc, #32]	; (1000b480 <uart_read_complete_callback+0x4c>)
1000b460:	7820      	ldrb	r0, [r4, #0]
1000b462:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b464:	2201      	movs	r2, #1
1000b466:	0021      	movs	r1, r4
1000b468:	4803      	ldr	r0, [pc, #12]	; (1000b478 <uart_read_complete_callback+0x44>)
1000b46a:	4b06      	ldr	r3, [pc, #24]	; (1000b484 <uart_read_complete_callback+0x50>)
1000b46c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000b46e:	bd10      	pop	{r4, pc}
1000b470:	100151f4 	.word	0x100151f4
1000b474:	100151fc 	.word	0x100151fc
1000b478:	10015c30 	.word	0x10015c30
1000b47c:	10009e49 	.word	0x10009e49
1000b480:	100151f8 	.word	0x100151f8
1000b484:	10009ded 	.word	0x10009ded

1000b488 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b488:	b570      	push	{r4, r5, r6, lr}
1000b48a:	0006      	movs	r6, r0
1000b48c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b48e:	4c03      	ldr	r4, [pc, #12]	; (1000b49c <usart_serial_getchar+0x14>)
1000b490:	0029      	movs	r1, r5
1000b492:	0030      	movs	r0, r6
1000b494:	47a0      	blx	r4
1000b496:	2800      	cmp	r0, #0
1000b498:	d1fa      	bne.n	1000b490 <usart_serial_getchar+0x8>
}
1000b49a:	bd70      	pop	{r4, r5, r6, pc}
1000b49c:	10009dd9 	.word	0x10009dd9

1000b4a0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b4a0:	b570      	push	{r4, r5, r6, lr}
1000b4a2:	0006      	movs	r6, r0
1000b4a4:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b4a6:	4c03      	ldr	r4, [pc, #12]	; (1000b4b4 <usart_serial_putchar+0x14>)
1000b4a8:	0029      	movs	r1, r5
1000b4aa:	0030      	movs	r0, r6
1000b4ac:	47a0      	blx	r4
1000b4ae:	2800      	cmp	r0, #0
1000b4b0:	d1fa      	bne.n	1000b4a8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b4b2:	bd70      	pop	{r4, r5, r6, pc}
1000b4b4:	10009dc9 	.word	0x10009dc9

1000b4b8 <serial_console_init>:

void serial_console_init(void)
{
1000b4b8:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b4ba:	2100      	movs	r1, #0
1000b4bc:	2000      	movs	r0, #0
1000b4be:	4b19      	ldr	r3, [pc, #100]	; (1000b524 <serial_console_init+0x6c>)
1000b4c0:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b4c2:	4c19      	ldr	r4, [pc, #100]	; (1000b528 <serial_console_init+0x70>)
1000b4c4:	0020      	movs	r0, r4
1000b4c6:	4b19      	ldr	r3, [pc, #100]	; (1000b52c <serial_console_init+0x74>)
1000b4c8:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000b4ca:	23e1      	movs	r3, #225	; 0xe1
1000b4cc:	025b      	lsls	r3, r3, #9
1000b4ce:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000b4d0:	2302      	movs	r3, #2
1000b4d2:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000b4d4:	2203      	movs	r2, #3
1000b4d6:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000b4d8:	3201      	adds	r2, #1
1000b4da:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000b4dc:	3201      	adds	r2, #1
1000b4de:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000b4e0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000b4e2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000b4e4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000b4e6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b4e8:	4d11      	ldr	r5, [pc, #68]	; (1000b530 <serial_console_init+0x78>)
1000b4ea:	4b12      	ldr	r3, [pc, #72]	; (1000b534 <serial_console_init+0x7c>)
1000b4ec:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b4ee:	4a12      	ldr	r2, [pc, #72]	; (1000b538 <serial_console_init+0x80>)
1000b4f0:	4b12      	ldr	r3, [pc, #72]	; (1000b53c <serial_console_init+0x84>)
1000b4f2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b4f4:	4a12      	ldr	r2, [pc, #72]	; (1000b540 <serial_console_init+0x88>)
1000b4f6:	4b13      	ldr	r3, [pc, #76]	; (1000b544 <serial_console_init+0x8c>)
1000b4f8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b4fa:	0022      	movs	r2, r4
1000b4fc:	4912      	ldr	r1, [pc, #72]	; (1000b548 <serial_console_init+0x90>)
1000b4fe:	0028      	movs	r0, r5
1000b500:	4b12      	ldr	r3, [pc, #72]	; (1000b54c <serial_console_init+0x94>)
1000b502:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b504:	4e12      	ldr	r6, [pc, #72]	; (1000b550 <serial_console_init+0x98>)
1000b506:	6833      	ldr	r3, [r6, #0]
1000b508:	6898      	ldr	r0, [r3, #8]
1000b50a:	2100      	movs	r1, #0
1000b50c:	4c11      	ldr	r4, [pc, #68]	; (1000b554 <serial_console_init+0x9c>)
1000b50e:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b510:	6833      	ldr	r3, [r6, #0]
1000b512:	6858      	ldr	r0, [r3, #4]
1000b514:	2100      	movs	r1, #0
1000b516:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b518:	2202      	movs	r2, #2
1000b51a:	490f      	ldr	r1, [pc, #60]	; (1000b558 <serial_console_init+0xa0>)
1000b51c:	0028      	movs	r0, r5
1000b51e:	4b0f      	ldr	r3, [pc, #60]	; (1000b55c <serial_console_init+0xa4>)
1000b520:	4798      	blx	r3
}
1000b522:	bd70      	pop	{r4, r5, r6, pc}
1000b524:	10009155 	.word	0x10009155
1000b528:	10015c54 	.word	0x10015c54
1000b52c:	10009be1 	.word	0x10009be1
1000b530:	10015c30 	.word	0x10015c30
1000b534:	100153e4 	.word	0x100153e4
1000b538:	1000b4a1 	.word	0x1000b4a1
1000b53c:	100153e0 	.word	0x100153e0
1000b540:	1000b489 	.word	0x1000b489
1000b544:	100153dc 	.word	0x100153dc
1000b548:	40004000 	.word	0x40004000
1000b54c:	10009c0d 	.word	0x10009c0d
1000b550:	100138b0 	.word	0x100138b0
1000b554:	10011869 	.word	0x10011869
1000b558:	1000b435 	.word	0x1000b435
1000b55c:	10009e15 	.word	0x10009e15

1000b560 <_time_start>:

void _time_start(unsigned int sec)
{
1000b560:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b562:	b083      	sub	sp, #12
1000b564:	0005      	movs	r5, r0
	system_clock_get_value();
1000b566:	4c0d      	ldr	r4, [pc, #52]	; (1000b59c <_time_start+0x3c>)
1000b568:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000b56a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000b56c:	4f0c      	ldr	r7, [pc, #48]	; (1000b5a0 <_time_start+0x40>)
1000b56e:	47b8      	blx	r7
1000b570:	4e0c      	ldr	r6, [pc, #48]	; (1000b5a4 <_time_start+0x44>)
1000b572:	4a0d      	ldr	r2, [pc, #52]	; (1000b5a8 <_time_start+0x48>)
1000b574:	4b0d      	ldr	r3, [pc, #52]	; (1000b5ac <_time_start+0x4c>)
1000b576:	47b0      	blx	r6
1000b578:	9000      	str	r0, [sp, #0]
1000b57a:	9101      	str	r1, [sp, #4]
1000b57c:	20fa      	movs	r0, #250	; 0xfa
1000b57e:	0080      	lsls	r0, r0, #2
1000b580:	4368      	muls	r0, r5
1000b582:	47b8      	blx	r7
1000b584:	0002      	movs	r2, r0
1000b586:	000b      	movs	r3, r1
1000b588:	9800      	ldr	r0, [sp, #0]
1000b58a:	9901      	ldr	r1, [sp, #4]
1000b58c:	47b0      	blx	r6
1000b58e:	4b08      	ldr	r3, [pc, #32]	; (1000b5b0 <_time_start+0x50>)
1000b590:	4798      	blx	r3
1000b592:	4b08      	ldr	r3, [pc, #32]	; (1000b5b4 <_time_start+0x54>)
1000b594:	6018      	str	r0, [r3, #0]
}
1000b596:	b003      	add	sp, #12
1000b598:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b59a:	46c0      	nop			; (mov r8, r8)
1000b59c:	100091d9 	.word	0x100091d9
1000b5a0:	10011001 	.word	0x10011001
1000b5a4:	10010375 	.word	0x10010375
1000b5a8:	19feaec7 	.word	0x19feaec7
1000b5ac:	3f09d8ef 	.word	0x3f09d8ef
1000b5b0:	1000fdc1 	.word	0x1000fdc1
1000b5b4:	100151f0 	.word	0x100151f0

1000b5b8 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000b5b8:	4b02      	ldr	r3, [pc, #8]	; (1000b5c4 <_time_done+0xc>)
1000b5ba:	681a      	ldr	r2, [r3, #0]
1000b5bc:	1e50      	subs	r0, r2, #1
1000b5be:	6018      	str	r0, [r3, #0]
}
1000b5c0:	4770      	bx	lr
1000b5c2:	46c0      	nop			; (mov r8, r8)
1000b5c4:	100151f0 	.word	0x100151f0

1000b5c8 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000b5c8:	b570      	push	{r4, r5, r6, lr}
1000b5ca:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000b5cc:	2201      	movs	r2, #1
1000b5ce:	4b11      	ldr	r3, [pc, #68]	; (1000b614 <getchar_b11_timeout+0x4c>)
1000b5d0:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000b5d2:	4b11      	ldr	r3, [pc, #68]	; (1000b618 <getchar_b11_timeout+0x50>)
1000b5d4:	681b      	ldr	r3, [r3, #0]
1000b5d6:	2b00      	cmp	r3, #0
1000b5d8:	d103      	bne.n	1000b5e2 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000b5da:	2102      	movs	r1, #2
1000b5dc:	480f      	ldr	r0, [pc, #60]	; (1000b61c <getchar_b11_timeout+0x54>)
1000b5de:	4b10      	ldr	r3, [pc, #64]	; (1000b620 <getchar_b11_timeout+0x58>)
1000b5e0:	4798      	blx	r3

	_time_start(sec);
1000b5e2:	0020      	movs	r0, r4
1000b5e4:	4b0f      	ldr	r3, [pc, #60]	; (1000b624 <getchar_b11_timeout+0x5c>)
1000b5e6:	4798      	blx	r3
	
	string_input[0] = 0;
1000b5e8:	490f      	ldr	r1, [pc, #60]	; (1000b628 <getchar_b11_timeout+0x60>)
1000b5ea:	2300      	movs	r3, #0
1000b5ec:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b5ee:	2201      	movs	r2, #1
1000b5f0:	480a      	ldr	r0, [pc, #40]	; (1000b61c <getchar_b11_timeout+0x54>)
1000b5f2:	4b0e      	ldr	r3, [pc, #56]	; (1000b62c <getchar_b11_timeout+0x64>)
1000b5f4:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000b5f6:	4c07      	ldr	r4, [pc, #28]	; (1000b614 <getchar_b11_timeout+0x4c>)
1000b5f8:	4d0d      	ldr	r5, [pc, #52]	; (1000b630 <getchar_b11_timeout+0x68>)
1000b5fa:	7823      	ldrb	r3, [r4, #0]
1000b5fc:	2b02      	cmp	r3, #2
1000b5fe:	d002      	beq.n	1000b606 <getchar_b11_timeout+0x3e>
1000b600:	47a8      	blx	r5
1000b602:	2800      	cmp	r0, #0
1000b604:	d1f9      	bne.n	1000b5fa <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000b606:	2200      	movs	r2, #0
1000b608:	4b02      	ldr	r3, [pc, #8]	; (1000b614 <getchar_b11_timeout+0x4c>)
1000b60a:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b60c:	4b06      	ldr	r3, [pc, #24]	; (1000b628 <getchar_b11_timeout+0x60>)
1000b60e:	7818      	ldrb	r0, [r3, #0]
}
1000b610:	bd70      	pop	{r4, r5, r6, pc}
1000b612:	46c0      	nop			; (mov r8, r8)
1000b614:	100151f4 	.word	0x100151f4
1000b618:	100151fc 	.word	0x100151fc
1000b61c:	10015c30 	.word	0x10015c30
1000b620:	10009e29 	.word	0x10009e29
1000b624:	1000b561 	.word	0x1000b561
1000b628:	100151f8 	.word	0x100151f8
1000b62c:	10009ded 	.word	0x10009ded
1000b630:	1000b5b9 	.word	0x1000b5b9

1000b634 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b634:	4b02      	ldr	r3, [pc, #8]	; (1000b640 <platform_event_free+0xc>)
1000b636:	681a      	ldr	r2, [r3, #0]
1000b638:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b63a:	6018      	str	r0, [r3, #0]
}
1000b63c:	4770      	bx	lr
1000b63e:	46c0      	nop			; (mov r8, r8)
1000b640:	10015204 	.word	0x10015204

1000b644 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b644:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b646:	4b0b      	ldr	r3, [pc, #44]	; (1000b674 <platform_event_post+0x30>)
1000b648:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b64a:	2c00      	cmp	r4, #0
1000b64c:	d011      	beq.n	1000b672 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b64e:	6825      	ldr	r5, [r4, #0]
1000b650:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b652:	2300      	movs	r3, #0
1000b654:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b656:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b658:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b65a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b65c:	4b06      	ldr	r3, [pc, #24]	; (1000b678 <platform_event_post+0x34>)
1000b65e:	681a      	ldr	r2, [r3, #0]
1000b660:	2a00      	cmp	r2, #0
1000b662:	d102      	bne.n	1000b66a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b664:	601c      	str	r4, [r3, #0]
1000b666:	e004      	b.n	1000b672 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b668:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b66a:	6813      	ldr	r3, [r2, #0]
1000b66c:	2b00      	cmp	r3, #0
1000b66e:	d1fb      	bne.n	1000b668 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b670:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b672:	bd30      	pop	{r4, r5, pc}
1000b674:	10015204 	.word	0x10015204
1000b678:	10015200 	.word	0x10015200

1000b67c <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b67c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b67e:	2300      	movs	r3, #0
1000b680:	4a06      	ldr	r2, [pc, #24]	; (1000b69c <platform_event_init+0x20>)
1000b682:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b684:	4a06      	ldr	r2, [pc, #24]	; (1000b6a0 <platform_event_init+0x24>)
1000b686:	6013      	str	r3, [r2, #0]
1000b688:	4c06      	ldr	r4, [pc, #24]	; (1000b6a4 <platform_event_init+0x28>)
1000b68a:	0026      	movs	r6, r4
1000b68c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b68e:	4d06      	ldr	r5, [pc, #24]	; (1000b6a8 <platform_event_init+0x2c>)
1000b690:	0020      	movs	r0, r4
1000b692:	47a8      	blx	r5
1000b694:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b696:	42b4      	cmp	r4, r6
1000b698:	d1fa      	bne.n	1000b690 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b69a:	bd70      	pop	{r4, r5, r6, pc}
1000b69c:	10015204 	.word	0x10015204
1000b6a0:	10015200 	.word	0x10015200
1000b6a4:	10015208 	.word	0x10015208
1000b6a8:	1000b635 	.word	0x1000b635

1000b6ac <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b6ac:	b570      	push	{r4, r5, r6, lr}
1000b6ae:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b6b0:	4b13      	ldr	r3, [pc, #76]	; (1000b700 <at_ke_msg_send+0x54>)
1000b6b2:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b6b4:	4b13      	ldr	r3, [pc, #76]	; (1000b704 <at_ke_msg_send+0x58>)
1000b6b6:	681b      	ldr	r3, [r3, #0]
1000b6b8:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b6ba:	2c0c      	cmp	r4, #12
1000b6bc:	d01f      	beq.n	1000b6fe <at_ke_msg_send+0x52>
1000b6be:	3c0c      	subs	r4, #12
1000b6c0:	88e3      	ldrh	r3, [r4, #6]
1000b6c2:	2b05      	cmp	r3, #5
1000b6c4:	d01b      	beq.n	1000b6fe <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b6c6:	07eb      	lsls	r3, r5, #31
1000b6c8:	d414      	bmi.n	1000b6f4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b6ca:	4b0f      	ldr	r3, [pc, #60]	; (1000b708 <at_ke_msg_send+0x5c>)
1000b6cc:	681b      	ldr	r3, [r3, #0]
1000b6ce:	2002      	movs	r0, #2
1000b6d0:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b6d2:	4b0e      	ldr	r3, [pc, #56]	; (1000b70c <at_ke_msg_send+0x60>)
1000b6d4:	681b      	ldr	r3, [r3, #0]
1000b6d6:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b6d8:	4c0d      	ldr	r4, [pc, #52]	; (1000b710 <at_ke_msg_send+0x64>)
1000b6da:	2003      	movs	r0, #3
1000b6dc:	6823      	ldr	r3, [r4, #0]
1000b6de:	4798      	blx	r3
1000b6e0:	2800      	cmp	r0, #0
1000b6e2:	d1fa      	bne.n	1000b6da <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b6e4:	4b0b      	ldr	r3, [pc, #44]	; (1000b714 <at_ke_msg_send+0x68>)
1000b6e6:	681b      	ldr	r3, [r3, #0]
1000b6e8:	3002      	adds	r0, #2
1000b6ea:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b6ec:	2201      	movs	r2, #1
1000b6ee:	4b0a      	ldr	r3, [pc, #40]	; (1000b718 <at_ke_msg_send+0x6c>)
1000b6f0:	601a      	str	r2, [r3, #0]
1000b6f2:	e004      	b.n	1000b6fe <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b6f4:	4b09      	ldr	r3, [pc, #36]	; (1000b71c <at_ke_msg_send+0x70>)
1000b6f6:	6818      	ldr	r0, [r3, #0]
1000b6f8:	4b09      	ldr	r3, [pc, #36]	; (1000b720 <at_ke_msg_send+0x74>)
1000b6fa:	681b      	ldr	r3, [r3, #0]
1000b6fc:	4798      	blx	r3
		}
	}
}
1000b6fe:	bd70      	pop	{r4, r5, r6, pc}
1000b700:	4000b1ec 	.word	0x4000b1ec
1000b704:	100152b0 	.word	0x100152b0
1000b708:	100152a8 	.word	0x100152a8
1000b70c:	100152bc 	.word	0x100152bc
1000b710:	10015294 	.word	0x10015294
1000b714:	1001529c 	.word	0x1001529c
1000b718:	4000b020 	.word	0x4000b020
1000b71c:	100152a0 	.word	0x100152a0
1000b720:	10015290 	.word	0x10015290

1000b724 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b724:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b726:	4b06      	ldr	r3, [pc, #24]	; (1000b740 <samb11_plf_resume_callback+0x1c>)
1000b728:	4a06      	ldr	r2, [pc, #24]	; (1000b744 <samb11_plf_resume_callback+0x20>)
1000b72a:	6819      	ldr	r1, [r3, #0]
1000b72c:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b72e:	685a      	ldr	r2, [r3, #4]
1000b730:	4b05      	ldr	r3, [pc, #20]	; (1000b748 <samb11_plf_resume_callback+0x24>)
1000b732:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b734:	4b05      	ldr	r3, [pc, #20]	; (1000b74c <samb11_plf_resume_callback+0x28>)
1000b736:	681b      	ldr	r3, [r3, #0]
1000b738:	2b00      	cmp	r3, #0
1000b73a:	d000      	beq.n	1000b73e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b73c:	4798      	blx	r3
	}
}
1000b73e:	bd10      	pop	{r4, pc}
1000b740:	10015c7c 	.word	0x10015c7c
1000b744:	4000b00c 	.word	0x4000b00c
1000b748:	4000b010 	.word	0x4000b010
1000b74c:	10015f58 	.word	0x10015f58

1000b750 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b750:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b752:	2232      	movs	r2, #50	; 0x32
1000b754:	2100      	movs	r1, #0
1000b756:	480d      	ldr	r0, [pc, #52]	; (1000b78c <init_port_list+0x3c>)
1000b758:	4b0d      	ldr	r3, [pc, #52]	; (1000b790 <init_port_list+0x40>)
1000b75a:	4798      	blx	r3
1000b75c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b75e:	480b      	ldr	r0, [pc, #44]	; (1000b78c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b760:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b762:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b764:	004a      	lsls	r2, r1, #1
1000b766:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b768:	1882      	adds	r2, r0, r2
1000b76a:	7853      	ldrb	r3, [r2, #1]
1000b76c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b76e:	b2db      	uxtb	r3, r3
1000b770:	43a3      	bics	r3, r4
1000b772:	7053      	strb	r3, [r2, #1]
1000b774:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b776:	2919      	cmp	r1, #25
1000b778:	d1f4      	bne.n	1000b764 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b77a:	4b04      	ldr	r3, [pc, #16]	; (1000b78c <init_port_list+0x3c>)
1000b77c:	785a      	ldrb	r2, [r3, #1]
1000b77e:	3918      	subs	r1, #24
1000b780:	438a      	bics	r2, r1
1000b782:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b784:	78da      	ldrb	r2, [r3, #3]
1000b786:	438a      	bics	r2, r1
1000b788:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b78a:	bd70      	pop	{r4, r5, r6, pc}
1000b78c:	10015c98 	.word	0x10015c98
1000b790:	100116ad 	.word	0x100116ad

1000b794 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b794:	4a06      	ldr	r2, [pc, #24]	; (1000b7b0 <init_clock+0x1c>)
1000b796:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b798:	4b06      	ldr	r3, [pc, #24]	; (1000b7b4 <init_clock+0x20>)
1000b79a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b79c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b79e:	4a06      	ldr	r2, [pc, #24]	; (1000b7b8 <init_clock+0x24>)
1000b7a0:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b7a2:	4906      	ldr	r1, [pc, #24]	; (1000b7bc <init_clock+0x28>)
1000b7a4:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b7a6:	4b06      	ldr	r3, [pc, #24]	; (1000b7c0 <init_clock+0x2c>)
1000b7a8:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b7aa:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b7ac:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b7ae:	4770      	bx	lr
1000b7b0:	4000b00c 	.word	0x4000b00c
1000b7b4:	fffe0fd3 	.word	0xfffe0fd3
1000b7b8:	10015c7c 	.word	0x10015c7c
1000b7bc:	4000b010 	.word	0x4000b010
1000b7c0:	ffffe7c0 	.word	0xffffe7c0

1000b7c4 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b7c6:	4657      	mov	r7, sl
1000b7c8:	464e      	mov	r6, r9
1000b7ca:	4645      	mov	r5, r8
1000b7cc:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b7ce:	4b4f      	ldr	r3, [pc, #316]	; (1000b90c <platform_driver_init+0x148>)
1000b7d0:	781b      	ldrb	r3, [r3, #0]
1000b7d2:	2b00      	cmp	r3, #0
1000b7d4:	d004      	beq.n	1000b7e0 <platform_driver_init+0x1c>
1000b7d6:	4b4d      	ldr	r3, [pc, #308]	; (1000b90c <platform_driver_init+0x148>)
1000b7d8:	781b      	ldrb	r3, [r3, #0]
1000b7da:	2b01      	cmp	r3, #1
1000b7dc:	d100      	bne.n	1000b7e0 <platform_driver_init+0x1c>
1000b7de:	e08c      	b.n	1000b8fa <platform_driver_init+0x136>
		init_port_list();
1000b7e0:	4b4b      	ldr	r3, [pc, #300]	; (1000b910 <platform_driver_init+0x14c>)
1000b7e2:	4798      	blx	r3
		init_clock();
1000b7e4:	4b4b      	ldr	r3, [pc, #300]	; (1000b914 <platform_driver_init+0x150>)
1000b7e6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b7e8:	2300      	movs	r3, #0
1000b7ea:	4698      	mov	r8, r3
1000b7ec:	4b4a      	ldr	r3, [pc, #296]	; (1000b918 <platform_driver_init+0x154>)
1000b7ee:	4642      	mov	r2, r8
1000b7f0:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b7f2:	4c4a      	ldr	r4, [pc, #296]	; (1000b91c <platform_driver_init+0x158>)
1000b7f4:	2380      	movs	r3, #128	; 0x80
1000b7f6:	2280      	movs	r2, #128	; 0x80
1000b7f8:	0412      	lsls	r2, r2, #16
1000b7fa:	4692      	mov	sl, r2
1000b7fc:	50e2      	str	r2, [r4, r3]
1000b7fe:	2280      	movs	r2, #128	; 0x80
1000b800:	0452      	lsls	r2, r2, #17
1000b802:	4691      	mov	r9, r2
1000b804:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b806:	4d46      	ldr	r5, [pc, #280]	; (1000b920 <platform_driver_init+0x15c>)
1000b808:	4b46      	ldr	r3, [pc, #280]	; (1000b924 <platform_driver_init+0x160>)
1000b80a:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b80c:	4b46      	ldr	r3, [pc, #280]	; (1000b928 <platform_driver_init+0x164>)
1000b80e:	4a47      	ldr	r2, [pc, #284]	; (1000b92c <platform_driver_init+0x168>)
1000b810:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b812:	4947      	ldr	r1, [pc, #284]	; (1000b930 <platform_driver_init+0x16c>)
1000b814:	4a47      	ldr	r2, [pc, #284]	; (1000b934 <platform_driver_init+0x170>)
1000b816:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b818:	4a47      	ldr	r2, [pc, #284]	; (1000b938 <platform_driver_init+0x174>)
1000b81a:	6811      	ldr	r1, [r2, #0]
1000b81c:	4a47      	ldr	r2, [pc, #284]	; (1000b93c <platform_driver_init+0x178>)
1000b81e:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b820:	4a47      	ldr	r2, [pc, #284]	; (1000b940 <platform_driver_init+0x17c>)
1000b822:	6811      	ldr	r1, [r2, #0]
1000b824:	4a47      	ldr	r2, [pc, #284]	; (1000b944 <platform_driver_init+0x180>)
1000b826:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b828:	4947      	ldr	r1, [pc, #284]	; (1000b948 <platform_driver_init+0x184>)
1000b82a:	4a48      	ldr	r2, [pc, #288]	; (1000b94c <platform_driver_init+0x188>)
1000b82c:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b82e:	4948      	ldr	r1, [pc, #288]	; (1000b950 <platform_driver_init+0x18c>)
1000b830:	4a48      	ldr	r2, [pc, #288]	; (1000b954 <platform_driver_init+0x190>)
1000b832:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b834:	4f48      	ldr	r7, [pc, #288]	; (1000b958 <platform_driver_init+0x194>)
1000b836:	4a49      	ldr	r2, [pc, #292]	; (1000b95c <platform_driver_init+0x198>)
1000b838:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b83a:	4949      	ldr	r1, [pc, #292]	; (1000b960 <platform_driver_init+0x19c>)
1000b83c:	4a49      	ldr	r2, [pc, #292]	; (1000b964 <platform_driver_init+0x1a0>)
1000b83e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b840:	4949      	ldr	r1, [pc, #292]	; (1000b968 <platform_driver_init+0x1a4>)
1000b842:	4a4a      	ldr	r2, [pc, #296]	; (1000b96c <platform_driver_init+0x1a8>)
1000b844:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b846:	4e4a      	ldr	r6, [pc, #296]	; (1000b970 <platform_driver_init+0x1ac>)
1000b848:	4a4a      	ldr	r2, [pc, #296]	; (1000b974 <platform_driver_init+0x1b0>)
1000b84a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b84c:	494a      	ldr	r1, [pc, #296]	; (1000b978 <platform_driver_init+0x1b4>)
1000b84e:	4a4b      	ldr	r2, [pc, #300]	; (1000b97c <platform_driver_init+0x1b8>)
1000b850:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b852:	494b      	ldr	r1, [pc, #300]	; (1000b980 <platform_driver_init+0x1bc>)
1000b854:	4a4b      	ldr	r2, [pc, #300]	; (1000b984 <platform_driver_init+0x1c0>)
1000b856:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b858:	494b      	ldr	r1, [pc, #300]	; (1000b988 <platform_driver_init+0x1c4>)
1000b85a:	4a4c      	ldr	r2, [pc, #304]	; (1000b98c <platform_driver_init+0x1c8>)
1000b85c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b85e:	494c      	ldr	r1, [pc, #304]	; (1000b990 <platform_driver_init+0x1cc>)
1000b860:	4a4c      	ldr	r2, [pc, #304]	; (1000b994 <platform_driver_init+0x1d0>)
1000b862:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b864:	494c      	ldr	r1, [pc, #304]	; (1000b998 <platform_driver_init+0x1d4>)
1000b866:	4a4d      	ldr	r2, [pc, #308]	; (1000b99c <platform_driver_init+0x1d8>)
1000b868:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b86a:	2028      	movs	r0, #40	; 0x28
1000b86c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b86e:	494c      	ldr	r1, [pc, #304]	; (1000b9a0 <platform_driver_init+0x1dc>)
1000b870:	2028      	movs	r0, #40	; 0x28
1000b872:	682b      	ldr	r3, [r5, #0]
1000b874:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b876:	682b      	ldr	r3, [r5, #0]
1000b878:	494a      	ldr	r1, [pc, #296]	; (1000b9a4 <platform_driver_init+0x1e0>)
1000b87a:	2027      	movs	r0, #39	; 0x27
1000b87c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b87e:	4b4a      	ldr	r3, [pc, #296]	; (1000b9a8 <platform_driver_init+0x1e4>)
1000b880:	681a      	ldr	r2, [r3, #0]
1000b882:	4b4a      	ldr	r3, [pc, #296]	; (1000b9ac <platform_driver_init+0x1e8>)
1000b884:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b886:	4a4a      	ldr	r2, [pc, #296]	; (1000b9b0 <platform_driver_init+0x1ec>)
1000b888:	4b4a      	ldr	r3, [pc, #296]	; (1000b9b4 <platform_driver_init+0x1f0>)
1000b88a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b88c:	4a4a      	ldr	r2, [pc, #296]	; (1000b9b8 <platform_driver_init+0x1f4>)
1000b88e:	4b4b      	ldr	r3, [pc, #300]	; (1000b9bc <platform_driver_init+0x1f8>)
1000b890:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b892:	4a4b      	ldr	r2, [pc, #300]	; (1000b9c0 <platform_driver_init+0x1fc>)
1000b894:	4b4b      	ldr	r3, [pc, #300]	; (1000b9c4 <platform_driver_init+0x200>)
1000b896:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b898:	4a4b      	ldr	r2, [pc, #300]	; (1000b9c8 <platform_driver_init+0x204>)
1000b89a:	4b4c      	ldr	r3, [pc, #304]	; (1000b9cc <platform_driver_init+0x208>)
1000b89c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b89e:	4a4c      	ldr	r2, [pc, #304]	; (1000b9d0 <platform_driver_init+0x20c>)
1000b8a0:	4b4c      	ldr	r3, [pc, #304]	; (1000b9d4 <platform_driver_init+0x210>)
1000b8a2:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b8a4:	4a4c      	ldr	r2, [pc, #304]	; (1000b9d8 <platform_driver_init+0x214>)
1000b8a6:	4b4d      	ldr	r3, [pc, #308]	; (1000b9dc <platform_driver_init+0x218>)
1000b8a8:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b8aa:	4a4d      	ldr	r2, [pc, #308]	; (1000b9e0 <platform_driver_init+0x21c>)
1000b8ac:	4b4d      	ldr	r3, [pc, #308]	; (1000b9e4 <platform_driver_init+0x220>)
1000b8ae:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b8b0:	22a0      	movs	r2, #160	; 0xa0
1000b8b2:	0092      	lsls	r2, r2, #2
1000b8b4:	2100      	movs	r1, #0
1000b8b6:	484c      	ldr	r0, [pc, #304]	; (1000b9e8 <platform_driver_init+0x224>)
1000b8b8:	4b4c      	ldr	r3, [pc, #304]	; (1000b9ec <platform_driver_init+0x228>)
1000b8ba:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b8bc:	2280      	movs	r2, #128	; 0x80
1000b8be:	0092      	lsls	r2, r2, #2
1000b8c0:	4b4b      	ldr	r3, [pc, #300]	; (1000b9f0 <platform_driver_init+0x22c>)
1000b8c2:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b8c4:	4b4b      	ldr	r3, [pc, #300]	; (1000b9f4 <platform_driver_init+0x230>)
1000b8c6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b8c8:	4653      	mov	r3, sl
1000b8ca:	6023      	str	r3, [r4, #0]
1000b8cc:	464b      	mov	r3, r9
1000b8ce:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b8d0:	4b49      	ldr	r3, [pc, #292]	; (1000b9f8 <platform_driver_init+0x234>)
1000b8d2:	4642      	mov	r2, r8
1000b8d4:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b8d6:	683b      	ldr	r3, [r7, #0]
1000b8d8:	4a48      	ldr	r2, [pc, #288]	; (1000b9fc <platform_driver_init+0x238>)
1000b8da:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b8dc:	6833      	ldr	r3, [r6, #0]
1000b8de:	4a48      	ldr	r2, [pc, #288]	; (1000ba00 <platform_driver_init+0x23c>)
1000b8e0:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b8e2:	2000      	movs	r0, #0
1000b8e4:	4c47      	ldr	r4, [pc, #284]	; (1000ba04 <platform_driver_init+0x240>)
1000b8e6:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b8e8:	2001      	movs	r0, #1
1000b8ea:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b8ec:	2002      	movs	r0, #2
1000b8ee:	47a0      	blx	r4
		platform_initialized = 1;
1000b8f0:	2201      	movs	r2, #1
1000b8f2:	4b06      	ldr	r3, [pc, #24]	; (1000b90c <platform_driver_init+0x148>)
1000b8f4:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b8f6:	2000      	movs	r0, #0
1000b8f8:	e003      	b.n	1000b902 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b8fa:	2201      	movs	r2, #1
1000b8fc:	4b03      	ldr	r3, [pc, #12]	; (1000b90c <platform_driver_init+0x148>)
1000b8fe:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b900:	2001      	movs	r0, #1
	}
	return status;
}
1000b902:	bc1c      	pop	{r2, r3, r4}
1000b904:	4690      	mov	r8, r2
1000b906:	4699      	mov	r9, r3
1000b908:	46a2      	mov	sl, r4
1000b90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b90c:	10015298 	.word	0x10015298
1000b910:	1000b751 	.word	0x1000b751
1000b914:	1000b795 	.word	0x1000b795
1000b918:	100152b8 	.word	0x100152b8
1000b91c:	e000e100 	.word	0xe000e100
1000b920:	10015f4c 	.word	0x10015f4c
1000b924:	000007d7 	.word	0x000007d7
1000b928:	000007bd 	.word	0x000007bd
1000b92c:	10015c88 	.word	0x10015c88
1000b930:	0001bc51 	.word	0x0001bc51
1000b934:	10015f50 	.word	0x10015f50
1000b938:	100400bc 	.word	0x100400bc
1000b93c:	10015288 	.word	0x10015288
1000b940:	100400b8 	.word	0x100400b8
1000b944:	10015284 	.word	0x10015284
1000b948:	0001b99f 	.word	0x0001b99f
1000b94c:	10015c84 	.word	0x10015c84
1000b950:	0001b9db 	.word	0x0001b9db
1000b954:	10015c90 	.word	0x10015c90
1000b958:	10015f60 	.word	0x10015f60
1000b95c:	1004003c 	.word	0x1004003c
1000b960:	10041fc0 	.word	0x10041fc0
1000b964:	10015c94 	.word	0x10015c94
1000b968:	10041fc4 	.word	0x10041fc4
1000b96c:	10015f5c 	.word	0x10015f5c
1000b970:	10015f54 	.word	0x10015f54
1000b974:	10041fd4 	.word	0x10041fd4
1000b978:	10041fd8 	.word	0x10041fd8
1000b97c:	10015c8c 	.word	0x10015c8c
1000b980:	0001cbe9 	.word	0x0001cbe9
1000b984:	100152a8 	.word	0x100152a8
1000b988:	0001cd8f 	.word	0x0001cd8f
1000b98c:	1001529c 	.word	0x1001529c
1000b990:	0001cea3 	.word	0x0001cea3
1000b994:	100152bc 	.word	0x100152bc
1000b998:	0001cbcf 	.word	0x0001cbcf
1000b99c:	10015294 	.word	0x10015294
1000b9a0:	1000be31 	.word	0x1000be31
1000b9a4:	1000bdc5 	.word	0x1000bdc5
1000b9a8:	100400e4 	.word	0x100400e4
1000b9ac:	100152b0 	.word	0x100152b0
1000b9b0:	00019fe9 	.word	0x00019fe9
1000b9b4:	100152c0 	.word	0x100152c0
1000b9b8:	0001dbdd 	.word	0x0001dbdd
1000b9bc:	10015290 	.word	0x10015290
1000b9c0:	0001dc5b 	.word	0x0001dc5b
1000b9c4:	100152a4 	.word	0x100152a4
1000b9c8:	100405ec 	.word	0x100405ec
1000b9cc:	100152a0 	.word	0x100152a0
1000b9d0:	0001d5e3 	.word	0x0001d5e3
1000b9d4:	100152ac 	.word	0x100152ac
1000b9d8:	10040c20 	.word	0x10040c20
1000b9dc:	100152c4 	.word	0x100152c4
1000b9e0:	00019f09 	.word	0x00019f09
1000b9e4:	10015280 	.word	0x10015280
1000b9e8:	10015ccc 	.word	0x10015ccc
1000b9ec:	100116ad 	.word	0x100116ad
1000b9f0:	10015f64 	.word	0x10015f64
1000b9f4:	1000b67d 	.word	0x1000b67d
1000b9f8:	10015f58 	.word	0x10015f58
1000b9fc:	1000b725 	.word	0x1000b725
1000ba00:	1000be8d 	.word	0x1000be8d
1000ba04:	1000be75 	.word	0x1000be75

1000ba08 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ba08:	4b04      	ldr	r3, [pc, #16]	; (1000ba1c <platform_register_ble_msg_handler+0x14>)
1000ba0a:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000ba0c:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000ba0e:	2a01      	cmp	r2, #1
1000ba10:	d102      	bne.n	1000ba18 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000ba12:	4b03      	ldr	r3, [pc, #12]	; (1000ba20 <platform_register_ble_msg_handler+0x18>)
1000ba14:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000ba16:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000ba18:	0018      	movs	r0, r3
1000ba1a:	4770      	bx	lr
1000ba1c:	10015298 	.word	0x10015298
1000ba20:	100152b8 	.word	0x100152b8

1000ba24 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000ba24:	b570      	push	{r4, r5, r6, lr}
1000ba26:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000ba28:	4b0e      	ldr	r3, [pc, #56]	; (1000ba64 <platform_interface_send+0x40>)
1000ba2a:	681b      	ldr	r3, [r3, #0]
1000ba2c:	2b00      	cmp	r3, #0
1000ba2e:	d002      	beq.n	1000ba36 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000ba30:	8840      	ldrh	r0, [r0, #2]
1000ba32:	4798      	blx	r3
1000ba34:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000ba36:	88e3      	ldrh	r3, [r4, #6]
1000ba38:	88a2      	ldrh	r2, [r4, #4]
1000ba3a:	8861      	ldrh	r1, [r4, #2]
1000ba3c:	8820      	ldrh	r0, [r4, #0]
1000ba3e:	4d0a      	ldr	r5, [pc, #40]	; (1000ba68 <platform_interface_send+0x44>)
1000ba40:	682d      	ldr	r5, [r5, #0]
1000ba42:	47a8      	blx	r5
1000ba44:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000ba46:	88e2      	ldrh	r2, [r4, #6]
1000ba48:	2a00      	cmp	r2, #0
1000ba4a:	d102      	bne.n	1000ba52 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000ba4c:	4b07      	ldr	r3, [pc, #28]	; (1000ba6c <platform_interface_send+0x48>)
1000ba4e:	4798      	blx	r3
1000ba50:	e006      	b.n	1000ba60 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000ba52:	0021      	movs	r1, r4
1000ba54:	3108      	adds	r1, #8
1000ba56:	4b06      	ldr	r3, [pc, #24]	; (1000ba70 <platform_interface_send+0x4c>)
1000ba58:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000ba5a:	0028      	movs	r0, r5
1000ba5c:	4b03      	ldr	r3, [pc, #12]	; (1000ba6c <platform_interface_send+0x48>)
1000ba5e:	4798      	blx	r3
	}
}
1000ba60:	bd70      	pop	{r4, r5, r6, pc}
1000ba62:	46c0      	nop			; (mov r8, r8)
1000ba64:	10015288 	.word	0x10015288
1000ba68:	100152c0 	.word	0x100152c0
1000ba6c:	1000b6ad 	.word	0x1000b6ad
1000ba70:	1001169b 	.word	0x1001169b

1000ba74 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000ba74:	b570      	push	{r4, r5, r6, lr}
1000ba76:	0015      	movs	r5, r2
1000ba78:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000ba7a:	020a      	lsls	r2, r1, #8
1000ba7c:	4302      	orrs	r2, r0
1000ba7e:	4b0a      	ldr	r3, [pc, #40]	; (1000baa8 <send_plf_int_msg_ind+0x34>)
1000ba80:	681e      	ldr	r6, [r3, #0]
1000ba82:	0023      	movs	r3, r4
1000ba84:	2105      	movs	r1, #5
1000ba86:	20a0      	movs	r0, #160	; 0xa0
1000ba88:	00c0      	lsls	r0, r0, #3
1000ba8a:	47b0      	blx	r6
1000ba8c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000ba8e:	d00a      	beq.n	1000baa6 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000ba90:	2c00      	cmp	r4, #0
1000ba92:	d005      	beq.n	1000baa0 <send_plf_int_msg_ind+0x2c>
1000ba94:	2d00      	cmp	r5, #0
1000ba96:	d003      	beq.n	1000baa0 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000ba98:	0022      	movs	r2, r4
1000ba9a:	0029      	movs	r1, r5
1000ba9c:	4b03      	ldr	r3, [pc, #12]	; (1000baac <send_plf_int_msg_ind+0x38>)
1000ba9e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000baa0:	0030      	movs	r0, r6
1000baa2:	4b03      	ldr	r3, [pc, #12]	; (1000bab0 <send_plf_int_msg_ind+0x3c>)
1000baa4:	4798      	blx	r3
	}
}
1000baa6:	bd70      	pop	{r4, r5, r6, pc}
1000baa8:	100152c0 	.word	0x100152c0
1000baac:	1001169b 	.word	0x1001169b
1000bab0:	1000b6ad 	.word	0x1000b6ad

1000bab4 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bab6:	465f      	mov	r7, fp
1000bab8:	4656      	mov	r6, sl
1000baba:	464d      	mov	r5, r9
1000babc:	4644      	mov	r4, r8
1000babe:	b4f0      	push	{r4, r5, r6, r7}
1000bac0:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bac2:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000bac4:	2300      	movs	r3, #0
1000bac6:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bac8:	1ce3      	adds	r3, r4, #3
1000baca:	d81c      	bhi.n	1000bb06 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000bacc:	220d      	movs	r2, #13
1000bace:	2100      	movs	r1, #0
1000bad0:	a802      	add	r0, sp, #8
1000bad2:	4b82      	ldr	r3, [pc, #520]	; (1000bcdc <platform_event_wait+0x228>)
1000bad4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000bad6:	2333      	movs	r3, #51	; 0x33
1000bad8:	aa02      	add	r2, sp, #8
1000bada:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000badc:	3b30      	subs	r3, #48	; 0x30
1000bade:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000bae0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000bae2:	3302      	adds	r3, #2
1000bae4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000bae6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000bae8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000baea:	0a23      	lsrs	r3, r4, #8
1000baec:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000baee:	0c23      	lsrs	r3, r4, #16
1000baf0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000baf2:	0e24      	lsrs	r4, r4, #24
1000baf4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000baf6:	2301      	movs	r3, #1
1000baf8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000bafa:	210d      	movs	r1, #13
1000bafc:	0010      	movs	r0, r2
1000bafe:	4b78      	ldr	r3, [pc, #480]	; (1000bce0 <platform_event_wait+0x22c>)
1000bb00:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000bb02:	2301      	movs	r3, #1
1000bb04:	4699      	mov	r9, r3
1000bb06:	2400      	movs	r4, #0
1000bb08:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000bb0a:	4f76      	ldr	r7, [pc, #472]	; (1000bce4 <platform_event_wait+0x230>)
1000bb0c:	4e76      	ldr	r6, [pc, #472]	; (1000bce8 <platform_event_wait+0x234>)
1000bb0e:	4977      	ldr	r1, [pc, #476]	; (1000bcec <platform_event_wait+0x238>)
1000bb10:	6838      	ldr	r0, [r7, #0]
1000bb12:	6833      	ldr	r3, [r6, #0]
1000bb14:	4798      	blx	r3
1000bb16:	2800      	cmp	r0, #0
1000bb18:	d000      	beq.n	1000bb1c <platform_event_wait+0x68>
1000bb1a:	e088      	b.n	1000bc2e <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000bb1c:	4b73      	ldr	r3, [pc, #460]	; (1000bcec <platform_event_wait+0x238>)
1000bb1e:	681c      	ldr	r4, [r3, #0]
1000bb20:	88a3      	ldrh	r3, [r4, #4]
1000bb22:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000bb24:	23cd      	movs	r3, #205	; 0xcd
1000bb26:	009b      	lsls	r3, r3, #2
1000bb28:	459a      	cmp	sl, r3
1000bb2a:	d100      	bne.n	1000bb2e <platform_event_wait+0x7a>
1000bb2c:	e0c7      	b.n	1000bcbe <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000bb2e:	8923      	ldrh	r3, [r4, #8]
1000bb30:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000bb32:	8963      	ldrh	r3, [r4, #10]
1000bb34:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000bb36:	464b      	mov	r3, r9
1000bb38:	2b00      	cmp	r3, #0
1000bb3a:	d011      	beq.n	1000bb60 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000bb3c:	220d      	movs	r2, #13
1000bb3e:	2100      	movs	r1, #0
1000bb40:	a802      	add	r0, sp, #8
1000bb42:	4b66      	ldr	r3, [pc, #408]	; (1000bcdc <platform_event_wait+0x228>)
1000bb44:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000bb46:	2333      	movs	r3, #51	; 0x33
1000bb48:	aa02      	add	r2, sp, #8
1000bb4a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000bb4c:	3b30      	subs	r3, #48	; 0x30
1000bb4e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000bb50:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000bb52:	3302      	adds	r3, #2
1000bb54:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000bb56:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000bb58:	210d      	movs	r1, #13
1000bb5a:	0010      	movs	r0, r2
1000bb5c:	4b60      	ldr	r3, [pc, #384]	; (1000bce0 <platform_event_wait+0x22c>)
1000bb5e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000bb60:	23a0      	movs	r3, #160	; 0xa0
1000bb62:	00db      	lsls	r3, r3, #3
1000bb64:	459a      	cmp	sl, r3
1000bb66:	d121      	bne.n	1000bbac <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000bb68:	4b61      	ldr	r3, [pc, #388]	; (1000bcf0 <platform_event_wait+0x23c>)
1000bb6a:	881b      	ldrh	r3, [r3, #0]
1000bb6c:	4443      	add	r3, r8
1000bb6e:	22a0      	movs	r2, #160	; 0xa0
1000bb70:	0092      	lsls	r2, r2, #2
1000bb72:	4293      	cmp	r3, r2
1000bb74:	dd02      	ble.n	1000bb7c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000bb76:	3a80      	subs	r2, #128	; 0x80
1000bb78:	4b5d      	ldr	r3, [pc, #372]	; (1000bcf0 <platform_event_wait+0x23c>)
1000bb7a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000bb7c:	4b5c      	ldr	r3, [pc, #368]	; (1000bcf0 <platform_event_wait+0x23c>)
1000bb7e:	469a      	mov	sl, r3
1000bb80:	881d      	ldrh	r5, [r3, #0]
1000bb82:	4b5c      	ldr	r3, [pc, #368]	; (1000bcf4 <platform_event_wait+0x240>)
1000bb84:	18ed      	adds	r5, r5, r3
1000bb86:	0021      	movs	r1, r4
1000bb88:	310c      	adds	r1, #12
1000bb8a:	4642      	mov	r2, r8
1000bb8c:	0028      	movs	r0, r5
1000bb8e:	4b5a      	ldr	r3, [pc, #360]	; (1000bcf8 <platform_event_wait+0x244>)
1000bb90:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000bb92:	4642      	mov	r2, r8
1000bb94:	0029      	movs	r1, r5
1000bb96:	4658      	mov	r0, fp
1000bb98:	4b58      	ldr	r3, [pc, #352]	; (1000bcfc <platform_event_wait+0x248>)
1000bb9a:	4798      	blx	r3
				plf_event_buff_index += len;
1000bb9c:	4653      	mov	r3, sl
1000bb9e:	881b      	ldrh	r3, [r3, #0]
1000bba0:	4443      	add	r3, r8
1000bba2:	4652      	mov	r2, sl
1000bba4:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000bba6:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000bba8:	2502      	movs	r5, #2
1000bbaa:	e03a      	b.n	1000bc22 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000bbac:	4b54      	ldr	r3, [pc, #336]	; (1000bd00 <platform_event_wait+0x24c>)
1000bbae:	681b      	ldr	r3, [r3, #0]
1000bbb0:	2b00      	cmp	r3, #0
1000bbb2:	d032      	beq.n	1000bc1a <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000bbb4:	4b4d      	ldr	r3, [pc, #308]	; (1000bcec <platform_event_wait+0x238>)
1000bbb6:	681a      	ldr	r2, [r3, #0]
1000bbb8:	8893      	ldrh	r3, [r2, #4]
1000bbba:	21cd      	movs	r1, #205	; 0xcd
1000bbbc:	0089      	lsls	r1, r1, #2
1000bbbe:	428b      	cmp	r3, r1
1000bbc0:	d104      	bne.n	1000bbcc <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000bbc2:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000bbc4:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000bbc6:	2b00      	cmp	r3, #0
1000bbc8:	d02b      	beq.n	1000bc22 <platform_event_wait+0x16e>
1000bbca:	e028      	b.n	1000bc1e <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000bbcc:	4c4d      	ldr	r4, [pc, #308]	; (1000bd04 <platform_event_wait+0x250>)
1000bbce:	4d49      	ldr	r5, [pc, #292]	; (1000bcf4 <platform_event_wait+0x240>)
1000bbd0:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000bbd2:	702b      	strb	r3, [r5, #0]
1000bbd4:	0a1b      	lsrs	r3, r3, #8
1000bbd6:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000bbd8:	8910      	ldrh	r0, [r2, #8]
1000bbda:	4b4b      	ldr	r3, [pc, #300]	; (1000bd08 <platform_event_wait+0x254>)
1000bbdc:	681b      	ldr	r3, [r3, #0]
1000bbde:	4798      	blx	r3
1000bbe0:	7128      	strb	r0, [r5, #4]
1000bbe2:	0a00      	lsrs	r0, r0, #8
1000bbe4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000bbe6:	6820      	ldr	r0, [r4, #0]
1000bbe8:	4b40      	ldr	r3, [pc, #256]	; (1000bcec <platform_event_wait+0x238>)
1000bbea:	681a      	ldr	r2, [r3, #0]
1000bbec:	88d2      	ldrh	r2, [r2, #6]
1000bbee:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000bbf0:	681d      	ldr	r5, [r3, #0]
1000bbf2:	896b      	ldrh	r3, [r5, #10]
1000bbf4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000bbf6:	3008      	adds	r0, #8
1000bbf8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000bbfa:	896a      	ldrh	r2, [r5, #10]
1000bbfc:	2a00      	cmp	r2, #0
1000bbfe:	d003      	beq.n	1000bc08 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000bc00:	0029      	movs	r1, r5
1000bc02:	310c      	adds	r1, #12
1000bc04:	4b3c      	ldr	r3, [pc, #240]	; (1000bcf8 <platform_event_wait+0x244>)
1000bc06:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000bc08:	8969      	ldrh	r1, [r5, #10]
1000bc0a:	3108      	adds	r1, #8
1000bc0c:	4b3c      	ldr	r3, [pc, #240]	; (1000bd00 <platform_event_wait+0x24c>)
1000bc0e:	681b      	ldr	r3, [r3, #0]
1000bc10:	4838      	ldr	r0, [pc, #224]	; (1000bcf4 <platform_event_wait+0x240>)
1000bc12:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000bc14:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000bc16:	2503      	movs	r5, #3
1000bc18:	e003      	b.n	1000bc22 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000bc1a:	2400      	movs	r4, #0
1000bc1c:	e001      	b.n	1000bc22 <platform_event_wait+0x16e>
1000bc1e:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000bc20:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000bc22:	4b32      	ldr	r3, [pc, #200]	; (1000bcec <platform_event_wait+0x238>)
1000bc24:	6818      	ldr	r0, [r3, #0]
1000bc26:	4b39      	ldr	r3, [pc, #228]	; (1000bd0c <platform_event_wait+0x258>)
1000bc28:	681b      	ldr	r3, [r3, #0]
1000bc2a:	4798      	blx	r3
1000bc2c:	e000      	b.n	1000bc30 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000bc2e:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000bc30:	2c00      	cmp	r4, #0
1000bc32:	d000      	beq.n	1000bc36 <platform_event_wait+0x182>
1000bc34:	e76b      	b.n	1000bb0e <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000bc36:	464b      	mov	r3, r9
1000bc38:	2b00      	cmp	r3, #0
1000bc3a:	d046      	beq.n	1000bcca <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000bc3c:	4b29      	ldr	r3, [pc, #164]	; (1000bce4 <platform_event_wait+0x230>)
1000bc3e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000bc40:	2e00      	cmp	r6, #0
1000bc42:	d104      	bne.n	1000bc4e <platform_event_wait+0x19a>
1000bc44:	2300      	movs	r3, #0
1000bc46:	6a1c      	ldr	r4, [r3, #32]
1000bc48:	2c00      	cmp	r4, #0
1000bc4a:	d131      	bne.n	1000bcb0 <platform_event_wait+0x1fc>
1000bc4c:	e03d      	b.n	1000bcca <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000bc4e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000bc50:	2314      	movs	r3, #20
1000bc52:	469c      	mov	ip, r3
1000bc54:	44b4      	add	ip, r6
1000bc56:	4663      	mov	r3, ip
1000bc58:	4660      	mov	r0, ip
1000bc5a:	9300      	str	r3, [sp, #0]
1000bc5c:	4b2c      	ldr	r3, [pc, #176]	; (1000bd10 <platform_event_wait+0x25c>)
1000bc5e:	681b      	ldr	r3, [r3, #0]
1000bc60:	4798      	blx	r3
	while(NULL != current)
1000bc62:	2c00      	cmp	r4, #0
1000bc64:	d01f      	beq.n	1000bca6 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000bc66:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000bc68:	23cd      	movs	r3, #205	; 0xcd
1000bc6a:	009b      	lsls	r3, r3, #2
1000bc6c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000bc6e:	4b27      	ldr	r3, [pc, #156]	; (1000bd0c <platform_event_wait+0x258>)
1000bc70:	469a      	mov	sl, r3
1000bc72:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000bc74:	6803      	ldr	r3, [r0, #0]
1000bc76:	889b      	ldrh	r3, [r3, #4]
1000bc78:	4543      	cmp	r3, r8
1000bc7a:	d110      	bne.n	1000bc9e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000bc7c:	2f00      	cmp	r7, #0
1000bc7e:	d006      	beq.n	1000bc8e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000bc80:	6883      	ldr	r3, [r0, #8]
1000bc82:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000bc84:	4653      	mov	r3, sl
1000bc86:	681b      	ldr	r3, [r3, #0]
1000bc88:	4798      	blx	r3
				current = prev->pstrNext;
1000bc8a:	68b8      	ldr	r0, [r7, #8]
1000bc8c:	e009      	b.n	1000bca2 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000bc8e:	6883      	ldr	r3, [r0, #8]
1000bc90:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000bc92:	4b1e      	ldr	r3, [pc, #120]	; (1000bd0c <platform_event_wait+0x258>)
1000bc94:	681b      	ldr	r3, [r3, #0]
1000bc96:	9301      	str	r3, [sp, #4]
1000bc98:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000bc9a:	6a30      	ldr	r0, [r6, #32]
1000bc9c:	e001      	b.n	1000bca2 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000bc9e:	0007      	movs	r7, r0
1000bca0:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000bca2:	2800      	cmp	r0, #0
1000bca4:	d1e6      	bne.n	1000bc74 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000bca6:	4b1b      	ldr	r3, [pc, #108]	; (1000bd14 <platform_event_wait+0x260>)
1000bca8:	681b      	ldr	r3, [r3, #0]
1000bcaa:	9800      	ldr	r0, [sp, #0]
1000bcac:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000bcae:	e00c      	b.n	1000bcca <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000bcb0:	2314      	movs	r3, #20
1000bcb2:	9300      	str	r3, [sp, #0]
1000bcb4:	4b16      	ldr	r3, [pc, #88]	; (1000bd10 <platform_event_wait+0x25c>)
1000bcb6:	681b      	ldr	r3, [r3, #0]
1000bcb8:	2014      	movs	r0, #20
1000bcba:	4798      	blx	r3
1000bcbc:	e7d3      	b.n	1000bc66 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000bcbe:	4b10      	ldr	r3, [pc, #64]	; (1000bd00 <platform_event_wait+0x24c>)
1000bcc0:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000bcc2:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000bcc4:	2b00      	cmp	r3, #0
1000bcc6:	d0ac      	beq.n	1000bc22 <platform_event_wait+0x16e>
1000bcc8:	e77b      	b.n	1000bbc2 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000bcca:	0028      	movs	r0, r5
1000bccc:	b007      	add	sp, #28
1000bcce:	bc3c      	pop	{r2, r3, r4, r5}
1000bcd0:	4690      	mov	r8, r2
1000bcd2:	4699      	mov	r9, r3
1000bcd4:	46a2      	mov	sl, r4
1000bcd6:	46ab      	mov	fp, r5
1000bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bcda:	46c0      	nop			; (mov r8, r8)
1000bcdc:	100116ad 	.word	0x100116ad
1000bce0:	1000ba25 	.word	0x1000ba25
1000bce4:	100152c4 	.word	0x100152c4
1000bce8:	100152ac 	.word	0x100152ac
1000bcec:	1001528c 	.word	0x1001528c
1000bcf0:	10015f64 	.word	0x10015f64
1000bcf4:	10015ccc 	.word	0x10015ccc
1000bcf8:	1001169b 	.word	0x1001169b
1000bcfc:	1000b645 	.word	0x1000b645
1000bd00:	100152b8 	.word	0x100152b8
1000bd04:	100152b4 	.word	0x100152b4
1000bd08:	10015284 	.word	0x10015284
1000bd0c:	10015280 	.word	0x10015280
1000bd10:	100152a4 	.word	0x100152a4
1000bd14:	10015290 	.word	0x10015290

1000bd18 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000bd18:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000bd1a:	4b03      	ldr	r3, [pc, #12]	; (1000bd28 <acquire_sleep_lock+0x10>)
1000bd1c:	681b      	ldr	r3, [r3, #0]
1000bd1e:	2080      	movs	r0, #128	; 0x80
1000bd20:	0200      	lsls	r0, r0, #8
1000bd22:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000bd24:	2008      	movs	r0, #8
1000bd26:	bd10      	pop	{r4, pc}
1000bd28:	10015c84 	.word	0x10015c84

1000bd2c <release_message_lock>:

plf_drv_status release_message_lock()
{
1000bd2c:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000bd2e:	4b03      	ldr	r3, [pc, #12]	; (1000bd3c <release_message_lock+0x10>)
1000bd30:	681b      	ldr	r3, [r3, #0]
1000bd32:	2080      	movs	r0, #128	; 0x80
1000bd34:	01c0      	lsls	r0, r0, #7
1000bd36:	4798      	blx	r3
	return status;
}
1000bd38:	2000      	movs	r0, #0
1000bd3a:	bd10      	pop	{r4, pc}
1000bd3c:	10015c90 	.word	0x10015c90

1000bd40 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000bd40:	2800      	cmp	r0, #0
1000bd42:	d003      	beq.n	1000bd4c <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000bd44:	4b02      	ldr	r3, [pc, #8]	; (1000bd50 <register_resume_callback+0x10>)
1000bd46:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000bd48:	2000      	movs	r0, #0
1000bd4a:	e000      	b.n	1000bd4e <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000bd4c:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000bd4e:	4770      	bx	lr
1000bd50:	10015f58 	.word	0x10015f58

1000bd54 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000bd54:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000bd56:	4a18      	ldr	r2, [pc, #96]	; (1000bdb8 <gpio1_combined_isr_handler+0x64>)
1000bd58:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bd5a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000bd5c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000bd5e:	2180      	movs	r1, #128	; 0x80
1000bd60:	0209      	lsls	r1, r1, #8
1000bd62:	4301      	orrs	r1, r0
1000bd64:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bd66:	0010      	movs	r0, r2
1000bd68:	4d14      	ldr	r5, [pc, #80]	; (1000bdbc <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bd6a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bd6c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bd6e:	05db      	lsls	r3, r3, #23
1000bd70:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000bd72:	d011      	beq.n	1000bd98 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000bd74:	b2db      	uxtb	r3, r3
1000bd76:	4259      	negs	r1, r3
1000bd78:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000bd7a:	2b01      	cmp	r3, #1
1000bd7c:	d006      	beq.n	1000bd8c <gpio1_combined_isr_handler+0x38>
1000bd7e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000bd80:	085b      	lsrs	r3, r3, #1
				index++;
1000bd82:	3101      	adds	r1, #1
1000bd84:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000bd86:	2b01      	cmp	r3, #1
1000bd88:	d1fa      	bne.n	1000bd80 <gpio1_combined_isr_handler+0x2c>
1000bd8a:	e000      	b.n	1000bd8e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bd8c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bd8e:	0023      	movs	r3, r4
1000bd90:	408b      	lsls	r3, r1
1000bd92:	b29b      	uxth	r3, r3
1000bd94:	8703      	strh	r3, [r0, #56]	; 0x38
1000bd96:	e003      	b.n	1000bda0 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bd98:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000bd9a:	432b      	orrs	r3, r5
1000bd9c:	b29b      	uxth	r3, r3
1000bd9e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000bda0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bda2:	05db      	lsls	r3, r3, #23
1000bda4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000bda6:	d1e2      	bne.n	1000bd6e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000bda8:	2180      	movs	r1, #128	; 0x80
1000bdaa:	0049      	lsls	r1, r1, #1
1000bdac:	3381      	adds	r3, #129	; 0x81
1000bdae:	33ff      	adds	r3, #255	; 0xff
1000bdb0:	4a03      	ldr	r2, [pc, #12]	; (1000bdc0 <gpio1_combined_isr_handler+0x6c>)
1000bdb2:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000bdb4:	bd30      	pop	{r4, r5, pc}
1000bdb6:	46c0      	nop			; (mov r8, r8)
1000bdb8:	40011000 	.word	0x40011000
1000bdbc:	ffff8000 	.word	0xffff8000
1000bdc0:	e000e100 	.word	0xe000e100

1000bdc4 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000bdc4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000bdc6:	4a17      	ldr	r2, [pc, #92]	; (1000be24 <gpio0_combined_isr_handler+0x60>)
1000bdc8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000bdca:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000bdcc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000bdce:	2180      	movs	r1, #128	; 0x80
1000bdd0:	0209      	lsls	r1, r1, #8
1000bdd2:	4301      	orrs	r1, r0
1000bdd4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000bdd6:	0010      	movs	r0, r2
1000bdd8:	4d13      	ldr	r5, [pc, #76]	; (1000be28 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bdda:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bddc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000bdde:	05db      	lsls	r3, r3, #23
1000bde0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000bde2:	d011      	beq.n	1000be08 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000bde4:	b2db      	uxtb	r3, r3
1000bde6:	4259      	negs	r1, r3
1000bde8:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000bdea:	2b01      	cmp	r3, #1
1000bdec:	d006      	beq.n	1000bdfc <gpio0_combined_isr_handler+0x38>
1000bdee:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000bdf0:	085b      	lsrs	r3, r3, #1
				index++;
1000bdf2:	3101      	adds	r1, #1
1000bdf4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000bdf6:	2b01      	cmp	r3, #1
1000bdf8:	d1fa      	bne.n	1000bdf0 <gpio0_combined_isr_handler+0x2c>
1000bdfa:	e000      	b.n	1000bdfe <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000bdfc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000bdfe:	0023      	movs	r3, r4
1000be00:	408b      	lsls	r3, r1
1000be02:	b29b      	uxth	r3, r3
1000be04:	8703      	strh	r3, [r0, #56]	; 0x38
1000be06:	e003      	b.n	1000be10 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000be08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000be0a:	432b      	orrs	r3, r5
1000be0c:	b29b      	uxth	r3, r3
1000be0e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000be10:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000be12:	05db      	lsls	r3, r3, #23
1000be14:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000be16:	d1e2      	bne.n	1000bdde <gpio0_combined_isr_handler+0x1a>
1000be18:	2180      	movs	r1, #128	; 0x80
1000be1a:	3381      	adds	r3, #129	; 0x81
1000be1c:	33ff      	adds	r3, #255	; 0xff
1000be1e:	4a03      	ldr	r2, [pc, #12]	; (1000be2c <gpio0_combined_isr_handler+0x68>)
1000be20:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000be22:	bd30      	pop	{r4, r5, pc}
1000be24:	40010000 	.word	0x40010000
1000be28:	ffff8000 	.word	0xffff8000
1000be2c:	e000e100 	.word	0xe000e100

1000be30 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000be30:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000be32:	4b0c      	ldr	r3, [pc, #48]	; (1000be64 <PORT1_COMB_Handler+0x34>)
1000be34:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000be36:	0b5b      	lsrs	r3, r3, #13
1000be38:	d010      	beq.n	1000be5c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000be3a:	4b0b      	ldr	r3, [pc, #44]	; (1000be68 <PORT1_COMB_Handler+0x38>)
1000be3c:	681b      	ldr	r3, [r3, #0]
1000be3e:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000be40:	4a08      	ldr	r2, [pc, #32]	; (1000be64 <PORT1_COMB_Handler+0x34>)
1000be42:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000be44:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000be46:	0b5b      	lsrs	r3, r3, #13
1000be48:	035b      	lsls	r3, r3, #13
1000be4a:	430b      	orrs	r3, r1
1000be4c:	8713      	strh	r3, [r2, #56]	; 0x38
1000be4e:	2180      	movs	r1, #128	; 0x80
1000be50:	0049      	lsls	r1, r1, #1
1000be52:	23c0      	movs	r3, #192	; 0xc0
1000be54:	005b      	lsls	r3, r3, #1
1000be56:	4a05      	ldr	r2, [pc, #20]	; (1000be6c <PORT1_COMB_Handler+0x3c>)
1000be58:	50d1      	str	r1, [r2, r3]
1000be5a:	e001      	b.n	1000be60 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000be5c:	4b04      	ldr	r3, [pc, #16]	; (1000be70 <PORT1_COMB_Handler+0x40>)
1000be5e:	4798      	blx	r3
	}
}
1000be60:	bd10      	pop	{r4, pc}
1000be62:	46c0      	nop			; (mov r8, r8)
1000be64:	40011000 	.word	0x40011000
1000be68:	10015f50 	.word	0x10015f50
1000be6c:	e000e100 	.word	0xe000e100
1000be70:	1000bd55 	.word	0x1000bd55

1000be74 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000be74:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000be76:	2802      	cmp	r0, #2
1000be78:	d804      	bhi.n	1000be84 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000be7a:	0080      	lsls	r0, r0, #2
1000be7c:	2200      	movs	r2, #0
1000be7e:	4b02      	ldr	r3, [pc, #8]	; (1000be88 <wakeup_int_unregister_callback+0x14>)
1000be80:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000be82:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000be84:	0018      	movs	r0, r3
1000be86:	4770      	bx	lr
1000be88:	10015f68 	.word	0x10015f68

1000be8c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000be8c:	b510      	push	{r4, lr}
1000be8e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000be90:	7803      	ldrb	r3, [r0, #0]
1000be92:	2b01      	cmp	r3, #1
1000be94:	d108      	bne.n	1000bea8 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000be96:	4b11      	ldr	r3, [pc, #68]	; (1000bedc <wakeup_active_event_callback+0x50>)
1000be98:	681b      	ldr	r3, [r3, #0]
1000be9a:	2b00      	cmp	r3, #0
1000be9c:	d000      	beq.n	1000bea0 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000be9e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000bea0:	23ff      	movs	r3, #255	; 0xff
1000bea2:	6822      	ldr	r2, [r4, #0]
1000bea4:	439a      	bics	r2, r3
1000bea6:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000bea8:	7863      	ldrb	r3, [r4, #1]
1000beaa:	2b01      	cmp	r3, #1
1000beac:	d108      	bne.n	1000bec0 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000beae:	4b0b      	ldr	r3, [pc, #44]	; (1000bedc <wakeup_active_event_callback+0x50>)
1000beb0:	685b      	ldr	r3, [r3, #4]
1000beb2:	2b00      	cmp	r3, #0
1000beb4:	d000      	beq.n	1000beb8 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000beb6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000beb8:	4b09      	ldr	r3, [pc, #36]	; (1000bee0 <wakeup_active_event_callback+0x54>)
1000beba:	6822      	ldr	r2, [r4, #0]
1000bebc:	4013      	ands	r3, r2
1000bebe:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000bec0:	78a3      	ldrb	r3, [r4, #2]
1000bec2:	2b01      	cmp	r3, #1
1000bec4:	d108      	bne.n	1000bed8 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000bec6:	4b05      	ldr	r3, [pc, #20]	; (1000bedc <wakeup_active_event_callback+0x50>)
1000bec8:	689b      	ldr	r3, [r3, #8]
1000beca:	2b00      	cmp	r3, #0
1000becc:	d000      	beq.n	1000bed0 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000bece:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000bed0:	4b04      	ldr	r3, [pc, #16]	; (1000bee4 <wakeup_active_event_callback+0x58>)
1000bed2:	6822      	ldr	r2, [r4, #0]
1000bed4:	4013      	ands	r3, r2
1000bed6:	6023      	str	r3, [r4, #0]
	}
}
1000bed8:	bd10      	pop	{r4, pc}
1000beda:	46c0      	nop			; (mov r8, r8)
1000bedc:	10015f68 	.word	0x10015f68
1000bee0:	ffff00ff 	.word	0xffff00ff
1000bee4:	ff00ffff 	.word	0xff00ffff

1000bee8 <ble_paired_app_event>:
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	timer_cb_done = false;
1000bee8:	2200      	movs	r2, #0
1000beea:	4b02      	ldr	r3, [pc, #8]	; (1000bef4 <ble_paired_app_event+0xc>)
1000beec:	701a      	strb	r2, [r3, #0]
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000beee:	2000      	movs	r0, #0
1000bef0:	4770      	bx	lr
1000bef2:	46c0      	nop			; (mov r8, r8)
1000bef4:	100152d0 	.word	0x100152d0

1000bef8 <ble_connected_app_event>:
}

static at_ble_status_t ble_connected_app_event(void *param)
{
	at_ble_connected_t *connected = (at_ble_connected_t *)param;
	bat_connection_handle = connected->handle;
1000bef8:	8902      	ldrh	r2, [r0, #8]
1000befa:	4b02      	ldr	r3, [pc, #8]	; (1000bf04 <ble_connected_app_event+0xc>)
1000befc:	801a      	strh	r2, [r3, #0]
		ble_paired_app_event(param);
	#else
		ALL_UNUSED(param);
	#endif
	return AT_BLE_SUCCESS;
}
1000befe:	2000      	movs	r0, #0
1000bf00:	4770      	bx	lr
1000bf02:	46c0      	nop			; (mov r8, r8)
1000bf04:	10015f74 	.word	0x10015f74

1000bf08 <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
1000bf08:	78c3      	ldrb	r3, [r0, #3]
1000bf0a:	2b00      	cmp	r3, #0
1000bf0c:	d102      	bne.n	1000bf14 <ble_notification_confirmed_app_event+0xc>
	{
		flag = true;
1000bf0e:	2201      	movs	r2, #1
1000bf10:	4b01      	ldr	r3, [pc, #4]	; (1000bf18 <ble_notification_confirmed_app_event+0x10>)
1000bf12:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("sending notification to the peer success");				
	}
	return AT_BLE_SUCCESS;
}
1000bf14:	2000      	movs	r0, #0
1000bf16:	4770      	bx	lr
1000bf18:	10013849 	.word	0x10013849

1000bf1c <resume_cb>:
	NULL,
	NULL
};

void resume_cb(void)
{
1000bf1c:	b510      	push	{r4, lr}
	init_port_list();
1000bf1e:	4b02      	ldr	r3, [pc, #8]	; (1000bf28 <resume_cb+0xc>)
1000bf20:	4798      	blx	r3
	//uart_init(UART_HW_MODULE_UART1,&uart_cfg);
	serial_console_init();
1000bf22:	4b02      	ldr	r3, [pc, #8]	; (1000bf2c <resume_cb+0x10>)
1000bf24:	4798      	blx	r3
}
1000bf26:	bd10      	pop	{r4, pc}
1000bf28:	1000b751 	.word	0x1000b751
1000bf2c:	1000b4b9 	.word	0x1000b4b9

1000bf30 <app_htpt_cfg_indntf_ind_handler>:
#endif
	}
}

static at_ble_status_t  app_htpt_cfg_indntf_ind_handler(void *params)
{
1000bf30:	b510      	push	{r4, lr}
	at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params, sizeof(at_ble_htpt_cfg_indntf_ind_t));
	if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 1) {
1000bf32:	7843      	ldrb	r3, [r0, #1]
1000bf34:	2b01      	cmp	r3, #1
1000bf36:	d106      	bne.n	1000bf46 <app_htpt_cfg_indntf_ind_handler+0x16>
		printf("Started HTP Temperature Notification");
1000bf38:	4807      	ldr	r0, [pc, #28]	; (1000bf58 <app_htpt_cfg_indntf_ind_handler+0x28>)
1000bf3a:	4b08      	ldr	r3, [pc, #32]	; (1000bf5c <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000bf3c:	4798      	blx	r3
		Temp_Notification_Flag = true;
1000bf3e:	2201      	movs	r2, #1
1000bf40:	4b07      	ldr	r3, [pc, #28]	; (1000bf60 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000bf42:	701a      	strb	r2, [r3, #0]
1000bf44:	e005      	b.n	1000bf52 <app_htpt_cfg_indntf_ind_handler+0x22>
	}
	else {
		printf("HTP Temperature Notification Stopped");
1000bf46:	4807      	ldr	r0, [pc, #28]	; (1000bf64 <app_htpt_cfg_indntf_ind_handler+0x34>)
1000bf48:	4b04      	ldr	r3, [pc, #16]	; (1000bf5c <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000bf4a:	4798      	blx	r3
		Temp_Notification_Flag = false;
1000bf4c:	2200      	movs	r2, #0
1000bf4e:	4b04      	ldr	r3, [pc, #16]	; (1000bf60 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000bf50:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
1000bf52:	2000      	movs	r0, #0
1000bf54:	bd10      	pop	{r4, pc}
1000bf56:	46c0      	nop			; (mov r8, r8)
1000bf58:	10013390 	.word	0x10013390
1000bf5c:	100116bd 	.word	0x100116bd
1000bf60:	100152cf 	.word	0x100152cf
1000bf64:	100133b8 	.word	0x100133b8

1000bf68 <transfer_done_tx>:

void resume_cb(void);


static void transfer_done_tx(struct dma_resource* const resource )
{
1000bf68:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_tx);
1000bf6a:	4802      	ldr	r0, [pc, #8]	; (1000bf74 <transfer_done_tx+0xc>)
1000bf6c:	4b02      	ldr	r3, [pc, #8]	; (1000bf78 <transfer_done_tx+0x10>)
1000bf6e:	4798      	blx	r3
}
1000bf70:	bd10      	pop	{r4, pc}
1000bf72:	46c0      	nop			; (mov r8, r8)
1000bf74:	10015f88 	.word	0x10015f88
1000bf78:	10008465 	.word	0x10008465

1000bf7c <ble_char_changed_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
1000bf7c:	b510      	push	{r4, lr}
1000bf7e:	0004      	movs	r4, r0
	uint16_t device_listening;
	at_ble_characteristic_changed_t *char_handle = (at_ble_characteristic_changed_t *)param;

	if(bas_service_handler.serv_chars.client_config_handle == char_handle->char_handle)
1000bf80:	234a      	movs	r3, #74	; 0x4a
1000bf82:	4a0d      	ldr	r2, [pc, #52]	; (1000bfb8 <ble_char_changed_app_event+0x3c>)
1000bf84:	5ad2      	ldrh	r2, [r2, r3]
1000bf86:	8843      	ldrh	r3, [r0, #2]
1000bf88:	429a      	cmp	r2, r3
1000bf8a:	d10d      	bne.n	1000bfa8 <ble_char_changed_app_event+0x2c>
	{
		device_listening = char_handle->char_new_value[1]<<8| char_handle->char_new_value[0];
		if(!device_listening)
1000bf8c:	7a43      	ldrb	r3, [r0, #9]
1000bf8e:	021b      	lsls	r3, r3, #8
1000bf90:	7a02      	ldrb	r2, [r0, #8]
1000bf92:	4313      	orrs	r3, r2
1000bf94:	d102      	bne.n	1000bf9c <ble_char_changed_app_event+0x20>
		{		
			aon_sleep_timer_service_stop();			
1000bf96:	4b09      	ldr	r3, [pc, #36]	; (1000bfbc <ble_char_changed_app_event+0x40>)
1000bf98:	4798      	blx	r3
1000bf9a:	e005      	b.n	1000bfa8 <ble_char_changed_app_event+0x2c>
		}
		else
		{
			aon_sleep_timer_service_init(1);
1000bf9c:	2001      	movs	r0, #1
1000bf9e:	4b08      	ldr	r3, [pc, #32]	; (1000bfc0 <ble_char_changed_app_event+0x44>)
1000bfa0:	4798      	blx	r3
			aon_sleep_timer_service_start(aon_sleep_timer_callback);
1000bfa2:	4808      	ldr	r0, [pc, #32]	; (1000bfc4 <ble_char_changed_app_event+0x48>)
1000bfa4:	4b08      	ldr	r3, [pc, #32]	; (1000bfc8 <ble_char_changed_app_event+0x4c>)
1000bfa6:	4798      	blx	r3
		}			
	}	
	return bat_char_changed_event(char_handle->conn_handle,&bas_service_handler, char_handle, &flag);	
1000bfa8:	7820      	ldrb	r0, [r4, #0]
1000bfaa:	4b08      	ldr	r3, [pc, #32]	; (1000bfcc <ble_char_changed_app_event+0x50>)
1000bfac:	0022      	movs	r2, r4
1000bfae:	4902      	ldr	r1, [pc, #8]	; (1000bfb8 <ble_char_changed_app_event+0x3c>)
1000bfb0:	4c07      	ldr	r4, [pc, #28]	; (1000bfd0 <ble_char_changed_app_event+0x54>)
1000bfb2:	47a0      	blx	r4
}
1000bfb4:	bd10      	pop	{r4, pc}
1000bfb6:	46c0      	nop			; (mov r8, r8)
1000bfb8:	1001601c 	.word	0x1001601c
1000bfbc:	1000b361 	.word	0x1000b361
1000bfc0:	1000b2f9 	.word	0x1000b2f9
1000bfc4:	1000bfd5 	.word	0x1000bfd5
1000bfc8:	1000b32d 	.word	0x1000b32d
1000bfcc:	10013849 	.word	0x10013849
1000bfd0:	1000a0bd 	.word	0x1000a0bd

1000bfd4 <aon_sleep_timer_callback>:

/**
 * \Timer callback handler called on timer expiry
 */
static void aon_sleep_timer_callback(void)
{
1000bfd4:	b510      	push	{r4, lr}
	timer_cb_done = true;
1000bfd6:	2201      	movs	r2, #1
1000bfd8:	4b04      	ldr	r3, [pc, #16]	; (1000bfec <aon_sleep_timer_callback+0x18>)
1000bfda:	701a      	strb	r2, [r3, #0]
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000bfdc:	2300      	movs	r3, #0
1000bfde:	2200      	movs	r2, #0
1000bfe0:	2101      	movs	r1, #1
1000bfe2:	2041      	movs	r0, #65	; 0x41
1000bfe4:	4c02      	ldr	r4, [pc, #8]	; (1000bff0 <aon_sleep_timer_callback+0x1c>)
1000bfe6:	47a0      	blx	r4
}
1000bfe8:	bd10      	pop	{r4, pc}
1000bfea:	46c0      	nop			; (mov r8, r8)
1000bfec:	100152d0 	.word	0x100152d0
1000bff0:	1000ba75 	.word	0x1000ba75

1000bff4 <timer_callback_handler>:



/* Timer callback */
static void timer_callback_handler(void)
{
1000bff4:	b510      	push	{r4, lr}
	/* Stop timer */
	hw_timer_stop();
1000bff6:	4b04      	ldr	r3, [pc, #16]	; (1000c008 <timer_callback_handler+0x14>)
1000bff8:	4798      	blx	r3
	/* Set timer Alarm flag */
	Timer_Flag = true;
1000bffa:	2201      	movs	r2, #1
1000bffc:	4b03      	ldr	r3, [pc, #12]	; (1000c00c <timer_callback_handler+0x18>)
1000bffe:	701a      	strb	r2, [r3, #0]
	/* Restart Timer */
	hw_timer_start(10);
1000c000:	200a      	movs	r0, #10
1000c002:	4b03      	ldr	r3, [pc, #12]	; (1000c010 <timer_callback_handler+0x1c>)
1000c004:	4798      	blx	r3
}
1000c006:	bd10      	pop	{r4, pc}
1000c008:	1000b425 	.word	0x1000b425
1000c00c:	100152db 	.word	0x100152db
1000c010:	1000b3f9 	.word	0x1000b3f9

1000c014 <battery_service_advertise>:
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}

/* Advertisement data set and Advertisement start */
static at_ble_status_t battery_service_advertise(void)
{
1000c014:	b510      	push	{r4, lr}
1000c016:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS)
1000c018:	4b16      	ldr	r3, [pc, #88]	; (1000c074 <battery_service_advertise+0x60>)
1000c01a:	4798      	blx	r3
1000c01c:	1e04      	subs	r4, r0, #0
1000c01e:	d008      	beq.n	1000c032 <battery_service_advertise+0x1e>
	{
		DBG_LOG("advertisement data set failed reason :%d",status);
1000c020:	4815      	ldr	r0, [pc, #84]	; (1000c078 <battery_service_advertise+0x64>)
1000c022:	4b16      	ldr	r3, [pc, #88]	; (1000c07c <battery_service_advertise+0x68>)
1000c024:	4798      	blx	r3
1000c026:	0021      	movs	r1, r4
1000c028:	4815      	ldr	r0, [pc, #84]	; (1000c080 <battery_service_advertise+0x6c>)
1000c02a:	4b16      	ldr	r3, [pc, #88]	; (1000c084 <battery_service_advertise+0x70>)
1000c02c:	4798      	blx	r3
		return status;
1000c02e:	0020      	movs	r0, r4
1000c030:	e01e      	b.n	1000c070 <battery_service_advertise+0x5c>
	}
	
	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_BAS_FAST_ADV, APP_BAS_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000c032:	2300      	movs	r3, #0
1000c034:	9302      	str	r3, [sp, #8]
1000c036:	4b14      	ldr	r3, [pc, #80]	; (1000c088 <battery_service_advertise+0x74>)
1000c038:	9301      	str	r3, [sp, #4]
1000c03a:	23c8      	movs	r3, #200	; 0xc8
1000c03c:	00db      	lsls	r3, r3, #3
1000c03e:	9300      	str	r3, [sp, #0]
1000c040:	2300      	movs	r3, #0
1000c042:	2200      	movs	r2, #0
1000c044:	2101      	movs	r1, #1
1000c046:	2000      	movs	r0, #0
1000c048:	4c10      	ldr	r4, [pc, #64]	; (1000c08c <battery_service_advertise+0x78>)
1000c04a:	47a0      	blx	r4
1000c04c:	1e04      	subs	r4, r0, #0
1000c04e:	d107      	bne.n	1000c060 <battery_service_advertise+0x4c>
	{
		DBG_LOG("BLE Started Adv");
1000c050:	4809      	ldr	r0, [pc, #36]	; (1000c078 <battery_service_advertise+0x64>)
1000c052:	4b0a      	ldr	r3, [pc, #40]	; (1000c07c <battery_service_advertise+0x68>)
1000c054:	4798      	blx	r3
1000c056:	480e      	ldr	r0, [pc, #56]	; (1000c090 <battery_service_advertise+0x7c>)
1000c058:	4b0a      	ldr	r3, [pc, #40]	; (1000c084 <battery_service_advertise+0x70>)
1000c05a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000c05c:	2000      	movs	r0, #0
1000c05e:	e007      	b.n	1000c070 <battery_service_advertise+0x5c>
	}
	else
	{
		DBG_LOG("BLE Adv start Failed reason :%d",status);
1000c060:	4805      	ldr	r0, [pc, #20]	; (1000c078 <battery_service_advertise+0x64>)
1000c062:	4b06      	ldr	r3, [pc, #24]	; (1000c07c <battery_service_advertise+0x68>)
1000c064:	4798      	blx	r3
1000c066:	0021      	movs	r1, r4
1000c068:	480a      	ldr	r0, [pc, #40]	; (1000c094 <battery_service_advertise+0x80>)
1000c06a:	4b06      	ldr	r3, [pc, #24]	; (1000c084 <battery_service_advertise+0x70>)
1000c06c:	4798      	blx	r3
	}
	return status;
1000c06e:	0020      	movs	r0, r4
}
1000c070:	b004      	add	sp, #16
1000c072:	bd10      	pop	{r4, pc}
1000c074:	1000b271 	.word	0x1000b271
1000c078:	10012ab8 	.word	0x10012ab8
1000c07c:	100117dd 	.word	0x100117dd
1000c080:	100133e0 	.word	0x100133e0
1000c084:	100116bd 	.word	0x100116bd
1000c088:	0000028f 	.word	0x0000028f
1000c08c:	1000d229 	.word	0x1000d229
1000c090:	1001340c 	.word	0x1001340c
1000c094:	1001341c 	.word	0x1001341c

1000c098 <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000c098:	b510      	push	{r4, lr}
	timer_cb_done = false;
1000c09a:	2200      	movs	r2, #0
1000c09c:	4b05      	ldr	r3, [pc, #20]	; (1000c0b4 <ble_disconnected_app_event+0x1c>)
1000c09e:	701a      	strb	r2, [r3, #0]
	flag = true;
1000c0a0:	3201      	adds	r2, #1
1000c0a2:	4b05      	ldr	r3, [pc, #20]	; (1000c0b8 <ble_disconnected_app_event+0x20>)
1000c0a4:	701a      	strb	r2, [r3, #0]
	
	aon_sleep_timer_service_stop();
1000c0a6:	4b05      	ldr	r3, [pc, #20]	; (1000c0bc <ble_disconnected_app_event+0x24>)
1000c0a8:	4798      	blx	r3
	battery_service_advertise();
1000c0aa:	4b05      	ldr	r3, [pc, #20]	; (1000c0c0 <ble_disconnected_app_event+0x28>)
1000c0ac:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000c0ae:	2000      	movs	r0, #0
1000c0b0:	bd10      	pop	{r4, pc}
1000c0b2:	46c0      	nop			; (mov r8, r8)
1000c0b4:	100152d0 	.word	0x100152d0
1000c0b8:	10013849 	.word	0x10013849
1000c0bc:	1000b361 	.word	0x1000b361
1000c0c0:	1000c015 	.word	0x1000c015

1000c0c4 <ble_disconnected_cb>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event */
static at_ble_status_t ble_disconnected_cb (void *param)
{
1000c0c4:	b510      	push	{r4, lr}
1000c0c6:	b084      	sub	sp, #16
	printf("\nAssignment 3.2: Application disconnected ");
1000c0c8:	4817      	ldr	r0, [pc, #92]	; (1000c128 <ble_disconnected_cb+0x64>)
1000c0ca:	4c18      	ldr	r4, [pc, #96]	; (1000c12c <ble_disconnected_cb+0x68>)
1000c0cc:	47a0      	blx	r4
}


static void ble_advertise (void)
{
	printf("\nAssignment 2.1 : Start Advertising");
1000c0ce:	4818      	ldr	r0, [pc, #96]	; (1000c130 <ble_disconnected_cb+0x6c>)
1000c0d0:	47a0      	blx	r4
	status = ble_advertisement_data_set();
1000c0d2:	4b18      	ldr	r3, [pc, #96]	; (1000c134 <ble_disconnected_cb+0x70>)
1000c0d4:	4798      	blx	r3
1000c0d6:	4b18      	ldr	r3, [pc, #96]	; (1000c138 <ble_disconnected_cb+0x74>)
1000c0d8:	7018      	strb	r0, [r3, #0]
	if(status != AT_BLE_SUCCESS)
1000c0da:	781b      	ldrb	r3, [r3, #0]
1000c0dc:	2b00      	cmp	r3, #0
1000c0de:	d006      	beq.n	1000c0ee <ble_disconnected_cb+0x2a>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000c0e0:	4b15      	ldr	r3, [pc, #84]	; (1000c138 <ble_disconnected_cb+0x74>)
1000c0e2:	7819      	ldrb	r1, [r3, #0]
1000c0e4:	b2c9      	uxtb	r1, r1
1000c0e6:	4815      	ldr	r0, [pc, #84]	; (1000c13c <ble_disconnected_cb+0x78>)
1000c0e8:	4b10      	ldr	r3, [pc, #64]	; (1000c12c <ble_disconnected_cb+0x68>)
1000c0ea:	4798      	blx	r3
1000c0ec:	e7fe      	b.n	1000c0ec <ble_disconnected_cb+0x28>
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
1000c0ee:	2300      	movs	r3, #0
1000c0f0:	9302      	str	r3, [sp, #8]
1000c0f2:	4b13      	ldr	r3, [pc, #76]	; (1000c140 <ble_disconnected_cb+0x7c>)
1000c0f4:	9301      	str	r3, [sp, #4]
1000c0f6:	335a      	adds	r3, #90	; 0x5a
1000c0f8:	33ff      	adds	r3, #255	; 0xff
1000c0fa:	9300      	str	r3, [sp, #0]
1000c0fc:	2300      	movs	r3, #0
1000c0fe:	2200      	movs	r2, #0
1000c100:	2101      	movs	r1, #1
1000c102:	2000      	movs	r0, #0
1000c104:	4c0f      	ldr	r4, [pc, #60]	; (1000c144 <ble_disconnected_cb+0x80>)
1000c106:	47a0      	blx	r4
1000c108:	4b0b      	ldr	r3, [pc, #44]	; (1000c138 <ble_disconnected_cb+0x74>)
1000c10a:	7018      	strb	r0, [r3, #0]
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
1000c10c:	781b      	ldrb	r3, [r3, #0]
1000c10e:	2b00      	cmp	r3, #0
1000c110:	d006      	beq.n	1000c120 <ble_disconnected_cb+0x5c>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000c112:	4b09      	ldr	r3, [pc, #36]	; (1000c138 <ble_disconnected_cb+0x74>)
1000c114:	7819      	ldrb	r1, [r3, #0]
1000c116:	b2c9      	uxtb	r1, r1
1000c118:	4808      	ldr	r0, [pc, #32]	; (1000c13c <ble_disconnected_cb+0x78>)
1000c11a:	4b04      	ldr	r3, [pc, #16]	; (1000c12c <ble_disconnected_cb+0x68>)
1000c11c:	4798      	blx	r3
1000c11e:	e7fe      	b.n	1000c11e <ble_disconnected_cb+0x5a>
static at_ble_status_t ble_disconnected_cb (void *param)
{
	printf("\nAssignment 3.2: Application disconnected ");
	ble_advertise();
	ALL_UNUSED(param);return AT_BLE_SUCCESS;
}
1000c120:	2000      	movs	r0, #0
1000c122:	b004      	add	sp, #16
1000c124:	bd10      	pop	{r4, pc}
1000c126:	46c0      	nop			; (mov r8, r8)
1000c128:	1001343c 	.word	0x1001343c
1000c12c:	100116bd 	.word	0x100116bd
1000c130:	10013468 	.word	0x10013468
1000c134:	1000b271 	.word	0x1000b271
1000c138:	1001606c 	.word	0x1001606c
1000c13c:	1001348c 	.word	0x1001348c
1000c140:	0000028f 	.word	0x0000028f
1000c144:	1000d229 	.word	0x1000d229

1000c148 <ble_paired_cb>:
	}
}

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_paired_cb (void *param)
{
1000c148:	b570      	push	{r4, r5, r6, lr}
1000c14a:	0005      	movs	r5, r0
	at_ble_pair_done_t *pair_params = param;
	printf("\nAssignment 3.2: Application paired ");
1000c14c:	4809      	ldr	r0, [pc, #36]	; (1000c174 <ble_paired_cb+0x2c>)
1000c14e:	4c0a      	ldr	r4, [pc, #40]	; (1000c178 <ble_paired_cb+0x30>)
1000c150:	47a0      	blx	r4
	/* Enable the HTP Profile */
	printf("\nAssignment 4.1: enable health temperature service ");
1000c152:	480a      	ldr	r0, [pc, #40]	; (1000c17c <ble_paired_cb+0x34>)
1000c154:	47a0      	blx	r4
	status = at_ble_htpt_enable(pair_params->handle,
1000c156:	8868      	ldrh	r0, [r5, #2]
1000c158:	2101      	movs	r1, #1
1000c15a:	4b09      	ldr	r3, [pc, #36]	; (1000c180 <ble_paired_cb+0x38>)
1000c15c:	4798      	blx	r3
1000c15e:	4b09      	ldr	r3, [pc, #36]	; (1000c184 <ble_paired_cb+0x3c>)
1000c160:	7018      	strb	r0, [r3, #0]
	HTPT_CFG_STABLE_MEAS_IND);
	if(status != AT_BLE_SUCCESS){
1000c162:	781b      	ldrb	r3, [r3, #0]
1000c164:	2b00      	cmp	r3, #0
1000c166:	d003      	beq.n	1000c170 <ble_paired_cb+0x28>
		printf("*** Failure in HTP Profile Enable");
1000c168:	4807      	ldr	r0, [pc, #28]	; (1000c188 <ble_paired_cb+0x40>)
1000c16a:	4b03      	ldr	r3, [pc, #12]	; (1000c178 <ble_paired_cb+0x30>)
1000c16c:	4798      	blx	r3
1000c16e:	e7fe      	b.n	1000c16e <ble_paired_cb+0x26>
		while(1);
	}
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000c170:	2000      	movs	r0, #0
1000c172:	bd70      	pop	{r4, r5, r6, pc}
1000c174:	100134bc 	.word	0x100134bc
1000c178:	100116bd 	.word	0x100116bd
1000c17c:	100134e4 	.word	0x100134e4
1000c180:	1000e035 	.word	0x1000e035
1000c184:	1001606c 	.word	0x1001606c
1000c188:	10013518 	.word	0x10013518

1000c18c <transfer_done_rx>:
	Header: 1 Byte. 
	'T' for temperature command, Rest 5 bytes for temperature value 
	'L' for Light Command, ext byte '0' for LED ON, 'F' for LED OFF, 4 bytes padded to make size consistent	 
*/
static void transfer_done_rx(struct dma_resource* const resource )
{	
1000c18c:	b530      	push	{r4, r5, lr}
1000c18e:	b083      	sub	sp, #12
	dma_start_transfer_job(&uart_dma_resource_rx);											// Restart the DMA transfer
1000c190:	481a      	ldr	r0, [pc, #104]	; (1000c1fc <transfer_done_rx+0x70>)
1000c192:	4b1b      	ldr	r3, [pc, #108]	; (1000c200 <transfer_done_rx+0x74>)
1000c194:	4798      	blx	r3
	int i=0;	
	uint8_t temp_buffer[BUFFER_LEN+1];													
	strcpy(temp_buffer,string);																// Copy DMA buffer to local buffer
1000c196:	4c1b      	ldr	r4, [pc, #108]	; (1000c204 <transfer_done_rx+0x78>)
1000c198:	0021      	movs	r1, r4
1000c19a:	4668      	mov	r0, sp
1000c19c:	4b1a      	ldr	r3, [pc, #104]	; (1000c208 <transfer_done_rx+0x7c>)
1000c19e:	4798      	blx	r3
	memset(string,0,sizeof(string));														// Reset the DMA Buffer
1000c1a0:	2207      	movs	r2, #7
1000c1a2:	2100      	movs	r1, #0
1000c1a4:	0020      	movs	r0, r4
1000c1a6:	4b19      	ldr	r3, [pc, #100]	; (1000c20c <transfer_done_rx+0x80>)
1000c1a8:	4798      	blx	r3
	printf("\n");
1000c1aa:	200a      	movs	r0, #10
1000c1ac:	4b18      	ldr	r3, [pc, #96]	; (1000c210 <transfer_done_rx+0x84>)
1000c1ae:	4798      	blx	r3
	//printf("MJ: %s", temp_buffer);
	for(i=0;i<BUFFER_LEN;i++)
1000c1b0:	2400      	movs	r4, #0
 		printf("%c",temp_buffer[i]);
1000c1b2:	4d17      	ldr	r5, [pc, #92]	; (1000c210 <transfer_done_rx+0x84>)
1000c1b4:	466b      	mov	r3, sp
1000c1b6:	5ce0      	ldrb	r0, [r4, r3]
1000c1b8:	47a8      	blx	r5
	uint8_t temp_buffer[BUFFER_LEN+1];													
	strcpy(temp_buffer,string);																// Copy DMA buffer to local buffer
	memset(string,0,sizeof(string));														// Reset the DMA Buffer
	printf("\n");
	//printf("MJ: %s", temp_buffer);
	for(i=0;i<BUFFER_LEN;i++)
1000c1ba:	3401      	adds	r4, #1
1000c1bc:	2c06      	cmp	r4, #6
1000c1be:	d1f9      	bne.n	1000c1b4 <transfer_done_rx+0x28>
 		printf("%c",temp_buffer[i]);
	//printf("\n");
	temp_buffer[BUFFER_LEN] = '\0';															// NULL terminate for string functions to work
1000c1c0:	2300      	movs	r3, #0
1000c1c2:	466a      	mov	r2, sp
1000c1c4:	7193      	strb	r3, [r2, #6]
	if(temp_buffer[0] == LIGHT_SENSOR)														// IF light command
1000c1c6:	7813      	ldrb	r3, [r2, #0]
1000c1c8:	2b4c      	cmp	r3, #76	; 0x4c
1000c1ca:	d10e      	bne.n	1000c1ea <transfer_done_rx+0x5e>
	{
		if(temp_buffer[1] == LEDON)
1000c1cc:	7853      	ldrb	r3, [r2, #1]
1000c1ce:	2b4e      	cmp	r3, #78	; 0x4e
1000c1d0:	d104      	bne.n	1000c1dc <transfer_done_rx+0x50>
			gpio_pin_set_output_level(LED_0_PIN,LED_ON);									// Turn ON LED if ON in leopard gecko
1000c1d2:	2100      	movs	r1, #0
1000c1d4:	2016      	movs	r0, #22
1000c1d6:	4b0f      	ldr	r3, [pc, #60]	; (1000c214 <transfer_done_rx+0x88>)
1000c1d8:	4798      	blx	r3
1000c1da:	e00c      	b.n	1000c1f6 <transfer_done_rx+0x6a>
					
		else if(temp_buffer[1] == LEDOFF)
1000c1dc:	2b46      	cmp	r3, #70	; 0x46
1000c1de:	d10a      	bne.n	1000c1f6 <transfer_done_rx+0x6a>
			gpio_pin_set_output_level(LED_0_PIN,LED_OFF);									// Turn OFF LED if OFF in leopard gecko
1000c1e0:	2101      	movs	r1, #1
1000c1e2:	2016      	movs	r0, #22
1000c1e4:	4b0b      	ldr	r3, [pc, #44]	; (1000c214 <transfer_done_rx+0x88>)
1000c1e6:	4798      	blx	r3
1000c1e8:	e005      	b.n	1000c1f6 <transfer_done_rx+0x6a>
	}	
	else if(temp_buffer[0] == TEMP_SENSOR)													// If temperature Data
1000c1ea:	2b54      	cmp	r3, #84	; 0x54
1000c1ec:	d103      	bne.n	1000c1f6 <transfer_done_rx+0x6a>
	{
		strcpy(temperature_buffer,(temp_buffer+1));											// Copy in temperature buffer
1000c1ee:	1c51      	adds	r1, r2, #1
1000c1f0:	4809      	ldr	r0, [pc, #36]	; (1000c218 <transfer_done_rx+0x8c>)
1000c1f2:	4b05      	ldr	r3, [pc, #20]	; (1000c208 <transfer_done_rx+0x7c>)
1000c1f4:	4798      	blx	r3
		//for(i=0;i<8;i++)
			//printf("%c",temp_buffer[i]);
	}
	//printf("%ld",strlen(temp_buffer));	
	
}
1000c1f6:	b003      	add	sp, #12
1000c1f8:	bd30      	pop	{r4, r5, pc}
1000c1fa:	46c0      	nop			; (mov r8, r8)
1000c1fc:	10015fb8 	.word	0x10015fb8
1000c200:	10008465 	.word	0x10008465
1000c204:	100152c8 	.word	0x100152c8
1000c208:	100119dd 	.word	0x100119dd
1000c20c:	100116ad 	.word	0x100116ad
1000c210:	100116f1 	.word	0x100116f1
1000c214:	10008f7d 	.word	0x10008f7d
1000c218:	100152d4 	.word	0x100152d4

1000c21c <led_config>:
	printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
#endif
}

void led_config(void)
{
1000c21c:	b510      	push	{r4, lr}
1000c21e:	b082      	sub	sp, #8
	struct gpio_config pin_conf;
	gpio_get_config_defaults(&pin_conf);
1000c220:	ac01      	add	r4, sp, #4
1000c222:	0020      	movs	r0, r4
1000c224:	4b06      	ldr	r3, [pc, #24]	; (1000c240 <led_config+0x24>)
1000c226:	4798      	blx	r3
		
	pin_conf.direction = GPIO_PIN_DIR_OUTPUT;
1000c228:	2301      	movs	r3, #1
1000c22a:	7023      	strb	r3, [r4, #0]
	gpio_pin_set_config(LED0_PIN,&pin_conf);
1000c22c:	0021      	movs	r1, r4
1000c22e:	2016      	movs	r0, #22
1000c230:	4b04      	ldr	r3, [pc, #16]	; (1000c244 <led_config+0x28>)
1000c232:	4798      	blx	r3
	gpio_pin_set_output_level(LED_0_PIN,LED_OFF);
1000c234:	2101      	movs	r1, #1
1000c236:	2016      	movs	r0, #22
1000c238:	4b03      	ldr	r3, [pc, #12]	; (1000c248 <led_config+0x2c>)
1000c23a:	4798      	blx	r3
	
}
1000c23c:	b002      	add	sp, #8
1000c23e:	bd10      	pop	{r4, pc}
1000c240:	10008db5 	.word	0x10008db5
1000c244:	10008dc5 	.word	0x10008dc5
1000c248:	10008f7d 	.word	0x10008f7d

1000c24c <main>:

/**
* \Battery Service Application main function
*/
int main(void)
{
1000c24c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c24e:	4657      	mov	r7, sl
1000c250:	464e      	mov	r6, r9
1000c252:	4645      	mov	r5, r8
1000c254:	b4e0      	push	{r5, r6, r7}
1000c256:	b090      	sub	sp, #64	; 0x40
	at_ble_status_t status;
	uint8_t battery_level = BATTERY_MIN_LEVEL;	
1000c258:	253f      	movs	r5, #63	; 0x3f
1000c25a:	446d      	add	r5, sp
1000c25c:	2300      	movs	r3, #0
1000c25e:	702b      	strb	r3, [r5, #0]
	
	platform_driver_init();
1000c260:	4bad      	ldr	r3, [pc, #692]	; (1000c518 <main+0x2cc>)
1000c262:	4798      	blx	r3
	acquire_sleep_lock();
1000c264:	4bad      	ldr	r3, [pc, #692]	; (1000c51c <main+0x2d0>)
1000c266:	4798      	blx	r3

	/* Initialize the button */
	/* button_init(); */
	
	/* Initialize serial console */
	serial_console_init();
1000c268:	4bad      	ldr	r3, [pc, #692]	; (1000c520 <main+0x2d4>)
1000c26a:	4798      	blx	r3
	led_config();
1000c26c:	4bad      	ldr	r3, [pc, #692]	; (1000c524 <main+0x2d8>)
1000c26e:	4798      	blx	r3
	
	/* Initialize the hardware timer */
	hw_timer_init();
1000c270:	4bad      	ldr	r3, [pc, #692]	; (1000c528 <main+0x2dc>)
1000c272:	4798      	blx	r3
	/* Register the callback */
	hw_timer_register_callback(timer_callback_handler);
1000c274:	48ad      	ldr	r0, [pc, #692]	; (1000c52c <main+0x2e0>)
1000c276:	4bae      	ldr	r3, [pc, #696]	; (1000c530 <main+0x2e4>)
1000c278:	4798      	blx	r3
	/* Start timer */
	hw_timer_start(1);
1000c27a:	2001      	movs	r0, #1
1000c27c:	4bad      	ldr	r3, [pc, #692]	; (1000c534 <main+0x2e8>)
1000c27e:	4798      	blx	r3
	
	DBG_LOG("Initializing Battery Service Application");
1000c280:	48ad      	ldr	r0, [pc, #692]	; (1000c538 <main+0x2ec>)
1000c282:	4bae      	ldr	r3, [pc, #696]	; (1000c53c <main+0x2f0>)
1000c284:	4798      	blx	r3
1000c286:	48ae      	ldr	r0, [pc, #696]	; (1000c540 <main+0x2f4>)
1000c288:	4cae      	ldr	r4, [pc, #696]	; (1000c544 <main+0x2f8>)
1000c28a:	47a0      	blx	r4
	
	/* initialize the ble chip  and Set the device mac address */
	ble_device_init(NULL);
1000c28c:	2000      	movs	r0, #0
1000c28e:	4bae      	ldr	r3, [pc, #696]	; (1000c548 <main+0x2fc>)
1000c290:	4798      	blx	r3
	
	/* Initialize the temperature sensor */
	at30tse_init();
1000c292:	4bae      	ldr	r3, [pc, #696]	; (1000c54c <main+0x300>)
1000c294:	4798      	blx	r3
	/* configure the temperature sensor ADC */
	at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
1000c296:	20c0      	movs	r0, #192	; 0xc0
1000c298:	01c0      	lsls	r0, r0, #7
1000c29a:	4bad      	ldr	r3, [pc, #692]	; (1000c550 <main+0x304>)
1000c29c:	4798      	blx	r3

static void htp_temperature_read(void)
{
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	temperature = at30tse_read_temperature();
1000c29e:	4bad      	ldr	r3, [pc, #692]	; (1000c554 <main+0x308>)
1000c2a0:	4798      	blx	r3
	/* Display temperature on com port */
#ifdef HTPT_FLAG_FAHRENHEIT
	printf("Temperature: %d Fahrenheit", (uint16_t)temperature);
#else
	printf("Temperature: %d Deg Celsius", (uint16_t)temperature);
1000c2a2:	4bad      	ldr	r3, [pc, #692]	; (1000c558 <main+0x30c>)
1000c2a4:	4798      	blx	r3
1000c2a6:	4bad      	ldr	r3, [pc, #692]	; (1000c55c <main+0x310>)
1000c2a8:	4798      	blx	r3
1000c2aa:	b281      	uxth	r1, r0
1000c2ac:	48ac      	ldr	r0, [pc, #688]	; (1000c560 <main+0x314>)
1000c2ae:	47a0      	blx	r4
	htp_temperature_read();
	
	
	
	/* Initialize the battery service */
	bat_init_service(&bas_service_handler, &battery_level);
1000c2b0:	0029      	movs	r1, r5
1000c2b2:	48ac      	ldr	r0, [pc, #688]	; (1000c564 <main+0x318>)
1000c2b4:	4bac      	ldr	r3, [pc, #688]	; (1000c568 <main+0x31c>)
1000c2b6:	4798      	blx	r3
	NULL
};


static void htp_init (void){
	printf("\nAssignment 4.1: Init Health temperature service ");
1000c2b8:	48ac      	ldr	r0, [pc, #688]	; (1000c56c <main+0x320>)
1000c2ba:	47a0      	blx	r4
	/* Create htp service in GATT database*/
	status = at_ble_htpt_create_db(
1000c2bc:	4bac      	ldr	r3, [pc, #688]	; (1000c570 <main+0x324>)
1000c2be:	9302      	str	r3, [sp, #8]
1000c2c0:	230c      	movs	r3, #12
1000c2c2:	9301      	str	r3, [sp, #4]
1000c2c4:	3b0b      	subs	r3, #11
1000c2c6:	9300      	str	r3, [sp, #0]
1000c2c8:	331d      	adds	r3, #29
1000c2ca:	2201      	movs	r2, #1
1000c2cc:	2101      	movs	r1, #1
1000c2ce:	2001      	movs	r0, #1
1000c2d0:	4ca8      	ldr	r4, [pc, #672]	; (1000c574 <main+0x328>)
1000c2d2:	47a0      	blx	r4
1000c2d4:	4ba8      	ldr	r3, [pc, #672]	; (1000c578 <main+0x32c>)
1000c2d6:	7018      	strb	r0, [r3, #0]
	1,
	30,
	1,
	HTPT_AUTH,
	&htpt_conn_handle);
	if (status != AT_BLE_SUCCESS){
1000c2d8:	781b      	ldrb	r3, [r3, #0]
1000c2da:	2b00      	cmp	r3, #0
1000c2dc:	d003      	beq.n	1000c2e6 <main+0x9a>
		printf("HTP Data Base creation failed");
1000c2de:	48a7      	ldr	r0, [pc, #668]	; (1000c57c <main+0x330>)
1000c2e0:	4b98      	ldr	r3, [pc, #608]	; (1000c544 <main+0x2f8>)
1000c2e2:	4798      	blx	r3
1000c2e4:	e7fe      	b.n	1000c2e4 <main+0x98>
	/* Initialize the htp service */
	htp_init();
	
	
	/* Define the primary service in the GATT server database */
	if((status = bat_primary_service_define(&bas_service_handler))!= AT_BLE_SUCCESS)
1000c2e6:	489f      	ldr	r0, [pc, #636]	; (1000c564 <main+0x318>)
1000c2e8:	4ba5      	ldr	r3, [pc, #660]	; (1000c580 <main+0x334>)
1000c2ea:	4798      	blx	r3
1000c2ec:	1e04      	subs	r4, r0, #0
1000c2ee:	d006      	beq.n	1000c2fe <main+0xb2>
	{
		DBG_LOG("defining battery service failed %d", status);
1000c2f0:	4891      	ldr	r0, [pc, #580]	; (1000c538 <main+0x2ec>)
1000c2f2:	4b92      	ldr	r3, [pc, #584]	; (1000c53c <main+0x2f0>)
1000c2f4:	4798      	blx	r3
1000c2f6:	0021      	movs	r1, r4
1000c2f8:	48a2      	ldr	r0, [pc, #648]	; (1000c584 <main+0x338>)
1000c2fa:	4b92      	ldr	r3, [pc, #584]	; (1000c544 <main+0x2f8>)
1000c2fc:	4798      	blx	r3
	}
	
	battery_service_advertise();
1000c2fe:	4ba2      	ldr	r3, [pc, #648]	; (1000c588 <main+0x33c>)
1000c300:	4798      	blx	r3
};

static void register_ble_callbacks (void)
{
	/* Register GAP Callbacks */
	printf("\nAssignment 3.2: Register bluetooth events callbacks");
1000c302:	48a2      	ldr	r0, [pc, #648]	; (1000c58c <main+0x340>)
1000c304:	4b8f      	ldr	r3, [pc, #572]	; (1000c544 <main+0x2f8>)
1000c306:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000c308:	4aa1      	ldr	r2, [pc, #644]	; (1000c590 <main+0x344>)
1000c30a:	2100      	movs	r1, #0
1000c30c:	2000      	movs	r0, #0
1000c30e:	4ba1      	ldr	r3, [pc, #644]	; (1000c594 <main+0x348>)
1000c310:	4798      	blx	r3
1000c312:	4b99      	ldr	r3, [pc, #612]	; (1000c578 <main+0x32c>)
1000c314:	7018      	strb	r0, [r3, #0]
	BLE_GAP_EVENT_TYPE,app_gap_cb);
	if (status != true) {
1000c316:	781b      	ldrb	r3, [r3, #0]
1000c318:	2b01      	cmp	r3, #1
1000c31a:	d002      	beq.n	1000c322 <main+0xd6>
		printf("\n##Error when Registering  SAMB11 gap callbacks");
1000c31c:	489e      	ldr	r0, [pc, #632]	; (1000c598 <main+0x34c>)
1000c31e:	4b89      	ldr	r3, [pc, #548]	; (1000c544 <main+0x2f8>)
1000c320:	4798      	blx	r3
	}
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000c322:	4a9e      	ldr	r2, [pc, #632]	; (1000c59c <main+0x350>)
1000c324:	2104      	movs	r1, #4
1000c326:	2000      	movs	r0, #0
1000c328:	4b9a      	ldr	r3, [pc, #616]	; (1000c594 <main+0x348>)
1000c32a:	4798      	blx	r3
1000c32c:	4b92      	ldr	r3, [pc, #584]	; (1000c578 <main+0x32c>)
1000c32e:	7018      	strb	r0, [r3, #0]
	BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	if (status != true) {
1000c330:	781b      	ldrb	r3, [r3, #0]
1000c332:	2b01      	cmp	r3, #1
1000c334:	d002      	beq.n	1000c33c <main+0xf0>
		printf("\n##Error when Registering  SAMB11 htpt callbacks");
1000c336:	489a      	ldr	r0, [pc, #616]	; (1000c5a0 <main+0x354>)
1000c338:	4b82      	ldr	r3, [pc, #520]	; (1000c544 <main+0x2f8>)
1000c33a:	4798      	blx	r3
	battery_service_advertise();
	
	register_ble_callbacks();
	
	/* Register callbacks for gap related events */ 
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c33c:	4a99      	ldr	r2, [pc, #612]	; (1000c5a4 <main+0x358>)
1000c33e:	2100      	movs	r1, #0
1000c340:	2000      	movs	r0, #0
1000c342:	4c94      	ldr	r4, [pc, #592]	; (1000c594 <main+0x348>)
1000c344:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE,
									battery_app_gap_cb);
									
	/* Register callbacks for gatt server related events */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c346:	4a98      	ldr	r2, [pc, #608]	; (1000c5a8 <main+0x35c>)
1000c348:	2102      	movs	r1, #2
1000c34a:	2000      	movs	r0, #0
1000c34c:	47a0      	blx	r4
									BLE_GATT_SERVER_EVENT_TYPE,
									battery_app_gatt_server_cb);
									
	register_resume_callback(resume_cb);
1000c34e:	4897      	ldr	r0, [pc, #604]	; (1000c5ac <main+0x360>)
1000c350:	4b97      	ldr	r3, [pc, #604]	; (1000c5b0 <main+0x364>)
1000c352:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart1;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart1);
1000c354:	a805      	add	r0, sp, #20
1000c356:	4b97      	ldr	r3, [pc, #604]	; (1000c5b4 <main+0x368>)
1000c358:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart1.baud_rate = 9600;
1000c35a:	2396      	movs	r3, #150	; 0x96
1000c35c:	019b      	lsls	r3, r3, #6
1000c35e:	9305      	str	r3, [sp, #20]
	config_uart1.pin_number_pad[0] = EDBG1_CDC_SERCOM_PIN_PAD0;
1000c360:	2306      	movs	r3, #6
1000c362:	9307      	str	r3, [sp, #28]
	config_uart1.pin_number_pad[1] = EDBG1_CDC_SERCOM_PIN_PAD1;
1000c364:	3301      	adds	r3, #1
1000c366:	9308      	str	r3, [sp, #32]
	config_uart1.pin_number_pad[2] = EDBG1_CDC_SERCOM_PIN_PAD2;
1000c368:	3307      	adds	r3, #7
1000c36a:	9309      	str	r3, [sp, #36]	; 0x24
	config_uart1.pin_number_pad[3] = EDBG1_CDC_SERCOM_PIN_PAD3;
1000c36c:	3301      	adds	r3, #1
1000c36e:	930a      	str	r3, [sp, #40]	; 0x28
	config_uart1.pinmux_sel_pad[0] = EDBG1_CDC_SERCOM_MUX_PAD0;
1000c370:	3b0d      	subs	r3, #13
1000c372:	930b      	str	r3, [sp, #44]	; 0x2c
	config_uart1.pinmux_sel_pad[1] = EDBG1_CDC_SERCOM_MUX_PAD1;
1000c374:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart1.pinmux_sel_pad[2] = EDBG1_CDC_SERCOM_MUX_PAD2;
1000c376:	930d      	str	r3, [sp, #52]	; 0x34
	config_uart1.pinmux_sel_pad[3] = EDBG1_CDC_SERCOM_MUX_PAD3;
1000c378:	930e      	str	r3, [sp, #56]	; 0x38
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance1,
1000c37a:	4d8f      	ldr	r5, [pc, #572]	; (1000c5b8 <main+0x36c>)
1000c37c:	4c8f      	ldr	r4, [pc, #572]	; (1000c5bc <main+0x370>)
1000c37e:	aa05      	add	r2, sp, #20
1000c380:	498f      	ldr	r1, [pc, #572]	; (1000c5c0 <main+0x374>)
1000c382:	0028      	movs	r0, r5
1000c384:	47a0      	blx	r4
1000c386:	2800      	cmp	r0, #0
1000c388:	d1f9      	bne.n	1000c37e <main+0x132>
	EDBG1_CDC_MODULE, &config_uart1) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance1);
1000c38a:	4b8b      	ldr	r3, [pc, #556]	; (1000c5b8 <main+0x36c>)
1000c38c:	4699      	mov	r9, r3
1000c38e:	0018      	movs	r0, r3
1000c390:	4b8c      	ldr	r3, [pc, #560]	; (1000c5c4 <main+0x378>)
1000c392:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance1);
1000c394:	4648      	mov	r0, r9
1000c396:	4b8c      	ldr	r3, [pc, #560]	; (1000c5c8 <main+0x37c>)
1000c398:	4798      	blx	r3
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000c39a:	ac05      	add	r4, sp, #20
1000c39c:	0020      	movs	r0, r4
1000c39e:	4e8b      	ldr	r6, [pc, #556]	; (1000c5cc <main+0x380>)
1000c3a0:	47b0      	blx	r6
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART1TX_DMA_PERIPHERAL;
1000c3a2:	2304      	movs	r3, #4
1000c3a4:	7323      	strb	r3, [r4, #12]
	config.des.enable_inc_addr = false;
1000c3a6:	2500      	movs	r5, #0
1000c3a8:	72e5      	strb	r5, [r4, #11]
	config.src.periph = UART1TX_DMA_PERIPHERAL;
1000c3aa:	70e3      	strb	r3, [r4, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000c3ac:	4f88      	ldr	r7, [pc, #544]	; (1000c5d0 <main+0x384>)
1000c3ae:	0021      	movs	r1, r4
1000c3b0:	0038      	movs	r0, r7
1000c3b2:	4b88      	ldr	r3, [pc, #544]	; (1000c5d4 <main+0x388>)
1000c3b4:	469a      	mov	sl, r3
1000c3b6:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000c3b8:	0020      	movs	r0, r4
1000c3ba:	47b0      	blx	r6
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART1RX_DMA_PERIPHERAL;
1000c3bc:	2303      	movs	r3, #3
1000c3be:	4698      	mov	r8, r3
1000c3c0:	70e3      	strb	r3, [r4, #3]
	config.src.enable_inc_addr = false;
1000c3c2:	70a5      	strb	r5, [r4, #2]
	config.src.periph_delay = 1;
1000c3c4:	2601      	movs	r6, #1
1000c3c6:	2301      	movs	r3, #1
1000c3c8:	7123      	strb	r3, [r4, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000c3ca:	4d83      	ldr	r5, [pc, #524]	; (1000c5d8 <main+0x38c>)
1000c3cc:	0021      	movs	r1, r4
1000c3ce:	0028      	movs	r0, r5
1000c3d0:	47d0      	blx	sl
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000c3d2:	4982      	ldr	r1, [pc, #520]	; (1000c5dc <main+0x390>)
1000c3d4:	7b0b      	ldrb	r3, [r1, #12]
1000c3d6:	4333      	orrs	r3, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000c3d8:	2002      	movs	r0, #2
1000c3da:	4303      	orrs	r3, r0
1000c3dc:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000c3de:	68cb      	ldr	r3, [r1, #12]
1000c3e0:	4642      	mov	r2, r8
1000c3e2:	4013      	ands	r3, r2
1000c3e4:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000c3e6:	2306      	movs	r3, #6
1000c3e8:	469c      	mov	ip, r3
1000c3ea:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string;
1000c3ec:	4b7c      	ldr	r3, [pc, #496]	; (1000c5e0 <main+0x394>)
1000c3ee:	469a      	mov	sl, r3
1000c3f0:	600b      	str	r3, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance1.hw->TRANSMIT_DATA.reg);
1000c3f2:	464b      	mov	r3, r9
1000c3f4:	681b      	ldr	r3, [r3, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string;
	descriptor->write_start_addr =
1000c3f6:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000c3f8:	4c7a      	ldr	r4, [pc, #488]	; (1000c5e4 <main+0x398>)
1000c3fa:	7b22      	ldrb	r2, [r4, #12]
1000c3fc:	4332      	orrs	r2, r6
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000c3fe:	4302      	orrs	r2, r0
1000c400:	7322      	strb	r2, [r4, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000c402:	4642      	mov	r2, r8
1000c404:	68e0      	ldr	r0, [r4, #12]
1000c406:	4002      	ands	r2, r0
1000c408:	60e2      	str	r2, [r4, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000c40a:	4662      	mov	r2, ip
1000c40c:	60a2      	str	r2, [r4, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
1000c40e:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000c410:	6023      	str	r3, [r4, #0]
	(uint32_t)(&uart_instance1.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string;
1000c412:	4653      	mov	r3, sl
1000c414:	6063      	str	r3, [r4, #4]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]
	
	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000c416:	0038      	movs	r0, r7
1000c418:	4b73      	ldr	r3, [pc, #460]	; (1000c5e8 <main+0x39c>)
1000c41a:	4698      	mov	r8, r3
1000c41c:	4798      	blx	r3
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000c41e:	0021      	movs	r1, r4
1000c420:	0028      	movs	r0, r5
1000c422:	47c0      	blx	r8
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000c424:	4b71      	ldr	r3, [pc, #452]	; (1000c5ec <main+0x3a0>)
1000c426:	607b      	str	r3, [r7, #4]
1000c428:	4b71      	ldr	r3, [pc, #452]	; (1000c5f0 <main+0x3a4>)
1000c42a:	606b      	str	r3, [r5, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000c42c:	2324      	movs	r3, #36	; 0x24
1000c42e:	5cfa      	ldrb	r2, [r7, r3]
1000c430:	4332      	orrs	r2, r6
1000c432:	54fa      	strb	r2, [r7, r3]
1000c434:	5cea      	ldrb	r2, [r5, r3]
1000c436:	4316      	orrs	r6, r2
1000c438:	54ee      	strb	r6, [r5, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c43a:	2280      	movs	r2, #128	; 0x80
1000c43c:	0212      	lsls	r2, r2, #8
1000c43e:	4b6d      	ldr	r3, [pc, #436]	; (1000c5f4 <main+0x3a8>)
1000c440:	601a      	str	r2, [r3, #0]
	//! [configure_callback]
	//! [setup_init]

	//! [main]
	//! [main_1]
	dma_start_transfer_job(&uart_dma_resource_rx);
1000c442:	0028      	movs	r0, r5
1000c444:	4b6c      	ldr	r3, [pc, #432]	; (1000c5f8 <main+0x3ac>)
1000c446:	4798      	blx	r3
	
	//release_sleep_lock();
	/* Capturing the events  */ 
	while (1) {
		/* BLE Event Task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c448:	4d6c      	ldr	r5, [pc, #432]	; (1000c5fc <main+0x3b0>)
		if (Timer_Flag & Temp_Notification_Flag)
1000c44a:	4f6d      	ldr	r7, [pc, #436]	; (1000c600 <main+0x3b4>)
1000c44c:	4e6d      	ldr	r6, [pc, #436]	; (1000c604 <main+0x3b8>)
	
	//release_sleep_lock();
	/* Capturing the events  */ 
	while (1) {
		/* BLE Event Task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000c44e:	2001      	movs	r0, #1
1000c450:	4240      	negs	r0, r0
1000c452:	47a8      	blx	r5
		if (Timer_Flag & Temp_Notification_Flag)
1000c454:	783a      	ldrb	r2, [r7, #0]
1000c456:	7833      	ldrb	r3, [r6, #0]
1000c458:	b2db      	uxtb	r3, r3
1000c45a:	2a00      	cmp	r2, #0
1000c45c:	d021      	beq.n	1000c4a2 <main+0x256>
1000c45e:	2b00      	cmp	r3, #0
1000c460:	d01f      	beq.n	1000c4a2 <main+0x256>
/* Sending the temperature value after reading it from IO1 Xplained Pro */
static void htp_temperature_send(void) {
	at_ble_prf_date_time_t timestamp;
	float temperature;
	/* Read Temperature Value from IO1 Xplained Pro */
	temperature = at30tse_read_temperature();
1000c462:	4b3c      	ldr	r3, [pc, #240]	; (1000c554 <main+0x308>)
1000c464:	4798      	blx	r3
	//temperature = atof(temperature_buffer);
#ifdef HTPT_FLAG_FAHRENHEIT
	temperature = (((temperature * 9.0)/5.0) + 32.0);
#endif
	/* Read Temperature Value from IO1 Xplained Pro */
	timestamp.day = 1;
1000c466:	ac05      	add	r4, sp, #20
1000c468:	2301      	movs	r3, #1
1000c46a:	4699      	mov	r9, r3
1000c46c:	70e3      	strb	r3, [r4, #3]
	timestamp.hour = 9;
1000c46e:	2309      	movs	r3, #9
1000c470:	7123      	strb	r3, [r4, #4]
	timestamp.min = 2;
1000c472:	3b07      	subs	r3, #7
1000c474:	7163      	strb	r3, [r4, #5]
	timestamp.month = 8;
1000c476:	3306      	adds	r3, #6
1000c478:	70a3      	strb	r3, [r4, #2]
	timestamp.sec = 36;
1000c47a:	331c      	adds	r3, #28
1000c47c:	71a3      	strb	r3, [r4, #6]
	timestamp.year = 15;
1000c47e:	3b15      	subs	r3, #21
1000c480:	8023      	strh	r3, [r4, #0]
	/* Read Temperature Value from IO1 Xplained Pro */
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)temperature),
1000c482:	4b35      	ldr	r3, [pc, #212]	; (1000c558 <main+0x30c>)
1000c484:	4798      	blx	r3
1000c486:	4960      	ldr	r1, [pc, #384]	; (1000c608 <main+0x3bc>)
1000c488:	4b60      	ldr	r3, [pc, #384]	; (1000c60c <main+0x3c0>)
1000c48a:	4798      	blx	r3
1000c48c:	4b33      	ldr	r3, [pc, #204]	; (1000c55c <main+0x310>)
1000c48e:	4798      	blx	r3
1000c490:	23ff      	movs	r3, #255	; 0xff
1000c492:	061b      	lsls	r3, r3, #24
1000c494:	4318      	orrs	r0, r3
1000c496:	464b      	mov	r3, r9
1000c498:	9300      	str	r3, [sp, #0]
1000c49a:	2204      	movs	r2, #4
1000c49c:	0021      	movs	r1, r4
1000c49e:	4c5c      	ldr	r4, [pc, #368]	; (1000c610 <main+0x3c4>)
1000c4a0:	47a0      	blx	r4
		{
			htp_temperature_send();
		}		
		
		//acquire_sleep_lock();
		if (timer_cb_done)
1000c4a2:	4b5c      	ldr	r3, [pc, #368]	; (1000c614 <main+0x3c8>)
1000c4a4:	781b      	ldrb	r3, [r3, #0]
1000c4a6:	2b00      	cmp	r3, #0
1000c4a8:	d0d1      	beq.n	1000c44e <main+0x202>
		{
			timer_cb_done = false;			
1000c4aa:	2200      	movs	r2, #0
1000c4ac:	4b59      	ldr	r3, [pc, #356]	; (1000c614 <main+0x3c8>)
1000c4ae:	701a      	strb	r2, [r3, #0]
			/* send the notification and Update the battery level  */			
			if(flag){
1000c4b0:	4b59      	ldr	r3, [pc, #356]	; (1000c618 <main+0x3cc>)
1000c4b2:	781b      	ldrb	r3, [r3, #0]
1000c4b4:	2b00      	cmp	r3, #0
1000c4b6:	d0ca      	beq.n	1000c44e <main+0x202>
				if(bat_update_char_value(bat_connection_handle,&bas_service_handler, battery_level, &flag) == AT_BLE_SUCCESS)
1000c4b8:	233f      	movs	r3, #63	; 0x3f
1000c4ba:	446b      	add	r3, sp
1000c4bc:	781a      	ldrb	r2, [r3, #0]
1000c4be:	4b57      	ldr	r3, [pc, #348]	; (1000c61c <main+0x3d0>)
1000c4c0:	8818      	ldrh	r0, [r3, #0]
1000c4c2:	4b55      	ldr	r3, [pc, #340]	; (1000c618 <main+0x3cc>)
1000c4c4:	4927      	ldr	r1, [pc, #156]	; (1000c564 <main+0x318>)
1000c4c6:	4c56      	ldr	r4, [pc, #344]	; (1000c620 <main+0x3d4>)
1000c4c8:	47a0      	blx	r4
1000c4ca:	2800      	cmp	r0, #0
1000c4cc:	d108      	bne.n	1000c4e0 <main+0x294>
				{
					DBG_LOG("Battery Level:%d%%", battery_level);
1000c4ce:	481a      	ldr	r0, [pc, #104]	; (1000c538 <main+0x2ec>)
1000c4d0:	4b1a      	ldr	r3, [pc, #104]	; (1000c53c <main+0x2f0>)
1000c4d2:	4798      	blx	r3
1000c4d4:	233f      	movs	r3, #63	; 0x3f
1000c4d6:	446b      	add	r3, sp
1000c4d8:	7819      	ldrb	r1, [r3, #0]
1000c4da:	4852      	ldr	r0, [pc, #328]	; (1000c624 <main+0x3d8>)
1000c4dc:	4b19      	ldr	r3, [pc, #100]	; (1000c544 <main+0x2f8>)
1000c4de:	4798      	blx	r3
				}
				if(battery_level == BATTERY_MAX_LEVEL)
1000c4e0:	233f      	movs	r3, #63	; 0x3f
1000c4e2:	446b      	add	r3, sp
1000c4e4:	781b      	ldrb	r3, [r3, #0]
1000c4e6:	2b64      	cmp	r3, #100	; 0x64
1000c4e8:	d103      	bne.n	1000c4f2 <main+0x2a6>
				{
					battery_flag = false;
1000c4ea:	2100      	movs	r1, #0
1000c4ec:	4a4e      	ldr	r2, [pc, #312]	; (1000c628 <main+0x3dc>)
1000c4ee:	7011      	strb	r1, [r2, #0]
1000c4f0:	e004      	b.n	1000c4fc <main+0x2b0>
				}
				else if(battery_level == BATTERY_MIN_LEVEL)
1000c4f2:	2b00      	cmp	r3, #0
1000c4f4:	d102      	bne.n	1000c4fc <main+0x2b0>
				{
					battery_flag = true;
1000c4f6:	2101      	movs	r1, #1
1000c4f8:	4a4b      	ldr	r2, [pc, #300]	; (1000c628 <main+0x3dc>)
1000c4fa:	7011      	strb	r1, [r2, #0]
				}
				if(battery_flag)
1000c4fc:	4a4a      	ldr	r2, [pc, #296]	; (1000c628 <main+0x3dc>)
1000c4fe:	7812      	ldrb	r2, [r2, #0]
1000c500:	2a00      	cmp	r2, #0
1000c502:	d004      	beq.n	1000c50e <main+0x2c2>
				{
					battery_level++;
1000c504:	3301      	adds	r3, #1
1000c506:	223f      	movs	r2, #63	; 0x3f
1000c508:	446a      	add	r2, sp
1000c50a:	7013      	strb	r3, [r2, #0]
1000c50c:	e79f      	b.n	1000c44e <main+0x202>
				}
				else
				{
					battery_level--;
1000c50e:	3b01      	subs	r3, #1
1000c510:	223f      	movs	r2, #63	; 0x3f
1000c512:	446a      	add	r2, sp
1000c514:	7013      	strb	r3, [r2, #0]
1000c516:	e79a      	b.n	1000c44e <main+0x202>
1000c518:	1000b7c5 	.word	0x1000b7c5
1000c51c:	1000bd19 	.word	0x1000bd19
1000c520:	1000b4b9 	.word	0x1000b4b9
1000c524:	1000c21d 	.word	0x1000c21d
1000c528:	1000b399 	.word	0x1000b399
1000c52c:	1000bff5 	.word	0x1000bff5
1000c530:	1000b3c5 	.word	0x1000b3c5
1000c534:	1000b3f9 	.word	0x1000b3f9
1000c538:	10012ab8 	.word	0x10012ab8
1000c53c:	100117dd 	.word	0x100117dd
1000c540:	1001353c 	.word	0x1001353c
1000c544:	100116bd 	.word	0x100116bd
1000c548:	1000aafd 	.word	0x1000aafd
1000c54c:	100080e9 	.word	0x100080e9
1000c550:	100081ad 	.word	0x100081ad
1000c554:	100081d1 	.word	0x100081d1
1000c558:	10011071 	.word	0x10011071
1000c55c:	1000fd91 	.word	0x1000fd91
1000c560:	10013568 	.word	0x10013568
1000c564:	1001601c 	.word	0x1001601c
1000c568:	10009fa9 	.word	0x10009fa9
1000c56c:	10013584 	.word	0x10013584
1000c570:	10015f76 	.word	0x10015f76
1000c574:	1000e015 	.word	0x1000e015
1000c578:	1001606c 	.word	0x1001606c
1000c57c:	100135b8 	.word	0x100135b8
1000c580:	1000a019 	.word	0x1000a019
1000c584:	100135d8 	.word	0x100135d8
1000c588:	1000c015 	.word	0x1000c015
1000c58c:	100135fc 	.word	0x100135fc
1000c590:	10013344 	.word	0x10013344
1000c594:	1000aa2d 	.word	0x1000aa2d
1000c598:	10013634 	.word	0x10013634
1000c59c:	10013320 	.word	0x10013320
1000c5a0:	10013664 	.word	0x10013664
1000c5a4:	100132d4 	.word	0x100132d4
1000c5a8:	100136ac 	.word	0x100136ac
1000c5ac:	1000bf1d 	.word	0x1000bf1d
1000c5b0:	1000bd41 	.word	0x1000bd41
1000c5b4:	10009be1 	.word	0x10009be1
1000c5b8:	10015ff8 	.word	0x10015ff8
1000c5bc:	10009c0d 	.word	0x10009c0d
1000c5c0:	40005000 	.word	0x40005000
1000c5c4:	10009e69 	.word	0x10009e69
1000c5c8:	10009ea1 	.word	0x10009ea1
1000c5cc:	1000838d 	.word	0x1000838d
1000c5d0:	10015f88 	.word	0x10015f88
1000c5d4:	100084dd 	.word	0x100084dd
1000c5d8:	10015fb8 	.word	0x10015fb8
1000c5dc:	10015fe8 	.word	0x10015fe8
1000c5e0:	100152c8 	.word	0x100152c8
1000c5e4:	10015f78 	.word	0x10015f78
1000c5e8:	100083bd 	.word	0x100083bd
1000c5ec:	1000bf69 	.word	0x1000bf69
1000c5f0:	1000c18d 	.word	0x1000c18d
1000c5f4:	e000e100 	.word	0xe000e100
1000c5f8:	10008465 	.word	0x10008465
1000c5fc:	1000b241 	.word	0x1000b241
1000c600:	100152db 	.word	0x100152db
1000c604:	100152cf 	.word	0x100152cf
1000c608:	41200000 	.word	0x41200000
1000c60c:	1000fdfd 	.word	0x1000fdfd
1000c610:	1000e041 	.word	0x1000e041
1000c614:	100152d0 	.word	0x100152d0
1000c618:	10013849 	.word	0x10013849
1000c61c:	10015f74 	.word	0x10015f74
1000c620:	1000a03d 	.word	0x1000a03d
1000c624:	10013698 	.word	0x10013698
1000c628:	1001384a 	.word	0x1001384a

1000c62c <internal_event_post>:
1000c62c:	b570      	push	{r4, r5, r6, lr}
1000c62e:	4d12      	ldr	r5, [pc, #72]	; (1000c678 <internal_event_post+0x4c>)
1000c630:	682c      	ldr	r4, [r5, #0]
1000c632:	2c00      	cmp	r4, #0
1000c634:	d014      	beq.n	1000c660 <internal_event_post+0x34>
1000c636:	6826      	ldr	r6, [r4, #0]
1000c638:	60e2      	str	r2, [r4, #12]
1000c63a:	602e      	str	r6, [r5, #0]
1000c63c:	2500      	movs	r5, #0
1000c63e:	4a0f      	ldr	r2, [pc, #60]	; (1000c67c <internal_event_post+0x50>)
1000c640:	8123      	strh	r3, [r4, #8]
1000c642:	6813      	ldr	r3, [r2, #0]
1000c644:	6025      	str	r5, [r4, #0]
1000c646:	80a0      	strh	r0, [r4, #4]
1000c648:	80e1      	strh	r1, [r4, #6]
1000c64a:	42ab      	cmp	r3, r5
1000c64c:	d101      	bne.n	1000c652 <internal_event_post+0x26>
1000c64e:	6014      	str	r4, [r2, #0]
1000c650:	e011      	b.n	1000c676 <internal_event_post+0x4a>
1000c652:	681a      	ldr	r2, [r3, #0]
1000c654:	2a00      	cmp	r2, #0
1000c656:	d001      	beq.n	1000c65c <internal_event_post+0x30>
1000c658:	1c13      	adds	r3, r2, #0
1000c65a:	e7fa      	b.n	1000c652 <internal_event_post+0x26>
1000c65c:	601c      	str	r4, [r3, #0]
1000c65e:	e00a      	b.n	1000c676 <internal_event_post+0x4a>
1000c660:	b2c4      	uxtb	r4, r0
1000c662:	2c00      	cmp	r4, #0
1000c664:	d107      	bne.n	1000c676 <internal_event_post+0x4a>
1000c666:	4c06      	ldr	r4, [pc, #24]	; (1000c680 <internal_event_post+0x54>)
1000c668:	60e2      	str	r2, [r4, #12]
1000c66a:	2201      	movs	r2, #1
1000c66c:	8123      	strh	r3, [r4, #8]
1000c66e:	4b05      	ldr	r3, [pc, #20]	; (1000c684 <internal_event_post+0x58>)
1000c670:	80a0      	strh	r0, [r4, #4]
1000c672:	80e1      	strh	r1, [r4, #6]
1000c674:	701a      	strb	r2, [r3, #0]
1000c676:	bd70      	pop	{r4, r5, r6, pc}
1000c678:	100152f4 	.word	0x100152f4
1000c67c:	100152f0 	.word	0x100152f0
1000c680:	100152dc 	.word	0x100152dc
1000c684:	100152ec 	.word	0x100152ec

1000c688 <internal_event_init>:
1000c688:	b510      	push	{r4, lr}
1000c68a:	4b08      	ldr	r3, [pc, #32]	; (1000c6ac <internal_event_init+0x24>)
1000c68c:	0900      	lsrs	r0, r0, #4
1000c68e:	0100      	lsls	r0, r0, #4
1000c690:	681a      	ldr	r2, [r3, #0]
1000c692:	1808      	adds	r0, r1, r0
1000c694:	4281      	cmp	r1, r0
1000c696:	d003      	beq.n	1000c6a0 <internal_event_init+0x18>
1000c698:	600a      	str	r2, [r1, #0]
1000c69a:	1c0a      	adds	r2, r1, #0
1000c69c:	3110      	adds	r1, #16
1000c69e:	e7f9      	b.n	1000c694 <internal_event_init+0xc>
1000c6a0:	601a      	str	r2, [r3, #0]
1000c6a2:	2200      	movs	r2, #0
1000c6a4:	4b02      	ldr	r3, [pc, #8]	; (1000c6b0 <internal_event_init+0x28>)
1000c6a6:	601a      	str	r2, [r3, #0]
1000c6a8:	bd10      	pop	{r4, pc}
1000c6aa:	46c0      	nop			; (mov r8, r8)
1000c6ac:	100152f4 	.word	0x100152f4
1000c6b0:	100152f0 	.word	0x100152f0

1000c6b4 <special_events_handler>:
1000c6b4:	b538      	push	{r3, r4, r5, lr}
1000c6b6:	4c1b      	ldr	r4, [pc, #108]	; (1000c724 <special_events_handler+0x70>)
1000c6b8:	1c03      	adds	r3, r0, #0
1000c6ba:	8825      	ldrh	r5, [r4, #0]
1000c6bc:	1c08      	adds	r0, r1, #0
1000c6be:	1c21      	adds	r1, r4, #0
1000c6c0:	429d      	cmp	r5, r3
1000c6c2:	d107      	bne.n	1000c6d4 <special_events_handler+0x20>
1000c6c4:	88a5      	ldrh	r5, [r4, #4]
1000c6c6:	4285      	cmp	r5, r0
1000c6c8:	d104      	bne.n	1000c6d4 <special_events_handler+0x20>
1000c6ca:	2301      	movs	r3, #1
1000c6cc:	425b      	negs	r3, r3
1000c6ce:	8023      	strh	r3, [r4, #0]
1000c6d0:	60a2      	str	r2, [r4, #8]
1000c6d2:	e009      	b.n	1000c6e8 <special_events_handler+0x34>
1000c6d4:	884c      	ldrh	r4, [r1, #2]
1000c6d6:	429c      	cmp	r4, r3
1000c6d8:	d10a      	bne.n	1000c6f0 <special_events_handler+0x3c>
1000c6da:	888c      	ldrh	r4, [r1, #4]
1000c6dc:	4284      	cmp	r4, r0
1000c6de:	d107      	bne.n	1000c6f0 <special_events_handler+0x3c>
1000c6e0:	2301      	movs	r3, #1
1000c6e2:	425b      	negs	r3, r3
1000c6e4:	804b      	strh	r3, [r1, #2]
1000c6e6:	608a      	str	r2, [r1, #8]
1000c6e8:	4b0f      	ldr	r3, [pc, #60]	; (1000c728 <special_events_handler+0x74>)
1000c6ea:	4798      	blx	r3
1000c6ec:	2001      	movs	r0, #1
1000c6ee:	e017      	b.n	1000c720 <special_events_handler+0x6c>
1000c6f0:	490e      	ldr	r1, [pc, #56]	; (1000c72c <special_events_handler+0x78>)
1000c6f2:	428b      	cmp	r3, r1
1000c6f4:	d00e      	beq.n	1000c714 <special_events_handler+0x60>
1000c6f6:	490e      	ldr	r1, [pc, #56]	; (1000c730 <special_events_handler+0x7c>)
1000c6f8:	428b      	cmp	r3, r1
1000c6fa:	d007      	beq.n	1000c70c <special_events_handler+0x58>
1000c6fc:	490d      	ldr	r1, [pc, #52]	; (1000c734 <special_events_handler+0x80>)
1000c6fe:	2000      	movs	r0, #0
1000c700:	428b      	cmp	r3, r1
1000c702:	d10d      	bne.n	1000c720 <special_events_handler+0x6c>
1000c704:	1c10      	adds	r0, r2, #0
1000c706:	4b0c      	ldr	r3, [pc, #48]	; (1000c738 <special_events_handler+0x84>)
1000c708:	4798      	blx	r3
1000c70a:	e7ef      	b.n	1000c6ec <special_events_handler+0x38>
1000c70c:	1c11      	adds	r1, r2, #0
1000c70e:	4b0b      	ldr	r3, [pc, #44]	; (1000c73c <special_events_handler+0x88>)
1000c710:	2200      	movs	r2, #0
1000c712:	e002      	b.n	1000c71a <special_events_handler+0x66>
1000c714:	1c11      	adds	r1, r2, #0
1000c716:	2200      	movs	r2, #0
1000c718:	4b09      	ldr	r3, [pc, #36]	; (1000c740 <special_events_handler+0x8c>)
1000c71a:	4798      	blx	r3
1000c71c:	4243      	negs	r3, r0
1000c71e:	4158      	adcs	r0, r3
1000c720:	bd38      	pop	{r3, r4, r5, pc}
1000c722:	46c0      	nop			; (mov r8, r8)
1000c724:	10016070 	.word	0x10016070
1000c728:	1000e14d 	.word	0x1000e14d
1000c72c:	00000e13 	.word	0x00000e13
1000c730:	00000e15 	.word	0x00000e15
1000c734:	00000e01 	.word	0x00000e01
1000c738:	1000e4bd 	.word	0x1000e4bd
1000c73c:	1000e67d 	.word	0x1000e67d
1000c740:	1000e755 	.word	0x1000e755

1000c744 <at_ble_event_get>:
1000c744:	2300      	movs	r3, #0
1000c746:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c748:	b087      	sub	sp, #28
1000c74a:	9204      	str	r2, [sp, #16]
1000c74c:	7003      	strb	r3, [r0, #0]
1000c74e:	9b04      	ldr	r3, [sp, #16]
1000c750:	9003      	str	r0, [sp, #12]
1000c752:	3b01      	subs	r3, #1
1000c754:	1c0d      	adds	r5, r1, #0
1000c756:	9305      	str	r3, [sp, #20]
1000c758:	3303      	adds	r3, #3
1000c75a:	d802      	bhi.n	1000c762 <at_ble_event_get+0x1e>
1000c75c:	9804      	ldr	r0, [sp, #16]
1000c75e:	4bae      	ldr	r3, [pc, #696]	; (1000ca18 <at_ble_event_get+0x2d4>)
1000c760:	4798      	blx	r3
1000c762:	9b05      	ldr	r3, [sp, #20]
1000c764:	4cad      	ldr	r4, [pc, #692]	; (1000ca1c <at_ble_event_get+0x2d8>)
1000c766:	3303      	adds	r3, #3
1000c768:	d902      	bls.n	1000c770 <at_ble_event_get+0x2c>
1000c76a:	2300      	movs	r3, #0
1000c76c:	9302      	str	r3, [sp, #8]
1000c76e:	e015      	b.n	1000c79c <at_ble_event_get+0x58>
1000c770:	2300      	movs	r3, #0
1000c772:	9302      	str	r3, [sp, #8]
1000c774:	6823      	ldr	r3, [r4, #0]
1000c776:	2b00      	cmp	r3, #0
1000c778:	d113      	bne.n	1000c7a2 <at_ble_event_get+0x5e>
1000c77a:	9b02      	ldr	r3, [sp, #8]
1000c77c:	2bd0      	cmp	r3, #208	; 0xd0
1000c77e:	d100      	bne.n	1000c782 <at_ble_event_get+0x3e>
1000c780:	e2da      	b.n	1000cd38 <at_ble_event_get+0x5f4>
1000c782:	9804      	ldr	r0, [sp, #16]
1000c784:	4ba6      	ldr	r3, [pc, #664]	; (1000ca20 <at_ble_event_get+0x2dc>)
1000c786:	4798      	blx	r3
1000c788:	9002      	str	r0, [sp, #8]
1000c78a:	2802      	cmp	r0, #2
1000c78c:	d1f2      	bne.n	1000c774 <at_ble_event_get+0x30>
1000c78e:	e03f      	b.n	1000c810 <at_ble_event_get+0xcc>
1000c790:	9804      	ldr	r0, [sp, #16]
1000c792:	4ba3      	ldr	r3, [pc, #652]	; (1000ca20 <at_ble_event_get+0x2dc>)
1000c794:	4798      	blx	r3
1000c796:	9002      	str	r0, [sp, #8]
1000c798:	2802      	cmp	r0, #2
1000c79a:	d039      	beq.n	1000c810 <at_ble_event_get+0xcc>
1000c79c:	6823      	ldr	r3, [r4, #0]
1000c79e:	2b00      	cmp	r3, #0
1000c7a0:	d0f6      	beq.n	1000c790 <at_ble_event_get+0x4c>
1000c7a2:	9b02      	ldr	r3, [sp, #8]
1000c7a4:	2bd0      	cmp	r3, #208	; 0xd0
1000c7a6:	d100      	bne.n	1000c7aa <at_ble_event_get+0x66>
1000c7a8:	e2c6      	b.n	1000cd38 <at_ble_event_get+0x5f4>
1000c7aa:	9b02      	ldr	r3, [sp, #8]
1000c7ac:	3b03      	subs	r3, #3
1000c7ae:	1e5a      	subs	r2, r3, #1
1000c7b0:	4193      	sbcs	r3, r2
1000c7b2:	9a02      	ldr	r2, [sp, #8]
1000c7b4:	425b      	negs	r3, r3
1000c7b6:	401a      	ands	r2, r3
1000c7b8:	6823      	ldr	r3, [r4, #0]
1000c7ba:	9202      	str	r2, [sp, #8]
1000c7bc:	2b00      	cmp	r3, #0
1000c7be:	d100      	bne.n	1000c7c2 <at_ble_event_get+0x7e>
1000c7c0:	e2c2      	b.n	1000cd48 <at_ble_event_get+0x604>
1000c7c2:	681a      	ldr	r2, [r3, #0]
1000c7c4:	68de      	ldr	r6, [r3, #12]
1000c7c6:	6022      	str	r2, [r4, #0]
1000c7c8:	88da      	ldrh	r2, [r3, #6]
1000c7ca:	9201      	str	r2, [sp, #4]
1000c7cc:	4a95      	ldr	r2, [pc, #596]	; (1000ca24 <at_ble_event_get+0x2e0>)
1000c7ce:	889c      	ldrh	r4, [r3, #4]
1000c7d0:	6811      	ldr	r1, [r2, #0]
1000c7d2:	6013      	str	r3, [r2, #0]
1000c7d4:	6019      	str	r1, [r3, #0]
1000c7d6:	4b94      	ldr	r3, [pc, #592]	; (1000ca28 <at_ble_event_get+0x2e4>)
1000c7d8:	781b      	ldrb	r3, [r3, #0]
1000c7da:	2b01      	cmp	r3, #1
1000c7dc:	d10f      	bne.n	1000c7fe <at_ble_event_get+0xba>
1000c7de:	4b93      	ldr	r3, [pc, #588]	; (1000ca2c <at_ble_event_get+0x2e8>)
1000c7e0:	4a92      	ldr	r2, [pc, #584]	; (1000ca2c <at_ble_event_get+0x2e8>)
1000c7e2:	8898      	ldrh	r0, [r3, #4]
1000c7e4:	88d9      	ldrh	r1, [r3, #6]
1000c7e6:	68d2      	ldr	r2, [r2, #12]
1000c7e8:	891b      	ldrh	r3, [r3, #8]
1000c7ea:	4f91      	ldr	r7, [pc, #580]	; (1000ca30 <at_ble_event_get+0x2ec>)
1000c7ec:	47b8      	blx	r7
1000c7ee:	2210      	movs	r2, #16
1000c7f0:	4b90      	ldr	r3, [pc, #576]	; (1000ca34 <at_ble_event_get+0x2f0>)
1000c7f2:	488e      	ldr	r0, [pc, #568]	; (1000ca2c <at_ble_event_get+0x2e8>)
1000c7f4:	2100      	movs	r1, #0
1000c7f6:	4798      	blx	r3
1000c7f8:	2300      	movs	r3, #0
1000c7fa:	4a8b      	ldr	r2, [pc, #556]	; (1000ca28 <at_ble_event_get+0x2e4>)
1000c7fc:	7013      	strb	r3, [r2, #0]
1000c7fe:	9b02      	ldr	r3, [sp, #8]
1000c800:	2b00      	cmp	r3, #0
1000c802:	d114      	bne.n	1000c82e <at_ble_event_get+0xea>
1000c804:	4b8c      	ldr	r3, [pc, #560]	; (1000ca38 <at_ble_event_get+0x2f4>)
1000c806:	429c      	cmp	r4, r3
1000c808:	d009      	beq.n	1000c81e <at_ble_event_get+0xda>
1000c80a:	4b8c      	ldr	r3, [pc, #560]	; (1000ca3c <at_ble_event_get+0x2f8>)
1000c80c:	429c      	cmp	r4, r3
1000c80e:	d127      	bne.n	1000c860 <at_ble_event_get+0x11c>
1000c810:	233a      	movs	r3, #58	; 0x3a
1000c812:	9a03      	ldr	r2, [sp, #12]
1000c814:	7013      	strb	r3, [r2, #0]
1000c816:	2300      	movs	r3, #0
1000c818:	9302      	str	r3, [sp, #8]
1000c81a:	1c1d      	adds	r5, r3, #0
1000c81c:	e007      	b.n	1000c82e <at_ble_event_get+0xea>
1000c81e:	9b01      	ldr	r3, [sp, #4]
1000c820:	42a3      	cmp	r3, r4
1000c822:	d000      	beq.n	1000c826 <at_ble_event_get+0xe2>
1000c824:	e28a      	b.n	1000cd3c <at_ble_event_get+0x5f8>
1000c826:	2338      	movs	r3, #56	; 0x38
1000c828:	9a03      	ldr	r2, [sp, #12]
1000c82a:	7013      	strb	r3, [r2, #0]
1000c82c:	602e      	str	r6, [r5, #0]
1000c82e:	9b03      	ldr	r3, [sp, #12]
1000c830:	781b      	ldrb	r3, [r3, #0]
1000c832:	2b3b      	cmp	r3, #59	; 0x3b
1000c834:	d101      	bne.n	1000c83a <at_ble_event_get+0xf6>
1000c836:	4b82      	ldr	r3, [pc, #520]	; (1000ca40 <at_ble_event_get+0x2fc>)
1000c838:	4798      	blx	r3
1000c83a:	9b03      	ldr	r3, [sp, #12]
1000c83c:	781b      	ldrb	r3, [r3, #0]
1000c83e:	2b3b      	cmp	r3, #59	; 0x3b
1000c840:	d003      	beq.n	1000c84a <at_ble_event_get+0x106>
1000c842:	9b05      	ldr	r3, [sp, #20]
1000c844:	3303      	adds	r3, #3
1000c846:	d904      	bls.n	1000c852 <at_ble_event_get+0x10e>
1000c848:	e283      	b.n	1000cd52 <at_ble_event_get+0x60e>
1000c84a:	9b02      	ldr	r3, [sp, #8]
1000c84c:	2b00      	cmp	r3, #0
1000c84e:	d088      	beq.n	1000c762 <at_ble_event_get+0x1e>
1000c850:	e7f7      	b.n	1000c842 <at_ble_event_get+0xfe>
1000c852:	9b02      	ldr	r3, [sp, #8]
1000c854:	2bd0      	cmp	r3, #208	; 0xd0
1000c856:	d100      	bne.n	1000c85a <at_ble_event_get+0x116>
1000c858:	e27b      	b.n	1000cd52 <at_ble_event_get+0x60e>
1000c85a:	4b7a      	ldr	r3, [pc, #488]	; (1000ca44 <at_ble_event_get+0x300>)
1000c85c:	4798      	blx	r3
1000c85e:	e278      	b.n	1000cd52 <at_ble_event_get+0x60e>
1000c860:	9b01      	ldr	r3, [sp, #4]
1000c862:	2bbb      	cmp	r3, #187	; 0xbb
1000c864:	d125      	bne.n	1000c8b2 <at_ble_event_get+0x16e>
1000c866:	2cbb      	cmp	r4, #187	; 0xbb
1000c868:	d123      	bne.n	1000c8b2 <at_ble_event_get+0x16e>
1000c86a:	466b      	mov	r3, sp
1000c86c:	891b      	ldrh	r3, [r3, #8]
1000c86e:	80ab      	strh	r3, [r5, #4]
1000c870:	78b3      	ldrb	r3, [r6, #2]
1000c872:	7872      	ldrb	r2, [r6, #1]
1000c874:	78f0      	ldrb	r0, [r6, #3]
1000c876:	021b      	lsls	r3, r3, #8
1000c878:	4313      	orrs	r3, r2
1000c87a:	7971      	ldrb	r1, [r6, #5]
1000c87c:	7932      	ldrb	r2, [r6, #4]
1000c87e:	70a8      	strb	r0, [r5, #2]
1000c880:	4871      	ldr	r0, [pc, #452]	; (1000ca48 <at_ble_event_get+0x304>)
1000c882:	802b      	strh	r3, [r5, #0]
1000c884:	4283      	cmp	r3, r0
1000c886:	d806      	bhi.n	1000c896 <at_ble_event_get+0x152>
1000c888:	4a70      	ldr	r2, [pc, #448]	; (1000ca4c <at_ble_event_get+0x308>)
1000c88a:	4293      	cmp	r3, r2
1000c88c:	d20b      	bcs.n	1000c8a6 <at_ble_event_get+0x162>
1000c88e:	4a70      	ldr	r2, [pc, #448]	; (1000ca50 <at_ble_event_get+0x30c>)
1000c890:	4293      	cmp	r3, r2
1000c892:	d008      	beq.n	1000c8a6 <at_ble_event_get+0x162>
1000c894:	e009      	b.n	1000c8aa <at_ble_event_get+0x166>
1000c896:	486f      	ldr	r0, [pc, #444]	; (1000ca54 <at_ble_event_get+0x310>)
1000c898:	4283      	cmp	r3, r0
1000c89a:	d106      	bne.n	1000c8aa <at_ble_event_get+0x166>
1000c89c:	020b      	lsls	r3, r1, #8
1000c89e:	4313      	orrs	r3, r2
1000c8a0:	80ab      	strh	r3, [r5, #4]
1000c8a2:	2337      	movs	r3, #55	; 0x37
1000c8a4:	e002      	b.n	1000c8ac <at_ble_event_get+0x168>
1000c8a6:	2336      	movs	r3, #54	; 0x36
1000c8a8:	e000      	b.n	1000c8ac <at_ble_event_get+0x168>
1000c8aa:	2300      	movs	r3, #0
1000c8ac:	9a03      	ldr	r2, [sp, #12]
1000c8ae:	7013      	strb	r3, [r2, #0]
1000c8b0:	e7bd      	b.n	1000c82e <at_ble_event_get+0xea>
1000c8b2:	4b69      	ldr	r3, [pc, #420]	; (1000ca58 <at_ble_event_get+0x314>)
1000c8b4:	429c      	cmp	r4, r3
1000c8b6:	d100      	bne.n	1000c8ba <at_ble_event_get+0x176>
1000c8b8:	e144      	b.n	1000cb44 <at_ble_event_get+0x400>
1000c8ba:	d865      	bhi.n	1000c988 <at_ble_event_get+0x244>
1000c8bc:	4b67      	ldr	r3, [pc, #412]	; (1000ca5c <at_ble_event_get+0x318>)
1000c8be:	429c      	cmp	r4, r3
1000c8c0:	d100      	bne.n	1000c8c4 <at_ble_event_get+0x180>
1000c8c2:	e1d5      	b.n	1000cc70 <at_ble_event_get+0x52c>
1000c8c4:	d82f      	bhi.n	1000c926 <at_ble_event_get+0x1e2>
1000c8c6:	4b66      	ldr	r3, [pc, #408]	; (1000ca60 <at_ble_event_get+0x31c>)
1000c8c8:	429c      	cmp	r4, r3
1000c8ca:	d100      	bne.n	1000c8ce <at_ble_event_get+0x18a>
1000c8cc:	e1e0      	b.n	1000cc90 <at_ble_event_get+0x54c>
1000c8ce:	d813      	bhi.n	1000c8f8 <at_ble_event_get+0x1b4>
1000c8d0:	4b64      	ldr	r3, [pc, #400]	; (1000ca64 <at_ble_event_get+0x320>)
1000c8d2:	429c      	cmp	r4, r3
1000c8d4:	d100      	bne.n	1000c8d8 <at_ble_event_get+0x194>
1000c8d6:	e1a3      	b.n	1000cc20 <at_ble_event_get+0x4dc>
1000c8d8:	d804      	bhi.n	1000c8e4 <at_ble_event_get+0x1a0>
1000c8da:	2638      	movs	r6, #56	; 0x38
1000c8dc:	42b4      	cmp	r4, r6
1000c8de:	d100      	bne.n	1000c8e2 <at_ble_event_get+0x19e>
1000c8e0:	e225      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000c8e2:	e117      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c8e4:	4b60      	ldr	r3, [pc, #384]	; (1000ca68 <at_ble_event_get+0x324>)
1000c8e6:	429c      	cmp	r4, r3
1000c8e8:	d100      	bne.n	1000c8ec <at_ble_event_get+0x1a8>
1000c8ea:	e19f      	b.n	1000cc2c <at_ble_event_get+0x4e8>
1000c8ec:	33fe      	adds	r3, #254	; 0xfe
1000c8ee:	33ff      	adds	r3, #255	; 0xff
1000c8f0:	429c      	cmp	r4, r3
1000c8f2:	d100      	bne.n	1000c8f6 <at_ble_event_get+0x1b2>
1000c8f4:	e1d3      	b.n	1000cc9e <at_ble_event_get+0x55a>
1000c8f6:	e10d      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c8f8:	4b5c      	ldr	r3, [pc, #368]	; (1000ca6c <at_ble_event_get+0x328>)
1000c8fa:	429c      	cmp	r4, r3
1000c8fc:	d100      	bne.n	1000c900 <at_ble_event_get+0x1bc>
1000c8fe:	e1a9      	b.n	1000cc54 <at_ble_event_get+0x510>
1000c900:	d808      	bhi.n	1000c914 <at_ble_event_get+0x1d0>
1000c902:	4b5b      	ldr	r3, [pc, #364]	; (1000ca70 <at_ble_event_get+0x32c>)
1000c904:	429c      	cmp	r4, r3
1000c906:	d100      	bne.n	1000c90a <at_ble_event_get+0x1c6>
1000c908:	e196      	b.n	1000cc38 <at_ble_event_get+0x4f4>
1000c90a:	4b5a      	ldr	r3, [pc, #360]	; (1000ca74 <at_ble_event_get+0x330>)
1000c90c:	429c      	cmp	r4, r3
1000c90e:	d100      	bne.n	1000c912 <at_ble_event_get+0x1ce>
1000c910:	e199      	b.n	1000cc46 <at_ble_event_get+0x502>
1000c912:	e0ff      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c914:	4b58      	ldr	r3, [pc, #352]	; (1000ca78 <at_ble_event_get+0x334>)
1000c916:	429c      	cmp	r4, r3
1000c918:	d100      	bne.n	1000c91c <at_ble_event_get+0x1d8>
1000c91a:	e1a2      	b.n	1000cc62 <at_ble_event_get+0x51e>
1000c91c:	4b57      	ldr	r3, [pc, #348]	; (1000ca7c <at_ble_event_get+0x338>)
1000c91e:	429c      	cmp	r4, r3
1000c920:	d100      	bne.n	1000c924 <at_ble_event_get+0x1e0>
1000c922:	e1d4      	b.n	1000ccce <at_ble_event_get+0x58a>
1000c924:	e0f6      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c926:	4b56      	ldr	r3, [pc, #344]	; (1000ca80 <at_ble_event_get+0x33c>)
1000c928:	429c      	cmp	r4, r3
1000c92a:	d100      	bne.n	1000c92e <at_ble_event_get+0x1ea>
1000c92c:	e1c8      	b.n	1000ccc0 <at_ble_event_get+0x57c>
1000c92e:	d812      	bhi.n	1000c956 <at_ble_event_get+0x212>
1000c930:	4b54      	ldr	r3, [pc, #336]	; (1000ca84 <at_ble_event_get+0x340>)
1000c932:	429c      	cmp	r4, r3
1000c934:	d100      	bne.n	1000c938 <at_ble_event_get+0x1f4>
1000c936:	e1d1      	b.n	1000ccdc <at_ble_event_get+0x598>
1000c938:	d804      	bhi.n	1000c944 <at_ble_event_get+0x200>
1000c93a:	4b53      	ldr	r3, [pc, #332]	; (1000ca88 <at_ble_event_get+0x344>)
1000c93c:	429c      	cmp	r4, r3
1000c93e:	d100      	bne.n	1000c942 <at_ble_event_get+0x1fe>
1000c940:	e19b      	b.n	1000cc7a <at_ble_event_get+0x536>
1000c942:	e0e7      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c944:	4b51      	ldr	r3, [pc, #324]	; (1000ca8c <at_ble_event_get+0x348>)
1000c946:	429c      	cmp	r4, r3
1000c948:	d100      	bne.n	1000c94c <at_ble_event_get+0x208>
1000c94a:	e1ad      	b.n	1000cca8 <at_ble_event_get+0x564>
1000c94c:	4b50      	ldr	r3, [pc, #320]	; (1000ca90 <at_ble_event_get+0x34c>)
1000c94e:	429c      	cmp	r4, r3
1000c950:	d100      	bne.n	1000c954 <at_ble_event_get+0x210>
1000c952:	e1b0      	b.n	1000ccb6 <at_ble_event_get+0x572>
1000c954:	e0de      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c956:	4b4f      	ldr	r3, [pc, #316]	; (1000ca94 <at_ble_event_get+0x350>)
1000c958:	429c      	cmp	r4, r3
1000c95a:	d100      	bne.n	1000c95e <at_ble_event_get+0x21a>
1000c95c:	e0e0      	b.n	1000cb20 <at_ble_event_get+0x3dc>
1000c95e:	d809      	bhi.n	1000c974 <at_ble_event_get+0x230>
1000c960:	3b08      	subs	r3, #8
1000c962:	429c      	cmp	r4, r3
1000c964:	d100      	bne.n	1000c968 <at_ble_event_get+0x224>
1000c966:	e0d7      	b.n	1000cb18 <at_ble_event_get+0x3d4>
1000c968:	4b4b      	ldr	r3, [pc, #300]	; (1000ca98 <at_ble_event_get+0x354>)
1000c96a:	2639      	movs	r6, #57	; 0x39
1000c96c:	429c      	cmp	r4, r3
1000c96e:	d100      	bne.n	1000c972 <at_ble_event_get+0x22e>
1000c970:	e1dd      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000c972:	e0cf      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c974:	23d1      	movs	r3, #209	; 0xd1
1000c976:	011b      	lsls	r3, r3, #4
1000c978:	429c      	cmp	r4, r3
1000c97a:	d100      	bne.n	1000c97e <at_ble_event_get+0x23a>
1000c97c:	e0d6      	b.n	1000cb2c <at_ble_event_get+0x3e8>
1000c97e:	4b47      	ldr	r3, [pc, #284]	; (1000ca9c <at_ble_event_get+0x358>)
1000c980:	429c      	cmp	r4, r3
1000c982:	d100      	bne.n	1000c986 <at_ble_event_get+0x242>
1000c984:	e0d8      	b.n	1000cb38 <at_ble_event_get+0x3f4>
1000c986:	e0c5      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c988:	4b45      	ldr	r3, [pc, #276]	; (1000caa0 <at_ble_event_get+0x35c>)
1000c98a:	429c      	cmp	r4, r3
1000c98c:	d100      	bne.n	1000c990 <at_ble_event_get+0x24c>
1000c98e:	e117      	b.n	1000cbc0 <at_ble_event_get+0x47c>
1000c990:	d82e      	bhi.n	1000c9f0 <at_ble_event_get+0x2ac>
1000c992:	4b44      	ldr	r3, [pc, #272]	; (1000caa4 <at_ble_event_get+0x360>)
1000c994:	429c      	cmp	r4, r3
1000c996:	d100      	bne.n	1000c99a <at_ble_event_get+0x256>
1000c998:	e13d      	b.n	1000cc16 <at_ble_event_get+0x4d2>
1000c99a:	d812      	bhi.n	1000c9c2 <at_ble_event_get+0x27e>
1000c99c:	4b42      	ldr	r3, [pc, #264]	; (1000caa8 <at_ble_event_get+0x364>)
1000c99e:	429c      	cmp	r4, r3
1000c9a0:	d100      	bne.n	1000c9a4 <at_ble_event_get+0x260>
1000c9a2:	e0e8      	b.n	1000cb76 <at_ble_event_get+0x432>
1000c9a4:	d804      	bhi.n	1000c9b0 <at_ble_event_get+0x26c>
1000c9a6:	3b03      	subs	r3, #3
1000c9a8:	429c      	cmp	r4, r3
1000c9aa:	d100      	bne.n	1000c9ae <at_ble_event_get+0x26a>
1000c9ac:	e0d0      	b.n	1000cb50 <at_ble_event_get+0x40c>
1000c9ae:	e0b1      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c9b0:	4b3e      	ldr	r3, [pc, #248]	; (1000caac <at_ble_event_get+0x368>)
1000c9b2:	429c      	cmp	r4, r3
1000c9b4:	d100      	bne.n	1000c9b8 <at_ble_event_get+0x274>
1000c9b6:	e0d0      	b.n	1000cb5a <at_ble_event_get+0x416>
1000c9b8:	4b3d      	ldr	r3, [pc, #244]	; (1000cab0 <at_ble_event_get+0x36c>)
1000c9ba:	429c      	cmp	r4, r3
1000c9bc:	d100      	bne.n	1000c9c0 <at_ble_event_get+0x27c>
1000c9be:	e0f9      	b.n	1000cbb4 <at_ble_event_get+0x470>
1000c9c0:	e0a8      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c9c2:	4b3c      	ldr	r3, [pc, #240]	; (1000cab4 <at_ble_event_get+0x370>)
1000c9c4:	429c      	cmp	r4, r3
1000c9c6:	d100      	bne.n	1000c9ca <at_ble_event_get+0x286>
1000c9c8:	e0db      	b.n	1000cb82 <at_ble_event_get+0x43e>
1000c9ca:	d808      	bhi.n	1000c9de <at_ble_event_get+0x29a>
1000c9cc:	4b3a      	ldr	r3, [pc, #232]	; (1000cab8 <at_ble_event_get+0x374>)
1000c9ce:	429c      	cmp	r4, r3
1000c9d0:	d100      	bne.n	1000c9d4 <at_ble_event_get+0x290>
1000c9d2:	e11b      	b.n	1000cc0c <at_ble_event_get+0x4c8>
1000c9d4:	4b39      	ldr	r3, [pc, #228]	; (1000cabc <at_ble_event_get+0x378>)
1000c9d6:	429c      	cmp	r4, r3
1000c9d8:	d100      	bne.n	1000c9dc <at_ble_event_get+0x298>
1000c9da:	e0d8      	b.n	1000cb8e <at_ble_event_get+0x44a>
1000c9dc:	e09a      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c9de:	4b38      	ldr	r3, [pc, #224]	; (1000cac0 <at_ble_event_get+0x37c>)
1000c9e0:	429c      	cmp	r4, r3
1000c9e2:	d100      	bne.n	1000c9e6 <at_ble_event_get+0x2a2>
1000c9e4:	e0d8      	b.n	1000cb98 <at_ble_event_get+0x454>
1000c9e6:	4b37      	ldr	r3, [pc, #220]	; (1000cac4 <at_ble_event_get+0x380>)
1000c9e8:	429c      	cmp	r4, r3
1000c9ea:	d100      	bne.n	1000c9ee <at_ble_event_get+0x2aa>
1000c9ec:	e0db      	b.n	1000cba6 <at_ble_event_get+0x462>
1000c9ee:	e091      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000c9f0:	4b35      	ldr	r3, [pc, #212]	; (1000cac8 <at_ble_event_get+0x384>)
1000c9f2:	429c      	cmp	r4, r3
1000c9f4:	d100      	bne.n	1000c9f8 <at_ble_event_get+0x2b4>
1000c9f6:	e0f7      	b.n	1000cbe8 <at_ble_event_get+0x4a4>
1000c9f8:	d876      	bhi.n	1000cae8 <at_ble_event_get+0x3a4>
1000c9fa:	4b34      	ldr	r3, [pc, #208]	; (1000cacc <at_ble_event_get+0x388>)
1000c9fc:	429c      	cmp	r4, r3
1000c9fe:	d100      	bne.n	1000ca02 <at_ble_event_get+0x2be>
1000ca00:	e0f8      	b.n	1000cbf4 <at_ble_event_get+0x4b0>
1000ca02:	d869      	bhi.n	1000cad8 <at_ble_event_get+0x394>
1000ca04:	4b32      	ldr	r3, [pc, #200]	; (1000cad0 <at_ble_event_get+0x38c>)
1000ca06:	429c      	cmp	r4, r3
1000ca08:	d100      	bne.n	1000ca0c <at_ble_event_get+0x2c8>
1000ca0a:	e0e0      	b.n	1000cbce <at_ble_event_get+0x48a>
1000ca0c:	4b31      	ldr	r3, [pc, #196]	; (1000cad4 <at_ble_event_get+0x390>)
1000ca0e:	429c      	cmp	r4, r3
1000ca10:	d100      	bne.n	1000ca14 <at_ble_event_get+0x2d0>
1000ca12:	e0a9      	b.n	1000cb68 <at_ble_event_get+0x424>
1000ca14:	e07e      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000ca16:	46c0      	nop			; (mov r8, r8)
1000ca18:	1000e185 	.word	0x1000e185
1000ca1c:	100152f0 	.word	0x100152f0
1000ca20:	1000bab5 	.word	0x1000bab5
1000ca24:	100152f4 	.word	0x100152f4
1000ca28:	100152ec 	.word	0x100152ec
1000ca2c:	100152dc 	.word	0x100152dc
1000ca30:	1000c62d 	.word	0x1000c62d
1000ca34:	100116ad 	.word	0x100116ad
1000ca38:	0000ffff 	.word	0x0000ffff
1000ca3c:	0000fffe 	.word	0x0000fffe
1000ca40:	1000bd2d 	.word	0x1000bd2d
1000ca44:	1000e187 	.word	0x1000e187
1000ca48:	0000201e 	.word	0x0000201e
1000ca4c:	0000201d 	.word	0x0000201d
1000ca50:	00000c03 	.word	0x00000c03
1000ca54:	0000201f 	.word	0x0000201f
1000ca58:	00000d1c 	.word	0x00000d1c
1000ca5c:	00000c0c 	.word	0x00000c0c
1000ca60:	00000c02 	.word	0x00000c02
1000ca64:	00000a02 	.word	0x00000a02
1000ca68:	00000a03 	.word	0x00000a03
1000ca6c:	00000c06 	.word	0x00000c06
1000ca70:	00000c04 	.word	0x00000c04
1000ca74:	00000c05 	.word	0x00000c05
1000ca78:	00000c07 	.word	0x00000c07
1000ca7c:	00000c09 	.word	0x00000c09
1000ca80:	00000c17 	.word	0x00000c17
1000ca84:	00000c12 	.word	0x00000c12
1000ca88:	00000c0d 	.word	0x00000c0d
1000ca8c:	00000c13 	.word	0x00000c13
1000ca90:	00000c15 	.word	0x00000c15
1000ca94:	00000d08 	.word	0x00000d08
1000ca98:	00000d01 	.word	0x00000d01
1000ca9c:	00000d15 	.word	0x00000d15
1000caa0:	00000e1b 	.word	0x00000e1b
1000caa4:	00000e0f 	.word	0x00000e0f
1000caa8:	00000e03 	.word	0x00000e03
1000caac:	00000e06 	.word	0x00000e06
1000cab0:	00000e0a 	.word	0x00000e0a
1000cab4:	00000e15 	.word	0x00000e15
1000cab8:	00000e11 	.word	0x00000e11
1000cabc:	00000e13 	.word	0x00000e13
1000cac0:	00000e17 	.word	0x00000e17
1000cac4:	00000e19 	.word	0x00000e19
1000cac8:	00000e27 	.word	0x00000e27
1000cacc:	00000e21 	.word	0x00000e21
1000cad0:	00000e1c 	.word	0x00000e1c
1000cad4:	00000e1d 	.word	0x00000e1d
1000cad8:	4b9f      	ldr	r3, [pc, #636]	; (1000cd58 <at_ble_event_get+0x614>)
1000cada:	429c      	cmp	r4, r3
1000cadc:	d07e      	beq.n	1000cbdc <at_ble_event_get+0x498>
1000cade:	4b9f      	ldr	r3, [pc, #636]	; (1000cd5c <at_ble_event_get+0x618>)
1000cae0:	429c      	cmp	r4, r3
1000cae2:	d100      	bne.n	1000cae6 <at_ble_event_get+0x3a2>
1000cae4:	e08c      	b.n	1000cc00 <at_ble_event_get+0x4bc>
1000cae6:	e015      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000cae8:	4b9d      	ldr	r3, [pc, #628]	; (1000cd60 <at_ble_event_get+0x61c>)
1000caea:	429c      	cmp	r4, r3
1000caec:	d100      	bne.n	1000caf0 <at_ble_event_get+0x3ac>
1000caee:	e10a      	b.n	1000cd06 <at_ble_event_get+0x5c2>
1000caf0:	d808      	bhi.n	1000cb04 <at_ble_event_get+0x3c0>
1000caf2:	4b9c      	ldr	r3, [pc, #624]	; (1000cd64 <at_ble_event_get+0x620>)
1000caf4:	429c      	cmp	r4, r3
1000caf6:	d100      	bne.n	1000cafa <at_ble_event_get+0x3b6>
1000caf8:	e0f7      	b.n	1000ccea <at_ble_event_get+0x5a6>
1000cafa:	4b9b      	ldr	r3, [pc, #620]	; (1000cd68 <at_ble_event_get+0x624>)
1000cafc:	429c      	cmp	r4, r3
1000cafe:	d100      	bne.n	1000cb02 <at_ble_event_get+0x3be>
1000cb00:	e0fa      	b.n	1000ccf8 <at_ble_event_get+0x5b4>
1000cb02:	e007      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000cb04:	4b99      	ldr	r3, [pc, #612]	; (1000cd6c <at_ble_event_get+0x628>)
1000cb06:	429c      	cmp	r4, r3
1000cb08:	d100      	bne.n	1000cb0c <at_ble_event_get+0x3c8>
1000cb0a:	e103      	b.n	1000cd14 <at_ble_event_get+0x5d0>
1000cb0c:	4b98      	ldr	r3, [pc, #608]	; (1000cd70 <at_ble_event_get+0x62c>)
1000cb0e:	429c      	cmp	r4, r3
1000cb10:	d100      	bne.n	1000cb14 <at_ble_event_get+0x3d0>
1000cb12:	e106      	b.n	1000cd22 <at_ble_event_get+0x5de>
1000cb14:	2600      	movs	r6, #0
1000cb16:	e10a      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb18:	1c30      	adds	r0, r6, #0
1000cb1a:	1c29      	adds	r1, r5, #0
1000cb1c:	4b95      	ldr	r3, [pc, #596]	; (1000cd74 <at_ble_event_get+0x630>)
1000cb1e:	e014      	b.n	1000cb4a <at_ble_event_get+0x406>
1000cb20:	1c30      	adds	r0, r6, #0
1000cb22:	1c29      	adds	r1, r5, #0
1000cb24:	4b94      	ldr	r3, [pc, #592]	; (1000cd78 <at_ble_event_get+0x634>)
1000cb26:	4798      	blx	r3
1000cb28:	2604      	movs	r6, #4
1000cb2a:	e100      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb2c:	1c30      	adds	r0, r6, #0
1000cb2e:	1c29      	adds	r1, r5, #0
1000cb30:	4b92      	ldr	r3, [pc, #584]	; (1000cd7c <at_ble_event_get+0x638>)
1000cb32:	4798      	blx	r3
1000cb34:	2601      	movs	r6, #1
1000cb36:	e0fa      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb38:	1c30      	adds	r0, r6, #0
1000cb3a:	1c29      	adds	r1, r5, #0
1000cb3c:	4b90      	ldr	r3, [pc, #576]	; (1000cd80 <at_ble_event_get+0x63c>)
1000cb3e:	4798      	blx	r3
1000cb40:	260f      	movs	r6, #15
1000cb42:	e0f4      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb44:	1c30      	adds	r0, r6, #0
1000cb46:	1c29      	adds	r1, r5, #0
1000cb48:	4b8e      	ldr	r3, [pc, #568]	; (1000cd84 <at_ble_event_get+0x640>)
1000cb4a:	4798      	blx	r3
1000cb4c:	1c06      	adds	r6, r0, #0
1000cb4e:	e0ee      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb50:	9801      	ldr	r0, [sp, #4]
1000cb52:	1c31      	adds	r1, r6, #0
1000cb54:	1c2a      	adds	r2, r5, #0
1000cb56:	4b8c      	ldr	r3, [pc, #560]	; (1000cd88 <at_ble_event_get+0x644>)
1000cb58:	e017      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cb5a:	1c31      	adds	r1, r6, #0
1000cb5c:	9801      	ldr	r0, [sp, #4]
1000cb5e:	1c2a      	adds	r2, r5, #0
1000cb60:	4b8a      	ldr	r3, [pc, #552]	; (1000cd8c <at_ble_event_get+0x648>)
1000cb62:	4798      	blx	r3
1000cb64:	2611      	movs	r6, #17
1000cb66:	e0e2      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb68:	1c31      	adds	r1, r6, #0
1000cb6a:	9801      	ldr	r0, [sp, #4]
1000cb6c:	1c2a      	adds	r2, r5, #0
1000cb6e:	4b88      	ldr	r3, [pc, #544]	; (1000cd90 <at_ble_event_get+0x64c>)
1000cb70:	4798      	blx	r3
1000cb72:	2612      	movs	r6, #18
1000cb74:	e0db      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb76:	1c30      	adds	r0, r6, #0
1000cb78:	1c29      	adds	r1, r5, #0
1000cb7a:	4b86      	ldr	r3, [pc, #536]	; (1000cd94 <at_ble_event_get+0x650>)
1000cb7c:	4798      	blx	r3
1000cb7e:	2606      	movs	r6, #6
1000cb80:	e0d5      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cb82:	1c31      	adds	r1, r6, #0
1000cb84:	1c2a      	adds	r2, r5, #0
1000cb86:	9801      	ldr	r0, [sp, #4]
1000cb88:	4b83      	ldr	r3, [pc, #524]	; (1000cd98 <at_ble_event_get+0x654>)
1000cb8a:	4798      	blx	r3
1000cb8c:	e7de      	b.n	1000cb4c <at_ble_event_get+0x408>
1000cb8e:	9801      	ldr	r0, [sp, #4]
1000cb90:	1c31      	adds	r1, r6, #0
1000cb92:	1c2a      	adds	r2, r5, #0
1000cb94:	4b81      	ldr	r3, [pc, #516]	; (1000cd9c <at_ble_event_get+0x658>)
1000cb96:	e7f8      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cb98:	1c31      	adds	r1, r6, #0
1000cb9a:	9801      	ldr	r0, [sp, #4]
1000cb9c:	1c2a      	adds	r2, r5, #0
1000cb9e:	4b80      	ldr	r3, [pc, #512]	; (1000cda0 <at_ble_event_get+0x65c>)
1000cba0:	4798      	blx	r3
1000cba2:	260d      	movs	r6, #13
1000cba4:	e0c3      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cba6:	1c31      	adds	r1, r6, #0
1000cba8:	9801      	ldr	r0, [sp, #4]
1000cbaa:	1c2a      	adds	r2, r5, #0
1000cbac:	4b7d      	ldr	r3, [pc, #500]	; (1000cda4 <at_ble_event_get+0x660>)
1000cbae:	4798      	blx	r3
1000cbb0:	260e      	movs	r6, #14
1000cbb2:	e0bc      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cbb4:	9801      	ldr	r0, [sp, #4]
1000cbb6:	1c31      	adds	r1, r6, #0
1000cbb8:	1c2a      	adds	r2, r5, #0
1000cbba:	4b7b      	ldr	r3, [pc, #492]	; (1000cda8 <at_ble_event_get+0x664>)
1000cbbc:	4798      	blx	r3
1000cbbe:	e084      	b.n	1000ccca <at_ble_event_get+0x586>
1000cbc0:	1c31      	adds	r1, r6, #0
1000cbc2:	9801      	ldr	r0, [sp, #4]
1000cbc4:	1c2a      	adds	r2, r5, #0
1000cbc6:	4b79      	ldr	r3, [pc, #484]	; (1000cdac <at_ble_event_get+0x668>)
1000cbc8:	4798      	blx	r3
1000cbca:	260b      	movs	r6, #11
1000cbcc:	e0af      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cbce:	1c31      	adds	r1, r6, #0
1000cbd0:	9801      	ldr	r0, [sp, #4]
1000cbd2:	1c2a      	adds	r2, r5, #0
1000cbd4:	4b76      	ldr	r3, [pc, #472]	; (1000cdb0 <at_ble_event_get+0x66c>)
1000cbd6:	4798      	blx	r3
1000cbd8:	2610      	movs	r6, #16
1000cbda:	e0a8      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cbdc:	1c30      	adds	r0, r6, #0
1000cbde:	1c29      	adds	r1, r5, #0
1000cbe0:	4b74      	ldr	r3, [pc, #464]	; (1000cdb4 <at_ble_event_get+0x670>)
1000cbe2:	4798      	blx	r3
1000cbe4:	2628      	movs	r6, #40	; 0x28
1000cbe6:	e0a2      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cbe8:	1c30      	adds	r0, r6, #0
1000cbea:	1c29      	adds	r1, r5, #0
1000cbec:	4b72      	ldr	r3, [pc, #456]	; (1000cdb8 <at_ble_event_get+0x674>)
1000cbee:	4798      	blx	r3
1000cbf0:	2629      	movs	r6, #41	; 0x29
1000cbf2:	e09c      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cbf4:	1c30      	adds	r0, r6, #0
1000cbf6:	1c29      	adds	r1, r5, #0
1000cbf8:	4b70      	ldr	r3, [pc, #448]	; (1000cdbc <at_ble_event_get+0x678>)
1000cbfa:	4798      	blx	r3
1000cbfc:	2627      	movs	r6, #39	; 0x27
1000cbfe:	e096      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc00:	1c30      	adds	r0, r6, #0
1000cc02:	1c29      	adds	r1, r5, #0
1000cc04:	4b6e      	ldr	r3, [pc, #440]	; (1000cdc0 <at_ble_event_get+0x67c>)
1000cc06:	4798      	blx	r3
1000cc08:	262a      	movs	r6, #42	; 0x2a
1000cc0a:	e090      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc0c:	9801      	ldr	r0, [sp, #4]
1000cc0e:	1c31      	adds	r1, r6, #0
1000cc10:	1c2a      	adds	r2, r5, #0
1000cc12:	4b6c      	ldr	r3, [pc, #432]	; (1000cdc4 <at_ble_event_get+0x680>)
1000cc14:	e7b9      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cc16:	9801      	ldr	r0, [sp, #4]
1000cc18:	1c31      	adds	r1, r6, #0
1000cc1a:	1c2a      	adds	r2, r5, #0
1000cc1c:	4b6a      	ldr	r3, [pc, #424]	; (1000cdc8 <at_ble_event_get+0x684>)
1000cc1e:	e7b4      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cc20:	1c30      	adds	r0, r6, #0
1000cc22:	1c29      	adds	r1, r5, #0
1000cc24:	4b69      	ldr	r3, [pc, #420]	; (1000cdcc <at_ble_event_get+0x688>)
1000cc26:	4798      	blx	r3
1000cc28:	262b      	movs	r6, #43	; 0x2b
1000cc2a:	e080      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc2c:	1c30      	adds	r0, r6, #0
1000cc2e:	1c29      	adds	r1, r5, #0
1000cc30:	4b67      	ldr	r3, [pc, #412]	; (1000cdd0 <at_ble_event_get+0x68c>)
1000cc32:	4798      	blx	r3
1000cc34:	262c      	movs	r6, #44	; 0x2c
1000cc36:	e07a      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc38:	1c31      	adds	r1, r6, #0
1000cc3a:	9801      	ldr	r0, [sp, #4]
1000cc3c:	1c2a      	adds	r2, r5, #0
1000cc3e:	4b65      	ldr	r3, [pc, #404]	; (1000cdd4 <at_ble_event_get+0x690>)
1000cc40:	4798      	blx	r3
1000cc42:	2613      	movs	r6, #19
1000cc44:	e073      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc46:	1c31      	adds	r1, r6, #0
1000cc48:	9801      	ldr	r0, [sp, #4]
1000cc4a:	1c2a      	adds	r2, r5, #0
1000cc4c:	4b62      	ldr	r3, [pc, #392]	; (1000cdd8 <at_ble_event_get+0x694>)
1000cc4e:	4798      	blx	r3
1000cc50:	2614      	movs	r6, #20
1000cc52:	e06c      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc54:	1c31      	adds	r1, r6, #0
1000cc56:	9801      	ldr	r0, [sp, #4]
1000cc58:	1c2a      	adds	r2, r5, #0
1000cc5a:	4b60      	ldr	r3, [pc, #384]	; (1000cddc <at_ble_event_get+0x698>)
1000cc5c:	4798      	blx	r3
1000cc5e:	2615      	movs	r6, #21
1000cc60:	e065      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc62:	1c31      	adds	r1, r6, #0
1000cc64:	9801      	ldr	r0, [sp, #4]
1000cc66:	1c2a      	adds	r2, r5, #0
1000cc68:	4b5d      	ldr	r3, [pc, #372]	; (1000cde0 <at_ble_event_get+0x69c>)
1000cc6a:	4798      	blx	r3
1000cc6c:	2616      	movs	r6, #22
1000cc6e:	e05e      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc70:	9801      	ldr	r0, [sp, #4]
1000cc72:	1c31      	adds	r1, r6, #0
1000cc74:	1c2a      	adds	r2, r5, #0
1000cc76:	4b5b      	ldr	r3, [pc, #364]	; (1000cde4 <at_ble_event_get+0x6a0>)
1000cc78:	e787      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cc7a:	1c31      	adds	r1, r6, #0
1000cc7c:	9801      	ldr	r0, [sp, #4]
1000cc7e:	1c2a      	adds	r2, r5, #0
1000cc80:	4b58      	ldr	r3, [pc, #352]	; (1000cde4 <at_ble_event_get+0x6a0>)
1000cc82:	4798      	blx	r3
1000cc84:	88a9      	ldrh	r1, [r5, #4]
1000cc86:	1c06      	adds	r6, r0, #0
1000cc88:	4b57      	ldr	r3, [pc, #348]	; (1000cde8 <at_ble_event_get+0x6a4>)
1000cc8a:	8828      	ldrh	r0, [r5, #0]
1000cc8c:	4798      	blx	r3
1000cc8e:	e04e      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc90:	1c31      	adds	r1, r6, #0
1000cc92:	9801      	ldr	r0, [sp, #4]
1000cc94:	1c2a      	adds	r2, r5, #0
1000cc96:	4b55      	ldr	r3, [pc, #340]	; (1000cdec <at_ble_event_get+0x6a8>)
1000cc98:	4798      	blx	r3
1000cc9a:	2623      	movs	r6, #35	; 0x23
1000cc9c:	e047      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cc9e:	9801      	ldr	r0, [sp, #4]
1000cca0:	1c31      	adds	r1, r6, #0
1000cca2:	1c2a      	adds	r2, r5, #0
1000cca4:	4b52      	ldr	r3, [pc, #328]	; (1000cdf0 <at_ble_event_get+0x6ac>)
1000cca6:	e770      	b.n	1000cb8a <at_ble_event_get+0x446>
1000cca8:	9b01      	ldr	r3, [sp, #4]
1000ccaa:	1c30      	adds	r0, r6, #0
1000ccac:	0a1f      	lsrs	r7, r3, #8
1000ccae:	802f      	strh	r7, [r5, #0]
1000ccb0:	1c29      	adds	r1, r5, #0
1000ccb2:	4b50      	ldr	r3, [pc, #320]	; (1000cdf4 <at_ble_event_get+0x6b0>)
1000ccb4:	e749      	b.n	1000cb4a <at_ble_event_get+0x406>
1000ccb6:	9801      	ldr	r0, [sp, #4]
1000ccb8:	1c31      	adds	r1, r6, #0
1000ccba:	1c2a      	adds	r2, r5, #0
1000ccbc:	4b4e      	ldr	r3, [pc, #312]	; (1000cdf8 <at_ble_event_get+0x6b4>)
1000ccbe:	e764      	b.n	1000cb8a <at_ble_event_get+0x446>
1000ccc0:	1c30      	adds	r0, r6, #0
1000ccc2:	1c29      	adds	r1, r5, #0
1000ccc4:	9a01      	ldr	r2, [sp, #4]
1000ccc6:	4b4d      	ldr	r3, [pc, #308]	; (1000cdfc <at_ble_event_get+0x6b8>)
1000ccc8:	4798      	blx	r3
1000ccca:	263b      	movs	r6, #59	; 0x3b
1000cccc:	e02f      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000ccce:	1c31      	adds	r1, r6, #0
1000ccd0:	9801      	ldr	r0, [sp, #4]
1000ccd2:	1c2a      	adds	r2, r5, #0
1000ccd4:	4b4a      	ldr	r3, [pc, #296]	; (1000ce00 <at_ble_event_get+0x6bc>)
1000ccd6:	4798      	blx	r3
1000ccd8:	2618      	movs	r6, #24
1000ccda:	e028      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000ccdc:	1c31      	adds	r1, r6, #0
1000ccde:	9801      	ldr	r0, [sp, #4]
1000cce0:	1c2a      	adds	r2, r5, #0
1000cce2:	4b48      	ldr	r3, [pc, #288]	; (1000ce04 <at_ble_event_get+0x6c0>)
1000cce4:	4798      	blx	r3
1000cce6:	2620      	movs	r6, #32
1000cce8:	e021      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000ccea:	1c31      	adds	r1, r6, #0
1000ccec:	9801      	ldr	r0, [sp, #4]
1000ccee:	1c2a      	adds	r2, r5, #0
1000ccf0:	4b45      	ldr	r3, [pc, #276]	; (1000ce08 <at_ble_event_get+0x6c4>)
1000ccf2:	4798      	blx	r3
1000ccf4:	2633      	movs	r6, #51	; 0x33
1000ccf6:	e01a      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000ccf8:	1c31      	adds	r1, r6, #0
1000ccfa:	9801      	ldr	r0, [sp, #4]
1000ccfc:	1c2a      	adds	r2, r5, #0
1000ccfe:	4b43      	ldr	r3, [pc, #268]	; (1000ce0c <at_ble_event_get+0x6c8>)
1000cd00:	4798      	blx	r3
1000cd02:	2630      	movs	r6, #48	; 0x30
1000cd04:	e013      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cd06:	1c31      	adds	r1, r6, #0
1000cd08:	9801      	ldr	r0, [sp, #4]
1000cd0a:	1c2a      	adds	r2, r5, #0
1000cd0c:	4b40      	ldr	r3, [pc, #256]	; (1000ce10 <at_ble_event_get+0x6cc>)
1000cd0e:	4798      	blx	r3
1000cd10:	2634      	movs	r6, #52	; 0x34
1000cd12:	e00c      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cd14:	1c31      	adds	r1, r6, #0
1000cd16:	9801      	ldr	r0, [sp, #4]
1000cd18:	1c2a      	adds	r2, r5, #0
1000cd1a:	4b3e      	ldr	r3, [pc, #248]	; (1000ce14 <at_ble_event_get+0x6d0>)
1000cd1c:	4798      	blx	r3
1000cd1e:	2635      	movs	r6, #53	; 0x35
1000cd20:	e005      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cd22:	1c31      	adds	r1, r6, #0
1000cd24:	9801      	ldr	r0, [sp, #4]
1000cd26:	1c2a      	adds	r2, r5, #0
1000cd28:	4b3b      	ldr	r3, [pc, #236]	; (1000ce18 <at_ble_event_get+0x6d4>)
1000cd2a:	4798      	blx	r3
1000cd2c:	2632      	movs	r6, #50	; 0x32
1000cd2e:	9b03      	ldr	r3, [sp, #12]
1000cd30:	701e      	strb	r6, [r3, #0]
1000cd32:	2300      	movs	r3, #0
1000cd34:	9302      	str	r3, [sp, #8]
1000cd36:	e57a      	b.n	1000c82e <at_ble_event_get+0xea>
1000cd38:	23d0      	movs	r3, #208	; 0xd0
1000cd3a:	e7fb      	b.n	1000cd34 <at_ble_event_get+0x5f0>
1000cd3c:	9b01      	ldr	r3, [sp, #4]
1000cd3e:	9e02      	ldr	r6, [sp, #8]
1000cd40:	2bbb      	cmp	r3, #187	; 0xbb
1000cd42:	d000      	beq.n	1000cd46 <at_ble_event_get+0x602>
1000cd44:	e6e6      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000cd46:	e7f2      	b.n	1000cd2e <at_ble_event_get+0x5ea>
1000cd48:	9b02      	ldr	r3, [sp, #8]
1000cd4a:	2b00      	cmp	r3, #0
1000cd4c:	d000      	beq.n	1000cd50 <at_ble_event_get+0x60c>
1000cd4e:	e56e      	b.n	1000c82e <at_ble_event_get+0xea>
1000cd50:	e6e0      	b.n	1000cb14 <at_ble_event_get+0x3d0>
1000cd52:	9802      	ldr	r0, [sp, #8]
1000cd54:	b007      	add	sp, #28
1000cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd58:	00000e22 	.word	0x00000e22
1000cd5c:	00000e25 	.word	0x00000e25
1000cd60:	00001b05 	.word	0x00001b05
1000cd64:	00001b01 	.word	0x00001b01
1000cd68:	00001b03 	.word	0x00001b03
1000cd6c:	00001b06 	.word	0x00001b06
1000cd70:	00001b08 	.word	0x00001b08
1000cd74:	1000efb1 	.word	0x1000efb1
1000cd78:	1000ef95 	.word	0x1000ef95
1000cd7c:	1000f231 	.word	0x1000f231
1000cd80:	1000f321 	.word	0x1000f321
1000cd84:	1000f42d 	.word	0x1000f42d
1000cd88:	1000e329 	.word	0x1000e329
1000cd8c:	1000eba9 	.word	0x1000eba9
1000cd90:	1000ec25 	.word	0x1000ec25
1000cd94:	1000e5e1 	.word	0x1000e5e1
1000cd98:	1000e67d 	.word	0x1000e67d
1000cd9c:	1000e755 	.word	0x1000e755
1000cda0:	1000e9dd 	.word	0x1000e9dd
1000cda4:	1000ea7d 	.word	0x1000ea7d
1000cda8:	1000eb35 	.word	0x1000eb35
1000cdac:	1000eb5d 	.word	0x1000eb5d
1000cdb0:	1000eb73 	.word	0x1000eb73
1000cdb4:	1000ec3d 	.word	0x1000ec3d
1000cdb8:	1000ec6b 	.word	0x1000ec6b
1000cdbc:	1000ec81 	.word	0x1000ec81
1000cdc0:	1000ecab 	.word	0x1000ecab
1000cdc4:	1000ead9 	.word	0x1000ead9
1000cdc8:	1000eb03 	.word	0x1000eb03
1000cdcc:	1000dd21 	.word	0x1000dd21
1000cdd0:	1000dd4d 	.word	0x1000dd4d
1000cdd4:	1000f64d 	.word	0x1000f64d
1000cdd8:	1000f689 	.word	0x1000f689
1000cddc:	1000f6d1 	.word	0x1000f6d1
1000cde0:	1000f715 	.word	0x1000f715
1000cde4:	1000f749 	.word	0x1000f749
1000cde8:	1000f60d 	.word	0x1000f60d
1000cdec:	1000f815 	.word	0x1000f815
1000cdf0:	1000f79d 	.word	0x1000f79d
1000cdf4:	1000dc05 	.word	0x1000dc05
1000cdf8:	1000dc71 	.word	0x1000dc71
1000cdfc:	1000dc35 	.word	0x1000dc35
1000ce00:	1000f825 	.word	0x1000f825
1000ce04:	1000f865 	.word	0x1000f865
1000ce08:	1000fc25 	.word	0x1000fc25
1000ce0c:	1000fc2f 	.word	0x1000fc2f
1000ce10:	1000fc35 	.word	0x1000fc35
1000ce14:	1000fc3b 	.word	0x1000fc3b
1000ce18:	1000fc47 	.word	0x1000fc47

1000ce1c <internal_event_flush>:
1000ce1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce1e:	490e      	ldr	r1, [pc, #56]	; (1000ce58 <internal_event_flush+0x3c>)
1000ce20:	2400      	movs	r4, #0
1000ce22:	680b      	ldr	r3, [r1, #0]
1000ce24:	1c0f      	adds	r7, r1, #0
1000ce26:	1c1e      	adds	r6, r3, #0
1000ce28:	4a0c      	ldr	r2, [pc, #48]	; (1000ce5c <internal_event_flush+0x40>)
1000ce2a:	6815      	ldr	r5, [r2, #0]
1000ce2c:	9201      	str	r2, [sp, #4]
1000ce2e:	2b00      	cmp	r3, #0
1000ce30:	d00e      	beq.n	1000ce50 <internal_event_flush+0x34>
1000ce32:	889a      	ldrh	r2, [r3, #4]
1000ce34:	6819      	ldr	r1, [r3, #0]
1000ce36:	4282      	cmp	r2, r0
1000ce38:	d107      	bne.n	1000ce4a <internal_event_flush+0x2e>
1000ce3a:	2c00      	cmp	r4, #0
1000ce3c:	d001      	beq.n	1000ce42 <internal_event_flush+0x26>
1000ce3e:	6021      	str	r1, [r4, #0]
1000ce40:	e000      	b.n	1000ce44 <internal_event_flush+0x28>
1000ce42:	1c0e      	adds	r6, r1, #0
1000ce44:	601d      	str	r5, [r3, #0]
1000ce46:	1c1d      	adds	r5, r3, #0
1000ce48:	1c23      	adds	r3, r4, #0
1000ce4a:	1c1c      	adds	r4, r3, #0
1000ce4c:	1c0b      	adds	r3, r1, #0
1000ce4e:	e7ee      	b.n	1000ce2e <internal_event_flush+0x12>
1000ce50:	9b01      	ldr	r3, [sp, #4]
1000ce52:	603e      	str	r6, [r7, #0]
1000ce54:	601d      	str	r5, [r3, #0]
1000ce56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ce58:	100152f0 	.word	0x100152f0
1000ce5c:	100152f4 	.word	0x100152f4

1000ce60 <internal_conn_flush>:
1000ce60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce62:	4a12      	ldr	r2, [pc, #72]	; (1000ceac <internal_conn_flush+0x4c>)
1000ce64:	9000      	str	r0, [sp, #0]
1000ce66:	6813      	ldr	r3, [r2, #0]
1000ce68:	4811      	ldr	r0, [pc, #68]	; (1000ceb0 <internal_conn_flush+0x50>)
1000ce6a:	1c1f      	adds	r7, r3, #0
1000ce6c:	2100      	movs	r1, #0
1000ce6e:	4684      	mov	ip, r0
1000ce70:	6804      	ldr	r4, [r0, #0]
1000ce72:	9201      	str	r2, [sp, #4]
1000ce74:	2b00      	cmp	r3, #0
1000ce76:	d014      	beq.n	1000cea2 <internal_conn_flush+0x42>
1000ce78:	88d8      	ldrh	r0, [r3, #6]
1000ce7a:	9a00      	ldr	r2, [sp, #0]
1000ce7c:	681d      	ldr	r5, [r3, #0]
1000ce7e:	0a06      	lsrs	r6, r0, #8
1000ce80:	4296      	cmp	r6, r2
1000ce82:	d10b      	bne.n	1000ce9c <internal_conn_flush+0x3c>
1000ce84:	26fd      	movs	r6, #253	; 0xfd
1000ce86:	4006      	ands	r6, r0
1000ce88:	2e0c      	cmp	r6, #12
1000ce8a:	d107      	bne.n	1000ce9c <internal_conn_flush+0x3c>
1000ce8c:	2900      	cmp	r1, #0
1000ce8e:	d001      	beq.n	1000ce94 <internal_conn_flush+0x34>
1000ce90:	600d      	str	r5, [r1, #0]
1000ce92:	e000      	b.n	1000ce96 <internal_conn_flush+0x36>
1000ce94:	1c2f      	adds	r7, r5, #0
1000ce96:	601c      	str	r4, [r3, #0]
1000ce98:	1c1c      	adds	r4, r3, #0
1000ce9a:	1c0b      	adds	r3, r1, #0
1000ce9c:	1c19      	adds	r1, r3, #0
1000ce9e:	1c2b      	adds	r3, r5, #0
1000cea0:	e7e8      	b.n	1000ce74 <internal_conn_flush+0x14>
1000cea2:	9b01      	ldr	r3, [sp, #4]
1000cea4:	601f      	str	r7, [r3, #0]
1000cea6:	4663      	mov	r3, ip
1000cea8:	601c      	str	r4, [r3, #0]
1000ceaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ceac:	100152f0 	.word	0x100152f0
1000ceb0:	100152f4 	.word	0x100152f4

1000ceb4 <at_ble_device_name_set>:
1000ceb4:	b530      	push	{r4, r5, lr}
1000ceb6:	23cf      	movs	r3, #207	; 0xcf
1000ceb8:	2800      	cmp	r0, #0
1000ceba:	d010      	beq.n	1000cede <at_ble_device_name_set+0x2a>
1000cebc:	1e4a      	subs	r2, r1, #1
1000cebe:	2a1f      	cmp	r2, #31
1000cec0:	d80d      	bhi.n	1000cede <at_ble_device_name_set+0x2a>
1000cec2:	4a08      	ldr	r2, [pc, #32]	; (1000cee4 <at_ble_device_name_set+0x30>)
1000cec4:	1c13      	adds	r3, r2, #0
1000cec6:	33aa      	adds	r3, #170	; 0xaa
1000cec8:	8019      	strh	r1, [r3, #0]
1000ceca:	2300      	movs	r3, #0
1000cecc:	1c1c      	adds	r4, r3, #0
1000cece:	5cc5      	ldrb	r5, [r0, r3]
1000ced0:	34ac      	adds	r4, #172	; 0xac
1000ced2:	3301      	adds	r3, #1
1000ced4:	5515      	strb	r5, [r2, r4]
1000ced6:	b2dc      	uxtb	r4, r3
1000ced8:	428c      	cmp	r4, r1
1000ceda:	d3f7      	bcc.n	1000cecc <at_ble_device_name_set+0x18>
1000cedc:	2300      	movs	r3, #0
1000cede:	1c18      	adds	r0, r3, #0
1000cee0:	bd30      	pop	{r4, r5, pc}
1000cee2:	46c0      	nop			; (mov r8, r8)
1000cee4:	1001610e 	.word	0x1001610e

1000cee8 <at_ble_addr_get>:
1000cee8:	b510      	push	{r4, lr}
1000ceea:	1c04      	adds	r4, r0, #0
1000ceec:	20cf      	movs	r0, #207	; 0xcf
1000ceee:	2c00      	cmp	r4, #0
1000cef0:	d006      	beq.n	1000cf00 <at_ble_addr_get+0x18>
1000cef2:	4b04      	ldr	r3, [pc, #16]	; (1000cf04 <at_ble_addr_get+0x1c>)
1000cef4:	38ce      	subs	r0, #206	; 0xce
1000cef6:	1c21      	adds	r1, r4, #0
1000cef8:	4798      	blx	r3
1000cefa:	4b03      	ldr	r3, [pc, #12]	; (1000cf08 <at_ble_addr_get+0x20>)
1000cefc:	791b      	ldrb	r3, [r3, #4]
1000cefe:	7023      	strb	r3, [r4, #0]
1000cf00:	bd10      	pop	{r4, pc}
1000cf02:	46c0      	nop			; (mov r8, r8)
1000cf04:	1000ee45 	.word	0x1000ee45
1000cf08:	1001610e 	.word	0x1001610e

1000cf0c <at_ble_set_dev_config>:
1000cf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf0e:	7906      	ldrb	r6, [r0, #4]
1000cf10:	b089      	sub	sp, #36	; 0x24
1000cf12:	25cf      	movs	r5, #207	; 0xcf
1000cf14:	2e03      	cmp	r6, #3
1000cf16:	d838      	bhi.n	1000cf8a <at_ble_set_dev_config+0x7e>
1000cf18:	7803      	ldrb	r3, [r0, #0]
1000cf1a:	3511      	adds	r5, #17
1000cf1c:	2b0f      	cmp	r3, #15
1000cf1e:	d834      	bhi.n	1000cf8a <at_ble_set_dev_config+0x7e>
1000cf20:	2380      	movs	r3, #128	; 0x80
1000cf22:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000cf24:	3d11      	subs	r5, #17
1000cf26:	009b      	lsls	r3, r3, #2
1000cf28:	429f      	cmp	r7, r3
1000cf2a:	d82e      	bhi.n	1000cf8a <at_ble_set_dev_config+0x7e>
1000cf2c:	7fc5      	ldrb	r5, [r0, #31]
1000cf2e:	7f83      	ldrb	r3, [r0, #30]
1000cf30:	01ad      	lsls	r5, r5, #6
1000cf32:	015b      	lsls	r3, r3, #5
1000cf34:	431d      	orrs	r5, r3
1000cf36:	7ec3      	ldrb	r3, [r0, #27]
1000cf38:	431d      	orrs	r5, r3
1000cf3a:	7f43      	ldrb	r3, [r0, #29]
1000cf3c:	011b      	lsls	r3, r3, #4
1000cf3e:	431d      	orrs	r5, r3
1000cf40:	7f03      	ldrb	r3, [r0, #28]
1000cf42:	009b      	lsls	r3, r3, #2
1000cf44:	431d      	orrs	r5, r3
1000cf46:	4b12      	ldr	r3, [pc, #72]	; (1000cf90 <at_ble_set_dev_config+0x84>)
1000cf48:	b2ed      	uxtb	r5, r5
1000cf4a:	711e      	strb	r6, [r3, #4]
1000cf4c:	7903      	ldrb	r3, [r0, #4]
1000cf4e:	3b02      	subs	r3, #2
1000cf50:	2b01      	cmp	r3, #1
1000cf52:	d801      	bhi.n	1000cf58 <at_ble_set_dev_config+0x4c>
1000cf54:	2302      	movs	r3, #2
1000cf56:	7103      	strb	r3, [r0, #4]
1000cf58:	1c04      	adds	r4, r0, #0
1000cf5a:	1c23      	adds	r3, r4, #0
1000cf5c:	330b      	adds	r3, #11
1000cf5e:	8861      	ldrh	r1, [r4, #2]
1000cf60:	9307      	str	r3, [sp, #28]
1000cf62:	7923      	ldrb	r3, [r4, #4]
1000cf64:	7800      	ldrb	r0, [r0, #0]
1000cf66:	9300      	str	r3, [sp, #0]
1000cf68:	9501      	str	r5, [sp, #4]
1000cf6a:	8c25      	ldrh	r5, [r4, #32]
1000cf6c:	1d62      	adds	r2, r4, #5
1000cf6e:	9502      	str	r5, [sp, #8]
1000cf70:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000cf72:	9b07      	ldr	r3, [sp, #28]
1000cf74:	9503      	str	r5, [sp, #12]
1000cf76:	9704      	str	r7, [sp, #16]
1000cf78:	4d06      	ldr	r5, [pc, #24]	; (1000cf94 <at_ble_set_dev_config+0x88>)
1000cf7a:	47a8      	blx	r5
1000cf7c:	7126      	strb	r6, [r4, #4]
1000cf7e:	1c05      	adds	r5, r0, #0
1000cf80:	1c21      	adds	r1, r4, #0
1000cf82:	4803      	ldr	r0, [pc, #12]	; (1000cf90 <at_ble_set_dev_config+0x84>)
1000cf84:	2226      	movs	r2, #38	; 0x26
1000cf86:	4b04      	ldr	r3, [pc, #16]	; (1000cf98 <at_ble_set_dev_config+0x8c>)
1000cf88:	4798      	blx	r3
1000cf8a:	1c28      	adds	r0, r5, #0
1000cf8c:	b009      	add	sp, #36	; 0x24
1000cf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf90:	1001610e 	.word	0x1001610e
1000cf94:	1000ed3d 	.word	0x1000ed3d
1000cf98:	1001169b 	.word	0x1001169b

1000cf9c <at_ble_init>:
1000cf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf9e:	b087      	sub	sp, #28
1000cfa0:	af03      	add	r7, sp, #12
1000cfa2:	4954      	ldr	r1, [pc, #336]	; (1000d0f4 <at_ble_init+0x158>)
1000cfa4:	220b      	movs	r2, #11
1000cfa6:	4b54      	ldr	r3, [pc, #336]	; (1000d0f8 <at_ble_init+0x15c>)
1000cfa8:	1c04      	adds	r4, r0, #0
1000cfaa:	1c38      	adds	r0, r7, #0
1000cfac:	4798      	blx	r3
1000cfae:	2205      	movs	r2, #5
1000cfb0:	4b52      	ldr	r3, [pc, #328]	; (1000d0fc <at_ble_init+0x160>)
1000cfb2:	2640      	movs	r6, #64	; 0x40
1000cfb4:	801a      	strh	r2, [r3, #0]
1000cfb6:	2300      	movs	r3, #0
1000cfb8:	4a51      	ldr	r2, [pc, #324]	; (1000d100 <at_ble_init+0x164>)
1000cfba:	6013      	str	r3, [r2, #0]
1000cfbc:	4a51      	ldr	r2, [pc, #324]	; (1000d104 <at_ble_init+0x168>)
1000cfbe:	7013      	strb	r3, [r2, #0]
1000cfc0:	4a51      	ldr	r2, [pc, #324]	; (1000d108 <at_ble_init+0x16c>)
1000cfc2:	7013      	strb	r3, [r2, #0]
1000cfc4:	4b51      	ldr	r3, [pc, #324]	; (1000d10c <at_ble_init+0x170>)
1000cfc6:	4798      	blx	r3
1000cfc8:	4b51      	ldr	r3, [pc, #324]	; (1000d110 <at_ble_init+0x174>)
1000cfca:	4798      	blx	r3
1000cfcc:	4b51      	ldr	r3, [pc, #324]	; (1000d114 <at_ble_init+0x178>)
1000cfce:	4798      	blx	r3
1000cfd0:	4b51      	ldr	r3, [pc, #324]	; (1000d118 <at_ble_init+0x17c>)
1000cfd2:	4798      	blx	r3
1000cfd4:	2c00      	cmp	r4, #0
1000cfd6:	d100      	bne.n	1000cfda <at_ble_init+0x3e>
1000cfd8:	e089      	b.n	1000d0ee <at_ble_init+0x152>
1000cfda:	68a3      	ldr	r3, [r4, #8]
1000cfdc:	2b00      	cmp	r3, #0
1000cfde:	d100      	bne.n	1000cfe2 <at_ble_init+0x46>
1000cfe0:	e085      	b.n	1000d0ee <at_ble_init+0x152>
1000cfe2:	6923      	ldr	r3, [r4, #16]
1000cfe4:	2b00      	cmp	r3, #0
1000cfe6:	d100      	bne.n	1000cfea <at_ble_init+0x4e>
1000cfe8:	e081      	b.n	1000d0ee <at_ble_init+0x152>
1000cfea:	6820      	ldr	r0, [r4, #0]
1000cfec:	2800      	cmp	r0, #0
1000cfee:	d102      	bne.n	1000cff6 <at_ble_init+0x5a>
1000cff0:	6863      	ldr	r3, [r4, #4]
1000cff2:	2b00      	cmp	r3, #0
1000cff4:	d17b      	bne.n	1000d0ee <at_ble_init+0x152>
1000cff6:	4b49      	ldr	r3, [pc, #292]	; (1000d11c <at_ble_init+0x180>)
1000cff8:	6861      	ldr	r1, [r4, #4]
1000cffa:	4798      	blx	r3
1000cffc:	4b48      	ldr	r3, [pc, #288]	; (1000d120 <at_ble_init+0x184>)
1000cffe:	4798      	blx	r3
1000d000:	2801      	cmp	r0, #1
1000d002:	d901      	bls.n	1000d008 <at_ble_init+0x6c>
1000d004:	26e2      	movs	r6, #226	; 0xe2
1000d006:	e072      	b.n	1000d0ee <at_ble_init+0x152>
1000d008:	4846      	ldr	r0, [pc, #280]	; (1000d124 <at_ble_init+0x188>)
1000d00a:	4b47      	ldr	r3, [pc, #284]	; (1000d128 <at_ble_init+0x18c>)
1000d00c:	4798      	blx	r3
1000d00e:	2800      	cmp	r0, #0
1000d010:	d1f8      	bne.n	1000d004 <at_ble_init+0x68>
1000d012:	1c20      	adds	r0, r4, #0
1000d014:	4b45      	ldr	r3, [pc, #276]	; (1000d12c <at_ble_init+0x190>)
1000d016:	4798      	blx	r3
1000d018:	68e0      	ldr	r0, [r4, #12]
1000d01a:	68a1      	ldr	r1, [r4, #8]
1000d01c:	4b44      	ldr	r3, [pc, #272]	; (1000d130 <at_ble_init+0x194>)
1000d01e:	4798      	blx	r3
1000d020:	466b      	mov	r3, sp
1000d022:	2201      	movs	r2, #1
1000d024:	1cdc      	adds	r4, r3, #3
1000d026:	1c20      	adds	r0, r4, #0
1000d028:	a901      	add	r1, sp, #4
1000d02a:	4252      	negs	r2, r2
1000d02c:	4b41      	ldr	r3, [pc, #260]	; (1000d134 <at_ble_init+0x198>)
1000d02e:	4798      	blx	r3
1000d030:	2800      	cmp	r0, #0
1000d032:	d102      	bne.n	1000d03a <at_ble_init+0x9e>
1000d034:	7823      	ldrb	r3, [r4, #0]
1000d036:	2b39      	cmp	r3, #57	; 0x39
1000d038:	d1f2      	bne.n	1000d020 <at_ble_init+0x84>
1000d03a:	4b3f      	ldr	r3, [pc, #252]	; (1000d138 <at_ble_init+0x19c>)
1000d03c:	4798      	blx	r3
1000d03e:	1e06      	subs	r6, r0, #0
1000d040:	d155      	bne.n	1000d0ee <at_ble_init+0x152>
1000d042:	1c03      	adds	r3, r0, #0
1000d044:	2101      	movs	r1, #1
1000d046:	4a3d      	ldr	r2, [pc, #244]	; (1000d13c <at_ble_init+0x1a0>)
1000d048:	4249      	negs	r1, r1
1000d04a:	189a      	adds	r2, r3, r2
1000d04c:	3312      	adds	r3, #18
1000d04e:	8151      	strh	r1, [r2, #10]
1000d050:	2b90      	cmp	r3, #144	; 0x90
1000d052:	d1f7      	bne.n	1000d044 <at_ble_init+0xa8>
1000d054:	4c3a      	ldr	r4, [pc, #232]	; (1000d140 <at_ble_init+0x1a4>)
1000d056:	3b81      	subs	r3, #129	; 0x81
1000d058:	7023      	strb	r3, [r4, #0]
1000d05a:	4b3a      	ldr	r3, [pc, #232]	; (1000d144 <at_ble_init+0x1a8>)
1000d05c:	4a3a      	ldr	r2, [pc, #232]	; (1000d148 <at_ble_init+0x1ac>)
1000d05e:	8063      	strh	r3, [r4, #2]
1000d060:	2300      	movs	r3, #0
1000d062:	7123      	strb	r3, [r4, #4]
1000d064:	3301      	adds	r3, #1
1000d066:	1e58      	subs	r0, r3, #1
1000d068:	0119      	lsls	r1, r3, #4
1000d06a:	4301      	orrs	r1, r0
1000d06c:	3302      	adds	r3, #2
1000d06e:	7011      	strb	r1, [r2, #0]
1000d070:	3201      	adds	r2, #1
1000d072:	2b21      	cmp	r3, #33	; 0x21
1000d074:	d1f7      	bne.n	1000d066 <at_ble_init+0xca>
1000d076:	33e0      	adds	r3, #224	; 0xe0
1000d078:	33ff      	adds	r3, #255	; 0xff
1000d07a:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d07c:	1c23      	adds	r3, r4, #0
1000d07e:	2500      	movs	r5, #0
1000d080:	3373      	adds	r3, #115	; 0x73
1000d082:	701d      	strb	r5, [r3, #0]
1000d084:	1c23      	adds	r3, r4, #0
1000d086:	3372      	adds	r3, #114	; 0x72
1000d088:	701d      	strb	r5, [r3, #0]
1000d08a:	1c23      	adds	r3, r4, #0
1000d08c:	3376      	adds	r3, #118	; 0x76
1000d08e:	701d      	strb	r5, [r3, #0]
1000d090:	1c23      	adds	r3, r4, #0
1000d092:	33cc      	adds	r3, #204	; 0xcc
1000d094:	801d      	strh	r5, [r3, #0]
1000d096:	1c22      	adds	r2, r4, #0
1000d098:	23a0      	movs	r3, #160	; 0xa0
1000d09a:	32d0      	adds	r2, #208	; 0xd0
1000d09c:	005b      	lsls	r3, r3, #1
1000d09e:	8013      	strh	r3, [r2, #0]
1000d0a0:	1c22      	adds	r2, r4, #0
1000d0a2:	32ce      	adds	r2, #206	; 0xce
1000d0a4:	8013      	strh	r3, [r2, #0]
1000d0a6:	1c23      	adds	r3, r4, #0
1000d0a8:	33d2      	adds	r3, #210	; 0xd2
1000d0aa:	801d      	strh	r5, [r3, #0]
1000d0ac:	22fa      	movs	r2, #250	; 0xfa
1000d0ae:	1c23      	adds	r3, r4, #0
1000d0b0:	0052      	lsls	r2, r2, #1
1000d0b2:	33d4      	adds	r3, #212	; 0xd4
1000d0b4:	801a      	strh	r2, [r3, #0]
1000d0b6:	1c23      	adds	r3, r4, #0
1000d0b8:	33d6      	adds	r3, #214	; 0xd6
1000d0ba:	701d      	strb	r5, [r3, #0]
1000d0bc:	1c20      	adds	r0, r4, #0
1000d0be:	4b23      	ldr	r3, [pc, #140]	; (1000d14c <at_ble_init+0x1b0>)
1000d0c0:	76e5      	strb	r5, [r4, #27]
1000d0c2:	7725      	strb	r5, [r4, #28]
1000d0c4:	7765      	strb	r5, [r4, #29]
1000d0c6:	77a5      	strb	r5, [r4, #30]
1000d0c8:	77e5      	strb	r5, [r4, #31]
1000d0ca:	8425      	strh	r5, [r4, #32]
1000d0cc:	8465      	strh	r5, [r4, #34]	; 0x22
1000d0ce:	4798      	blx	r3
1000d0d0:	1c23      	adds	r3, r4, #0
1000d0d2:	2207      	movs	r2, #7
1000d0d4:	3374      	adds	r3, #116	; 0x74
1000d0d6:	701a      	strb	r2, [r3, #0]
1000d0d8:	1c23      	adds	r3, r4, #0
1000d0da:	3204      	adds	r2, #4
1000d0dc:	33aa      	adds	r3, #170	; 0xaa
1000d0de:	801a      	strh	r2, [r3, #0]
1000d0e0:	1c2b      	adds	r3, r5, #0
1000d0e2:	5d7a      	ldrb	r2, [r7, r5]
1000d0e4:	33ac      	adds	r3, #172	; 0xac
1000d0e6:	3501      	adds	r5, #1
1000d0e8:	54e2      	strb	r2, [r4, r3]
1000d0ea:	2d0b      	cmp	r5, #11
1000d0ec:	d1f8      	bne.n	1000d0e0 <at_ble_init+0x144>
1000d0ee:	1c30      	adds	r0, r6, #0
1000d0f0:	b007      	add	sp, #28
1000d0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0f4:	100136d4 	.word	0x100136d4
1000d0f8:	1001169b 	.word	0x1001169b
1000d0fc:	1001607c 	.word	0x1001607c
1000d100:	100153a0 	.word	0x100153a0
1000d104:	10015300 	.word	0x10015300
1000d108:	1001384b 	.word	0x1001384b
1000d10c:	1000f875 	.word	0x1000f875
1000d110:	1000d401 	.word	0x1000d401
1000d114:	1000da61 	.word	0x1000da61
1000d118:	1000dd15 	.word	0x1000dd15
1000d11c:	1000da9d 	.word	0x1000da9d
1000d120:	1000b7c5 	.word	0x1000b7c5
1000d124:	1000e05d 	.word	0x1000e05d
1000d128:	1000ba09 	.word	0x1000ba09
1000d12c:	1000e105 	.word	0x1000e105
1000d130:	1000c689 	.word	0x1000c689
1000d134:	1000c745 	.word	0x1000c745
1000d138:	1000eccd 	.word	0x1000eccd
1000d13c:	1001607e 	.word	0x1001607e
1000d140:	1001610e 	.word	0x1001610e
1000d144:	00003a98 	.word	0x00003a98
1000d148:	10016119 	.word	0x10016119
1000d14c:	1000cf0d 	.word	0x1000cf0d

1000d150 <at_ble_addr_set>:
1000d150:	b538      	push	{r3, r4, r5, lr}
1000d152:	1c45      	adds	r5, r0, #1
1000d154:	1c03      	adds	r3, r0, #0
1000d156:	20cf      	movs	r0, #207	; 0xcf
1000d158:	2d00      	cmp	r5, #0
1000d15a:	d018      	beq.n	1000d18e <at_ble_addr_set+0x3e>
1000d15c:	781a      	ldrb	r2, [r3, #0]
1000d15e:	2a03      	cmp	r2, #3
1000d160:	d815      	bhi.n	1000d18e <at_ble_addr_set+0x3e>
1000d162:	2a01      	cmp	r2, #1
1000d164:	d102      	bne.n	1000d16c <at_ble_addr_set+0x1c>
1000d166:	785a      	ldrb	r2, [r3, #1]
1000d168:	2a00      	cmp	r2, #0
1000d16a:	d010      	beq.n	1000d18e <at_ble_addr_set+0x3e>
1000d16c:	1c1c      	adds	r4, r3, #0
1000d16e:	1c29      	adds	r1, r5, #0
1000d170:	2206      	movs	r2, #6
1000d172:	4b07      	ldr	r3, [pc, #28]	; (1000d190 <at_ble_addr_set+0x40>)
1000d174:	4807      	ldr	r0, [pc, #28]	; (1000d194 <at_ble_addr_set+0x44>)
1000d176:	4798      	blx	r3
1000d178:	7823      	ldrb	r3, [r4, #0]
1000d17a:	4807      	ldr	r0, [pc, #28]	; (1000d198 <at_ble_addr_set+0x48>)
1000d17c:	7103      	strb	r3, [r0, #4]
1000d17e:	4b07      	ldr	r3, [pc, #28]	; (1000d19c <at_ble_addr_set+0x4c>)
1000d180:	4798      	blx	r3
1000d182:	7823      	ldrb	r3, [r4, #0]
1000d184:	2b00      	cmp	r3, #0
1000d186:	d102      	bne.n	1000d18e <at_ble_addr_set+0x3e>
1000d188:	1c28      	adds	r0, r5, #0
1000d18a:	4b05      	ldr	r3, [pc, #20]	; (1000d1a0 <at_ble_addr_set+0x50>)
1000d18c:	4798      	blx	r3
1000d18e:	bd38      	pop	{r3, r4, r5, pc}
1000d190:	1001169b 	.word	0x1001169b
1000d194:	10016113 	.word	0x10016113
1000d198:	1001610e 	.word	0x1001610e
1000d19c:	1000cf0d 	.word	0x1000cf0d
1000d1a0:	1000e189 	.word	0x1000e189

1000d1a4 <at_ble_adv_data_set>:
1000d1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d1a6:	4684      	mov	ip, r0
1000d1a8:	1c0f      	adds	r7, r1, #0
1000d1aa:	1c16      	adds	r6, r2, #0
1000d1ac:	1c1c      	adds	r4, r3, #0
1000d1ae:	2800      	cmp	r0, #0
1000d1b0:	d102      	bne.n	1000d1b8 <at_ble_adv_data_set+0x14>
1000d1b2:	20e2      	movs	r0, #226	; 0xe2
1000d1b4:	2a00      	cmp	r2, #0
1000d1b6:	d02b      	beq.n	1000d210 <at_ble_adv_data_set+0x6c>
1000d1b8:	20cf      	movs	r0, #207	; 0xcf
1000d1ba:	2f1f      	cmp	r7, #31
1000d1bc:	d828      	bhi.n	1000d210 <at_ble_adv_data_set+0x6c>
1000d1be:	2c1f      	cmp	r4, #31
1000d1c0:	d826      	bhi.n	1000d210 <at_ble_adv_data_set+0x6c>
1000d1c2:	4663      	mov	r3, ip
1000d1c4:	2b00      	cmp	r3, #0
1000d1c6:	d00e      	beq.n	1000d1e6 <at_ble_adv_data_set+0x42>
1000d1c8:	4812      	ldr	r0, [pc, #72]	; (1000d214 <at_ble_adv_data_set+0x70>)
1000d1ca:	4d13      	ldr	r5, [pc, #76]	; (1000d218 <at_ble_adv_data_set+0x74>)
1000d1cc:	2f00      	cmp	r7, #0
1000d1ce:	d104      	bne.n	1000d1da <at_ble_adv_data_set+0x36>
1000d1d0:	1c39      	adds	r1, r7, #0
1000d1d2:	221f      	movs	r2, #31
1000d1d4:	4b11      	ldr	r3, [pc, #68]	; (1000d21c <at_ble_adv_data_set+0x78>)
1000d1d6:	4798      	blx	r3
1000d1d8:	e003      	b.n	1000d1e2 <at_ble_adv_data_set+0x3e>
1000d1da:	4661      	mov	r1, ip
1000d1dc:	1c3a      	adds	r2, r7, #0
1000d1de:	4b10      	ldr	r3, [pc, #64]	; (1000d220 <at_ble_adv_data_set+0x7c>)
1000d1e0:	4798      	blx	r3
1000d1e2:	3572      	adds	r5, #114	; 0x72
1000d1e4:	702f      	strb	r7, [r5, #0]
1000d1e6:	1e30      	subs	r0, r6, #0
1000d1e8:	d012      	beq.n	1000d210 <at_ble_adv_data_set+0x6c>
1000d1ea:	4d0b      	ldr	r5, [pc, #44]	; (1000d218 <at_ble_adv_data_set+0x74>)
1000d1ec:	480d      	ldr	r0, [pc, #52]	; (1000d224 <at_ble_adv_data_set+0x80>)
1000d1ee:	2c00      	cmp	r4, #0
1000d1f0:	d107      	bne.n	1000d202 <at_ble_adv_data_set+0x5e>
1000d1f2:	1c21      	adds	r1, r4, #0
1000d1f4:	221f      	movs	r2, #31
1000d1f6:	4b09      	ldr	r3, [pc, #36]	; (1000d21c <at_ble_adv_data_set+0x78>)
1000d1f8:	3573      	adds	r5, #115	; 0x73
1000d1fa:	4798      	blx	r3
1000d1fc:	702c      	strb	r4, [r5, #0]
1000d1fe:	1c20      	adds	r0, r4, #0
1000d200:	e006      	b.n	1000d210 <at_ble_adv_data_set+0x6c>
1000d202:	1c31      	adds	r1, r6, #0
1000d204:	1c22      	adds	r2, r4, #0
1000d206:	4b06      	ldr	r3, [pc, #24]	; (1000d220 <at_ble_adv_data_set+0x7c>)
1000d208:	4798      	blx	r3
1000d20a:	2000      	movs	r0, #0
1000d20c:	3573      	adds	r5, #115	; 0x73
1000d20e:	702c      	strb	r4, [r5, #0]
1000d210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d212:	46c0      	nop			; (mov r8, r8)
1000d214:	10016142 	.word	0x10016142
1000d218:	1001610e 	.word	0x1001610e
1000d21c:	100116ad 	.word	0x100116ad
1000d220:	1001169b 	.word	0x1001169b
1000d224:	10016161 	.word	0x10016161

1000d228 <at_ble_adv_start>:
1000d228:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d22a:	b091      	sub	sp, #68	; 0x44
1000d22c:	1c1f      	adds	r7, r3, #0
1000d22e:	ab16      	add	r3, sp, #88	; 0x58
1000d230:	881d      	ldrh	r5, [r3, #0]
1000d232:	ab17      	add	r3, sp, #92	; 0x5c
1000d234:	881b      	ldrh	r3, [r3, #0]
1000d236:	910d      	str	r1, [sp, #52]	; 0x34
1000d238:	930e      	str	r3, [sp, #56]	; 0x38
1000d23a:	ab18      	add	r3, sp, #96	; 0x60
1000d23c:	781b      	ldrb	r3, [r3, #0]
1000d23e:	1c04      	adds	r4, r0, #0
1000d240:	930f      	str	r3, [sp, #60]	; 0x3c
1000d242:	4b42      	ldr	r3, [pc, #264]	; (1000d34c <at_ble_adv_start+0x124>)
1000d244:	1c16      	adds	r6, r2, #0
1000d246:	3373      	adds	r3, #115	; 0x73
1000d248:	781b      	ldrb	r3, [r3, #0]
1000d24a:	20cf      	movs	r0, #207	; 0xcf
1000d24c:	930c      	str	r3, [sp, #48]	; 0x30
1000d24e:	2c01      	cmp	r4, #1
1000d250:	d103      	bne.n	1000d25a <at_ble_adv_start+0x32>
1000d252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000d254:	2b00      	cmp	r3, #0
1000d256:	d176      	bne.n	1000d346 <at_ble_adv_start+0x11e>
1000d258:	e024      	b.n	1000d2a4 <at_ble_adv_start+0x7c>
1000d25a:	2c04      	cmp	r4, #4
1000d25c:	d873      	bhi.n	1000d346 <at_ble_adv_start+0x11e>
1000d25e:	2380      	movs	r3, #128	; 0x80
1000d260:	01db      	lsls	r3, r3, #7
1000d262:	429d      	cmp	r5, r3
1000d264:	d86f      	bhi.n	1000d346 <at_ble_adv_start+0x11e>
1000d266:	2c00      	cmp	r4, #0
1000d268:	d102      	bne.n	1000d270 <at_ble_adv_start+0x48>
1000d26a:	2d1f      	cmp	r5, #31
1000d26c:	d96b      	bls.n	1000d346 <at_ble_adv_start+0x11e>
1000d26e:	e003      	b.n	1000d278 <at_ble_adv_start+0x50>
1000d270:	2d9f      	cmp	r5, #159	; 0x9f
1000d272:	d801      	bhi.n	1000d278 <at_ble_adv_start+0x50>
1000d274:	2c01      	cmp	r4, #1
1000d276:	d166      	bne.n	1000d346 <at_ble_adv_start+0x11e>
1000d278:	2f00      	cmp	r7, #0
1000d27a:	d009      	beq.n	1000d290 <at_ble_adv_start+0x68>
1000d27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d27e:	20cf      	movs	r0, #207	; 0xcf
1000d280:	3b01      	subs	r3, #1
1000d282:	2b01      	cmp	r3, #1
1000d284:	d95f      	bls.n	1000d346 <at_ble_adv_start+0x11e>
1000d286:	2c01      	cmp	r4, #1
1000d288:	d102      	bne.n	1000d290 <at_ble_adv_start+0x68>
1000d28a:	2d00      	cmp	r5, #0
1000d28c:	d100      	bne.n	1000d290 <at_ble_adv_start+0x68>
1000d28e:	3520      	adds	r5, #32
1000d290:	4b2f      	ldr	r3, [pc, #188]	; (1000d350 <at_ble_adv_start+0x128>)
1000d292:	4798      	blx	r3
1000d294:	1c01      	adds	r1, r0, #0
1000d296:	2e00      	cmp	r6, #0
1000d298:	d043      	beq.n	1000d322 <at_ble_adv_start+0xfa>
1000d29a:	7833      	ldrb	r3, [r6, #0]
1000d29c:	1e60      	subs	r0, r4, #1
1000d29e:	2b00      	cmp	r3, #0
1000d2a0:	d109      	bne.n	1000d2b6 <at_ble_adv_start+0x8e>
1000d2a2:	e03b      	b.n	1000d31c <at_ble_adv_start+0xf4>
1000d2a4:	2380      	movs	r3, #128	; 0x80
1000d2a6:	01db      	lsls	r3, r3, #7
1000d2a8:	429d      	cmp	r5, r3
1000d2aa:	d84c      	bhi.n	1000d346 <at_ble_adv_start+0x11e>
1000d2ac:	2e00      	cmp	r6, #0
1000d2ae:	d04a      	beq.n	1000d346 <at_ble_adv_start+0x11e>
1000d2b0:	2f00      	cmp	r7, #0
1000d2b2:	d1e3      	bne.n	1000d27c <at_ble_adv_start+0x54>
1000d2b4:	e02b      	b.n	1000d30e <at_ble_adv_start+0xe6>
1000d2b6:	2301      	movs	r3, #1
1000d2b8:	2803      	cmp	r0, #3
1000d2ba:	d93a      	bls.n	1000d332 <at_ble_adv_start+0x10a>
1000d2bc:	200d      	movs	r0, #13
1000d2be:	1c72      	adds	r2, r6, #1
1000d2c0:	e002      	b.n	1000d2c8 <at_ble_adv_start+0xa0>
1000d2c2:	200e      	movs	r0, #14
1000d2c4:	1e32      	subs	r2, r6, #0
1000d2c6:	d1fa      	bne.n	1000d2be <at_ble_adv_start+0x96>
1000d2c8:	4c20      	ldr	r4, [pc, #128]	; (1000d34c <at_ble_adv_start+0x124>)
1000d2ca:	3474      	adds	r4, #116	; 0x74
1000d2cc:	7826      	ldrb	r6, [r4, #0]
1000d2ce:	2407      	movs	r4, #7
1000d2d0:	2e00      	cmp	r6, #0
1000d2d2:	d000      	beq.n	1000d2d6 <at_ble_adv_start+0xae>
1000d2d4:	1c34      	adds	r4, r6, #0
1000d2d6:	9200      	str	r2, [sp, #0]
1000d2d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d2da:	9403      	str	r4, [sp, #12]
1000d2dc:	9204      	str	r2, [sp, #16]
1000d2de:	4a1b      	ldr	r2, [pc, #108]	; (1000d34c <at_ble_adv_start+0x124>)
1000d2e0:	9501      	str	r5, [sp, #4]
1000d2e2:	9502      	str	r5, [sp, #8]
1000d2e4:	9705      	str	r7, [sp, #20]
1000d2e6:	3272      	adds	r2, #114	; 0x72
1000d2e8:	7812      	ldrb	r2, [r2, #0]
1000d2ea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000d2ec:	9206      	str	r2, [sp, #24]
1000d2ee:	4a19      	ldr	r2, [pc, #100]	; (1000d354 <at_ble_adv_start+0x12c>)
1000d2f0:	9207      	str	r2, [sp, #28]
1000d2f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d2f4:	9208      	str	r2, [sp, #32]
1000d2f6:	4a18      	ldr	r2, [pc, #96]	; (1000d358 <at_ble_adv_start+0x130>)
1000d2f8:	9209      	str	r2, [sp, #36]	; 0x24
1000d2fa:	2264      	movs	r2, #100	; 0x64
1000d2fc:	4362      	muls	r2, r4
1000d2fe:	b292      	uxth	r2, r2
1000d300:	920a      	str	r2, [sp, #40]	; 0x28
1000d302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d304:	4c15      	ldr	r4, [pc, #84]	; (1000d35c <at_ble_adv_start+0x134>)
1000d306:	920b      	str	r2, [sp, #44]	; 0x2c
1000d308:	4a15      	ldr	r2, [pc, #84]	; (1000d360 <at_ble_adv_start+0x138>)
1000d30a:	47a0      	blx	r4
1000d30c:	e01b      	b.n	1000d346 <at_ble_adv_start+0x11e>
1000d30e:	2d00      	cmp	r5, #0
1000d310:	d1be      	bne.n	1000d290 <at_ble_adv_start+0x68>
1000d312:	4b0f      	ldr	r3, [pc, #60]	; (1000d350 <at_ble_adv_start+0x128>)
1000d314:	4798      	blx	r3
1000d316:	2520      	movs	r5, #32
1000d318:	1c01      	adds	r1, r0, #0
1000d31a:	e7be      	b.n	1000d29a <at_ble_adv_start+0x72>
1000d31c:	2803      	cmp	r0, #3
1000d31e:	d8cd      	bhi.n	1000d2bc <at_ble_adv_start+0x94>
1000d320:	e006      	b.n	1000d330 <at_ble_adv_start+0x108>
1000d322:	1e60      	subs	r0, r4, #1
1000d324:	2803      	cmp	r0, #3
1000d326:	d903      	bls.n	1000d330 <at_ble_adv_start+0x108>
1000d328:	1c33      	adds	r3, r6, #0
1000d32a:	200d      	movs	r0, #13
1000d32c:	1c32      	adds	r2, r6, #0
1000d32e:	e7cb      	b.n	1000d2c8 <at_ble_adv_start+0xa0>
1000d330:	2300      	movs	r3, #0
1000d332:	f002 fc8d 	bl	1000fc50 <__gnu_thumb1_case_sqi>
1000d336:	06c6      	.short	0x06c6
1000d338:	0204      	.short	0x0204
1000d33a:	200f      	movs	r0, #15
1000d33c:	e7c2      	b.n	1000d2c4 <at_ble_adv_start+0x9c>
1000d33e:	2200      	movs	r2, #0
1000d340:	920c      	str	r2, [sp, #48]	; 0x30
1000d342:	200c      	movs	r0, #12
1000d344:	e7be      	b.n	1000d2c4 <at_ble_adv_start+0x9c>
1000d346:	b011      	add	sp, #68	; 0x44
1000d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d34a:	46c0      	nop			; (mov r8, r8)
1000d34c:	1001610e 	.word	0x1001610e
1000d350:	1000f219 	.word	0x1000f219
1000d354:	10016142 	.word	0x10016142
1000d358:	10016161 	.word	0x10016161
1000d35c:	1000f0f9 	.word	0x1000f0f9
1000d360:	00003a98 	.word	0x00003a98

1000d364 <at_ble_scan_stop>:
1000d364:	b510      	push	{r4, lr}
1000d366:	4b05      	ldr	r3, [pc, #20]	; (1000d37c <at_ble_scan_stop+0x18>)
1000d368:	4798      	blx	r3
1000d36a:	1e04      	subs	r4, r0, #0
1000d36c:	d103      	bne.n	1000d376 <at_ble_scan_stop+0x12>
1000d36e:	20d1      	movs	r0, #209	; 0xd1
1000d370:	4b03      	ldr	r3, [pc, #12]	; (1000d380 <at_ble_scan_stop+0x1c>)
1000d372:	0100      	lsls	r0, r0, #4
1000d374:	4798      	blx	r3
1000d376:	1c20      	adds	r0, r4, #0
1000d378:	bd10      	pop	{r4, pc}
1000d37a:	46c0      	nop			; (mov r8, r8)
1000d37c:	1000ef25 	.word	0x1000ef25
1000d380:	1000ce1d 	.word	0x1000ce1d

1000d384 <at_ble_disconnect>:
1000d384:	b538      	push	{r3, r4, r5, lr}
1000d386:	1c04      	adds	r4, r0, #0
1000d388:	4b04      	ldr	r3, [pc, #16]	; (1000d39c <at_ble_disconnect+0x18>)
1000d38a:	1c08      	adds	r0, r1, #0
1000d38c:	1c21      	adds	r1, r4, #0
1000d38e:	4798      	blx	r3
1000d390:	1c05      	adds	r5, r0, #0
1000d392:	4b03      	ldr	r3, [pc, #12]	; (1000d3a0 <at_ble_disconnect+0x1c>)
1000d394:	1c20      	adds	r0, r4, #0
1000d396:	4798      	blx	r3
1000d398:	1c28      	adds	r0, r5, #0
1000d39a:	bd38      	pop	{r3, r4, r5, pc}
1000d39c:	1000e59d 	.word	0x1000e59d
1000d3a0:	1000ce61 	.word	0x1000ce61

1000d3a4 <at_ble_conn_update_reply>:
1000d3a4:	b510      	push	{r4, lr}
1000d3a6:	4c01      	ldr	r4, [pc, #4]	; (1000d3ac <at_ble_conn_update_reply+0x8>)
1000d3a8:	47a0      	blx	r4
1000d3aa:	bd10      	pop	{r4, pc}
1000d3ac:	1000ea8d 	.word	0x1000ea8d

1000d3b0 <at_ble_random_address_resolve>:
1000d3b0:	b510      	push	{r4, lr}
1000d3b2:	23cf      	movs	r3, #207	; 0xcf
1000d3b4:	2800      	cmp	r0, #0
1000d3b6:	d00a      	beq.n	1000d3ce <at_ble_random_address_resolve+0x1e>
1000d3b8:	2900      	cmp	r1, #0
1000d3ba:	d008      	beq.n	1000d3ce <at_ble_random_address_resolve+0x1e>
1000d3bc:	2a00      	cmp	r2, #0
1000d3be:	d006      	beq.n	1000d3ce <at_ble_random_address_resolve+0x1e>
1000d3c0:	780c      	ldrb	r4, [r1, #0]
1000d3c2:	2c02      	cmp	r4, #2
1000d3c4:	d103      	bne.n	1000d3ce <at_ble_random_address_resolve+0x1e>
1000d3c6:	4b03      	ldr	r3, [pc, #12]	; (1000d3d4 <at_ble_random_address_resolve+0x24>)
1000d3c8:	3101      	adds	r1, #1
1000d3ca:	4798      	blx	r3
1000d3cc:	2300      	movs	r3, #0
1000d3ce:	1c18      	adds	r0, r3, #0
1000d3d0:	bd10      	pop	{r4, pc}
1000d3d2:	46c0      	nop			; (mov r8, r8)
1000d3d4:	1000f2b9 	.word	0x1000f2b9

1000d3d8 <at_ble_uuid_type2len>:
1000d3d8:	23cf      	movs	r3, #207	; 0xcf
1000d3da:	2802      	cmp	r0, #2
1000d3dc:	d801      	bhi.n	1000d3e2 <at_ble_uuid_type2len+0xa>
1000d3de:	4b02      	ldr	r3, [pc, #8]	; (1000d3e8 <at_ble_uuid_type2len+0x10>)
1000d3e0:	5c1b      	ldrb	r3, [r3, r0]
1000d3e2:	1c18      	adds	r0, r3, #0
1000d3e4:	4770      	bx	lr
1000d3e6:	46c0      	nop			; (mov r8, r8)
1000d3e8:	100136df 	.word	0x100136df

1000d3ec <at_ble_uuid_len2type>:
1000d3ec:	1e83      	subs	r3, r0, #2
1000d3ee:	b2db      	uxtb	r3, r3
1000d3f0:	2003      	movs	r0, #3
1000d3f2:	2b0e      	cmp	r3, #14
1000d3f4:	d801      	bhi.n	1000d3fa <at_ble_uuid_len2type+0xe>
1000d3f6:	4a01      	ldr	r2, [pc, #4]	; (1000d3fc <at_ble_uuid_len2type+0x10>)
1000d3f8:	5cd0      	ldrb	r0, [r2, r3]
1000d3fa:	4770      	bx	lr
1000d3fc:	100136e2 	.word	0x100136e2

1000d400 <init_gatt_client_module>:
1000d400:	2200      	movs	r2, #0
1000d402:	4b01      	ldr	r3, [pc, #4]	; (1000d408 <init_gatt_client_module+0x8>)
1000d404:	801a      	strh	r2, [r3, #0]
1000d406:	4770      	bx	lr
1000d408:	100152f8 	.word	0x100152f8

1000d40c <db_searchATT>:
1000d40c:	b570      	push	{r4, r5, r6, lr}
1000d40e:	1c05      	adds	r5, r0, #0
1000d410:	2400      	movs	r4, #0
1000d412:	4b0c      	ldr	r3, [pc, #48]	; (1000d444 <db_searchATT+0x38>)
1000d414:	6819      	ldr	r1, [r3, #0]
1000d416:	4b0c      	ldr	r3, [pc, #48]	; (1000d448 <db_searchATT+0x3c>)
1000d418:	681e      	ldr	r6, [r3, #0]
1000d41a:	428c      	cmp	r4, r1
1000d41c:	dc10      	bgt.n	1000d440 <db_searchATT+0x34>
1000d41e:	200c      	movs	r0, #12
1000d420:	1863      	adds	r3, r4, r1
1000d422:	0fda      	lsrs	r2, r3, #31
1000d424:	18d3      	adds	r3, r2, r3
1000d426:	1c02      	adds	r2, r0, #0
1000d428:	105b      	asrs	r3, r3, #1
1000d42a:	435a      	muls	r2, r3
1000d42c:	18b0      	adds	r0, r6, r2
1000d42e:	8802      	ldrh	r2, [r0, #0]
1000d430:	42aa      	cmp	r2, r5
1000d432:	d201      	bcs.n	1000d438 <db_searchATT+0x2c>
1000d434:	1e59      	subs	r1, r3, #1
1000d436:	e7f0      	b.n	1000d41a <db_searchATT+0xe>
1000d438:	42aa      	cmp	r2, r5
1000d43a:	d902      	bls.n	1000d442 <db_searchATT+0x36>
1000d43c:	1c5c      	adds	r4, r3, #1
1000d43e:	e7ec      	b.n	1000d41a <db_searchATT+0xe>
1000d440:	2000      	movs	r0, #0
1000d442:	bd70      	pop	{r4, r5, r6, pc}
1000d444:	1001530c 	.word	0x1001530c
1000d448:	10015304 	.word	0x10015304

1000d44c <att_permissions>:
1000d44c:	b530      	push	{r4, r5, lr}
1000d44e:	2403      	movs	r4, #3
1000d450:	1c05      	adds	r5, r0, #0
1000d452:	2301      	movs	r3, #1
1000d454:	4025      	ands	r5, r4
1000d456:	42a5      	cmp	r5, r4
1000d458:	d009      	beq.n	1000d46e <att_permissions+0x22>
1000d45a:	1c23      	adds	r3, r4, #0
1000d45c:	1924      	adds	r4, r4, r4
1000d45e:	4220      	tst	r0, r4
1000d460:	d105      	bne.n	1000d46e <att_permissions+0x22>
1000d462:	3b02      	subs	r3, #2
1000d464:	4218      	tst	r0, r3
1000d466:	d102      	bne.n	1000d46e <att_permissions+0x22>
1000d468:	1e4b      	subs	r3, r1, #1
1000d46a:	4199      	sbcs	r1, r3
1000d46c:	b28b      	uxth	r3, r1
1000d46e:	2130      	movs	r1, #48	; 0x30
1000d470:	4001      	ands	r1, r0
1000d472:	2930      	cmp	r1, #48	; 0x30
1000d474:	d007      	beq.n	1000d486 <att_permissions+0x3a>
1000d476:	0641      	lsls	r1, r0, #25
1000d478:	d401      	bmi.n	1000d47e <att_permissions+0x32>
1000d47a:	0681      	lsls	r1, r0, #26
1000d47c:	d501      	bpl.n	1000d482 <att_permissions+0x36>
1000d47e:	4807      	ldr	r0, [pc, #28]	; (1000d49c <att_permissions+0x50>)
1000d480:	e009      	b.n	1000d496 <att_permissions+0x4a>
1000d482:	06c1      	lsls	r1, r0, #27
1000d484:	d501      	bpl.n	1000d48a <att_permissions+0x3e>
1000d486:	4806      	ldr	r0, [pc, #24]	; (1000d4a0 <att_permissions+0x54>)
1000d488:	e005      	b.n	1000d496 <att_permissions+0x4a>
1000d48a:	2a00      	cmp	r2, #0
1000d48c:	d001      	beq.n	1000d492 <att_permissions+0x46>
1000d48e:	2204      	movs	r2, #4
1000d490:	4313      	orrs	r3, r2
1000d492:	2080      	movs	r0, #128	; 0x80
1000d494:	0180      	lsls	r0, r0, #6
1000d496:	4318      	orrs	r0, r3
1000d498:	bd30      	pop	{r4, r5, pc}
1000d49a:	46c0      	nop			; (mov r8, r8)
1000d49c:	0000200c 	.word	0x0000200c
1000d4a0:	00002004 	.word	0x00002004

1000d4a4 <char_permissions>:
1000d4a4:	b530      	push	{r4, r5, lr}
1000d4a6:	2300      	movs	r3, #0
1000d4a8:	0784      	lsls	r4, r0, #30
1000d4aa:	d503      	bpl.n	1000d4b4 <char_permissions+0x10>
1000d4ac:	3301      	adds	r3, #1
1000d4ae:	4219      	tst	r1, r3
1000d4b0:	d100      	bne.n	1000d4b4 <char_permissions+0x10>
1000d4b2:	3302      	adds	r3, #2
1000d4b4:	0704      	lsls	r4, r0, #28
1000d4b6:	d508      	bpl.n	1000d4ca <char_permissions+0x26>
1000d4b8:	06cc      	lsls	r4, r1, #27
1000d4ba:	d501      	bpl.n	1000d4c0 <char_permissions+0x1c>
1000d4bc:	2404      	movs	r4, #4
1000d4be:	e000      	b.n	1000d4c2 <char_permissions+0x1e>
1000d4c0:	240c      	movs	r4, #12
1000d4c2:	4323      	orrs	r3, r4
1000d4c4:	2480      	movs	r4, #128	; 0x80
1000d4c6:	01a4      	lsls	r4, r4, #6
1000d4c8:	4323      	orrs	r3, r4
1000d4ca:	0684      	lsls	r4, r0, #26
1000d4cc:	d506      	bpl.n	1000d4dc <char_permissions+0x38>
1000d4ce:	2406      	movs	r4, #6
1000d4d0:	4221      	tst	r1, r4
1000d4d2:	d101      	bne.n	1000d4d8 <char_permissions+0x34>
1000d4d4:	340a      	adds	r4, #10
1000d4d6:	e000      	b.n	1000d4da <char_permissions+0x36>
1000d4d8:	2430      	movs	r4, #48	; 0x30
1000d4da:	4323      	orrs	r3, r4
1000d4dc:	06c4      	lsls	r4, r0, #27
1000d4de:	d506      	bpl.n	1000d4ee <char_permissions+0x4a>
1000d4e0:	2406      	movs	r4, #6
1000d4e2:	4221      	tst	r1, r4
1000d4e4:	d101      	bne.n	1000d4ea <char_permissions+0x46>
1000d4e6:	343a      	adds	r4, #58	; 0x3a
1000d4e8:	e000      	b.n	1000d4ec <char_permissions+0x48>
1000d4ea:	24c0      	movs	r4, #192	; 0xc0
1000d4ec:	4323      	orrs	r3, r4
1000d4ee:	2480      	movs	r4, #128	; 0x80
1000d4f0:	0064      	lsls	r4, r4, #1
1000d4f2:	4220      	tst	r0, r4
1000d4f4:	d000      	beq.n	1000d4f8 <char_permissions+0x54>
1000d4f6:	4323      	orrs	r3, r4
1000d4f8:	07c4      	lsls	r4, r0, #31
1000d4fa:	d502      	bpl.n	1000d502 <char_permissions+0x5e>
1000d4fc:	2480      	movs	r4, #128	; 0x80
1000d4fe:	00a4      	lsls	r4, r4, #2
1000d500:	4323      	orrs	r3, r4
1000d502:	2404      	movs	r4, #4
1000d504:	4220      	tst	r0, r4
1000d506:	d006      	beq.n	1000d516 <char_permissions+0x72>
1000d508:	06cd      	lsls	r5, r1, #27
1000d50a:	d400      	bmi.n	1000d50e <char_permissions+0x6a>
1000d50c:	240c      	movs	r4, #12
1000d50e:	4323      	orrs	r3, r4
1000d510:	2480      	movs	r4, #128	; 0x80
1000d512:	0124      	lsls	r4, r4, #4
1000d514:	4323      	orrs	r3, r4
1000d516:	0644      	lsls	r4, r0, #25
1000d518:	d501      	bpl.n	1000d51e <char_permissions+0x7a>
1000d51a:	4c08      	ldr	r4, [pc, #32]	; (1000d53c <char_permissions+0x98>)
1000d51c:	4323      	orrs	r3, r4
1000d51e:	0600      	lsls	r0, r0, #24
1000d520:	d507      	bpl.n	1000d532 <char_permissions+0x8e>
1000d522:	2004      	movs	r0, #4
1000d524:	06c9      	lsls	r1, r1, #27
1000d526:	d400      	bmi.n	1000d52a <char_permissions+0x86>
1000d528:	200c      	movs	r0, #12
1000d52a:	4303      	orrs	r3, r0
1000d52c:	2084      	movs	r0, #132	; 0x84
1000d52e:	0180      	lsls	r0, r0, #6
1000d530:	4303      	orrs	r3, r0
1000d532:	0390      	lsls	r0, r2, #14
1000d534:	4303      	orrs	r3, r0
1000d536:	b298      	uxth	r0, r3
1000d538:	bd30      	pop	{r4, r5, pc}
1000d53a:	46c0      	nop			; (mov r8, r8)
1000d53c:	00001004 	.word	0x00001004

1000d540 <presentation_format_define>:
1000d540:	b507      	push	{r0, r1, r2, lr}
1000d542:	466a      	mov	r2, sp
1000d544:	780b      	ldrb	r3, [r1, #0]
1000d546:	7013      	strb	r3, [r2, #0]
1000d548:	784b      	ldrb	r3, [r1, #1]
1000d54a:	7053      	strb	r3, [r2, #1]
1000d54c:	884b      	ldrh	r3, [r1, #2]
1000d54e:	7093      	strb	r3, [r2, #2]
1000d550:	0a1b      	lsrs	r3, r3, #8
1000d552:	70d3      	strb	r3, [r2, #3]
1000d554:	790b      	ldrb	r3, [r1, #4]
1000d556:	7113      	strb	r3, [r2, #4]
1000d558:	88cb      	ldrh	r3, [r1, #6]
1000d55a:	2107      	movs	r1, #7
1000d55c:	7153      	strb	r3, [r2, #5]
1000d55e:	0a1b      	lsrs	r3, r3, #8
1000d560:	7193      	strb	r3, [r2, #6]
1000d562:	4b01      	ldr	r3, [pc, #4]	; (1000d568 <presentation_format_define+0x28>)
1000d564:	4798      	blx	r3
1000d566:	bd0e      	pop	{r1, r2, r3, pc}
1000d568:	1000fa05 	.word	0x1000fa05

1000d56c <db_addATT>:
1000d56c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d56e:	4c29      	ldr	r4, [pc, #164]	; (1000d614 <db_addATT+0xa8>)
1000d570:	1c1d      	adds	r5, r3, #0
1000d572:	6823      	ldr	r3, [r4, #0]
1000d574:	9001      	str	r0, [sp, #4]
1000d576:	26d3      	movs	r6, #211	; 0xd3
1000d578:	2b00      	cmp	r3, #0
1000d57a:	d048      	beq.n	1000d60e <db_addATT+0xa2>
1000d57c:	1c1e      	adds	r6, r3, #0
1000d57e:	3e0c      	subs	r6, #12
1000d580:	6026      	str	r6, [r4, #0]
1000d582:	2900      	cmp	r1, #0
1000d584:	d005      	beq.n	1000d592 <db_addATT+0x26>
1000d586:	4f24      	ldr	r7, [pc, #144]	; (1000d618 <db_addATT+0xac>)
1000d588:	46bc      	mov	ip, r7
1000d58a:	4660      	mov	r0, ip
1000d58c:	683f      	ldr	r7, [r7, #0]
1000d58e:	18bf      	adds	r7, r7, r2
1000d590:	6007      	str	r7, [r0, #0]
1000d592:	4821      	ldr	r0, [pc, #132]	; (1000d618 <db_addATT+0xac>)
1000d594:	6807      	ldr	r7, [r0, #0]
1000d596:	4684      	mov	ip, r0
1000d598:	42be      	cmp	r6, r7
1000d59a:	d932      	bls.n	1000d602 <db_addATT+0x96>
1000d59c:	4668      	mov	r0, sp
1000d59e:	8880      	ldrh	r0, [r0, #4]
1000d5a0:	3b0c      	subs	r3, #12
1000d5a2:	8018      	strh	r0, [r3, #0]
1000d5a4:	6823      	ldr	r3, [r4, #0]
1000d5a6:	2900      	cmp	r1, #0
1000d5a8:	d009      	beq.n	1000d5be <db_addATT+0x52>
1000d5aa:	2a00      	cmp	r2, #0
1000d5ac:	d007      	beq.n	1000d5be <db_addATT+0x52>
1000d5ae:	4660      	mov	r0, ip
1000d5b0:	6800      	ldr	r0, [r0, #0]
1000d5b2:	809a      	strh	r2, [r3, #4]
1000d5b4:	1a80      	subs	r0, r0, r2
1000d5b6:	6098      	str	r0, [r3, #8]
1000d5b8:	4b18      	ldr	r3, [pc, #96]	; (1000d61c <db_addATT+0xb0>)
1000d5ba:	4798      	blx	r3
1000d5bc:	e002      	b.n	1000d5c4 <db_addATT+0x58>
1000d5be:	2100      	movs	r1, #0
1000d5c0:	809a      	strh	r2, [r3, #4]
1000d5c2:	6099      	str	r1, [r3, #8]
1000d5c4:	2300      	movs	r3, #0
1000d5c6:	6822      	ldr	r2, [r4, #0]
1000d5c8:	7093      	strb	r3, [r2, #2]
1000d5ca:	3303      	adds	r3, #3
1000d5cc:	402b      	ands	r3, r5
1000d5ce:	2b03      	cmp	r3, #3
1000d5d0:	d001      	beq.n	1000d5d6 <db_addATT+0x6a>
1000d5d2:	076b      	lsls	r3, r5, #29
1000d5d4:	d504      	bpl.n	1000d5e0 <db_addATT+0x74>
1000d5d6:	2101      	movs	r1, #1
1000d5d8:	6822      	ldr	r2, [r4, #0]
1000d5da:	7893      	ldrb	r3, [r2, #2]
1000d5dc:	430b      	orrs	r3, r1
1000d5de:	7093      	strb	r3, [r2, #2]
1000d5e0:	2330      	movs	r3, #48	; 0x30
1000d5e2:	402b      	ands	r3, r5
1000d5e4:	2b30      	cmp	r3, #48	; 0x30
1000d5e6:	d001      	beq.n	1000d5ec <db_addATT+0x80>
1000d5e8:	066b      	lsls	r3, r5, #25
1000d5ea:	d504      	bpl.n	1000d5f6 <db_addATT+0x8a>
1000d5ec:	2102      	movs	r1, #2
1000d5ee:	6822      	ldr	r2, [r4, #0]
1000d5f0:	7893      	ldrb	r3, [r2, #2]
1000d5f2:	430b      	orrs	r3, r1
1000d5f4:	7093      	strb	r3, [r2, #2]
1000d5f6:	4a0a      	ldr	r2, [pc, #40]	; (1000d620 <db_addATT+0xb4>)
1000d5f8:	2600      	movs	r6, #0
1000d5fa:	6813      	ldr	r3, [r2, #0]
1000d5fc:	3301      	adds	r3, #1
1000d5fe:	6013      	str	r3, [r2, #0]
1000d600:	e005      	b.n	1000d60e <db_addATT+0xa2>
1000d602:	6023      	str	r3, [r4, #0]
1000d604:	2611      	movs	r6, #17
1000d606:	2900      	cmp	r1, #0
1000d608:	d001      	beq.n	1000d60e <db_addATT+0xa2>
1000d60a:	1aba      	subs	r2, r7, r2
1000d60c:	6002      	str	r2, [r0, #0]
1000d60e:	1c30      	adds	r0, r6, #0
1000d610:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d612:	46c0      	nop			; (mov r8, r8)
1000d614:	10015304 	.word	0x10015304
1000d618:	10015308 	.word	0x10015308
1000d61c:	1001169b 	.word	0x1001169b
1000d620:	1001530c 	.word	0x1001530c

1000d624 <user_description_define>:
1000d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d626:	1c05      	adds	r5, r0, #0
1000d628:	20cf      	movs	r0, #207	; 0xcf
1000d62a:	2a00      	cmp	r2, #0
1000d62c:	d01c      	beq.n	1000d668 <user_description_define+0x44>
1000d62e:	1c14      	adds	r4, r2, #0
1000d630:	2203      	movs	r2, #3
1000d632:	1c1e      	adds	r6, r3, #0
1000d634:	400a      	ands	r2, r1
1000d636:	1c0b      	adds	r3, r1, #0
1000d638:	3a03      	subs	r2, #3
1000d63a:	4251      	negs	r1, r2
1000d63c:	4151      	adcs	r1, r2
1000d63e:	075a      	lsls	r2, r3, #29
1000d640:	0fd2      	lsrs	r2, r2, #31
1000d642:	430a      	orrs	r2, r1
1000d644:	03d2      	lsls	r2, r2, #15
1000d646:	4f09      	ldr	r7, [pc, #36]	; (1000d66c <user_description_define+0x48>)
1000d648:	1c28      	adds	r0, r5, #0
1000d64a:	2a00      	cmp	r2, #0
1000d64c:	d003      	beq.n	1000d656 <user_description_define+0x32>
1000d64e:	1c21      	adds	r1, r4, #0
1000d650:	1c32      	adds	r2, r6, #0
1000d652:	47b8      	blx	r7
1000d654:	e008      	b.n	1000d668 <user_description_define+0x44>
1000d656:	1c11      	adds	r1, r2, #0
1000d658:	47b8      	blx	r7
1000d65a:	2800      	cmp	r0, #0
1000d65c:	d104      	bne.n	1000d668 <user_description_define+0x44>
1000d65e:	1c28      	adds	r0, r5, #0
1000d660:	1c31      	adds	r1, r6, #0
1000d662:	1c22      	adds	r2, r4, #0
1000d664:	4b02      	ldr	r3, [pc, #8]	; (1000d670 <user_description_define+0x4c>)
1000d666:	4798      	blx	r3
1000d668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d66a:	46c0      	nop			; (mov r8, r8)
1000d66c:	1000d56d 	.word	0x1000d56d
1000d670:	1000fa05 	.word	0x1000fa05

1000d674 <at_ble_read_authorize_reply.part.1>:
1000d674:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d676:	4b09      	ldr	r3, [pc, #36]	; (1000d69c <at_ble_read_authorize_reply.part.1+0x28>)
1000d678:	1c05      	adds	r5, r0, #0
1000d67a:	1c08      	adds	r0, r1, #0
1000d67c:	1c0c      	adds	r4, r1, #0
1000d67e:	4798      	blx	r3
1000d680:	2800      	cmp	r0, #0
1000d682:	d009      	beq.n	1000d698 <at_ble_read_authorize_reply.part.1+0x24>
1000d684:	6882      	ldr	r2, [r0, #8]
1000d686:	2a00      	cmp	r2, #0
1000d688:	d006      	beq.n	1000d698 <at_ble_read_authorize_reply.part.1+0x24>
1000d68a:	8883      	ldrh	r3, [r0, #4]
1000d68c:	1c29      	adds	r1, r5, #0
1000d68e:	9200      	str	r2, [sp, #0]
1000d690:	1c20      	adds	r0, r4, #0
1000d692:	2200      	movs	r2, #0
1000d694:	4c02      	ldr	r4, [pc, #8]	; (1000d6a0 <at_ble_read_authorize_reply.part.1+0x2c>)
1000d696:	47a0      	blx	r4
1000d698:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d69a:	46c0      	nop			; (mov r8, r8)
1000d69c:	1000d40d 	.word	0x1000d40d
1000d6a0:	1000f49d 	.word	0x1000f49d

1000d6a4 <internal_at_ble_service_define>:
1000d6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6a6:	b08b      	sub	sp, #44	; 0x2c
1000d6a8:	9306      	str	r3, [sp, #24]
1000d6aa:	ab10      	add	r3, sp, #64	; 0x40
1000d6ac:	9202      	str	r2, [sp, #8]
1000d6ae:	cb04      	ldmia	r3!, {r2}
1000d6b0:	1c05      	adds	r5, r0, #0
1000d6b2:	881b      	ldrh	r3, [r3, #0]
1000d6b4:	9105      	str	r1, [sp, #20]
1000d6b6:	9303      	str	r3, [sp, #12]
1000d6b8:	ab12      	add	r3, sp, #72	; 0x48
1000d6ba:	781b      	ldrb	r3, [r3, #0]
1000d6bc:	20cf      	movs	r0, #207	; 0xcf
1000d6be:	9304      	str	r3, [sp, #16]
1000d6c0:	2d00      	cmp	r5, #0
1000d6c2:	d100      	bne.n	1000d6c6 <internal_at_ble_service_define+0x22>
1000d6c4:	e1ca      	b.n	1000da5c <internal_at_ble_service_define+0x3b8>
1000d6c6:	2900      	cmp	r1, #0
1000d6c8:	d100      	bne.n	1000d6cc <internal_at_ble_service_define+0x28>
1000d6ca:	e1c7      	b.n	1000da5c <internal_at_ble_service_define+0x3b8>
1000d6cc:	2a00      	cmp	r2, #0
1000d6ce:	d100      	bne.n	1000d6d2 <internal_at_ble_service_define+0x2e>
1000d6d0:	e1c4      	b.n	1000da5c <internal_at_ble_service_define+0x3b8>
1000d6d2:	9b03      	ldr	r3, [sp, #12]
1000d6d4:	2b00      	cmp	r3, #0
1000d6d6:	d100      	bne.n	1000d6da <internal_at_ble_service_define+0x36>
1000d6d8:	e1c0      	b.n	1000da5c <internal_at_ble_service_define+0x3b8>
1000d6da:	4bc9      	ldr	r3, [pc, #804]	; (1000da00 <internal_at_ble_service_define+0x35c>)
1000d6dc:	3004      	adds	r0, #4
1000d6de:	681e      	ldr	r6, [r3, #0]
1000d6e0:	2e00      	cmp	r6, #0
1000d6e2:	d100      	bne.n	1000d6e6 <internal_at_ble_service_define+0x42>
1000d6e4:	e1ba      	b.n	1000da5c <internal_at_ble_service_define+0x3b8>
1000d6e6:	2400      	movs	r4, #0
1000d6e8:	4bc6      	ldr	r3, [pc, #792]	; (1000da04 <internal_at_ble_service_define+0x360>)
1000d6ea:	8034      	strh	r4, [r6, #0]
1000d6ec:	881b      	ldrh	r3, [r3, #0]
1000d6ee:	1db7      	adds	r7, r6, #6
1000d6f0:	1c21      	adds	r1, r4, #0
1000d6f2:	2210      	movs	r2, #16
1000d6f4:	8073      	strh	r3, [r6, #2]
1000d6f6:	1c38      	adds	r0, r7, #0
1000d6f8:	4bc3      	ldr	r3, [pc, #780]	; (1000da08 <internal_at_ble_service_define+0x364>)
1000d6fa:	4798      	blx	r3
1000d6fc:	7828      	ldrb	r0, [r5, #0]
1000d6fe:	4bc3      	ldr	r3, [pc, #780]	; (1000da0c <internal_at_ble_service_define+0x368>)
1000d700:	4798      	blx	r3
1000d702:	1c69      	adds	r1, r5, #1
1000d704:	1c02      	adds	r2, r0, #0
1000d706:	4bc2      	ldr	r3, [pc, #776]	; (1000da10 <internal_at_ble_service_define+0x36c>)
1000d708:	1c38      	adds	r0, r7, #0
1000d70a:	4798      	blx	r3
1000d70c:	2204      	movs	r2, #4
1000d70e:	782b      	ldrb	r3, [r5, #0]
1000d710:	9d02      	ldr	r5, [sp, #8]
1000d712:	011b      	lsls	r3, r3, #4
1000d714:	4313      	orrs	r3, r2
1000d716:	9a04      	ldr	r2, [sp, #16]
1000d718:	7174      	strb	r4, [r6, #5]
1000d71a:	0192      	lsls	r2, r2, #6
1000d71c:	4313      	orrs	r3, r2
1000d71e:	7133      	strb	r3, [r6, #4]
1000d720:	2316      	movs	r3, #22
1000d722:	9a06      	ldr	r2, [sp, #24]
1000d724:	3512      	adds	r5, #18
1000d726:	4353      	muls	r3, r2
1000d728:	9a02      	ldr	r2, [sp, #8]
1000d72a:	3312      	adds	r3, #18
1000d72c:	18d7      	adds	r7, r2, r3
1000d72e:	42bd      	cmp	r5, r7
1000d730:	d00f      	beq.n	1000d752 <internal_at_ble_service_define+0xae>
1000d732:	4bb8      	ldr	r3, [pc, #736]	; (1000da14 <internal_at_ble_service_define+0x370>)
1000d734:	8829      	ldrh	r1, [r5, #0]
1000d736:	9300      	str	r3, [sp, #0]
1000d738:	230e      	movs	r3, #14
1000d73a:	aa06      	add	r2, sp, #24
1000d73c:	189b      	adds	r3, r3, r2
1000d73e:	9301      	str	r3, [sp, #4]
1000d740:	4cb5      	ldr	r4, [pc, #724]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d742:	1c30      	adds	r0, r6, #0
1000d744:	2201      	movs	r2, #1
1000d746:	2302      	movs	r3, #2
1000d748:	47a0      	blx	r4
1000d74a:	3516      	adds	r5, #22
1000d74c:	1e04      	subs	r4, r0, #0
1000d74e:	d0ee      	beq.n	1000d72e <internal_at_ble_service_define+0x8a>
1000d750:	e183      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d752:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000d754:	2300      	movs	r3, #0
1000d756:	3714      	adds	r7, #20
1000d758:	1c3d      	adds	r5, r7, #0
1000d75a:	9302      	str	r3, [sp, #8]
1000d75c:	9b02      	ldr	r3, [sp, #8]
1000d75e:	9a03      	ldr	r2, [sp, #12]
1000d760:	4293      	cmp	r3, r2
1000d762:	db00      	blt.n	1000d766 <internal_at_ble_service_define+0xc2>
1000d764:	e0bf      	b.n	1000d8e6 <internal_at_ble_service_define+0x242>
1000d766:	4bad      	ldr	r3, [pc, #692]	; (1000da1c <internal_at_ble_service_define+0x378>)
1000d768:	aa06      	add	r2, sp, #24
1000d76a:	9300      	str	r3, [sp, #0]
1000d76c:	230e      	movs	r3, #14
1000d76e:	189b      	adds	r3, r3, r2
1000d770:	9301      	str	r3, [sp, #4]
1000d772:	4ca9      	ldr	r4, [pc, #676]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d774:	1c30      	adds	r0, r6, #0
1000d776:	2104      	movs	r1, #4
1000d778:	2201      	movs	r2, #1
1000d77a:	2302      	movs	r3, #2
1000d77c:	47a0      	blx	r4
1000d77e:	1e04      	subs	r4, r0, #0
1000d780:	d000      	beq.n	1000d784 <internal_at_ble_service_define+0xe0>
1000d782:	e16a      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d784:	1c2b      	adds	r3, r5, #0
1000d786:	3b12      	subs	r3, #18
1000d788:	7b2c      	ldrb	r4, [r5, #12]
1000d78a:	781b      	ldrb	r3, [r3, #0]
1000d78c:	1c21      	adds	r1, r4, #0
1000d78e:	1c1a      	adds	r2, r3, #0
1000d790:	9304      	str	r3, [sp, #16]
1000d792:	8828      	ldrh	r0, [r5, #0]
1000d794:	4ba2      	ldr	r3, [pc, #648]	; (1000da20 <internal_at_ble_service_define+0x37c>)
1000d796:	4798      	blx	r3
1000d798:	2303      	movs	r3, #3
1000d79a:	4023      	ands	r3, r4
1000d79c:	3b03      	subs	r3, #3
1000d79e:	4259      	negs	r1, r3
1000d7a0:	4159      	adcs	r1, r3
1000d7a2:	2301      	movs	r3, #1
1000d7a4:	08a4      	lsrs	r4, r4, #2
1000d7a6:	401c      	ands	r4, r3
1000d7a8:	430c      	orrs	r4, r1
1000d7aa:	896b      	ldrh	r3, [r5, #10]
1000d7ac:	03e4      	lsls	r4, r4, #15
1000d7ae:	431c      	orrs	r4, r3
1000d7b0:	9007      	str	r0, [sp, #28]
1000d7b2:	4b96      	ldr	r3, [pc, #600]	; (1000da0c <internal_at_ble_service_define+0x368>)
1000d7b4:	9804      	ldr	r0, [sp, #16]
1000d7b6:	4798      	blx	r3
1000d7b8:	1c2a      	adds	r2, r5, #0
1000d7ba:	3a11      	subs	r2, #17
1000d7bc:	9200      	str	r2, [sp, #0]
1000d7be:	3a03      	subs	r2, #3
1000d7c0:	1c03      	adds	r3, r0, #0
1000d7c2:	9201      	str	r2, [sp, #4]
1000d7c4:	1c21      	adds	r1, r4, #0
1000d7c6:	1c30      	adds	r0, r6, #0
1000d7c8:	4c93      	ldr	r4, [pc, #588]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d7ca:	9a07      	ldr	r2, [sp, #28]
1000d7cc:	47a0      	blx	r4
1000d7ce:	1e04      	subs	r4, r0, #0
1000d7d0:	d000      	beq.n	1000d7d4 <internal_at_ble_service_define+0x130>
1000d7d2:	e142      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d7d4:	22c0      	movs	r2, #192	; 0xc0
1000d7d6:	882b      	ldrh	r3, [r5, #0]
1000d7d8:	0052      	lsls	r2, r2, #1
1000d7da:	4213      	tst	r3, r2
1000d7dc:	d104      	bne.n	1000d7e8 <internal_at_ble_service_define+0x144>
1000d7de:	8aab      	ldrh	r3, [r5, #20]
1000d7e0:	9304      	str	r3, [sp, #16]
1000d7e2:	2b00      	cmp	r3, #0
1000d7e4:	d116      	bne.n	1000d814 <internal_at_ble_service_define+0x170>
1000d7e6:	e03a      	b.n	1000d85e <internal_at_ble_service_define+0x1ba>
1000d7e8:	2201      	movs	r2, #1
1000d7ea:	09d9      	lsrs	r1, r3, #7
1000d7ec:	4011      	ands	r1, r2
1000d7ee:	05db      	lsls	r3, r3, #23
1000d7f0:	d501      	bpl.n	1000d7f6 <internal_at_ble_service_define+0x152>
1000d7f2:	2302      	movs	r3, #2
1000d7f4:	4319      	orrs	r1, r3
1000d7f6:	4b8b      	ldr	r3, [pc, #556]	; (1000da24 <internal_at_ble_service_define+0x380>)
1000d7f8:	aa06      	add	r2, sp, #24
1000d7fa:	9300      	str	r3, [sp, #0]
1000d7fc:	230e      	movs	r3, #14
1000d7fe:	189b      	adds	r3, r3, r2
1000d800:	9301      	str	r3, [sp, #4]
1000d802:	4c85      	ldr	r4, [pc, #532]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d804:	0209      	lsls	r1, r1, #8
1000d806:	1c30      	adds	r0, r6, #0
1000d808:	2201      	movs	r2, #1
1000d80a:	2302      	movs	r3, #2
1000d80c:	47a0      	blx	r4
1000d80e:	1e04      	subs	r4, r0, #0
1000d810:	d0e5      	beq.n	1000d7de <internal_at_ble_service_define+0x13a>
1000d812:	e122      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d814:	2380      	movs	r3, #128	; 0x80
1000d816:	882a      	ldrh	r2, [r5, #0]
1000d818:	7f2c      	ldrb	r4, [r5, #28]
1000d81a:	005b      	lsls	r3, r3, #1
1000d81c:	401a      	ands	r2, r3
1000d81e:	1c20      	adds	r0, r4, #0
1000d820:	2101      	movs	r1, #1
1000d822:	2a00      	cmp	r2, #0
1000d824:	d000      	beq.n	1000d828 <internal_at_ble_service_define+0x184>
1000d826:	1c0a      	adds	r2, r1, #0
1000d828:	4b7f      	ldr	r3, [pc, #508]	; (1000da28 <internal_at_ble_service_define+0x384>)
1000d82a:	4798      	blx	r3
1000d82c:	2203      	movs	r2, #3
1000d82e:	4022      	ands	r2, r4
1000d830:	3a03      	subs	r2, #3
1000d832:	4251      	negs	r1, r2
1000d834:	4151      	adcs	r1, r2
1000d836:	4b7d      	ldr	r3, [pc, #500]	; (1000da2c <internal_at_ble_service_define+0x388>)
1000d838:	1c0a      	adds	r2, r1, #0
1000d83a:	9300      	str	r3, [sp, #0]
1000d83c:	1c2b      	adds	r3, r5, #0
1000d83e:	0764      	lsls	r4, r4, #29
1000d840:	0fe4      	lsrs	r4, r4, #31
1000d842:	4322      	orrs	r2, r4
1000d844:	03d2      	lsls	r2, r2, #15
1000d846:	4310      	orrs	r0, r2
1000d848:	3320      	adds	r3, #32
1000d84a:	b282      	uxth	r2, r0
1000d84c:	9301      	str	r3, [sp, #4]
1000d84e:	4c72      	ldr	r4, [pc, #456]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d850:	1c30      	adds	r0, r6, #0
1000d852:	9904      	ldr	r1, [sp, #16]
1000d854:	2302      	movs	r3, #2
1000d856:	47a0      	blx	r4
1000d858:	1e04      	subs	r4, r0, #0
1000d85a:	d000      	beq.n	1000d85e <internal_at_ble_service_define+0x1ba>
1000d85c:	e0fd      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d85e:	2101      	movs	r1, #1
1000d860:	882b      	ldrh	r3, [r5, #0]
1000d862:	420b      	tst	r3, r1
1000d864:	d011      	beq.n	1000d88a <internal_at_ble_service_define+0x1e6>
1000d866:	7fa8      	ldrb	r0, [r5, #30]
1000d868:	4b6f      	ldr	r3, [pc, #444]	; (1000da28 <internal_at_ble_service_define+0x384>)
1000d86a:	2200      	movs	r2, #0
1000d86c:	4798      	blx	r3
1000d86e:	4b70      	ldr	r3, [pc, #448]	; (1000da30 <internal_at_ble_service_define+0x38c>)
1000d870:	1c02      	adds	r2, r0, #0
1000d872:	9300      	str	r3, [sp, #0]
1000d874:	1c2b      	adds	r3, r5, #0
1000d876:	3324      	adds	r3, #36	; 0x24
1000d878:	9301      	str	r3, [sp, #4]
1000d87a:	4c67      	ldr	r4, [pc, #412]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d87c:	1c30      	adds	r0, r6, #0
1000d87e:	496d      	ldr	r1, [pc, #436]	; (1000da34 <internal_at_ble_service_define+0x390>)
1000d880:	2302      	movs	r3, #2
1000d882:	47a0      	blx	r4
1000d884:	1e04      	subs	r4, r0, #0
1000d886:	d000      	beq.n	1000d88a <internal_at_ble_service_define+0x1e6>
1000d888:	e0e7      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d88a:	2330      	movs	r3, #48	; 0x30
1000d88c:	882a      	ldrh	r2, [r5, #0]
1000d88e:	421a      	tst	r2, r3
1000d890:	d012      	beq.n	1000d8b8 <internal_at_ble_service_define+0x214>
1000d892:	2101      	movs	r1, #1
1000d894:	7f68      	ldrb	r0, [r5, #29]
1000d896:	1c0a      	adds	r2, r1, #0
1000d898:	4b63      	ldr	r3, [pc, #396]	; (1000da28 <internal_at_ble_service_define+0x384>)
1000d89a:	4798      	blx	r3
1000d89c:	4b66      	ldr	r3, [pc, #408]	; (1000da38 <internal_at_ble_service_define+0x394>)
1000d89e:	1c02      	adds	r2, r0, #0
1000d8a0:	9300      	str	r3, [sp, #0]
1000d8a2:	1c2b      	adds	r3, r5, #0
1000d8a4:	3322      	adds	r3, #34	; 0x22
1000d8a6:	9301      	str	r3, [sp, #4]
1000d8a8:	4c5b      	ldr	r4, [pc, #364]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d8aa:	1c30      	adds	r0, r6, #0
1000d8ac:	4961      	ldr	r1, [pc, #388]	; (1000da34 <internal_at_ble_service_define+0x390>)
1000d8ae:	2302      	movs	r3, #2
1000d8b0:	47a0      	blx	r4
1000d8b2:	1e04      	subs	r4, r0, #0
1000d8b4:	d000      	beq.n	1000d8b8 <internal_at_ble_service_define+0x214>
1000d8b6:	e0d0      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d8b8:	69ab      	ldr	r3, [r5, #24]
1000d8ba:	2b00      	cmp	r3, #0
1000d8bc:	d00e      	beq.n	1000d8dc <internal_at_ble_service_define+0x238>
1000d8be:	4b5f      	ldr	r3, [pc, #380]	; (1000da3c <internal_at_ble_service_define+0x398>)
1000d8c0:	aa06      	add	r2, sp, #24
1000d8c2:	9300      	str	r3, [sp, #0]
1000d8c4:	230e      	movs	r3, #14
1000d8c6:	189b      	adds	r3, r3, r2
1000d8c8:	9301      	str	r3, [sp, #4]
1000d8ca:	4c53      	ldr	r4, [pc, #332]	; (1000da18 <internal_at_ble_service_define+0x374>)
1000d8cc:	1c30      	adds	r0, r6, #0
1000d8ce:	2107      	movs	r1, #7
1000d8d0:	2201      	movs	r2, #1
1000d8d2:	2302      	movs	r3, #2
1000d8d4:	47a0      	blx	r4
1000d8d6:	1e04      	subs	r4, r0, #0
1000d8d8:	d000      	beq.n	1000d8dc <internal_at_ble_service_define+0x238>
1000d8da:	e0be      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d8dc:	9b02      	ldr	r3, [sp, #8]
1000d8de:	353c      	adds	r5, #60	; 0x3c
1000d8e0:	3301      	adds	r3, #1
1000d8e2:	9302      	str	r3, [sp, #8]
1000d8e4:	e73a      	b.n	1000d75c <internal_at_ble_service_define+0xb8>
1000d8e6:	1c30      	adds	r0, r6, #0
1000d8e8:	4b55      	ldr	r3, [pc, #340]	; (1000da40 <internal_at_ble_service_define+0x39c>)
1000d8ea:	4798      	blx	r3
1000d8ec:	1e04      	subs	r4, r0, #0
1000d8ee:	d000      	beq.n	1000d8f2 <internal_at_ble_service_define+0x24e>
1000d8f0:	e0b3      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d8f2:	8833      	ldrh	r3, [r6, #0]
1000d8f4:	9a05      	ldr	r2, [sp, #20]
1000d8f6:	8013      	strh	r3, [r2, #0]
1000d8f8:	8836      	ldrh	r6, [r6, #0]
1000d8fa:	9b06      	ldr	r3, [sp, #24]
1000d8fc:	9a03      	ldr	r2, [sp, #12]
1000d8fe:	18f6      	adds	r6, r6, r3
1000d900:	b2b3      	uxth	r3, r6
1000d902:	9302      	str	r3, [sp, #8]
1000d904:	233c      	movs	r3, #60	; 0x3c
1000d906:	4353      	muls	r3, r2
1000d908:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d90a:	3314      	adds	r3, #20
1000d90c:	18d3      	adds	r3, r2, r3
1000d90e:	9304      	str	r3, [sp, #16]
1000d910:	9b04      	ldr	r3, [sp, #16]
1000d912:	429f      	cmp	r7, r3
1000d914:	d100      	bne.n	1000d918 <internal_at_ble_service_define+0x274>
1000d916:	e0a0      	b.n	1000da5a <internal_at_ble_service_define+0x3b6>
1000d918:	9b02      	ldr	r3, [sp, #8]
1000d91a:	1c9d      	adds	r5, r3, #2
1000d91c:	1c3b      	adds	r3, r7, #0
1000d91e:	b2ad      	uxth	r5, r5
1000d920:	3b14      	subs	r3, #20
1000d922:	801d      	strh	r5, [r3, #0]
1000d924:	9303      	str	r3, [sp, #12]
1000d926:	893b      	ldrh	r3, [r7, #8]
1000d928:	2b00      	cmp	r3, #0
1000d92a:	d108      	bne.n	1000d93e <internal_at_ble_service_define+0x29a>
1000d92c:	23c0      	movs	r3, #192	; 0xc0
1000d92e:	883a      	ldrh	r2, [r7, #0]
1000d930:	005b      	lsls	r3, r3, #1
1000d932:	421a      	tst	r2, r3
1000d934:	d026      	beq.n	1000d984 <internal_at_ble_service_define+0x2e0>
1000d936:	9e02      	ldr	r6, [sp, #8]
1000d938:	3603      	adds	r6, #3
1000d93a:	b2b5      	uxth	r5, r6
1000d93c:	e022      	b.n	1000d984 <internal_at_ble_service_define+0x2e0>
1000d93e:	2103      	movs	r1, #3
1000d940:	7b3b      	ldrb	r3, [r7, #12]
1000d942:	4019      	ands	r1, r3
1000d944:	3903      	subs	r1, #3
1000d946:	424a      	negs	r2, r1
1000d948:	414a      	adcs	r2, r1
1000d94a:	0759      	lsls	r1, r3, #29
1000d94c:	0fc9      	lsrs	r1, r1, #31
1000d94e:	4311      	orrs	r1, r2
1000d950:	03c9      	lsls	r1, r1, #15
1000d952:	897a      	ldrh	r2, [r7, #10]
1000d954:	2900      	cmp	r1, #0
1000d956:	d007      	beq.n	1000d968 <internal_at_ble_service_define+0x2c4>
1000d958:	6879      	ldr	r1, [r7, #4]
1000d95a:	2900      	cmp	r1, #0
1000d95c:	d100      	bne.n	1000d960 <internal_at_ble_service_define+0x2bc>
1000d95e:	4939      	ldr	r1, [pc, #228]	; (1000da44 <internal_at_ble_service_define+0x3a0>)
1000d960:	1c28      	adds	r0, r5, #0
1000d962:	4e39      	ldr	r6, [pc, #228]	; (1000da48 <internal_at_ble_service_define+0x3a4>)
1000d964:	47b0      	blx	r6
1000d966:	e00a      	b.n	1000d97e <internal_at_ble_service_define+0x2da>
1000d968:	1c28      	adds	r0, r5, #0
1000d96a:	4e37      	ldr	r6, [pc, #220]	; (1000da48 <internal_at_ble_service_define+0x3a4>)
1000d96c:	47b0      	blx	r6
1000d96e:	2800      	cmp	r0, #0
1000d970:	d172      	bne.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d972:	9b03      	ldr	r3, [sp, #12]
1000d974:	8939      	ldrh	r1, [r7, #8]
1000d976:	8818      	ldrh	r0, [r3, #0]
1000d978:	687a      	ldr	r2, [r7, #4]
1000d97a:	4b34      	ldr	r3, [pc, #208]	; (1000da4c <internal_at_ble_service_define+0x3a8>)
1000d97c:	4798      	blx	r3
1000d97e:	2800      	cmp	r0, #0
1000d980:	d0d4      	beq.n	1000d92c <internal_at_ble_service_define+0x288>
1000d982:	e069      	b.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d984:	8abb      	ldrh	r3, [r7, #20]
1000d986:	2b00      	cmp	r3, #0
1000d988:	d00a      	beq.n	1000d9a0 <internal_at_ble_service_define+0x2fc>
1000d98a:	3501      	adds	r5, #1
1000d98c:	b2ad      	uxth	r5, r5
1000d98e:	843d      	strh	r5, [r7, #32]
1000d990:	7f39      	ldrb	r1, [r7, #28]
1000d992:	8afb      	ldrh	r3, [r7, #22]
1000d994:	1c28      	adds	r0, r5, #0
1000d996:	693a      	ldr	r2, [r7, #16]
1000d998:	4e2d      	ldr	r6, [pc, #180]	; (1000da50 <internal_at_ble_service_define+0x3ac>)
1000d99a:	47b0      	blx	r6
1000d99c:	2800      	cmp	r0, #0
1000d99e:	d15b      	bne.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d9a0:	883b      	ldrh	r3, [r7, #0]
1000d9a2:	07db      	lsls	r3, r3, #31
1000d9a4:	d50d      	bpl.n	1000d9c2 <internal_at_ble_service_define+0x31e>
1000d9a6:	2200      	movs	r2, #0
1000d9a8:	3501      	adds	r5, #1
1000d9aa:	b2ad      	uxth	r5, r5
1000d9ac:	a909      	add	r1, sp, #36	; 0x24
1000d9ae:	84bd      	strh	r5, [r7, #36]	; 0x24
1000d9b0:	7fbb      	ldrb	r3, [r7, #30]
1000d9b2:	1c28      	adds	r0, r5, #0
1000d9b4:	700a      	strb	r2, [r1, #0]
1000d9b6:	704a      	strb	r2, [r1, #1]
1000d9b8:	4e23      	ldr	r6, [pc, #140]	; (1000da48 <internal_at_ble_service_define+0x3a4>)
1000d9ba:	3202      	adds	r2, #2
1000d9bc:	47b0      	blx	r6
1000d9be:	2800      	cmp	r0, #0
1000d9c0:	d14a      	bne.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d9c2:	2330      	movs	r3, #48	; 0x30
1000d9c4:	883a      	ldrh	r2, [r7, #0]
1000d9c6:	421a      	tst	r2, r3
1000d9c8:	d00d      	beq.n	1000d9e6 <internal_at_ble_service_define+0x342>
1000d9ca:	2200      	movs	r2, #0
1000d9cc:	3501      	adds	r5, #1
1000d9ce:	b2ad      	uxth	r5, r5
1000d9d0:	a909      	add	r1, sp, #36	; 0x24
1000d9d2:	847d      	strh	r5, [r7, #34]	; 0x22
1000d9d4:	7f7b      	ldrb	r3, [r7, #29]
1000d9d6:	1c28      	adds	r0, r5, #0
1000d9d8:	700a      	strb	r2, [r1, #0]
1000d9da:	704a      	strb	r2, [r1, #1]
1000d9dc:	4e1a      	ldr	r6, [pc, #104]	; (1000da48 <internal_at_ble_service_define+0x3a4>)
1000d9de:	3202      	adds	r2, #2
1000d9e0:	47b0      	blx	r6
1000d9e2:	2800      	cmp	r0, #0
1000d9e4:	d138      	bne.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d9e6:	69b9      	ldr	r1, [r7, #24]
1000d9e8:	2900      	cmp	r1, #0
1000d9ea:	d006      	beq.n	1000d9fa <internal_at_ble_service_define+0x356>
1000d9ec:	3501      	adds	r5, #1
1000d9ee:	b2ad      	uxth	r5, r5
1000d9f0:	1c28      	adds	r0, r5, #0
1000d9f2:	4b18      	ldr	r3, [pc, #96]	; (1000da54 <internal_at_ble_service_define+0x3b0>)
1000d9f4:	4798      	blx	r3
1000d9f6:	2800      	cmp	r0, #0
1000d9f8:	d12e      	bne.n	1000da58 <internal_at_ble_service_define+0x3b4>
1000d9fa:	373c      	adds	r7, #60	; 0x3c
1000d9fc:	9502      	str	r5, [sp, #8]
1000d9fe:	e787      	b.n	1000d910 <internal_at_ble_service_define+0x26c>
1000da00:	10015314 	.word	0x10015314
1000da04:	1001607c 	.word	0x1001607c
1000da08:	100116ad 	.word	0x100116ad
1000da0c:	1000d3d9 	.word	0x1000d3d9
1000da10:	1001169b 	.word	0x1001169b
1000da14:	100136fb 	.word	0x100136fb
1000da18:	1000f995 	.word	0x1000f995
1000da1c:	100136fd 	.word	0x100136fd
1000da20:	1000d4a5 	.word	0x1000d4a5
1000da24:	100136f9 	.word	0x100136f9
1000da28:	1000d44d 	.word	0x1000d44d
1000da2c:	100136f5 	.word	0x100136f5
1000da30:	100136f7 	.word	0x100136f7
1000da34:	00008002 	.word	0x00008002
1000da38:	100136f1 	.word	0x100136f1
1000da3c:	100136f3 	.word	0x100136f3
1000da40:	1000f889 	.word	0x1000f889
1000da44:	10015300 	.word	0x10015300
1000da48:	1000d56d 	.word	0x1000d56d
1000da4c:	1000fa05 	.word	0x1000fa05
1000da50:	1000d625 	.word	0x1000d625
1000da54:	1000d541 	.word	0x1000d541
1000da58:	1c04      	adds	r4, r0, #0
1000da5a:	1c20      	adds	r0, r4, #0
1000da5c:	b00b      	add	sp, #44	; 0x2c
1000da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000da60 <initi_gatt_server_module>:
1000da60:	2300      	movs	r3, #0
1000da62:	4a07      	ldr	r2, [pc, #28]	; (1000da80 <initi_gatt_server_module+0x20>)
1000da64:	7013      	strb	r3, [r2, #0]
1000da66:	4a07      	ldr	r2, [pc, #28]	; (1000da84 <initi_gatt_server_module+0x24>)
1000da68:	6013      	str	r3, [r2, #0]
1000da6a:	4a07      	ldr	r2, [pc, #28]	; (1000da88 <initi_gatt_server_module+0x28>)
1000da6c:	6013      	str	r3, [r2, #0]
1000da6e:	4a07      	ldr	r2, [pc, #28]	; (1000da8c <initi_gatt_server_module+0x2c>)
1000da70:	6013      	str	r3, [r2, #0]
1000da72:	4a07      	ldr	r2, [pc, #28]	; (1000da90 <initi_gatt_server_module+0x30>)
1000da74:	6013      	str	r3, [r2, #0]
1000da76:	4a07      	ldr	r2, [pc, #28]	; (1000da94 <initi_gatt_server_module+0x34>)
1000da78:	6013      	str	r3, [r2, #0]
1000da7a:	4a07      	ldr	r2, [pc, #28]	; (1000da98 <initi_gatt_server_module+0x38>)
1000da7c:	6013      	str	r3, [r2, #0]
1000da7e:	4770      	bx	lr
1000da80:	10015300 	.word	0x10015300
1000da84:	10015310 	.word	0x10015310
1000da88:	1001530c 	.word	0x1001530c
1000da8c:	100152fc 	.word	0x100152fc
1000da90:	10015308 	.word	0x10015308
1000da94:	10015304 	.word	0x10015304
1000da98:	10015314 	.word	0x10015314

1000da9c <db_init>:
1000da9c:	4b0a      	ldr	r3, [pc, #40]	; (1000dac8 <db_init+0x2c>)
1000da9e:	4a0b      	ldr	r2, [pc, #44]	; (1000dacc <db_init+0x30>)
1000daa0:	6018      	str	r0, [r3, #0]
1000daa2:	084b      	lsrs	r3, r1, #1
1000daa4:	6013      	str	r3, [r2, #0]
1000daa6:	4a0a      	ldr	r2, [pc, #40]	; (1000dad0 <db_init+0x34>)
1000daa8:	18c3      	adds	r3, r0, r3
1000daaa:	6013      	str	r3, [r2, #0]
1000daac:	4a09      	ldr	r2, [pc, #36]	; (1000dad4 <db_init+0x38>)
1000daae:	1841      	adds	r1, r0, r1
1000dab0:	6013      	str	r3, [r2, #0]
1000dab2:	2303      	movs	r3, #3
1000dab4:	2200      	movs	r2, #0
1000dab6:	3103      	adds	r1, #3
1000dab8:	4399      	bics	r1, r3
1000daba:	4b07      	ldr	r3, [pc, #28]	; (1000dad8 <db_init+0x3c>)
1000dabc:	3904      	subs	r1, #4
1000dabe:	6019      	str	r1, [r3, #0]
1000dac0:	4b06      	ldr	r3, [pc, #24]	; (1000dadc <db_init+0x40>)
1000dac2:	601a      	str	r2, [r3, #0]
1000dac4:	4770      	bx	lr
1000dac6:	46c0      	nop			; (mov r8, r8)
1000dac8:	10015314 	.word	0x10015314
1000dacc:	10015310 	.word	0x10015310
1000dad0:	100152fc 	.word	0x100152fc
1000dad4:	10015308 	.word	0x10015308
1000dad8:	10015304 	.word	0x10015304
1000dadc:	1001530c 	.word	0x1001530c

1000dae0 <at_ble_primary_service_define>:
1000dae0:	b530      	push	{r4, r5, lr}
1000dae2:	b085      	sub	sp, #20
1000dae4:	ac08      	add	r4, sp, #32
1000dae6:	cc20      	ldmia	r4!, {r5}
1000dae8:	8824      	ldrh	r4, [r4, #0]
1000daea:	9500      	str	r5, [sp, #0]
1000daec:	9401      	str	r4, [sp, #4]
1000daee:	2401      	movs	r4, #1
1000daf0:	9402      	str	r4, [sp, #8]
1000daf2:	4c02      	ldr	r4, [pc, #8]	; (1000dafc <at_ble_primary_service_define+0x1c>)
1000daf4:	47a0      	blx	r4
1000daf6:	b005      	add	sp, #20
1000daf8:	bd30      	pop	{r4, r5, pc}
1000dafa:	46c0      	nop			; (mov r8, r8)
1000dafc:	1000d6a5 	.word	0x1000d6a5

1000db00 <at_ble_characteristic_value_set>:
1000db00:	b570      	push	{r4, r5, r6, lr}
1000db02:	4b0b      	ldr	r3, [pc, #44]	; (1000db30 <at_ble_characteristic_value_set+0x30>)
1000db04:	1c06      	adds	r6, r0, #0
1000db06:	1c0c      	adds	r4, r1, #0
1000db08:	1c15      	adds	r5, r2, #0
1000db0a:	4798      	blx	r3
1000db0c:	2800      	cmp	r0, #0
1000db0e:	d008      	beq.n	1000db22 <at_ble_characteristic_value_set+0x22>
1000db10:	6880      	ldr	r0, [r0, #8]
1000db12:	2800      	cmp	r0, #0
1000db14:	d005      	beq.n	1000db22 <at_ble_characteristic_value_set+0x22>
1000db16:	1c21      	adds	r1, r4, #0
1000db18:	1c2a      	adds	r2, r5, #0
1000db1a:	4b06      	ldr	r3, [pc, #24]	; (1000db34 <at_ble_characteristic_value_set+0x34>)
1000db1c:	4798      	blx	r3
1000db1e:	2000      	movs	r0, #0
1000db20:	e004      	b.n	1000db2c <at_ble_characteristic_value_set+0x2c>
1000db22:	1c30      	adds	r0, r6, #0
1000db24:	1c29      	adds	r1, r5, #0
1000db26:	1c22      	adds	r2, r4, #0
1000db28:	4b03      	ldr	r3, [pc, #12]	; (1000db38 <at_ble_characteristic_value_set+0x38>)
1000db2a:	4798      	blx	r3
1000db2c:	bd70      	pop	{r4, r5, r6, pc}
1000db2e:	46c0      	nop			; (mov r8, r8)
1000db30:	1000d40d 	.word	0x1000d40d
1000db34:	1001169b 	.word	0x1001169b
1000db38:	1000fa05 	.word	0x1000fa05

1000db3c <at_ble_characteristic_value_get>:
1000db3c:	b570      	push	{r4, r5, r6, lr}
1000db3e:	4b0c      	ldr	r3, [pc, #48]	; (1000db70 <at_ble_characteristic_value_get+0x34>)
1000db40:	1c06      	adds	r6, r0, #0
1000db42:	1c0c      	adds	r4, r1, #0
1000db44:	1c15      	adds	r5, r2, #0
1000db46:	4798      	blx	r3
1000db48:	2800      	cmp	r0, #0
1000db4a:	d00b      	beq.n	1000db64 <at_ble_characteristic_value_get+0x28>
1000db4c:	6883      	ldr	r3, [r0, #8]
1000db4e:	2b00      	cmp	r3, #0
1000db50:	d008      	beq.n	1000db64 <at_ble_characteristic_value_get+0x28>
1000db52:	8883      	ldrh	r3, [r0, #4]
1000db54:	802b      	strh	r3, [r5, #0]
1000db56:	8882      	ldrh	r2, [r0, #4]
1000db58:	6881      	ldr	r1, [r0, #8]
1000db5a:	4b06      	ldr	r3, [pc, #24]	; (1000db74 <at_ble_characteristic_value_get+0x38>)
1000db5c:	1c20      	adds	r0, r4, #0
1000db5e:	4798      	blx	r3
1000db60:	2000      	movs	r0, #0
1000db62:	e004      	b.n	1000db6e <at_ble_characteristic_value_get+0x32>
1000db64:	1c30      	adds	r0, r6, #0
1000db66:	1c29      	adds	r1, r5, #0
1000db68:	1c22      	adds	r2, r4, #0
1000db6a:	4b03      	ldr	r3, [pc, #12]	; (1000db78 <at_ble_characteristic_value_get+0x3c>)
1000db6c:	4798      	blx	r3
1000db6e:	bd70      	pop	{r4, r5, r6, pc}
1000db70:	1000d40d 	.word	0x1000d40d
1000db74:	1001169b 	.word	0x1001169b
1000db78:	1000fa91 	.word	0x1000fa91

1000db7c <at_ble_write_authorize_reply>:
1000db7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000db7e:	b085      	sub	sp, #20
1000db80:	1c04      	adds	r4, r0, #0
1000db82:	9101      	str	r1, [sp, #4]
1000db84:	2900      	cmp	r1, #0
1000db86:	d128      	bne.n	1000dbda <at_ble_write_authorize_reply+0x5e>
1000db88:	8843      	ldrh	r3, [r0, #2]
1000db8a:	1c27      	adds	r7, r4, #0
1000db8c:	9300      	str	r3, [sp, #0]
1000db8e:	1c18      	adds	r0, r3, #0
1000db90:	4b16      	ldr	r3, [pc, #88]	; (1000dbec <at_ble_write_authorize_reply+0x70>)
1000db92:	4798      	blx	r3
1000db94:	3708      	adds	r7, #8
1000db96:	2800      	cmp	r0, #0
1000db98:	d009      	beq.n	1000dbae <at_ble_write_authorize_reply+0x32>
1000db9a:	6880      	ldr	r0, [r0, #8]
1000db9c:	2800      	cmp	r0, #0
1000db9e:	d006      	beq.n	1000dbae <at_ble_write_authorize_reply+0x32>
1000dba0:	88a3      	ldrh	r3, [r4, #4]
1000dba2:	88e2      	ldrh	r2, [r4, #6]
1000dba4:	18c0      	adds	r0, r0, r3
1000dba6:	1c39      	adds	r1, r7, #0
1000dba8:	4b11      	ldr	r3, [pc, #68]	; (1000dbf0 <at_ble_write_authorize_reply+0x74>)
1000dbaa:	4798      	blx	r3
1000dbac:	e015      	b.n	1000dbda <at_ble_write_authorize_reply+0x5e>
1000dbae:	ab02      	add	r3, sp, #8
1000dbb0:	1d9e      	adds	r6, r3, #6
1000dbb2:	2300      	movs	r3, #0
1000dbb4:	4d0f      	ldr	r5, [pc, #60]	; (1000dbf4 <at_ble_write_authorize_reply+0x78>)
1000dbb6:	8033      	strh	r3, [r6, #0]
1000dbb8:	6829      	ldr	r1, [r5, #0]
1000dbba:	1c32      	adds	r2, r6, #0
1000dbbc:	4b0e      	ldr	r3, [pc, #56]	; (1000dbf8 <at_ble_write_authorize_reply+0x7c>)
1000dbbe:	9800      	ldr	r0, [sp, #0]
1000dbc0:	4798      	blx	r3
1000dbc2:	682b      	ldr	r3, [r5, #0]
1000dbc4:	88a0      	ldrh	r0, [r4, #4]
1000dbc6:	88e2      	ldrh	r2, [r4, #6]
1000dbc8:	1818      	adds	r0, r3, r0
1000dbca:	1c39      	adds	r1, r7, #0
1000dbcc:	4b08      	ldr	r3, [pc, #32]	; (1000dbf0 <at_ble_write_authorize_reply+0x74>)
1000dbce:	4798      	blx	r3
1000dbd0:	8860      	ldrh	r0, [r4, #2]
1000dbd2:	8832      	ldrh	r2, [r6, #0]
1000dbd4:	6829      	ldr	r1, [r5, #0]
1000dbd6:	4b09      	ldr	r3, [pc, #36]	; (1000dbfc <at_ble_write_authorize_reply+0x80>)
1000dbd8:	4798      	blx	r3
1000dbda:	8860      	ldrh	r0, [r4, #2]
1000dbdc:	8821      	ldrh	r1, [r4, #0]
1000dbde:	9a01      	ldr	r2, [sp, #4]
1000dbe0:	4b07      	ldr	r3, [pc, #28]	; (1000dc00 <at_ble_write_authorize_reply+0x84>)
1000dbe2:	4798      	blx	r3
1000dbe4:	2000      	movs	r0, #0
1000dbe6:	b005      	add	sp, #20
1000dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dbea:	46c0      	nop			; (mov r8, r8)
1000dbec:	1000d40d 	.word	0x1000d40d
1000dbf0:	1001169b 	.word	0x1001169b
1000dbf4:	1001384c 	.word	0x1001384c
1000dbf8:	1000db3d 	.word	0x1000db3d
1000dbfc:	1000db01 	.word	0x1000db01
1000dc00:	1000f509 	.word	0x1000f509

1000dc04 <gatts_handle_read_req>:
1000dc04:	b538      	push	{r3, r4, r5, lr}
1000dc06:	1c0c      	adds	r4, r1, #0
1000dc08:	4b07      	ldr	r3, [pc, #28]	; (1000dc28 <gatts_handle_read_req+0x24>)
1000dc0a:	4798      	blx	r3
1000dc0c:	8865      	ldrh	r5, [r4, #2]
1000dc0e:	4b07      	ldr	r3, [pc, #28]	; (1000dc2c <gatts_handle_read_req+0x28>)
1000dc10:	1c28      	adds	r0, r5, #0
1000dc12:	4798      	blx	r3
1000dc14:	7883      	ldrb	r3, [r0, #2]
1000dc16:	2026      	movs	r0, #38	; 0x26
1000dc18:	07db      	lsls	r3, r3, #31
1000dc1a:	d404      	bmi.n	1000dc26 <gatts_handle_read_req+0x22>
1000dc1c:	8820      	ldrh	r0, [r4, #0]
1000dc1e:	1c29      	adds	r1, r5, #0
1000dc20:	4b03      	ldr	r3, [pc, #12]	; (1000dc30 <gatts_handle_read_req+0x2c>)
1000dc22:	4798      	blx	r3
1000dc24:	203b      	movs	r0, #59	; 0x3b
1000dc26:	bd38      	pop	{r3, r4, r5, pc}
1000dc28:	1000f44d 	.word	0x1000f44d
1000dc2c:	1000d40d 	.word	0x1000d40d
1000dc30:	1000d675 	.word	0x1000d675

1000dc34 <gatts_handle_att_info_req>:
1000dc34:	b538      	push	{r3, r4, r5, lr}
1000dc36:	1c0d      	adds	r5, r1, #0
1000dc38:	4b0a      	ldr	r3, [pc, #40]	; (1000dc64 <gatts_handle_att_info_req+0x30>)
1000dc3a:	1c14      	adds	r4, r2, #0
1000dc3c:	4798      	blx	r3
1000dc3e:	882d      	ldrh	r5, [r5, #0]
1000dc40:	4b09      	ldr	r3, [pc, #36]	; (1000dc68 <gatts_handle_att_info_req+0x34>)
1000dc42:	1c28      	adds	r0, r5, #0
1000dc44:	4798      	blx	r3
1000dc46:	0a22      	lsrs	r2, r4, #8
1000dc48:	1c03      	adds	r3, r0, #0
1000dc4a:	4c08      	ldr	r4, [pc, #32]	; (1000dc6c <gatts_handle_att_info_req+0x38>)
1000dc4c:	b291      	uxth	r1, r2
1000dc4e:	2800      	cmp	r0, #0
1000dc50:	d003      	beq.n	1000dc5a <gatts_handle_att_info_req+0x26>
1000dc52:	8882      	ldrh	r2, [r0, #4]
1000dc54:	2300      	movs	r3, #0
1000dc56:	1c28      	adds	r0, r5, #0
1000dc58:	e001      	b.n	1000dc5e <gatts_handle_att_info_req+0x2a>
1000dc5a:	1c28      	adds	r0, r5, #0
1000dc5c:	2201      	movs	r2, #1
1000dc5e:	47a0      	blx	r4
1000dc60:	203b      	movs	r0, #59	; 0x3b
1000dc62:	bd38      	pop	{r3, r4, r5, pc}
1000dc64:	1000f491 	.word	0x1000f491
1000dc68:	1000d40d 	.word	0x1000d40d
1000dc6c:	1000f54d 	.word	0x1000f54d

1000dc70 <gatts_handle_write_req>:
1000dc70:	b510      	push	{r4, lr}
1000dc72:	1c14      	adds	r4, r2, #0
1000dc74:	4b07      	ldr	r3, [pc, #28]	; (1000dc94 <gatts_handle_write_req+0x24>)
1000dc76:	4798      	blx	r3
1000dc78:	4b07      	ldr	r3, [pc, #28]	; (1000dc98 <gatts_handle_write_req+0x28>)
1000dc7a:	8860      	ldrh	r0, [r4, #2]
1000dc7c:	4798      	blx	r3
1000dc7e:	2302      	movs	r3, #2
1000dc80:	7881      	ldrb	r1, [r0, #2]
1000dc82:	2022      	movs	r0, #34	; 0x22
1000dc84:	4019      	ands	r1, r3
1000dc86:	d103      	bne.n	1000dc90 <gatts_handle_write_req+0x20>
1000dc88:	1c20      	adds	r0, r4, #0
1000dc8a:	4b04      	ldr	r3, [pc, #16]	; (1000dc9c <gatts_handle_write_req+0x2c>)
1000dc8c:	4798      	blx	r3
1000dc8e:	201f      	movs	r0, #31
1000dc90:	bd10      	pop	{r4, pc}
1000dc92:	46c0      	nop			; (mov r8, r8)
1000dc94:	1000f459 	.word	0x1000f459
1000dc98:	1000d40d 	.word	0x1000d40d
1000dc9c:	1000db7d 	.word	0x1000db7d

1000dca0 <at_ble_notification_send>:
1000dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dca2:	4d17      	ldr	r5, [pc, #92]	; (1000dd00 <at_ble_notification_send+0x60>)
1000dca4:	4c17      	ldr	r4, [pc, #92]	; (1000dd04 <at_ble_notification_send+0x64>)
1000dca6:	682a      	ldr	r2, [r5, #0]
1000dca8:	44a5      	add	sp, r4
1000dcaa:	23d2      	movs	r3, #210	; 0xd2
1000dcac:	2a04      	cmp	r2, #4
1000dcae:	d822      	bhi.n	1000dcf6 <at_ble_notification_send+0x56>
1000dcb0:	1c06      	adds	r6, r0, #0
1000dcb2:	4b15      	ldr	r3, [pc, #84]	; (1000dd08 <at_ble_notification_send+0x68>)
1000dcb4:	1c08      	adds	r0, r1, #0
1000dcb6:	1c0c      	adds	r4, r1, #0
1000dcb8:	4798      	blx	r3
1000dcba:	2800      	cmp	r0, #0
1000dcbc:	d008      	beq.n	1000dcd0 <at_ble_notification_send+0x30>
1000dcbe:	6883      	ldr	r3, [r0, #8]
1000dcc0:	2b00      	cmp	r3, #0
1000dcc2:	d005      	beq.n	1000dcd0 <at_ble_notification_send+0x30>
1000dcc4:	8882      	ldrh	r2, [r0, #4]
1000dcc6:	1c21      	adds	r1, r4, #0
1000dcc8:	9200      	str	r2, [sp, #0]
1000dcca:	2012      	movs	r0, #18
1000dccc:	1c32      	adds	r2, r6, #0
1000dcce:	e00c      	b.n	1000dcea <at_ble_notification_send+0x4a>
1000dcd0:	270e      	movs	r7, #14
1000dcd2:	446f      	add	r7, sp
1000dcd4:	1c39      	adds	r1, r7, #0
1000dcd6:	aa04      	add	r2, sp, #16
1000dcd8:	4b0c      	ldr	r3, [pc, #48]	; (1000dd0c <at_ble_notification_send+0x6c>)
1000dcda:	1c20      	adds	r0, r4, #0
1000dcdc:	4798      	blx	r3
1000dcde:	2012      	movs	r0, #18
1000dce0:	1c21      	adds	r1, r4, #0
1000dce2:	1c32      	adds	r2, r6, #0
1000dce4:	883b      	ldrh	r3, [r7, #0]
1000dce6:	9300      	str	r3, [sp, #0]
1000dce8:	ab04      	add	r3, sp, #16
1000dcea:	4c09      	ldr	r4, [pc, #36]	; (1000dd10 <at_ble_notification_send+0x70>)
1000dcec:	47a0      	blx	r4
1000dcee:	682b      	ldr	r3, [r5, #0]
1000dcf0:	3301      	adds	r3, #1
1000dcf2:	602b      	str	r3, [r5, #0]
1000dcf4:	2300      	movs	r3, #0
1000dcf6:	1c18      	adds	r0, r3, #0
1000dcf8:	2385      	movs	r3, #133	; 0x85
1000dcfa:	009b      	lsls	r3, r3, #2
1000dcfc:	449d      	add	sp, r3
1000dcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd00:	100153a0 	.word	0x100153a0
1000dd04:	fffffdec 	.word	0xfffffdec
1000dd08:	1000d40d 	.word	0x1000d40d
1000dd0c:	1000fa91 	.word	0x1000fa91
1000dd10:	1000f595 	.word	0x1000f595

1000dd14 <init_l2cc_task_module>:
1000dd14:	220a      	movs	r2, #10
1000dd16:	4b01      	ldr	r3, [pc, #4]	; (1000dd1c <init_l2cc_task_module+0x8>)
1000dd18:	701a      	strb	r2, [r3, #0]
1000dd1a:	4770      	bx	lr
1000dd1c:	1001384b 	.word	0x1001384b

1000dd20 <l2cc_data_send_rsp_handler>:
1000dd20:	b510      	push	{r4, lr}
1000dd22:	7802      	ldrb	r2, [r0, #0]
1000dd24:	700a      	strb	r2, [r1, #0]
1000dd26:	7883      	ldrb	r3, [r0, #2]
1000dd28:	7844      	ldrb	r4, [r0, #1]
1000dd2a:	021b      	lsls	r3, r3, #8
1000dd2c:	4323      	orrs	r3, r4
1000dd2e:	804b      	strh	r3, [r1, #2]
1000dd30:	7903      	ldrb	r3, [r0, #4]
1000dd32:	78c0      	ldrb	r0, [r0, #3]
1000dd34:	021b      	lsls	r3, r3, #8
1000dd36:	4303      	orrs	r3, r0
1000dd38:	808b      	strh	r3, [r1, #4]
1000dd3a:	2a00      	cmp	r2, #0
1000dd3c:	d103      	bne.n	1000dd46 <l2cc_data_send_rsp_handler+0x26>
1000dd3e:	4a02      	ldr	r2, [pc, #8]	; (1000dd48 <l2cc_data_send_rsp_handler+0x28>)
1000dd40:	7813      	ldrb	r3, [r2, #0]
1000dd42:	3301      	adds	r3, #1
1000dd44:	7013      	strb	r3, [r2, #0]
1000dd46:	bd10      	pop	{r4, pc}
1000dd48:	1001384b 	.word	0x1001384b

1000dd4c <l2cc_data_received_handler>:
1000dd4c:	b508      	push	{r3, lr}
1000dd4e:	1c03      	adds	r3, r0, #0
1000dd50:	7842      	ldrb	r2, [r0, #1]
1000dd52:	7800      	ldrb	r0, [r0, #0]
1000dd54:	0212      	lsls	r2, r2, #8
1000dd56:	4302      	orrs	r2, r0
1000dd58:	800a      	strh	r2, [r1, #0]
1000dd5a:	78da      	ldrb	r2, [r3, #3]
1000dd5c:	7898      	ldrb	r0, [r3, #2]
1000dd5e:	0212      	lsls	r2, r2, #8
1000dd60:	4302      	orrs	r2, r0
1000dd62:	804a      	strh	r2, [r1, #2]
1000dd64:	795a      	ldrb	r2, [r3, #5]
1000dd66:	7918      	ldrb	r0, [r3, #4]
1000dd68:	0212      	lsls	r2, r2, #8
1000dd6a:	4302      	orrs	r2, r0
1000dd6c:	808a      	strh	r2, [r1, #4]
1000dd6e:	1d88      	adds	r0, r1, #6
1000dd70:	1d99      	adds	r1, r3, #6
1000dd72:	4b01      	ldr	r3, [pc, #4]	; (1000dd78 <l2cc_data_received_handler+0x2c>)
1000dd74:	4798      	blx	r3
1000dd76:	bd08      	pop	{r3, pc}
1000dd78:	1001169b 	.word	0x1001169b

1000dd7c <at_ble_authenticate>:
1000dd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd7e:	1c0c      	adds	r4, r1, #0
1000dd80:	211f      	movs	r1, #31
1000dd82:	b08b      	sub	sp, #44	; 0x2c
1000dd84:	9307      	str	r3, [sp, #28]
1000dd86:	ab02      	add	r3, sp, #8
1000dd88:	18c9      	adds	r1, r1, r3
1000dd8a:	230f      	movs	r3, #15
1000dd8c:	700b      	strb	r3, [r1, #0]
1000dd8e:	4b40      	ldr	r3, [pc, #256]	; (1000de90 <at_ble_authenticate+0x114>)
1000dd90:	1c05      	adds	r5, r0, #0
1000dd92:	1c16      	adds	r6, r2, #0
1000dd94:	4798      	blx	r3
1000dd96:	1c07      	adds	r7, r0, #0
1000dd98:	2001      	movs	r0, #1
1000dd9a:	2f07      	cmp	r7, #7
1000dd9c:	d875      	bhi.n	1000de8a <at_ble_authenticate+0x10e>
1000dd9e:	2c00      	cmp	r4, #0
1000dda0:	d113      	bne.n	1000ddca <at_ble_authenticate+0x4e>
1000dda2:	2312      	movs	r3, #18
1000dda4:	435f      	muls	r7, r3
1000dda6:	4b3b      	ldr	r3, [pc, #236]	; (1000de94 <at_ble_authenticate+0x118>)
1000dda8:	5cfb      	ldrb	r3, [r7, r3]
1000ddaa:	4283      	cmp	r3, r0
1000ddac:	d001      	beq.n	1000ddb2 <at_ble_authenticate+0x36>
1000ddae:	20cf      	movs	r0, #207	; 0xcf
1000ddb0:	e06b      	b.n	1000de8a <at_ble_authenticate+0x10e>
1000ddb2:	9504      	str	r5, [sp, #16]
1000ddb4:	9400      	str	r4, [sp, #0]
1000ddb6:	9401      	str	r4, [sp, #4]
1000ddb8:	9402      	str	r4, [sp, #8]
1000ddba:	9403      	str	r4, [sp, #12]
1000ddbc:	1c20      	adds	r0, r4, #0
1000ddbe:	1c21      	adds	r1, r4, #0
1000ddc0:	1c22      	adds	r2, r4, #0
1000ddc2:	1c23      	adds	r3, r4, #0
1000ddc4:	4d34      	ldr	r5, [pc, #208]	; (1000de98 <at_ble_authenticate+0x11c>)
1000ddc6:	47a8      	blx	r5
1000ddc8:	e05e      	b.n	1000de88 <at_ble_authenticate+0x10c>
1000ddca:	7922      	ldrb	r2, [r4, #4]
1000ddcc:	2a06      	cmp	r2, #6
1000ddce:	d9ee      	bls.n	1000ddae <at_ble_authenticate+0x32>
1000ddd0:	7963      	ldrb	r3, [r4, #5]
1000ddd2:	2b10      	cmp	r3, #16
1000ddd4:	d8eb      	bhi.n	1000ddae <at_ble_authenticate+0x32>
1000ddd6:	429a      	cmp	r2, r3
1000ddd8:	d8e9      	bhi.n	1000ddae <at_ble_authenticate+0x32>
1000ddda:	7a23      	ldrb	r3, [r4, #8]
1000dddc:	2b04      	cmp	r3, #4
1000ddde:	d8e6      	bhi.n	1000ddae <at_ble_authenticate+0x32>
1000dde0:	79a3      	ldrb	r3, [r4, #6]
1000dde2:	2b07      	cmp	r3, #7
1000dde4:	d8e3      	bhi.n	1000ddae <at_ble_authenticate+0x32>
1000dde6:	79e3      	ldrb	r3, [r4, #7]
1000dde8:	2b07      	cmp	r3, #7
1000ddea:	d8e0      	bhi.n	1000ddae <at_ble_authenticate+0x32>
1000ddec:	78a3      	ldrb	r3, [r4, #2]
1000ddee:	2b00      	cmp	r3, #0
1000ddf0:	d006      	beq.n	1000de00 <at_ble_authenticate+0x84>
1000ddf2:	2e00      	cmp	r6, #0
1000ddf4:	d0db      	beq.n	1000ddae <at_ble_authenticate+0x32>
1000ddf6:	4829      	ldr	r0, [pc, #164]	; (1000de9c <at_ble_authenticate+0x120>)
1000ddf8:	1c31      	adds	r1, r6, #0
1000ddfa:	221c      	movs	r2, #28
1000ddfc:	4b28      	ldr	r3, [pc, #160]	; (1000dea0 <at_ble_authenticate+0x124>)
1000ddfe:	4798      	blx	r3
1000de00:	9b07      	ldr	r3, [sp, #28]
1000de02:	2b00      	cmp	r3, #0
1000de04:	d005      	beq.n	1000de12 <at_ble_authenticate+0x96>
1000de06:	4827      	ldr	r0, [pc, #156]	; (1000dea4 <at_ble_authenticate+0x128>)
1000de08:	1c19      	adds	r1, r3, #0
1000de0a:	309a      	adds	r0, #154	; 0x9a
1000de0c:	2210      	movs	r2, #16
1000de0e:	4b24      	ldr	r3, [pc, #144]	; (1000dea0 <at_ble_authenticate+0x124>)
1000de10:	4798      	blx	r3
1000de12:	7863      	ldrb	r3, [r4, #1]
1000de14:	78a2      	ldrb	r2, [r4, #2]
1000de16:	009b      	lsls	r3, r3, #2
1000de18:	4313      	orrs	r3, r2
1000de1a:	2212      	movs	r2, #18
1000de1c:	4357      	muls	r7, r2
1000de1e:	4a1d      	ldr	r2, [pc, #116]	; (1000de94 <at_ble_authenticate+0x118>)
1000de20:	b2db      	uxtb	r3, r3
1000de22:	5cba      	ldrb	r2, [r7, r2]
1000de24:	2a00      	cmp	r2, #0
1000de26:	d116      	bne.n	1000de56 <at_ble_authenticate+0xda>
1000de28:	79a0      	ldrb	r0, [r4, #6]
1000de2a:	0742      	lsls	r2, r0, #29
1000de2c:	d502      	bpl.n	1000de34 <at_ble_authenticate+0xb8>
1000de2e:	9a07      	ldr	r2, [sp, #28]
1000de30:	2a00      	cmp	r2, #0
1000de32:	d0bc      	beq.n	1000ddae <at_ble_authenticate+0x32>
1000de34:	07c2      	lsls	r2, r0, #31
1000de36:	d501      	bpl.n	1000de3c <at_ble_authenticate+0xc0>
1000de38:	2e00      	cmp	r6, #0
1000de3a:	d0b8      	beq.n	1000ddae <at_ble_authenticate+0x32>
1000de3c:	7966      	ldrb	r6, [r4, #5]
1000de3e:	7821      	ldrb	r1, [r4, #0]
1000de40:	78e2      	ldrb	r2, [r4, #3]
1000de42:	9600      	str	r6, [sp, #0]
1000de44:	9001      	str	r0, [sp, #4]
1000de46:	79e0      	ldrb	r0, [r4, #7]
1000de48:	9002      	str	r0, [sp, #8]
1000de4a:	7a20      	ldrb	r0, [r4, #8]
1000de4c:	4c16      	ldr	r4, [pc, #88]	; (1000dea8 <at_ble_authenticate+0x12c>)
1000de4e:	9003      	str	r0, [sp, #12]
1000de50:	1c28      	adds	r0, r5, #0
1000de52:	47a0      	blx	r4
1000de54:	e018      	b.n	1000de88 <at_ble_authenticate+0x10c>
1000de56:	2a01      	cmp	r2, #1
1000de58:	d1a9      	bne.n	1000ddae <at_ble_authenticate+0x32>
1000de5a:	79e0      	ldrb	r0, [r4, #7]
1000de5c:	0742      	lsls	r2, r0, #29
1000de5e:	d502      	bpl.n	1000de66 <at_ble_authenticate+0xea>
1000de60:	9a07      	ldr	r2, [sp, #28]
1000de62:	2a00      	cmp	r2, #0
1000de64:	d0a3      	beq.n	1000ddae <at_ble_authenticate+0x32>
1000de66:	07c2      	lsls	r2, r0, #31
1000de68:	d501      	bpl.n	1000de6e <at_ble_authenticate+0xf2>
1000de6a:	2e00      	cmp	r6, #0
1000de6c:	d09f      	beq.n	1000ddae <at_ble_authenticate+0x32>
1000de6e:	7966      	ldrb	r6, [r4, #5]
1000de70:	7821      	ldrb	r1, [r4, #0]
1000de72:	78e2      	ldrb	r2, [r4, #3]
1000de74:	9600      	str	r6, [sp, #0]
1000de76:	79a6      	ldrb	r6, [r4, #6]
1000de78:	9002      	str	r0, [sp, #8]
1000de7a:	9601      	str	r6, [sp, #4]
1000de7c:	7a20      	ldrb	r0, [r4, #8]
1000de7e:	9504      	str	r5, [sp, #16]
1000de80:	9003      	str	r0, [sp, #12]
1000de82:	4c05      	ldr	r4, [pc, #20]	; (1000de98 <at_ble_authenticate+0x11c>)
1000de84:	2001      	movs	r0, #1
1000de86:	47a0      	blx	r4
1000de88:	2000      	movs	r0, #0
1000de8a:	b00b      	add	sp, #44	; 0x2c
1000de8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de8e:	46c0      	nop			; (mov r8, r8)
1000de90:	1000e2c5 	.word	0x1000e2c5
1000de94:	1001607e 	.word	0x1001607e
1000de98:	1000e835 	.word	0x1000e835
1000de9c:	1001618c 	.word	0x1001618c
1000dea0:	1001169b 	.word	0x1001169b
1000dea4:	1001610e 	.word	0x1001610e
1000dea8:	1000e615 	.word	0x1000e615

1000deac <at_ble_pair_key_reply>:
1000deac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000deae:	b085      	sub	sp, #20
1000deb0:	1c05      	adds	r5, r0, #0
1000deb2:	1c0c      	adds	r4, r1, #0
1000deb4:	1c16      	adds	r6, r2, #0
1000deb6:	2100      	movs	r1, #0
1000deb8:	4668      	mov	r0, sp
1000deba:	2210      	movs	r2, #16
1000debc:	4b18      	ldr	r3, [pc, #96]	; (1000df20 <at_ble_pair_key_reply+0x74>)
1000debe:	4798      	blx	r3
1000dec0:	2101      	movs	r1, #1
1000dec2:	2e00      	cmp	r6, #0
1000dec4:	d101      	bne.n	1000deca <at_ble_pair_key_reply+0x1e>
1000dec6:	1c31      	adds	r1, r6, #0
1000dec8:	466e      	mov	r6, sp
1000deca:	2c00      	cmp	r4, #0
1000decc:	d116      	bne.n	1000defc <at_ble_pair_key_reply+0x50>
1000dece:	2701      	movs	r7, #1
1000ded0:	1c23      	adds	r3, r4, #0
1000ded2:	1d70      	adds	r0, r6, #5
1000ded4:	3e01      	subs	r6, #1
1000ded6:	7802      	ldrb	r2, [r0, #0]
1000ded8:	3801      	subs	r0, #1
1000deda:	3a30      	subs	r2, #48	; 0x30
1000dedc:	437a      	muls	r2, r7
1000dede:	189b      	adds	r3, r3, r2
1000dee0:	220a      	movs	r2, #10
1000dee2:	4357      	muls	r7, r2
1000dee4:	42b0      	cmp	r0, r6
1000dee6:	d1f6      	bne.n	1000ded6 <at_ble_pair_key_reply+0x2a>
1000dee8:	466a      	mov	r2, sp
1000deea:	4668      	mov	r0, sp
1000deec:	7013      	strb	r3, [r2, #0]
1000deee:	0a1a      	lsrs	r2, r3, #8
1000def0:	7042      	strb	r2, [r0, #1]
1000def2:	0c1a      	lsrs	r2, r3, #16
1000def4:	0e1b      	lsrs	r3, r3, #24
1000def6:	7082      	strb	r2, [r0, #2]
1000def8:	70c3      	strb	r3, [r0, #3]
1000defa:	e009      	b.n	1000df10 <at_ble_pair_key_reply+0x64>
1000defc:	20cf      	movs	r0, #207	; 0xcf
1000defe:	2c01      	cmp	r4, #1
1000df00:	d10c      	bne.n	1000df1c <at_ble_pair_key_reply+0x70>
1000df02:	2300      	movs	r3, #0
1000df04:	4668      	mov	r0, sp
1000df06:	5cf2      	ldrb	r2, [r6, r3]
1000df08:	54c2      	strb	r2, [r0, r3]
1000df0a:	3301      	adds	r3, #1
1000df0c:	2b10      	cmp	r3, #16
1000df0e:	d1f9      	bne.n	1000df04 <at_ble_pair_key_reply+0x58>
1000df10:	2004      	movs	r0, #4
1000df12:	466a      	mov	r2, sp
1000df14:	1c2b      	adds	r3, r5, #0
1000df16:	4c03      	ldr	r4, [pc, #12]	; (1000df24 <at_ble_pair_key_reply+0x78>)
1000df18:	47a0      	blx	r4
1000df1a:	2000      	movs	r0, #0
1000df1c:	b005      	add	sp, #20
1000df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df20:	100116ad 	.word	0x100116ad
1000df24:	1000e8b1 	.word	0x1000e8b1

1000df28 <at_ble_send_slave_sec_request>:
1000df28:	b570      	push	{r4, r5, r6, lr}
1000df2a:	4b0c      	ldr	r3, [pc, #48]	; (1000df5c <at_ble_send_slave_sec_request+0x34>)
1000df2c:	1c0e      	adds	r6, r1, #0
1000df2e:	2100      	movs	r1, #0
1000df30:	1c05      	adds	r5, r0, #0
1000df32:	1c14      	adds	r4, r2, #0
1000df34:	4798      	blx	r3
1000df36:	2301      	movs	r3, #1
1000df38:	2807      	cmp	r0, #7
1000df3a:	d80d      	bhi.n	1000df58 <at_ble_send_slave_sec_request+0x30>
1000df3c:	3311      	adds	r3, #17
1000df3e:	4358      	muls	r0, r3
1000df40:	4b07      	ldr	r3, [pc, #28]	; (1000df60 <at_ble_send_slave_sec_request+0x38>)
1000df42:	5cc2      	ldrb	r2, [r0, r3]
1000df44:	23e0      	movs	r3, #224	; 0xe0
1000df46:	2a01      	cmp	r2, #1
1000df48:	d106      	bne.n	1000df58 <at_ble_send_slave_sec_request+0x30>
1000df4a:	00b1      	lsls	r1, r6, #2
1000df4c:	430c      	orrs	r4, r1
1000df4e:	4b05      	ldr	r3, [pc, #20]	; (1000df64 <at_ble_send_slave_sec_request+0x3c>)
1000df50:	b2e1      	uxtb	r1, r4
1000df52:	1c28      	adds	r0, r5, #0
1000df54:	4798      	blx	r3
1000df56:	2300      	movs	r3, #0
1000df58:	1c18      	adds	r0, r3, #0
1000df5a:	bd70      	pop	{r4, r5, r6, pc}
1000df5c:	1000e2c5 	.word	0x1000e2c5
1000df60:	1001607e 	.word	0x1001607e
1000df64:	1000e901 	.word	0x1000e901

1000df68 <at_ble_encryption_start>:
1000df68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000df6a:	23cf      	movs	r3, #207	; 0xcf
1000df6c:	2900      	cmp	r1, #0
1000df6e:	d02b      	beq.n	1000dfc8 <at_ble_encryption_start+0x60>
1000df70:	2a05      	cmp	r2, #5
1000df72:	d829      	bhi.n	1000dfc8 <at_ble_encryption_start+0x60>
1000df74:	2701      	movs	r7, #1
1000df76:	1c3d      	adds	r5, r7, #0
1000df78:	2433      	movs	r4, #51	; 0x33
1000df7a:	4095      	lsls	r5, r2
1000df7c:	4225      	tst	r5, r4
1000df7e:	d023      	beq.n	1000dfc8 <at_ble_encryption_start+0x60>
1000df80:	7e8c      	ldrb	r4, [r1, #26]
1000df82:	3c07      	subs	r4, #7
1000df84:	2c09      	cmp	r4, #9
1000df86:	d81f      	bhi.n	1000dfc8 <at_ble_encryption_start+0x60>
1000df88:	4b10      	ldr	r3, [pc, #64]	; (1000dfcc <at_ble_encryption_start+0x64>)
1000df8a:	1c0c      	adds	r4, r1, #0
1000df8c:	2100      	movs	r1, #0
1000df8e:	1c15      	adds	r5, r2, #0
1000df90:	1c06      	adds	r6, r0, #0
1000df92:	4798      	blx	r3
1000df94:	1c3b      	adds	r3, r7, #0
1000df96:	2807      	cmp	r0, #7
1000df98:	d816      	bhi.n	1000dfc8 <at_ble_encryption_start+0x60>
1000df9a:	2312      	movs	r3, #18
1000df9c:	4358      	muls	r0, r3
1000df9e:	4b0c      	ldr	r3, [pc, #48]	; (1000dfd0 <at_ble_encryption_start+0x68>)
1000dfa0:	5cc7      	ldrb	r7, [r0, r3]
1000dfa2:	23e0      	movs	r3, #224	; 0xe0
1000dfa4:	2f00      	cmp	r7, #0
1000dfa6:	d10f      	bne.n	1000dfc8 <at_ble_encryption_start+0x60>
1000dfa8:	1c21      	adds	r1, r4, #0
1000dfaa:	221c      	movs	r2, #28
1000dfac:	4b09      	ldr	r3, [pc, #36]	; (1000dfd4 <at_ble_encryption_start+0x6c>)
1000dfae:	480a      	ldr	r0, [pc, #40]	; (1000dfd8 <at_ble_encryption_start+0x70>)
1000dfb0:	4798      	blx	r3
1000dfb2:	1c23      	adds	r3, r4, #0
1000dfb4:	7ea1      	ldrb	r1, [r4, #26]
1000dfb6:	8a22      	ldrh	r2, [r4, #16]
1000dfb8:	3312      	adds	r3, #18
1000dfba:	9100      	str	r1, [sp, #0]
1000dfbc:	9501      	str	r5, [sp, #4]
1000dfbe:	1c21      	adds	r1, r4, #0
1000dfc0:	1c30      	adds	r0, r6, #0
1000dfc2:	4c06      	ldr	r4, [pc, #24]	; (1000dfdc <at_ble_encryption_start+0x74>)
1000dfc4:	47a0      	blx	r4
1000dfc6:	1c3b      	adds	r3, r7, #0
1000dfc8:	1c18      	adds	r0, r3, #0
1000dfca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dfcc:	1000e2c5 	.word	0x1000e2c5
1000dfd0:	1001607e 	.word	0x1001607e
1000dfd4:	1001169b 	.word	0x1001169b
1000dfd8:	1001618c 	.word	0x1001618c
1000dfdc:	1000e941 	.word	0x1000e941

1000dfe0 <at_ble_encryption_request_reply>:
1000dfe0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000dfe2:	24cf      	movs	r4, #207	; 0xcf
1000dfe4:	2b00      	cmp	r3, #0
1000dfe6:	d011      	beq.n	1000e00c <at_ble_encryption_request_reply+0x2c>
1000dfe8:	2a00      	cmp	r2, #0
1000dfea:	d00a      	beq.n	1000e002 <at_ble_encryption_request_reply+0x22>
1000dfec:	2905      	cmp	r1, #5
1000dfee:	d80d      	bhi.n	1000e00c <at_ble_encryption_request_reply+0x2c>
1000dff0:	2501      	movs	r5, #1
1000dff2:	2633      	movs	r6, #51	; 0x33
1000dff4:	408d      	lsls	r5, r1
1000dff6:	4235      	tst	r5, r6
1000dff8:	d008      	beq.n	1000e00c <at_ble_encryption_request_reply+0x2c>
1000dffa:	7e9d      	ldrb	r5, [r3, #26]
1000dffc:	3d07      	subs	r5, #7
1000dffe:	2d09      	cmp	r5, #9
1000e000:	d804      	bhi.n	1000e00c <at_ble_encryption_request_reply+0x2c>
1000e002:	7e9c      	ldrb	r4, [r3, #26]
1000e004:	9400      	str	r4, [sp, #0]
1000e006:	4c02      	ldr	r4, [pc, #8]	; (1000e010 <at_ble_encryption_request_reply+0x30>)
1000e008:	47a0      	blx	r4
1000e00a:	2400      	movs	r4, #0
1000e00c:	1c20      	adds	r0, r4, #0
1000e00e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e010:	1000e9fd 	.word	0x1000e9fd

1000e014 <at_ble_htpt_create_db>:
1000e014:	b530      	push	{r4, r5, lr}
1000e016:	b085      	sub	sp, #20
1000e018:	ac08      	add	r4, sp, #32
1000e01a:	8825      	ldrh	r5, [r4, #0]
1000e01c:	ac09      	add	r4, sp, #36	; 0x24
1000e01e:	7824      	ldrb	r4, [r4, #0]
1000e020:	9500      	str	r5, [sp, #0]
1000e022:	9401      	str	r4, [sp, #4]
1000e024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000e026:	9402      	str	r4, [sp, #8]
1000e028:	4c01      	ldr	r4, [pc, #4]	; (1000e030 <at_ble_htpt_create_db+0x1c>)
1000e02a:	47a0      	blx	r4
1000e02c:	b005      	add	sp, #20
1000e02e:	bd30      	pop	{r4, r5, pc}
1000e030:	1000fb2d 	.word	0x1000fb2d

1000e034 <at_ble_htpt_enable>:
1000e034:	b508      	push	{r3, lr}
1000e036:	4b01      	ldr	r3, [pc, #4]	; (1000e03c <at_ble_htpt_enable+0x8>)
1000e038:	4798      	blx	r3
1000e03a:	bd08      	pop	{r3, pc}
1000e03c:	1000fb6d 	.word	0x1000fb6d

1000e040 <at_ble_htpt_temp_send>:
1000e040:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e042:	1c04      	adds	r4, r0, #0
1000e044:	a806      	add	r0, sp, #24
1000e046:	7805      	ldrb	r5, [r0, #0]
1000e048:	20cf      	movs	r0, #207	; 0xcf
1000e04a:	2900      	cmp	r1, #0
1000e04c:	d003      	beq.n	1000e056 <at_ble_htpt_temp_send+0x16>
1000e04e:	1c20      	adds	r0, r4, #0
1000e050:	9500      	str	r5, [sp, #0]
1000e052:	4c01      	ldr	r4, [pc, #4]	; (1000e058 <at_ble_htpt_temp_send+0x18>)
1000e054:	47a0      	blx	r4
1000e056:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e058:	1000fbad 	.word	0x1000fbad

1000e05c <rx_callback>:
1000e05c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e05e:	8883      	ldrh	r3, [r0, #4]
1000e060:	1c01      	adds	r1, r0, #0
1000e062:	9301      	str	r3, [sp, #4]
1000e064:	88c5      	ldrh	r5, [r0, #6]
1000e066:	8806      	ldrh	r6, [r0, #0]
1000e068:	2d00      	cmp	r5, #0
1000e06a:	d10f      	bne.n	1000e08c <rx_callback+0x30>
1000e06c:	1c19      	adds	r1, r3, #0
1000e06e:	1c30      	adds	r0, r6, #0
1000e070:	4b19      	ldr	r3, [pc, #100]	; (1000e0d8 <rx_callback+0x7c>)
1000e072:	1c2a      	adds	r2, r5, #0
1000e074:	4798      	blx	r3
1000e076:	1e03      	subs	r3, r0, #0
1000e078:	d105      	bne.n	1000e086 <rx_callback+0x2a>
1000e07a:	1c30      	adds	r0, r6, #0
1000e07c:	9901      	ldr	r1, [sp, #4]
1000e07e:	1c1a      	adds	r2, r3, #0
1000e080:	4c16      	ldr	r4, [pc, #88]	; (1000e0dc <rx_callback+0x80>)
1000e082:	47a0      	blx	r4
1000e084:	e027      	b.n	1000e0d6 <rx_callback+0x7a>
1000e086:	4b16      	ldr	r3, [pc, #88]	; (1000e0e0 <rx_callback+0x84>)
1000e088:	4798      	blx	r3
1000e08a:	e024      	b.n	1000e0d6 <rx_callback+0x7a>
1000e08c:	4c15      	ldr	r4, [pc, #84]	; (1000e0e4 <rx_callback+0x88>)
1000e08e:	4a16      	ldr	r2, [pc, #88]	; (1000e0e8 <rx_callback+0x8c>)
1000e090:	6823      	ldr	r3, [r4, #0]
1000e092:	6812      	ldr	r2, [r2, #0]
1000e094:	18eb      	adds	r3, r5, r3
1000e096:	4293      	cmp	r3, r2
1000e098:	d901      	bls.n	1000e09e <rx_callback+0x42>
1000e09a:	2300      	movs	r3, #0
1000e09c:	6023      	str	r3, [r4, #0]
1000e09e:	4f13      	ldr	r7, [pc, #76]	; (1000e0ec <rx_callback+0x90>)
1000e0a0:	6822      	ldr	r2, [r4, #0]
1000e0a2:	683b      	ldr	r3, [r7, #0]
1000e0a4:	3108      	adds	r1, #8
1000e0a6:	1898      	adds	r0, r3, r2
1000e0a8:	1c2a      	adds	r2, r5, #0
1000e0aa:	4b11      	ldr	r3, [pc, #68]	; (1000e0f0 <rx_callback+0x94>)
1000e0ac:	4798      	blx	r3
1000e0ae:	683b      	ldr	r3, [r7, #0]
1000e0b0:	6822      	ldr	r2, [r4, #0]
1000e0b2:	1c30      	adds	r0, r6, #0
1000e0b4:	189a      	adds	r2, r3, r2
1000e0b6:	9901      	ldr	r1, [sp, #4]
1000e0b8:	4b07      	ldr	r3, [pc, #28]	; (1000e0d8 <rx_callback+0x7c>)
1000e0ba:	4798      	blx	r3
1000e0bc:	2800      	cmp	r0, #0
1000e0be:	d1e2      	bne.n	1000e086 <rx_callback+0x2a>
1000e0c0:	6823      	ldr	r3, [r4, #0]
1000e0c2:	683a      	ldr	r2, [r7, #0]
1000e0c4:	1c30      	adds	r0, r6, #0
1000e0c6:	18d2      	adds	r2, r2, r3
1000e0c8:	9901      	ldr	r1, [sp, #4]
1000e0ca:	1c2b      	adds	r3, r5, #0
1000e0cc:	4e03      	ldr	r6, [pc, #12]	; (1000e0dc <rx_callback+0x80>)
1000e0ce:	47b0      	blx	r6
1000e0d0:	6823      	ldr	r3, [r4, #0]
1000e0d2:	18ed      	adds	r5, r5, r3
1000e0d4:	6025      	str	r5, [r4, #0]
1000e0d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e0d8:	1000c6b5 	.word	0x1000c6b5
1000e0dc:	1000c62d 	.word	0x1000c62d
1000e0e0:	1000bd2d 	.word	0x1000bd2d
1000e0e4:	100161e8 	.word	0x100161e8
1000e0e8:	1001531c 	.word	0x1001531c
1000e0ec:	10015318 	.word	0x10015318
1000e0f0:	1001169b 	.word	0x1001169b

1000e0f4 <interface_send>:
1000e0f4:	b508      	push	{r3, lr}
1000e0f6:	4b02      	ldr	r3, [pc, #8]	; (1000e100 <interface_send+0xc>)
1000e0f8:	4798      	blx	r3
1000e0fa:	2000      	movs	r0, #0
1000e0fc:	bd08      	pop	{r3, pc}
1000e0fe:	46c0      	nop			; (mov r8, r8)
1000e100:	1000ba25 	.word	0x1000ba25

1000e104 <interface_init>:
1000e104:	2280      	movs	r2, #128	; 0x80
1000e106:	b510      	push	{r4, lr}
1000e108:	2100      	movs	r1, #0
1000e10a:	1c04      	adds	r4, r0, #0
1000e10c:	0092      	lsls	r2, r2, #2
1000e10e:	4b08      	ldr	r3, [pc, #32]	; (1000e130 <interface_init+0x2c>)
1000e110:	4808      	ldr	r0, [pc, #32]	; (1000e134 <interface_init+0x30>)
1000e112:	4798      	blx	r3
1000e114:	2200      	movs	r2, #0
1000e116:	4b08      	ldr	r3, [pc, #32]	; (1000e138 <interface_init+0x34>)
1000e118:	601a      	str	r2, [r3, #0]
1000e11a:	4a08      	ldr	r2, [pc, #32]	; (1000e13c <interface_init+0x38>)
1000e11c:	4b08      	ldr	r3, [pc, #32]	; (1000e140 <interface_init+0x3c>)
1000e11e:	601a      	str	r2, [r3, #0]
1000e120:	4b08      	ldr	r3, [pc, #32]	; (1000e144 <interface_init+0x40>)
1000e122:	6922      	ldr	r2, [r4, #16]
1000e124:	601a      	str	r2, [r3, #0]
1000e126:	6962      	ldr	r2, [r4, #20]
1000e128:	4b07      	ldr	r3, [pc, #28]	; (1000e148 <interface_init+0x44>)
1000e12a:	601a      	str	r2, [r3, #0]
1000e12c:	bd10      	pop	{r4, pc}
1000e12e:	46c0      	nop			; (mov r8, r8)
1000e130:	100116ad 	.word	0x100116ad
1000e134:	100163ec 	.word	0x100163ec
1000e138:	100161e8 	.word	0x100161e8
1000e13c:	100161ec 	.word	0x100161ec
1000e140:	1001384c 	.word	0x1001384c
1000e144:	10015318 	.word	0x10015318
1000e148:	1001531c 	.word	0x1001531c

1000e14c <platform_cmd_cmpl_signal>:
1000e14c:	2201      	movs	r2, #1
1000e14e:	4b01      	ldr	r3, [pc, #4]	; (1000e154 <platform_cmd_cmpl_signal+0x8>)
1000e150:	601a      	str	r2, [r3, #0]
1000e152:	4770      	bx	lr
1000e154:	10015320 	.word	0x10015320

1000e158 <platform_cmd_cmpl_wait>:
1000e158:	b510      	push	{r4, lr}
1000e15a:	1c04      	adds	r4, r0, #0
1000e15c:	4b07      	ldr	r3, [pc, #28]	; (1000e17c <platform_cmd_cmpl_wait+0x24>)
1000e15e:	681a      	ldr	r2, [r3, #0]
1000e160:	2a01      	cmp	r2, #1
1000e162:	d003      	beq.n	1000e16c <platform_cmd_cmpl_wait+0x14>
1000e164:	4b06      	ldr	r3, [pc, #24]	; (1000e180 <platform_cmd_cmpl_wait+0x28>)
1000e166:	2000      	movs	r0, #0
1000e168:	4798      	blx	r3
1000e16a:	e7f7      	b.n	1000e15c <platform_cmd_cmpl_wait+0x4>
1000e16c:	6819      	ldr	r1, [r3, #0]
1000e16e:	2901      	cmp	r1, #1
1000e170:	d102      	bne.n	1000e178 <platform_cmd_cmpl_wait+0x20>
1000e172:	2200      	movs	r2, #0
1000e174:	601a      	str	r2, [r3, #0]
1000e176:	e000      	b.n	1000e17a <platform_cmd_cmpl_wait+0x22>
1000e178:	7022      	strb	r2, [r4, #0]
1000e17a:	bd10      	pop	{r4, pc}
1000e17c:	10015320 	.word	0x10015320
1000e180:	1000bab5 	.word	0x1000bab5

1000e184 <start_timer>:
1000e184:	4770      	bx	lr

1000e186 <stop_timer>:
1000e186:	4770      	bx	lr

1000e188 <dbg_le_set_bd_addr_req_handler>:
1000e188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e18a:	466b      	mov	r3, sp
1000e18c:	1dde      	adds	r6, r3, #7
1000e18e:	2300      	movs	r3, #0
1000e190:	7033      	strb	r3, [r6, #0]
1000e192:	230f      	movs	r3, #15
1000e194:	4c13      	ldr	r4, [pc, #76]	; (1000e1e4 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e196:	2703      	movs	r7, #3
1000e198:	7023      	strb	r3, [r4, #0]
1000e19a:	2300      	movs	r3, #0
1000e19c:	70e3      	strb	r3, [r4, #3]
1000e19e:	4b12      	ldr	r3, [pc, #72]	; (1000e1e8 <dbg_le_set_bd_addr_req_handler+0x60>)
1000e1a0:	1c01      	adds	r1, r0, #0
1000e1a2:	881a      	ldrh	r2, [r3, #0]
1000e1a4:	881b      	ldrh	r3, [r3, #0]
1000e1a6:	7122      	strb	r2, [r4, #4]
1000e1a8:	0a1b      	lsrs	r3, r3, #8
1000e1aa:	2206      	movs	r2, #6
1000e1ac:	7163      	strb	r3, [r4, #5]
1000e1ae:	480f      	ldr	r0, [pc, #60]	; (1000e1ec <dbg_le_set_bd_addr_req_handler+0x64>)
1000e1b0:	4b0f      	ldr	r3, [pc, #60]	; (1000e1f0 <dbg_le_set_bd_addr_req_handler+0x68>)
1000e1b2:	7067      	strb	r7, [r4, #1]
1000e1b4:	70a7      	strb	r7, [r4, #2]
1000e1b6:	4798      	blx	r3
1000e1b8:	4d0e      	ldr	r5, [pc, #56]	; (1000e1f4 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e1ba:	4b0f      	ldr	r3, [pc, #60]	; (1000e1f8 <dbg_le_set_bd_addr_req_handler+0x70>)
1000e1bc:	210e      	movs	r1, #14
1000e1be:	802b      	strh	r3, [r5, #0]
1000e1c0:	2306      	movs	r3, #6
1000e1c2:	71a3      	strb	r3, [r4, #6]
1000e1c4:	2300      	movs	r3, #0
1000e1c6:	1c20      	adds	r0, r4, #0
1000e1c8:	71e3      	strb	r3, [r4, #7]
1000e1ca:	4b0c      	ldr	r3, [pc, #48]	; (1000e1fc <dbg_le_set_bd_addr_req_handler+0x74>)
1000e1cc:	80af      	strh	r7, [r5, #4]
1000e1ce:	4798      	blx	r3
1000e1d0:	1c30      	adds	r0, r6, #0
1000e1d2:	4b0b      	ldr	r3, [pc, #44]	; (1000e200 <dbg_le_set_bd_addr_req_handler+0x78>)
1000e1d4:	4798      	blx	r3
1000e1d6:	7833      	ldrb	r3, [r6, #0]
1000e1d8:	20e2      	movs	r0, #226	; 0xe2
1000e1da:	2b00      	cmp	r3, #0
1000e1dc:	d101      	bne.n	1000e1e2 <dbg_le_set_bd_addr_req_handler+0x5a>
1000e1de:	68ab      	ldr	r3, [r5, #8]
1000e1e0:	7818      	ldrb	r0, [r3, #0]
1000e1e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e1e4:	100163ec 	.word	0x100163ec
1000e1e8:	1001607c 	.word	0x1001607c
1000e1ec:	100163f4 	.word	0x100163f4
1000e1f0:	1001169b 	.word	0x1001169b
1000e1f4:	10016070 	.word	0x10016070
1000e1f8:	00000329 	.word	0x00000329
1000e1fc:	1000e0f5 	.word	0x1000e0f5
1000e200:	1000e159 	.word	0x1000e159

1000e204 <gapc_get_dev_info_cfm.constprop.1>:
1000e204:	b538      	push	{r3, r4, r5, lr}
1000e206:	230b      	movs	r3, #11
1000e208:	4c27      	ldr	r4, [pc, #156]	; (1000e2a8 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e20a:	7023      	strb	r3, [r4, #0]
1000e20c:	3303      	adds	r3, #3
1000e20e:	7063      	strb	r3, [r4, #1]
1000e210:	3329      	adds	r3, #41	; 0x29
1000e212:	70a3      	strb	r3, [r4, #2]
1000e214:	4b25      	ldr	r3, [pc, #148]	; (1000e2ac <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e216:	70e1      	strb	r1, [r4, #3]
1000e218:	881a      	ldrh	r2, [r3, #0]
1000e21a:	881b      	ldrh	r3, [r3, #0]
1000e21c:	7122      	strb	r2, [r4, #4]
1000e21e:	0a1b      	lsrs	r3, r3, #8
1000e220:	7163      	strb	r3, [r4, #5]
1000e222:	2300      	movs	r3, #0
1000e224:	7220      	strb	r0, [r4, #8]
1000e226:	7263      	strb	r3, [r4, #9]
1000e228:	2801      	cmp	r0, #1
1000e22a:	d02b      	beq.n	1000e284 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e22c:	4298      	cmp	r0, r3
1000e22e:	d01b      	beq.n	1000e268 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e230:	2802      	cmp	r0, #2
1000e232:	d12f      	bne.n	1000e294 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e234:	4b1e      	ldr	r3, [pc, #120]	; (1000e2b0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e236:	2112      	movs	r1, #18
1000e238:	1c1a      	adds	r2, r3, #0
1000e23a:	32ce      	adds	r2, #206	; 0xce
1000e23c:	8812      	ldrh	r2, [r2, #0]
1000e23e:	72a2      	strb	r2, [r4, #10]
1000e240:	0a12      	lsrs	r2, r2, #8
1000e242:	72e2      	strb	r2, [r4, #11]
1000e244:	1c1a      	adds	r2, r3, #0
1000e246:	32d0      	adds	r2, #208	; 0xd0
1000e248:	8812      	ldrh	r2, [r2, #0]
1000e24a:	7322      	strb	r2, [r4, #12]
1000e24c:	0a12      	lsrs	r2, r2, #8
1000e24e:	7362      	strb	r2, [r4, #13]
1000e250:	1c1a      	adds	r2, r3, #0
1000e252:	32d2      	adds	r2, #210	; 0xd2
1000e254:	8812      	ldrh	r2, [r2, #0]
1000e256:	33d4      	adds	r3, #212	; 0xd4
1000e258:	73a2      	strb	r2, [r4, #14]
1000e25a:	0a12      	lsrs	r2, r2, #8
1000e25c:	73e2      	strb	r2, [r4, #15]
1000e25e:	881b      	ldrh	r3, [r3, #0]
1000e260:	7423      	strb	r3, [r4, #16]
1000e262:	0a1b      	lsrs	r3, r3, #8
1000e264:	7463      	strb	r3, [r4, #17]
1000e266:	e016      	b.n	1000e296 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e268:	4b11      	ldr	r3, [pc, #68]	; (1000e2b0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e26a:	4912      	ldr	r1, [pc, #72]	; (1000e2b4 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e26c:	33aa      	adds	r3, #170	; 0xaa
1000e26e:	881d      	ldrh	r5, [r3, #0]
1000e270:	4811      	ldr	r0, [pc, #68]	; (1000e2b8 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e272:	0a2b      	lsrs	r3, r5, #8
1000e274:	72a5      	strb	r5, [r4, #10]
1000e276:	72e3      	strb	r3, [r4, #11]
1000e278:	1c2a      	adds	r2, r5, #0
1000e27a:	4b10      	ldr	r3, [pc, #64]	; (1000e2bc <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e27c:	350c      	adds	r5, #12
1000e27e:	4798      	blx	r3
1000e280:	b2a9      	uxth	r1, r5
1000e282:	e008      	b.n	1000e296 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e284:	4b0a      	ldr	r3, [pc, #40]	; (1000e2b0 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e286:	210c      	movs	r1, #12
1000e288:	33cc      	adds	r3, #204	; 0xcc
1000e28a:	881b      	ldrh	r3, [r3, #0]
1000e28c:	72a3      	strb	r3, [r4, #10]
1000e28e:	0a1b      	lsrs	r3, r3, #8
1000e290:	72e3      	strb	r3, [r4, #11]
1000e292:	e000      	b.n	1000e296 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e294:	210a      	movs	r1, #10
1000e296:	1c0b      	adds	r3, r1, #0
1000e298:	3b08      	subs	r3, #8
1000e29a:	71a3      	strb	r3, [r4, #6]
1000e29c:	121b      	asrs	r3, r3, #8
1000e29e:	71e3      	strb	r3, [r4, #7]
1000e2a0:	1c20      	adds	r0, r4, #0
1000e2a2:	4b07      	ldr	r3, [pc, #28]	; (1000e2c0 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000e2a4:	4798      	blx	r3
1000e2a6:	bd38      	pop	{r3, r4, r5, pc}
1000e2a8:	100163ec 	.word	0x100163ec
1000e2ac:	1001607c 	.word	0x1001607c
1000e2b0:	1001610e 	.word	0x1001610e
1000e2b4:	100161ba 	.word	0x100161ba
1000e2b8:	100163f8 	.word	0x100163f8
1000e2bc:	1001169b 	.word	0x1001169b
1000e2c0:	1000e0f5 	.word	0x1000e0f5

1000e2c4 <check_ConnData_idx_role>:
1000e2c4:	4b0c      	ldr	r3, [pc, #48]	; (1000e2f8 <check_ConnData_idx_role+0x34>)
1000e2c6:	b570      	push	{r4, r5, r6, lr}
1000e2c8:	1c04      	adds	r4, r0, #0
1000e2ca:	2008      	movs	r0, #8
1000e2cc:	429c      	cmp	r4, r3
1000e2ce:	d011      	beq.n	1000e2f4 <check_ConnData_idx_role+0x30>
1000e2d0:	2300      	movs	r3, #0
1000e2d2:	2212      	movs	r2, #18
1000e2d4:	435a      	muls	r2, r3
1000e2d6:	4d09      	ldr	r5, [pc, #36]	; (1000e2fc <check_ConnData_idx_role+0x38>)
1000e2d8:	b2d8      	uxtb	r0, r3
1000e2da:	1956      	adds	r6, r2, r5
1000e2dc:	8976      	ldrh	r6, [r6, #10]
1000e2de:	42a6      	cmp	r6, r4
1000e2e0:	d104      	bne.n	1000e2ec <check_ConnData_idx_role+0x28>
1000e2e2:	2900      	cmp	r1, #0
1000e2e4:	d006      	beq.n	1000e2f4 <check_ConnData_idx_role+0x30>
1000e2e6:	5d53      	ldrb	r3, [r2, r5]
1000e2e8:	700b      	strb	r3, [r1, #0]
1000e2ea:	e003      	b.n	1000e2f4 <check_ConnData_idx_role+0x30>
1000e2ec:	3301      	adds	r3, #1
1000e2ee:	2b08      	cmp	r3, #8
1000e2f0:	d1ef      	bne.n	1000e2d2 <check_ConnData_idx_role+0xe>
1000e2f2:	1c18      	adds	r0, r3, #0
1000e2f4:	bd70      	pop	{r4, r5, r6, pc}
1000e2f6:	46c0      	nop			; (mov r8, r8)
1000e2f8:	0000ffff 	.word	0x0000ffff
1000e2fc:	1001607e 	.word	0x1001607e

1000e300 <check_ConnData_emptyEntry>:
1000e300:	2300      	movs	r3, #0
1000e302:	2212      	movs	r2, #18
1000e304:	435a      	muls	r2, r3
1000e306:	4906      	ldr	r1, [pc, #24]	; (1000e320 <check_ConnData_emptyEntry+0x20>)
1000e308:	b2d8      	uxtb	r0, r3
1000e30a:	1852      	adds	r2, r2, r1
1000e30c:	8951      	ldrh	r1, [r2, #10]
1000e30e:	4a05      	ldr	r2, [pc, #20]	; (1000e324 <check_ConnData_emptyEntry+0x24>)
1000e310:	4291      	cmp	r1, r2
1000e312:	d003      	beq.n	1000e31c <check_ConnData_emptyEntry+0x1c>
1000e314:	3301      	adds	r3, #1
1000e316:	2b08      	cmp	r3, #8
1000e318:	d1f3      	bne.n	1000e302 <check_ConnData_emptyEntry+0x2>
1000e31a:	1c18      	adds	r0, r3, #0
1000e31c:	4770      	bx	lr
1000e31e:	46c0      	nop			; (mov r8, r8)
1000e320:	1001607e 	.word	0x1001607e
1000e324:	0000ffff 	.word	0x0000ffff

1000e328 <gapc_cmp_evt>:
1000e328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e32a:	780b      	ldrb	r3, [r1, #0]
1000e32c:	1c05      	adds	r5, r0, #0
1000e32e:	1e58      	subs	r0, r3, #1
1000e330:	784e      	ldrb	r6, [r1, #1]
1000e332:	280f      	cmp	r0, #15
1000e334:	d85a      	bhi.n	1000e3ec <gapc_cmp_evt+0xc4>
1000e336:	1c14      	adds	r4, r2, #0
1000e338:	f001 fc94 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000e33c:	5858440a 	.word	0x5858440a
1000e340:	4b584444 	.word	0x4b584444
1000e344:	0825122d 	.word	0x0825122d
1000e348:	3e395858 	.word	0x3e395858
1000e34c:	203b      	movs	r0, #59	; 0x3b
1000e34e:	e04e      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e350:	203b      	movs	r0, #59	; 0x3b
1000e352:	2e00      	cmp	r6, #0
1000e354:	d04b      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e356:	0a2d      	lsrs	r5, r5, #8
1000e358:	8015      	strh	r5, [r2, #0]
1000e35a:	7096      	strb	r6, [r2, #2]
1000e35c:	3835      	subs	r0, #53	; 0x35
1000e35e:	e046      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e360:	466b      	mov	r3, sp
1000e362:	1ddf      	adds	r7, r3, #7
1000e364:	2301      	movs	r3, #1
1000e366:	0a2d      	lsrs	r5, r5, #8
1000e368:	703b      	strb	r3, [r7, #0]
1000e36a:	1c28      	adds	r0, r5, #0
1000e36c:	1c39      	adds	r1, r7, #0
1000e36e:	4b20      	ldr	r3, [pc, #128]	; (1000e3f0 <gapc_cmp_evt+0xc8>)
1000e370:	4798      	blx	r3
1000e372:	2807      	cmp	r0, #7
1000e374:	d803      	bhi.n	1000e37e <gapc_cmp_evt+0x56>
1000e376:	783b      	ldrb	r3, [r7, #0]
1000e378:	203b      	movs	r0, #59	; 0x3b
1000e37a:	2b00      	cmp	r3, #0
1000e37c:	d037      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e37e:	8065      	strh	r5, [r4, #2]
1000e380:	7126      	strb	r6, [r4, #4]
1000e382:	2009      	movs	r0, #9
1000e384:	e033      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e386:	203b      	movs	r0, #59	; 0x3b
1000e388:	2e00      	cmp	r6, #0
1000e38a:	d030      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e38c:	0a2d      	lsrs	r5, r5, #8
1000e38e:	8015      	strh	r5, [r2, #0]
1000e390:	7096      	strb	r6, [r2, #2]
1000e392:	382d      	subs	r0, #45	; 0x2d
1000e394:	e02b      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e396:	203b      	movs	r0, #59	; 0x3b
1000e398:	2e00      	cmp	r6, #0
1000e39a:	d028      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e39c:	2300      	movs	r3, #0
1000e39e:	0a2d      	lsrs	r5, r5, #8
1000e3a0:	8015      	strh	r5, [r2, #0]
1000e3a2:	7096      	strb	r6, [r2, #2]
1000e3a4:	8093      	strh	r3, [r2, #4]
1000e3a6:	80d3      	strh	r3, [r2, #6]
1000e3a8:	8113      	strh	r3, [r2, #8]
1000e3aa:	3834      	subs	r0, #52	; 0x34
1000e3ac:	e01f      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3ae:	203b      	movs	r0, #59	; 0x3b
1000e3b0:	2e00      	cmp	r6, #0
1000e3b2:	d01c      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3b4:	7216      	strb	r6, [r2, #8]
1000e3b6:	e003      	b.n	1000e3c0 <gapc_cmp_evt+0x98>
1000e3b8:	203b      	movs	r0, #59	; 0x3b
1000e3ba:	2e00      	cmp	r6, #0
1000e3bc:	d017      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3be:	7116      	strb	r6, [r2, #4]
1000e3c0:	3812      	subs	r0, #18
1000e3c2:	e014      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3c4:	203b      	movs	r0, #59	; 0x3b
1000e3c6:	2e00      	cmp	r6, #0
1000e3c8:	d011      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3ca:	7093      	strb	r3, [r2, #2]
1000e3cc:	70d6      	strb	r6, [r2, #3]
1000e3ce:	382a      	subs	r0, #42	; 0x2a
1000e3d0:	e00d      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3d2:	203b      	movs	r0, #59	; 0x3b
1000e3d4:	2e00      	cmp	r6, #0
1000e3d6:	d00a      	beq.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3d8:	0a2d      	lsrs	r5, r5, #8
1000e3da:	7016      	strb	r6, [r2, #0]
1000e3dc:	8055      	strh	r5, [r2, #2]
1000e3de:	1d10      	adds	r0, r2, #4
1000e3e0:	2100      	movs	r1, #0
1000e3e2:	2205      	movs	r2, #5
1000e3e4:	4b03      	ldr	r3, [pc, #12]	; (1000e3f4 <gapc_cmp_evt+0xcc>)
1000e3e6:	4798      	blx	r3
1000e3e8:	2012      	movs	r0, #18
1000e3ea:	e000      	b.n	1000e3ee <gapc_cmp_evt+0xc6>
1000e3ec:	2000      	movs	r0, #0
1000e3ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e3f0:	1000e2c5 	.word	0x1000e2c5
1000e3f4:	100116ad 	.word	0x100116ad

1000e3f8 <gapc_connection_cfm_handler>:
1000e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e3fa:	b085      	sub	sp, #20
1000e3fc:	1c1d      	adds	r5, r3, #0
1000e3fe:	ab0a      	add	r3, sp, #40	; 0x28
1000e400:	781b      	ldrb	r3, [r3, #0]
1000e402:	9201      	str	r2, [sp, #4]
1000e404:	9302      	str	r3, [sp, #8]
1000e406:	ab0b      	add	r3, sp, #44	; 0x2c
1000e408:	781b      	ldrb	r3, [r3, #0]
1000e40a:	1c07      	adds	r7, r0, #0
1000e40c:	9303      	str	r3, [sp, #12]
1000e40e:	ab0c      	add	r3, sp, #48	; 0x30
1000e410:	881a      	ldrh	r2, [r3, #0]
1000e412:	2302      	movs	r3, #2
1000e414:	1c0e      	adds	r6, r1, #0
1000e416:	4c23      	ldr	r4, [pc, #140]	; (1000e4a4 <gapc_connection_cfm_handler+0xac>)
1000e418:	1c39      	adds	r1, r7, #0
1000e41a:	7023      	strb	r3, [r4, #0]
1000e41c:	330c      	adds	r3, #12
1000e41e:	7063      	strb	r3, [r4, #1]
1000e420:	70a3      	strb	r3, [r4, #2]
1000e422:	4b21      	ldr	r3, [pc, #132]	; (1000e4a8 <gapc_connection_cfm_handler+0xb0>)
1000e424:	70e2      	strb	r2, [r4, #3]
1000e426:	881a      	ldrh	r2, [r3, #0]
1000e428:	881b      	ldrh	r3, [r3, #0]
1000e42a:	7122      	strb	r2, [r4, #4]
1000e42c:	0a1b      	lsrs	r3, r3, #8
1000e42e:	4f1f      	ldr	r7, [pc, #124]	; (1000e4ac <gapc_connection_cfm_handler+0xb4>)
1000e430:	2210      	movs	r2, #16
1000e432:	481f      	ldr	r0, [pc, #124]	; (1000e4b0 <gapc_connection_cfm_handler+0xb8>)
1000e434:	7163      	strb	r3, [r4, #5]
1000e436:	47b8      	blx	r7
1000e438:	0a33      	lsrs	r3, r6, #8
1000e43a:	7626      	strb	r6, [r4, #24]
1000e43c:	7663      	strb	r3, [r4, #25]
1000e43e:	9901      	ldr	r1, [sp, #4]
1000e440:	0c33      	lsrs	r3, r6, #16
1000e442:	2210      	movs	r2, #16
1000e444:	0e36      	lsrs	r6, r6, #24
1000e446:	481b      	ldr	r0, [pc, #108]	; (1000e4b4 <gapc_connection_cfm_handler+0xbc>)
1000e448:	76a3      	strb	r3, [r4, #26]
1000e44a:	76e6      	strb	r6, [r4, #27]
1000e44c:	47b8      	blx	r7
1000e44e:	1c23      	adds	r3, r4, #0
1000e450:	332c      	adds	r3, #44	; 0x2c
1000e452:	701d      	strb	r5, [r3, #0]
1000e454:	1c23      	adds	r3, r4, #0
1000e456:	0a2a      	lsrs	r2, r5, #8
1000e458:	332d      	adds	r3, #45	; 0x2d
1000e45a:	701a      	strb	r2, [r3, #0]
1000e45c:	1c23      	adds	r3, r4, #0
1000e45e:	0c2a      	lsrs	r2, r5, #16
1000e460:	332e      	adds	r3, #46	; 0x2e
1000e462:	701a      	strb	r2, [r3, #0]
1000e464:	1c23      	adds	r3, r4, #0
1000e466:	0e2d      	lsrs	r5, r5, #24
1000e468:	332f      	adds	r3, #47	; 0x2f
1000e46a:	466a      	mov	r2, sp
1000e46c:	701d      	strb	r5, [r3, #0]
1000e46e:	1c23      	adds	r3, r4, #0
1000e470:	7a12      	ldrb	r2, [r2, #8]
1000e472:	3330      	adds	r3, #48	; 0x30
1000e474:	701a      	strb	r2, [r3, #0]
1000e476:	1c23      	adds	r3, r4, #0
1000e478:	2500      	movs	r5, #0
1000e47a:	3331      	adds	r3, #49	; 0x31
1000e47c:	466a      	mov	r2, sp
1000e47e:	701d      	strb	r5, [r3, #0]
1000e480:	1c23      	adds	r3, r4, #0
1000e482:	7b12      	ldrb	r2, [r2, #12]
1000e484:	3332      	adds	r3, #50	; 0x32
1000e486:	701a      	strb	r2, [r3, #0]
1000e488:	1c23      	adds	r3, r4, #0
1000e48a:	3333      	adds	r3, #51	; 0x33
1000e48c:	701d      	strb	r5, [r3, #0]
1000e48e:	232c      	movs	r3, #44	; 0x2c
1000e490:	1c20      	adds	r0, r4, #0
1000e492:	71a3      	strb	r3, [r4, #6]
1000e494:	2134      	movs	r1, #52	; 0x34
1000e496:	4b08      	ldr	r3, [pc, #32]	; (1000e4b8 <gapc_connection_cfm_handler+0xc0>)
1000e498:	71e5      	strb	r5, [r4, #7]
1000e49a:	4798      	blx	r3
1000e49c:	1c28      	adds	r0, r5, #0
1000e49e:	b005      	add	sp, #20
1000e4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e4a2:	46c0      	nop			; (mov r8, r8)
1000e4a4:	100163ec 	.word	0x100163ec
1000e4a8:	1001607c 	.word	0x1001607c
1000e4ac:	1001169b 	.word	0x1001169b
1000e4b0:	100163f4 	.word	0x100163f4
1000e4b4:	10016408 	.word	0x10016408
1000e4b8:	1000e0f5 	.word	0x1000e0f5

1000e4bc <gapc_con_req_ind>:
1000e4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4be:	7845      	ldrb	r5, [r0, #1]
1000e4c0:	7803      	ldrb	r3, [r0, #0]
1000e4c2:	4c30      	ldr	r4, [pc, #192]	; (1000e584 <gapc_con_req_ind+0xc8>)
1000e4c4:	022d      	lsls	r5, r5, #8
1000e4c6:	431d      	orrs	r5, r3
1000e4c8:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000e4ca:	78c3      	ldrb	r3, [r0, #3]
1000e4cc:	7882      	ldrb	r2, [r0, #2]
1000e4ce:	b08b      	sub	sp, #44	; 0x2c
1000e4d0:	021b      	lsls	r3, r3, #8
1000e4d2:	431a      	orrs	r2, r3
1000e4d4:	466b      	mov	r3, sp
1000e4d6:	9205      	str	r2, [sp, #20]
1000e4d8:	8a9b      	ldrh	r3, [r3, #20]
1000e4da:	2120      	movs	r1, #32
1000e4dc:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000e4de:	7943      	ldrb	r3, [r0, #5]
1000e4e0:	7902      	ldrb	r2, [r0, #4]
1000e4e2:	021b      	lsls	r3, r3, #8
1000e4e4:	431a      	orrs	r2, r3
1000e4e6:	466b      	mov	r3, sp
1000e4e8:	9206      	str	r2, [sp, #24]
1000e4ea:	8b1b      	ldrh	r3, [r3, #24]
1000e4ec:	1c06      	adds	r6, r0, #0
1000e4ee:	8623      	strh	r3, [r4, #48]	; 0x30
1000e4f0:	79c3      	ldrb	r3, [r0, #7]
1000e4f2:	7982      	ldrb	r2, [r0, #6]
1000e4f4:	021b      	lsls	r3, r3, #8
1000e4f6:	431a      	orrs	r2, r3
1000e4f8:	466b      	mov	r3, sp
1000e4fa:	9207      	str	r2, [sp, #28]
1000e4fc:	466a      	mov	r2, sp
1000e4fe:	8b9b      	ldrh	r3, [r3, #28]
1000e500:	1852      	adds	r2, r2, r1
1000e502:	8663      	strh	r3, [r4, #50]	; 0x32
1000e504:	7a43      	ldrb	r3, [r0, #9]
1000e506:	1c01      	adds	r1, r0, #0
1000e508:	9308      	str	r3, [sp, #32]
1000e50a:	1c23      	adds	r3, r4, #0
1000e50c:	7812      	ldrb	r2, [r2, #0]
1000e50e:	3377      	adds	r3, #119	; 0x77
1000e510:	3478      	adds	r4, #120	; 0x78
1000e512:	701a      	strb	r2, [r3, #0]
1000e514:	310a      	adds	r1, #10
1000e516:	2206      	movs	r2, #6
1000e518:	4b1b      	ldr	r3, [pc, #108]	; (1000e588 <gapc_con_req_ind+0xcc>)
1000e51a:	1c20      	adds	r0, r4, #0
1000e51c:	4798      	blx	r3
1000e51e:	7c33      	ldrb	r3, [r6, #16]
1000e520:	9309      	str	r3, [sp, #36]	; 0x24
1000e522:	4b1a      	ldr	r3, [pc, #104]	; (1000e58c <gapc_con_req_ind+0xd0>)
1000e524:	4798      	blx	r3
1000e526:	4e1a      	ldr	r6, [pc, #104]	; (1000e590 <gapc_con_req_ind+0xd4>)
1000e528:	1e07      	subs	r7, r0, #0
1000e52a:	2f07      	cmp	r7, #7
1000e52c:	d81b      	bhi.n	1000e566 <gapc_con_req_ind+0xaa>
1000e52e:	2312      	movs	r3, #18
1000e530:	4343      	muls	r3, r0
1000e532:	18f0      	adds	r0, r6, r3
1000e534:	8145      	strh	r5, [r0, #10]
1000e536:	4669      	mov	r1, sp
1000e538:	2524      	movs	r5, #36	; 0x24
1000e53a:	1949      	adds	r1, r1, r5
1000e53c:	7809      	ldrb	r1, [r1, #0]
1000e53e:	2206      	movs	r2, #6
1000e540:	54f1      	strb	r1, [r6, r3]
1000e542:	2120      	movs	r1, #32
1000e544:	466b      	mov	r3, sp
1000e546:	185b      	adds	r3, r3, r1
1000e548:	781b      	ldrb	r3, [r3, #0]
1000e54a:	1c21      	adds	r1, r4, #0
1000e54c:	7043      	strb	r3, [r0, #1]
1000e54e:	466b      	mov	r3, sp
1000e550:	8a9b      	ldrh	r3, [r3, #20]
1000e552:	3002      	adds	r0, #2
1000e554:	8143      	strh	r3, [r0, #10]
1000e556:	466b      	mov	r3, sp
1000e558:	8b1b      	ldrh	r3, [r3, #24]
1000e55a:	8183      	strh	r3, [r0, #12]
1000e55c:	466b      	mov	r3, sp
1000e55e:	8b9b      	ldrh	r3, [r3, #28]
1000e560:	81c3      	strh	r3, [r0, #14]
1000e562:	4b09      	ldr	r3, [pc, #36]	; (1000e588 <gapc_con_req_ind+0xcc>)
1000e564:	4798      	blx	r3
1000e566:	2112      	movs	r1, #18
1000e568:	2300      	movs	r3, #0
1000e56a:	434f      	muls	r7, r1
1000e56c:	9300      	str	r3, [sp, #0]
1000e56e:	9301      	str	r3, [sp, #4]
1000e570:	19f6      	adds	r6, r6, r7
1000e572:	8971      	ldrh	r1, [r6, #10]
1000e574:	4a07      	ldr	r2, [pc, #28]	; (1000e594 <gapc_con_req_ind+0xd8>)
1000e576:	9102      	str	r1, [sp, #8]
1000e578:	1c10      	adds	r0, r2, #0
1000e57a:	1c19      	adds	r1, r3, #0
1000e57c:	4c06      	ldr	r4, [pc, #24]	; (1000e598 <gapc_con_req_ind+0xdc>)
1000e57e:	47a0      	blx	r4
1000e580:	b00b      	add	sp, #44	; 0x2c
1000e582:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e584:	1001610e 	.word	0x1001610e
1000e588:	1001169b 	.word	0x1001169b
1000e58c:	1000e301 	.word	0x1000e301
1000e590:	1001607e 	.word	0x1001607e
1000e594:	10015324 	.word	0x10015324
1000e598:	1000e3f9 	.word	0x1000e3f9

1000e59c <gapc_disconnect_cmd_handler>:
1000e59c:	2204      	movs	r2, #4
1000e59e:	b510      	push	{r4, lr}
1000e5a0:	4b0c      	ldr	r3, [pc, #48]	; (1000e5d4 <gapc_disconnect_cmd_handler+0x38>)
1000e5a2:	2400      	movs	r4, #0
1000e5a4:	701a      	strb	r2, [r3, #0]
1000e5a6:	320a      	adds	r2, #10
1000e5a8:	705a      	strb	r2, [r3, #1]
1000e5aa:	709a      	strb	r2, [r3, #2]
1000e5ac:	4a0a      	ldr	r2, [pc, #40]	; (1000e5d8 <gapc_disconnect_cmd_handler+0x3c>)
1000e5ae:	70d9      	strb	r1, [r3, #3]
1000e5b0:	8811      	ldrh	r1, [r2, #0]
1000e5b2:	8812      	ldrh	r2, [r2, #0]
1000e5b4:	7119      	strb	r1, [r3, #4]
1000e5b6:	0a12      	lsrs	r2, r2, #8
1000e5b8:	715a      	strb	r2, [r3, #5]
1000e5ba:	2201      	movs	r2, #1
1000e5bc:	721a      	strb	r2, [r3, #8]
1000e5be:	1892      	adds	r2, r2, r2
1000e5c0:	7258      	strb	r0, [r3, #9]
1000e5c2:	719a      	strb	r2, [r3, #6]
1000e5c4:	71dc      	strb	r4, [r3, #7]
1000e5c6:	1c18      	adds	r0, r3, #0
1000e5c8:	210a      	movs	r1, #10
1000e5ca:	4b04      	ldr	r3, [pc, #16]	; (1000e5dc <gapc_disconnect_cmd_handler+0x40>)
1000e5cc:	4798      	blx	r3
1000e5ce:	1c20      	adds	r0, r4, #0
1000e5d0:	bd10      	pop	{r4, pc}
1000e5d2:	46c0      	nop			; (mov r8, r8)
1000e5d4:	100163ec 	.word	0x100163ec
1000e5d8:	1001607c 	.word	0x1001607c
1000e5dc:	1000e0f5 	.word	0x1000e0f5

1000e5e0 <gapc_disconnect_ind>:
1000e5e0:	1c02      	adds	r2, r0, #0
1000e5e2:	b508      	push	{r3, lr}
1000e5e4:	7843      	ldrb	r3, [r0, #1]
1000e5e6:	7800      	ldrb	r0, [r0, #0]
1000e5e8:	021b      	lsls	r3, r3, #8
1000e5ea:	4318      	orrs	r0, r3
1000e5ec:	8008      	strh	r0, [r1, #0]
1000e5ee:	7893      	ldrb	r3, [r2, #2]
1000e5f0:	708b      	strb	r3, [r1, #2]
1000e5f2:	2100      	movs	r1, #0
1000e5f4:	4b05      	ldr	r3, [pc, #20]	; (1000e60c <gapc_disconnect_ind+0x2c>)
1000e5f6:	4798      	blx	r3
1000e5f8:	2807      	cmp	r0, #7
1000e5fa:	d806      	bhi.n	1000e60a <gapc_disconnect_ind+0x2a>
1000e5fc:	2312      	movs	r3, #18
1000e5fe:	4358      	muls	r0, r3
1000e600:	4b03      	ldr	r3, [pc, #12]	; (1000e610 <gapc_disconnect_ind+0x30>)
1000e602:	1818      	adds	r0, r3, r0
1000e604:	2301      	movs	r3, #1
1000e606:	425b      	negs	r3, r3
1000e608:	8143      	strh	r3, [r0, #10]
1000e60a:	bd08      	pop	{r3, pc}
1000e60c:	1000e2c5 	.word	0x1000e2c5
1000e610:	1001607e 	.word	0x1001607e

1000e614 <gapc_bond_cmd_handler>:
1000e614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e616:	9300      	str	r3, [sp, #0]
1000e618:	2312      	movs	r3, #18
1000e61a:	1c04      	adds	r4, r0, #0
1000e61c:	a808      	add	r0, sp, #32
1000e61e:	7807      	ldrb	r7, [r0, #0]
1000e620:	a809      	add	r0, sp, #36	; 0x24
1000e622:	7806      	ldrb	r6, [r0, #0]
1000e624:	a80a      	add	r0, sp, #40	; 0x28
1000e626:	7805      	ldrb	r5, [r0, #0]
1000e628:	a80b      	add	r0, sp, #44	; 0x2c
1000e62a:	7800      	ldrb	r0, [r0, #0]
1000e62c:	9001      	str	r0, [sp, #4]
1000e62e:	4810      	ldr	r0, [pc, #64]	; (1000e670 <gapc_bond_cmd_handler+0x5c>)
1000e630:	7003      	strb	r3, [r0, #0]
1000e632:	230e      	movs	r3, #14
1000e634:	70c4      	strb	r4, [r0, #3]
1000e636:	4c0f      	ldr	r4, [pc, #60]	; (1000e674 <gapc_bond_cmd_handler+0x60>)
1000e638:	7043      	strb	r3, [r0, #1]
1000e63a:	7083      	strb	r3, [r0, #2]
1000e63c:	8823      	ldrh	r3, [r4, #0]
1000e63e:	8824      	ldrh	r4, [r4, #0]
1000e640:	7103      	strb	r3, [r0, #4]
1000e642:	466b      	mov	r3, sp
1000e644:	781b      	ldrb	r3, [r3, #0]
1000e646:	0a24      	lsrs	r4, r4, #8
1000e648:	72c3      	strb	r3, [r0, #11]
1000e64a:	466b      	mov	r3, sp
1000e64c:	791b      	ldrb	r3, [r3, #4]
1000e64e:	7144      	strb	r4, [r0, #5]
1000e650:	73c3      	strb	r3, [r0, #15]
1000e652:	2308      	movs	r3, #8
1000e654:	7183      	strb	r3, [r0, #6]
1000e656:	2300      	movs	r3, #0
1000e658:	240a      	movs	r4, #10
1000e65a:	7241      	strb	r1, [r0, #9]
1000e65c:	71c3      	strb	r3, [r0, #7]
1000e65e:	2110      	movs	r1, #16
1000e660:	4b05      	ldr	r3, [pc, #20]	; (1000e678 <gapc_bond_cmd_handler+0x64>)
1000e662:	7307      	strb	r7, [r0, #12]
1000e664:	7346      	strb	r6, [r0, #13]
1000e666:	7385      	strb	r5, [r0, #14]
1000e668:	7204      	strb	r4, [r0, #8]
1000e66a:	7282      	strb	r2, [r0, #10]
1000e66c:	4798      	blx	r3
1000e66e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e670:	100163ec 	.word	0x100163ec
1000e674:	1001607c 	.word	0x1001607c
1000e678:	1000e0f5 	.word	0x1000e0f5

1000e67c <gapc_bond_ind>:
1000e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e67e:	780e      	ldrb	r6, [r1, #0]
1000e680:	1c03      	adds	r3, r0, #0
1000e682:	1eb0      	subs	r0, r6, #2
1000e684:	2805      	cmp	r0, #5
1000e686:	d85d      	bhi.n	1000e744 <gapc_bond_ind+0xc8>
1000e688:	1c15      	adds	r5, r2, #0
1000e68a:	1c0c      	adds	r4, r1, #0
1000e68c:	f001 faea 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000e690:	2f5a030d 	.word	0x2f5a030d
1000e694:	4740      	.short	0x4740
1000e696:	2009      	movs	r0, #9
1000e698:	2a00      	cmp	r2, #0
1000e69a:	d054      	beq.n	1000e746 <gapc_bond_ind+0xca>
1000e69c:	0a1b      	lsrs	r3, r3, #8
1000e69e:	8053      	strh	r3, [r2, #2]
1000e6a0:	788b      	ldrb	r3, [r1, #2]
1000e6a2:	4829      	ldr	r0, [pc, #164]	; (1000e748 <gapc_bond_ind+0xcc>)
1000e6a4:	7113      	strb	r3, [r2, #4]
1000e6a6:	2100      	movs	r1, #0
1000e6a8:	e01c      	b.n	1000e6e4 <gapc_bond_ind+0x68>
1000e6aa:	2009      	movs	r0, #9
1000e6ac:	2a00      	cmp	r2, #0
1000e6ae:	d04a      	beq.n	1000e746 <gapc_bond_ind+0xca>
1000e6b0:	4c25      	ldr	r4, [pc, #148]	; (1000e748 <gapc_bond_ind+0xcc>)
1000e6b2:	0a1b      	lsrs	r3, r3, #8
1000e6b4:	8053      	strh	r3, [r2, #2]
1000e6b6:	788b      	ldrb	r3, [r1, #2]
1000e6b8:	2700      	movs	r7, #0
1000e6ba:	1c10      	adds	r0, r2, #0
1000e6bc:	1c21      	adds	r1, r4, #0
1000e6be:	7013      	strb	r3, [r2, #0]
1000e6c0:	4e22      	ldr	r6, [pc, #136]	; (1000e74c <gapc_bond_ind+0xd0>)
1000e6c2:	7117      	strb	r7, [r2, #4]
1000e6c4:	312e      	adds	r1, #46	; 0x2e
1000e6c6:	2217      	movs	r2, #23
1000e6c8:	3032      	adds	r0, #50	; 0x32
1000e6ca:	47b0      	blx	r6
1000e6cc:	1c28      	adds	r0, r5, #0
1000e6ce:	1c21      	adds	r1, r4, #0
1000e6d0:	2210      	movs	r2, #16
1000e6d2:	311e      	adds	r1, #30
1000e6d4:	3022      	adds	r0, #34	; 0x22
1000e6d6:	47b0      	blx	r6
1000e6d8:	1ca1      	adds	r1, r4, #2
1000e6da:	1da8      	adds	r0, r5, #6
1000e6dc:	221c      	movs	r2, #28
1000e6de:	47b0      	blx	r6
1000e6e0:	1c20      	adds	r0, r4, #0
1000e6e2:	1c39      	adds	r1, r7, #0
1000e6e4:	2246      	movs	r2, #70	; 0x46
1000e6e6:	4b1a      	ldr	r3, [pc, #104]	; (1000e750 <gapc_bond_ind+0xd4>)
1000e6e8:	4798      	blx	r3
1000e6ea:	2009      	movs	r0, #9
1000e6ec:	e02b      	b.n	1000e746 <gapc_bond_ind+0xca>
1000e6ee:	4d16      	ldr	r5, [pc, #88]	; (1000e748 <gapc_bond_ind+0xcc>)
1000e6f0:	3102      	adds	r1, #2
1000e6f2:	1c28      	adds	r0, r5, #0
1000e6f4:	2210      	movs	r2, #16
1000e6f6:	4e15      	ldr	r6, [pc, #84]	; (1000e74c <gapc_bond_ind+0xd0>)
1000e6f8:	302e      	adds	r0, #46	; 0x2e
1000e6fa:	47b0      	blx	r6
1000e6fc:	1c28      	adds	r0, r5, #0
1000e6fe:	1c21      	adds	r1, r4, #0
1000e700:	303f      	adds	r0, #63	; 0x3f
1000e702:	3112      	adds	r1, #18
1000e704:	2206      	movs	r2, #6
1000e706:	47b0      	blx	r6
1000e708:	7e23      	ldrb	r3, [r4, #24]
1000e70a:	353e      	adds	r5, #62	; 0x3e
1000e70c:	702b      	strb	r3, [r5, #0]
1000e70e:	e019      	b.n	1000e744 <gapc_bond_ind+0xc8>
1000e710:	480d      	ldr	r0, [pc, #52]	; (1000e748 <gapc_bond_ind+0xcc>)
1000e712:	3102      	adds	r1, #2
1000e714:	2210      	movs	r2, #16
1000e716:	4b0d      	ldr	r3, [pc, #52]	; (1000e74c <gapc_bond_ind+0xd0>)
1000e718:	301e      	adds	r0, #30
1000e71a:	4798      	blx	r3
1000e71c:	e012      	b.n	1000e744 <gapc_bond_ind+0xc8>
1000e71e:	4d0a      	ldr	r5, [pc, #40]	; (1000e748 <gapc_bond_ind+0xcc>)
1000e720:	3102      	adds	r1, #2
1000e722:	2210      	movs	r2, #16
1000e724:	4e09      	ldr	r6, [pc, #36]	; (1000e74c <gapc_bond_ind+0xd0>)
1000e726:	1ca8      	adds	r0, r5, #2
1000e728:	47b0      	blx	r6
1000e72a:	1c28      	adds	r0, r5, #0
1000e72c:	1c21      	adds	r1, r4, #0
1000e72e:	7ce3      	ldrb	r3, [r4, #19]
1000e730:	7ca2      	ldrb	r2, [r4, #18]
1000e732:	021b      	lsls	r3, r3, #8
1000e734:	4313      	orrs	r3, r2
1000e736:	3014      	adds	r0, #20
1000e738:	3114      	adds	r1, #20
1000e73a:	2208      	movs	r2, #8
1000e73c:	826b      	strh	r3, [r5, #18]
1000e73e:	47b0      	blx	r6
1000e740:	7f23      	ldrb	r3, [r4, #28]
1000e742:	772b      	strb	r3, [r5, #28]
1000e744:	2000      	movs	r0, #0
1000e746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e748:	10015354 	.word	0x10015354
1000e74c:	1001169b 	.word	0x1001169b
1000e750:	100116ad 	.word	0x100116ad

1000e754 <gapc_bond_req_ind>:
1000e754:	b570      	push	{r4, r5, r6, lr}
1000e756:	780c      	ldrb	r4, [r1, #0]
1000e758:	1c03      	adds	r3, r0, #0
1000e75a:	7849      	ldrb	r1, [r1, #1]
1000e75c:	2c07      	cmp	r4, #7
1000e75e:	d85c      	bhi.n	1000e81a <gapc_bond_req_ind+0xc6>
1000e760:	1c20      	adds	r0, r4, #0
1000e762:	f001 fa7f 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000e766:	5a04      	.short	0x5a04
1000e768:	5a0b5a5a 	.word	0x5a0b5a5a
1000e76c:	1f1f      	.short	0x1f1f
1000e76e:	200a      	movs	r0, #10
1000e770:	2a00      	cmp	r2, #0
1000e772:	d053      	beq.n	1000e81c <gapc_bond_req_ind+0xc8>
1000e774:	0a1b      	lsrs	r3, r3, #8
1000e776:	8013      	strh	r3, [r2, #0]
1000e778:	7091      	strb	r1, [r2, #2]
1000e77a:	e04f      	b.n	1000e81c <gapc_bond_req_ind+0xc8>
1000e77c:	2a00      	cmp	r2, #0
1000e77e:	d00b      	beq.n	1000e798 <gapc_bond_req_ind+0x44>
1000e780:	0a1b      	lsrs	r3, r3, #8
1000e782:	8013      	strh	r3, [r2, #0]
1000e784:	2900      	cmp	r1, #0
1000e786:	d102      	bne.n	1000e78e <gapc_bond_req_ind+0x3a>
1000e788:	2301      	movs	r3, #1
1000e78a:	7093      	strb	r3, [r2, #2]
1000e78c:	e004      	b.n	1000e798 <gapc_bond_req_ind+0x44>
1000e78e:	2300      	movs	r3, #0
1000e790:	7093      	strb	r3, [r2, #2]
1000e792:	2902      	cmp	r1, #2
1000e794:	d102      	bne.n	1000e79c <gapc_bond_req_ind+0x48>
1000e796:	70d3      	strb	r3, [r2, #3]
1000e798:	200c      	movs	r0, #12
1000e79a:	e03f      	b.n	1000e81c <gapc_bond_req_ind+0xc8>
1000e79c:	2901      	cmp	r1, #1
1000e79e:	d1fb      	bne.n	1000e798 <gapc_bond_req_ind+0x44>
1000e7a0:	70d1      	strb	r1, [r2, #3]
1000e7a2:	e7f9      	b.n	1000e798 <gapc_bond_req_ind+0x44>
1000e7a4:	2214      	movs	r2, #20
1000e7a6:	481e      	ldr	r0, [pc, #120]	; (1000e820 <gapc_bond_req_ind+0xcc>)
1000e7a8:	0a1b      	lsrs	r3, r3, #8
1000e7aa:	70c3      	strb	r3, [r0, #3]
1000e7ac:	4b1d      	ldr	r3, [pc, #116]	; (1000e824 <gapc_bond_req_ind+0xd0>)
1000e7ae:	7002      	strb	r2, [r0, #0]
1000e7b0:	3a06      	subs	r2, #6
1000e7b2:	7042      	strb	r2, [r0, #1]
1000e7b4:	7082      	strb	r2, [r0, #2]
1000e7b6:	881a      	ldrh	r2, [r3, #0]
1000e7b8:	881b      	ldrh	r3, [r3, #0]
1000e7ba:	4e1b      	ldr	r6, [pc, #108]	; (1000e828 <gapc_bond_req_ind+0xd4>)
1000e7bc:	0a1b      	lsrs	r3, r3, #8
1000e7be:	7143      	strb	r3, [r0, #5]
1000e7c0:	2301      	movs	r3, #1
1000e7c2:	7102      	strb	r2, [r0, #4]
1000e7c4:	7204      	strb	r4, [r0, #8]
1000e7c6:	7243      	strb	r3, [r0, #9]
1000e7c8:	1c05      	adds	r5, r0, #0
1000e7ca:	1c31      	adds	r1, r6, #0
1000e7cc:	300a      	adds	r0, #10
1000e7ce:	2c07      	cmp	r4, #7
1000e7d0:	d116      	bne.n	1000e800 <gapc_bond_req_ind+0xac>
1000e7d2:	317e      	adds	r1, #126	; 0x7e
1000e7d4:	2210      	movs	r2, #16
1000e7d6:	4c15      	ldr	r4, [pc, #84]	; (1000e82c <gapc_bond_req_ind+0xd8>)
1000e7d8:	47a0      	blx	r4
1000e7da:	1c33      	adds	r3, r6, #0
1000e7dc:	1c31      	adds	r1, r6, #0
1000e7de:	1c28      	adds	r0, r5, #0
1000e7e0:	338e      	adds	r3, #142	; 0x8e
1000e7e2:	881b      	ldrh	r3, [r3, #0]
1000e7e4:	3190      	adds	r1, #144	; 0x90
1000e7e6:	76ab      	strb	r3, [r5, #26]
1000e7e8:	2208      	movs	r2, #8
1000e7ea:	0a1b      	lsrs	r3, r3, #8
1000e7ec:	301c      	adds	r0, #28
1000e7ee:	76eb      	strb	r3, [r5, #27]
1000e7f0:	47a0      	blx	r4
1000e7f2:	1c31      	adds	r1, r6, #0
1000e7f4:	3198      	adds	r1, #152	; 0x98
1000e7f6:	780a      	ldrb	r2, [r1, #0]
1000e7f8:	1d6b      	adds	r3, r5, #5
1000e7fa:	77da      	strb	r2, [r3, #31]
1000e7fc:	2125      	movs	r1, #37	; 0x25
1000e7fe:	e004      	b.n	1000e80a <gapc_bond_req_ind+0xb6>
1000e800:	319a      	adds	r1, #154	; 0x9a
1000e802:	2210      	movs	r2, #16
1000e804:	4b09      	ldr	r3, [pc, #36]	; (1000e82c <gapc_bond_req_ind+0xd8>)
1000e806:	4798      	blx	r3
1000e808:	211a      	movs	r1, #26
1000e80a:	1c0b      	adds	r3, r1, #0
1000e80c:	2400      	movs	r4, #0
1000e80e:	3b08      	subs	r3, #8
1000e810:	71ab      	strb	r3, [r5, #6]
1000e812:	1c28      	adds	r0, r5, #0
1000e814:	4b06      	ldr	r3, [pc, #24]	; (1000e830 <gapc_bond_req_ind+0xdc>)
1000e816:	71ec      	strb	r4, [r5, #7]
1000e818:	4798      	blx	r3
1000e81a:	2000      	movs	r0, #0
1000e81c:	bd70      	pop	{r4, r5, r6, pc}
1000e81e:	46c0      	nop			; (mov r8, r8)
1000e820:	100163ec 	.word	0x100163ec
1000e824:	1001607c 	.word	0x1001607c
1000e828:	1001610e 	.word	0x1001610e
1000e82c:	1001169b 	.word	0x1001169b
1000e830:	1000e0f5 	.word	0x1000e0f5

1000e834 <gapc_bond_cfm_handler_pair_resp>:
1000e834:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e836:	b085      	sub	sp, #20
1000e838:	1c07      	adds	r7, r0, #0
1000e83a:	a80a      	add	r0, sp, #40	; 0x28
1000e83c:	7806      	ldrb	r6, [r0, #0]
1000e83e:	a80b      	add	r0, sp, #44	; 0x2c
1000e840:	7805      	ldrb	r5, [r0, #0]
1000e842:	a80c      	add	r0, sp, #48	; 0x30
1000e844:	7800      	ldrb	r0, [r0, #0]
1000e846:	2414      	movs	r4, #20
1000e848:	9002      	str	r0, [sp, #8]
1000e84a:	a80d      	add	r0, sp, #52	; 0x34
1000e84c:	7800      	ldrb	r0, [r0, #0]
1000e84e:	9301      	str	r3, [sp, #4]
1000e850:	9003      	str	r0, [sp, #12]
1000e852:	a80e      	add	r0, sp, #56	; 0x38
1000e854:	8800      	ldrh	r0, [r0, #0]
1000e856:	4684      	mov	ip, r0
1000e858:	4812      	ldr	r0, [pc, #72]	; (1000e8a4 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000e85a:	7004      	strb	r4, [r0, #0]
1000e85c:	3c06      	subs	r4, #6
1000e85e:	7044      	strb	r4, [r0, #1]
1000e860:	7084      	strb	r4, [r0, #2]
1000e862:	4664      	mov	r4, ip
1000e864:	70c4      	strb	r4, [r0, #3]
1000e866:	4c10      	ldr	r4, [pc, #64]	; (1000e8a8 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000e868:	7247      	strb	r7, [r0, #9]
1000e86a:	8823      	ldrh	r3, [r4, #0]
1000e86c:	8824      	ldrh	r4, [r4, #0]
1000e86e:	7103      	strb	r3, [r0, #4]
1000e870:	466b      	mov	r3, sp
1000e872:	791b      	ldrb	r3, [r3, #4]
1000e874:	0a24      	lsrs	r4, r4, #8
1000e876:	7303      	strb	r3, [r0, #12]
1000e878:	466b      	mov	r3, sp
1000e87a:	7a1b      	ldrb	r3, [r3, #8]
1000e87c:	7144      	strb	r4, [r0, #5]
1000e87e:	73c3      	strb	r3, [r0, #15]
1000e880:	466b      	mov	r3, sp
1000e882:	7b1b      	ldrb	r3, [r3, #12]
1000e884:	2401      	movs	r4, #1
1000e886:	7403      	strb	r3, [r0, #16]
1000e888:	2309      	movs	r3, #9
1000e88a:	7183      	strb	r3, [r0, #6]
1000e88c:	2300      	movs	r3, #0
1000e88e:	7204      	strb	r4, [r0, #8]
1000e890:	7281      	strb	r1, [r0, #10]
1000e892:	72c2      	strb	r2, [r0, #11]
1000e894:	7346      	strb	r6, [r0, #13]
1000e896:	7385      	strb	r5, [r0, #14]
1000e898:	71c3      	strb	r3, [r0, #7]
1000e89a:	2111      	movs	r1, #17
1000e89c:	4b03      	ldr	r3, [pc, #12]	; (1000e8ac <gapc_bond_cfm_handler_pair_resp+0x78>)
1000e89e:	4798      	blx	r3
1000e8a0:	b005      	add	sp, #20
1000e8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e8a4:	100163ec 	.word	0x100163ec
1000e8a8:	1001607c 	.word	0x1001607c
1000e8ac:	1000e0f5 	.word	0x1000e0f5

1000e8b0 <gapc_bond_cfm_handler_key_exch>:
1000e8b0:	b538      	push	{r3, r4, r5, lr}
1000e8b2:	2514      	movs	r5, #20
1000e8b4:	4c0d      	ldr	r4, [pc, #52]	; (1000e8ec <gapc_bond_cfm_handler_key_exch+0x3c>)
1000e8b6:	70e3      	strb	r3, [r4, #3]
1000e8b8:	4b0d      	ldr	r3, [pc, #52]	; (1000e8f0 <gapc_bond_cfm_handler_key_exch+0x40>)
1000e8ba:	7025      	strb	r5, [r4, #0]
1000e8bc:	3d06      	subs	r5, #6
1000e8be:	7065      	strb	r5, [r4, #1]
1000e8c0:	70a5      	strb	r5, [r4, #2]
1000e8c2:	881d      	ldrh	r5, [r3, #0]
1000e8c4:	881b      	ldrh	r3, [r3, #0]
1000e8c6:	7220      	strb	r0, [r4, #8]
1000e8c8:	0a1b      	lsrs	r3, r3, #8
1000e8ca:	7163      	strb	r3, [r4, #5]
1000e8cc:	7261      	strb	r1, [r4, #9]
1000e8ce:	4b09      	ldr	r3, [pc, #36]	; (1000e8f4 <gapc_bond_cfm_handler_key_exch+0x44>)
1000e8d0:	1c11      	adds	r1, r2, #0
1000e8d2:	4809      	ldr	r0, [pc, #36]	; (1000e8f8 <gapc_bond_cfm_handler_key_exch+0x48>)
1000e8d4:	2210      	movs	r2, #16
1000e8d6:	7125      	strb	r5, [r4, #4]
1000e8d8:	4798      	blx	r3
1000e8da:	2312      	movs	r3, #18
1000e8dc:	71a3      	strb	r3, [r4, #6]
1000e8de:	2300      	movs	r3, #0
1000e8e0:	1c20      	adds	r0, r4, #0
1000e8e2:	71e3      	strb	r3, [r4, #7]
1000e8e4:	211a      	movs	r1, #26
1000e8e6:	4b05      	ldr	r3, [pc, #20]	; (1000e8fc <gapc_bond_cfm_handler_key_exch+0x4c>)
1000e8e8:	4798      	blx	r3
1000e8ea:	bd38      	pop	{r3, r4, r5, pc}
1000e8ec:	100163ec 	.word	0x100163ec
1000e8f0:	1001607c 	.word	0x1001607c
1000e8f4:	1001169b 	.word	0x1001169b
1000e8f8:	100163f6 	.word	0x100163f6
1000e8fc:	1000e0f5 	.word	0x1000e0f5

1000e900 <gapc_security_cmd_handler>:
1000e900:	221a      	movs	r2, #26
1000e902:	b508      	push	{r3, lr}
1000e904:	4b0b      	ldr	r3, [pc, #44]	; (1000e934 <gapc_security_cmd_handler+0x34>)
1000e906:	701a      	strb	r2, [r3, #0]
1000e908:	3a0c      	subs	r2, #12
1000e90a:	705a      	strb	r2, [r3, #1]
1000e90c:	709a      	strb	r2, [r3, #2]
1000e90e:	4a0a      	ldr	r2, [pc, #40]	; (1000e938 <gapc_security_cmd_handler+0x38>)
1000e910:	70d8      	strb	r0, [r3, #3]
1000e912:	8810      	ldrh	r0, [r2, #0]
1000e914:	8812      	ldrh	r2, [r2, #0]
1000e916:	7118      	strb	r0, [r3, #4]
1000e918:	0a12      	lsrs	r2, r2, #8
1000e91a:	715a      	strb	r2, [r3, #5]
1000e91c:	220c      	movs	r2, #12
1000e91e:	721a      	strb	r2, [r3, #8]
1000e920:	3a0a      	subs	r2, #10
1000e922:	719a      	strb	r2, [r3, #6]
1000e924:	2200      	movs	r2, #0
1000e926:	7259      	strb	r1, [r3, #9]
1000e928:	71da      	strb	r2, [r3, #7]
1000e92a:	1c18      	adds	r0, r3, #0
1000e92c:	210a      	movs	r1, #10
1000e92e:	4b03      	ldr	r3, [pc, #12]	; (1000e93c <gapc_security_cmd_handler+0x3c>)
1000e930:	4798      	blx	r3
1000e932:	bd08      	pop	{r3, pc}
1000e934:	100163ec 	.word	0x100163ec
1000e938:	1001607c 	.word	0x1001607c
1000e93c:	1000e0f5 	.word	0x1000e0f5

1000e940 <gapc_encrypt_cmd_handler>:
1000e940:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e942:	2500      	movs	r5, #0
1000e944:	b089      	sub	sp, #36	; 0x24
1000e946:	9306      	str	r3, [sp, #24]
1000e948:	ab0e      	add	r3, sp, #56	; 0x38
1000e94a:	781b      	ldrb	r3, [r3, #0]
1000e94c:	1c17      	adds	r7, r2, #0
1000e94e:	9307      	str	r3, [sp, #28]
1000e950:	ab0f      	add	r3, sp, #60	; 0x3c
1000e952:	781b      	ldrb	r3, [r3, #0]
1000e954:	4a19      	ldr	r2, [pc, #100]	; (1000e9bc <gapc_encrypt_cmd_handler+0x7c>)
1000e956:	1c06      	adds	r6, r0, #0
1000e958:	9105      	str	r1, [sp, #20]
1000e95a:	9300      	str	r3, [sp, #0]
1000e95c:	9002      	str	r0, [sp, #8]
1000e95e:	1c29      	adds	r1, r5, #0
1000e960:	1c2b      	adds	r3, r5, #0
1000e962:	9501      	str	r5, [sp, #4]
1000e964:	1c10      	adds	r0, r2, #0
1000e966:	4c16      	ldr	r4, [pc, #88]	; (1000e9c0 <gapc_encrypt_cmd_handler+0x80>)
1000e968:	47a0      	blx	r4
1000e96a:	2316      	movs	r3, #22
1000e96c:	4c15      	ldr	r4, [pc, #84]	; (1000e9c4 <gapc_encrypt_cmd_handler+0x84>)
1000e96e:	9905      	ldr	r1, [sp, #20]
1000e970:	7023      	strb	r3, [r4, #0]
1000e972:	3b08      	subs	r3, #8
1000e974:	7063      	strb	r3, [r4, #1]
1000e976:	70a3      	strb	r3, [r4, #2]
1000e978:	4b13      	ldr	r3, [pc, #76]	; (1000e9c8 <gapc_encrypt_cmd_handler+0x88>)
1000e97a:	70e6      	strb	r6, [r4, #3]
1000e97c:	881a      	ldrh	r2, [r3, #0]
1000e97e:	881b      	ldrh	r3, [r3, #0]
1000e980:	7122      	strb	r2, [r4, #4]
1000e982:	0a1b      	lsrs	r3, r3, #8
1000e984:	7163      	strb	r3, [r4, #5]
1000e986:	230b      	movs	r3, #11
1000e988:	4e10      	ldr	r6, [pc, #64]	; (1000e9cc <gapc_encrypt_cmd_handler+0x8c>)
1000e98a:	2210      	movs	r2, #16
1000e98c:	4810      	ldr	r0, [pc, #64]	; (1000e9d0 <gapc_encrypt_cmd_handler+0x90>)
1000e98e:	7223      	strb	r3, [r4, #8]
1000e990:	7265      	strb	r5, [r4, #9]
1000e992:	47b0      	blx	r6
1000e994:	0a3b      	lsrs	r3, r7, #8
1000e996:	9906      	ldr	r1, [sp, #24]
1000e998:	2208      	movs	r2, #8
1000e99a:	480e      	ldr	r0, [pc, #56]	; (1000e9d4 <gapc_encrypt_cmd_handler+0x94>)
1000e99c:	76e3      	strb	r3, [r4, #27]
1000e99e:	76a7      	strb	r7, [r4, #26]
1000e9a0:	47b0      	blx	r6
1000e9a2:	466a      	mov	r2, sp
1000e9a4:	7f12      	ldrb	r2, [r2, #28]
1000e9a6:	1d63      	adds	r3, r4, #5
1000e9a8:	77da      	strb	r2, [r3, #31]
1000e9aa:	231d      	movs	r3, #29
1000e9ac:	1c20      	adds	r0, r4, #0
1000e9ae:	71a3      	strb	r3, [r4, #6]
1000e9b0:	2125      	movs	r1, #37	; 0x25
1000e9b2:	4b09      	ldr	r3, [pc, #36]	; (1000e9d8 <gapc_encrypt_cmd_handler+0x98>)
1000e9b4:	71e5      	strb	r5, [r4, #7]
1000e9b6:	4798      	blx	r3
1000e9b8:	b009      	add	sp, #36	; 0x24
1000e9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e9bc:	10015334 	.word	0x10015334
1000e9c0:	1000e3f9 	.word	0x1000e3f9
1000e9c4:	100163ec 	.word	0x100163ec
1000e9c8:	1001607c 	.word	0x1001607c
1000e9cc:	1001169b 	.word	0x1001169b
1000e9d0:	100163f6 	.word	0x100163f6
1000e9d4:	10016408 	.word	0x10016408
1000e9d8:	1000e0f5 	.word	0x1000e0f5

1000e9dc <gapc_encrypt_req_ind>:
1000e9dc:	b508      	push	{r3, lr}
1000e9de:	0a00      	lsrs	r0, r0, #8
1000e9e0:	8010      	strh	r0, [r2, #0]
1000e9e2:	784b      	ldrb	r3, [r1, #1]
1000e9e4:	7808      	ldrb	r0, [r1, #0]
1000e9e6:	021b      	lsls	r3, r3, #8
1000e9e8:	4303      	orrs	r3, r0
1000e9ea:	8053      	strh	r3, [r2, #2]
1000e9ec:	1d10      	adds	r0, r2, #4
1000e9ee:	3102      	adds	r1, #2
1000e9f0:	2208      	movs	r2, #8
1000e9f2:	4b01      	ldr	r3, [pc, #4]	; (1000e9f8 <gapc_encrypt_req_ind+0x1c>)
1000e9f4:	4798      	blx	r3
1000e9f6:	bd08      	pop	{r3, pc}
1000e9f8:	1001169b 	.word	0x1001169b

1000e9fc <gapc_encrypt_cfm_handler>:
1000e9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e9fe:	2500      	movs	r5, #0
1000ea00:	b087      	sub	sp, #28
1000ea02:	9304      	str	r3, [sp, #16]
1000ea04:	ab0c      	add	r3, sp, #48	; 0x30
1000ea06:	781b      	ldrb	r3, [r3, #0]
1000ea08:	1c17      	adds	r7, r2, #0
1000ea0a:	4a15      	ldr	r2, [pc, #84]	; (1000ea60 <gapc_encrypt_cfm_handler+0x64>)
1000ea0c:	1c06      	adds	r6, r0, #0
1000ea0e:	9305      	str	r3, [sp, #20]
1000ea10:	9100      	str	r1, [sp, #0]
1000ea12:	9002      	str	r0, [sp, #8]
1000ea14:	1c29      	adds	r1, r5, #0
1000ea16:	1c2b      	adds	r3, r5, #0
1000ea18:	9501      	str	r5, [sp, #4]
1000ea1a:	1c10      	adds	r0, r2, #0
1000ea1c:	4c11      	ldr	r4, [pc, #68]	; (1000ea64 <gapc_encrypt_cfm_handler+0x68>)
1000ea1e:	47a0      	blx	r4
1000ea20:	2318      	movs	r3, #24
1000ea22:	4c11      	ldr	r4, [pc, #68]	; (1000ea68 <gapc_encrypt_cfm_handler+0x6c>)
1000ea24:	9904      	ldr	r1, [sp, #16]
1000ea26:	7023      	strb	r3, [r4, #0]
1000ea28:	3b0a      	subs	r3, #10
1000ea2a:	7063      	strb	r3, [r4, #1]
1000ea2c:	70a3      	strb	r3, [r4, #2]
1000ea2e:	4b0f      	ldr	r3, [pc, #60]	; (1000ea6c <gapc_encrypt_cfm_handler+0x70>)
1000ea30:	480f      	ldr	r0, [pc, #60]	; (1000ea70 <gapc_encrypt_cfm_handler+0x74>)
1000ea32:	881a      	ldrh	r2, [r3, #0]
1000ea34:	881b      	ldrh	r3, [r3, #0]
1000ea36:	7122      	strb	r2, [r4, #4]
1000ea38:	0a1b      	lsrs	r3, r3, #8
1000ea3a:	7163      	strb	r3, [r4, #5]
1000ea3c:	2210      	movs	r2, #16
1000ea3e:	4b0d      	ldr	r3, [pc, #52]	; (1000ea74 <gapc_encrypt_cfm_handler+0x78>)
1000ea40:	70e6      	strb	r6, [r4, #3]
1000ea42:	7227      	strb	r7, [r4, #8]
1000ea44:	4798      	blx	r3
1000ea46:	466b      	mov	r3, sp
1000ea48:	7d1b      	ldrb	r3, [r3, #20]
1000ea4a:	1c20      	adds	r0, r4, #0
1000ea4c:	7663      	strb	r3, [r4, #25]
1000ea4e:	2312      	movs	r3, #18
1000ea50:	211a      	movs	r1, #26
1000ea52:	71a3      	strb	r3, [r4, #6]
1000ea54:	4b08      	ldr	r3, [pc, #32]	; (1000ea78 <gapc_encrypt_cfm_handler+0x7c>)
1000ea56:	71e5      	strb	r5, [r4, #7]
1000ea58:	4798      	blx	r3
1000ea5a:	b007      	add	sp, #28
1000ea5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea5e:	46c0      	nop			; (mov r8, r8)
1000ea60:	10015344 	.word	0x10015344
1000ea64:	1000e3f9 	.word	0x1000e3f9
1000ea68:	100163ec 	.word	0x100163ec
1000ea6c:	1001607c 	.word	0x1001607c
1000ea70:	100163f5 	.word	0x100163f5
1000ea74:	1001169b 	.word	0x1001169b
1000ea78:	1000e0f5 	.word	0x1000e0f5

1000ea7c <gapc_encrypt_ind>:
1000ea7c:	780b      	ldrb	r3, [r1, #0]
1000ea7e:	0a00      	lsrs	r0, r0, #8
1000ea80:	70d3      	strb	r3, [r2, #3]
1000ea82:	2300      	movs	r3, #0
1000ea84:	8010      	strh	r0, [r2, #0]
1000ea86:	7093      	strb	r3, [r2, #2]
1000ea88:	4770      	bx	lr
	...

1000ea8c <gapc_param_update_cfm_handler>:
1000ea8c:	b538      	push	{r3, r4, r5, lr}
1000ea8e:	2410      	movs	r4, #16
1000ea90:	1c05      	adds	r5, r0, #0
1000ea92:	480e      	ldr	r0, [pc, #56]	; (1000eacc <gapc_param_update_cfm_handler+0x40>)
1000ea94:	7004      	strb	r4, [r0, #0]
1000ea96:	3c02      	subs	r4, #2
1000ea98:	7044      	strb	r4, [r0, #1]
1000ea9a:	7084      	strb	r4, [r0, #2]
1000ea9c:	4c0c      	ldr	r4, [pc, #48]	; (1000ead0 <gapc_param_update_cfm_handler+0x44>)
1000ea9e:	70c5      	strb	r5, [r0, #3]
1000eaa0:	8825      	ldrh	r5, [r4, #0]
1000eaa2:	8824      	ldrh	r4, [r4, #0]
1000eaa4:	72c3      	strb	r3, [r0, #11]
1000eaa6:	0a1b      	lsrs	r3, r3, #8
1000eaa8:	0a24      	lsrs	r4, r4, #8
1000eaaa:	7303      	strb	r3, [r0, #12]
1000eaac:	2305      	movs	r3, #5
1000eaae:	7144      	strb	r4, [r0, #5]
1000eab0:	2400      	movs	r4, #0
1000eab2:	7201      	strb	r1, [r0, #8]
1000eab4:	7242      	strb	r2, [r0, #9]
1000eab6:	7183      	strb	r3, [r0, #6]
1000eab8:	0a12      	lsrs	r2, r2, #8
1000eaba:	210d      	movs	r1, #13
1000eabc:	4b05      	ldr	r3, [pc, #20]	; (1000ead4 <gapc_param_update_cfm_handler+0x48>)
1000eabe:	7105      	strb	r5, [r0, #4]
1000eac0:	7282      	strb	r2, [r0, #10]
1000eac2:	71c4      	strb	r4, [r0, #7]
1000eac4:	4798      	blx	r3
1000eac6:	1c20      	adds	r0, r4, #0
1000eac8:	bd38      	pop	{r3, r4, r5, pc}
1000eaca:	46c0      	nop			; (mov r8, r8)
1000eacc:	100163ec 	.word	0x100163ec
1000ead0:	1001607c 	.word	0x1001607c
1000ead4:	1000e0f5 	.word	0x1000e0f5

1000ead8 <gapc_param_updated_ind>:
1000ead8:	2300      	movs	r3, #0
1000eada:	0a00      	lsrs	r0, r0, #8
1000eadc:	8010      	strh	r0, [r2, #0]
1000eade:	7093      	strb	r3, [r2, #2]
1000eae0:	784b      	ldrb	r3, [r1, #1]
1000eae2:	7808      	ldrb	r0, [r1, #0]
1000eae4:	021b      	lsls	r3, r3, #8
1000eae6:	4303      	orrs	r3, r0
1000eae8:	8093      	strh	r3, [r2, #4]
1000eaea:	78cb      	ldrb	r3, [r1, #3]
1000eaec:	7888      	ldrb	r0, [r1, #2]
1000eaee:	021b      	lsls	r3, r3, #8
1000eaf0:	4303      	orrs	r3, r0
1000eaf2:	80d3      	strh	r3, [r2, #6]
1000eaf4:	794b      	ldrb	r3, [r1, #5]
1000eaf6:	7909      	ldrb	r1, [r1, #4]
1000eaf8:	021b      	lsls	r3, r3, #8
1000eafa:	430b      	orrs	r3, r1
1000eafc:	2007      	movs	r0, #7
1000eafe:	8113      	strh	r3, [r2, #8]
1000eb00:	4770      	bx	lr

1000eb02 <gapc_param_updated_req_ind>:
1000eb02:	0a00      	lsrs	r0, r0, #8
1000eb04:	8010      	strh	r0, [r2, #0]
1000eb06:	784b      	ldrb	r3, [r1, #1]
1000eb08:	7808      	ldrb	r0, [r1, #0]
1000eb0a:	021b      	lsls	r3, r3, #8
1000eb0c:	4303      	orrs	r3, r0
1000eb0e:	8053      	strh	r3, [r2, #2]
1000eb10:	78cb      	ldrb	r3, [r1, #3]
1000eb12:	7888      	ldrb	r0, [r1, #2]
1000eb14:	021b      	lsls	r3, r3, #8
1000eb16:	4303      	orrs	r3, r0
1000eb18:	8093      	strh	r3, [r2, #4]
1000eb1a:	794b      	ldrb	r3, [r1, #5]
1000eb1c:	7908      	ldrb	r0, [r1, #4]
1000eb1e:	021b      	lsls	r3, r3, #8
1000eb20:	4303      	orrs	r3, r0
1000eb22:	80d3      	strh	r3, [r2, #6]
1000eb24:	79cb      	ldrb	r3, [r1, #7]
1000eb26:	7989      	ldrb	r1, [r1, #6]
1000eb28:	021b      	lsls	r3, r3, #8
1000eb2a:	430b      	orrs	r3, r1
1000eb2c:	2008      	movs	r0, #8
1000eb2e:	8113      	strh	r3, [r2, #8]
1000eb30:	4770      	bx	lr
	...

1000eb34 <gapc_dev_info_req_ind_handler>:
1000eb34:	b508      	push	{r3, lr}
1000eb36:	1c0b      	adds	r3, r1, #0
1000eb38:	0a01      	lsrs	r1, r0, #8
1000eb3a:	8011      	strh	r1, [r2, #0]
1000eb3c:	7818      	ldrb	r0, [r3, #0]
1000eb3e:	7090      	strb	r0, [r2, #2]
1000eb40:	2800      	cmp	r0, #0
1000eb42:	d104      	bne.n	1000eb4e <gapc_dev_info_req_ind_handler+0x1a>
1000eb44:	4b03      	ldr	r3, [pc, #12]	; (1000eb54 <gapc_dev_info_req_ind_handler+0x20>)
1000eb46:	33aa      	adds	r3, #170	; 0xaa
1000eb48:	881b      	ldrh	r3, [r3, #0]
1000eb4a:	2b00      	cmp	r3, #0
1000eb4c:	d001      	beq.n	1000eb52 <gapc_dev_info_req_ind_handler+0x1e>
1000eb4e:	4b02      	ldr	r3, [pc, #8]	; (1000eb58 <gapc_dev_info_req_ind_handler+0x24>)
1000eb50:	4798      	blx	r3
1000eb52:	bd08      	pop	{r3, pc}
1000eb54:	1001610e 	.word	0x1001610e
1000eb58:	1000e205 	.word	0x1000e205

1000eb5c <gapc_sec_req_ind>:
1000eb5c:	0a00      	lsrs	r0, r0, #8
1000eb5e:	8010      	strh	r0, [r2, #0]
1000eb60:	7809      	ldrb	r1, [r1, #0]
1000eb62:	2301      	movs	r3, #1
1000eb64:	1c08      	adds	r0, r1, #0
1000eb66:	0889      	lsrs	r1, r1, #2
1000eb68:	4018      	ands	r0, r3
1000eb6a:	400b      	ands	r3, r1
1000eb6c:	70d0      	strb	r0, [r2, #3]
1000eb6e:	7113      	strb	r3, [r2, #4]
1000eb70:	4770      	bx	lr

1000eb72 <gapc_sign_counter_ind_handler>:
1000eb72:	0a00      	lsrs	r0, r0, #8
1000eb74:	8010      	strh	r0, [r2, #0]
1000eb76:	784b      	ldrb	r3, [r1, #1]
1000eb78:	0218      	lsls	r0, r3, #8
1000eb7a:	788b      	ldrb	r3, [r1, #2]
1000eb7c:	041b      	lsls	r3, r3, #16
1000eb7e:	4303      	orrs	r3, r0
1000eb80:	7808      	ldrb	r0, [r1, #0]
1000eb82:	4303      	orrs	r3, r0
1000eb84:	78c8      	ldrb	r0, [r1, #3]
1000eb86:	0600      	lsls	r0, r0, #24
1000eb88:	4303      	orrs	r3, r0
1000eb8a:	6053      	str	r3, [r2, #4]
1000eb8c:	794b      	ldrb	r3, [r1, #5]
1000eb8e:	0218      	lsls	r0, r3, #8
1000eb90:	798b      	ldrb	r3, [r1, #6]
1000eb92:	041b      	lsls	r3, r3, #16
1000eb94:	4303      	orrs	r3, r0
1000eb96:	7908      	ldrb	r0, [r1, #4]
1000eb98:	79c9      	ldrb	r1, [r1, #7]
1000eb9a:	4303      	orrs	r3, r0
1000eb9c:	0609      	lsls	r1, r1, #24
1000eb9e:	430b      	orrs	r3, r1
1000eba0:	2000      	movs	r0, #0
1000eba2:	6093      	str	r3, [r2, #8]
1000eba4:	4770      	bx	lr
	...

1000eba8 <gapc_peer_att_info_ind_handler>:
1000eba8:	b510      	push	{r4, lr}
1000ebaa:	0a00      	lsrs	r0, r0, #8
1000ebac:	8010      	strh	r0, [r2, #0]
1000ebae:	7808      	ldrb	r0, [r1, #0]
1000ebb0:	7090      	strb	r0, [r2, #2]
1000ebb2:	788b      	ldrb	r3, [r1, #2]
1000ebb4:	784c      	ldrb	r4, [r1, #1]
1000ebb6:	021b      	lsls	r3, r3, #8
1000ebb8:	4323      	orrs	r3, r4
1000ebba:	8093      	strh	r3, [r2, #4]
1000ebbc:	2801      	cmp	r0, #1
1000ebbe:	d027      	beq.n	1000ec10 <gapc_peer_att_info_ind_handler+0x68>
1000ebc0:	2800      	cmp	r0, #0
1000ebc2:	d017      	beq.n	1000ebf4 <gapc_peer_att_info_ind_handler+0x4c>
1000ebc4:	2802      	cmp	r0, #2
1000ebc6:	d12a      	bne.n	1000ec1e <gapc_peer_att_info_ind_handler+0x76>
1000ebc8:	790b      	ldrb	r3, [r1, #4]
1000ebca:	78c8      	ldrb	r0, [r1, #3]
1000ebcc:	021b      	lsls	r3, r3, #8
1000ebce:	4303      	orrs	r3, r0
1000ebd0:	8113      	strh	r3, [r2, #8]
1000ebd2:	798b      	ldrb	r3, [r1, #6]
1000ebd4:	7948      	ldrb	r0, [r1, #5]
1000ebd6:	021b      	lsls	r3, r3, #8
1000ebd8:	4303      	orrs	r3, r0
1000ebda:	80d3      	strh	r3, [r2, #6]
1000ebdc:	7a0b      	ldrb	r3, [r1, #8]
1000ebde:	79c8      	ldrb	r0, [r1, #7]
1000ebe0:	021b      	lsls	r3, r3, #8
1000ebe2:	4303      	orrs	r3, r0
1000ebe4:	8193      	strh	r3, [r2, #12]
1000ebe6:	7a8b      	ldrb	r3, [r1, #10]
1000ebe8:	7a49      	ldrb	r1, [r1, #9]
1000ebea:	021b      	lsls	r3, r3, #8
1000ebec:	430b      	orrs	r3, r1
1000ebee:	8153      	strh	r3, [r2, #10]
1000ebf0:	2306      	movs	r3, #6
1000ebf2:	e013      	b.n	1000ec1c <gapc_peer_att_info_ind_handler+0x74>
1000ebf4:	1c14      	adds	r4, r2, #0
1000ebf6:	1c20      	adds	r0, r4, #0
1000ebf8:	790a      	ldrb	r2, [r1, #4]
1000ebfa:	78cb      	ldrb	r3, [r1, #3]
1000ebfc:	0212      	lsls	r2, r2, #8
1000ebfe:	431a      	orrs	r2, r3
1000ec00:	80e2      	strh	r2, [r4, #6]
1000ec02:	4b07      	ldr	r3, [pc, #28]	; (1000ec20 <gapc_peer_att_info_ind_handler+0x78>)
1000ec04:	3008      	adds	r0, #8
1000ec06:	3105      	adds	r1, #5
1000ec08:	4798      	blx	r3
1000ec0a:	2302      	movs	r3, #2
1000ec0c:	70a3      	strb	r3, [r4, #2]
1000ec0e:	e006      	b.n	1000ec1e <gapc_peer_att_info_ind_handler+0x76>
1000ec10:	790b      	ldrb	r3, [r1, #4]
1000ec12:	78c9      	ldrb	r1, [r1, #3]
1000ec14:	021b      	lsls	r3, r3, #8
1000ec16:	430b      	orrs	r3, r1
1000ec18:	80d3      	strh	r3, [r2, #6]
1000ec1a:	2305      	movs	r3, #5
1000ec1c:	7093      	strb	r3, [r2, #2]
1000ec1e:	bd10      	pop	{r4, pc}
1000ec20:	1001169b 	.word	0x1001169b

1000ec24 <gapc_con_channel_map_ind_handler>:
1000ec24:	b508      	push	{r3, lr}
1000ec26:	2300      	movs	r3, #0
1000ec28:	0a00      	lsrs	r0, r0, #8
1000ec2a:	7013      	strb	r3, [r2, #0]
1000ec2c:	8050      	strh	r0, [r2, #2]
1000ec2e:	4b02      	ldr	r3, [pc, #8]	; (1000ec38 <gapc_con_channel_map_ind_handler+0x14>)
1000ec30:	1d10      	adds	r0, r2, #4
1000ec32:	2205      	movs	r2, #5
1000ec34:	4798      	blx	r3
1000ec36:	bd08      	pop	{r3, pc}
1000ec38:	1001169b 	.word	0x1001169b

1000ec3c <gapc_lecb_connected>:
1000ec3c:	7843      	ldrb	r3, [r0, #1]
1000ec3e:	7802      	ldrb	r2, [r0, #0]
1000ec40:	021b      	lsls	r3, r3, #8
1000ec42:	4313      	orrs	r3, r2
1000ec44:	800b      	strh	r3, [r1, #0]
1000ec46:	78c3      	ldrb	r3, [r0, #3]
1000ec48:	7882      	ldrb	r2, [r0, #2]
1000ec4a:	021b      	lsls	r3, r3, #8
1000ec4c:	4313      	orrs	r3, r2
1000ec4e:	804b      	strh	r3, [r1, #2]
1000ec50:	7943      	ldrb	r3, [r0, #5]
1000ec52:	7902      	ldrb	r2, [r0, #4]
1000ec54:	021b      	lsls	r3, r3, #8
1000ec56:	4313      	orrs	r3, r2
1000ec58:	808b      	strh	r3, [r1, #4]
1000ec5a:	79c3      	ldrb	r3, [r0, #7]
1000ec5c:	7982      	ldrb	r2, [r0, #6]
1000ec5e:	021b      	lsls	r3, r3, #8
1000ec60:	4313      	orrs	r3, r2
1000ec62:	80cb      	strh	r3, [r1, #6]
1000ec64:	2300      	movs	r3, #0
1000ec66:	720b      	strb	r3, [r1, #8]
1000ec68:	4770      	bx	lr

1000ec6a <gapc_lecb_disconnected>:
1000ec6a:	7843      	ldrb	r3, [r0, #1]
1000ec6c:	7802      	ldrb	r2, [r0, #0]
1000ec6e:	021b      	lsls	r3, r3, #8
1000ec70:	4313      	orrs	r3, r2
1000ec72:	800b      	strh	r3, [r1, #0]
1000ec74:	78c3      	ldrb	r3, [r0, #3]
1000ec76:	7882      	ldrb	r2, [r0, #2]
1000ec78:	021b      	lsls	r3, r3, #8
1000ec7a:	4313      	orrs	r3, r2
1000ec7c:	804b      	strh	r3, [r1, #2]
1000ec7e:	4770      	bx	lr

1000ec80 <gapc_lecb_connect_req_ind>:
1000ec80:	7843      	ldrb	r3, [r0, #1]
1000ec82:	7802      	ldrb	r2, [r0, #0]
1000ec84:	021b      	lsls	r3, r3, #8
1000ec86:	4313      	orrs	r3, r2
1000ec88:	800b      	strh	r3, [r1, #0]
1000ec8a:	78c3      	ldrb	r3, [r0, #3]
1000ec8c:	7882      	ldrb	r2, [r0, #2]
1000ec8e:	021b      	lsls	r3, r3, #8
1000ec90:	4313      	orrs	r3, r2
1000ec92:	804b      	strh	r3, [r1, #2]
1000ec94:	7943      	ldrb	r3, [r0, #5]
1000ec96:	7902      	ldrb	r2, [r0, #4]
1000ec98:	021b      	lsls	r3, r3, #8
1000ec9a:	4313      	orrs	r3, r2
1000ec9c:	808b      	strh	r3, [r1, #4]
1000ec9e:	79c3      	ldrb	r3, [r0, #7]
1000eca0:	7982      	ldrb	r2, [r0, #6]
1000eca2:	021b      	lsls	r3, r3, #8
1000eca4:	4313      	orrs	r3, r2
1000eca6:	80cb      	strh	r3, [r1, #6]
1000eca8:	4770      	bx	lr

1000ecaa <gapc_lecb_add_credit_resp_handler>:
1000ecaa:	7843      	ldrb	r3, [r0, #1]
1000ecac:	7802      	ldrb	r2, [r0, #0]
1000ecae:	021b      	lsls	r3, r3, #8
1000ecb0:	4313      	orrs	r3, r2
1000ecb2:	800b      	strh	r3, [r1, #0]
1000ecb4:	78c3      	ldrb	r3, [r0, #3]
1000ecb6:	7882      	ldrb	r2, [r0, #2]
1000ecb8:	021b      	lsls	r3, r3, #8
1000ecba:	4313      	orrs	r3, r2
1000ecbc:	804b      	strh	r3, [r1, #2]
1000ecbe:	7943      	ldrb	r3, [r0, #5]
1000ecc0:	7902      	ldrb	r2, [r0, #4]
1000ecc2:	021b      	lsls	r3, r3, #8
1000ecc4:	4313      	orrs	r3, r2
1000ecc6:	808b      	strh	r3, [r1, #4]
1000ecc8:	4770      	bx	lr
	...

1000eccc <gapm_reset_req_handler>:
1000eccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000ecce:	466b      	mov	r3, sp
1000ecd0:	4915      	ldr	r1, [pc, #84]	; (1000ed28 <gapm_reset_req_handler+0x5c>)
1000ecd2:	4816      	ldr	r0, [pc, #88]	; (1000ed2c <gapm_reset_req_handler+0x60>)
1000ecd4:	880c      	ldrh	r4, [r1, #0]
1000ecd6:	8809      	ldrh	r1, [r1, #0]
1000ecd8:	1ddd      	adds	r5, r3, #7
1000ecda:	0a09      	lsrs	r1, r1, #8
1000ecdc:	2300      	movs	r3, #0
1000ecde:	2202      	movs	r2, #2
1000ece0:	7141      	strb	r1, [r0, #5]
1000ece2:	26d0      	movs	r6, #208	; 0xd0
1000ece4:	2101      	movs	r1, #1
1000ece6:	7104      	strb	r4, [r0, #4]
1000ece8:	4c11      	ldr	r4, [pc, #68]	; (1000ed30 <gapm_reset_req_handler+0x64>)
1000ecea:	702b      	strb	r3, [r5, #0]
1000ecec:	7002      	strb	r2, [r0, #0]
1000ecee:	70c3      	strb	r3, [r0, #3]
1000ecf0:	320b      	adds	r2, #11
1000ecf2:	7201      	strb	r1, [r0, #8]
1000ecf4:	7181      	strb	r1, [r0, #6]
1000ecf6:	71c3      	strb	r3, [r0, #7]
1000ecf8:	3108      	adds	r1, #8
1000ecfa:	4b0e      	ldr	r3, [pc, #56]	; (1000ed34 <gapm_reset_req_handler+0x68>)
1000ecfc:	0136      	lsls	r6, r6, #4
1000ecfe:	7042      	strb	r2, [r0, #1]
1000ed00:	7082      	strb	r2, [r0, #2]
1000ed02:	80a2      	strh	r2, [r4, #4]
1000ed04:	8026      	strh	r6, [r4, #0]
1000ed06:	4798      	blx	r3
1000ed08:	1c28      	adds	r0, r5, #0
1000ed0a:	4b0b      	ldr	r3, [pc, #44]	; (1000ed38 <gapm_reset_req_handler+0x6c>)
1000ed0c:	4798      	blx	r3
1000ed0e:	782b      	ldrb	r3, [r5, #0]
1000ed10:	20e2      	movs	r0, #226	; 0xe2
1000ed12:	2b00      	cmp	r3, #0
1000ed14:	d106      	bne.n	1000ed24 <gapm_reset_req_handler+0x58>
1000ed16:	68a3      	ldr	r3, [r4, #8]
1000ed18:	20e2      	movs	r0, #226	; 0xe2
1000ed1a:	781a      	ldrb	r2, [r3, #0]
1000ed1c:	785b      	ldrb	r3, [r3, #1]
1000ed1e:	2a01      	cmp	r2, #1
1000ed20:	d100      	bne.n	1000ed24 <gapm_reset_req_handler+0x58>
1000ed22:	1c18      	adds	r0, r3, #0
1000ed24:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000ed26:	46c0      	nop			; (mov r8, r8)
1000ed28:	1001607c 	.word	0x1001607c
1000ed2c:	100163ec 	.word	0x100163ec
1000ed30:	10016070 	.word	0x10016070
1000ed34:	1000e0f5 	.word	0x1000e0f5
1000ed38:	1000e159 	.word	0x1000e159

1000ed3c <gapm_set_dev_config_cmd_handler>:
1000ed3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed3e:	b089      	sub	sp, #36	; 0x24
1000ed40:	9303      	str	r3, [sp, #12]
1000ed42:	ab0e      	add	r3, sp, #56	; 0x38
1000ed44:	781b      	ldrb	r3, [r3, #0]
1000ed46:	4c37      	ldr	r4, [pc, #220]	; (1000ee24 <gapm_set_dev_config_cmd_handler+0xe8>)
1000ed48:	9304      	str	r3, [sp, #16]
1000ed4a:	ab0f      	add	r3, sp, #60	; 0x3c
1000ed4c:	781b      	ldrb	r3, [r3, #0]
1000ed4e:	270d      	movs	r7, #13
1000ed50:	9305      	str	r3, [sp, #20]
1000ed52:	ab10      	add	r3, sp, #64	; 0x40
1000ed54:	881b      	ldrh	r3, [r3, #0]
1000ed56:	72a1      	strb	r1, [r4, #10]
1000ed58:	9300      	str	r3, [sp, #0]
1000ed5a:	ab11      	add	r3, sp, #68	; 0x44
1000ed5c:	881b      	ldrh	r3, [r3, #0]
1000ed5e:	0a09      	lsrs	r1, r1, #8
1000ed60:	9301      	str	r3, [sp, #4]
1000ed62:	ab12      	add	r3, sp, #72	; 0x48
1000ed64:	881b      	ldrh	r3, [r3, #0]
1000ed66:	7260      	strb	r0, [r4, #9]
1000ed68:	9302      	str	r3, [sp, #8]
1000ed6a:	ab06      	add	r3, sp, #24
1000ed6c:	1dde      	adds	r6, r3, #7
1000ed6e:	2300      	movs	r3, #0
1000ed70:	7033      	strb	r3, [r6, #0]
1000ed72:	2304      	movs	r3, #4
1000ed74:	7023      	strb	r3, [r4, #0]
1000ed76:	2300      	movs	r3, #0
1000ed78:	70e3      	strb	r3, [r4, #3]
1000ed7a:	4b2b      	ldr	r3, [pc, #172]	; (1000ee28 <gapm_set_dev_config_cmd_handler+0xec>)
1000ed7c:	72e1      	strb	r1, [r4, #11]
1000ed7e:	881d      	ldrh	r5, [r3, #0]
1000ed80:	881b      	ldrh	r3, [r3, #0]
1000ed82:	1c11      	adds	r1, r2, #0
1000ed84:	0a1b      	lsrs	r3, r3, #8
1000ed86:	7163      	strb	r3, [r4, #5]
1000ed88:	2303      	movs	r3, #3
1000ed8a:	7125      	strb	r5, [r4, #4]
1000ed8c:	2206      	movs	r2, #6
1000ed8e:	4d27      	ldr	r5, [pc, #156]	; (1000ee2c <gapm_set_dev_config_cmd_handler+0xf0>)
1000ed90:	4827      	ldr	r0, [pc, #156]	; (1000ee30 <gapm_set_dev_config_cmd_handler+0xf4>)
1000ed92:	7223      	strb	r3, [r4, #8]
1000ed94:	7067      	strb	r7, [r4, #1]
1000ed96:	70a7      	strb	r7, [r4, #2]
1000ed98:	47a8      	blx	r5
1000ed9a:	9903      	ldr	r1, [sp, #12]
1000ed9c:	2210      	movs	r2, #16
1000ed9e:	4825      	ldr	r0, [pc, #148]	; (1000ee34 <gapm_set_dev_config_cmd_handler+0xf8>)
1000eda0:	47a8      	blx	r5
1000eda2:	466a      	mov	r2, sp
1000eda4:	7c12      	ldrb	r2, [r2, #16]
1000eda6:	1ce3      	adds	r3, r4, #3
1000eda8:	77da      	strb	r2, [r3, #31]
1000edaa:	466a      	mov	r2, sp
1000edac:	7d12      	ldrb	r2, [r2, #20]
1000edae:	1d23      	adds	r3, r4, #4
1000edb0:	77da      	strb	r2, [r3, #31]
1000edb2:	466a      	mov	r2, sp
1000edb4:	7812      	ldrb	r2, [r2, #0]
1000edb6:	1d63      	adds	r3, r4, #5
1000edb8:	77da      	strb	r2, [r3, #31]
1000edba:	9b00      	ldr	r3, [sp, #0]
1000edbc:	1da2      	adds	r2, r4, #6
1000edbe:	0a1b      	lsrs	r3, r3, #8
1000edc0:	77d3      	strb	r3, [r2, #31]
1000edc2:	466a      	mov	r2, sp
1000edc4:	7912      	ldrb	r2, [r2, #4]
1000edc6:	1de3      	adds	r3, r4, #7
1000edc8:	77da      	strb	r2, [r3, #31]
1000edca:	1c22      	adds	r2, r4, #0
1000edcc:	9b01      	ldr	r3, [sp, #4]
1000edce:	3208      	adds	r2, #8
1000edd0:	0a1b      	lsrs	r3, r3, #8
1000edd2:	77d3      	strb	r3, [r2, #31]
1000edd4:	466a      	mov	r2, sp
1000edd6:	1c23      	adds	r3, r4, #0
1000edd8:	7a12      	ldrb	r2, [r2, #8]
1000edda:	3328      	adds	r3, #40	; 0x28
1000eddc:	701a      	strb	r2, [r3, #0]
1000edde:	1c22      	adds	r2, r4, #0
1000ede0:	9b02      	ldr	r3, [sp, #8]
1000ede2:	3229      	adds	r2, #41	; 0x29
1000ede4:	0a1b      	lsrs	r3, r3, #8
1000ede6:	7013      	strb	r3, [r2, #0]
1000ede8:	23d0      	movs	r3, #208	; 0xd0
1000edea:	4d13      	ldr	r5, [pc, #76]	; (1000ee38 <gapm_set_dev_config_cmd_handler+0xfc>)
1000edec:	011b      	lsls	r3, r3, #4
1000edee:	802b      	strh	r3, [r5, #0]
1000edf0:	2322      	movs	r3, #34	; 0x22
1000edf2:	71a3      	strb	r3, [r4, #6]
1000edf4:	2300      	movs	r3, #0
1000edf6:	212a      	movs	r1, #42	; 0x2a
1000edf8:	71e3      	strb	r3, [r4, #7]
1000edfa:	1c20      	adds	r0, r4, #0
1000edfc:	4b0f      	ldr	r3, [pc, #60]	; (1000ee3c <gapm_set_dev_config_cmd_handler+0x100>)
1000edfe:	80af      	strh	r7, [r5, #4]
1000ee00:	4798      	blx	r3
1000ee02:	1c30      	adds	r0, r6, #0
1000ee04:	4b0e      	ldr	r3, [pc, #56]	; (1000ee40 <gapm_set_dev_config_cmd_handler+0x104>)
1000ee06:	4798      	blx	r3
1000ee08:	7833      	ldrb	r3, [r6, #0]
1000ee0a:	20e2      	movs	r0, #226	; 0xe2
1000ee0c:	2b00      	cmp	r3, #0
1000ee0e:	d106      	bne.n	1000ee1e <gapm_set_dev_config_cmd_handler+0xe2>
1000ee10:	68ab      	ldr	r3, [r5, #8]
1000ee12:	20e2      	movs	r0, #226	; 0xe2
1000ee14:	781a      	ldrb	r2, [r3, #0]
1000ee16:	785b      	ldrb	r3, [r3, #1]
1000ee18:	2a03      	cmp	r2, #3
1000ee1a:	d100      	bne.n	1000ee1e <gapm_set_dev_config_cmd_handler+0xe2>
1000ee1c:	1c18      	adds	r0, r3, #0
1000ee1e:	b009      	add	sp, #36	; 0x24
1000ee20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee22:	46c0      	nop			; (mov r8, r8)
1000ee24:	100163ec 	.word	0x100163ec
1000ee28:	1001607c 	.word	0x1001607c
1000ee2c:	1001169b 	.word	0x1001169b
1000ee30:	100163f8 	.word	0x100163f8
1000ee34:	100163fe 	.word	0x100163fe
1000ee38:	10016070 	.word	0x10016070
1000ee3c:	1000e0f5 	.word	0x1000e0f5
1000ee40:	1000e159 	.word	0x1000e159

1000ee44 <gapm_get_dev_config_cmd_handler>:
1000ee44:	4684      	mov	ip, r0
1000ee46:	4663      	mov	r3, ip
1000ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee4a:	b085      	sub	sp, #20
1000ee4c:	9100      	str	r1, [sp, #0]
1000ee4e:	20cf      	movs	r0, #207	; 0xcf
1000ee50:	2b01      	cmp	r3, #1
1000ee52:	d854      	bhi.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000ee54:	2900      	cmp	r1, #0
1000ee56:	d052      	beq.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000ee58:	2200      	movs	r2, #0
1000ee5a:	492a      	ldr	r1, [pc, #168]	; (1000ef04 <gapm_get_dev_config_cmd_handler+0xc0>)
1000ee5c:	ab02      	add	r3, sp, #8
1000ee5e:	880c      	ldrh	r4, [r1, #0]
1000ee60:	8809      	ldrh	r1, [r1, #0]
1000ee62:	1d9f      	adds	r7, r3, #6
1000ee64:	719a      	strb	r2, [r3, #6]
1000ee66:	4b28      	ldr	r3, [pc, #160]	; (1000ef08 <gapm_get_dev_config_cmd_handler+0xc4>)
1000ee68:	0a09      	lsrs	r1, r1, #8
1000ee6a:	250d      	movs	r5, #13
1000ee6c:	2606      	movs	r6, #6
1000ee6e:	7159      	strb	r1, [r3, #5]
1000ee70:	4661      	mov	r1, ip
1000ee72:	701e      	strb	r6, [r3, #0]
1000ee74:	705d      	strb	r5, [r3, #1]
1000ee76:	709d      	strb	r5, [r3, #2]
1000ee78:	70da      	strb	r2, [r3, #3]
1000ee7a:	711c      	strb	r4, [r3, #4]
1000ee7c:	2901      	cmp	r1, #1
1000ee7e:	d13e      	bne.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000ee80:	21d0      	movs	r1, #208	; 0xd0
1000ee82:	4c22      	ldr	r4, [pc, #136]	; (1000ef0c <gapm_get_dev_config_cmd_handler+0xc8>)
1000ee84:	0109      	lsls	r1, r1, #4
1000ee86:	8061      	strh	r1, [r4, #2]
1000ee88:	4921      	ldr	r1, [pc, #132]	; (1000ef10 <gapm_get_dev_config_cmd_handler+0xcc>)
1000ee8a:	71da      	strb	r2, [r3, #7]
1000ee8c:	8021      	strh	r1, [r4, #0]
1000ee8e:	4661      	mov	r1, ip
1000ee90:	721e      	strb	r6, [r3, #8]
1000ee92:	7199      	strb	r1, [r3, #6]
1000ee94:	1c18      	adds	r0, r3, #0
1000ee96:	2109      	movs	r1, #9
1000ee98:	4b1e      	ldr	r3, [pc, #120]	; (1000ef14 <gapm_get_dev_config_cmd_handler+0xd0>)
1000ee9a:	80a5      	strh	r5, [r4, #4]
1000ee9c:	4798      	blx	r3
1000ee9e:	1c38      	adds	r0, r7, #0
1000eea0:	4b1d      	ldr	r3, [pc, #116]	; (1000ef18 <gapm_get_dev_config_cmd_handler+0xd4>)
1000eea2:	4798      	blx	r3
1000eea4:	783b      	ldrb	r3, [r7, #0]
1000eea6:	20e2      	movs	r0, #226	; 0xe2
1000eea8:	9301      	str	r3, [sp, #4]
1000eeaa:	2b00      	cmp	r3, #0
1000eeac:	d127      	bne.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000eeae:	8821      	ldrh	r1, [r4, #0]
1000eeb0:	4a1a      	ldr	r2, [pc, #104]	; (1000ef1c <gapm_get_dev_config_cmd_handler+0xd8>)
1000eeb2:	68a7      	ldr	r7, [r4, #8]
1000eeb4:	3b01      	subs	r3, #1
1000eeb6:	4291      	cmp	r1, r2
1000eeb8:	d001      	beq.n	1000eebe <gapm_get_dev_config_cmd_handler+0x7a>
1000eeba:	8023      	strh	r3, [r4, #0]
1000eebc:	e01a      	b.n	1000eef4 <gapm_get_dev_config_cmd_handler+0xb0>
1000eebe:	8063      	strh	r3, [r4, #2]
1000eec0:	9b00      	ldr	r3, [sp, #0]
1000eec2:	1c39      	adds	r1, r7, #0
1000eec4:	1c58      	adds	r0, r3, #1
1000eec6:	1c32      	adds	r2, r6, #0
1000eec8:	4b15      	ldr	r3, [pc, #84]	; (1000ef20 <gapm_get_dev_config_cmd_handler+0xdc>)
1000eeca:	4798      	blx	r3
1000eecc:	79bb      	ldrb	r3, [r7, #6]
1000eece:	9a00      	ldr	r2, [sp, #0]
1000eed0:	7013      	strb	r3, [r2, #0]
1000eed2:	23d0      	movs	r3, #208	; 0xd0
1000eed4:	011b      	lsls	r3, r3, #4
1000eed6:	8023      	strh	r3, [r4, #0]
1000eed8:	ab02      	add	r3, sp, #8
1000eeda:	80a5      	strh	r5, [r4, #4]
1000eedc:	1ddd      	adds	r5, r3, #7
1000eede:	466b      	mov	r3, sp
1000eee0:	791b      	ldrb	r3, [r3, #4]
1000eee2:	1c28      	adds	r0, r5, #0
1000eee4:	702b      	strb	r3, [r5, #0]
1000eee6:	4b0c      	ldr	r3, [pc, #48]	; (1000ef18 <gapm_get_dev_config_cmd_handler+0xd4>)
1000eee8:	4798      	blx	r3
1000eeea:	782b      	ldrb	r3, [r5, #0]
1000eeec:	20d0      	movs	r0, #208	; 0xd0
1000eeee:	2b00      	cmp	r3, #0
1000eef0:	d105      	bne.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000eef2:	68a7      	ldr	r7, [r4, #8]
1000eef4:	783b      	ldrb	r3, [r7, #0]
1000eef6:	7878      	ldrb	r0, [r7, #1]
1000eef8:	2b06      	cmp	r3, #6
1000eefa:	d000      	beq.n	1000eefe <gapm_get_dev_config_cmd_handler+0xba>
1000eefc:	20e2      	movs	r0, #226	; 0xe2
1000eefe:	b005      	add	sp, #20
1000ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef02:	46c0      	nop			; (mov r8, r8)
1000ef04:	1001607c 	.word	0x1001607c
1000ef08:	100163ec 	.word	0x100163ec
1000ef0c:	10016070 	.word	0x10016070
1000ef10:	00000d08 	.word	0x00000d08
1000ef14:	1000e0f5 	.word	0x1000e0f5
1000ef18:	1000e159 	.word	0x1000e159
1000ef1c:	0000ffff 	.word	0x0000ffff
1000ef20:	1001169b 	.word	0x1001169b

1000ef24 <gapm_cancel_cmd_handler>:
1000ef24:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ef26:	4916      	ldr	r1, [pc, #88]	; (1000ef80 <gapm_cancel_cmd_handler+0x5c>)
1000ef28:	4816      	ldr	r0, [pc, #88]	; (1000ef84 <gapm_cancel_cmd_handler+0x60>)
1000ef2a:	880c      	ldrh	r4, [r1, #0]
1000ef2c:	8809      	ldrh	r1, [r1, #0]
1000ef2e:	466b      	mov	r3, sp
1000ef30:	0a09      	lsrs	r1, r1, #8
1000ef32:	7141      	strb	r1, [r0, #5]
1000ef34:	2102      	movs	r1, #2
1000ef36:	2203      	movs	r2, #3
1000ef38:	7201      	strb	r1, [r0, #8]
1000ef3a:	21d0      	movs	r1, #208	; 0xd0
1000ef3c:	1ddd      	adds	r5, r3, #7
1000ef3e:	2300      	movs	r3, #0
1000ef40:	7104      	strb	r4, [r0, #4]
1000ef42:	4c11      	ldr	r4, [pc, #68]	; (1000ef88 <gapm_cancel_cmd_handler+0x64>)
1000ef44:	7002      	strb	r2, [r0, #0]
1000ef46:	0109      	lsls	r1, r1, #4
1000ef48:	320a      	adds	r2, #10
1000ef4a:	702b      	strb	r3, [r5, #0]
1000ef4c:	7042      	strb	r2, [r0, #1]
1000ef4e:	7082      	strb	r2, [r0, #2]
1000ef50:	70c3      	strb	r3, [r0, #3]
1000ef52:	8021      	strh	r1, [r4, #0]
1000ef54:	80a2      	strh	r2, [r4, #4]
1000ef56:	71c3      	strb	r3, [r0, #7]
1000ef58:	3a0c      	subs	r2, #12
1000ef5a:	2109      	movs	r1, #9
1000ef5c:	4b0b      	ldr	r3, [pc, #44]	; (1000ef8c <gapm_cancel_cmd_handler+0x68>)
1000ef5e:	7182      	strb	r2, [r0, #6]
1000ef60:	4798      	blx	r3
1000ef62:	1c28      	adds	r0, r5, #0
1000ef64:	4b0a      	ldr	r3, [pc, #40]	; (1000ef90 <gapm_cancel_cmd_handler+0x6c>)
1000ef66:	4798      	blx	r3
1000ef68:	7828      	ldrb	r0, [r5, #0]
1000ef6a:	2800      	cmp	r0, #0
1000ef6c:	d001      	beq.n	1000ef72 <gapm_cancel_cmd_handler+0x4e>
1000ef6e:	20e2      	movs	r0, #226	; 0xe2
1000ef70:	e004      	b.n	1000ef7c <gapm_cancel_cmd_handler+0x58>
1000ef72:	68a3      	ldr	r3, [r4, #8]
1000ef74:	785b      	ldrb	r3, [r3, #1]
1000ef76:	2b44      	cmp	r3, #68	; 0x44
1000ef78:	d000      	beq.n	1000ef7c <gapm_cancel_cmd_handler+0x58>
1000ef7a:	1c18      	adds	r0, r3, #0
1000ef7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ef7e:	46c0      	nop			; (mov r8, r8)
1000ef80:	1001607c 	.word	0x1001607c
1000ef84:	100163ec 	.word	0x100163ec
1000ef88:	10016070 	.word	0x10016070
1000ef8c:	1000e0f5 	.word	0x1000e0f5
1000ef90:	1000e159 	.word	0x1000e159

1000ef94 <gapm_dev_bdaddr_ind_handler>:
1000ef94:	b538      	push	{r3, r4, r5, lr}
1000ef96:	1c05      	adds	r5, r0, #0
1000ef98:	1c0c      	adds	r4, r1, #0
1000ef9a:	1c48      	adds	r0, r1, #1
1000ef9c:	2206      	movs	r2, #6
1000ef9e:	1c29      	adds	r1, r5, #0
1000efa0:	4b02      	ldr	r3, [pc, #8]	; (1000efac <gapm_dev_bdaddr_ind_handler+0x18>)
1000efa2:	4798      	blx	r3
1000efa4:	79ab      	ldrb	r3, [r5, #6]
1000efa6:	2000      	movs	r0, #0
1000efa8:	7023      	strb	r3, [r4, #0]
1000efaa:	bd38      	pop	{r3, r4, r5, pc}
1000efac:	1001169b 	.word	0x1001169b

1000efb0 <gapm_cmp_evt>:
1000efb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000efb2:	7803      	ldrb	r3, [r0, #0]
1000efb4:	7845      	ldrb	r5, [r0, #1]
1000efb6:	3b0c      	subs	r3, #12
1000efb8:	1e18      	subs	r0, r3, #0
1000efba:	280b      	cmp	r0, #11
1000efbc:	d900      	bls.n	1000efc0 <gapm_cmp_evt+0x10>
1000efbe:	e08d      	b.n	1000f0dc <gapm_cmp_evt+0x12c>
1000efc0:	1c0c      	adds	r4, r1, #0
1000efc2:	f000 fe4f 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000efc6:	1952      	.short	0x1952
1000efc8:	068b1919 	.word	0x068b1919
1000efcc:	8b595906 	.word	0x8b595906
1000efd0:	0d8b      	.short	0x0d8b
1000efd2:	2300      	movs	r3, #0
1000efd4:	2d45      	cmp	r5, #69	; 0x45
1000efd6:	d000      	beq.n	1000efda <gapm_cmp_evt+0x2a>
1000efd8:	1c2b      	adds	r3, r5, #0
1000efda:	7023      	strb	r3, [r4, #0]
1000efdc:	2002      	movs	r0, #2
1000efde:	e07e      	b.n	1000f0de <gapm_cmp_evt+0x12e>
1000efe0:	203b      	movs	r0, #59	; 0x3b
1000efe2:	2d00      	cmp	r5, #0
1000efe4:	d100      	bne.n	1000efe8 <gapm_cmp_evt+0x38>
1000efe6:	e07a      	b.n	1000f0de <gapm_cmp_evt+0x12e>
1000efe8:	700d      	strb	r5, [r1, #0]
1000efea:	1c48      	adds	r0, r1, #1
1000efec:	2210      	movs	r2, #16
1000efee:	2100      	movs	r1, #0
1000eff0:	4b3b      	ldr	r3, [pc, #236]	; (1000f0e0 <gapm_cmp_evt+0x130>)
1000eff2:	4798      	blx	r3
1000eff4:	200f      	movs	r0, #15
1000eff6:	e072      	b.n	1000f0de <gapm_cmp_evt+0x12e>
1000eff8:	2d00      	cmp	r5, #0
1000effa:	d134      	bne.n	1000f066 <gapm_cmp_evt+0xb6>
1000effc:	4b39      	ldr	r3, [pc, #228]	; (1000f0e4 <gapm_cmp_evt+0x134>)
1000effe:	4798      	blx	r3
1000f000:	1e43      	subs	r3, r0, #1
1000f002:	b2db      	uxtb	r3, r3
1000f004:	1c28      	adds	r0, r5, #0
1000f006:	2b06      	cmp	r3, #6
1000f008:	d869      	bhi.n	1000f0de <gapm_cmp_evt+0x12e>
1000f00a:	466b      	mov	r3, sp
1000f00c:	4e36      	ldr	r6, [pc, #216]	; (1000f0e8 <gapm_cmp_evt+0x138>)
1000f00e:	1dd9      	adds	r1, r3, #7
1000f010:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f012:	4b36      	ldr	r3, [pc, #216]	; (1000f0ec <gapm_cmp_evt+0x13c>)
1000f014:	4798      	blx	r3
1000f016:	2312      	movs	r3, #18
1000f018:	4358      	muls	r0, r3
1000f01a:	4935      	ldr	r1, [pc, #212]	; (1000f0f0 <gapm_cmp_evt+0x140>)
1000f01c:	1809      	adds	r1, r1, r0
1000f01e:	1c0b      	adds	r3, r1, #0
1000f020:	894a      	ldrh	r2, [r1, #10]
1000f022:	3308      	adds	r3, #8
1000f024:	8122      	strh	r2, [r4, #8]
1000f026:	784f      	ldrb	r7, [r1, #1]
1000f028:	72a5      	strb	r5, [r4, #10]
1000f02a:	7027      	strb	r7, [r4, #0]
1000f02c:	898a      	ldrh	r2, [r1, #12]
1000f02e:	1c60      	adds	r0, r4, #1
1000f030:	81a2      	strh	r2, [r4, #12]
1000f032:	88db      	ldrh	r3, [r3, #6]
1000f034:	3102      	adds	r1, #2
1000f036:	81e3      	strh	r3, [r4, #14]
1000f038:	89cb      	ldrh	r3, [r1, #14]
1000f03a:	2206      	movs	r2, #6
1000f03c:	8223      	strh	r3, [r4, #16]
1000f03e:	4b2d      	ldr	r3, [pc, #180]	; (1000f0f4 <gapm_cmp_evt+0x144>)
1000f040:	4798      	blx	r3
1000f042:	2f00      	cmp	r7, #0
1000f044:	d00a      	beq.n	1000f05c <gapm_cmp_evt+0xac>
1000f046:	79a3      	ldrb	r3, [r4, #6]
1000f048:	223f      	movs	r2, #63	; 0x3f
1000f04a:	1c19      	adds	r1, r3, #0
1000f04c:	3501      	adds	r5, #1
1000f04e:	4391      	bics	r1, r2
1000f050:	29c0      	cmp	r1, #192	; 0xc0
1000f052:	d003      	beq.n	1000f05c <gapm_cmp_evt+0xac>
1000f054:	065b      	lsls	r3, r3, #25
1000f056:	0fdb      	lsrs	r3, r3, #31
1000f058:	3502      	adds	r5, #2
1000f05a:	1aed      	subs	r5, r5, r3
1000f05c:	2301      	movs	r3, #1
1000f05e:	425b      	negs	r3, r3
1000f060:	7025      	strb	r5, [r4, #0]
1000f062:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f064:	e038      	b.n	1000f0d8 <gapm_cmp_evt+0x128>
1000f066:	700d      	strb	r5, [r1, #0]
1000f068:	e004      	b.n	1000f074 <gapm_cmp_evt+0xc4>
1000f06a:	2300      	movs	r3, #0
1000f06c:	2d45      	cmp	r5, #69	; 0x45
1000f06e:	d000      	beq.n	1000f072 <gapm_cmp_evt+0xc2>
1000f070:	1c2b      	adds	r3, r5, #0
1000f072:	7023      	strb	r3, [r4, #0]
1000f074:	2003      	movs	r0, #3
1000f076:	e032      	b.n	1000f0de <gapm_cmp_evt+0x12e>
1000f078:	4e1b      	ldr	r6, [pc, #108]	; (1000f0e8 <gapm_cmp_evt+0x138>)
1000f07a:	2100      	movs	r1, #0
1000f07c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f07e:	4b1b      	ldr	r3, [pc, #108]	; (1000f0ec <gapm_cmp_evt+0x13c>)
1000f080:	4798      	blx	r3
1000f082:	2807      	cmp	r0, #7
1000f084:	d818      	bhi.n	1000f0b8 <gapm_cmp_evt+0x108>
1000f086:	2301      	movs	r3, #1
1000f088:	425b      	negs	r3, r3
1000f08a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f08c:	3313      	adds	r3, #19
1000f08e:	4358      	muls	r0, r3
1000f090:	4917      	ldr	r1, [pc, #92]	; (1000f0f0 <gapm_cmp_evt+0x140>)
1000f092:	1809      	adds	r1, r1, r0
1000f094:	1c0b      	adds	r3, r1, #0
1000f096:	894a      	ldrh	r2, [r1, #10]
1000f098:	3308      	adds	r3, #8
1000f09a:	8122      	strh	r2, [r4, #8]
1000f09c:	784a      	ldrb	r2, [r1, #1]
1000f09e:	72a5      	strb	r5, [r4, #10]
1000f0a0:	7022      	strb	r2, [r4, #0]
1000f0a2:	898a      	ldrh	r2, [r1, #12]
1000f0a4:	1c60      	adds	r0, r4, #1
1000f0a6:	81a2      	strh	r2, [r4, #12]
1000f0a8:	88db      	ldrh	r3, [r3, #6]
1000f0aa:	3102      	adds	r1, #2
1000f0ac:	81e3      	strh	r3, [r4, #14]
1000f0ae:	89cb      	ldrh	r3, [r1, #14]
1000f0b0:	2206      	movs	r2, #6
1000f0b2:	8223      	strh	r3, [r4, #16]
1000f0b4:	4b0f      	ldr	r3, [pc, #60]	; (1000f0f4 <gapm_cmp_evt+0x144>)
1000f0b6:	4798      	blx	r3
1000f0b8:	2200      	movs	r2, #0
1000f0ba:	7823      	ldrb	r3, [r4, #0]
1000f0bc:	4293      	cmp	r3, r2
1000f0be:	d00a      	beq.n	1000f0d6 <gapm_cmp_evt+0x126>
1000f0c0:	79a3      	ldrb	r3, [r4, #6]
1000f0c2:	323f      	adds	r2, #63	; 0x3f
1000f0c4:	1c19      	adds	r1, r3, #0
1000f0c6:	4391      	bics	r1, r2
1000f0c8:	3a3e      	subs	r2, #62	; 0x3e
1000f0ca:	29c0      	cmp	r1, #192	; 0xc0
1000f0cc:	d003      	beq.n	1000f0d6 <gapm_cmp_evt+0x126>
1000f0ce:	065b      	lsls	r3, r3, #25
1000f0d0:	0fdb      	lsrs	r3, r3, #31
1000f0d2:	3202      	adds	r2, #2
1000f0d4:	1ad2      	subs	r2, r2, r3
1000f0d6:	7022      	strb	r2, [r4, #0]
1000f0d8:	2005      	movs	r0, #5
1000f0da:	e000      	b.n	1000f0de <gapm_cmp_evt+0x12e>
1000f0dc:	2000      	movs	r0, #0
1000f0de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f0e0:	100116ad 	.word	0x100116ad
1000f0e4:	1000e301 	.word	0x1000e301
1000f0e8:	1001610e 	.word	0x1001610e
1000f0ec:	1000e2c5 	.word	0x1000e2c5
1000f0f0:	1001607e 	.word	0x1001607e
1000f0f4:	1001169b 	.word	0x1001169b

1000f0f8 <gapm_start_adv_cmd_handler>:
1000f0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f0fa:	b089      	sub	sp, #36	; 0x24
1000f0fc:	9303      	str	r3, [sp, #12]
1000f0fe:	ab0e      	add	r3, sp, #56	; 0x38
1000f100:	9102      	str	r1, [sp, #8]
1000f102:	cb02      	ldmia	r3!, {r1}
1000f104:	aa08      	add	r2, sp, #32
1000f106:	881b      	ldrh	r3, [r3, #0]
1000f108:	4e3c      	ldr	r6, [pc, #240]	; (1000f1fc <gapm_start_adv_cmd_handler+0x104>)
1000f10a:	9300      	str	r3, [sp, #0]
1000f10c:	ab10      	add	r3, sp, #64	; 0x40
1000f10e:	881b      	ldrh	r3, [r3, #0]
1000f110:	240d      	movs	r4, #13
1000f112:	469c      	mov	ip, r3
1000f114:	ab11      	add	r3, sp, #68	; 0x44
1000f116:	781b      	ldrb	r3, [r3, #0]
1000f118:	9304      	str	r3, [sp, #16]
1000f11a:	ab12      	add	r3, sp, #72	; 0x48
1000f11c:	781b      	ldrb	r3, [r3, #0]
1000f11e:	9305      	str	r3, [sp, #20]
1000f120:	ab13      	add	r3, sp, #76	; 0x4c
1000f122:	781b      	ldrb	r3, [r3, #0]
1000f124:	9306      	str	r3, [sp, #24]
1000f126:	ab14      	add	r3, sp, #80	; 0x50
1000f128:	781b      	ldrb	r3, [r3, #0]
1000f12a:	9301      	str	r3, [sp, #4]
1000f12c:	2319      	movs	r3, #25
1000f12e:	189b      	adds	r3, r3, r2
1000f130:	7fdd      	ldrb	r5, [r3, #31]
1000f132:	ab18      	add	r3, sp, #96	; 0x60
1000f134:	881f      	ldrh	r7, [r3, #0]
1000f136:	ab19      	add	r3, sp, #100	; 0x64
1000f138:	781b      	ldrb	r3, [r3, #0]
1000f13a:	8832      	ldrh	r2, [r6, #0]
1000f13c:	9307      	str	r3, [sp, #28]
1000f13e:	4b30      	ldr	r3, [pc, #192]	; (1000f200 <gapm_start_adv_cmd_handler+0x108>)
1000f140:	8836      	ldrh	r6, [r6, #0]
1000f142:	711a      	strb	r2, [r3, #4]
1000f144:	466a      	mov	r2, sp
1000f146:	7a12      	ldrb	r2, [r2, #8]
1000f148:	701c      	strb	r4, [r3, #0]
1000f14a:	705c      	strb	r4, [r3, #1]
1000f14c:	709c      	strb	r4, [r3, #2]
1000f14e:	725a      	strb	r2, [r3, #9]
1000f150:	2400      	movs	r4, #0
1000f152:	466a      	mov	r2, sp
1000f154:	0a36      	lsrs	r6, r6, #8
1000f156:	70dc      	strb	r4, [r3, #3]
1000f158:	7218      	strb	r0, [r3, #8]
1000f15a:	729c      	strb	r4, [r3, #10]
1000f15c:	715e      	strb	r6, [r3, #5]
1000f15e:	72dc      	strb	r4, [r3, #11]
1000f160:	7812      	ldrb	r2, [r2, #0]
1000f162:	380e      	subs	r0, #14
1000f164:	731a      	strb	r2, [r3, #12]
1000f166:	9a00      	ldr	r2, [sp, #0]
1000f168:	0a14      	lsrs	r4, r2, #8
1000f16a:	4662      	mov	r2, ip
1000f16c:	739a      	strb	r2, [r3, #14]
1000f16e:	4662      	mov	r2, ip
1000f170:	735c      	strb	r4, [r3, #13]
1000f172:	0a14      	lsrs	r4, r2, #8
1000f174:	466a      	mov	r2, sp
1000f176:	7c12      	ldrb	r2, [r2, #16]
1000f178:	73dc      	strb	r4, [r3, #15]
1000f17a:	741a      	strb	r2, [r3, #16]
1000f17c:	1c1c      	adds	r4, r3, #0
1000f17e:	2801      	cmp	r0, #1
1000f180:	d809      	bhi.n	1000f196 <gapm_start_adv_cmd_handler+0x9e>
1000f182:	2900      	cmp	r1, #0
1000f184:	d003      	beq.n	1000f18e <gapm_start_adv_cmd_handler+0x96>
1000f186:	481f      	ldr	r0, [pc, #124]	; (1000f204 <gapm_start_adv_cmd_handler+0x10c>)
1000f188:	2206      	movs	r2, #6
1000f18a:	4b1f      	ldr	r3, [pc, #124]	; (1000f208 <gapm_start_adv_cmd_handler+0x110>)
1000f18c:	4798      	blx	r3
1000f18e:	466b      	mov	r3, sp
1000f190:	7b1b      	ldrb	r3, [r3, #12]
1000f192:	75e3      	strb	r3, [r4, #23]
1000f194:	e014      	b.n	1000f1c0 <gapm_start_adv_cmd_handler+0xc8>
1000f196:	466b      	mov	r3, sp
1000f198:	7d1b      	ldrb	r3, [r3, #20]
1000f19a:	9915      	ldr	r1, [sp, #84]	; 0x54
1000f19c:	7463      	strb	r3, [r4, #17]
1000f19e:	466b      	mov	r3, sp
1000f1a0:	7e1b      	ldrb	r3, [r3, #24]
1000f1a2:	9a01      	ldr	r2, [sp, #4]
1000f1a4:	74a3      	strb	r3, [r4, #18]
1000f1a6:	466b      	mov	r3, sp
1000f1a8:	791b      	ldrb	r3, [r3, #4]
1000f1aa:	4818      	ldr	r0, [pc, #96]	; (1000f20c <gapm_start_adv_cmd_handler+0x114>)
1000f1ac:	4e16      	ldr	r6, [pc, #88]	; (1000f208 <gapm_start_adv_cmd_handler+0x110>)
1000f1ae:	74e3      	strb	r3, [r4, #19]
1000f1b0:	47b0      	blx	r6
1000f1b2:	1c23      	adds	r3, r4, #0
1000f1b4:	4816      	ldr	r0, [pc, #88]	; (1000f210 <gapm_start_adv_cmd_handler+0x118>)
1000f1b6:	3330      	adds	r3, #48	; 0x30
1000f1b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000f1ba:	1c2a      	adds	r2, r5, #0
1000f1bc:	701d      	strb	r5, [r3, #0]
1000f1be:	47b0      	blx	r6
1000f1c0:	1c22      	adds	r2, r4, #0
1000f1c2:	23a5      	movs	r3, #165	; 0xa5
1000f1c4:	3250      	adds	r2, #80	; 0x50
1000f1c6:	7013      	strb	r3, [r2, #0]
1000f1c8:	1c22      	adds	r2, r4, #0
1000f1ca:	3251      	adds	r2, #81	; 0x51
1000f1cc:	7013      	strb	r3, [r2, #0]
1000f1ce:	1c23      	adds	r3, r4, #0
1000f1d0:	1c22      	adds	r2, r4, #0
1000f1d2:	3352      	adds	r3, #82	; 0x52
1000f1d4:	701f      	strb	r7, [r3, #0]
1000f1d6:	3253      	adds	r2, #83	; 0x53
1000f1d8:	0a3b      	lsrs	r3, r7, #8
1000f1da:	7013      	strb	r3, [r2, #0]
1000f1dc:	466a      	mov	r2, sp
1000f1de:	1c23      	adds	r3, r4, #0
1000f1e0:	7f12      	ldrb	r2, [r2, #28]
1000f1e2:	3354      	adds	r3, #84	; 0x54
1000f1e4:	701a      	strb	r2, [r3, #0]
1000f1e6:	234d      	movs	r3, #77	; 0x4d
1000f1e8:	2500      	movs	r5, #0
1000f1ea:	71a3      	strb	r3, [r4, #6]
1000f1ec:	1c20      	adds	r0, r4, #0
1000f1ee:	2155      	movs	r1, #85	; 0x55
1000f1f0:	4b08      	ldr	r3, [pc, #32]	; (1000f214 <gapm_start_adv_cmd_handler+0x11c>)
1000f1f2:	71e5      	strb	r5, [r4, #7]
1000f1f4:	4798      	blx	r3
1000f1f6:	1c28      	adds	r0, r5, #0
1000f1f8:	b009      	add	sp, #36	; 0x24
1000f1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1fc:	1001607c 	.word	0x1001607c
1000f200:	100163ec 	.word	0x100163ec
1000f204:	100163fd 	.word	0x100163fd
1000f208:	1001169b 	.word	0x1001169b
1000f20c:	10016400 	.word	0x10016400
1000f210:	1001641d 	.word	0x1001641d
1000f214:	1000e0f5 	.word	0x1000e0f5

1000f218 <get_gap_local_addr_type>:
1000f218:	4b04      	ldr	r3, [pc, #16]	; (1000f22c <get_gap_local_addr_type+0x14>)
1000f21a:	2001      	movs	r0, #1
1000f21c:	791b      	ldrb	r3, [r3, #4]
1000f21e:	2b02      	cmp	r3, #2
1000f220:	d003      	beq.n	1000f22a <get_gap_local_addr_type+0x12>
1000f222:	3b03      	subs	r3, #3
1000f224:	4258      	negs	r0, r3
1000f226:	4158      	adcs	r0, r3
1000f228:	0040      	lsls	r0, r0, #1
1000f22a:	4770      	bx	lr
1000f22c:	1001610e 	.word	0x1001610e

1000f230 <gapm_adv_report_evt_handler>:
1000f230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f232:	7843      	ldrb	r3, [r0, #1]
1000f234:	1c05      	adds	r5, r0, #0
1000f236:	9301      	str	r3, [sp, #4]
1000f238:	466b      	mov	r3, sp
1000f23a:	1c0c      	adds	r4, r1, #0
1000f23c:	791b      	ldrb	r3, [r3, #4]
1000f23e:	7806      	ldrb	r6, [r0, #0]
1000f240:	2206      	movs	r2, #6
1000f242:	704b      	strb	r3, [r1, #1]
1000f244:	1c88      	adds	r0, r1, #2
1000f246:	4f1b      	ldr	r7, [pc, #108]	; (1000f2b4 <gapm_adv_report_evt_handler+0x84>)
1000f248:	1ca9      	adds	r1, r5, #2
1000f24a:	47b8      	blx	r7
1000f24c:	1c20      	adds	r0, r4, #0
1000f24e:	1c29      	adds	r1, r5, #0
1000f250:	7a2a      	ldrb	r2, [r5, #8]
1000f252:	3008      	adds	r0, #8
1000f254:	77c2      	strb	r2, [r0, #31]
1000f256:	3109      	adds	r1, #9
1000f258:	3528      	adds	r5, #40	; 0x28
1000f25a:	47b8      	blx	r7
1000f25c:	782b      	ldrb	r3, [r5, #0]
1000f25e:	b25a      	sxtb	r2, r3
1000f260:	2a00      	cmp	r2, #0
1000f262:	da01      	bge.n	1000f268 <gapm_adv_report_evt_handler+0x38>
1000f264:	3301      	adds	r3, #1
1000f266:	b2db      	uxtb	r3, r3
1000f268:	1c22      	adds	r2, r4, #0
1000f26a:	3228      	adds	r2, #40	; 0x28
1000f26c:	7013      	strb	r3, [r2, #0]
1000f26e:	2200      	movs	r2, #0
1000f270:	9b01      	ldr	r3, [sp, #4]
1000f272:	4293      	cmp	r3, r2
1000f274:	d00a      	beq.n	1000f28c <gapm_adv_report_evt_handler+0x5c>
1000f276:	79e3      	ldrb	r3, [r4, #7]
1000f278:	323f      	adds	r2, #63	; 0x3f
1000f27a:	1c19      	adds	r1, r3, #0
1000f27c:	4391      	bics	r1, r2
1000f27e:	3a3e      	subs	r2, #62	; 0x3e
1000f280:	29c0      	cmp	r1, #192	; 0xc0
1000f282:	d003      	beq.n	1000f28c <gapm_adv_report_evt_handler+0x5c>
1000f284:	065b      	lsls	r3, r3, #25
1000f286:	0fdb      	lsrs	r3, r3, #31
1000f288:	3202      	adds	r2, #2
1000f28a:	1ad2      	subs	r2, r2, r3
1000f28c:	7062      	strb	r2, [r4, #1]
1000f28e:	2e04      	cmp	r6, #4
1000f290:	d80f      	bhi.n	1000f2b2 <gapm_adv_report_evt_handler+0x82>
1000f292:	1c30      	adds	r0, r6, #0
1000f294:	f000 fce6 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000f298:	09070503 	.word	0x09070503
1000f29c:	0b          	.byte	0x0b
1000f29d:	00          	.byte	0x00
1000f29e:	2300      	movs	r3, #0
1000f2a0:	e006      	b.n	1000f2b0 <gapm_adv_report_evt_handler+0x80>
1000f2a2:	2301      	movs	r3, #1
1000f2a4:	e004      	b.n	1000f2b0 <gapm_adv_report_evt_handler+0x80>
1000f2a6:	2302      	movs	r3, #2
1000f2a8:	e002      	b.n	1000f2b0 <gapm_adv_report_evt_handler+0x80>
1000f2aa:	2303      	movs	r3, #3
1000f2ac:	e000      	b.n	1000f2b0 <gapm_adv_report_evt_handler+0x80>
1000f2ae:	2305      	movs	r3, #5
1000f2b0:	7023      	strb	r3, [r4, #0]
1000f2b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f2b4:	1001169b 	.word	0x1001169b

1000f2b8 <gapm_resolv_addr_cmd_handler>:
1000f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f2ba:	2314      	movs	r3, #20
1000f2bc:	4c12      	ldr	r4, [pc, #72]	; (1000f308 <gapm_resolv_addr_cmd_handler+0x50>)
1000f2be:	1c17      	adds	r7, r2, #0
1000f2c0:	7023      	strb	r3, [r4, #0]
1000f2c2:	3b07      	subs	r3, #7
1000f2c4:	7063      	strb	r3, [r4, #1]
1000f2c6:	70a3      	strb	r3, [r4, #2]
1000f2c8:	2300      	movs	r3, #0
1000f2ca:	70e3      	strb	r3, [r4, #3]
1000f2cc:	4b0f      	ldr	r3, [pc, #60]	; (1000f30c <gapm_resolv_addr_cmd_handler+0x54>)
1000f2ce:	1c05      	adds	r5, r0, #0
1000f2d0:	881a      	ldrh	r2, [r3, #0]
1000f2d2:	881b      	ldrh	r3, [r3, #0]
1000f2d4:	4e0e      	ldr	r6, [pc, #56]	; (1000f310 <gapm_resolv_addr_cmd_handler+0x58>)
1000f2d6:	0a1b      	lsrs	r3, r3, #8
1000f2d8:	7163      	strb	r3, [r4, #5]
1000f2da:	2317      	movs	r3, #23
1000f2dc:	012d      	lsls	r5, r5, #4
1000f2de:	7122      	strb	r2, [r4, #4]
1000f2e0:	7260      	strb	r0, [r4, #9]
1000f2e2:	2206      	movs	r2, #6
1000f2e4:	480b      	ldr	r0, [pc, #44]	; (1000f314 <gapm_resolv_addr_cmd_handler+0x5c>)
1000f2e6:	7223      	strb	r3, [r4, #8]
1000f2e8:	47b0      	blx	r6
1000f2ea:	1c39      	adds	r1, r7, #0
1000f2ec:	1c2a      	adds	r2, r5, #0
1000f2ee:	480a      	ldr	r0, [pc, #40]	; (1000f318 <gapm_resolv_addr_cmd_handler+0x60>)
1000f2f0:	47b0      	blx	r6
1000f2f2:	1c29      	adds	r1, r5, #0
1000f2f4:	3110      	adds	r1, #16
1000f2f6:	1c0b      	adds	r3, r1, #0
1000f2f8:	3b08      	subs	r3, #8
1000f2fa:	71a3      	strb	r3, [r4, #6]
1000f2fc:	121b      	asrs	r3, r3, #8
1000f2fe:	71e3      	strb	r3, [r4, #7]
1000f300:	1c20      	adds	r0, r4, #0
1000f302:	4b06      	ldr	r3, [pc, #24]	; (1000f31c <gapm_resolv_addr_cmd_handler+0x64>)
1000f304:	4798      	blx	r3
1000f306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f308:	100163ec 	.word	0x100163ec
1000f30c:	1001607c 	.word	0x1001607c
1000f310:	1001169b 	.word	0x1001169b
1000f314:	100163f6 	.word	0x100163f6
1000f318:	100163fc 	.word	0x100163fc
1000f31c:	1000e0f5 	.word	0x1000e0f5

1000f320 <gapm_addr_solved_ind_handler>:
1000f320:	b570      	push	{r4, r5, r6, lr}
1000f322:	1c04      	adds	r4, r0, #0
1000f324:	1c08      	adds	r0, r1, #0
1000f326:	1c0d      	adds	r5, r1, #0
1000f328:	4e05      	ldr	r6, [pc, #20]	; (1000f340 <gapm_addr_solved_ind_handler+0x20>)
1000f32a:	1c21      	adds	r1, r4, #0
1000f32c:	2206      	movs	r2, #6
1000f32e:	3011      	adds	r0, #17
1000f330:	47b0      	blx	r6
1000f332:	1c68      	adds	r0, r5, #1
1000f334:	1da1      	adds	r1, r4, #6
1000f336:	2210      	movs	r2, #16
1000f338:	47b0      	blx	r6
1000f33a:	2300      	movs	r3, #0
1000f33c:	702b      	strb	r3, [r5, #0]
1000f33e:	bd70      	pop	{r4, r5, r6, pc}
1000f340:	1001169b 	.word	0x1001169b

1000f344 <gapm_profile_task_add_cmd_handler>:
1000f344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f346:	4684      	mov	ip, r0
1000f348:	a808      	add	r0, sp, #32
1000f34a:	c810      	ldmia	r0!, {r4}
1000f34c:	2500      	movs	r5, #0
1000f34e:	8807      	ldrh	r7, [r0, #0]
1000f350:	4668      	mov	r0, sp
1000f352:	1d86      	adds	r6, r0, #6
1000f354:	7185      	strb	r5, [r0, #6]
1000f356:	201b      	movs	r0, #27
1000f358:	4c2b      	ldr	r4, [pc, #172]	; (1000f408 <gapm_profile_task_add_cmd_handler+0xc4>)
1000f35a:	7020      	strb	r0, [r4, #0]
1000f35c:	200d      	movs	r0, #13
1000f35e:	7060      	strb	r0, [r4, #1]
1000f360:	200d      	movs	r0, #13
1000f362:	70e5      	strb	r5, [r4, #3]
1000f364:	4d29      	ldr	r5, [pc, #164]	; (1000f40c <gapm_profile_task_add_cmd_handler+0xc8>)
1000f366:	70a0      	strb	r0, [r4, #2]
1000f368:	8828      	ldrh	r0, [r5, #0]
1000f36a:	882d      	ldrh	r5, [r5, #0]
1000f36c:	7120      	strb	r0, [r4, #4]
1000f36e:	201b      	movs	r0, #27
1000f370:	7220      	strb	r0, [r4, #8]
1000f372:	4660      	mov	r0, ip
1000f374:	72a1      	strb	r1, [r4, #10]
1000f376:	7322      	strb	r2, [r4, #12]
1000f378:	73a3      	strb	r3, [r4, #14]
1000f37a:	0a09      	lsrs	r1, r1, #8
1000f37c:	0a12      	lsrs	r2, r2, #8
1000f37e:	0a1b      	lsrs	r3, r3, #8
1000f380:	7260      	strb	r0, [r4, #9]
1000f382:	72e1      	strb	r1, [r4, #11]
1000f384:	7362      	strb	r2, [r4, #13]
1000f386:	73e3      	strb	r3, [r4, #15]
1000f388:	1c3a      	adds	r2, r7, #0
1000f38a:	0a2d      	lsrs	r5, r5, #8
1000f38c:	9908      	ldr	r1, [sp, #32]
1000f38e:	4b20      	ldr	r3, [pc, #128]	; (1000f410 <gapm_profile_task_add_cmd_handler+0xcc>)
1000f390:	4820      	ldr	r0, [pc, #128]	; (1000f414 <gapm_profile_task_add_cmd_handler+0xd0>)
1000f392:	7165      	strb	r5, [r4, #5]
1000f394:	4798      	blx	r3
1000f396:	4d20      	ldr	r5, [pc, #128]	; (1000f418 <gapm_profile_task_add_cmd_handler+0xd4>)
1000f398:	1c39      	adds	r1, r7, #0
1000f39a:	4b20      	ldr	r3, [pc, #128]	; (1000f41c <gapm_profile_task_add_cmd_handler+0xd8>)
1000f39c:	3110      	adds	r1, #16
1000f39e:	802b      	strh	r3, [r5, #0]
1000f3a0:	230d      	movs	r3, #13
1000f3a2:	b289      	uxth	r1, r1
1000f3a4:	80ab      	strh	r3, [r5, #4]
1000f3a6:	1c0b      	adds	r3, r1, #0
1000f3a8:	27d0      	movs	r7, #208	; 0xd0
1000f3aa:	3b08      	subs	r3, #8
1000f3ac:	71a3      	strb	r3, [r4, #6]
1000f3ae:	121b      	asrs	r3, r3, #8
1000f3b0:	71e3      	strb	r3, [r4, #7]
1000f3b2:	1c20      	adds	r0, r4, #0
1000f3b4:	4b1a      	ldr	r3, [pc, #104]	; (1000f420 <gapm_profile_task_add_cmd_handler+0xdc>)
1000f3b6:	013f      	lsls	r7, r7, #4
1000f3b8:	806f      	strh	r7, [r5, #2]
1000f3ba:	4798      	blx	r3
1000f3bc:	1c30      	adds	r0, r6, #0
1000f3be:	4c19      	ldr	r4, [pc, #100]	; (1000f424 <gapm_profile_task_add_cmd_handler+0xe0>)
1000f3c0:	47a0      	blx	r4
1000f3c2:	7831      	ldrb	r1, [r6, #0]
1000f3c4:	20e2      	movs	r0, #226	; 0xe2
1000f3c6:	2900      	cmp	r1, #0
1000f3c8:	d11d      	bne.n	1000f406 <gapm_profile_task_add_cmd_handler+0xc2>
1000f3ca:	2301      	movs	r3, #1
1000f3cc:	882e      	ldrh	r6, [r5, #0]
1000f3ce:	4816      	ldr	r0, [pc, #88]	; (1000f428 <gapm_profile_task_add_cmd_handler+0xe4>)
1000f3d0:	68aa      	ldr	r2, [r5, #8]
1000f3d2:	425b      	negs	r3, r3
1000f3d4:	4286      	cmp	r6, r0
1000f3d6:	d001      	beq.n	1000f3dc <gapm_profile_task_add_cmd_handler+0x98>
1000f3d8:	802b      	strh	r3, [r5, #0]
1000f3da:	e013      	b.n	1000f404 <gapm_profile_task_add_cmd_handler+0xc0>
1000f3dc:	806b      	strh	r3, [r5, #2]
1000f3de:	7953      	ldrb	r3, [r2, #5]
1000f3e0:	7912      	ldrb	r2, [r2, #4]
1000f3e2:	021b      	lsls	r3, r3, #8
1000f3e4:	4313      	orrs	r3, r2
1000f3e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000f3e8:	8013      	strh	r3, [r2, #0]
1000f3ea:	230d      	movs	r3, #13
1000f3ec:	80ab      	strh	r3, [r5, #4]
1000f3ee:	466b      	mov	r3, sp
1000f3f0:	1dde      	adds	r6, r3, #7
1000f3f2:	1c30      	adds	r0, r6, #0
1000f3f4:	71d9      	strb	r1, [r3, #7]
1000f3f6:	802f      	strh	r7, [r5, #0]
1000f3f8:	47a0      	blx	r4
1000f3fa:	7833      	ldrb	r3, [r6, #0]
1000f3fc:	20d0      	movs	r0, #208	; 0xd0
1000f3fe:	2b00      	cmp	r3, #0
1000f400:	d101      	bne.n	1000f406 <gapm_profile_task_add_cmd_handler+0xc2>
1000f402:	68aa      	ldr	r2, [r5, #8]
1000f404:	7850      	ldrb	r0, [r2, #1]
1000f406:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f408:	100163ec 	.word	0x100163ec
1000f40c:	1001607c 	.word	0x1001607c
1000f410:	1001169b 	.word	0x1001169b
1000f414:	100163fc 	.word	0x100163fc
1000f418:	10016070 	.word	0x10016070
1000f41c:	00000d1c 	.word	0x00000d1c
1000f420:	1000e0f5 	.word	0x1000e0f5
1000f424:	1000e159 	.word	0x1000e159
1000f428:	0000ffff 	.word	0x0000ffff

1000f42c <gapm_profile_added_ind_handler>:
1000f42c:	b510      	push	{r4, lr}
1000f42e:	7843      	ldrb	r3, [r0, #1]
1000f430:	7902      	ldrb	r2, [r0, #4]
1000f432:	7944      	ldrb	r4, [r0, #5]
1000f434:	7800      	ldrb	r0, [r0, #0]
1000f436:	021b      	lsls	r3, r3, #8
1000f438:	4303      	orrs	r3, r0
1000f43a:	2b1b      	cmp	r3, #27
1000f43c:	d104      	bne.n	1000f448 <gapm_profile_added_ind_handler+0x1c>
1000f43e:	2300      	movs	r3, #0
1000f440:	700b      	strb	r3, [r1, #0]
1000f442:	0223      	lsls	r3, r4, #8
1000f444:	4313      	orrs	r3, r2
1000f446:	804b      	strh	r3, [r1, #2]
1000f448:	203b      	movs	r0, #59	; 0x3b
1000f44a:	bd10      	pop	{r4, pc}

1000f44c <gattc_read_req_ind_parser>:
1000f44c:	7843      	ldrb	r3, [r0, #1]
1000f44e:	7802      	ldrb	r2, [r0, #0]
1000f450:	021b      	lsls	r3, r3, #8
1000f452:	4313      	orrs	r3, r2
1000f454:	804b      	strh	r3, [r1, #2]
1000f456:	4770      	bx	lr

1000f458 <gattc_write_req_ind_parser>:
1000f458:	b508      	push	{r3, lr}
1000f45a:	1c13      	adds	r3, r2, #0
1000f45c:	0a00      	lsrs	r0, r0, #8
1000f45e:	8010      	strh	r0, [r2, #0]
1000f460:	784a      	ldrb	r2, [r1, #1]
1000f462:	7808      	ldrb	r0, [r1, #0]
1000f464:	0212      	lsls	r2, r2, #8
1000f466:	4302      	orrs	r2, r0
1000f468:	805a      	strh	r2, [r3, #2]
1000f46a:	78ca      	ldrb	r2, [r1, #3]
1000f46c:	7888      	ldrb	r0, [r1, #2]
1000f46e:	0212      	lsls	r2, r2, #8
1000f470:	4302      	orrs	r2, r0
1000f472:	809a      	strh	r2, [r3, #4]
1000f474:	794a      	ldrb	r2, [r1, #5]
1000f476:	7908      	ldrb	r0, [r1, #4]
1000f478:	0212      	lsls	r2, r2, #8
1000f47a:	4302      	orrs	r2, r0
1000f47c:	80da      	strh	r2, [r3, #6]
1000f47e:	3308      	adds	r3, #8
1000f480:	1c18      	adds	r0, r3, #0
1000f482:	3106      	adds	r1, #6
1000f484:	4b01      	ldr	r3, [pc, #4]	; (1000f48c <gattc_write_req_ind_parser+0x34>)
1000f486:	4798      	blx	r3
1000f488:	bd08      	pop	{r3, pc}
1000f48a:	46c0      	nop			; (mov r8, r8)
1000f48c:	1001169b 	.word	0x1001169b

1000f490 <gattc_att_info_req_parser>:
1000f490:	7843      	ldrb	r3, [r0, #1]
1000f492:	7802      	ldrb	r2, [r0, #0]
1000f494:	021b      	lsls	r3, r3, #8
1000f496:	4313      	orrs	r3, r2
1000f498:	800b      	strh	r3, [r1, #0]
1000f49a:	4770      	bx	lr

1000f49c <gattc_read_cfm>:
1000f49c:	b538      	push	{r3, r4, r5, lr}
1000f49e:	2514      	movs	r5, #20
1000f4a0:	1c1c      	adds	r4, r3, #0
1000f4a2:	4b14      	ldr	r3, [pc, #80]	; (1000f4f4 <gattc_read_cfm+0x58>)
1000f4a4:	70d9      	strb	r1, [r3, #3]
1000f4a6:	4914      	ldr	r1, [pc, #80]	; (1000f4f8 <gattc_read_cfm+0x5c>)
1000f4a8:	701d      	strb	r5, [r3, #0]
1000f4aa:	3d08      	subs	r5, #8
1000f4ac:	705d      	strb	r5, [r3, #1]
1000f4ae:	709d      	strb	r5, [r3, #2]
1000f4b0:	880d      	ldrh	r5, [r1, #0]
1000f4b2:	8809      	ldrh	r1, [r1, #0]
1000f4b4:	7218      	strb	r0, [r3, #8]
1000f4b6:	0a09      	lsrs	r1, r1, #8
1000f4b8:	7159      	strb	r1, [r3, #5]
1000f4ba:	0a00      	lsrs	r0, r0, #8
1000f4bc:	0a21      	lsrs	r1, r4, #8
1000f4be:	711d      	strb	r5, [r3, #4]
1000f4c0:	7258      	strb	r0, [r3, #9]
1000f4c2:	729c      	strb	r4, [r3, #10]
1000f4c4:	72d9      	strb	r1, [r3, #11]
1000f4c6:	731a      	strb	r2, [r3, #12]
1000f4c8:	1c1d      	adds	r5, r3, #0
1000f4ca:	2c00      	cmp	r4, #0
1000f4cc:	d007      	beq.n	1000f4de <gattc_read_cfm+0x42>
1000f4ce:	9904      	ldr	r1, [sp, #16]
1000f4d0:	1c22      	adds	r2, r4, #0
1000f4d2:	480a      	ldr	r0, [pc, #40]	; (1000f4fc <gattc_read_cfm+0x60>)
1000f4d4:	4b0a      	ldr	r3, [pc, #40]	; (1000f500 <gattc_read_cfm+0x64>)
1000f4d6:	340d      	adds	r4, #13
1000f4d8:	4798      	blx	r3
1000f4da:	b2a1      	uxth	r1, r4
1000f4dc:	e001      	b.n	1000f4e2 <gattc_read_cfm+0x46>
1000f4de:	210e      	movs	r1, #14
1000f4e0:	735c      	strb	r4, [r3, #13]
1000f4e2:	1c0b      	adds	r3, r1, #0
1000f4e4:	3b08      	subs	r3, #8
1000f4e6:	71ab      	strb	r3, [r5, #6]
1000f4e8:	121b      	asrs	r3, r3, #8
1000f4ea:	71eb      	strb	r3, [r5, #7]
1000f4ec:	1c28      	adds	r0, r5, #0
1000f4ee:	4b05      	ldr	r3, [pc, #20]	; (1000f504 <gattc_read_cfm+0x68>)
1000f4f0:	4798      	blx	r3
1000f4f2:	bd38      	pop	{r3, r4, r5, pc}
1000f4f4:	100163ec 	.word	0x100163ec
1000f4f8:	1001607c 	.word	0x1001607c
1000f4fc:	100163f9 	.word	0x100163f9
1000f500:	1001169b 	.word	0x1001169b
1000f504:	1000e0f5 	.word	0x1000e0f5

1000f508 <gattc_write_cfm>:
1000f508:	4b0d      	ldr	r3, [pc, #52]	; (1000f540 <gattc_write_cfm+0x38>)
1000f50a:	b510      	push	{r4, lr}
1000f50c:	729a      	strb	r2, [r3, #10]
1000f50e:	2203      	movs	r2, #3
1000f510:	2416      	movs	r4, #22
1000f512:	719a      	strb	r2, [r3, #6]
1000f514:	2200      	movs	r2, #0
1000f516:	70d9      	strb	r1, [r3, #3]
1000f518:	490a      	ldr	r1, [pc, #40]	; (1000f544 <gattc_write_cfm+0x3c>)
1000f51a:	701c      	strb	r4, [r3, #0]
1000f51c:	3c0a      	subs	r4, #10
1000f51e:	705c      	strb	r4, [r3, #1]
1000f520:	709c      	strb	r4, [r3, #2]
1000f522:	880c      	ldrh	r4, [r1, #0]
1000f524:	8809      	ldrh	r1, [r1, #0]
1000f526:	7218      	strb	r0, [r3, #8]
1000f528:	0a09      	lsrs	r1, r1, #8
1000f52a:	0a00      	lsrs	r0, r0, #8
1000f52c:	711c      	strb	r4, [r3, #4]
1000f52e:	7159      	strb	r1, [r3, #5]
1000f530:	7258      	strb	r0, [r3, #9]
1000f532:	71da      	strb	r2, [r3, #7]
1000f534:	1c18      	adds	r0, r3, #0
1000f536:	210b      	movs	r1, #11
1000f538:	4b03      	ldr	r3, [pc, #12]	; (1000f548 <gattc_write_cfm+0x40>)
1000f53a:	4798      	blx	r3
1000f53c:	bd10      	pop	{r4, pc}
1000f53e:	46c0      	nop			; (mov r8, r8)
1000f540:	100163ec 	.word	0x100163ec
1000f544:	1001607c 	.word	0x1001607c
1000f548:	1000e0f5 	.word	0x1000e0f5

1000f54c <gattc_att_info_cfm>:
1000f54c:	b538      	push	{r3, r4, r5, lr}
1000f54e:	4c0e      	ldr	r4, [pc, #56]	; (1000f588 <gattc_att_info_cfm+0x3c>)
1000f550:	2518      	movs	r5, #24
1000f552:	7323      	strb	r3, [r4, #12]
1000f554:	2305      	movs	r3, #5
1000f556:	71a3      	strb	r3, [r4, #6]
1000f558:	2300      	movs	r3, #0
1000f55a:	70e1      	strb	r1, [r4, #3]
1000f55c:	490b      	ldr	r1, [pc, #44]	; (1000f58c <gattc_att_info_cfm+0x40>)
1000f55e:	7025      	strb	r5, [r4, #0]
1000f560:	3d0c      	subs	r5, #12
1000f562:	7065      	strb	r5, [r4, #1]
1000f564:	70a5      	strb	r5, [r4, #2]
1000f566:	880d      	ldrh	r5, [r1, #0]
1000f568:	8809      	ldrh	r1, [r1, #0]
1000f56a:	7220      	strb	r0, [r4, #8]
1000f56c:	0a09      	lsrs	r1, r1, #8
1000f56e:	0a00      	lsrs	r0, r0, #8
1000f570:	7161      	strb	r1, [r4, #5]
1000f572:	7260      	strb	r0, [r4, #9]
1000f574:	72a2      	strb	r2, [r4, #10]
1000f576:	71e3      	strb	r3, [r4, #7]
1000f578:	0a12      	lsrs	r2, r2, #8
1000f57a:	1c20      	adds	r0, r4, #0
1000f57c:	210d      	movs	r1, #13
1000f57e:	4b04      	ldr	r3, [pc, #16]	; (1000f590 <gattc_att_info_cfm+0x44>)
1000f580:	7125      	strb	r5, [r4, #4]
1000f582:	72e2      	strb	r2, [r4, #11]
1000f584:	4798      	blx	r3
1000f586:	bd38      	pop	{r3, r4, r5, pc}
1000f588:	100163ec 	.word	0x100163ec
1000f58c:	1001607c 	.word	0x1001607c
1000f590:	1000e0f5 	.word	0x1000e0f5

1000f594 <gattc_send_evt_cmd_handler>:
1000f594:	b570      	push	{r4, r5, r6, lr}
1000f596:	2610      	movs	r6, #16
1000f598:	ac04      	add	r4, sp, #16
1000f59a:	8825      	ldrh	r5, [r4, #0]
1000f59c:	4c15      	ldr	r4, [pc, #84]	; (1000f5f4 <gattc_send_evt_cmd_handler+0x60>)
1000f59e:	70e2      	strb	r2, [r4, #3]
1000f5a0:	4a15      	ldr	r2, [pc, #84]	; (1000f5f8 <gattc_send_evt_cmd_handler+0x64>)
1000f5a2:	7026      	strb	r6, [r4, #0]
1000f5a4:	3e04      	subs	r6, #4
1000f5a6:	7066      	strb	r6, [r4, #1]
1000f5a8:	70a6      	strb	r6, [r4, #2]
1000f5aa:	8816      	ldrh	r6, [r2, #0]
1000f5ac:	8812      	ldrh	r2, [r2, #0]
1000f5ae:	7220      	strb	r0, [r4, #8]
1000f5b0:	0a12      	lsrs	r2, r2, #8
1000f5b2:	7162      	strb	r2, [r4, #5]
1000f5b4:	4a11      	ldr	r2, [pc, #68]	; (1000f5fc <gattc_send_evt_cmd_handler+0x68>)
1000f5b6:	7321      	strb	r1, [r4, #12]
1000f5b8:	8812      	ldrh	r2, [r2, #0]
1000f5ba:	73a5      	strb	r5, [r4, #14]
1000f5bc:	3201      	adds	r2, #1
1000f5be:	7262      	strb	r2, [r4, #9]
1000f5c0:	1212      	asrs	r2, r2, #8
1000f5c2:	72a2      	strb	r2, [r4, #10]
1000f5c4:	2200      	movs	r2, #0
1000f5c6:	72e2      	strb	r2, [r4, #11]
1000f5c8:	0a0a      	lsrs	r2, r1, #8
1000f5ca:	7362      	strb	r2, [r4, #13]
1000f5cc:	0a2a      	lsrs	r2, r5, #8
1000f5ce:	73e2      	strb	r2, [r4, #15]
1000f5d0:	1c19      	adds	r1, r3, #0
1000f5d2:	1c2a      	adds	r2, r5, #0
1000f5d4:	4b0a      	ldr	r3, [pc, #40]	; (1000f600 <gattc_send_evt_cmd_handler+0x6c>)
1000f5d6:	3510      	adds	r5, #16
1000f5d8:	480a      	ldr	r0, [pc, #40]	; (1000f604 <gattc_send_evt_cmd_handler+0x70>)
1000f5da:	7126      	strb	r6, [r4, #4]
1000f5dc:	4798      	blx	r3
1000f5de:	b2a9      	uxth	r1, r5
1000f5e0:	1c0b      	adds	r3, r1, #0
1000f5e2:	3b08      	subs	r3, #8
1000f5e4:	71a3      	strb	r3, [r4, #6]
1000f5e6:	121b      	asrs	r3, r3, #8
1000f5e8:	71e3      	strb	r3, [r4, #7]
1000f5ea:	1c20      	adds	r0, r4, #0
1000f5ec:	4b06      	ldr	r3, [pc, #24]	; (1000f608 <gattc_send_evt_cmd_handler+0x74>)
1000f5ee:	4798      	blx	r3
1000f5f0:	bd70      	pop	{r4, r5, r6, pc}
1000f5f2:	46c0      	nop			; (mov r8, r8)
1000f5f4:	100163ec 	.word	0x100163ec
1000f5f8:	1001607c 	.word	0x1001607c
1000f5fc:	1001539c 	.word	0x1001539c
1000f600:	1001169b 	.word	0x1001169b
1000f604:	100163fc 	.word	0x100163fc
1000f608:	1000e0f5 	.word	0x1000e0f5

1000f60c <gattc_event_cfm_handler>:
1000f60c:	220e      	movs	r2, #14
1000f60e:	b508      	push	{r3, lr}
1000f610:	4b0b      	ldr	r3, [pc, #44]	; (1000f640 <gattc_event_cfm_handler+0x34>)
1000f612:	701a      	strb	r2, [r3, #0]
1000f614:	3a02      	subs	r2, #2
1000f616:	705a      	strb	r2, [r3, #1]
1000f618:	709a      	strb	r2, [r3, #2]
1000f61a:	4a0a      	ldr	r2, [pc, #40]	; (1000f644 <gattc_event_cfm_handler+0x38>)
1000f61c:	70d8      	strb	r0, [r3, #3]
1000f61e:	8810      	ldrh	r0, [r2, #0]
1000f620:	8812      	ldrh	r2, [r2, #0]
1000f622:	7219      	strb	r1, [r3, #8]
1000f624:	0a12      	lsrs	r2, r2, #8
1000f626:	715a      	strb	r2, [r3, #5]
1000f628:	2202      	movs	r2, #2
1000f62a:	719a      	strb	r2, [r3, #6]
1000f62c:	2200      	movs	r2, #0
1000f62e:	0a09      	lsrs	r1, r1, #8
1000f630:	7118      	strb	r0, [r3, #4]
1000f632:	7259      	strb	r1, [r3, #9]
1000f634:	71da      	strb	r2, [r3, #7]
1000f636:	1c18      	adds	r0, r3, #0
1000f638:	210a      	movs	r1, #10
1000f63a:	4b03      	ldr	r3, [pc, #12]	; (1000f648 <gattc_event_cfm_handler+0x3c>)
1000f63c:	4798      	blx	r3
1000f63e:	bd08      	pop	{r3, pc}
1000f640:	100163ec 	.word	0x100163ec
1000f644:	1001607c 	.word	0x1001607c
1000f648:	1000e0f5 	.word	0x1000e0f5

1000f64c <gattc_disc_svc_ind_parser>:
1000f64c:	b570      	push	{r4, r5, r6, lr}
1000f64e:	1c15      	adds	r5, r2, #0
1000f650:	0a00      	lsrs	r0, r0, #8
1000f652:	8010      	strh	r0, [r2, #0]
1000f654:	784b      	ldrb	r3, [r1, #1]
1000f656:	780a      	ldrb	r2, [r1, #0]
1000f658:	021b      	lsls	r3, r3, #8
1000f65a:	4313      	orrs	r3, r2
1000f65c:	806b      	strh	r3, [r5, #2]
1000f65e:	78cb      	ldrb	r3, [r1, #3]
1000f660:	788a      	ldrb	r2, [r1, #2]
1000f662:	021b      	lsls	r3, r3, #8
1000f664:	4313      	orrs	r3, r2
1000f666:	80ab      	strh	r3, [r5, #4]
1000f668:	790e      	ldrb	r6, [r1, #4]
1000f66a:	4b05      	ldr	r3, [pc, #20]	; (1000f680 <gattc_disc_svc_ind_parser+0x34>)
1000f66c:	1c30      	adds	r0, r6, #0
1000f66e:	1c0c      	adds	r4, r1, #0
1000f670:	4798      	blx	r3
1000f672:	1c32      	adds	r2, r6, #0
1000f674:	71a8      	strb	r0, [r5, #6]
1000f676:	1d61      	adds	r1, r4, #5
1000f678:	1de8      	adds	r0, r5, #7
1000f67a:	4b02      	ldr	r3, [pc, #8]	; (1000f684 <gattc_disc_svc_ind_parser+0x38>)
1000f67c:	4798      	blx	r3
1000f67e:	bd70      	pop	{r4, r5, r6, pc}
1000f680:	1000d3ed 	.word	0x1000d3ed
1000f684:	1001169b 	.word	0x1001169b

1000f688 <gattc_disc_svc_incl_ind_parser>:
1000f688:	b570      	push	{r4, r5, r6, lr}
1000f68a:	1c15      	adds	r5, r2, #0
1000f68c:	0a00      	lsrs	r0, r0, #8
1000f68e:	8010      	strh	r0, [r2, #0]
1000f690:	784b      	ldrb	r3, [r1, #1]
1000f692:	780a      	ldrb	r2, [r1, #0]
1000f694:	021b      	lsls	r3, r3, #8
1000f696:	4313      	orrs	r3, r2
1000f698:	806b      	strh	r3, [r5, #2]
1000f69a:	78cb      	ldrb	r3, [r1, #3]
1000f69c:	788a      	ldrb	r2, [r1, #2]
1000f69e:	021b      	lsls	r3, r3, #8
1000f6a0:	4313      	orrs	r3, r2
1000f6a2:	80ab      	strh	r3, [r5, #4]
1000f6a4:	794b      	ldrb	r3, [r1, #5]
1000f6a6:	790a      	ldrb	r2, [r1, #4]
1000f6a8:	021b      	lsls	r3, r3, #8
1000f6aa:	4313      	orrs	r3, r2
1000f6ac:	80eb      	strh	r3, [r5, #6]
1000f6ae:	798e      	ldrb	r6, [r1, #6]
1000f6b0:	4b05      	ldr	r3, [pc, #20]	; (1000f6c8 <gattc_disc_svc_incl_ind_parser+0x40>)
1000f6b2:	1c30      	adds	r0, r6, #0
1000f6b4:	1c0c      	adds	r4, r1, #0
1000f6b6:	4798      	blx	r3
1000f6b8:	7228      	strb	r0, [r5, #8]
1000f6ba:	1c28      	adds	r0, r5, #0
1000f6bc:	1c32      	adds	r2, r6, #0
1000f6be:	1de1      	adds	r1, r4, #7
1000f6c0:	4b02      	ldr	r3, [pc, #8]	; (1000f6cc <gattc_disc_svc_incl_ind_parser+0x44>)
1000f6c2:	3009      	adds	r0, #9
1000f6c4:	4798      	blx	r3
1000f6c6:	bd70      	pop	{r4, r5, r6, pc}
1000f6c8:	1000d3ed 	.word	0x1000d3ed
1000f6cc:	1001169b 	.word	0x1001169b

1000f6d0 <gattc_disc_char_ind_parser>:
1000f6d0:	b570      	push	{r4, r5, r6, lr}
1000f6d2:	1c15      	adds	r5, r2, #0
1000f6d4:	0a00      	lsrs	r0, r0, #8
1000f6d6:	8010      	strh	r0, [r2, #0]
1000f6d8:	784b      	ldrb	r3, [r1, #1]
1000f6da:	780a      	ldrb	r2, [r1, #0]
1000f6dc:	021b      	lsls	r3, r3, #8
1000f6de:	4313      	orrs	r3, r2
1000f6e0:	806b      	strh	r3, [r5, #2]
1000f6e2:	78cb      	ldrb	r3, [r1, #3]
1000f6e4:	788a      	ldrb	r2, [r1, #2]
1000f6e6:	021b      	lsls	r3, r3, #8
1000f6e8:	4313      	orrs	r3, r2
1000f6ea:	80ab      	strh	r3, [r5, #4]
1000f6ec:	790b      	ldrb	r3, [r1, #4]
1000f6ee:	1c0c      	adds	r4, r1, #0
1000f6f0:	71ab      	strb	r3, [r5, #6]
1000f6f2:	794e      	ldrb	r6, [r1, #5]
1000f6f4:	4b05      	ldr	r3, [pc, #20]	; (1000f70c <gattc_disc_char_ind_parser+0x3c>)
1000f6f6:	1c30      	adds	r0, r6, #0
1000f6f8:	4798      	blx	r3
1000f6fa:	71e8      	strb	r0, [r5, #7]
1000f6fc:	1c28      	adds	r0, r5, #0
1000f6fe:	1c32      	adds	r2, r6, #0
1000f700:	1da1      	adds	r1, r4, #6
1000f702:	4b03      	ldr	r3, [pc, #12]	; (1000f710 <gattc_disc_char_ind_parser+0x40>)
1000f704:	3008      	adds	r0, #8
1000f706:	4798      	blx	r3
1000f708:	bd70      	pop	{r4, r5, r6, pc}
1000f70a:	46c0      	nop			; (mov r8, r8)
1000f70c:	1000d3ed 	.word	0x1000d3ed
1000f710:	1001169b 	.word	0x1001169b

1000f714 <gattc_disc_char_desc_ind_parser>:
1000f714:	b570      	push	{r4, r5, r6, lr}
1000f716:	1c15      	adds	r5, r2, #0
1000f718:	0a00      	lsrs	r0, r0, #8
1000f71a:	8010      	strh	r0, [r2, #0]
1000f71c:	784b      	ldrb	r3, [r1, #1]
1000f71e:	780a      	ldrb	r2, [r1, #0]
1000f720:	021b      	lsls	r3, r3, #8
1000f722:	4313      	orrs	r3, r2
1000f724:	806b      	strh	r3, [r5, #2]
1000f726:	788e      	ldrb	r6, [r1, #2]
1000f728:	4b05      	ldr	r3, [pc, #20]	; (1000f740 <gattc_disc_char_desc_ind_parser+0x2c>)
1000f72a:	1c30      	adds	r0, r6, #0
1000f72c:	1c0c      	adds	r4, r1, #0
1000f72e:	4798      	blx	r3
1000f730:	1c32      	adds	r2, r6, #0
1000f732:	7128      	strb	r0, [r5, #4]
1000f734:	1ce1      	adds	r1, r4, #3
1000f736:	1d68      	adds	r0, r5, #5
1000f738:	4b02      	ldr	r3, [pc, #8]	; (1000f744 <gattc_disc_char_desc_ind_parser+0x30>)
1000f73a:	4798      	blx	r3
1000f73c:	bd70      	pop	{r4, r5, r6, pc}
1000f73e:	46c0      	nop			; (mov r8, r8)
1000f740:	1000d3ed 	.word	0x1000d3ed
1000f744:	1001169b 	.word	0x1001169b

1000f748 <gattc_event_ind_and_notification_parser>:
1000f748:	b510      	push	{r4, lr}
1000f74a:	780c      	ldrb	r4, [r1, #0]
1000f74c:	1c13      	adds	r3, r2, #0
1000f74e:	2c12      	cmp	r4, #18
1000f750:	d10e      	bne.n	1000f770 <gattc_event_ind_and_notification_parser+0x28>
1000f752:	0a00      	lsrs	r0, r0, #8
1000f754:	8010      	strh	r0, [r2, #0]
1000f756:	788a      	ldrb	r2, [r1, #2]
1000f758:	709a      	strb	r2, [r3, #2]
1000f75a:	7948      	ldrb	r0, [r1, #5]
1000f75c:	790c      	ldrb	r4, [r1, #4]
1000f75e:	0200      	lsls	r0, r0, #8
1000f760:	4320      	orrs	r0, r4
1000f762:	8098      	strh	r0, [r3, #4]
1000f764:	3106      	adds	r1, #6
1000f766:	1d98      	adds	r0, r3, #6
1000f768:	4b0b      	ldr	r3, [pc, #44]	; (1000f798 <gattc_event_ind_and_notification_parser+0x50>)
1000f76a:	4798      	blx	r3
1000f76c:	221b      	movs	r2, #27
1000f76e:	e010      	b.n	1000f792 <gattc_event_ind_and_notification_parser+0x4a>
1000f770:	2200      	movs	r2, #0
1000f772:	2c13      	cmp	r4, #19
1000f774:	d10d      	bne.n	1000f792 <gattc_event_ind_and_notification_parser+0x4a>
1000f776:	0a00      	lsrs	r0, r0, #8
1000f778:	8018      	strh	r0, [r3, #0]
1000f77a:	788a      	ldrb	r2, [r1, #2]
1000f77c:	709a      	strb	r2, [r3, #2]
1000f77e:	7908      	ldrb	r0, [r1, #4]
1000f780:	78cc      	ldrb	r4, [r1, #3]
1000f782:	0200      	lsls	r0, r0, #8
1000f784:	4320      	orrs	r0, r4
1000f786:	8098      	strh	r0, [r3, #4]
1000f788:	3106      	adds	r1, #6
1000f78a:	1d98      	adds	r0, r3, #6
1000f78c:	4b02      	ldr	r3, [pc, #8]	; (1000f798 <gattc_event_ind_and_notification_parser+0x50>)
1000f78e:	4798      	blx	r3
1000f790:	221c      	movs	r2, #28
1000f792:	1c10      	adds	r0, r2, #0
1000f794:	bd10      	pop	{r4, pc}
1000f796:	46c0      	nop			; (mov r8, r8)
1000f798:	1001169b 	.word	0x1001169b

1000f79c <gattc_complete_evt_handler>:
1000f79c:	b500      	push	{lr}
1000f79e:	0a00      	lsrs	r0, r0, #8
1000f7a0:	8010      	strh	r0, [r2, #0]
1000f7a2:	7808      	ldrb	r0, [r1, #0]
1000f7a4:	7090      	strb	r0, [r2, #2]
1000f7a6:	784b      	ldrb	r3, [r1, #1]
1000f7a8:	3801      	subs	r0, #1
1000f7aa:	70d3      	strb	r3, [r2, #3]
1000f7ac:	2813      	cmp	r0, #19
1000f7ae:	d82c      	bhi.n	1000f80a <gattc_complete_evt_handler+0x6e>
1000f7b0:	f000 fa58 	bl	1000fc64 <__gnu_thumb1_case_uqi>
1000f7b4:	0a0a0a0c 	.word	0x0a0a0a0c
1000f7b8:	210a0a0a 	.word	0x210a0a0a
1000f7bc:	111f2121 	.word	0x111f2121
1000f7c0:	2b111111 	.word	0x2b111111
1000f7c4:	2919132b 	.word	0x2919132b
1000f7c8:	2017      	movs	r0, #23
1000f7ca:	e01f      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7cc:	2024      	movs	r0, #36	; 0x24
1000f7ce:	2b00      	cmp	r3, #0
1000f7d0:	d11c      	bne.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7d2:	3017      	adds	r0, #23
1000f7d4:	e01a      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7d6:	2025      	movs	r0, #37	; 0x25
1000f7d8:	e018      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7da:	4a0d      	ldr	r2, [pc, #52]	; (1000f810 <gattc_complete_evt_handler+0x74>)
1000f7dc:	201d      	movs	r0, #29
1000f7de:	6813      	ldr	r3, [r2, #0]
1000f7e0:	3b01      	subs	r3, #1
1000f7e2:	6013      	str	r3, [r2, #0]
1000f7e4:	e012      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7e6:	4a0a      	ldr	r2, [pc, #40]	; (1000f810 <gattc_complete_evt_handler+0x74>)
1000f7e8:	201e      	movs	r0, #30
1000f7ea:	6813      	ldr	r3, [r2, #0]
1000f7ec:	3b01      	subs	r3, #1
1000f7ee:	6013      	str	r3, [r2, #0]
1000f7f0:	e00c      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7f2:	2019      	movs	r0, #25
1000f7f4:	e00a      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7f6:	203b      	movs	r0, #59	; 0x3b
1000f7f8:	2b00      	cmp	r3, #0
1000f7fa:	d007      	beq.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f7fc:	2182      	movs	r1, #130	; 0x82
1000f7fe:	0089      	lsls	r1, r1, #2
1000f800:	5453      	strb	r3, [r2, r1]
1000f802:	3823      	subs	r0, #35	; 0x23
1000f804:	e002      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f806:	2021      	movs	r0, #33	; 0x21
1000f808:	e000      	b.n	1000f80c <gattc_complete_evt_handler+0x70>
1000f80a:	2000      	movs	r0, #0
1000f80c:	bd00      	pop	{pc}
1000f80e:	46c0      	nop			; (mov r8, r8)
1000f810:	100153a0 	.word	0x100153a0

1000f814 <gattc_event_mtu_changed_ind_parser>:
1000f814:	0a00      	lsrs	r0, r0, #8
1000f816:	8010      	strh	r0, [r2, #0]
1000f818:	784b      	ldrb	r3, [r1, #1]
1000f81a:	7809      	ldrb	r1, [r1, #0]
1000f81c:	021b      	lsls	r3, r3, #8
1000f81e:	430b      	orrs	r3, r1
1000f820:	8053      	strh	r3, [r2, #2]
1000f822:	4770      	bx	lr

1000f824 <gattc_read_ind_parser>:
1000f824:	0a00      	lsrs	r0, r0, #8
1000f826:	b508      	push	{r3, lr}
1000f828:	8010      	strh	r0, [r2, #0]
1000f82a:	1c13      	adds	r3, r2, #0
1000f82c:	2282      	movs	r2, #130	; 0x82
1000f82e:	2000      	movs	r0, #0
1000f830:	0092      	lsls	r2, r2, #2
1000f832:	5498      	strb	r0, [r3, r2]
1000f834:	784a      	ldrb	r2, [r1, #1]
1000f836:	7808      	ldrb	r0, [r1, #0]
1000f838:	0212      	lsls	r2, r2, #8
1000f83a:	4302      	orrs	r2, r0
1000f83c:	805a      	strh	r2, [r3, #2]
1000f83e:	78ca      	ldrb	r2, [r1, #3]
1000f840:	7888      	ldrb	r0, [r1, #2]
1000f842:	0212      	lsls	r2, r2, #8
1000f844:	4302      	orrs	r2, r0
1000f846:	80da      	strh	r2, [r3, #6]
1000f848:	794a      	ldrb	r2, [r1, #5]
1000f84a:	7908      	ldrb	r0, [r1, #4]
1000f84c:	0212      	lsls	r2, r2, #8
1000f84e:	4302      	orrs	r2, r0
1000f850:	809a      	strh	r2, [r3, #4]
1000f852:	3308      	adds	r3, #8
1000f854:	1c18      	adds	r0, r3, #0
1000f856:	3106      	adds	r1, #6
1000f858:	4b01      	ldr	r3, [pc, #4]	; (1000f860 <gattc_read_ind_parser+0x3c>)
1000f85a:	4798      	blx	r3
1000f85c:	bd08      	pop	{r3, pc}
1000f85e:	46c0      	nop			; (mov r8, r8)
1000f860:	1001169b 	.word	0x1001169b

1000f864 <gattc_svc_changed_cfg_ind_parser>:
1000f864:	0a00      	lsrs	r0, r0, #8
1000f866:	8010      	strh	r0, [r2, #0]
1000f868:	784b      	ldrb	r3, [r1, #1]
1000f86a:	7809      	ldrb	r1, [r1, #0]
1000f86c:	021b      	lsls	r3, r3, #8
1000f86e:	430b      	orrs	r3, r1
1000f870:	8053      	strh	r3, [r2, #2]
1000f872:	4770      	bx	lr

1000f874 <init_gattc_task_module>:
1000f874:	2300      	movs	r3, #0
1000f876:	4a02      	ldr	r2, [pc, #8]	; (1000f880 <init_gattc_task_module+0xc>)
1000f878:	8013      	strh	r3, [r2, #0]
1000f87a:	4a02      	ldr	r2, [pc, #8]	; (1000f884 <init_gattc_task_module+0x10>)
1000f87c:	8013      	strh	r3, [r2, #0]
1000f87e:	4770      	bx	lr
1000f880:	1001539a 	.word	0x1001539a
1000f884:	1001539c 	.word	0x1001539c

1000f888 <gattm_add_svc_req_handler>:
1000f888:	2200      	movs	r2, #0
1000f88a:	210b      	movs	r1, #11
1000f88c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f88e:	1c04      	adds	r4, r0, #0
1000f890:	7943      	ldrb	r3, [r0, #5]
1000f892:	b085      	sub	sp, #20
1000f894:	9301      	str	r3, [sp, #4]
1000f896:	ab02      	add	r3, sp, #8
1000f898:	71da      	strb	r2, [r3, #7]
1000f89a:	4b37      	ldr	r3, [pc, #220]	; (1000f978 <gattm_add_svc_req_handler+0xf0>)
1000f89c:	7059      	strb	r1, [r3, #1]
1000f89e:	7099      	strb	r1, [r3, #2]
1000f8a0:	4936      	ldr	r1, [pc, #216]	; (1000f97c <gattm_add_svc_req_handler+0xf4>)
1000f8a2:	701a      	strb	r2, [r3, #0]
1000f8a4:	8808      	ldrh	r0, [r1, #0]
1000f8a6:	8809      	ldrh	r1, [r1, #0]
1000f8a8:	70da      	strb	r2, [r3, #3]
1000f8aa:	0a09      	lsrs	r1, r1, #8
1000f8ac:	7118      	strb	r0, [r3, #4]
1000f8ae:	7159      	strb	r1, [r3, #5]
1000f8b0:	8821      	ldrh	r1, [r4, #0]
1000f8b2:	7219      	strb	r1, [r3, #8]
1000f8b4:	8821      	ldrh	r1, [r4, #0]
1000f8b6:	0a09      	lsrs	r1, r1, #8
1000f8b8:	7259      	strb	r1, [r3, #9]
1000f8ba:	8861      	ldrh	r1, [r4, #2]
1000f8bc:	7299      	strb	r1, [r3, #10]
1000f8be:	8861      	ldrh	r1, [r4, #2]
1000f8c0:	0a09      	lsrs	r1, r1, #8
1000f8c2:	72d9      	strb	r1, [r3, #11]
1000f8c4:	7921      	ldrb	r1, [r4, #4]
1000f8c6:	7319      	strb	r1, [r3, #12]
1000f8c8:	4669      	mov	r1, sp
1000f8ca:	7909      	ldrb	r1, [r1, #4]
1000f8cc:	7359      	strb	r1, [r3, #13]
1000f8ce:	18a1      	adds	r1, r4, r2
1000f8d0:	7988      	ldrb	r0, [r1, #6]
1000f8d2:	1899      	adds	r1, r3, r2
1000f8d4:	3201      	adds	r2, #1
1000f8d6:	7388      	strb	r0, [r1, #14]
1000f8d8:	2a10      	cmp	r2, #16
1000f8da:	d1f8      	bne.n	1000f8ce <gattm_add_svc_req_handler+0x46>
1000f8dc:	1c27      	adds	r7, r4, #0
1000f8de:	2300      	movs	r3, #0
1000f8e0:	251e      	movs	r5, #30
1000f8e2:	3716      	adds	r7, #22
1000f8e4:	9300      	str	r3, [sp, #0]
1000f8e6:	9b00      	ldr	r3, [sp, #0]
1000f8e8:	9a01      	ldr	r2, [sp, #4]
1000f8ea:	4e23      	ldr	r6, [pc, #140]	; (1000f978 <gattm_add_svc_req_handler+0xf0>)
1000f8ec:	4293      	cmp	r3, r2
1000f8ee:	da21      	bge.n	1000f934 <gattm_add_svc_req_handler+0xac>
1000f8f0:	1c39      	adds	r1, r7, #0
1000f8f2:	1970      	adds	r0, r6, r5
1000f8f4:	2210      	movs	r2, #16
1000f8f6:	4b22      	ldr	r3, [pc, #136]	; (1000f980 <gattm_add_svc_req_handler+0xf8>)
1000f8f8:	4798      	blx	r3
1000f8fa:	1c2b      	adds	r3, r5, #0
1000f8fc:	8a3a      	ldrh	r2, [r7, #16]
1000f8fe:	3310      	adds	r3, #16
1000f900:	b29b      	uxth	r3, r3
1000f902:	54f2      	strb	r2, [r6, r3]
1000f904:	1c2b      	adds	r3, r5, #0
1000f906:	8a3a      	ldrh	r2, [r7, #16]
1000f908:	3311      	adds	r3, #17
1000f90a:	b29b      	uxth	r3, r3
1000f90c:	0a12      	lsrs	r2, r2, #8
1000f90e:	54f2      	strb	r2, [r6, r3]
1000f910:	1c2a      	adds	r2, r5, #0
1000f912:	1c2b      	adds	r3, r5, #0
1000f914:	8a79      	ldrh	r1, [r7, #18]
1000f916:	3212      	adds	r2, #18
1000f918:	b292      	uxth	r2, r2
1000f91a:	54b1      	strb	r1, [r6, r2]
1000f91c:	8a7a      	ldrh	r2, [r7, #18]
1000f91e:	3313      	adds	r3, #19
1000f920:	b29b      	uxth	r3, r3
1000f922:	0a12      	lsrs	r2, r2, #8
1000f924:	54f2      	strb	r2, [r6, r3]
1000f926:	9b00      	ldr	r3, [sp, #0]
1000f928:	3514      	adds	r5, #20
1000f92a:	3301      	adds	r3, #1
1000f92c:	b2ad      	uxth	r5, r5
1000f92e:	9300      	str	r3, [sp, #0]
1000f930:	3714      	adds	r7, #20
1000f932:	e7d8      	b.n	1000f8e6 <gattm_add_svc_req_handler+0x5e>
1000f934:	2114      	movs	r1, #20
1000f936:	4d13      	ldr	r5, [pc, #76]	; (1000f984 <gattm_add_svc_req_handler+0xfc>)
1000f938:	4b13      	ldr	r3, [pc, #76]	; (1000f988 <gattm_add_svc_req_handler+0x100>)
1000f93a:	4351      	muls	r1, r2
1000f93c:	802b      	strh	r3, [r5, #0]
1000f93e:	230b      	movs	r3, #11
1000f940:	311e      	adds	r1, #30
1000f942:	80ab      	strh	r3, [r5, #4]
1000f944:	1c0b      	adds	r3, r1, #0
1000f946:	3b08      	subs	r3, #8
1000f948:	71b3      	strb	r3, [r6, #6]
1000f94a:	121b      	asrs	r3, r3, #8
1000f94c:	71f3      	strb	r3, [r6, #7]
1000f94e:	1c30      	adds	r0, r6, #0
1000f950:	4b0e      	ldr	r3, [pc, #56]	; (1000f98c <gattm_add_svc_req_handler+0x104>)
1000f952:	4798      	blx	r3
1000f954:	ab02      	add	r3, sp, #8
1000f956:	1dde      	adds	r6, r3, #7
1000f958:	1c30      	adds	r0, r6, #0
1000f95a:	4b0d      	ldr	r3, [pc, #52]	; (1000f990 <gattm_add_svc_req_handler+0x108>)
1000f95c:	4798      	blx	r3
1000f95e:	7833      	ldrb	r3, [r6, #0]
1000f960:	20e2      	movs	r0, #226	; 0xe2
1000f962:	2b00      	cmp	r3, #0
1000f964:	d106      	bne.n	1000f974 <gattm_add_svc_req_handler+0xec>
1000f966:	68aa      	ldr	r2, [r5, #8]
1000f968:	7853      	ldrb	r3, [r2, #1]
1000f96a:	7811      	ldrb	r1, [r2, #0]
1000f96c:	021b      	lsls	r3, r3, #8
1000f96e:	430b      	orrs	r3, r1
1000f970:	8023      	strh	r3, [r4, #0]
1000f972:	7890      	ldrb	r0, [r2, #2]
1000f974:	b005      	add	sp, #20
1000f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f978:	100163ec 	.word	0x100163ec
1000f97c:	1001607c 	.word	0x1001607c
1000f980:	1001169b 	.word	0x1001169b
1000f984:	10016070 	.word	0x10016070
1000f988:	00000b01 	.word	0x00000b01
1000f98c:	1000e0f5 	.word	0x1000e0f5
1000f990:	1000e159 	.word	0x1000e159

1000f994 <gattm_add_attribute_req_handler>:
1000f994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f996:	1c1f      	adds	r7, r3, #0
1000f998:	4b16      	ldr	r3, [pc, #88]	; (1000f9f4 <gattm_add_attribute_req_handler+0x60>)
1000f99a:	9100      	str	r1, [sp, #0]
1000f99c:	9201      	str	r2, [sp, #4]
1000f99e:	1c05      	adds	r5, r0, #0
1000f9a0:	7946      	ldrb	r6, [r0, #5]
1000f9a2:	6818      	ldr	r0, [r3, #0]
1000f9a4:	2114      	movs	r1, #20
1000f9a6:	4b14      	ldr	r3, [pc, #80]	; (1000f9f8 <gattm_add_attribute_req_handler+0x64>)
1000f9a8:	382a      	subs	r0, #42	; 0x2a
1000f9aa:	4798      	blx	r3
1000f9ac:	2311      	movs	r3, #17
1000f9ae:	4286      	cmp	r6, r0
1000f9b0:	d21e      	bcs.n	1000f9f0 <gattm_add_attribute_req_handler+0x5c>
1000f9b2:	2414      	movs	r4, #20
1000f9b4:	4366      	muls	r6, r4
1000f9b6:	19a8      	adds	r0, r5, r6
1000f9b8:	2100      	movs	r1, #0
1000f9ba:	2210      	movs	r2, #16
1000f9bc:	4b0f      	ldr	r3, [pc, #60]	; (1000f9fc <gattm_add_attribute_req_handler+0x68>)
1000f9be:	3016      	adds	r0, #22
1000f9c0:	4798      	blx	r3
1000f9c2:	7968      	ldrb	r0, [r5, #5]
1000f9c4:	1c3a      	adds	r2, r7, #0
1000f9c6:	4360      	muls	r0, r4
1000f9c8:	1828      	adds	r0, r5, r0
1000f9ca:	4b0d      	ldr	r3, [pc, #52]	; (1000fa00 <gattm_add_attribute_req_handler+0x6c>)
1000f9cc:	3016      	adds	r0, #22
1000f9ce:	9908      	ldr	r1, [sp, #32]
1000f9d0:	4798      	blx	r3
1000f9d2:	466a      	mov	r2, sp
1000f9d4:	796b      	ldrb	r3, [r5, #5]
1000f9d6:	8812      	ldrh	r2, [r2, #0]
1000f9d8:	435c      	muls	r4, r3
1000f9da:	192c      	adds	r4, r5, r4
1000f9dc:	8522      	strh	r2, [r4, #40]	; 0x28
1000f9de:	466a      	mov	r2, sp
1000f9e0:	8892      	ldrh	r2, [r2, #4]
1000f9e2:	84e2      	strh	r2, [r4, #38]	; 0x26
1000f9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f9e6:	8013      	strh	r3, [r2, #0]
1000f9e8:	796b      	ldrb	r3, [r5, #5]
1000f9ea:	3301      	adds	r3, #1
1000f9ec:	716b      	strb	r3, [r5, #5]
1000f9ee:	2300      	movs	r3, #0
1000f9f0:	1c18      	adds	r0, r3, #0
1000f9f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f9f4:	10015310 	.word	0x10015310
1000f9f8:	1000fc79 	.word	0x1000fc79
1000f9fc:	100116ad 	.word	0x100116ad
1000fa00:	1001169b 	.word	0x1001169b

1000fa04 <gattm_att_set_value_req_handler>:
1000fa04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fa06:	466b      	mov	r3, sp
1000fa08:	1dde      	adds	r6, r3, #7
1000fa0a:	2300      	movs	r3, #0
1000fa0c:	1c0d      	adds	r5, r1, #0
1000fa0e:	210c      	movs	r1, #12
1000fa10:	270b      	movs	r7, #11
1000fa12:	4c17      	ldr	r4, [pc, #92]	; (1000fa70 <gattm_att_set_value_req_handler+0x6c>)
1000fa14:	7033      	strb	r3, [r6, #0]
1000fa16:	70e3      	strb	r3, [r4, #3]
1000fa18:	4b16      	ldr	r3, [pc, #88]	; (1000fa74 <gattm_att_set_value_req_handler+0x70>)
1000fa1a:	7021      	strb	r1, [r4, #0]
1000fa1c:	8819      	ldrh	r1, [r3, #0]
1000fa1e:	881b      	ldrh	r3, [r3, #0]
1000fa20:	7220      	strb	r0, [r4, #8]
1000fa22:	0a1b      	lsrs	r3, r3, #8
1000fa24:	7163      	strb	r3, [r4, #5]
1000fa26:	0a00      	lsrs	r0, r0, #8
1000fa28:	0a2b      	lsrs	r3, r5, #8
1000fa2a:	7121      	strb	r1, [r4, #4]
1000fa2c:	7260      	strb	r0, [r4, #9]
1000fa2e:	1c11      	adds	r1, r2, #0
1000fa30:	72a5      	strb	r5, [r4, #10]
1000fa32:	1c2a      	adds	r2, r5, #0
1000fa34:	72e3      	strb	r3, [r4, #11]
1000fa36:	350c      	adds	r5, #12
1000fa38:	4b0f      	ldr	r3, [pc, #60]	; (1000fa78 <gattm_att_set_value_req_handler+0x74>)
1000fa3a:	4810      	ldr	r0, [pc, #64]	; (1000fa7c <gattm_att_set_value_req_handler+0x78>)
1000fa3c:	7067      	strb	r7, [r4, #1]
1000fa3e:	70a7      	strb	r7, [r4, #2]
1000fa40:	4798      	blx	r3
1000fa42:	b2a9      	uxth	r1, r5
1000fa44:	4b0e      	ldr	r3, [pc, #56]	; (1000fa80 <gattm_att_set_value_req_handler+0x7c>)
1000fa46:	4d0f      	ldr	r5, [pc, #60]	; (1000fa84 <gattm_att_set_value_req_handler+0x80>)
1000fa48:	1c20      	adds	r0, r4, #0
1000fa4a:	802b      	strh	r3, [r5, #0]
1000fa4c:	1c0b      	adds	r3, r1, #0
1000fa4e:	3b08      	subs	r3, #8
1000fa50:	71a3      	strb	r3, [r4, #6]
1000fa52:	121b      	asrs	r3, r3, #8
1000fa54:	71e3      	strb	r3, [r4, #7]
1000fa56:	4b0c      	ldr	r3, [pc, #48]	; (1000fa88 <gattm_att_set_value_req_handler+0x84>)
1000fa58:	80af      	strh	r7, [r5, #4]
1000fa5a:	4798      	blx	r3
1000fa5c:	1c30      	adds	r0, r6, #0
1000fa5e:	4b0b      	ldr	r3, [pc, #44]	; (1000fa8c <gattm_att_set_value_req_handler+0x88>)
1000fa60:	4798      	blx	r3
1000fa62:	7833      	ldrb	r3, [r6, #0]
1000fa64:	20e2      	movs	r0, #226	; 0xe2
1000fa66:	2b00      	cmp	r3, #0
1000fa68:	d101      	bne.n	1000fa6e <gattm_att_set_value_req_handler+0x6a>
1000fa6a:	68ab      	ldr	r3, [r5, #8]
1000fa6c:	7898      	ldrb	r0, [r3, #2]
1000fa6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fa70:	100163ec 	.word	0x100163ec
1000fa74:	1001607c 	.word	0x1001607c
1000fa78:	1001169b 	.word	0x1001169b
1000fa7c:	100163f8 	.word	0x100163f8
1000fa80:	00000b0d 	.word	0x00000b0d
1000fa84:	10016070 	.word	0x10016070
1000fa88:	1000e0f5 	.word	0x1000e0f5
1000fa8c:	1000e159 	.word	0x1000e159

1000fa90 <gattm_att_get_value_req_handler>:
1000fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa92:	b085      	sub	sp, #20
1000fa94:	9201      	str	r2, [sp, #4]
1000fa96:	220a      	movs	r2, #10
1000fa98:	1c04      	adds	r4, r0, #0
1000fa9a:	481d      	ldr	r0, [pc, #116]	; (1000fb10 <gattm_att_get_value_req_handler+0x80>)
1000fa9c:	ab02      	add	r3, sp, #8
1000fa9e:	1dde      	adds	r6, r3, #7
1000faa0:	7002      	strb	r2, [r0, #0]
1000faa2:	2300      	movs	r3, #0
1000faa4:	220b      	movs	r2, #11
1000faa6:	4d1b      	ldr	r5, [pc, #108]	; (1000fb14 <gattm_att_get_value_req_handler+0x84>)
1000faa8:	1c0f      	adds	r7, r1, #0
1000faaa:	8829      	ldrh	r1, [r5, #0]
1000faac:	882d      	ldrh	r5, [r5, #0]
1000faae:	7101      	strb	r1, [r0, #4]
1000fab0:	0a2d      	lsrs	r5, r5, #8
1000fab2:	7145      	strb	r5, [r0, #5]
1000fab4:	0a25      	lsrs	r5, r4, #8
1000fab6:	7245      	strb	r5, [r0, #9]
1000fab8:	4917      	ldr	r1, [pc, #92]	; (1000fb18 <gattm_att_get_value_req_handler+0x88>)
1000faba:	4d18      	ldr	r5, [pc, #96]	; (1000fb1c <gattm_att_get_value_req_handler+0x8c>)
1000fabc:	7033      	strb	r3, [r6, #0]
1000fabe:	7042      	strb	r2, [r0, #1]
1000fac0:	7082      	strb	r2, [r0, #2]
1000fac2:	70c3      	strb	r3, [r0, #3]
1000fac4:	8029      	strh	r1, [r5, #0]
1000fac6:	80aa      	strh	r2, [r5, #4]
1000fac8:	71c3      	strb	r3, [r0, #7]
1000faca:	3a09      	subs	r2, #9
1000facc:	210a      	movs	r1, #10
1000face:	4b14      	ldr	r3, [pc, #80]	; (1000fb20 <gattm_att_get_value_req_handler+0x90>)
1000fad0:	7182      	strb	r2, [r0, #6]
1000fad2:	7204      	strb	r4, [r0, #8]
1000fad4:	4798      	blx	r3
1000fad6:	1c30      	adds	r0, r6, #0
1000fad8:	4b12      	ldr	r3, [pc, #72]	; (1000fb24 <gattm_att_get_value_req_handler+0x94>)
1000fada:	4798      	blx	r3
1000fadc:	7833      	ldrb	r3, [r6, #0]
1000fade:	20e2      	movs	r0, #226	; 0xe2
1000fae0:	2b00      	cmp	r3, #0
1000fae2:	d112      	bne.n	1000fb0a <gattm_att_get_value_req_handler+0x7a>
1000fae4:	68a9      	ldr	r1, [r5, #8]
1000fae6:	9801      	ldr	r0, [sp, #4]
1000fae8:	784d      	ldrb	r5, [r1, #1]
1000faea:	780b      	ldrb	r3, [r1, #0]
1000faec:	78ca      	ldrb	r2, [r1, #3]
1000faee:	022d      	lsls	r5, r5, #8
1000faf0:	431d      	orrs	r5, r3
1000faf2:	788b      	ldrb	r3, [r1, #2]
1000faf4:	0212      	lsls	r2, r2, #8
1000faf6:	431a      	orrs	r2, r3
1000faf8:	803a      	strh	r2, [r7, #0]
1000fafa:	790e      	ldrb	r6, [r1, #4]
1000fafc:	4b0a      	ldr	r3, [pc, #40]	; (1000fb28 <gattm_att_get_value_req_handler+0x98>)
1000fafe:	3105      	adds	r1, #5
1000fb00:	4798      	blx	r3
1000fb02:	20e2      	movs	r0, #226	; 0xe2
1000fb04:	42ac      	cmp	r4, r5
1000fb06:	d100      	bne.n	1000fb0a <gattm_att_get_value_req_handler+0x7a>
1000fb08:	1c30      	adds	r0, r6, #0
1000fb0a:	b005      	add	sp, #20
1000fb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb0e:	46c0      	nop			; (mov r8, r8)
1000fb10:	100163ec 	.word	0x100163ec
1000fb14:	1001607c 	.word	0x1001607c
1000fb18:	00000b0b 	.word	0x00000b0b
1000fb1c:	10016070 	.word	0x10016070
1000fb20:	1000e0f5 	.word	0x1000e0f5
1000fb24:	1000e159 	.word	0x1000e159
1000fb28:	1001169b 	.word	0x1001169b

1000fb2c <htpt_create_db_req_handler>:
1000fb2c:	b570      	push	{r4, r5, r6, lr}
1000fb2e:	b086      	sub	sp, #24
1000fb30:	ac04      	add	r4, sp, #16
1000fb32:	80a3      	strh	r3, [r4, #4]
1000fb34:	4b0b      	ldr	r3, [pc, #44]	; (1000fb64 <htpt_create_db_req_handler+0x38>)
1000fb36:	8062      	strh	r2, [r4, #2]
1000fb38:	1c06      	adds	r6, r0, #0
1000fb3a:	881a      	ldrh	r2, [r3, #0]
1000fb3c:	2308      	movs	r3, #8
1000fb3e:	a80a      	add	r0, sp, #40	; 0x28
1000fb40:	8805      	ldrh	r5, [r0, #0]
1000fb42:	a80b      	add	r0, sp, #44	; 0x2c
1000fb44:	7026      	strb	r6, [r4, #0]
1000fb46:	7061      	strb	r1, [r4, #1]
1000fb48:	80e5      	strh	r5, [r4, #6]
1000fb4a:	7800      	ldrb	r0, [r0, #0]
1000fb4c:	9301      	str	r3, [sp, #4]
1000fb4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000fb50:	9400      	str	r4, [sp, #0]
1000fb52:	9302      	str	r3, [sp, #8]
1000fb54:	b292      	uxth	r2, r2
1000fb56:	211b      	movs	r1, #27
1000fb58:	2300      	movs	r3, #0
1000fb5a:	4c03      	ldr	r4, [pc, #12]	; (1000fb68 <htpt_create_db_req_handler+0x3c>)
1000fb5c:	47a0      	blx	r4
1000fb5e:	b006      	add	sp, #24
1000fb60:	bd70      	pop	{r4, r5, r6, pc}
1000fb62:	46c0      	nop			; (mov r8, r8)
1000fb64:	1001607c 	.word	0x1001607c
1000fb68:	1000f345 	.word	0x1000f345

1000fb6c <htpt_enable_req_handler>:
1000fb6c:	221b      	movs	r2, #27
1000fb6e:	b538      	push	{r3, r4, r5, lr}
1000fb70:	4b0b      	ldr	r3, [pc, #44]	; (1000fba0 <htpt_enable_req_handler+0x34>)
1000fb72:	2400      	movs	r4, #0
1000fb74:	705a      	strb	r2, [r3, #1]
1000fb76:	709a      	strb	r2, [r3, #2]
1000fb78:	4a0a      	ldr	r2, [pc, #40]	; (1000fba4 <htpt_enable_req_handler+0x38>)
1000fb7a:	701c      	strb	r4, [r3, #0]
1000fb7c:	8815      	ldrh	r5, [r2, #0]
1000fb7e:	8812      	ldrh	r2, [r2, #0]
1000fb80:	711d      	strb	r5, [r3, #4]
1000fb82:	0a12      	lsrs	r2, r2, #8
1000fb84:	715a      	strb	r2, [r3, #5]
1000fb86:	2202      	movs	r2, #2
1000fb88:	70dc      	strb	r4, [r3, #3]
1000fb8a:	7218      	strb	r0, [r3, #8]
1000fb8c:	7259      	strb	r1, [r3, #9]
1000fb8e:	719a      	strb	r2, [r3, #6]
1000fb90:	71dc      	strb	r4, [r3, #7]
1000fb92:	1c18      	adds	r0, r3, #0
1000fb94:	210a      	movs	r1, #10
1000fb96:	4b04      	ldr	r3, [pc, #16]	; (1000fba8 <htpt_enable_req_handler+0x3c>)
1000fb98:	4798      	blx	r3
1000fb9a:	1c20      	adds	r0, r4, #0
1000fb9c:	bd38      	pop	{r3, r4, r5, pc}
1000fb9e:	46c0      	nop			; (mov r8, r8)
1000fba0:	100163ec 	.word	0x100163ec
1000fba4:	1001607c 	.word	0x1001607c
1000fba8:	1000e0f5 	.word	0x1000e0f5

1000fbac <htpt_temp_send_req_handler>:
1000fbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fbae:	2502      	movs	r5, #2
1000fbb0:	ac08      	add	r4, sp, #32
1000fbb2:	7826      	ldrb	r6, [r4, #0]
1000fbb4:	4c18      	ldr	r4, [pc, #96]	; (1000fc18 <htpt_temp_send_req_handler+0x6c>)
1000fbb6:	4f19      	ldr	r7, [pc, #100]	; (1000fc1c <htpt_temp_send_req_handler+0x70>)
1000fbb8:	7025      	strb	r5, [r4, #0]
1000fbba:	3519      	adds	r5, #25
1000fbbc:	7065      	strb	r5, [r4, #1]
1000fbbe:	70a5      	strb	r5, [r4, #2]
1000fbc0:	2500      	movs	r5, #0
1000fbc2:	9301      	str	r3, [sp, #4]
1000fbc4:	883b      	ldrh	r3, [r7, #0]
1000fbc6:	883f      	ldrh	r7, [r7, #0]
1000fbc8:	7123      	strb	r3, [r4, #4]
1000fbca:	466b      	mov	r3, sp
1000fbcc:	0a3f      	lsrs	r7, r7, #8
1000fbce:	7167      	strb	r7, [r4, #5]
1000fbd0:	0a07      	lsrs	r7, r0, #8
1000fbd2:	7220      	strb	r0, [r4, #8]
1000fbd4:	7267      	strb	r7, [r4, #9]
1000fbd6:	0c07      	lsrs	r7, r0, #16
1000fbd8:	0e00      	lsrs	r0, r0, #24
1000fbda:	70e5      	strb	r5, [r4, #3]
1000fbdc:	72a7      	strb	r7, [r4, #10]
1000fbde:	72e0      	strb	r0, [r4, #11]
1000fbe0:	8808      	ldrh	r0, [r1, #0]
1000fbe2:	791b      	ldrb	r3, [r3, #4]
1000fbe4:	7320      	strb	r0, [r4, #12]
1000fbe6:	8808      	ldrh	r0, [r1, #0]
1000fbe8:	0a00      	lsrs	r0, r0, #8
1000fbea:	7360      	strb	r0, [r4, #13]
1000fbec:	7888      	ldrb	r0, [r1, #2]
1000fbee:	73a0      	strb	r0, [r4, #14]
1000fbf0:	78c8      	ldrb	r0, [r1, #3]
1000fbf2:	73e0      	strb	r0, [r4, #15]
1000fbf4:	7908      	ldrb	r0, [r1, #4]
1000fbf6:	7420      	strb	r0, [r4, #16]
1000fbf8:	7948      	ldrb	r0, [r1, #5]
1000fbfa:	7460      	strb	r0, [r4, #17]
1000fbfc:	7989      	ldrb	r1, [r1, #6]
1000fbfe:	7522      	strb	r2, [r4, #20]
1000fc00:	74a1      	strb	r1, [r4, #18]
1000fc02:	7563      	strb	r3, [r4, #21]
1000fc04:	2314      	movs	r3, #20
1000fc06:	1c20      	adds	r0, r4, #0
1000fc08:	71a3      	strb	r3, [r4, #6]
1000fc0a:	211c      	movs	r1, #28
1000fc0c:	4b04      	ldr	r3, [pc, #16]	; (1000fc20 <htpt_temp_send_req_handler+0x74>)
1000fc0e:	7626      	strb	r6, [r4, #24]
1000fc10:	71e5      	strb	r5, [r4, #7]
1000fc12:	4798      	blx	r3
1000fc14:	1c28      	adds	r0, r5, #0
1000fc16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fc18:	100163ec 	.word	0x100163ec
1000fc1c:	1001607c 	.word	0x1001607c
1000fc20:	1000e0f5 	.word	0x1000e0f5

1000fc24 <htpt_enable_rsp_handler>:
1000fc24:	780b      	ldrb	r3, [r1, #0]
1000fc26:	7013      	strb	r3, [r2, #0]
1000fc28:	784b      	ldrb	r3, [r1, #1]
1000fc2a:	7053      	strb	r3, [r2, #1]
1000fc2c:	4770      	bx	lr

1000fc2e <htpt_temp_send_rsp_handler>:
1000fc2e:	780b      	ldrb	r3, [r1, #0]
1000fc30:	7013      	strb	r3, [r2, #0]
1000fc32:	4770      	bx	lr

1000fc34 <htpt_meas_intv_upd_rsp_handler>:
1000fc34:	780b      	ldrb	r3, [r1, #0]
1000fc36:	7013      	strb	r3, [r2, #0]
1000fc38:	4770      	bx	lr

1000fc3a <htpt_meas_intv_chg_req_ind_handler>:
1000fc3a:	78cb      	ldrb	r3, [r1, #3]
1000fc3c:	7889      	ldrb	r1, [r1, #2]
1000fc3e:	021b      	lsls	r3, r3, #8
1000fc40:	430b      	orrs	r3, r1
1000fc42:	8013      	strh	r3, [r2, #0]
1000fc44:	4770      	bx	lr

1000fc46 <htpt_cfg_indntf_ind_handler>:
1000fc46:	780b      	ldrb	r3, [r1, #0]
1000fc48:	7013      	strb	r3, [r2, #0]
1000fc4a:	784b      	ldrb	r3, [r1, #1]
1000fc4c:	7053      	strb	r3, [r2, #1]
1000fc4e:	4770      	bx	lr

1000fc50 <__gnu_thumb1_case_sqi>:
1000fc50:	b402      	push	{r1}
1000fc52:	4671      	mov	r1, lr
1000fc54:	0849      	lsrs	r1, r1, #1
1000fc56:	0049      	lsls	r1, r1, #1
1000fc58:	5609      	ldrsb	r1, [r1, r0]
1000fc5a:	0049      	lsls	r1, r1, #1
1000fc5c:	448e      	add	lr, r1
1000fc5e:	bc02      	pop	{r1}
1000fc60:	4770      	bx	lr
1000fc62:	46c0      	nop			; (mov r8, r8)

1000fc64 <__gnu_thumb1_case_uqi>:
1000fc64:	b402      	push	{r1}
1000fc66:	4671      	mov	r1, lr
1000fc68:	0849      	lsrs	r1, r1, #1
1000fc6a:	0049      	lsls	r1, r1, #1
1000fc6c:	5c09      	ldrb	r1, [r1, r0]
1000fc6e:	0049      	lsls	r1, r1, #1
1000fc70:	448e      	add	lr, r1
1000fc72:	bc02      	pop	{r1}
1000fc74:	4770      	bx	lr
1000fc76:	46c0      	nop			; (mov r8, r8)

1000fc78 <__aeabi_uidiv>:
1000fc78:	2200      	movs	r2, #0
1000fc7a:	0843      	lsrs	r3, r0, #1
1000fc7c:	428b      	cmp	r3, r1
1000fc7e:	d374      	bcc.n	1000fd6a <__aeabi_uidiv+0xf2>
1000fc80:	0903      	lsrs	r3, r0, #4
1000fc82:	428b      	cmp	r3, r1
1000fc84:	d35f      	bcc.n	1000fd46 <__aeabi_uidiv+0xce>
1000fc86:	0a03      	lsrs	r3, r0, #8
1000fc88:	428b      	cmp	r3, r1
1000fc8a:	d344      	bcc.n	1000fd16 <__aeabi_uidiv+0x9e>
1000fc8c:	0b03      	lsrs	r3, r0, #12
1000fc8e:	428b      	cmp	r3, r1
1000fc90:	d328      	bcc.n	1000fce4 <__aeabi_uidiv+0x6c>
1000fc92:	0c03      	lsrs	r3, r0, #16
1000fc94:	428b      	cmp	r3, r1
1000fc96:	d30d      	bcc.n	1000fcb4 <__aeabi_uidiv+0x3c>
1000fc98:	22ff      	movs	r2, #255	; 0xff
1000fc9a:	0209      	lsls	r1, r1, #8
1000fc9c:	ba12      	rev	r2, r2
1000fc9e:	0c03      	lsrs	r3, r0, #16
1000fca0:	428b      	cmp	r3, r1
1000fca2:	d302      	bcc.n	1000fcaa <__aeabi_uidiv+0x32>
1000fca4:	1212      	asrs	r2, r2, #8
1000fca6:	0209      	lsls	r1, r1, #8
1000fca8:	d065      	beq.n	1000fd76 <__aeabi_uidiv+0xfe>
1000fcaa:	0b03      	lsrs	r3, r0, #12
1000fcac:	428b      	cmp	r3, r1
1000fcae:	d319      	bcc.n	1000fce4 <__aeabi_uidiv+0x6c>
1000fcb0:	e000      	b.n	1000fcb4 <__aeabi_uidiv+0x3c>
1000fcb2:	0a09      	lsrs	r1, r1, #8
1000fcb4:	0bc3      	lsrs	r3, r0, #15
1000fcb6:	428b      	cmp	r3, r1
1000fcb8:	d301      	bcc.n	1000fcbe <__aeabi_uidiv+0x46>
1000fcba:	03cb      	lsls	r3, r1, #15
1000fcbc:	1ac0      	subs	r0, r0, r3
1000fcbe:	4152      	adcs	r2, r2
1000fcc0:	0b83      	lsrs	r3, r0, #14
1000fcc2:	428b      	cmp	r3, r1
1000fcc4:	d301      	bcc.n	1000fcca <__aeabi_uidiv+0x52>
1000fcc6:	038b      	lsls	r3, r1, #14
1000fcc8:	1ac0      	subs	r0, r0, r3
1000fcca:	4152      	adcs	r2, r2
1000fccc:	0b43      	lsrs	r3, r0, #13
1000fcce:	428b      	cmp	r3, r1
1000fcd0:	d301      	bcc.n	1000fcd6 <__aeabi_uidiv+0x5e>
1000fcd2:	034b      	lsls	r3, r1, #13
1000fcd4:	1ac0      	subs	r0, r0, r3
1000fcd6:	4152      	adcs	r2, r2
1000fcd8:	0b03      	lsrs	r3, r0, #12
1000fcda:	428b      	cmp	r3, r1
1000fcdc:	d301      	bcc.n	1000fce2 <__aeabi_uidiv+0x6a>
1000fcde:	030b      	lsls	r3, r1, #12
1000fce0:	1ac0      	subs	r0, r0, r3
1000fce2:	4152      	adcs	r2, r2
1000fce4:	0ac3      	lsrs	r3, r0, #11
1000fce6:	428b      	cmp	r3, r1
1000fce8:	d301      	bcc.n	1000fcee <__aeabi_uidiv+0x76>
1000fcea:	02cb      	lsls	r3, r1, #11
1000fcec:	1ac0      	subs	r0, r0, r3
1000fcee:	4152      	adcs	r2, r2
1000fcf0:	0a83      	lsrs	r3, r0, #10
1000fcf2:	428b      	cmp	r3, r1
1000fcf4:	d301      	bcc.n	1000fcfa <__aeabi_uidiv+0x82>
1000fcf6:	028b      	lsls	r3, r1, #10
1000fcf8:	1ac0      	subs	r0, r0, r3
1000fcfa:	4152      	adcs	r2, r2
1000fcfc:	0a43      	lsrs	r3, r0, #9
1000fcfe:	428b      	cmp	r3, r1
1000fd00:	d301      	bcc.n	1000fd06 <__aeabi_uidiv+0x8e>
1000fd02:	024b      	lsls	r3, r1, #9
1000fd04:	1ac0      	subs	r0, r0, r3
1000fd06:	4152      	adcs	r2, r2
1000fd08:	0a03      	lsrs	r3, r0, #8
1000fd0a:	428b      	cmp	r3, r1
1000fd0c:	d301      	bcc.n	1000fd12 <__aeabi_uidiv+0x9a>
1000fd0e:	020b      	lsls	r3, r1, #8
1000fd10:	1ac0      	subs	r0, r0, r3
1000fd12:	4152      	adcs	r2, r2
1000fd14:	d2cd      	bcs.n	1000fcb2 <__aeabi_uidiv+0x3a>
1000fd16:	09c3      	lsrs	r3, r0, #7
1000fd18:	428b      	cmp	r3, r1
1000fd1a:	d301      	bcc.n	1000fd20 <__aeabi_uidiv+0xa8>
1000fd1c:	01cb      	lsls	r3, r1, #7
1000fd1e:	1ac0      	subs	r0, r0, r3
1000fd20:	4152      	adcs	r2, r2
1000fd22:	0983      	lsrs	r3, r0, #6
1000fd24:	428b      	cmp	r3, r1
1000fd26:	d301      	bcc.n	1000fd2c <__aeabi_uidiv+0xb4>
1000fd28:	018b      	lsls	r3, r1, #6
1000fd2a:	1ac0      	subs	r0, r0, r3
1000fd2c:	4152      	adcs	r2, r2
1000fd2e:	0943      	lsrs	r3, r0, #5
1000fd30:	428b      	cmp	r3, r1
1000fd32:	d301      	bcc.n	1000fd38 <__aeabi_uidiv+0xc0>
1000fd34:	014b      	lsls	r3, r1, #5
1000fd36:	1ac0      	subs	r0, r0, r3
1000fd38:	4152      	adcs	r2, r2
1000fd3a:	0903      	lsrs	r3, r0, #4
1000fd3c:	428b      	cmp	r3, r1
1000fd3e:	d301      	bcc.n	1000fd44 <__aeabi_uidiv+0xcc>
1000fd40:	010b      	lsls	r3, r1, #4
1000fd42:	1ac0      	subs	r0, r0, r3
1000fd44:	4152      	adcs	r2, r2
1000fd46:	08c3      	lsrs	r3, r0, #3
1000fd48:	428b      	cmp	r3, r1
1000fd4a:	d301      	bcc.n	1000fd50 <__aeabi_uidiv+0xd8>
1000fd4c:	00cb      	lsls	r3, r1, #3
1000fd4e:	1ac0      	subs	r0, r0, r3
1000fd50:	4152      	adcs	r2, r2
1000fd52:	0883      	lsrs	r3, r0, #2
1000fd54:	428b      	cmp	r3, r1
1000fd56:	d301      	bcc.n	1000fd5c <__aeabi_uidiv+0xe4>
1000fd58:	008b      	lsls	r3, r1, #2
1000fd5a:	1ac0      	subs	r0, r0, r3
1000fd5c:	4152      	adcs	r2, r2
1000fd5e:	0843      	lsrs	r3, r0, #1
1000fd60:	428b      	cmp	r3, r1
1000fd62:	d301      	bcc.n	1000fd68 <__aeabi_uidiv+0xf0>
1000fd64:	004b      	lsls	r3, r1, #1
1000fd66:	1ac0      	subs	r0, r0, r3
1000fd68:	4152      	adcs	r2, r2
1000fd6a:	1a41      	subs	r1, r0, r1
1000fd6c:	d200      	bcs.n	1000fd70 <__aeabi_uidiv+0xf8>
1000fd6e:	4601      	mov	r1, r0
1000fd70:	4152      	adcs	r2, r2
1000fd72:	4610      	mov	r0, r2
1000fd74:	4770      	bx	lr
1000fd76:	e7ff      	b.n	1000fd78 <__aeabi_uidiv+0x100>
1000fd78:	b501      	push	{r0, lr}
1000fd7a:	2000      	movs	r0, #0
1000fd7c:	f000 f806 	bl	1000fd8c <__aeabi_idiv0>
1000fd80:	bd02      	pop	{r1, pc}
1000fd82:	46c0      	nop			; (mov r8, r8)

1000fd84 <__aeabi_uidivmod>:
1000fd84:	2900      	cmp	r1, #0
1000fd86:	d0f7      	beq.n	1000fd78 <__aeabi_uidiv+0x100>
1000fd88:	e776      	b.n	1000fc78 <__aeabi_uidiv>
1000fd8a:	4770      	bx	lr

1000fd8c <__aeabi_idiv0>:
1000fd8c:	4770      	bx	lr
1000fd8e:	46c0      	nop			; (mov r8, r8)

1000fd90 <__aeabi_f2uiz>:
1000fd90:	219e      	movs	r1, #158	; 0x9e
1000fd92:	b510      	push	{r4, lr}
1000fd94:	05c9      	lsls	r1, r1, #23
1000fd96:	1c04      	adds	r4, r0, #0
1000fd98:	f001 fa64 	bl	10011264 <__aeabi_fcmpge>
1000fd9c:	2800      	cmp	r0, #0
1000fd9e:	d103      	bne.n	1000fda8 <__aeabi_f2uiz+0x18>
1000fda0:	1c20      	adds	r0, r4, #0
1000fda2:	f000 fac5 	bl	10010330 <__aeabi_f2iz>
1000fda6:	bd10      	pop	{r4, pc}
1000fda8:	219e      	movs	r1, #158	; 0x9e
1000fdaa:	1c20      	adds	r0, r4, #0
1000fdac:	05c9      	lsls	r1, r1, #23
1000fdae:	f000 f939 	bl	10010024 <__aeabi_fsub>
1000fdb2:	f000 fabd 	bl	10010330 <__aeabi_f2iz>
1000fdb6:	2380      	movs	r3, #128	; 0x80
1000fdb8:	061b      	lsls	r3, r3, #24
1000fdba:	469c      	mov	ip, r3
1000fdbc:	4460      	add	r0, ip
1000fdbe:	e7f2      	b.n	1000fda6 <__aeabi_f2uiz+0x16>

1000fdc0 <__aeabi_d2uiz>:
1000fdc0:	b570      	push	{r4, r5, r6, lr}
1000fdc2:	2200      	movs	r2, #0
1000fdc4:	4b0c      	ldr	r3, [pc, #48]	; (1000fdf8 <__aeabi_d2uiz+0x38>)
1000fdc6:	0004      	movs	r4, r0
1000fdc8:	000d      	movs	r5, r1
1000fdca:	f001 fa11 	bl	100111f0 <__aeabi_dcmpge>
1000fdce:	2800      	cmp	r0, #0
1000fdd0:	d104      	bne.n	1000fddc <__aeabi_d2uiz+0x1c>
1000fdd2:	0020      	movs	r0, r4
1000fdd4:	0029      	movs	r1, r5
1000fdd6:	f001 f89b 	bl	10010f10 <__aeabi_d2iz>
1000fdda:	bd70      	pop	{r4, r5, r6, pc}
1000fddc:	4b06      	ldr	r3, [pc, #24]	; (1000fdf8 <__aeabi_d2uiz+0x38>)
1000fdde:	2200      	movs	r2, #0
1000fde0:	0020      	movs	r0, r4
1000fde2:	0029      	movs	r1, r5
1000fde4:	f000 fd40 	bl	10010868 <__aeabi_dsub>
1000fde8:	f001 f892 	bl	10010f10 <__aeabi_d2iz>
1000fdec:	2380      	movs	r3, #128	; 0x80
1000fdee:	061b      	lsls	r3, r3, #24
1000fdf0:	469c      	mov	ip, r3
1000fdf2:	4460      	add	r0, ip
1000fdf4:	e7f1      	b.n	1000fdda <__aeabi_d2uiz+0x1a>
1000fdf6:	46c0      	nop			; (mov r8, r8)
1000fdf8:	41e00000 	.word	0x41e00000

1000fdfc <__aeabi_fmul>:
1000fdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdfe:	4657      	mov	r7, sl
1000fe00:	464e      	mov	r6, r9
1000fe02:	4645      	mov	r5, r8
1000fe04:	0043      	lsls	r3, r0, #1
1000fe06:	b4e0      	push	{r5, r6, r7}
1000fe08:	0246      	lsls	r6, r0, #9
1000fe0a:	4688      	mov	r8, r1
1000fe0c:	0a76      	lsrs	r6, r6, #9
1000fe0e:	0e1f      	lsrs	r7, r3, #24
1000fe10:	0fc4      	lsrs	r4, r0, #31
1000fe12:	2f00      	cmp	r7, #0
1000fe14:	d047      	beq.n	1000fea6 <__aeabi_fmul+0xaa>
1000fe16:	2fff      	cmp	r7, #255	; 0xff
1000fe18:	d025      	beq.n	1000fe66 <__aeabi_fmul+0x6a>
1000fe1a:	2300      	movs	r3, #0
1000fe1c:	2580      	movs	r5, #128	; 0x80
1000fe1e:	469a      	mov	sl, r3
1000fe20:	4699      	mov	r9, r3
1000fe22:	00f6      	lsls	r6, r6, #3
1000fe24:	04ed      	lsls	r5, r5, #19
1000fe26:	432e      	orrs	r6, r5
1000fe28:	3f7f      	subs	r7, #127	; 0x7f
1000fe2a:	4643      	mov	r3, r8
1000fe2c:	4642      	mov	r2, r8
1000fe2e:	025d      	lsls	r5, r3, #9
1000fe30:	0fd2      	lsrs	r2, r2, #31
1000fe32:	005b      	lsls	r3, r3, #1
1000fe34:	0a6d      	lsrs	r5, r5, #9
1000fe36:	0e1b      	lsrs	r3, r3, #24
1000fe38:	4690      	mov	r8, r2
1000fe3a:	d040      	beq.n	1000febe <__aeabi_fmul+0xc2>
1000fe3c:	2bff      	cmp	r3, #255	; 0xff
1000fe3e:	d039      	beq.n	1000feb4 <__aeabi_fmul+0xb8>
1000fe40:	2280      	movs	r2, #128	; 0x80
1000fe42:	2000      	movs	r0, #0
1000fe44:	00ed      	lsls	r5, r5, #3
1000fe46:	04d2      	lsls	r2, r2, #19
1000fe48:	4315      	orrs	r5, r2
1000fe4a:	3b7f      	subs	r3, #127	; 0x7f
1000fe4c:	18fb      	adds	r3, r7, r3
1000fe4e:	4642      	mov	r2, r8
1000fe50:	4657      	mov	r7, sl
1000fe52:	1c59      	adds	r1, r3, #1
1000fe54:	4062      	eors	r2, r4
1000fe56:	468c      	mov	ip, r1
1000fe58:	4307      	orrs	r7, r0
1000fe5a:	2f0f      	cmp	r7, #15
1000fe5c:	d85c      	bhi.n	1000ff18 <__aeabi_fmul+0x11c>
1000fe5e:	496f      	ldr	r1, [pc, #444]	; (1001001c <__aeabi_fmul+0x220>)
1000fe60:	00bf      	lsls	r7, r7, #2
1000fe62:	59c9      	ldr	r1, [r1, r7]
1000fe64:	468f      	mov	pc, r1
1000fe66:	2e00      	cmp	r6, #0
1000fe68:	d145      	bne.n	1000fef6 <__aeabi_fmul+0xfa>
1000fe6a:	2308      	movs	r3, #8
1000fe6c:	469a      	mov	sl, r3
1000fe6e:	3b06      	subs	r3, #6
1000fe70:	4699      	mov	r9, r3
1000fe72:	e7da      	b.n	1000fe2a <__aeabi_fmul+0x2e>
1000fe74:	4642      	mov	r2, r8
1000fe76:	2802      	cmp	r0, #2
1000fe78:	d02d      	beq.n	1000fed6 <__aeabi_fmul+0xda>
1000fe7a:	2803      	cmp	r0, #3
1000fe7c:	d100      	bne.n	1000fe80 <__aeabi_fmul+0x84>
1000fe7e:	e0c3      	b.n	10010008 <__aeabi_fmul+0x20c>
1000fe80:	2801      	cmp	r0, #1
1000fe82:	d000      	beq.n	1000fe86 <__aeabi_fmul+0x8a>
1000fe84:	e0a2      	b.n	1000ffcc <__aeabi_fmul+0x1d0>
1000fe86:	2500      	movs	r5, #0
1000fe88:	2600      	movs	r6, #0
1000fe8a:	4002      	ands	r2, r0
1000fe8c:	b2d4      	uxtb	r4, r2
1000fe8e:	0276      	lsls	r6, r6, #9
1000fe90:	05ed      	lsls	r5, r5, #23
1000fe92:	0a76      	lsrs	r6, r6, #9
1000fe94:	432e      	orrs	r6, r5
1000fe96:	07e4      	lsls	r4, r4, #31
1000fe98:	4326      	orrs	r6, r4
1000fe9a:	0030      	movs	r0, r6
1000fe9c:	bc1c      	pop	{r2, r3, r4}
1000fe9e:	4690      	mov	r8, r2
1000fea0:	4699      	mov	r9, r3
1000fea2:	46a2      	mov	sl, r4
1000fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fea6:	2e00      	cmp	r6, #0
1000fea8:	d11a      	bne.n	1000fee0 <__aeabi_fmul+0xe4>
1000feaa:	2304      	movs	r3, #4
1000feac:	469a      	mov	sl, r3
1000feae:	3b03      	subs	r3, #3
1000feb0:	4699      	mov	r9, r3
1000feb2:	e7ba      	b.n	1000fe2a <__aeabi_fmul+0x2e>
1000feb4:	002a      	movs	r2, r5
1000feb6:	1e51      	subs	r1, r2, #1
1000feb8:	418a      	sbcs	r2, r1
1000feba:	1c90      	adds	r0, r2, #2
1000febc:	e7c6      	b.n	1000fe4c <__aeabi_fmul+0x50>
1000febe:	2001      	movs	r0, #1
1000fec0:	2d00      	cmp	r5, #0
1000fec2:	d0c3      	beq.n	1000fe4c <__aeabi_fmul+0x50>
1000fec4:	0028      	movs	r0, r5
1000fec6:	f001 f9d7 	bl	10011278 <__clzsi2>
1000feca:	1f43      	subs	r3, r0, #5
1000fecc:	3076      	adds	r0, #118	; 0x76
1000fece:	409d      	lsls	r5, r3
1000fed0:	4243      	negs	r3, r0
1000fed2:	2000      	movs	r0, #0
1000fed4:	e7ba      	b.n	1000fe4c <__aeabi_fmul+0x50>
1000fed6:	2401      	movs	r4, #1
1000fed8:	25ff      	movs	r5, #255	; 0xff
1000feda:	4014      	ands	r4, r2
1000fedc:	2600      	movs	r6, #0
1000fede:	e7d6      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000fee0:	0030      	movs	r0, r6
1000fee2:	f001 f9c9 	bl	10011278 <__clzsi2>
1000fee6:	1f43      	subs	r3, r0, #5
1000fee8:	409e      	lsls	r6, r3
1000feea:	2300      	movs	r3, #0
1000feec:	3076      	adds	r0, #118	; 0x76
1000feee:	4247      	negs	r7, r0
1000fef0:	469a      	mov	sl, r3
1000fef2:	4699      	mov	r9, r3
1000fef4:	e799      	b.n	1000fe2a <__aeabi_fmul+0x2e>
1000fef6:	230c      	movs	r3, #12
1000fef8:	469a      	mov	sl, r3
1000fefa:	3b09      	subs	r3, #9
1000fefc:	4699      	mov	r9, r3
1000fefe:	e794      	b.n	1000fe2a <__aeabi_fmul+0x2e>
1000ff00:	2680      	movs	r6, #128	; 0x80
1000ff02:	2400      	movs	r4, #0
1000ff04:	03f6      	lsls	r6, r6, #15
1000ff06:	25ff      	movs	r5, #255	; 0xff
1000ff08:	e7c1      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000ff0a:	0035      	movs	r5, r6
1000ff0c:	4648      	mov	r0, r9
1000ff0e:	e7b2      	b.n	1000fe76 <__aeabi_fmul+0x7a>
1000ff10:	0035      	movs	r5, r6
1000ff12:	0022      	movs	r2, r4
1000ff14:	4648      	mov	r0, r9
1000ff16:	e7ae      	b.n	1000fe76 <__aeabi_fmul+0x7a>
1000ff18:	0429      	lsls	r1, r5, #16
1000ff1a:	0c09      	lsrs	r1, r1, #16
1000ff1c:	0008      	movs	r0, r1
1000ff1e:	0c37      	lsrs	r7, r6, #16
1000ff20:	0436      	lsls	r6, r6, #16
1000ff22:	0c36      	lsrs	r6, r6, #16
1000ff24:	0c2c      	lsrs	r4, r5, #16
1000ff26:	4379      	muls	r1, r7
1000ff28:	4370      	muls	r0, r6
1000ff2a:	4367      	muls	r7, r4
1000ff2c:	4374      	muls	r4, r6
1000ff2e:	0c06      	lsrs	r6, r0, #16
1000ff30:	1864      	adds	r4, r4, r1
1000ff32:	1936      	adds	r6, r6, r4
1000ff34:	42b1      	cmp	r1, r6
1000ff36:	d903      	bls.n	1000ff40 <__aeabi_fmul+0x144>
1000ff38:	2180      	movs	r1, #128	; 0x80
1000ff3a:	0249      	lsls	r1, r1, #9
1000ff3c:	4688      	mov	r8, r1
1000ff3e:	4447      	add	r7, r8
1000ff40:	0400      	lsls	r0, r0, #16
1000ff42:	0c00      	lsrs	r0, r0, #16
1000ff44:	0431      	lsls	r1, r6, #16
1000ff46:	1809      	adds	r1, r1, r0
1000ff48:	018d      	lsls	r5, r1, #6
1000ff4a:	1e68      	subs	r0, r5, #1
1000ff4c:	4185      	sbcs	r5, r0
1000ff4e:	0e89      	lsrs	r1, r1, #26
1000ff50:	4329      	orrs	r1, r5
1000ff52:	0c35      	lsrs	r5, r6, #16
1000ff54:	19ed      	adds	r5, r5, r7
1000ff56:	01ad      	lsls	r5, r5, #6
1000ff58:	430d      	orrs	r5, r1
1000ff5a:	0129      	lsls	r1, r5, #4
1000ff5c:	d504      	bpl.n	1000ff68 <__aeabi_fmul+0x16c>
1000ff5e:	2301      	movs	r3, #1
1000ff60:	0869      	lsrs	r1, r5, #1
1000ff62:	401d      	ands	r5, r3
1000ff64:	4663      	mov	r3, ip
1000ff66:	430d      	orrs	r5, r1
1000ff68:	0019      	movs	r1, r3
1000ff6a:	317f      	adds	r1, #127	; 0x7f
1000ff6c:	2900      	cmp	r1, #0
1000ff6e:	dd25      	ble.n	1000ffbc <__aeabi_fmul+0x1c0>
1000ff70:	0768      	lsls	r0, r5, #29
1000ff72:	d004      	beq.n	1000ff7e <__aeabi_fmul+0x182>
1000ff74:	200f      	movs	r0, #15
1000ff76:	4028      	ands	r0, r5
1000ff78:	2804      	cmp	r0, #4
1000ff7a:	d000      	beq.n	1000ff7e <__aeabi_fmul+0x182>
1000ff7c:	3504      	adds	r5, #4
1000ff7e:	0128      	lsls	r0, r5, #4
1000ff80:	d503      	bpl.n	1000ff8a <__aeabi_fmul+0x18e>
1000ff82:	4927      	ldr	r1, [pc, #156]	; (10010020 <__aeabi_fmul+0x224>)
1000ff84:	3380      	adds	r3, #128	; 0x80
1000ff86:	400d      	ands	r5, r1
1000ff88:	0019      	movs	r1, r3
1000ff8a:	29fe      	cmp	r1, #254	; 0xfe
1000ff8c:	dca3      	bgt.n	1000fed6 <__aeabi_fmul+0xda>
1000ff8e:	2401      	movs	r4, #1
1000ff90:	01ad      	lsls	r5, r5, #6
1000ff92:	0a6e      	lsrs	r6, r5, #9
1000ff94:	4014      	ands	r4, r2
1000ff96:	b2cd      	uxtb	r5, r1
1000ff98:	e779      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000ff9a:	2080      	movs	r0, #128	; 0x80
1000ff9c:	03c0      	lsls	r0, r0, #15
1000ff9e:	4206      	tst	r6, r0
1000ffa0:	d007      	beq.n	1000ffb2 <__aeabi_fmul+0x1b6>
1000ffa2:	4205      	tst	r5, r0
1000ffa4:	d105      	bne.n	1000ffb2 <__aeabi_fmul+0x1b6>
1000ffa6:	4328      	orrs	r0, r5
1000ffa8:	0246      	lsls	r6, r0, #9
1000ffaa:	0a76      	lsrs	r6, r6, #9
1000ffac:	4644      	mov	r4, r8
1000ffae:	25ff      	movs	r5, #255	; 0xff
1000ffb0:	e76d      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000ffb2:	4306      	orrs	r6, r0
1000ffb4:	0276      	lsls	r6, r6, #9
1000ffb6:	0a76      	lsrs	r6, r6, #9
1000ffb8:	25ff      	movs	r5, #255	; 0xff
1000ffba:	e768      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000ffbc:	2401      	movs	r4, #1
1000ffbe:	1a61      	subs	r1, r4, r1
1000ffc0:	291b      	cmp	r1, #27
1000ffc2:	dd05      	ble.n	1000ffd0 <__aeabi_fmul+0x1d4>
1000ffc4:	4014      	ands	r4, r2
1000ffc6:	2500      	movs	r5, #0
1000ffc8:	2600      	movs	r6, #0
1000ffca:	e760      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000ffcc:	4663      	mov	r3, ip
1000ffce:	e7cb      	b.n	1000ff68 <__aeabi_fmul+0x16c>
1000ffd0:	002e      	movs	r6, r5
1000ffd2:	2320      	movs	r3, #32
1000ffd4:	40ce      	lsrs	r6, r1
1000ffd6:	1a59      	subs	r1, r3, r1
1000ffd8:	408d      	lsls	r5, r1
1000ffda:	1e6b      	subs	r3, r5, #1
1000ffdc:	419d      	sbcs	r5, r3
1000ffde:	432e      	orrs	r6, r5
1000ffe0:	0773      	lsls	r3, r6, #29
1000ffe2:	d004      	beq.n	1000ffee <__aeabi_fmul+0x1f2>
1000ffe4:	230f      	movs	r3, #15
1000ffe6:	4033      	ands	r3, r6
1000ffe8:	2b04      	cmp	r3, #4
1000ffea:	d000      	beq.n	1000ffee <__aeabi_fmul+0x1f2>
1000ffec:	3604      	adds	r6, #4
1000ffee:	0173      	lsls	r3, r6, #5
1000fff0:	d504      	bpl.n	1000fffc <__aeabi_fmul+0x200>
1000fff2:	2401      	movs	r4, #1
1000fff4:	2501      	movs	r5, #1
1000fff6:	4014      	ands	r4, r2
1000fff8:	2600      	movs	r6, #0
1000fffa:	e748      	b.n	1000fe8e <__aeabi_fmul+0x92>
1000fffc:	2401      	movs	r4, #1
1000fffe:	01b6      	lsls	r6, r6, #6
10010000:	0a76      	lsrs	r6, r6, #9
10010002:	4014      	ands	r4, r2
10010004:	2500      	movs	r5, #0
10010006:	e742      	b.n	1000fe8e <__aeabi_fmul+0x92>
10010008:	2680      	movs	r6, #128	; 0x80
1001000a:	2401      	movs	r4, #1
1001000c:	03f6      	lsls	r6, r6, #15
1001000e:	432e      	orrs	r6, r5
10010010:	0276      	lsls	r6, r6, #9
10010012:	0a76      	lsrs	r6, r6, #9
10010014:	4014      	ands	r4, r2
10010016:	25ff      	movs	r5, #255	; 0xff
10010018:	e739      	b.n	1000fe8e <__aeabi_fmul+0x92>
1001001a:	46c0      	nop			; (mov r8, r8)
1001001c:	10013700 	.word	0x10013700
10010020:	f7ffffff 	.word	0xf7ffffff

10010024 <__aeabi_fsub>:
10010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010026:	024a      	lsls	r2, r1, #9
10010028:	004e      	lsls	r6, r1, #1
1001002a:	0243      	lsls	r3, r0, #9
1001002c:	0044      	lsls	r4, r0, #1
1001002e:	0e24      	lsrs	r4, r4, #24
10010030:	0fc5      	lsrs	r5, r0, #31
10010032:	099b      	lsrs	r3, r3, #6
10010034:	0e36      	lsrs	r6, r6, #24
10010036:	0fc9      	lsrs	r1, r1, #31
10010038:	0992      	lsrs	r2, r2, #6
1001003a:	2eff      	cmp	r6, #255	; 0xff
1001003c:	d100      	bne.n	10010040 <__aeabi_fsub+0x1c>
1001003e:	e083      	b.n	10010148 <__aeabi_fsub+0x124>
10010040:	2001      	movs	r0, #1
10010042:	4041      	eors	r1, r0
10010044:	1ba0      	subs	r0, r4, r6
10010046:	42a9      	cmp	r1, r5
10010048:	d05c      	beq.n	10010104 <__aeabi_fsub+0xe0>
1001004a:	2800      	cmp	r0, #0
1001004c:	dc00      	bgt.n	10010050 <__aeabi_fsub+0x2c>
1001004e:	e095      	b.n	1001017c <__aeabi_fsub+0x158>
10010050:	2e00      	cmp	r6, #0
10010052:	d11c      	bne.n	1001008e <__aeabi_fsub+0x6a>
10010054:	2a00      	cmp	r2, #0
10010056:	d000      	beq.n	1001005a <__aeabi_fsub+0x36>
10010058:	e081      	b.n	1001015e <__aeabi_fsub+0x13a>
1001005a:	075a      	lsls	r2, r3, #29
1001005c:	d004      	beq.n	10010068 <__aeabi_fsub+0x44>
1001005e:	220f      	movs	r2, #15
10010060:	401a      	ands	r2, r3
10010062:	2a04      	cmp	r2, #4
10010064:	d000      	beq.n	10010068 <__aeabi_fsub+0x44>
10010066:	3304      	adds	r3, #4
10010068:	015a      	lsls	r2, r3, #5
1001006a:	d53b      	bpl.n	100100e4 <__aeabi_fsub+0xc0>
1001006c:	3401      	adds	r4, #1
1001006e:	2cff      	cmp	r4, #255	; 0xff
10010070:	d100      	bne.n	10010074 <__aeabi_fsub+0x50>
10010072:	e091      	b.n	10010198 <__aeabi_fsub+0x174>
10010074:	2001      	movs	r0, #1
10010076:	019b      	lsls	r3, r3, #6
10010078:	0a5b      	lsrs	r3, r3, #9
1001007a:	b2e4      	uxtb	r4, r4
1001007c:	4005      	ands	r5, r0
1001007e:	025b      	lsls	r3, r3, #9
10010080:	05e4      	lsls	r4, r4, #23
10010082:	0a5b      	lsrs	r3, r3, #9
10010084:	07ed      	lsls	r5, r5, #31
10010086:	4323      	orrs	r3, r4
10010088:	432b      	orrs	r3, r5
1001008a:	0018      	movs	r0, r3
1001008c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001008e:	2cff      	cmp	r4, #255	; 0xff
10010090:	d0e3      	beq.n	1001005a <__aeabi_fsub+0x36>
10010092:	2180      	movs	r1, #128	; 0x80
10010094:	04c9      	lsls	r1, r1, #19
10010096:	430a      	orrs	r2, r1
10010098:	281b      	cmp	r0, #27
1001009a:	dd00      	ble.n	1001009e <__aeabi_fsub+0x7a>
1001009c:	e090      	b.n	100101c0 <__aeabi_fsub+0x19c>
1001009e:	0016      	movs	r6, r2
100100a0:	2120      	movs	r1, #32
100100a2:	40c6      	lsrs	r6, r0
100100a4:	1a08      	subs	r0, r1, r0
100100a6:	4082      	lsls	r2, r0
100100a8:	1e51      	subs	r1, r2, #1
100100aa:	418a      	sbcs	r2, r1
100100ac:	4332      	orrs	r2, r6
100100ae:	1a9b      	subs	r3, r3, r2
100100b0:	015a      	lsls	r2, r3, #5
100100b2:	d515      	bpl.n	100100e0 <__aeabi_fsub+0xbc>
100100b4:	019b      	lsls	r3, r3, #6
100100b6:	099e      	lsrs	r6, r3, #6
100100b8:	0030      	movs	r0, r6
100100ba:	f001 f8dd 	bl	10011278 <__clzsi2>
100100be:	3805      	subs	r0, #5
100100c0:	4086      	lsls	r6, r0
100100c2:	4284      	cmp	r4, r0
100100c4:	dc6c      	bgt.n	100101a0 <__aeabi_fsub+0x17c>
100100c6:	1b04      	subs	r4, r0, r4
100100c8:	0033      	movs	r3, r6
100100ca:	2020      	movs	r0, #32
100100cc:	3401      	adds	r4, #1
100100ce:	40e3      	lsrs	r3, r4
100100d0:	1b04      	subs	r4, r0, r4
100100d2:	40a6      	lsls	r6, r4
100100d4:	1e72      	subs	r2, r6, #1
100100d6:	4196      	sbcs	r6, r2
100100d8:	2400      	movs	r4, #0
100100da:	4333      	orrs	r3, r6
100100dc:	e7bd      	b.n	1001005a <__aeabi_fsub+0x36>
100100de:	000d      	movs	r5, r1
100100e0:	075a      	lsls	r2, r3, #29
100100e2:	d1bc      	bne.n	1001005e <__aeabi_fsub+0x3a>
100100e4:	08df      	lsrs	r7, r3, #3
100100e6:	2301      	movs	r3, #1
100100e8:	401d      	ands	r5, r3
100100ea:	2cff      	cmp	r4, #255	; 0xff
100100ec:	d133      	bne.n	10010156 <__aeabi_fsub+0x132>
100100ee:	2f00      	cmp	r7, #0
100100f0:	d100      	bne.n	100100f4 <__aeabi_fsub+0xd0>
100100f2:	e090      	b.n	10010216 <__aeabi_fsub+0x1f2>
100100f4:	2280      	movs	r2, #128	; 0x80
100100f6:	03d2      	lsls	r2, r2, #15
100100f8:	0013      	movs	r3, r2
100100fa:	433b      	orrs	r3, r7
100100fc:	025b      	lsls	r3, r3, #9
100100fe:	0a5b      	lsrs	r3, r3, #9
10010100:	24ff      	movs	r4, #255	; 0xff
10010102:	e7bc      	b.n	1001007e <__aeabi_fsub+0x5a>
10010104:	2800      	cmp	r0, #0
10010106:	dd4f      	ble.n	100101a8 <__aeabi_fsub+0x184>
10010108:	2e00      	cmp	r6, #0
1001010a:	d02e      	beq.n	1001016a <__aeabi_fsub+0x146>
1001010c:	2cff      	cmp	r4, #255	; 0xff
1001010e:	d0a4      	beq.n	1001005a <__aeabi_fsub+0x36>
10010110:	2580      	movs	r5, #128	; 0x80
10010112:	04ed      	lsls	r5, r5, #19
10010114:	432a      	orrs	r2, r5
10010116:	281b      	cmp	r0, #27
10010118:	dd00      	ble.n	1001011c <__aeabi_fsub+0xf8>
1001011a:	e097      	b.n	1001024c <__aeabi_fsub+0x228>
1001011c:	0016      	movs	r6, r2
1001011e:	2520      	movs	r5, #32
10010120:	40c6      	lsrs	r6, r0
10010122:	1a28      	subs	r0, r5, r0
10010124:	4082      	lsls	r2, r0
10010126:	1e50      	subs	r0, r2, #1
10010128:	4182      	sbcs	r2, r0
1001012a:	4332      	orrs	r2, r6
1001012c:	189b      	adds	r3, r3, r2
1001012e:	015a      	lsls	r2, r3, #5
10010130:	d5d5      	bpl.n	100100de <__aeabi_fsub+0xba>
10010132:	3401      	adds	r4, #1
10010134:	2cff      	cmp	r4, #255	; 0xff
10010136:	d06d      	beq.n	10010214 <__aeabi_fsub+0x1f0>
10010138:	2201      	movs	r2, #1
1001013a:	487b      	ldr	r0, [pc, #492]	; (10010328 <__aeabi_fsub+0x304>)
1001013c:	401a      	ands	r2, r3
1001013e:	085b      	lsrs	r3, r3, #1
10010140:	4003      	ands	r3, r0
10010142:	4313      	orrs	r3, r2
10010144:	000d      	movs	r5, r1
10010146:	e788      	b.n	1001005a <__aeabi_fsub+0x36>
10010148:	2a00      	cmp	r2, #0
1001014a:	d000      	beq.n	1001014e <__aeabi_fsub+0x12a>
1001014c:	e77a      	b.n	10010044 <__aeabi_fsub+0x20>
1001014e:	e777      	b.n	10010040 <__aeabi_fsub+0x1c>
10010150:	1e03      	subs	r3, r0, #0
10010152:	d1c5      	bne.n	100100e0 <__aeabi_fsub+0xbc>
10010154:	2500      	movs	r5, #0
10010156:	027b      	lsls	r3, r7, #9
10010158:	0a5b      	lsrs	r3, r3, #9
1001015a:	b2e4      	uxtb	r4, r4
1001015c:	e78f      	b.n	1001007e <__aeabi_fsub+0x5a>
1001015e:	3801      	subs	r0, #1
10010160:	2800      	cmp	r0, #0
10010162:	d0a4      	beq.n	100100ae <__aeabi_fsub+0x8a>
10010164:	2cff      	cmp	r4, #255	; 0xff
10010166:	d197      	bne.n	10010098 <__aeabi_fsub+0x74>
10010168:	e777      	b.n	1001005a <__aeabi_fsub+0x36>
1001016a:	2a00      	cmp	r2, #0
1001016c:	d100      	bne.n	10010170 <__aeabi_fsub+0x14c>
1001016e:	e774      	b.n	1001005a <__aeabi_fsub+0x36>
10010170:	3801      	subs	r0, #1
10010172:	2800      	cmp	r0, #0
10010174:	d0da      	beq.n	1001012c <__aeabi_fsub+0x108>
10010176:	2cff      	cmp	r4, #255	; 0xff
10010178:	d1cd      	bne.n	10010116 <__aeabi_fsub+0xf2>
1001017a:	e76e      	b.n	1001005a <__aeabi_fsub+0x36>
1001017c:	2800      	cmp	r0, #0
1001017e:	d121      	bne.n	100101c4 <__aeabi_fsub+0x1a0>
10010180:	1c60      	adds	r0, r4, #1
10010182:	b2c0      	uxtb	r0, r0
10010184:	2801      	cmp	r0, #1
10010186:	dd58      	ble.n	1001023a <__aeabi_fsub+0x216>
10010188:	2780      	movs	r7, #128	; 0x80
1001018a:	1a9e      	subs	r6, r3, r2
1001018c:	04ff      	lsls	r7, r7, #19
1001018e:	4037      	ands	r7, r6
10010190:	d02f      	beq.n	100101f2 <__aeabi_fsub+0x1ce>
10010192:	1ad6      	subs	r6, r2, r3
10010194:	000d      	movs	r5, r1
10010196:	e78f      	b.n	100100b8 <__aeabi_fsub+0x94>
10010198:	2301      	movs	r3, #1
1001019a:	401d      	ands	r5, r3
1001019c:	2300      	movs	r3, #0
1001019e:	e76e      	b.n	1001007e <__aeabi_fsub+0x5a>
100101a0:	4b62      	ldr	r3, [pc, #392]	; (1001032c <__aeabi_fsub+0x308>)
100101a2:	1a24      	subs	r4, r4, r0
100101a4:	4033      	ands	r3, r6
100101a6:	e758      	b.n	1001005a <__aeabi_fsub+0x36>
100101a8:	2800      	cmp	r0, #0
100101aa:	d151      	bne.n	10010250 <__aeabi_fsub+0x22c>
100101ac:	1c60      	adds	r0, r4, #1
100101ae:	b2c6      	uxtb	r6, r0
100101b0:	2e01      	cmp	r6, #1
100101b2:	dd33      	ble.n	1001021c <__aeabi_fsub+0x1f8>
100101b4:	28ff      	cmp	r0, #255	; 0xff
100101b6:	d02d      	beq.n	10010214 <__aeabi_fsub+0x1f0>
100101b8:	189b      	adds	r3, r3, r2
100101ba:	085b      	lsrs	r3, r3, #1
100101bc:	0004      	movs	r4, r0
100101be:	e74c      	b.n	1001005a <__aeabi_fsub+0x36>
100101c0:	2201      	movs	r2, #1
100101c2:	e774      	b.n	100100ae <__aeabi_fsub+0x8a>
100101c4:	2c00      	cmp	r4, #0
100101c6:	d01a      	beq.n	100101fe <__aeabi_fsub+0x1da>
100101c8:	2eff      	cmp	r6, #255	; 0xff
100101ca:	d01f      	beq.n	1001020c <__aeabi_fsub+0x1e8>
100101cc:	2480      	movs	r4, #128	; 0x80
100101ce:	04e4      	lsls	r4, r4, #19
100101d0:	4240      	negs	r0, r0
100101d2:	4323      	orrs	r3, r4
100101d4:	281b      	cmp	r0, #27
100101d6:	dd00      	ble.n	100101da <__aeabi_fsub+0x1b6>
100101d8:	e096      	b.n	10010308 <__aeabi_fsub+0x2e4>
100101da:	001d      	movs	r5, r3
100101dc:	2420      	movs	r4, #32
100101de:	40c5      	lsrs	r5, r0
100101e0:	1a20      	subs	r0, r4, r0
100101e2:	4083      	lsls	r3, r0
100101e4:	1e58      	subs	r0, r3, #1
100101e6:	4183      	sbcs	r3, r0
100101e8:	432b      	orrs	r3, r5
100101ea:	1ad3      	subs	r3, r2, r3
100101ec:	0034      	movs	r4, r6
100101ee:	000d      	movs	r5, r1
100101f0:	e75e      	b.n	100100b0 <__aeabi_fsub+0x8c>
100101f2:	2e00      	cmp	r6, #0
100101f4:	d000      	beq.n	100101f8 <__aeabi_fsub+0x1d4>
100101f6:	e75f      	b.n	100100b8 <__aeabi_fsub+0x94>
100101f8:	2500      	movs	r5, #0
100101fa:	2400      	movs	r4, #0
100101fc:	e7ab      	b.n	10010156 <__aeabi_fsub+0x132>
100101fe:	2b00      	cmp	r3, #0
10010200:	d044      	beq.n	1001028c <__aeabi_fsub+0x268>
10010202:	43c0      	mvns	r0, r0
10010204:	2800      	cmp	r0, #0
10010206:	d0f0      	beq.n	100101ea <__aeabi_fsub+0x1c6>
10010208:	2eff      	cmp	r6, #255	; 0xff
1001020a:	d1e3      	bne.n	100101d4 <__aeabi_fsub+0x1b0>
1001020c:	0013      	movs	r3, r2
1001020e:	24ff      	movs	r4, #255	; 0xff
10010210:	000d      	movs	r5, r1
10010212:	e722      	b.n	1001005a <__aeabi_fsub+0x36>
10010214:	000d      	movs	r5, r1
10010216:	24ff      	movs	r4, #255	; 0xff
10010218:	2300      	movs	r3, #0
1001021a:	e730      	b.n	1001007e <__aeabi_fsub+0x5a>
1001021c:	2c00      	cmp	r4, #0
1001021e:	d15d      	bne.n	100102dc <__aeabi_fsub+0x2b8>
10010220:	2b00      	cmp	r3, #0
10010222:	d07d      	beq.n	10010320 <__aeabi_fsub+0x2fc>
10010224:	2a00      	cmp	r2, #0
10010226:	d100      	bne.n	1001022a <__aeabi_fsub+0x206>
10010228:	e717      	b.n	1001005a <__aeabi_fsub+0x36>
1001022a:	189b      	adds	r3, r3, r2
1001022c:	015a      	lsls	r2, r3, #5
1001022e:	d400      	bmi.n	10010232 <__aeabi_fsub+0x20e>
10010230:	e756      	b.n	100100e0 <__aeabi_fsub+0xbc>
10010232:	4a3e      	ldr	r2, [pc, #248]	; (1001032c <__aeabi_fsub+0x308>)
10010234:	0004      	movs	r4, r0
10010236:	4013      	ands	r3, r2
10010238:	e70f      	b.n	1001005a <__aeabi_fsub+0x36>
1001023a:	2c00      	cmp	r4, #0
1001023c:	d11e      	bne.n	1001027c <__aeabi_fsub+0x258>
1001023e:	2b00      	cmp	r3, #0
10010240:	d12f      	bne.n	100102a2 <__aeabi_fsub+0x27e>
10010242:	2a00      	cmp	r2, #0
10010244:	d065      	beq.n	10010312 <__aeabi_fsub+0x2ee>
10010246:	0013      	movs	r3, r2
10010248:	000d      	movs	r5, r1
1001024a:	e706      	b.n	1001005a <__aeabi_fsub+0x36>
1001024c:	2201      	movs	r2, #1
1001024e:	e76d      	b.n	1001012c <__aeabi_fsub+0x108>
10010250:	2c00      	cmp	r4, #0
10010252:	d11f      	bne.n	10010294 <__aeabi_fsub+0x270>
10010254:	2b00      	cmp	r3, #0
10010256:	d059      	beq.n	1001030c <__aeabi_fsub+0x2e8>
10010258:	43c0      	mvns	r0, r0
1001025a:	2800      	cmp	r0, #0
1001025c:	d00b      	beq.n	10010276 <__aeabi_fsub+0x252>
1001025e:	2eff      	cmp	r6, #255	; 0xff
10010260:	d04f      	beq.n	10010302 <__aeabi_fsub+0x2de>
10010262:	281b      	cmp	r0, #27
10010264:	dc5e      	bgt.n	10010324 <__aeabi_fsub+0x300>
10010266:	001d      	movs	r5, r3
10010268:	2420      	movs	r4, #32
1001026a:	40c5      	lsrs	r5, r0
1001026c:	1a20      	subs	r0, r4, r0
1001026e:	4083      	lsls	r3, r0
10010270:	1e58      	subs	r0, r3, #1
10010272:	4183      	sbcs	r3, r0
10010274:	432b      	orrs	r3, r5
10010276:	189b      	adds	r3, r3, r2
10010278:	0034      	movs	r4, r6
1001027a:	e758      	b.n	1001012e <__aeabi_fsub+0x10a>
1001027c:	2b00      	cmp	r3, #0
1001027e:	d11c      	bne.n	100102ba <__aeabi_fsub+0x296>
10010280:	2a00      	cmp	r2, #0
10010282:	d049      	beq.n	10010318 <__aeabi_fsub+0x2f4>
10010284:	0013      	movs	r3, r2
10010286:	000d      	movs	r5, r1
10010288:	24ff      	movs	r4, #255	; 0xff
1001028a:	e6e6      	b.n	1001005a <__aeabi_fsub+0x36>
1001028c:	0013      	movs	r3, r2
1001028e:	0034      	movs	r4, r6
10010290:	000d      	movs	r5, r1
10010292:	e6e2      	b.n	1001005a <__aeabi_fsub+0x36>
10010294:	2eff      	cmp	r6, #255	; 0xff
10010296:	d034      	beq.n	10010302 <__aeabi_fsub+0x2de>
10010298:	2480      	movs	r4, #128	; 0x80
1001029a:	04e4      	lsls	r4, r4, #19
1001029c:	4240      	negs	r0, r0
1001029e:	4323      	orrs	r3, r4
100102a0:	e7df      	b.n	10010262 <__aeabi_fsub+0x23e>
100102a2:	2a00      	cmp	r2, #0
100102a4:	d100      	bne.n	100102a8 <__aeabi_fsub+0x284>
100102a6:	e6d8      	b.n	1001005a <__aeabi_fsub+0x36>
100102a8:	2780      	movs	r7, #128	; 0x80
100102aa:	1a98      	subs	r0, r3, r2
100102ac:	04ff      	lsls	r7, r7, #19
100102ae:	4007      	ands	r7, r0
100102b0:	d100      	bne.n	100102b4 <__aeabi_fsub+0x290>
100102b2:	e74d      	b.n	10010150 <__aeabi_fsub+0x12c>
100102b4:	1ad3      	subs	r3, r2, r3
100102b6:	000d      	movs	r5, r1
100102b8:	e6cf      	b.n	1001005a <__aeabi_fsub+0x36>
100102ba:	24ff      	movs	r4, #255	; 0xff
100102bc:	2a00      	cmp	r2, #0
100102be:	d100      	bne.n	100102c2 <__aeabi_fsub+0x29e>
100102c0:	e6cb      	b.n	1001005a <__aeabi_fsub+0x36>
100102c2:	2080      	movs	r0, #128	; 0x80
100102c4:	08db      	lsrs	r3, r3, #3
100102c6:	03c0      	lsls	r0, r0, #15
100102c8:	4203      	tst	r3, r0
100102ca:	d004      	beq.n	100102d6 <__aeabi_fsub+0x2b2>
100102cc:	08d2      	lsrs	r2, r2, #3
100102ce:	4202      	tst	r2, r0
100102d0:	d101      	bne.n	100102d6 <__aeabi_fsub+0x2b2>
100102d2:	0013      	movs	r3, r2
100102d4:	000d      	movs	r5, r1
100102d6:	00db      	lsls	r3, r3, #3
100102d8:	24ff      	movs	r4, #255	; 0xff
100102da:	e6be      	b.n	1001005a <__aeabi_fsub+0x36>
100102dc:	2b00      	cmp	r3, #0
100102de:	d010      	beq.n	10010302 <__aeabi_fsub+0x2de>
100102e0:	24ff      	movs	r4, #255	; 0xff
100102e2:	2a00      	cmp	r2, #0
100102e4:	d100      	bne.n	100102e8 <__aeabi_fsub+0x2c4>
100102e6:	e6b8      	b.n	1001005a <__aeabi_fsub+0x36>
100102e8:	2080      	movs	r0, #128	; 0x80
100102ea:	08db      	lsrs	r3, r3, #3
100102ec:	03c0      	lsls	r0, r0, #15
100102ee:	4203      	tst	r3, r0
100102f0:	d003      	beq.n	100102fa <__aeabi_fsub+0x2d6>
100102f2:	08d2      	lsrs	r2, r2, #3
100102f4:	4202      	tst	r2, r0
100102f6:	d100      	bne.n	100102fa <__aeabi_fsub+0x2d6>
100102f8:	0013      	movs	r3, r2
100102fa:	00db      	lsls	r3, r3, #3
100102fc:	000d      	movs	r5, r1
100102fe:	24ff      	movs	r4, #255	; 0xff
10010300:	e6ab      	b.n	1001005a <__aeabi_fsub+0x36>
10010302:	0013      	movs	r3, r2
10010304:	24ff      	movs	r4, #255	; 0xff
10010306:	e6a8      	b.n	1001005a <__aeabi_fsub+0x36>
10010308:	2301      	movs	r3, #1
1001030a:	e76e      	b.n	100101ea <__aeabi_fsub+0x1c6>
1001030c:	0013      	movs	r3, r2
1001030e:	0034      	movs	r4, r6
10010310:	e6a3      	b.n	1001005a <__aeabi_fsub+0x36>
10010312:	2700      	movs	r7, #0
10010314:	2500      	movs	r5, #0
10010316:	e71e      	b.n	10010156 <__aeabi_fsub+0x132>
10010318:	2780      	movs	r7, #128	; 0x80
1001031a:	2500      	movs	r5, #0
1001031c:	03ff      	lsls	r7, r7, #15
1001031e:	e6e9      	b.n	100100f4 <__aeabi_fsub+0xd0>
10010320:	0013      	movs	r3, r2
10010322:	e69a      	b.n	1001005a <__aeabi_fsub+0x36>
10010324:	2301      	movs	r3, #1
10010326:	e7a6      	b.n	10010276 <__aeabi_fsub+0x252>
10010328:	7dffffff 	.word	0x7dffffff
1001032c:	fbffffff 	.word	0xfbffffff

10010330 <__aeabi_f2iz>:
10010330:	0243      	lsls	r3, r0, #9
10010332:	0a59      	lsrs	r1, r3, #9
10010334:	0043      	lsls	r3, r0, #1
10010336:	0fc2      	lsrs	r2, r0, #31
10010338:	0e1b      	lsrs	r3, r3, #24
1001033a:	2000      	movs	r0, #0
1001033c:	2b7e      	cmp	r3, #126	; 0x7e
1001033e:	dd0e      	ble.n	1001035e <__aeabi_f2iz+0x2e>
10010340:	2b9d      	cmp	r3, #157	; 0x9d
10010342:	dc0d      	bgt.n	10010360 <__aeabi_f2iz+0x30>
10010344:	2080      	movs	r0, #128	; 0x80
10010346:	0400      	lsls	r0, r0, #16
10010348:	4301      	orrs	r1, r0
1001034a:	2b95      	cmp	r3, #149	; 0x95
1001034c:	dc0b      	bgt.n	10010366 <__aeabi_f2iz+0x36>
1001034e:	2096      	movs	r0, #150	; 0x96
10010350:	1ac3      	subs	r3, r0, r3
10010352:	40d9      	lsrs	r1, r3
10010354:	000b      	movs	r3, r1
10010356:	4258      	negs	r0, r3
10010358:	2a00      	cmp	r2, #0
1001035a:	d100      	bne.n	1001035e <__aeabi_f2iz+0x2e>
1001035c:	0018      	movs	r0, r3
1001035e:	4770      	bx	lr
10010360:	4b03      	ldr	r3, [pc, #12]	; (10010370 <__aeabi_f2iz+0x40>)
10010362:	18d0      	adds	r0, r2, r3
10010364:	e7fb      	b.n	1001035e <__aeabi_f2iz+0x2e>
10010366:	3b96      	subs	r3, #150	; 0x96
10010368:	4099      	lsls	r1, r3
1001036a:	000b      	movs	r3, r1
1001036c:	e7f3      	b.n	10010356 <__aeabi_f2iz+0x26>
1001036e:	46c0      	nop			; (mov r8, r8)
10010370:	7fffffff 	.word	0x7fffffff

10010374 <__aeabi_dmul>:
10010374:	b5f0      	push	{r4, r5, r6, r7, lr}
10010376:	465f      	mov	r7, fp
10010378:	4656      	mov	r6, sl
1001037a:	464d      	mov	r5, r9
1001037c:	4644      	mov	r4, r8
1001037e:	b4f0      	push	{r4, r5, r6, r7}
10010380:	030d      	lsls	r5, r1, #12
10010382:	4699      	mov	r9, r3
10010384:	004e      	lsls	r6, r1, #1
10010386:	0b2b      	lsrs	r3, r5, #12
10010388:	b087      	sub	sp, #28
1001038a:	0007      	movs	r7, r0
1001038c:	4692      	mov	sl, r2
1001038e:	4680      	mov	r8, r0
10010390:	469b      	mov	fp, r3
10010392:	0d76      	lsrs	r6, r6, #21
10010394:	0fcc      	lsrs	r4, r1, #31
10010396:	2e00      	cmp	r6, #0
10010398:	d069      	beq.n	1001046e <__aeabi_dmul+0xfa>
1001039a:	4b6d      	ldr	r3, [pc, #436]	; (10010550 <__aeabi_dmul+0x1dc>)
1001039c:	429e      	cmp	r6, r3
1001039e:	d035      	beq.n	1001040c <__aeabi_dmul+0x98>
100103a0:	465b      	mov	r3, fp
100103a2:	2280      	movs	r2, #128	; 0x80
100103a4:	00dd      	lsls	r5, r3, #3
100103a6:	0412      	lsls	r2, r2, #16
100103a8:	0f43      	lsrs	r3, r0, #29
100103aa:	4313      	orrs	r3, r2
100103ac:	432b      	orrs	r3, r5
100103ae:	469b      	mov	fp, r3
100103b0:	00c3      	lsls	r3, r0, #3
100103b2:	4698      	mov	r8, r3
100103b4:	4b67      	ldr	r3, [pc, #412]	; (10010554 <__aeabi_dmul+0x1e0>)
100103b6:	2700      	movs	r7, #0
100103b8:	469c      	mov	ip, r3
100103ba:	2300      	movs	r3, #0
100103bc:	4466      	add	r6, ip
100103be:	9301      	str	r3, [sp, #4]
100103c0:	464a      	mov	r2, r9
100103c2:	0315      	lsls	r5, r2, #12
100103c4:	0050      	lsls	r0, r2, #1
100103c6:	0fd2      	lsrs	r2, r2, #31
100103c8:	4653      	mov	r3, sl
100103ca:	0b2d      	lsrs	r5, r5, #12
100103cc:	0d40      	lsrs	r0, r0, #21
100103ce:	4691      	mov	r9, r2
100103d0:	d100      	bne.n	100103d4 <__aeabi_dmul+0x60>
100103d2:	e076      	b.n	100104c2 <__aeabi_dmul+0x14e>
100103d4:	4a5e      	ldr	r2, [pc, #376]	; (10010550 <__aeabi_dmul+0x1dc>)
100103d6:	4290      	cmp	r0, r2
100103d8:	d06c      	beq.n	100104b4 <__aeabi_dmul+0x140>
100103da:	2280      	movs	r2, #128	; 0x80
100103dc:	0f5b      	lsrs	r3, r3, #29
100103de:	0412      	lsls	r2, r2, #16
100103e0:	4313      	orrs	r3, r2
100103e2:	4a5c      	ldr	r2, [pc, #368]	; (10010554 <__aeabi_dmul+0x1e0>)
100103e4:	00ed      	lsls	r5, r5, #3
100103e6:	4694      	mov	ip, r2
100103e8:	431d      	orrs	r5, r3
100103ea:	4653      	mov	r3, sl
100103ec:	2200      	movs	r2, #0
100103ee:	00db      	lsls	r3, r3, #3
100103f0:	4460      	add	r0, ip
100103f2:	4649      	mov	r1, r9
100103f4:	1836      	adds	r6, r6, r0
100103f6:	1c70      	adds	r0, r6, #1
100103f8:	4061      	eors	r1, r4
100103fa:	9002      	str	r0, [sp, #8]
100103fc:	4317      	orrs	r7, r2
100103fe:	2f0f      	cmp	r7, #15
10010400:	d900      	bls.n	10010404 <__aeabi_dmul+0x90>
10010402:	e0af      	b.n	10010564 <__aeabi_dmul+0x1f0>
10010404:	4854      	ldr	r0, [pc, #336]	; (10010558 <__aeabi_dmul+0x1e4>)
10010406:	00bf      	lsls	r7, r7, #2
10010408:	59c7      	ldr	r7, [r0, r7]
1001040a:	46bf      	mov	pc, r7
1001040c:	465b      	mov	r3, fp
1001040e:	431f      	orrs	r7, r3
10010410:	d000      	beq.n	10010414 <__aeabi_dmul+0xa0>
10010412:	e088      	b.n	10010526 <__aeabi_dmul+0x1b2>
10010414:	2300      	movs	r3, #0
10010416:	469b      	mov	fp, r3
10010418:	4698      	mov	r8, r3
1001041a:	3302      	adds	r3, #2
1001041c:	2708      	movs	r7, #8
1001041e:	9301      	str	r3, [sp, #4]
10010420:	e7ce      	b.n	100103c0 <__aeabi_dmul+0x4c>
10010422:	4649      	mov	r1, r9
10010424:	2a02      	cmp	r2, #2
10010426:	d06a      	beq.n	100104fe <__aeabi_dmul+0x18a>
10010428:	2a03      	cmp	r2, #3
1001042a:	d100      	bne.n	1001042e <__aeabi_dmul+0xba>
1001042c:	e209      	b.n	10010842 <__aeabi_dmul+0x4ce>
1001042e:	2a01      	cmp	r2, #1
10010430:	d000      	beq.n	10010434 <__aeabi_dmul+0xc0>
10010432:	e1bb      	b.n	100107ac <__aeabi_dmul+0x438>
10010434:	4011      	ands	r1, r2
10010436:	2200      	movs	r2, #0
10010438:	2300      	movs	r3, #0
1001043a:	2500      	movs	r5, #0
1001043c:	4690      	mov	r8, r2
1001043e:	b2cc      	uxtb	r4, r1
10010440:	2100      	movs	r1, #0
10010442:	032d      	lsls	r5, r5, #12
10010444:	0d0a      	lsrs	r2, r1, #20
10010446:	0512      	lsls	r2, r2, #20
10010448:	0b2d      	lsrs	r5, r5, #12
1001044a:	4315      	orrs	r5, r2
1001044c:	4a43      	ldr	r2, [pc, #268]	; (1001055c <__aeabi_dmul+0x1e8>)
1001044e:	051b      	lsls	r3, r3, #20
10010450:	4015      	ands	r5, r2
10010452:	431d      	orrs	r5, r3
10010454:	006d      	lsls	r5, r5, #1
10010456:	07e4      	lsls	r4, r4, #31
10010458:	086d      	lsrs	r5, r5, #1
1001045a:	4325      	orrs	r5, r4
1001045c:	4640      	mov	r0, r8
1001045e:	0029      	movs	r1, r5
10010460:	b007      	add	sp, #28
10010462:	bc3c      	pop	{r2, r3, r4, r5}
10010464:	4690      	mov	r8, r2
10010466:	4699      	mov	r9, r3
10010468:	46a2      	mov	sl, r4
1001046a:	46ab      	mov	fp, r5
1001046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001046e:	4303      	orrs	r3, r0
10010470:	d052      	beq.n	10010518 <__aeabi_dmul+0x1a4>
10010472:	465b      	mov	r3, fp
10010474:	2b00      	cmp	r3, #0
10010476:	d100      	bne.n	1001047a <__aeabi_dmul+0x106>
10010478:	e18a      	b.n	10010790 <__aeabi_dmul+0x41c>
1001047a:	4658      	mov	r0, fp
1001047c:	f000 fefc 	bl	10011278 <__clzsi2>
10010480:	0003      	movs	r3, r0
10010482:	3b0b      	subs	r3, #11
10010484:	2b1c      	cmp	r3, #28
10010486:	dd00      	ble.n	1001048a <__aeabi_dmul+0x116>
10010488:	e17b      	b.n	10010782 <__aeabi_dmul+0x40e>
1001048a:	221d      	movs	r2, #29
1001048c:	1ad3      	subs	r3, r2, r3
1001048e:	003a      	movs	r2, r7
10010490:	0001      	movs	r1, r0
10010492:	465d      	mov	r5, fp
10010494:	40da      	lsrs	r2, r3
10010496:	3908      	subs	r1, #8
10010498:	408d      	lsls	r5, r1
1001049a:	0013      	movs	r3, r2
1001049c:	408f      	lsls	r7, r1
1001049e:	432b      	orrs	r3, r5
100104a0:	469b      	mov	fp, r3
100104a2:	46b8      	mov	r8, r7
100104a4:	4b2e      	ldr	r3, [pc, #184]	; (10010560 <__aeabi_dmul+0x1ec>)
100104a6:	2700      	movs	r7, #0
100104a8:	469c      	mov	ip, r3
100104aa:	2300      	movs	r3, #0
100104ac:	4460      	add	r0, ip
100104ae:	4246      	negs	r6, r0
100104b0:	9301      	str	r3, [sp, #4]
100104b2:	e785      	b.n	100103c0 <__aeabi_dmul+0x4c>
100104b4:	4652      	mov	r2, sl
100104b6:	432a      	orrs	r2, r5
100104b8:	d12c      	bne.n	10010514 <__aeabi_dmul+0x1a0>
100104ba:	2500      	movs	r5, #0
100104bc:	2300      	movs	r3, #0
100104be:	2202      	movs	r2, #2
100104c0:	e797      	b.n	100103f2 <__aeabi_dmul+0x7e>
100104c2:	4652      	mov	r2, sl
100104c4:	432a      	orrs	r2, r5
100104c6:	d021      	beq.n	1001050c <__aeabi_dmul+0x198>
100104c8:	2d00      	cmp	r5, #0
100104ca:	d100      	bne.n	100104ce <__aeabi_dmul+0x15a>
100104cc:	e154      	b.n	10010778 <__aeabi_dmul+0x404>
100104ce:	0028      	movs	r0, r5
100104d0:	f000 fed2 	bl	10011278 <__clzsi2>
100104d4:	0003      	movs	r3, r0
100104d6:	3b0b      	subs	r3, #11
100104d8:	2b1c      	cmp	r3, #28
100104da:	dd00      	ble.n	100104de <__aeabi_dmul+0x16a>
100104dc:	e146      	b.n	1001076c <__aeabi_dmul+0x3f8>
100104de:	211d      	movs	r1, #29
100104e0:	1acb      	subs	r3, r1, r3
100104e2:	4651      	mov	r1, sl
100104e4:	0002      	movs	r2, r0
100104e6:	40d9      	lsrs	r1, r3
100104e8:	4653      	mov	r3, sl
100104ea:	3a08      	subs	r2, #8
100104ec:	4095      	lsls	r5, r2
100104ee:	4093      	lsls	r3, r2
100104f0:	430d      	orrs	r5, r1
100104f2:	4a1b      	ldr	r2, [pc, #108]	; (10010560 <__aeabi_dmul+0x1ec>)
100104f4:	4694      	mov	ip, r2
100104f6:	4460      	add	r0, ip
100104f8:	4240      	negs	r0, r0
100104fa:	2200      	movs	r2, #0
100104fc:	e779      	b.n	100103f2 <__aeabi_dmul+0x7e>
100104fe:	2401      	movs	r4, #1
10010500:	2200      	movs	r2, #0
10010502:	400c      	ands	r4, r1
10010504:	4b12      	ldr	r3, [pc, #72]	; (10010550 <__aeabi_dmul+0x1dc>)
10010506:	2500      	movs	r5, #0
10010508:	4690      	mov	r8, r2
1001050a:	e799      	b.n	10010440 <__aeabi_dmul+0xcc>
1001050c:	2500      	movs	r5, #0
1001050e:	2300      	movs	r3, #0
10010510:	2201      	movs	r2, #1
10010512:	e76e      	b.n	100103f2 <__aeabi_dmul+0x7e>
10010514:	2203      	movs	r2, #3
10010516:	e76c      	b.n	100103f2 <__aeabi_dmul+0x7e>
10010518:	2300      	movs	r3, #0
1001051a:	469b      	mov	fp, r3
1001051c:	4698      	mov	r8, r3
1001051e:	3301      	adds	r3, #1
10010520:	2704      	movs	r7, #4
10010522:	9301      	str	r3, [sp, #4]
10010524:	e74c      	b.n	100103c0 <__aeabi_dmul+0x4c>
10010526:	2303      	movs	r3, #3
10010528:	270c      	movs	r7, #12
1001052a:	9301      	str	r3, [sp, #4]
1001052c:	e748      	b.n	100103c0 <__aeabi_dmul+0x4c>
1001052e:	2300      	movs	r3, #0
10010530:	2580      	movs	r5, #128	; 0x80
10010532:	4698      	mov	r8, r3
10010534:	2400      	movs	r4, #0
10010536:	032d      	lsls	r5, r5, #12
10010538:	4b05      	ldr	r3, [pc, #20]	; (10010550 <__aeabi_dmul+0x1dc>)
1001053a:	e781      	b.n	10010440 <__aeabi_dmul+0xcc>
1001053c:	465d      	mov	r5, fp
1001053e:	4643      	mov	r3, r8
10010540:	9a01      	ldr	r2, [sp, #4]
10010542:	e76f      	b.n	10010424 <__aeabi_dmul+0xb0>
10010544:	465d      	mov	r5, fp
10010546:	4643      	mov	r3, r8
10010548:	0021      	movs	r1, r4
1001054a:	9a01      	ldr	r2, [sp, #4]
1001054c:	e76a      	b.n	10010424 <__aeabi_dmul+0xb0>
1001054e:	46c0      	nop			; (mov r8, r8)
10010550:	000007ff 	.word	0x000007ff
10010554:	fffffc01 	.word	0xfffffc01
10010558:	10013740 	.word	0x10013740
1001055c:	800fffff 	.word	0x800fffff
10010560:	000003f3 	.word	0x000003f3
10010564:	4642      	mov	r2, r8
10010566:	0c12      	lsrs	r2, r2, #16
10010568:	4691      	mov	r9, r2
1001056a:	0c1a      	lsrs	r2, r3, #16
1001056c:	4694      	mov	ip, r2
1001056e:	4642      	mov	r2, r8
10010570:	0417      	lsls	r7, r2, #16
10010572:	464a      	mov	r2, r9
10010574:	041b      	lsls	r3, r3, #16
10010576:	0c1b      	lsrs	r3, r3, #16
10010578:	435a      	muls	r2, r3
1001057a:	4660      	mov	r0, ip
1001057c:	4690      	mov	r8, r2
1001057e:	464a      	mov	r2, r9
10010580:	4342      	muls	r2, r0
10010582:	0010      	movs	r0, r2
10010584:	9203      	str	r2, [sp, #12]
10010586:	4662      	mov	r2, ip
10010588:	001c      	movs	r4, r3
1001058a:	0c3f      	lsrs	r7, r7, #16
1001058c:	437a      	muls	r2, r7
1001058e:	437c      	muls	r4, r7
10010590:	4442      	add	r2, r8
10010592:	9201      	str	r2, [sp, #4]
10010594:	0c22      	lsrs	r2, r4, #16
10010596:	4692      	mov	sl, r2
10010598:	9a01      	ldr	r2, [sp, #4]
1001059a:	4452      	add	r2, sl
1001059c:	4590      	cmp	r8, r2
1001059e:	d906      	bls.n	100105ae <__aeabi_dmul+0x23a>
100105a0:	4682      	mov	sl, r0
100105a2:	2080      	movs	r0, #128	; 0x80
100105a4:	0240      	lsls	r0, r0, #9
100105a6:	4680      	mov	r8, r0
100105a8:	44c2      	add	sl, r8
100105aa:	4650      	mov	r0, sl
100105ac:	9003      	str	r0, [sp, #12]
100105ae:	0c10      	lsrs	r0, r2, #16
100105b0:	9004      	str	r0, [sp, #16]
100105b2:	4648      	mov	r0, r9
100105b4:	0424      	lsls	r4, r4, #16
100105b6:	0c24      	lsrs	r4, r4, #16
100105b8:	0412      	lsls	r2, r2, #16
100105ba:	1912      	adds	r2, r2, r4
100105bc:	9205      	str	r2, [sp, #20]
100105be:	0c2a      	lsrs	r2, r5, #16
100105c0:	042d      	lsls	r5, r5, #16
100105c2:	0c2d      	lsrs	r5, r5, #16
100105c4:	4368      	muls	r0, r5
100105c6:	002c      	movs	r4, r5
100105c8:	4682      	mov	sl, r0
100105ca:	4648      	mov	r0, r9
100105cc:	437c      	muls	r4, r7
100105ce:	4350      	muls	r0, r2
100105d0:	4681      	mov	r9, r0
100105d2:	0c20      	lsrs	r0, r4, #16
100105d4:	4680      	mov	r8, r0
100105d6:	4357      	muls	r7, r2
100105d8:	4457      	add	r7, sl
100105da:	4447      	add	r7, r8
100105dc:	45ba      	cmp	sl, r7
100105de:	d903      	bls.n	100105e8 <__aeabi_dmul+0x274>
100105e0:	2080      	movs	r0, #128	; 0x80
100105e2:	0240      	lsls	r0, r0, #9
100105e4:	4680      	mov	r8, r0
100105e6:	44c1      	add	r9, r8
100105e8:	0c38      	lsrs	r0, r7, #16
100105ea:	043f      	lsls	r7, r7, #16
100105ec:	46b8      	mov	r8, r7
100105ee:	4448      	add	r0, r9
100105f0:	0424      	lsls	r4, r4, #16
100105f2:	0c24      	lsrs	r4, r4, #16
100105f4:	9001      	str	r0, [sp, #4]
100105f6:	9804      	ldr	r0, [sp, #16]
100105f8:	44a0      	add	r8, r4
100105fa:	4440      	add	r0, r8
100105fc:	9004      	str	r0, [sp, #16]
100105fe:	4658      	mov	r0, fp
10010600:	0c00      	lsrs	r0, r0, #16
10010602:	4681      	mov	r9, r0
10010604:	4658      	mov	r0, fp
10010606:	0404      	lsls	r4, r0, #16
10010608:	0c20      	lsrs	r0, r4, #16
1001060a:	4682      	mov	sl, r0
1001060c:	0007      	movs	r7, r0
1001060e:	4648      	mov	r0, r9
10010610:	435f      	muls	r7, r3
10010612:	464c      	mov	r4, r9
10010614:	4343      	muls	r3, r0
10010616:	4660      	mov	r0, ip
10010618:	4360      	muls	r0, r4
1001061a:	4664      	mov	r4, ip
1001061c:	4683      	mov	fp, r0
1001061e:	4650      	mov	r0, sl
10010620:	4344      	muls	r4, r0
10010622:	0c38      	lsrs	r0, r7, #16
10010624:	4684      	mov	ip, r0
10010626:	18e4      	adds	r4, r4, r3
10010628:	4464      	add	r4, ip
1001062a:	42a3      	cmp	r3, r4
1001062c:	d903      	bls.n	10010636 <__aeabi_dmul+0x2c2>
1001062e:	2380      	movs	r3, #128	; 0x80
10010630:	025b      	lsls	r3, r3, #9
10010632:	469c      	mov	ip, r3
10010634:	44e3      	add	fp, ip
10010636:	4648      	mov	r0, r9
10010638:	043f      	lsls	r7, r7, #16
1001063a:	0c23      	lsrs	r3, r4, #16
1001063c:	0c3f      	lsrs	r7, r7, #16
1001063e:	0424      	lsls	r4, r4, #16
10010640:	19e4      	adds	r4, r4, r7
10010642:	4657      	mov	r7, sl
10010644:	4368      	muls	r0, r5
10010646:	436f      	muls	r7, r5
10010648:	4684      	mov	ip, r0
1001064a:	464d      	mov	r5, r9
1001064c:	4650      	mov	r0, sl
1001064e:	4355      	muls	r5, r2
10010650:	4342      	muls	r2, r0
10010652:	0c38      	lsrs	r0, r7, #16
10010654:	4681      	mov	r9, r0
10010656:	4462      	add	r2, ip
10010658:	444a      	add	r2, r9
1001065a:	445b      	add	r3, fp
1001065c:	4594      	cmp	ip, r2
1001065e:	d903      	bls.n	10010668 <__aeabi_dmul+0x2f4>
10010660:	2080      	movs	r0, #128	; 0x80
10010662:	0240      	lsls	r0, r0, #9
10010664:	4684      	mov	ip, r0
10010666:	4465      	add	r5, ip
10010668:	9803      	ldr	r0, [sp, #12]
1001066a:	043f      	lsls	r7, r7, #16
1001066c:	4683      	mov	fp, r0
1001066e:	9804      	ldr	r0, [sp, #16]
10010670:	0c3f      	lsrs	r7, r7, #16
10010672:	4684      	mov	ip, r0
10010674:	44e3      	add	fp, ip
10010676:	45c3      	cmp	fp, r8
10010678:	4180      	sbcs	r0, r0
1001067a:	4240      	negs	r0, r0
1001067c:	4682      	mov	sl, r0
1001067e:	0410      	lsls	r0, r2, #16
10010680:	4684      	mov	ip, r0
10010682:	9801      	ldr	r0, [sp, #4]
10010684:	4467      	add	r7, ip
10010686:	4684      	mov	ip, r0
10010688:	4467      	add	r7, ip
1001068a:	44a3      	add	fp, r4
1001068c:	46bc      	mov	ip, r7
1001068e:	45a3      	cmp	fp, r4
10010690:	41a4      	sbcs	r4, r4
10010692:	4699      	mov	r9, r3
10010694:	44d4      	add	ip, sl
10010696:	4264      	negs	r4, r4
10010698:	4287      	cmp	r7, r0
1001069a:	41bf      	sbcs	r7, r7
1001069c:	45d4      	cmp	ip, sl
1001069e:	4180      	sbcs	r0, r0
100106a0:	44e1      	add	r9, ip
100106a2:	46a0      	mov	r8, r4
100106a4:	4599      	cmp	r9, r3
100106a6:	419b      	sbcs	r3, r3
100106a8:	427f      	negs	r7, r7
100106aa:	4240      	negs	r0, r0
100106ac:	44c8      	add	r8, r9
100106ae:	4307      	orrs	r7, r0
100106b0:	0c12      	lsrs	r2, r2, #16
100106b2:	18ba      	adds	r2, r7, r2
100106b4:	45a0      	cmp	r8, r4
100106b6:	41a4      	sbcs	r4, r4
100106b8:	425f      	negs	r7, r3
100106ba:	003b      	movs	r3, r7
100106bc:	4264      	negs	r4, r4
100106be:	4323      	orrs	r3, r4
100106c0:	18d7      	adds	r7, r2, r3
100106c2:	4643      	mov	r3, r8
100106c4:	197d      	adds	r5, r7, r5
100106c6:	0ddb      	lsrs	r3, r3, #23
100106c8:	026d      	lsls	r5, r5, #9
100106ca:	431d      	orrs	r5, r3
100106cc:	465b      	mov	r3, fp
100106ce:	025a      	lsls	r2, r3, #9
100106d0:	9b05      	ldr	r3, [sp, #20]
100106d2:	431a      	orrs	r2, r3
100106d4:	1e53      	subs	r3, r2, #1
100106d6:	419a      	sbcs	r2, r3
100106d8:	465b      	mov	r3, fp
100106da:	0ddb      	lsrs	r3, r3, #23
100106dc:	431a      	orrs	r2, r3
100106de:	4643      	mov	r3, r8
100106e0:	025b      	lsls	r3, r3, #9
100106e2:	4313      	orrs	r3, r2
100106e4:	01ea      	lsls	r2, r5, #7
100106e6:	d507      	bpl.n	100106f8 <__aeabi_dmul+0x384>
100106e8:	2201      	movs	r2, #1
100106ea:	085c      	lsrs	r4, r3, #1
100106ec:	4013      	ands	r3, r2
100106ee:	4323      	orrs	r3, r4
100106f0:	07ea      	lsls	r2, r5, #31
100106f2:	9e02      	ldr	r6, [sp, #8]
100106f4:	4313      	orrs	r3, r2
100106f6:	086d      	lsrs	r5, r5, #1
100106f8:	4a57      	ldr	r2, [pc, #348]	; (10010858 <__aeabi_dmul+0x4e4>)
100106fa:	18b2      	adds	r2, r6, r2
100106fc:	2a00      	cmp	r2, #0
100106fe:	dd4b      	ble.n	10010798 <__aeabi_dmul+0x424>
10010700:	0758      	lsls	r0, r3, #29
10010702:	d009      	beq.n	10010718 <__aeabi_dmul+0x3a4>
10010704:	200f      	movs	r0, #15
10010706:	4018      	ands	r0, r3
10010708:	2804      	cmp	r0, #4
1001070a:	d005      	beq.n	10010718 <__aeabi_dmul+0x3a4>
1001070c:	1d18      	adds	r0, r3, #4
1001070e:	4298      	cmp	r0, r3
10010710:	419b      	sbcs	r3, r3
10010712:	425b      	negs	r3, r3
10010714:	18ed      	adds	r5, r5, r3
10010716:	0003      	movs	r3, r0
10010718:	01e8      	lsls	r0, r5, #7
1001071a:	d504      	bpl.n	10010726 <__aeabi_dmul+0x3b2>
1001071c:	4a4f      	ldr	r2, [pc, #316]	; (1001085c <__aeabi_dmul+0x4e8>)
1001071e:	4015      	ands	r5, r2
10010720:	2280      	movs	r2, #128	; 0x80
10010722:	00d2      	lsls	r2, r2, #3
10010724:	18b2      	adds	r2, r6, r2
10010726:	484e      	ldr	r0, [pc, #312]	; (10010860 <__aeabi_dmul+0x4ec>)
10010728:	4282      	cmp	r2, r0
1001072a:	dd00      	ble.n	1001072e <__aeabi_dmul+0x3ba>
1001072c:	e6e7      	b.n	100104fe <__aeabi_dmul+0x18a>
1001072e:	2401      	movs	r4, #1
10010730:	08db      	lsrs	r3, r3, #3
10010732:	0768      	lsls	r0, r5, #29
10010734:	4318      	orrs	r0, r3
10010736:	026d      	lsls	r5, r5, #9
10010738:	0553      	lsls	r3, r2, #21
1001073a:	4680      	mov	r8, r0
1001073c:	0b2d      	lsrs	r5, r5, #12
1001073e:	0d5b      	lsrs	r3, r3, #21
10010740:	400c      	ands	r4, r1
10010742:	e67d      	b.n	10010440 <__aeabi_dmul+0xcc>
10010744:	2280      	movs	r2, #128	; 0x80
10010746:	4659      	mov	r1, fp
10010748:	0312      	lsls	r2, r2, #12
1001074a:	4211      	tst	r1, r2
1001074c:	d008      	beq.n	10010760 <__aeabi_dmul+0x3ec>
1001074e:	4215      	tst	r5, r2
10010750:	d106      	bne.n	10010760 <__aeabi_dmul+0x3ec>
10010752:	4315      	orrs	r5, r2
10010754:	032d      	lsls	r5, r5, #12
10010756:	4698      	mov	r8, r3
10010758:	0b2d      	lsrs	r5, r5, #12
1001075a:	464c      	mov	r4, r9
1001075c:	4b41      	ldr	r3, [pc, #260]	; (10010864 <__aeabi_dmul+0x4f0>)
1001075e:	e66f      	b.n	10010440 <__aeabi_dmul+0xcc>
10010760:	465d      	mov	r5, fp
10010762:	4315      	orrs	r5, r2
10010764:	032d      	lsls	r5, r5, #12
10010766:	0b2d      	lsrs	r5, r5, #12
10010768:	4b3e      	ldr	r3, [pc, #248]	; (10010864 <__aeabi_dmul+0x4f0>)
1001076a:	e669      	b.n	10010440 <__aeabi_dmul+0xcc>
1001076c:	0003      	movs	r3, r0
1001076e:	4655      	mov	r5, sl
10010770:	3b28      	subs	r3, #40	; 0x28
10010772:	409d      	lsls	r5, r3
10010774:	2300      	movs	r3, #0
10010776:	e6bc      	b.n	100104f2 <__aeabi_dmul+0x17e>
10010778:	4650      	mov	r0, sl
1001077a:	f000 fd7d 	bl	10011278 <__clzsi2>
1001077e:	3020      	adds	r0, #32
10010780:	e6a8      	b.n	100104d4 <__aeabi_dmul+0x160>
10010782:	0003      	movs	r3, r0
10010784:	3b28      	subs	r3, #40	; 0x28
10010786:	409f      	lsls	r7, r3
10010788:	2300      	movs	r3, #0
1001078a:	46bb      	mov	fp, r7
1001078c:	4698      	mov	r8, r3
1001078e:	e689      	b.n	100104a4 <__aeabi_dmul+0x130>
10010790:	f000 fd72 	bl	10011278 <__clzsi2>
10010794:	3020      	adds	r0, #32
10010796:	e673      	b.n	10010480 <__aeabi_dmul+0x10c>
10010798:	2401      	movs	r4, #1
1001079a:	1aa6      	subs	r6, r4, r2
1001079c:	2e38      	cmp	r6, #56	; 0x38
1001079e:	dd07      	ble.n	100107b0 <__aeabi_dmul+0x43c>
100107a0:	2200      	movs	r2, #0
100107a2:	400c      	ands	r4, r1
100107a4:	2300      	movs	r3, #0
100107a6:	2500      	movs	r5, #0
100107a8:	4690      	mov	r8, r2
100107aa:	e649      	b.n	10010440 <__aeabi_dmul+0xcc>
100107ac:	9e02      	ldr	r6, [sp, #8]
100107ae:	e7a3      	b.n	100106f8 <__aeabi_dmul+0x384>
100107b0:	2e1f      	cmp	r6, #31
100107b2:	dc20      	bgt.n	100107f6 <__aeabi_dmul+0x482>
100107b4:	2220      	movs	r2, #32
100107b6:	002c      	movs	r4, r5
100107b8:	0018      	movs	r0, r3
100107ba:	1b92      	subs	r2, r2, r6
100107bc:	40f0      	lsrs	r0, r6
100107be:	4094      	lsls	r4, r2
100107c0:	4093      	lsls	r3, r2
100107c2:	4304      	orrs	r4, r0
100107c4:	1e58      	subs	r0, r3, #1
100107c6:	4183      	sbcs	r3, r0
100107c8:	431c      	orrs	r4, r3
100107ca:	40f5      	lsrs	r5, r6
100107cc:	0763      	lsls	r3, r4, #29
100107ce:	d009      	beq.n	100107e4 <__aeabi_dmul+0x470>
100107d0:	230f      	movs	r3, #15
100107d2:	4023      	ands	r3, r4
100107d4:	2b04      	cmp	r3, #4
100107d6:	d005      	beq.n	100107e4 <__aeabi_dmul+0x470>
100107d8:	0023      	movs	r3, r4
100107da:	1d1c      	adds	r4, r3, #4
100107dc:	429c      	cmp	r4, r3
100107de:	4192      	sbcs	r2, r2
100107e0:	4252      	negs	r2, r2
100107e2:	18ad      	adds	r5, r5, r2
100107e4:	022b      	lsls	r3, r5, #8
100107e6:	d51f      	bpl.n	10010828 <__aeabi_dmul+0x4b4>
100107e8:	2401      	movs	r4, #1
100107ea:	2200      	movs	r2, #0
100107ec:	400c      	ands	r4, r1
100107ee:	2301      	movs	r3, #1
100107f0:	2500      	movs	r5, #0
100107f2:	4690      	mov	r8, r2
100107f4:	e624      	b.n	10010440 <__aeabi_dmul+0xcc>
100107f6:	201f      	movs	r0, #31
100107f8:	002c      	movs	r4, r5
100107fa:	4240      	negs	r0, r0
100107fc:	1a82      	subs	r2, r0, r2
100107fe:	40d4      	lsrs	r4, r2
10010800:	2e20      	cmp	r6, #32
10010802:	d01c      	beq.n	1001083e <__aeabi_dmul+0x4ca>
10010804:	2240      	movs	r2, #64	; 0x40
10010806:	1b96      	subs	r6, r2, r6
10010808:	40b5      	lsls	r5, r6
1001080a:	432b      	orrs	r3, r5
1001080c:	1e58      	subs	r0, r3, #1
1001080e:	4183      	sbcs	r3, r0
10010810:	2007      	movs	r0, #7
10010812:	4323      	orrs	r3, r4
10010814:	4018      	ands	r0, r3
10010816:	2500      	movs	r5, #0
10010818:	2800      	cmp	r0, #0
1001081a:	d009      	beq.n	10010830 <__aeabi_dmul+0x4bc>
1001081c:	220f      	movs	r2, #15
1001081e:	2500      	movs	r5, #0
10010820:	401a      	ands	r2, r3
10010822:	001c      	movs	r4, r3
10010824:	2a04      	cmp	r2, #4
10010826:	d1d8      	bne.n	100107da <__aeabi_dmul+0x466>
10010828:	0023      	movs	r3, r4
1001082a:	0768      	lsls	r0, r5, #29
1001082c:	026d      	lsls	r5, r5, #9
1001082e:	0b2d      	lsrs	r5, r5, #12
10010830:	2401      	movs	r4, #1
10010832:	08db      	lsrs	r3, r3, #3
10010834:	4303      	orrs	r3, r0
10010836:	4698      	mov	r8, r3
10010838:	400c      	ands	r4, r1
1001083a:	2300      	movs	r3, #0
1001083c:	e600      	b.n	10010440 <__aeabi_dmul+0xcc>
1001083e:	2500      	movs	r5, #0
10010840:	e7e3      	b.n	1001080a <__aeabi_dmul+0x496>
10010842:	2280      	movs	r2, #128	; 0x80
10010844:	2401      	movs	r4, #1
10010846:	0312      	lsls	r2, r2, #12
10010848:	4315      	orrs	r5, r2
1001084a:	032d      	lsls	r5, r5, #12
1001084c:	4698      	mov	r8, r3
1001084e:	0b2d      	lsrs	r5, r5, #12
10010850:	400c      	ands	r4, r1
10010852:	4b04      	ldr	r3, [pc, #16]	; (10010864 <__aeabi_dmul+0x4f0>)
10010854:	e5f4      	b.n	10010440 <__aeabi_dmul+0xcc>
10010856:	46c0      	nop			; (mov r8, r8)
10010858:	000003ff 	.word	0x000003ff
1001085c:	feffffff 	.word	0xfeffffff
10010860:	000007fe 	.word	0x000007fe
10010864:	000007ff 	.word	0x000007ff

10010868 <__aeabi_dsub>:
10010868:	b5f0      	push	{r4, r5, r6, r7, lr}
1001086a:	4657      	mov	r7, sl
1001086c:	464e      	mov	r6, r9
1001086e:	4645      	mov	r5, r8
10010870:	b4e0      	push	{r5, r6, r7}
10010872:	000e      	movs	r6, r1
10010874:	0011      	movs	r1, r2
10010876:	0ff2      	lsrs	r2, r6, #31
10010878:	4692      	mov	sl, r2
1001087a:	00c5      	lsls	r5, r0, #3
1001087c:	0f42      	lsrs	r2, r0, #29
1001087e:	0318      	lsls	r0, r3, #12
10010880:	0337      	lsls	r7, r6, #12
10010882:	0074      	lsls	r4, r6, #1
10010884:	0a40      	lsrs	r0, r0, #9
10010886:	0f4e      	lsrs	r6, r1, #29
10010888:	0a7f      	lsrs	r7, r7, #9
1001088a:	4330      	orrs	r0, r6
1001088c:	4ecf      	ldr	r6, [pc, #828]	; (10010bcc <__aeabi_dsub+0x364>)
1001088e:	4317      	orrs	r7, r2
10010890:	005a      	lsls	r2, r3, #1
10010892:	0d64      	lsrs	r4, r4, #21
10010894:	0d52      	lsrs	r2, r2, #21
10010896:	0fdb      	lsrs	r3, r3, #31
10010898:	00c9      	lsls	r1, r1, #3
1001089a:	42b2      	cmp	r2, r6
1001089c:	d100      	bne.n	100108a0 <__aeabi_dsub+0x38>
1001089e:	e0e5      	b.n	10010a6c <__aeabi_dsub+0x204>
100108a0:	2601      	movs	r6, #1
100108a2:	4073      	eors	r3, r6
100108a4:	1aa6      	subs	r6, r4, r2
100108a6:	46b4      	mov	ip, r6
100108a8:	4553      	cmp	r3, sl
100108aa:	d100      	bne.n	100108ae <__aeabi_dsub+0x46>
100108ac:	e0af      	b.n	10010a0e <__aeabi_dsub+0x1a6>
100108ae:	2e00      	cmp	r6, #0
100108b0:	dc00      	bgt.n	100108b4 <__aeabi_dsub+0x4c>
100108b2:	e10d      	b.n	10010ad0 <__aeabi_dsub+0x268>
100108b4:	2a00      	cmp	r2, #0
100108b6:	d13a      	bne.n	1001092e <__aeabi_dsub+0xc6>
100108b8:	0003      	movs	r3, r0
100108ba:	430b      	orrs	r3, r1
100108bc:	d000      	beq.n	100108c0 <__aeabi_dsub+0x58>
100108be:	e0e4      	b.n	10010a8a <__aeabi_dsub+0x222>
100108c0:	076b      	lsls	r3, r5, #29
100108c2:	d009      	beq.n	100108d8 <__aeabi_dsub+0x70>
100108c4:	230f      	movs	r3, #15
100108c6:	402b      	ands	r3, r5
100108c8:	2b04      	cmp	r3, #4
100108ca:	d005      	beq.n	100108d8 <__aeabi_dsub+0x70>
100108cc:	1d2b      	adds	r3, r5, #4
100108ce:	42ab      	cmp	r3, r5
100108d0:	41ad      	sbcs	r5, r5
100108d2:	426d      	negs	r5, r5
100108d4:	197f      	adds	r7, r7, r5
100108d6:	001d      	movs	r5, r3
100108d8:	023b      	lsls	r3, r7, #8
100108da:	d400      	bmi.n	100108de <__aeabi_dsub+0x76>
100108dc:	e088      	b.n	100109f0 <__aeabi_dsub+0x188>
100108de:	4bbb      	ldr	r3, [pc, #748]	; (10010bcc <__aeabi_dsub+0x364>)
100108e0:	3401      	adds	r4, #1
100108e2:	429c      	cmp	r4, r3
100108e4:	d100      	bne.n	100108e8 <__aeabi_dsub+0x80>
100108e6:	e110      	b.n	10010b0a <__aeabi_dsub+0x2a2>
100108e8:	003a      	movs	r2, r7
100108ea:	4bb9      	ldr	r3, [pc, #740]	; (10010bd0 <__aeabi_dsub+0x368>)
100108ec:	4651      	mov	r1, sl
100108ee:	401a      	ands	r2, r3
100108f0:	2301      	movs	r3, #1
100108f2:	0750      	lsls	r0, r2, #29
100108f4:	08ed      	lsrs	r5, r5, #3
100108f6:	0252      	lsls	r2, r2, #9
100108f8:	0564      	lsls	r4, r4, #21
100108fa:	4305      	orrs	r5, r0
100108fc:	0b12      	lsrs	r2, r2, #12
100108fe:	0d64      	lsrs	r4, r4, #21
10010900:	400b      	ands	r3, r1
10010902:	2100      	movs	r1, #0
10010904:	0028      	movs	r0, r5
10010906:	0312      	lsls	r2, r2, #12
10010908:	0d0d      	lsrs	r5, r1, #20
1001090a:	0b12      	lsrs	r2, r2, #12
1001090c:	0564      	lsls	r4, r4, #21
1001090e:	052d      	lsls	r5, r5, #20
10010910:	4315      	orrs	r5, r2
10010912:	0862      	lsrs	r2, r4, #1
10010914:	4caf      	ldr	r4, [pc, #700]	; (10010bd4 <__aeabi_dsub+0x36c>)
10010916:	07db      	lsls	r3, r3, #31
10010918:	402c      	ands	r4, r5
1001091a:	4314      	orrs	r4, r2
1001091c:	0064      	lsls	r4, r4, #1
1001091e:	0864      	lsrs	r4, r4, #1
10010920:	431c      	orrs	r4, r3
10010922:	0021      	movs	r1, r4
10010924:	bc1c      	pop	{r2, r3, r4}
10010926:	4690      	mov	r8, r2
10010928:	4699      	mov	r9, r3
1001092a:	46a2      	mov	sl, r4
1001092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001092e:	4ba7      	ldr	r3, [pc, #668]	; (10010bcc <__aeabi_dsub+0x364>)
10010930:	429c      	cmp	r4, r3
10010932:	d0c5      	beq.n	100108c0 <__aeabi_dsub+0x58>
10010934:	2380      	movs	r3, #128	; 0x80
10010936:	041b      	lsls	r3, r3, #16
10010938:	4318      	orrs	r0, r3
1001093a:	4663      	mov	r3, ip
1001093c:	2b38      	cmp	r3, #56	; 0x38
1001093e:	dd00      	ble.n	10010942 <__aeabi_dsub+0xda>
10010940:	e0fd      	b.n	10010b3e <__aeabi_dsub+0x2d6>
10010942:	2b1f      	cmp	r3, #31
10010944:	dd00      	ble.n	10010948 <__aeabi_dsub+0xe0>
10010946:	e130      	b.n	10010baa <__aeabi_dsub+0x342>
10010948:	4662      	mov	r2, ip
1001094a:	2320      	movs	r3, #32
1001094c:	1a9b      	subs	r3, r3, r2
1001094e:	0002      	movs	r2, r0
10010950:	409a      	lsls	r2, r3
10010952:	4666      	mov	r6, ip
10010954:	4690      	mov	r8, r2
10010956:	000a      	movs	r2, r1
10010958:	4099      	lsls	r1, r3
1001095a:	40f2      	lsrs	r2, r6
1001095c:	4646      	mov	r6, r8
1001095e:	1e4b      	subs	r3, r1, #1
10010960:	4199      	sbcs	r1, r3
10010962:	4332      	orrs	r2, r6
10010964:	4311      	orrs	r1, r2
10010966:	4663      	mov	r3, ip
10010968:	0002      	movs	r2, r0
1001096a:	40da      	lsrs	r2, r3
1001096c:	1a69      	subs	r1, r5, r1
1001096e:	428d      	cmp	r5, r1
10010970:	419b      	sbcs	r3, r3
10010972:	000d      	movs	r5, r1
10010974:	1aba      	subs	r2, r7, r2
10010976:	425b      	negs	r3, r3
10010978:	1ad7      	subs	r7, r2, r3
1001097a:	023b      	lsls	r3, r7, #8
1001097c:	d535      	bpl.n	100109ea <__aeabi_dsub+0x182>
1001097e:	027a      	lsls	r2, r7, #9
10010980:	0a53      	lsrs	r3, r2, #9
10010982:	4698      	mov	r8, r3
10010984:	4643      	mov	r3, r8
10010986:	2b00      	cmp	r3, #0
10010988:	d100      	bne.n	1001098c <__aeabi_dsub+0x124>
1001098a:	e0c4      	b.n	10010b16 <__aeabi_dsub+0x2ae>
1001098c:	4640      	mov	r0, r8
1001098e:	f000 fc73 	bl	10011278 <__clzsi2>
10010992:	0003      	movs	r3, r0
10010994:	3b08      	subs	r3, #8
10010996:	2b1f      	cmp	r3, #31
10010998:	dd00      	ble.n	1001099c <__aeabi_dsub+0x134>
1001099a:	e0c5      	b.n	10010b28 <__aeabi_dsub+0x2c0>
1001099c:	2220      	movs	r2, #32
1001099e:	0029      	movs	r1, r5
100109a0:	1ad2      	subs	r2, r2, r3
100109a2:	4647      	mov	r7, r8
100109a4:	40d1      	lsrs	r1, r2
100109a6:	409f      	lsls	r7, r3
100109a8:	000a      	movs	r2, r1
100109aa:	409d      	lsls	r5, r3
100109ac:	433a      	orrs	r2, r7
100109ae:	429c      	cmp	r4, r3
100109b0:	dd00      	ble.n	100109b4 <__aeabi_dsub+0x14c>
100109b2:	e0c0      	b.n	10010b36 <__aeabi_dsub+0x2ce>
100109b4:	1b1c      	subs	r4, r3, r4
100109b6:	1c63      	adds	r3, r4, #1
100109b8:	2b1f      	cmp	r3, #31
100109ba:	dd00      	ble.n	100109be <__aeabi_dsub+0x156>
100109bc:	e0e4      	b.n	10010b88 <__aeabi_dsub+0x320>
100109be:	2120      	movs	r1, #32
100109c0:	0014      	movs	r4, r2
100109c2:	0028      	movs	r0, r5
100109c4:	1ac9      	subs	r1, r1, r3
100109c6:	40d8      	lsrs	r0, r3
100109c8:	408c      	lsls	r4, r1
100109ca:	408d      	lsls	r5, r1
100109cc:	4304      	orrs	r4, r0
100109ce:	40da      	lsrs	r2, r3
100109d0:	1e68      	subs	r0, r5, #1
100109d2:	4185      	sbcs	r5, r0
100109d4:	0017      	movs	r7, r2
100109d6:	4325      	orrs	r5, r4
100109d8:	2400      	movs	r4, #0
100109da:	e771      	b.n	100108c0 <__aeabi_dsub+0x58>
100109dc:	4642      	mov	r2, r8
100109de:	4663      	mov	r3, ip
100109e0:	431a      	orrs	r2, r3
100109e2:	d100      	bne.n	100109e6 <__aeabi_dsub+0x17e>
100109e4:	e24c      	b.n	10010e80 <__aeabi_dsub+0x618>
100109e6:	4667      	mov	r7, ip
100109e8:	4645      	mov	r5, r8
100109ea:	076b      	lsls	r3, r5, #29
100109ec:	d000      	beq.n	100109f0 <__aeabi_dsub+0x188>
100109ee:	e769      	b.n	100108c4 <__aeabi_dsub+0x5c>
100109f0:	2301      	movs	r3, #1
100109f2:	4651      	mov	r1, sl
100109f4:	0778      	lsls	r0, r7, #29
100109f6:	08ed      	lsrs	r5, r5, #3
100109f8:	08fa      	lsrs	r2, r7, #3
100109fa:	400b      	ands	r3, r1
100109fc:	4305      	orrs	r5, r0
100109fe:	4973      	ldr	r1, [pc, #460]	; (10010bcc <__aeabi_dsub+0x364>)
10010a00:	428c      	cmp	r4, r1
10010a02:	d038      	beq.n	10010a76 <__aeabi_dsub+0x20e>
10010a04:	0312      	lsls	r2, r2, #12
10010a06:	0564      	lsls	r4, r4, #21
10010a08:	0b12      	lsrs	r2, r2, #12
10010a0a:	0d64      	lsrs	r4, r4, #21
10010a0c:	e779      	b.n	10010902 <__aeabi_dsub+0x9a>
10010a0e:	2e00      	cmp	r6, #0
10010a10:	dc00      	bgt.n	10010a14 <__aeabi_dsub+0x1ac>
10010a12:	e09a      	b.n	10010b4a <__aeabi_dsub+0x2e2>
10010a14:	2a00      	cmp	r2, #0
10010a16:	d047      	beq.n	10010aa8 <__aeabi_dsub+0x240>
10010a18:	4a6c      	ldr	r2, [pc, #432]	; (10010bcc <__aeabi_dsub+0x364>)
10010a1a:	4294      	cmp	r4, r2
10010a1c:	d100      	bne.n	10010a20 <__aeabi_dsub+0x1b8>
10010a1e:	e74f      	b.n	100108c0 <__aeabi_dsub+0x58>
10010a20:	2280      	movs	r2, #128	; 0x80
10010a22:	0412      	lsls	r2, r2, #16
10010a24:	4310      	orrs	r0, r2
10010a26:	4662      	mov	r2, ip
10010a28:	2a38      	cmp	r2, #56	; 0x38
10010a2a:	dc00      	bgt.n	10010a2e <__aeabi_dsub+0x1c6>
10010a2c:	e108      	b.n	10010c40 <__aeabi_dsub+0x3d8>
10010a2e:	4301      	orrs	r1, r0
10010a30:	1e48      	subs	r0, r1, #1
10010a32:	4181      	sbcs	r1, r0
10010a34:	2200      	movs	r2, #0
10010a36:	b2c9      	uxtb	r1, r1
10010a38:	1949      	adds	r1, r1, r5
10010a3a:	19d2      	adds	r2, r2, r7
10010a3c:	42a9      	cmp	r1, r5
10010a3e:	41bf      	sbcs	r7, r7
10010a40:	000d      	movs	r5, r1
10010a42:	427f      	negs	r7, r7
10010a44:	18bf      	adds	r7, r7, r2
10010a46:	023a      	lsls	r2, r7, #8
10010a48:	d400      	bmi.n	10010a4c <__aeabi_dsub+0x1e4>
10010a4a:	e142      	b.n	10010cd2 <__aeabi_dsub+0x46a>
10010a4c:	4a5f      	ldr	r2, [pc, #380]	; (10010bcc <__aeabi_dsub+0x364>)
10010a4e:	3401      	adds	r4, #1
10010a50:	4294      	cmp	r4, r2
10010a52:	d100      	bne.n	10010a56 <__aeabi_dsub+0x1ee>
10010a54:	e14e      	b.n	10010cf4 <__aeabi_dsub+0x48c>
10010a56:	2001      	movs	r0, #1
10010a58:	4a5d      	ldr	r2, [pc, #372]	; (10010bd0 <__aeabi_dsub+0x368>)
10010a5a:	0869      	lsrs	r1, r5, #1
10010a5c:	403a      	ands	r2, r7
10010a5e:	4028      	ands	r0, r5
10010a60:	4308      	orrs	r0, r1
10010a62:	07d5      	lsls	r5, r2, #31
10010a64:	4305      	orrs	r5, r0
10010a66:	0857      	lsrs	r7, r2, #1
10010a68:	469a      	mov	sl, r3
10010a6a:	e729      	b.n	100108c0 <__aeabi_dsub+0x58>
10010a6c:	0006      	movs	r6, r0
10010a6e:	430e      	orrs	r6, r1
10010a70:	d000      	beq.n	10010a74 <__aeabi_dsub+0x20c>
10010a72:	e717      	b.n	100108a4 <__aeabi_dsub+0x3c>
10010a74:	e714      	b.n	100108a0 <__aeabi_dsub+0x38>
10010a76:	0029      	movs	r1, r5
10010a78:	4311      	orrs	r1, r2
10010a7a:	d100      	bne.n	10010a7e <__aeabi_dsub+0x216>
10010a7c:	e1f9      	b.n	10010e72 <__aeabi_dsub+0x60a>
10010a7e:	2180      	movs	r1, #128	; 0x80
10010a80:	0309      	lsls	r1, r1, #12
10010a82:	430a      	orrs	r2, r1
10010a84:	0312      	lsls	r2, r2, #12
10010a86:	0b12      	lsrs	r2, r2, #12
10010a88:	e73b      	b.n	10010902 <__aeabi_dsub+0x9a>
10010a8a:	2301      	movs	r3, #1
10010a8c:	425b      	negs	r3, r3
10010a8e:	4698      	mov	r8, r3
10010a90:	44c4      	add	ip, r8
10010a92:	4663      	mov	r3, ip
10010a94:	2b00      	cmp	r3, #0
10010a96:	d172      	bne.n	10010b7e <__aeabi_dsub+0x316>
10010a98:	1a69      	subs	r1, r5, r1
10010a9a:	428d      	cmp	r5, r1
10010a9c:	419b      	sbcs	r3, r3
10010a9e:	1a3f      	subs	r7, r7, r0
10010aa0:	425b      	negs	r3, r3
10010aa2:	1aff      	subs	r7, r7, r3
10010aa4:	000d      	movs	r5, r1
10010aa6:	e768      	b.n	1001097a <__aeabi_dsub+0x112>
10010aa8:	0002      	movs	r2, r0
10010aaa:	430a      	orrs	r2, r1
10010aac:	d100      	bne.n	10010ab0 <__aeabi_dsub+0x248>
10010aae:	e707      	b.n	100108c0 <__aeabi_dsub+0x58>
10010ab0:	2201      	movs	r2, #1
10010ab2:	4252      	negs	r2, r2
10010ab4:	4690      	mov	r8, r2
10010ab6:	44c4      	add	ip, r8
10010ab8:	4662      	mov	r2, ip
10010aba:	2a00      	cmp	r2, #0
10010abc:	d000      	beq.n	10010ac0 <__aeabi_dsub+0x258>
10010abe:	e0e6      	b.n	10010c8e <__aeabi_dsub+0x426>
10010ac0:	1869      	adds	r1, r5, r1
10010ac2:	42a9      	cmp	r1, r5
10010ac4:	41b6      	sbcs	r6, r6
10010ac6:	183f      	adds	r7, r7, r0
10010ac8:	4276      	negs	r6, r6
10010aca:	19f7      	adds	r7, r6, r7
10010acc:	000d      	movs	r5, r1
10010ace:	e7ba      	b.n	10010a46 <__aeabi_dsub+0x1de>
10010ad0:	2e00      	cmp	r6, #0
10010ad2:	d000      	beq.n	10010ad6 <__aeabi_dsub+0x26e>
10010ad4:	e080      	b.n	10010bd8 <__aeabi_dsub+0x370>
10010ad6:	1c62      	adds	r2, r4, #1
10010ad8:	0552      	lsls	r2, r2, #21
10010ada:	0d52      	lsrs	r2, r2, #21
10010adc:	2a01      	cmp	r2, #1
10010ade:	dc00      	bgt.n	10010ae2 <__aeabi_dsub+0x27a>
10010ae0:	e0f9      	b.n	10010cd6 <__aeabi_dsub+0x46e>
10010ae2:	1a6a      	subs	r2, r5, r1
10010ae4:	4691      	mov	r9, r2
10010ae6:	454d      	cmp	r5, r9
10010ae8:	41b6      	sbcs	r6, r6
10010aea:	1a3a      	subs	r2, r7, r0
10010aec:	4276      	negs	r6, r6
10010aee:	1b92      	subs	r2, r2, r6
10010af0:	4690      	mov	r8, r2
10010af2:	0212      	lsls	r2, r2, #8
10010af4:	d400      	bmi.n	10010af8 <__aeabi_dsub+0x290>
10010af6:	e099      	b.n	10010c2c <__aeabi_dsub+0x3c4>
10010af8:	1b4d      	subs	r5, r1, r5
10010afa:	42a9      	cmp	r1, r5
10010afc:	4189      	sbcs	r1, r1
10010afe:	1bc7      	subs	r7, r0, r7
10010b00:	4249      	negs	r1, r1
10010b02:	1a7a      	subs	r2, r7, r1
10010b04:	4690      	mov	r8, r2
10010b06:	469a      	mov	sl, r3
10010b08:	e73c      	b.n	10010984 <__aeabi_dsub+0x11c>
10010b0a:	4652      	mov	r2, sl
10010b0c:	2301      	movs	r3, #1
10010b0e:	2500      	movs	r5, #0
10010b10:	4013      	ands	r3, r2
10010b12:	2200      	movs	r2, #0
10010b14:	e6f5      	b.n	10010902 <__aeabi_dsub+0x9a>
10010b16:	0028      	movs	r0, r5
10010b18:	f000 fbae 	bl	10011278 <__clzsi2>
10010b1c:	3020      	adds	r0, #32
10010b1e:	0003      	movs	r3, r0
10010b20:	3b08      	subs	r3, #8
10010b22:	2b1f      	cmp	r3, #31
10010b24:	dc00      	bgt.n	10010b28 <__aeabi_dsub+0x2c0>
10010b26:	e739      	b.n	1001099c <__aeabi_dsub+0x134>
10010b28:	002a      	movs	r2, r5
10010b2a:	3828      	subs	r0, #40	; 0x28
10010b2c:	4082      	lsls	r2, r0
10010b2e:	2500      	movs	r5, #0
10010b30:	429c      	cmp	r4, r3
10010b32:	dc00      	bgt.n	10010b36 <__aeabi_dsub+0x2ce>
10010b34:	e73e      	b.n	100109b4 <__aeabi_dsub+0x14c>
10010b36:	4f26      	ldr	r7, [pc, #152]	; (10010bd0 <__aeabi_dsub+0x368>)
10010b38:	1ae4      	subs	r4, r4, r3
10010b3a:	4017      	ands	r7, r2
10010b3c:	e6c0      	b.n	100108c0 <__aeabi_dsub+0x58>
10010b3e:	4301      	orrs	r1, r0
10010b40:	1e48      	subs	r0, r1, #1
10010b42:	4181      	sbcs	r1, r0
10010b44:	2200      	movs	r2, #0
10010b46:	b2c9      	uxtb	r1, r1
10010b48:	e710      	b.n	1001096c <__aeabi_dsub+0x104>
10010b4a:	2e00      	cmp	r6, #0
10010b4c:	d000      	beq.n	10010b50 <__aeabi_dsub+0x2e8>
10010b4e:	e0f1      	b.n	10010d34 <__aeabi_dsub+0x4cc>
10010b50:	1c62      	adds	r2, r4, #1
10010b52:	4694      	mov	ip, r2
10010b54:	0552      	lsls	r2, r2, #21
10010b56:	0d52      	lsrs	r2, r2, #21
10010b58:	2a01      	cmp	r2, #1
10010b5a:	dc00      	bgt.n	10010b5e <__aeabi_dsub+0x2f6>
10010b5c:	e0a0      	b.n	10010ca0 <__aeabi_dsub+0x438>
10010b5e:	4a1b      	ldr	r2, [pc, #108]	; (10010bcc <__aeabi_dsub+0x364>)
10010b60:	4594      	cmp	ip, r2
10010b62:	d100      	bne.n	10010b66 <__aeabi_dsub+0x2fe>
10010b64:	e0c5      	b.n	10010cf2 <__aeabi_dsub+0x48a>
10010b66:	1869      	adds	r1, r5, r1
10010b68:	42a9      	cmp	r1, r5
10010b6a:	4192      	sbcs	r2, r2
10010b6c:	183f      	adds	r7, r7, r0
10010b6e:	4252      	negs	r2, r2
10010b70:	19d2      	adds	r2, r2, r7
10010b72:	0849      	lsrs	r1, r1, #1
10010b74:	07d5      	lsls	r5, r2, #31
10010b76:	430d      	orrs	r5, r1
10010b78:	0857      	lsrs	r7, r2, #1
10010b7a:	4664      	mov	r4, ip
10010b7c:	e6a0      	b.n	100108c0 <__aeabi_dsub+0x58>
10010b7e:	4b13      	ldr	r3, [pc, #76]	; (10010bcc <__aeabi_dsub+0x364>)
10010b80:	429c      	cmp	r4, r3
10010b82:	d000      	beq.n	10010b86 <__aeabi_dsub+0x31e>
10010b84:	e6d9      	b.n	1001093a <__aeabi_dsub+0xd2>
10010b86:	e69b      	b.n	100108c0 <__aeabi_dsub+0x58>
10010b88:	0011      	movs	r1, r2
10010b8a:	3c1f      	subs	r4, #31
10010b8c:	40e1      	lsrs	r1, r4
10010b8e:	000c      	movs	r4, r1
10010b90:	2b20      	cmp	r3, #32
10010b92:	d100      	bne.n	10010b96 <__aeabi_dsub+0x32e>
10010b94:	e080      	b.n	10010c98 <__aeabi_dsub+0x430>
10010b96:	2140      	movs	r1, #64	; 0x40
10010b98:	1acb      	subs	r3, r1, r3
10010b9a:	409a      	lsls	r2, r3
10010b9c:	4315      	orrs	r5, r2
10010b9e:	1e6a      	subs	r2, r5, #1
10010ba0:	4195      	sbcs	r5, r2
10010ba2:	2700      	movs	r7, #0
10010ba4:	4325      	orrs	r5, r4
10010ba6:	2400      	movs	r4, #0
10010ba8:	e71f      	b.n	100109ea <__aeabi_dsub+0x182>
10010baa:	4663      	mov	r3, ip
10010bac:	0002      	movs	r2, r0
10010bae:	3b20      	subs	r3, #32
10010bb0:	40da      	lsrs	r2, r3
10010bb2:	4663      	mov	r3, ip
10010bb4:	2b20      	cmp	r3, #32
10010bb6:	d071      	beq.n	10010c9c <__aeabi_dsub+0x434>
10010bb8:	2340      	movs	r3, #64	; 0x40
10010bba:	4666      	mov	r6, ip
10010bbc:	1b9b      	subs	r3, r3, r6
10010bbe:	4098      	lsls	r0, r3
10010bc0:	4301      	orrs	r1, r0
10010bc2:	1e48      	subs	r0, r1, #1
10010bc4:	4181      	sbcs	r1, r0
10010bc6:	4311      	orrs	r1, r2
10010bc8:	2200      	movs	r2, #0
10010bca:	e6cf      	b.n	1001096c <__aeabi_dsub+0x104>
10010bcc:	000007ff 	.word	0x000007ff
10010bd0:	ff7fffff 	.word	0xff7fffff
10010bd4:	800fffff 	.word	0x800fffff
10010bd8:	2c00      	cmp	r4, #0
10010bda:	d048      	beq.n	10010c6e <__aeabi_dsub+0x406>
10010bdc:	4cca      	ldr	r4, [pc, #808]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010bde:	42a2      	cmp	r2, r4
10010be0:	d100      	bne.n	10010be4 <__aeabi_dsub+0x37c>
10010be2:	e0a2      	b.n	10010d2a <__aeabi_dsub+0x4c2>
10010be4:	4274      	negs	r4, r6
10010be6:	46a1      	mov	r9, r4
10010be8:	2480      	movs	r4, #128	; 0x80
10010bea:	0424      	lsls	r4, r4, #16
10010bec:	4327      	orrs	r7, r4
10010bee:	464c      	mov	r4, r9
10010bf0:	2c38      	cmp	r4, #56	; 0x38
10010bf2:	dd00      	ble.n	10010bf6 <__aeabi_dsub+0x38e>
10010bf4:	e0db      	b.n	10010dae <__aeabi_dsub+0x546>
10010bf6:	2c1f      	cmp	r4, #31
10010bf8:	dd00      	ble.n	10010bfc <__aeabi_dsub+0x394>
10010bfa:	e144      	b.n	10010e86 <__aeabi_dsub+0x61e>
10010bfc:	464e      	mov	r6, r9
10010bfe:	2420      	movs	r4, #32
10010c00:	1ba4      	subs	r4, r4, r6
10010c02:	003e      	movs	r6, r7
10010c04:	40a6      	lsls	r6, r4
10010c06:	46a2      	mov	sl, r4
10010c08:	46b0      	mov	r8, r6
10010c0a:	464c      	mov	r4, r9
10010c0c:	002e      	movs	r6, r5
10010c0e:	40e6      	lsrs	r6, r4
10010c10:	46b4      	mov	ip, r6
10010c12:	4646      	mov	r6, r8
10010c14:	4664      	mov	r4, ip
10010c16:	4326      	orrs	r6, r4
10010c18:	4654      	mov	r4, sl
10010c1a:	40a5      	lsls	r5, r4
10010c1c:	1e6c      	subs	r4, r5, #1
10010c1e:	41a5      	sbcs	r5, r4
10010c20:	0034      	movs	r4, r6
10010c22:	432c      	orrs	r4, r5
10010c24:	464d      	mov	r5, r9
10010c26:	40ef      	lsrs	r7, r5
10010c28:	1b0d      	subs	r5, r1, r4
10010c2a:	e028      	b.n	10010c7e <__aeabi_dsub+0x416>
10010c2c:	464a      	mov	r2, r9
10010c2e:	4643      	mov	r3, r8
10010c30:	464d      	mov	r5, r9
10010c32:	431a      	orrs	r2, r3
10010c34:	d000      	beq.n	10010c38 <__aeabi_dsub+0x3d0>
10010c36:	e6a5      	b.n	10010984 <__aeabi_dsub+0x11c>
10010c38:	2300      	movs	r3, #0
10010c3a:	2400      	movs	r4, #0
10010c3c:	2500      	movs	r5, #0
10010c3e:	e6de      	b.n	100109fe <__aeabi_dsub+0x196>
10010c40:	2a1f      	cmp	r2, #31
10010c42:	dc5a      	bgt.n	10010cfa <__aeabi_dsub+0x492>
10010c44:	4666      	mov	r6, ip
10010c46:	2220      	movs	r2, #32
10010c48:	1b92      	subs	r2, r2, r6
10010c4a:	0006      	movs	r6, r0
10010c4c:	4096      	lsls	r6, r2
10010c4e:	4691      	mov	r9, r2
10010c50:	46b0      	mov	r8, r6
10010c52:	4662      	mov	r2, ip
10010c54:	000e      	movs	r6, r1
10010c56:	40d6      	lsrs	r6, r2
10010c58:	4642      	mov	r2, r8
10010c5a:	4316      	orrs	r6, r2
10010c5c:	464a      	mov	r2, r9
10010c5e:	4091      	lsls	r1, r2
10010c60:	1e4a      	subs	r2, r1, #1
10010c62:	4191      	sbcs	r1, r2
10010c64:	0002      	movs	r2, r0
10010c66:	4660      	mov	r0, ip
10010c68:	4331      	orrs	r1, r6
10010c6a:	40c2      	lsrs	r2, r0
10010c6c:	e6e4      	b.n	10010a38 <__aeabi_dsub+0x1d0>
10010c6e:	003c      	movs	r4, r7
10010c70:	432c      	orrs	r4, r5
10010c72:	d05a      	beq.n	10010d2a <__aeabi_dsub+0x4c2>
10010c74:	43f4      	mvns	r4, r6
10010c76:	46a1      	mov	r9, r4
10010c78:	2c00      	cmp	r4, #0
10010c7a:	d152      	bne.n	10010d22 <__aeabi_dsub+0x4ba>
10010c7c:	1b4d      	subs	r5, r1, r5
10010c7e:	42a9      	cmp	r1, r5
10010c80:	4189      	sbcs	r1, r1
10010c82:	1bc7      	subs	r7, r0, r7
10010c84:	4249      	negs	r1, r1
10010c86:	1a7f      	subs	r7, r7, r1
10010c88:	0014      	movs	r4, r2
10010c8a:	469a      	mov	sl, r3
10010c8c:	e675      	b.n	1001097a <__aeabi_dsub+0x112>
10010c8e:	4a9e      	ldr	r2, [pc, #632]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010c90:	4294      	cmp	r4, r2
10010c92:	d000      	beq.n	10010c96 <__aeabi_dsub+0x42e>
10010c94:	e6c7      	b.n	10010a26 <__aeabi_dsub+0x1be>
10010c96:	e613      	b.n	100108c0 <__aeabi_dsub+0x58>
10010c98:	2200      	movs	r2, #0
10010c9a:	e77f      	b.n	10010b9c <__aeabi_dsub+0x334>
10010c9c:	2000      	movs	r0, #0
10010c9e:	e78f      	b.n	10010bc0 <__aeabi_dsub+0x358>
10010ca0:	2c00      	cmp	r4, #0
10010ca2:	d000      	beq.n	10010ca6 <__aeabi_dsub+0x43e>
10010ca4:	e0c8      	b.n	10010e38 <__aeabi_dsub+0x5d0>
10010ca6:	003b      	movs	r3, r7
10010ca8:	432b      	orrs	r3, r5
10010caa:	d100      	bne.n	10010cae <__aeabi_dsub+0x446>
10010cac:	e10f      	b.n	10010ece <__aeabi_dsub+0x666>
10010cae:	0003      	movs	r3, r0
10010cb0:	430b      	orrs	r3, r1
10010cb2:	d100      	bne.n	10010cb6 <__aeabi_dsub+0x44e>
10010cb4:	e604      	b.n	100108c0 <__aeabi_dsub+0x58>
10010cb6:	1869      	adds	r1, r5, r1
10010cb8:	42a9      	cmp	r1, r5
10010cba:	419b      	sbcs	r3, r3
10010cbc:	183f      	adds	r7, r7, r0
10010cbe:	425b      	negs	r3, r3
10010cc0:	19df      	adds	r7, r3, r7
10010cc2:	023b      	lsls	r3, r7, #8
10010cc4:	d400      	bmi.n	10010cc8 <__aeabi_dsub+0x460>
10010cc6:	e11a      	b.n	10010efe <__aeabi_dsub+0x696>
10010cc8:	4b90      	ldr	r3, [pc, #576]	; (10010f0c <__aeabi_dsub+0x6a4>)
10010cca:	000d      	movs	r5, r1
10010ccc:	401f      	ands	r7, r3
10010cce:	4664      	mov	r4, ip
10010cd0:	e5f6      	b.n	100108c0 <__aeabi_dsub+0x58>
10010cd2:	469a      	mov	sl, r3
10010cd4:	e689      	b.n	100109ea <__aeabi_dsub+0x182>
10010cd6:	003a      	movs	r2, r7
10010cd8:	432a      	orrs	r2, r5
10010cda:	2c00      	cmp	r4, #0
10010cdc:	d15c      	bne.n	10010d98 <__aeabi_dsub+0x530>
10010cde:	2a00      	cmp	r2, #0
10010ce0:	d175      	bne.n	10010dce <__aeabi_dsub+0x566>
10010ce2:	0002      	movs	r2, r0
10010ce4:	430a      	orrs	r2, r1
10010ce6:	d100      	bne.n	10010cea <__aeabi_dsub+0x482>
10010ce8:	e0ca      	b.n	10010e80 <__aeabi_dsub+0x618>
10010cea:	0007      	movs	r7, r0
10010cec:	000d      	movs	r5, r1
10010cee:	469a      	mov	sl, r3
10010cf0:	e5e6      	b.n	100108c0 <__aeabi_dsub+0x58>
10010cf2:	4664      	mov	r4, ip
10010cf4:	2200      	movs	r2, #0
10010cf6:	2500      	movs	r5, #0
10010cf8:	e681      	b.n	100109fe <__aeabi_dsub+0x196>
10010cfa:	4662      	mov	r2, ip
10010cfc:	0006      	movs	r6, r0
10010cfe:	3a20      	subs	r2, #32
10010d00:	40d6      	lsrs	r6, r2
10010d02:	4662      	mov	r2, ip
10010d04:	46b0      	mov	r8, r6
10010d06:	2a20      	cmp	r2, #32
10010d08:	d100      	bne.n	10010d0c <__aeabi_dsub+0x4a4>
10010d0a:	e0b7      	b.n	10010e7c <__aeabi_dsub+0x614>
10010d0c:	2240      	movs	r2, #64	; 0x40
10010d0e:	4666      	mov	r6, ip
10010d10:	1b92      	subs	r2, r2, r6
10010d12:	4090      	lsls	r0, r2
10010d14:	4301      	orrs	r1, r0
10010d16:	4642      	mov	r2, r8
10010d18:	1e48      	subs	r0, r1, #1
10010d1a:	4181      	sbcs	r1, r0
10010d1c:	4311      	orrs	r1, r2
10010d1e:	2200      	movs	r2, #0
10010d20:	e68a      	b.n	10010a38 <__aeabi_dsub+0x1d0>
10010d22:	4c79      	ldr	r4, [pc, #484]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010d24:	42a2      	cmp	r2, r4
10010d26:	d000      	beq.n	10010d2a <__aeabi_dsub+0x4c2>
10010d28:	e761      	b.n	10010bee <__aeabi_dsub+0x386>
10010d2a:	0007      	movs	r7, r0
10010d2c:	000d      	movs	r5, r1
10010d2e:	0014      	movs	r4, r2
10010d30:	469a      	mov	sl, r3
10010d32:	e5c5      	b.n	100108c0 <__aeabi_dsub+0x58>
10010d34:	2c00      	cmp	r4, #0
10010d36:	d141      	bne.n	10010dbc <__aeabi_dsub+0x554>
10010d38:	003c      	movs	r4, r7
10010d3a:	432c      	orrs	r4, r5
10010d3c:	d078      	beq.n	10010e30 <__aeabi_dsub+0x5c8>
10010d3e:	43f4      	mvns	r4, r6
10010d40:	46a1      	mov	r9, r4
10010d42:	2c00      	cmp	r4, #0
10010d44:	d020      	beq.n	10010d88 <__aeabi_dsub+0x520>
10010d46:	4c70      	ldr	r4, [pc, #448]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010d48:	42a2      	cmp	r2, r4
10010d4a:	d071      	beq.n	10010e30 <__aeabi_dsub+0x5c8>
10010d4c:	464c      	mov	r4, r9
10010d4e:	2c38      	cmp	r4, #56	; 0x38
10010d50:	dd00      	ble.n	10010d54 <__aeabi_dsub+0x4ec>
10010d52:	e0b2      	b.n	10010eba <__aeabi_dsub+0x652>
10010d54:	2c1f      	cmp	r4, #31
10010d56:	dd00      	ble.n	10010d5a <__aeabi_dsub+0x4f2>
10010d58:	e0bc      	b.n	10010ed4 <__aeabi_dsub+0x66c>
10010d5a:	2620      	movs	r6, #32
10010d5c:	1b34      	subs	r4, r6, r4
10010d5e:	46a2      	mov	sl, r4
10010d60:	003c      	movs	r4, r7
10010d62:	4656      	mov	r6, sl
10010d64:	40b4      	lsls	r4, r6
10010d66:	464e      	mov	r6, r9
10010d68:	46a0      	mov	r8, r4
10010d6a:	002c      	movs	r4, r5
10010d6c:	40f4      	lsrs	r4, r6
10010d6e:	46a4      	mov	ip, r4
10010d70:	4644      	mov	r4, r8
10010d72:	4666      	mov	r6, ip
10010d74:	4334      	orrs	r4, r6
10010d76:	46a4      	mov	ip, r4
10010d78:	4654      	mov	r4, sl
10010d7a:	40a5      	lsls	r5, r4
10010d7c:	4664      	mov	r4, ip
10010d7e:	1e6e      	subs	r6, r5, #1
10010d80:	41b5      	sbcs	r5, r6
10010d82:	4325      	orrs	r5, r4
10010d84:	464c      	mov	r4, r9
10010d86:	40e7      	lsrs	r7, r4
10010d88:	186d      	adds	r5, r5, r1
10010d8a:	428d      	cmp	r5, r1
10010d8c:	4189      	sbcs	r1, r1
10010d8e:	183f      	adds	r7, r7, r0
10010d90:	4249      	negs	r1, r1
10010d92:	19cf      	adds	r7, r1, r7
10010d94:	0014      	movs	r4, r2
10010d96:	e656      	b.n	10010a46 <__aeabi_dsub+0x1de>
10010d98:	2a00      	cmp	r2, #0
10010d9a:	d12f      	bne.n	10010dfc <__aeabi_dsub+0x594>
10010d9c:	0002      	movs	r2, r0
10010d9e:	430a      	orrs	r2, r1
10010da0:	d100      	bne.n	10010da4 <__aeabi_dsub+0x53c>
10010da2:	e084      	b.n	10010eae <__aeabi_dsub+0x646>
10010da4:	0007      	movs	r7, r0
10010da6:	000d      	movs	r5, r1
10010da8:	469a      	mov	sl, r3
10010daa:	4c57      	ldr	r4, [pc, #348]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010dac:	e588      	b.n	100108c0 <__aeabi_dsub+0x58>
10010dae:	433d      	orrs	r5, r7
10010db0:	1e6f      	subs	r7, r5, #1
10010db2:	41bd      	sbcs	r5, r7
10010db4:	b2ec      	uxtb	r4, r5
10010db6:	2700      	movs	r7, #0
10010db8:	1b0d      	subs	r5, r1, r4
10010dba:	e760      	b.n	10010c7e <__aeabi_dsub+0x416>
10010dbc:	4c52      	ldr	r4, [pc, #328]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010dbe:	42a2      	cmp	r2, r4
10010dc0:	d036      	beq.n	10010e30 <__aeabi_dsub+0x5c8>
10010dc2:	4274      	negs	r4, r6
10010dc4:	2680      	movs	r6, #128	; 0x80
10010dc6:	0436      	lsls	r6, r6, #16
10010dc8:	46a1      	mov	r9, r4
10010dca:	4337      	orrs	r7, r6
10010dcc:	e7be      	b.n	10010d4c <__aeabi_dsub+0x4e4>
10010dce:	0002      	movs	r2, r0
10010dd0:	430a      	orrs	r2, r1
10010dd2:	d100      	bne.n	10010dd6 <__aeabi_dsub+0x56e>
10010dd4:	e574      	b.n	100108c0 <__aeabi_dsub+0x58>
10010dd6:	1a6a      	subs	r2, r5, r1
10010dd8:	4690      	mov	r8, r2
10010dda:	4545      	cmp	r5, r8
10010ddc:	41b6      	sbcs	r6, r6
10010dde:	1a3a      	subs	r2, r7, r0
10010de0:	4276      	negs	r6, r6
10010de2:	1b92      	subs	r2, r2, r6
10010de4:	4694      	mov	ip, r2
10010de6:	0212      	lsls	r2, r2, #8
10010de8:	d400      	bmi.n	10010dec <__aeabi_dsub+0x584>
10010dea:	e5f7      	b.n	100109dc <__aeabi_dsub+0x174>
10010dec:	1b4d      	subs	r5, r1, r5
10010dee:	42a9      	cmp	r1, r5
10010df0:	4189      	sbcs	r1, r1
10010df2:	1bc7      	subs	r7, r0, r7
10010df4:	4249      	negs	r1, r1
10010df6:	1a7f      	subs	r7, r7, r1
10010df8:	469a      	mov	sl, r3
10010dfa:	e561      	b.n	100108c0 <__aeabi_dsub+0x58>
10010dfc:	0002      	movs	r2, r0
10010dfe:	430a      	orrs	r2, r1
10010e00:	d03a      	beq.n	10010e78 <__aeabi_dsub+0x610>
10010e02:	08ed      	lsrs	r5, r5, #3
10010e04:	077c      	lsls	r4, r7, #29
10010e06:	432c      	orrs	r4, r5
10010e08:	2580      	movs	r5, #128	; 0x80
10010e0a:	08fa      	lsrs	r2, r7, #3
10010e0c:	032d      	lsls	r5, r5, #12
10010e0e:	422a      	tst	r2, r5
10010e10:	d008      	beq.n	10010e24 <__aeabi_dsub+0x5bc>
10010e12:	08c7      	lsrs	r7, r0, #3
10010e14:	422f      	tst	r7, r5
10010e16:	d105      	bne.n	10010e24 <__aeabi_dsub+0x5bc>
10010e18:	0745      	lsls	r5, r0, #29
10010e1a:	002c      	movs	r4, r5
10010e1c:	003a      	movs	r2, r7
10010e1e:	469a      	mov	sl, r3
10010e20:	08c9      	lsrs	r1, r1, #3
10010e22:	430c      	orrs	r4, r1
10010e24:	0f67      	lsrs	r7, r4, #29
10010e26:	00d2      	lsls	r2, r2, #3
10010e28:	00e5      	lsls	r5, r4, #3
10010e2a:	4317      	orrs	r7, r2
10010e2c:	4c36      	ldr	r4, [pc, #216]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010e2e:	e547      	b.n	100108c0 <__aeabi_dsub+0x58>
10010e30:	0007      	movs	r7, r0
10010e32:	000d      	movs	r5, r1
10010e34:	0014      	movs	r4, r2
10010e36:	e543      	b.n	100108c0 <__aeabi_dsub+0x58>
10010e38:	003a      	movs	r2, r7
10010e3a:	432a      	orrs	r2, r5
10010e3c:	d043      	beq.n	10010ec6 <__aeabi_dsub+0x65e>
10010e3e:	0002      	movs	r2, r0
10010e40:	430a      	orrs	r2, r1
10010e42:	d019      	beq.n	10010e78 <__aeabi_dsub+0x610>
10010e44:	08ed      	lsrs	r5, r5, #3
10010e46:	077c      	lsls	r4, r7, #29
10010e48:	432c      	orrs	r4, r5
10010e4a:	2580      	movs	r5, #128	; 0x80
10010e4c:	08fa      	lsrs	r2, r7, #3
10010e4e:	032d      	lsls	r5, r5, #12
10010e50:	422a      	tst	r2, r5
10010e52:	d007      	beq.n	10010e64 <__aeabi_dsub+0x5fc>
10010e54:	08c6      	lsrs	r6, r0, #3
10010e56:	422e      	tst	r6, r5
10010e58:	d104      	bne.n	10010e64 <__aeabi_dsub+0x5fc>
10010e5a:	0747      	lsls	r7, r0, #29
10010e5c:	003c      	movs	r4, r7
10010e5e:	0032      	movs	r2, r6
10010e60:	08c9      	lsrs	r1, r1, #3
10010e62:	430c      	orrs	r4, r1
10010e64:	00d7      	lsls	r7, r2, #3
10010e66:	0f62      	lsrs	r2, r4, #29
10010e68:	00e5      	lsls	r5, r4, #3
10010e6a:	4317      	orrs	r7, r2
10010e6c:	469a      	mov	sl, r3
10010e6e:	4c26      	ldr	r4, [pc, #152]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010e70:	e526      	b.n	100108c0 <__aeabi_dsub+0x58>
10010e72:	2200      	movs	r2, #0
10010e74:	2500      	movs	r5, #0
10010e76:	e544      	b.n	10010902 <__aeabi_dsub+0x9a>
10010e78:	4c23      	ldr	r4, [pc, #140]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010e7a:	e521      	b.n	100108c0 <__aeabi_dsub+0x58>
10010e7c:	2000      	movs	r0, #0
10010e7e:	e749      	b.n	10010d14 <__aeabi_dsub+0x4ac>
10010e80:	2300      	movs	r3, #0
10010e82:	2500      	movs	r5, #0
10010e84:	e5bb      	b.n	100109fe <__aeabi_dsub+0x196>
10010e86:	464c      	mov	r4, r9
10010e88:	003e      	movs	r6, r7
10010e8a:	3c20      	subs	r4, #32
10010e8c:	40e6      	lsrs	r6, r4
10010e8e:	464c      	mov	r4, r9
10010e90:	46b4      	mov	ip, r6
10010e92:	2c20      	cmp	r4, #32
10010e94:	d031      	beq.n	10010efa <__aeabi_dsub+0x692>
10010e96:	2440      	movs	r4, #64	; 0x40
10010e98:	464e      	mov	r6, r9
10010e9a:	1ba6      	subs	r6, r4, r6
10010e9c:	40b7      	lsls	r7, r6
10010e9e:	433d      	orrs	r5, r7
10010ea0:	1e6c      	subs	r4, r5, #1
10010ea2:	41a5      	sbcs	r5, r4
10010ea4:	4664      	mov	r4, ip
10010ea6:	432c      	orrs	r4, r5
10010ea8:	2700      	movs	r7, #0
10010eaa:	1b0d      	subs	r5, r1, r4
10010eac:	e6e7      	b.n	10010c7e <__aeabi_dsub+0x416>
10010eae:	2280      	movs	r2, #128	; 0x80
10010eb0:	2300      	movs	r3, #0
10010eb2:	0312      	lsls	r2, r2, #12
10010eb4:	4c14      	ldr	r4, [pc, #80]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010eb6:	2500      	movs	r5, #0
10010eb8:	e5a1      	b.n	100109fe <__aeabi_dsub+0x196>
10010eba:	433d      	orrs	r5, r7
10010ebc:	1e6f      	subs	r7, r5, #1
10010ebe:	41bd      	sbcs	r5, r7
10010ec0:	2700      	movs	r7, #0
10010ec2:	b2ed      	uxtb	r5, r5
10010ec4:	e760      	b.n	10010d88 <__aeabi_dsub+0x520>
10010ec6:	0007      	movs	r7, r0
10010ec8:	000d      	movs	r5, r1
10010eca:	4c0f      	ldr	r4, [pc, #60]	; (10010f08 <__aeabi_dsub+0x6a0>)
10010ecc:	e4f8      	b.n	100108c0 <__aeabi_dsub+0x58>
10010ece:	0007      	movs	r7, r0
10010ed0:	000d      	movs	r5, r1
10010ed2:	e4f5      	b.n	100108c0 <__aeabi_dsub+0x58>
10010ed4:	464e      	mov	r6, r9
10010ed6:	003c      	movs	r4, r7
10010ed8:	3e20      	subs	r6, #32
10010eda:	40f4      	lsrs	r4, r6
10010edc:	46a0      	mov	r8, r4
10010ede:	464c      	mov	r4, r9
10010ee0:	2c20      	cmp	r4, #32
10010ee2:	d00e      	beq.n	10010f02 <__aeabi_dsub+0x69a>
10010ee4:	2440      	movs	r4, #64	; 0x40
10010ee6:	464e      	mov	r6, r9
10010ee8:	1ba4      	subs	r4, r4, r6
10010eea:	40a7      	lsls	r7, r4
10010eec:	433d      	orrs	r5, r7
10010eee:	1e6f      	subs	r7, r5, #1
10010ef0:	41bd      	sbcs	r5, r7
10010ef2:	4644      	mov	r4, r8
10010ef4:	2700      	movs	r7, #0
10010ef6:	4325      	orrs	r5, r4
10010ef8:	e746      	b.n	10010d88 <__aeabi_dsub+0x520>
10010efa:	2700      	movs	r7, #0
10010efc:	e7cf      	b.n	10010e9e <__aeabi_dsub+0x636>
10010efe:	000d      	movs	r5, r1
10010f00:	e573      	b.n	100109ea <__aeabi_dsub+0x182>
10010f02:	2700      	movs	r7, #0
10010f04:	e7f2      	b.n	10010eec <__aeabi_dsub+0x684>
10010f06:	46c0      	nop			; (mov r8, r8)
10010f08:	000007ff 	.word	0x000007ff
10010f0c:	ff7fffff 	.word	0xff7fffff

10010f10 <__aeabi_d2iz>:
10010f10:	030b      	lsls	r3, r1, #12
10010f12:	b530      	push	{r4, r5, lr}
10010f14:	4d13      	ldr	r5, [pc, #76]	; (10010f64 <__aeabi_d2iz+0x54>)
10010f16:	0b1a      	lsrs	r2, r3, #12
10010f18:	004b      	lsls	r3, r1, #1
10010f1a:	0d5b      	lsrs	r3, r3, #21
10010f1c:	0fc9      	lsrs	r1, r1, #31
10010f1e:	2400      	movs	r4, #0
10010f20:	42ab      	cmp	r3, r5
10010f22:	dd11      	ble.n	10010f48 <__aeabi_d2iz+0x38>
10010f24:	4c10      	ldr	r4, [pc, #64]	; (10010f68 <__aeabi_d2iz+0x58>)
10010f26:	42a3      	cmp	r3, r4
10010f28:	dc10      	bgt.n	10010f4c <__aeabi_d2iz+0x3c>
10010f2a:	2480      	movs	r4, #128	; 0x80
10010f2c:	0364      	lsls	r4, r4, #13
10010f2e:	4322      	orrs	r2, r4
10010f30:	4c0e      	ldr	r4, [pc, #56]	; (10010f6c <__aeabi_d2iz+0x5c>)
10010f32:	1ae4      	subs	r4, r4, r3
10010f34:	2c1f      	cmp	r4, #31
10010f36:	dd0c      	ble.n	10010f52 <__aeabi_d2iz+0x42>
10010f38:	480d      	ldr	r0, [pc, #52]	; (10010f70 <__aeabi_d2iz+0x60>)
10010f3a:	1ac3      	subs	r3, r0, r3
10010f3c:	40da      	lsrs	r2, r3
10010f3e:	0013      	movs	r3, r2
10010f40:	425c      	negs	r4, r3
10010f42:	2900      	cmp	r1, #0
10010f44:	d100      	bne.n	10010f48 <__aeabi_d2iz+0x38>
10010f46:	001c      	movs	r4, r3
10010f48:	0020      	movs	r0, r4
10010f4a:	bd30      	pop	{r4, r5, pc}
10010f4c:	4b09      	ldr	r3, [pc, #36]	; (10010f74 <__aeabi_d2iz+0x64>)
10010f4e:	18cc      	adds	r4, r1, r3
10010f50:	e7fa      	b.n	10010f48 <__aeabi_d2iz+0x38>
10010f52:	40e0      	lsrs	r0, r4
10010f54:	4c08      	ldr	r4, [pc, #32]	; (10010f78 <__aeabi_d2iz+0x68>)
10010f56:	46a4      	mov	ip, r4
10010f58:	4463      	add	r3, ip
10010f5a:	409a      	lsls	r2, r3
10010f5c:	0013      	movs	r3, r2
10010f5e:	4303      	orrs	r3, r0
10010f60:	e7ee      	b.n	10010f40 <__aeabi_d2iz+0x30>
10010f62:	46c0      	nop			; (mov r8, r8)
10010f64:	000003fe 	.word	0x000003fe
10010f68:	0000041d 	.word	0x0000041d
10010f6c:	00000433 	.word	0x00000433
10010f70:	00000413 	.word	0x00000413
10010f74:	7fffffff 	.word	0x7fffffff
10010f78:	fffffbed 	.word	0xfffffbed

10010f7c <__aeabi_i2d>:
10010f7c:	b570      	push	{r4, r5, r6, lr}
10010f7e:	2800      	cmp	r0, #0
10010f80:	d030      	beq.n	10010fe4 <__aeabi_i2d+0x68>
10010f82:	17c3      	asrs	r3, r0, #31
10010f84:	18c4      	adds	r4, r0, r3
10010f86:	405c      	eors	r4, r3
10010f88:	0fc5      	lsrs	r5, r0, #31
10010f8a:	0020      	movs	r0, r4
10010f8c:	f000 f974 	bl	10011278 <__clzsi2>
10010f90:	4b17      	ldr	r3, [pc, #92]	; (10010ff0 <__aeabi_i2d+0x74>)
10010f92:	4a18      	ldr	r2, [pc, #96]	; (10010ff4 <__aeabi_i2d+0x78>)
10010f94:	1a1b      	subs	r3, r3, r0
10010f96:	1ad2      	subs	r2, r2, r3
10010f98:	2a1f      	cmp	r2, #31
10010f9a:	dd18      	ble.n	10010fce <__aeabi_i2d+0x52>
10010f9c:	4a16      	ldr	r2, [pc, #88]	; (10010ff8 <__aeabi_i2d+0x7c>)
10010f9e:	1ad2      	subs	r2, r2, r3
10010fa0:	4094      	lsls	r4, r2
10010fa2:	2200      	movs	r2, #0
10010fa4:	0324      	lsls	r4, r4, #12
10010fa6:	055b      	lsls	r3, r3, #21
10010fa8:	0b24      	lsrs	r4, r4, #12
10010faa:	0d5b      	lsrs	r3, r3, #21
10010fac:	2100      	movs	r1, #0
10010fae:	0010      	movs	r0, r2
10010fb0:	0324      	lsls	r4, r4, #12
10010fb2:	0d0a      	lsrs	r2, r1, #20
10010fb4:	0512      	lsls	r2, r2, #20
10010fb6:	0b24      	lsrs	r4, r4, #12
10010fb8:	4314      	orrs	r4, r2
10010fba:	4a10      	ldr	r2, [pc, #64]	; (10010ffc <__aeabi_i2d+0x80>)
10010fbc:	051b      	lsls	r3, r3, #20
10010fbe:	4014      	ands	r4, r2
10010fc0:	431c      	orrs	r4, r3
10010fc2:	0064      	lsls	r4, r4, #1
10010fc4:	07ed      	lsls	r5, r5, #31
10010fc6:	0864      	lsrs	r4, r4, #1
10010fc8:	432c      	orrs	r4, r5
10010fca:	0021      	movs	r1, r4
10010fcc:	bd70      	pop	{r4, r5, r6, pc}
10010fce:	0021      	movs	r1, r4
10010fd0:	4091      	lsls	r1, r2
10010fd2:	000a      	movs	r2, r1
10010fd4:	210b      	movs	r1, #11
10010fd6:	1a08      	subs	r0, r1, r0
10010fd8:	40c4      	lsrs	r4, r0
10010fda:	055b      	lsls	r3, r3, #21
10010fdc:	0324      	lsls	r4, r4, #12
10010fde:	0b24      	lsrs	r4, r4, #12
10010fe0:	0d5b      	lsrs	r3, r3, #21
10010fe2:	e7e3      	b.n	10010fac <__aeabi_i2d+0x30>
10010fe4:	2500      	movs	r5, #0
10010fe6:	2300      	movs	r3, #0
10010fe8:	2400      	movs	r4, #0
10010fea:	2200      	movs	r2, #0
10010fec:	e7de      	b.n	10010fac <__aeabi_i2d+0x30>
10010fee:	46c0      	nop			; (mov r8, r8)
10010ff0:	0000041e 	.word	0x0000041e
10010ff4:	00000433 	.word	0x00000433
10010ff8:	00000413 	.word	0x00000413
10010ffc:	800fffff 	.word	0x800fffff

10011000 <__aeabi_ui2d>:
10011000:	b570      	push	{r4, r5, r6, lr}
10011002:	1e05      	subs	r5, r0, #0
10011004:	d028      	beq.n	10011058 <__aeabi_ui2d+0x58>
10011006:	f000 f937 	bl	10011278 <__clzsi2>
1001100a:	4b15      	ldr	r3, [pc, #84]	; (10011060 <__aeabi_ui2d+0x60>)
1001100c:	4a15      	ldr	r2, [pc, #84]	; (10011064 <__aeabi_ui2d+0x64>)
1001100e:	1a1b      	subs	r3, r3, r0
10011010:	1ad2      	subs	r2, r2, r3
10011012:	2a1f      	cmp	r2, #31
10011014:	dd16      	ble.n	10011044 <__aeabi_ui2d+0x44>
10011016:	002c      	movs	r4, r5
10011018:	4a13      	ldr	r2, [pc, #76]	; (10011068 <__aeabi_ui2d+0x68>)
1001101a:	2500      	movs	r5, #0
1001101c:	1ad2      	subs	r2, r2, r3
1001101e:	4094      	lsls	r4, r2
10011020:	055a      	lsls	r2, r3, #21
10011022:	0324      	lsls	r4, r4, #12
10011024:	0b24      	lsrs	r4, r4, #12
10011026:	0d52      	lsrs	r2, r2, #21
10011028:	2100      	movs	r1, #0
1001102a:	0324      	lsls	r4, r4, #12
1001102c:	0d0b      	lsrs	r3, r1, #20
1001102e:	0b24      	lsrs	r4, r4, #12
10011030:	051b      	lsls	r3, r3, #20
10011032:	4323      	orrs	r3, r4
10011034:	4c0d      	ldr	r4, [pc, #52]	; (1001106c <__aeabi_ui2d+0x6c>)
10011036:	0512      	lsls	r2, r2, #20
10011038:	4023      	ands	r3, r4
1001103a:	4313      	orrs	r3, r2
1001103c:	005b      	lsls	r3, r3, #1
1001103e:	0028      	movs	r0, r5
10011040:	0859      	lsrs	r1, r3, #1
10011042:	bd70      	pop	{r4, r5, r6, pc}
10011044:	210b      	movs	r1, #11
10011046:	002c      	movs	r4, r5
10011048:	1a08      	subs	r0, r1, r0
1001104a:	40c4      	lsrs	r4, r0
1001104c:	4095      	lsls	r5, r2
1001104e:	0324      	lsls	r4, r4, #12
10011050:	055a      	lsls	r2, r3, #21
10011052:	0b24      	lsrs	r4, r4, #12
10011054:	0d52      	lsrs	r2, r2, #21
10011056:	e7e7      	b.n	10011028 <__aeabi_ui2d+0x28>
10011058:	2200      	movs	r2, #0
1001105a:	2400      	movs	r4, #0
1001105c:	e7e4      	b.n	10011028 <__aeabi_ui2d+0x28>
1001105e:	46c0      	nop			; (mov r8, r8)
10011060:	0000041e 	.word	0x0000041e
10011064:	00000433 	.word	0x00000433
10011068:	00000413 	.word	0x00000413
1001106c:	800fffff 	.word	0x800fffff

10011070 <__aeabi_d2f>:
10011070:	004b      	lsls	r3, r1, #1
10011072:	b570      	push	{r4, r5, r6, lr}
10011074:	0d5e      	lsrs	r6, r3, #21
10011076:	030c      	lsls	r4, r1, #12
10011078:	1c75      	adds	r5, r6, #1
1001107a:	0a64      	lsrs	r4, r4, #9
1001107c:	0f42      	lsrs	r2, r0, #29
1001107e:	056d      	lsls	r5, r5, #21
10011080:	4322      	orrs	r2, r4
10011082:	0fc9      	lsrs	r1, r1, #31
10011084:	00c4      	lsls	r4, r0, #3
10011086:	0d6d      	lsrs	r5, r5, #21
10011088:	2d01      	cmp	r5, #1
1001108a:	dd2a      	ble.n	100110e2 <__aeabi_d2f+0x72>
1001108c:	4b3b      	ldr	r3, [pc, #236]	; (1001117c <__aeabi_d2f+0x10c>)
1001108e:	18f3      	adds	r3, r6, r3
10011090:	2bfe      	cmp	r3, #254	; 0xfe
10011092:	dc1a      	bgt.n	100110ca <__aeabi_d2f+0x5a>
10011094:	2b00      	cmp	r3, #0
10011096:	dd42      	ble.n	1001111e <__aeabi_d2f+0xae>
10011098:	0180      	lsls	r0, r0, #6
1001109a:	1e45      	subs	r5, r0, #1
1001109c:	41a8      	sbcs	r0, r5
1001109e:	00d2      	lsls	r2, r2, #3
100110a0:	4310      	orrs	r0, r2
100110a2:	0f62      	lsrs	r2, r4, #29
100110a4:	4302      	orrs	r2, r0
100110a6:	0750      	lsls	r0, r2, #29
100110a8:	d004      	beq.n	100110b4 <__aeabi_d2f+0x44>
100110aa:	200f      	movs	r0, #15
100110ac:	4010      	ands	r0, r2
100110ae:	2804      	cmp	r0, #4
100110b0:	d000      	beq.n	100110b4 <__aeabi_d2f+0x44>
100110b2:	3204      	adds	r2, #4
100110b4:	2080      	movs	r0, #128	; 0x80
100110b6:	04c0      	lsls	r0, r0, #19
100110b8:	4010      	ands	r0, r2
100110ba:	d021      	beq.n	10011100 <__aeabi_d2f+0x90>
100110bc:	3301      	adds	r3, #1
100110be:	2bff      	cmp	r3, #255	; 0xff
100110c0:	d003      	beq.n	100110ca <__aeabi_d2f+0x5a>
100110c2:	0192      	lsls	r2, r2, #6
100110c4:	0a52      	lsrs	r2, r2, #9
100110c6:	b2db      	uxtb	r3, r3
100110c8:	e001      	b.n	100110ce <__aeabi_d2f+0x5e>
100110ca:	23ff      	movs	r3, #255	; 0xff
100110cc:	2200      	movs	r2, #0
100110ce:	0252      	lsls	r2, r2, #9
100110d0:	0a52      	lsrs	r2, r2, #9
100110d2:	05db      	lsls	r3, r3, #23
100110d4:	4313      	orrs	r3, r2
100110d6:	005b      	lsls	r3, r3, #1
100110d8:	07c9      	lsls	r1, r1, #31
100110da:	085b      	lsrs	r3, r3, #1
100110dc:	430b      	orrs	r3, r1
100110de:	0018      	movs	r0, r3
100110e0:	bd70      	pop	{r4, r5, r6, pc}
100110e2:	2e00      	cmp	r6, #0
100110e4:	d007      	beq.n	100110f6 <__aeabi_d2f+0x86>
100110e6:	4314      	orrs	r4, r2
100110e8:	d0ef      	beq.n	100110ca <__aeabi_d2f+0x5a>
100110ea:	2080      	movs	r0, #128	; 0x80
100110ec:	00d2      	lsls	r2, r2, #3
100110ee:	0480      	lsls	r0, r0, #18
100110f0:	4302      	orrs	r2, r0
100110f2:	23ff      	movs	r3, #255	; 0xff
100110f4:	e7d7      	b.n	100110a6 <__aeabi_d2f+0x36>
100110f6:	4322      	orrs	r2, r4
100110f8:	2300      	movs	r3, #0
100110fa:	2a00      	cmp	r2, #0
100110fc:	d003      	beq.n	10011106 <__aeabi_d2f+0x96>
100110fe:	2205      	movs	r2, #5
10011100:	08d2      	lsrs	r2, r2, #3
10011102:	2bff      	cmp	r3, #255	; 0xff
10011104:	d003      	beq.n	1001110e <__aeabi_d2f+0x9e>
10011106:	0252      	lsls	r2, r2, #9
10011108:	0a52      	lsrs	r2, r2, #9
1001110a:	b2db      	uxtb	r3, r3
1001110c:	e7df      	b.n	100110ce <__aeabi_d2f+0x5e>
1001110e:	2a00      	cmp	r2, #0
10011110:	d032      	beq.n	10011178 <__aeabi_d2f+0x108>
10011112:	2080      	movs	r0, #128	; 0x80
10011114:	03c0      	lsls	r0, r0, #15
10011116:	4302      	orrs	r2, r0
10011118:	0252      	lsls	r2, r2, #9
1001111a:	0a52      	lsrs	r2, r2, #9
1001111c:	e7d7      	b.n	100110ce <__aeabi_d2f+0x5e>
1001111e:	0018      	movs	r0, r3
10011120:	3017      	adds	r0, #23
10011122:	db14      	blt.n	1001114e <__aeabi_d2f+0xde>
10011124:	2080      	movs	r0, #128	; 0x80
10011126:	0400      	lsls	r0, r0, #16
10011128:	4302      	orrs	r2, r0
1001112a:	201e      	movs	r0, #30
1001112c:	1ac0      	subs	r0, r0, r3
1001112e:	281f      	cmp	r0, #31
10011130:	dc0f      	bgt.n	10011152 <__aeabi_d2f+0xe2>
10011132:	0025      	movs	r5, r4
10011134:	4b12      	ldr	r3, [pc, #72]	; (10011180 <__aeabi_d2f+0x110>)
10011136:	18f3      	adds	r3, r6, r3
10011138:	409d      	lsls	r5, r3
1001113a:	1e6e      	subs	r6, r5, #1
1001113c:	41b5      	sbcs	r5, r6
1001113e:	409a      	lsls	r2, r3
10011140:	002b      	movs	r3, r5
10011142:	4313      	orrs	r3, r2
10011144:	0022      	movs	r2, r4
10011146:	40c2      	lsrs	r2, r0
10011148:	431a      	orrs	r2, r3
1001114a:	2300      	movs	r3, #0
1001114c:	e7ab      	b.n	100110a6 <__aeabi_d2f+0x36>
1001114e:	2300      	movs	r3, #0
10011150:	e7d5      	b.n	100110fe <__aeabi_d2f+0x8e>
10011152:	2502      	movs	r5, #2
10011154:	426d      	negs	r5, r5
10011156:	1aeb      	subs	r3, r5, r3
10011158:	0015      	movs	r5, r2
1001115a:	40dd      	lsrs	r5, r3
1001115c:	2820      	cmp	r0, #32
1001115e:	d009      	beq.n	10011174 <__aeabi_d2f+0x104>
10011160:	4b08      	ldr	r3, [pc, #32]	; (10011184 <__aeabi_d2f+0x114>)
10011162:	18f3      	adds	r3, r6, r3
10011164:	409a      	lsls	r2, r3
10011166:	4314      	orrs	r4, r2
10011168:	1e62      	subs	r2, r4, #1
1001116a:	4194      	sbcs	r4, r2
1001116c:	0022      	movs	r2, r4
1001116e:	2300      	movs	r3, #0
10011170:	432a      	orrs	r2, r5
10011172:	e798      	b.n	100110a6 <__aeabi_d2f+0x36>
10011174:	2200      	movs	r2, #0
10011176:	e7f6      	b.n	10011166 <__aeabi_d2f+0xf6>
10011178:	2200      	movs	r2, #0
1001117a:	e7a8      	b.n	100110ce <__aeabi_d2f+0x5e>
1001117c:	fffffc80 	.word	0xfffffc80
10011180:	fffffc82 	.word	0xfffffc82
10011184:	fffffca2 	.word	0xfffffca2

10011188 <__aeabi_cdrcmple>:
10011188:	4684      	mov	ip, r0
1001118a:	1c10      	adds	r0, r2, #0
1001118c:	4662      	mov	r2, ip
1001118e:	468c      	mov	ip, r1
10011190:	1c19      	adds	r1, r3, #0
10011192:	4663      	mov	r3, ip
10011194:	e000      	b.n	10011198 <__aeabi_cdcmpeq>
10011196:	46c0      	nop			; (mov r8, r8)

10011198 <__aeabi_cdcmpeq>:
10011198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001119a:	f000 f9df 	bl	1001155c <__ledf2>
1001119e:	2800      	cmp	r0, #0
100111a0:	d401      	bmi.n	100111a6 <__aeabi_cdcmpeq+0xe>
100111a2:	2100      	movs	r1, #0
100111a4:	42c8      	cmn	r0, r1
100111a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100111a8 <__aeabi_dcmpeq>:
100111a8:	b510      	push	{r4, lr}
100111aa:	f000 f933 	bl	10011414 <__eqdf2>
100111ae:	4240      	negs	r0, r0
100111b0:	3001      	adds	r0, #1
100111b2:	bd10      	pop	{r4, pc}

100111b4 <__aeabi_dcmplt>:
100111b4:	b510      	push	{r4, lr}
100111b6:	f000 f9d1 	bl	1001155c <__ledf2>
100111ba:	2800      	cmp	r0, #0
100111bc:	db01      	blt.n	100111c2 <__aeabi_dcmplt+0xe>
100111be:	2000      	movs	r0, #0
100111c0:	bd10      	pop	{r4, pc}
100111c2:	2001      	movs	r0, #1
100111c4:	bd10      	pop	{r4, pc}
100111c6:	46c0      	nop			; (mov r8, r8)

100111c8 <__aeabi_dcmple>:
100111c8:	b510      	push	{r4, lr}
100111ca:	f000 f9c7 	bl	1001155c <__ledf2>
100111ce:	2800      	cmp	r0, #0
100111d0:	dd01      	ble.n	100111d6 <__aeabi_dcmple+0xe>
100111d2:	2000      	movs	r0, #0
100111d4:	bd10      	pop	{r4, pc}
100111d6:	2001      	movs	r0, #1
100111d8:	bd10      	pop	{r4, pc}
100111da:	46c0      	nop			; (mov r8, r8)

100111dc <__aeabi_dcmpgt>:
100111dc:	b510      	push	{r4, lr}
100111de:	f000 f959 	bl	10011494 <__gedf2>
100111e2:	2800      	cmp	r0, #0
100111e4:	dc01      	bgt.n	100111ea <__aeabi_dcmpgt+0xe>
100111e6:	2000      	movs	r0, #0
100111e8:	bd10      	pop	{r4, pc}
100111ea:	2001      	movs	r0, #1
100111ec:	bd10      	pop	{r4, pc}
100111ee:	46c0      	nop			; (mov r8, r8)

100111f0 <__aeabi_dcmpge>:
100111f0:	b510      	push	{r4, lr}
100111f2:	f000 f94f 	bl	10011494 <__gedf2>
100111f6:	2800      	cmp	r0, #0
100111f8:	da01      	bge.n	100111fe <__aeabi_dcmpge+0xe>
100111fa:	2000      	movs	r0, #0
100111fc:	bd10      	pop	{r4, pc}
100111fe:	2001      	movs	r0, #1
10011200:	bd10      	pop	{r4, pc}
10011202:	46c0      	nop			; (mov r8, r8)

10011204 <__aeabi_cfrcmple>:
10011204:	4684      	mov	ip, r0
10011206:	1c08      	adds	r0, r1, #0
10011208:	4661      	mov	r1, ip
1001120a:	e7ff      	b.n	1001120c <__aeabi_cfcmpeq>

1001120c <__aeabi_cfcmpeq>:
1001120c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001120e:	f000 f8bd 	bl	1001138c <__lesf2>
10011212:	2800      	cmp	r0, #0
10011214:	d401      	bmi.n	1001121a <__aeabi_cfcmpeq+0xe>
10011216:	2100      	movs	r1, #0
10011218:	42c8      	cmn	r0, r1
1001121a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001121c <__aeabi_fcmpeq>:
1001121c:	b510      	push	{r4, lr}
1001121e:	f000 f849 	bl	100112b4 <__eqsf2>
10011222:	4240      	negs	r0, r0
10011224:	3001      	adds	r0, #1
10011226:	bd10      	pop	{r4, pc}

10011228 <__aeabi_fcmplt>:
10011228:	b510      	push	{r4, lr}
1001122a:	f000 f8af 	bl	1001138c <__lesf2>
1001122e:	2800      	cmp	r0, #0
10011230:	db01      	blt.n	10011236 <__aeabi_fcmplt+0xe>
10011232:	2000      	movs	r0, #0
10011234:	bd10      	pop	{r4, pc}
10011236:	2001      	movs	r0, #1
10011238:	bd10      	pop	{r4, pc}
1001123a:	46c0      	nop			; (mov r8, r8)

1001123c <__aeabi_fcmple>:
1001123c:	b510      	push	{r4, lr}
1001123e:	f000 f8a5 	bl	1001138c <__lesf2>
10011242:	2800      	cmp	r0, #0
10011244:	dd01      	ble.n	1001124a <__aeabi_fcmple+0xe>
10011246:	2000      	movs	r0, #0
10011248:	bd10      	pop	{r4, pc}
1001124a:	2001      	movs	r0, #1
1001124c:	bd10      	pop	{r4, pc}
1001124e:	46c0      	nop			; (mov r8, r8)

10011250 <__aeabi_fcmpgt>:
10011250:	b510      	push	{r4, lr}
10011252:	f000 f857 	bl	10011304 <__gesf2>
10011256:	2800      	cmp	r0, #0
10011258:	dc01      	bgt.n	1001125e <__aeabi_fcmpgt+0xe>
1001125a:	2000      	movs	r0, #0
1001125c:	bd10      	pop	{r4, pc}
1001125e:	2001      	movs	r0, #1
10011260:	bd10      	pop	{r4, pc}
10011262:	46c0      	nop			; (mov r8, r8)

10011264 <__aeabi_fcmpge>:
10011264:	b510      	push	{r4, lr}
10011266:	f000 f84d 	bl	10011304 <__gesf2>
1001126a:	2800      	cmp	r0, #0
1001126c:	da01      	bge.n	10011272 <__aeabi_fcmpge+0xe>
1001126e:	2000      	movs	r0, #0
10011270:	bd10      	pop	{r4, pc}
10011272:	2001      	movs	r0, #1
10011274:	bd10      	pop	{r4, pc}
10011276:	46c0      	nop			; (mov r8, r8)

10011278 <__clzsi2>:
10011278:	211c      	movs	r1, #28
1001127a:	2301      	movs	r3, #1
1001127c:	041b      	lsls	r3, r3, #16
1001127e:	4298      	cmp	r0, r3
10011280:	d301      	bcc.n	10011286 <__clzsi2+0xe>
10011282:	0c00      	lsrs	r0, r0, #16
10011284:	3910      	subs	r1, #16
10011286:	0a1b      	lsrs	r3, r3, #8
10011288:	4298      	cmp	r0, r3
1001128a:	d301      	bcc.n	10011290 <__clzsi2+0x18>
1001128c:	0a00      	lsrs	r0, r0, #8
1001128e:	3908      	subs	r1, #8
10011290:	091b      	lsrs	r3, r3, #4
10011292:	4298      	cmp	r0, r3
10011294:	d301      	bcc.n	1001129a <__clzsi2+0x22>
10011296:	0900      	lsrs	r0, r0, #4
10011298:	3904      	subs	r1, #4
1001129a:	a202      	add	r2, pc, #8	; (adr r2, 100112a4 <__clzsi2+0x2c>)
1001129c:	5c10      	ldrb	r0, [r2, r0]
1001129e:	1840      	adds	r0, r0, r1
100112a0:	4770      	bx	lr
100112a2:	46c0      	nop			; (mov r8, r8)
100112a4:	02020304 	.word	0x02020304
100112a8:	01010101 	.word	0x01010101
	...

100112b4 <__eqsf2>:
100112b4:	0243      	lsls	r3, r0, #9
100112b6:	b570      	push	{r4, r5, r6, lr}
100112b8:	0042      	lsls	r2, r0, #1
100112ba:	004c      	lsls	r4, r1, #1
100112bc:	0a5d      	lsrs	r5, r3, #9
100112be:	0fc3      	lsrs	r3, r0, #31
100112c0:	0248      	lsls	r0, r1, #9
100112c2:	0e12      	lsrs	r2, r2, #24
100112c4:	0a46      	lsrs	r6, r0, #9
100112c6:	0e24      	lsrs	r4, r4, #24
100112c8:	0fc9      	lsrs	r1, r1, #31
100112ca:	2aff      	cmp	r2, #255	; 0xff
100112cc:	d00f      	beq.n	100112ee <__eqsf2+0x3a>
100112ce:	2cff      	cmp	r4, #255	; 0xff
100112d0:	d011      	beq.n	100112f6 <__eqsf2+0x42>
100112d2:	2001      	movs	r0, #1
100112d4:	42a2      	cmp	r2, r4
100112d6:	d000      	beq.n	100112da <__eqsf2+0x26>
100112d8:	bd70      	pop	{r4, r5, r6, pc}
100112da:	42b5      	cmp	r5, r6
100112dc:	d1fc      	bne.n	100112d8 <__eqsf2+0x24>
100112de:	428b      	cmp	r3, r1
100112e0:	d00d      	beq.n	100112fe <__eqsf2+0x4a>
100112e2:	2a00      	cmp	r2, #0
100112e4:	d1f8      	bne.n	100112d8 <__eqsf2+0x24>
100112e6:	0028      	movs	r0, r5
100112e8:	1e43      	subs	r3, r0, #1
100112ea:	4198      	sbcs	r0, r3
100112ec:	e7f4      	b.n	100112d8 <__eqsf2+0x24>
100112ee:	2001      	movs	r0, #1
100112f0:	2d00      	cmp	r5, #0
100112f2:	d1f1      	bne.n	100112d8 <__eqsf2+0x24>
100112f4:	e7eb      	b.n	100112ce <__eqsf2+0x1a>
100112f6:	2001      	movs	r0, #1
100112f8:	2e00      	cmp	r6, #0
100112fa:	d1ed      	bne.n	100112d8 <__eqsf2+0x24>
100112fc:	e7e9      	b.n	100112d2 <__eqsf2+0x1e>
100112fe:	2000      	movs	r0, #0
10011300:	e7ea      	b.n	100112d8 <__eqsf2+0x24>
10011302:	46c0      	nop			; (mov r8, r8)

10011304 <__gesf2>:
10011304:	0243      	lsls	r3, r0, #9
10011306:	b5f0      	push	{r4, r5, r6, r7, lr}
10011308:	0042      	lsls	r2, r0, #1
1001130a:	0a5d      	lsrs	r5, r3, #9
1001130c:	0fc3      	lsrs	r3, r0, #31
1001130e:	0248      	lsls	r0, r1, #9
10011310:	0a44      	lsrs	r4, r0, #9
10011312:	0048      	lsls	r0, r1, #1
10011314:	0e12      	lsrs	r2, r2, #24
10011316:	0e00      	lsrs	r0, r0, #24
10011318:	0fc9      	lsrs	r1, r1, #31
1001131a:	2aff      	cmp	r2, #255	; 0xff
1001131c:	d01f      	beq.n	1001135e <__gesf2+0x5a>
1001131e:	28ff      	cmp	r0, #255	; 0xff
10011320:	d022      	beq.n	10011368 <__gesf2+0x64>
10011322:	2a00      	cmp	r2, #0
10011324:	d109      	bne.n	1001133a <__gesf2+0x36>
10011326:	426e      	negs	r6, r5
10011328:	416e      	adcs	r6, r5
1001132a:	2800      	cmp	r0, #0
1001132c:	d10f      	bne.n	1001134e <__gesf2+0x4a>
1001132e:	2c00      	cmp	r4, #0
10011330:	d10d      	bne.n	1001134e <__gesf2+0x4a>
10011332:	2000      	movs	r0, #0
10011334:	2d00      	cmp	r5, #0
10011336:	d009      	beq.n	1001134c <__gesf2+0x48>
10011338:	e005      	b.n	10011346 <__gesf2+0x42>
1001133a:	2800      	cmp	r0, #0
1001133c:	d101      	bne.n	10011342 <__gesf2+0x3e>
1001133e:	2c00      	cmp	r4, #0
10011340:	d001      	beq.n	10011346 <__gesf2+0x42>
10011342:	428b      	cmp	r3, r1
10011344:	d013      	beq.n	1001136e <__gesf2+0x6a>
10011346:	4258      	negs	r0, r3
10011348:	2301      	movs	r3, #1
1001134a:	4318      	orrs	r0, r3
1001134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001134e:	2e00      	cmp	r6, #0
10011350:	d0f7      	beq.n	10011342 <__gesf2+0x3e>
10011352:	4248      	negs	r0, r1
10011354:	4141      	adcs	r1, r0
10011356:	2001      	movs	r0, #1
10011358:	4249      	negs	r1, r1
1001135a:	4308      	orrs	r0, r1
1001135c:	e7f6      	b.n	1001134c <__gesf2+0x48>
1001135e:	2d00      	cmp	r5, #0
10011360:	d0dd      	beq.n	1001131e <__gesf2+0x1a>
10011362:	2002      	movs	r0, #2
10011364:	4240      	negs	r0, r0
10011366:	e7f1      	b.n	1001134c <__gesf2+0x48>
10011368:	2c00      	cmp	r4, #0
1001136a:	d0da      	beq.n	10011322 <__gesf2+0x1e>
1001136c:	e7f9      	b.n	10011362 <__gesf2+0x5e>
1001136e:	4282      	cmp	r2, r0
10011370:	dce9      	bgt.n	10011346 <__gesf2+0x42>
10011372:	db04      	blt.n	1001137e <__gesf2+0x7a>
10011374:	42a5      	cmp	r5, r4
10011376:	d8e6      	bhi.n	10011346 <__gesf2+0x42>
10011378:	2000      	movs	r0, #0
1001137a:	42a5      	cmp	r5, r4
1001137c:	d2e6      	bcs.n	1001134c <__gesf2+0x48>
1001137e:	4258      	negs	r0, r3
10011380:	4143      	adcs	r3, r0
10011382:	2001      	movs	r0, #1
10011384:	425b      	negs	r3, r3
10011386:	4318      	orrs	r0, r3
10011388:	e7e0      	b.n	1001134c <__gesf2+0x48>
1001138a:	46c0      	nop			; (mov r8, r8)

1001138c <__lesf2>:
1001138c:	0243      	lsls	r3, r0, #9
1001138e:	b5f0      	push	{r4, r5, r6, r7, lr}
10011390:	0042      	lsls	r2, r0, #1
10011392:	004c      	lsls	r4, r1, #1
10011394:	0a5e      	lsrs	r6, r3, #9
10011396:	0fc3      	lsrs	r3, r0, #31
10011398:	0248      	lsls	r0, r1, #9
1001139a:	0e12      	lsrs	r2, r2, #24
1001139c:	0a45      	lsrs	r5, r0, #9
1001139e:	0e24      	lsrs	r4, r4, #24
100113a0:	0fc9      	lsrs	r1, r1, #31
100113a2:	2aff      	cmp	r2, #255	; 0xff
100113a4:	d017      	beq.n	100113d6 <__lesf2+0x4a>
100113a6:	2cff      	cmp	r4, #255	; 0xff
100113a8:	d019      	beq.n	100113de <__lesf2+0x52>
100113aa:	2a00      	cmp	r2, #0
100113ac:	d10b      	bne.n	100113c6 <__lesf2+0x3a>
100113ae:	4270      	negs	r0, r6
100113b0:	4170      	adcs	r0, r6
100113b2:	2c00      	cmp	r4, #0
100113b4:	d017      	beq.n	100113e6 <__lesf2+0x5a>
100113b6:	2800      	cmp	r0, #0
100113b8:	d007      	beq.n	100113ca <__lesf2+0x3e>
100113ba:	4248      	negs	r0, r1
100113bc:	4141      	adcs	r1, r0
100113be:	2001      	movs	r0, #1
100113c0:	4249      	negs	r1, r1
100113c2:	4308      	orrs	r0, r1
100113c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113c6:	2c00      	cmp	r4, #0
100113c8:	d013      	beq.n	100113f2 <__lesf2+0x66>
100113ca:	428b      	cmp	r3, r1
100113cc:	d014      	beq.n	100113f8 <__lesf2+0x6c>
100113ce:	4258      	negs	r0, r3
100113d0:	2301      	movs	r3, #1
100113d2:	4318      	orrs	r0, r3
100113d4:	e7f6      	b.n	100113c4 <__lesf2+0x38>
100113d6:	2002      	movs	r0, #2
100113d8:	2e00      	cmp	r6, #0
100113da:	d1f3      	bne.n	100113c4 <__lesf2+0x38>
100113dc:	e7e3      	b.n	100113a6 <__lesf2+0x1a>
100113de:	2002      	movs	r0, #2
100113e0:	2d00      	cmp	r5, #0
100113e2:	d1ef      	bne.n	100113c4 <__lesf2+0x38>
100113e4:	e7e1      	b.n	100113aa <__lesf2+0x1e>
100113e6:	2d00      	cmp	r5, #0
100113e8:	d1e5      	bne.n	100113b6 <__lesf2+0x2a>
100113ea:	2000      	movs	r0, #0
100113ec:	2e00      	cmp	r6, #0
100113ee:	d0e9      	beq.n	100113c4 <__lesf2+0x38>
100113f0:	e7ed      	b.n	100113ce <__lesf2+0x42>
100113f2:	2d00      	cmp	r5, #0
100113f4:	d1e9      	bne.n	100113ca <__lesf2+0x3e>
100113f6:	e7ea      	b.n	100113ce <__lesf2+0x42>
100113f8:	42a2      	cmp	r2, r4
100113fa:	dce8      	bgt.n	100113ce <__lesf2+0x42>
100113fc:	db04      	blt.n	10011408 <__lesf2+0x7c>
100113fe:	42ae      	cmp	r6, r5
10011400:	d8e5      	bhi.n	100113ce <__lesf2+0x42>
10011402:	2000      	movs	r0, #0
10011404:	42ae      	cmp	r6, r5
10011406:	d2dd      	bcs.n	100113c4 <__lesf2+0x38>
10011408:	4258      	negs	r0, r3
1001140a:	4143      	adcs	r3, r0
1001140c:	2001      	movs	r0, #1
1001140e:	425b      	negs	r3, r3
10011410:	4318      	orrs	r0, r3
10011412:	e7d7      	b.n	100113c4 <__lesf2+0x38>

10011414 <__eqdf2>:
10011414:	b5f0      	push	{r4, r5, r6, r7, lr}
10011416:	465f      	mov	r7, fp
10011418:	4656      	mov	r6, sl
1001141a:	464d      	mov	r5, r9
1001141c:	4644      	mov	r4, r8
1001141e:	b4f0      	push	{r4, r5, r6, r7}
10011420:	031f      	lsls	r7, r3, #12
10011422:	005c      	lsls	r4, r3, #1
10011424:	0fdb      	lsrs	r3, r3, #31
10011426:	469a      	mov	sl, r3
10011428:	4b19      	ldr	r3, [pc, #100]	; (10011490 <__eqdf2+0x7c>)
1001142a:	030e      	lsls	r6, r1, #12
1001142c:	004d      	lsls	r5, r1, #1
1001142e:	0fc9      	lsrs	r1, r1, #31
10011430:	4680      	mov	r8, r0
10011432:	0b36      	lsrs	r6, r6, #12
10011434:	0d6d      	lsrs	r5, r5, #21
10011436:	468b      	mov	fp, r1
10011438:	4691      	mov	r9, r2
1001143a:	0b3f      	lsrs	r7, r7, #12
1001143c:	0d64      	lsrs	r4, r4, #21
1001143e:	429d      	cmp	r5, r3
10011440:	d019      	beq.n	10011476 <__eqdf2+0x62>
10011442:	4b13      	ldr	r3, [pc, #76]	; (10011490 <__eqdf2+0x7c>)
10011444:	429c      	cmp	r4, r3
10011446:	d01b      	beq.n	10011480 <__eqdf2+0x6c>
10011448:	2301      	movs	r3, #1
1001144a:	42a5      	cmp	r5, r4
1001144c:	d006      	beq.n	1001145c <__eqdf2+0x48>
1001144e:	0018      	movs	r0, r3
10011450:	bc3c      	pop	{r2, r3, r4, r5}
10011452:	4690      	mov	r8, r2
10011454:	4699      	mov	r9, r3
10011456:	46a2      	mov	sl, r4
10011458:	46ab      	mov	fp, r5
1001145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001145c:	42be      	cmp	r6, r7
1001145e:	d1f6      	bne.n	1001144e <__eqdf2+0x3a>
10011460:	45c8      	cmp	r8, r9
10011462:	d1f4      	bne.n	1001144e <__eqdf2+0x3a>
10011464:	45d3      	cmp	fp, sl
10011466:	d010      	beq.n	1001148a <__eqdf2+0x76>
10011468:	2d00      	cmp	r5, #0
1001146a:	d1f0      	bne.n	1001144e <__eqdf2+0x3a>
1001146c:	4330      	orrs	r0, r6
1001146e:	0003      	movs	r3, r0
10011470:	1e5a      	subs	r2, r3, #1
10011472:	4193      	sbcs	r3, r2
10011474:	e7eb      	b.n	1001144e <__eqdf2+0x3a>
10011476:	0031      	movs	r1, r6
10011478:	2301      	movs	r3, #1
1001147a:	4301      	orrs	r1, r0
1001147c:	d1e7      	bne.n	1001144e <__eqdf2+0x3a>
1001147e:	e7e0      	b.n	10011442 <__eqdf2+0x2e>
10011480:	433a      	orrs	r2, r7
10011482:	2301      	movs	r3, #1
10011484:	2a00      	cmp	r2, #0
10011486:	d1e2      	bne.n	1001144e <__eqdf2+0x3a>
10011488:	e7de      	b.n	10011448 <__eqdf2+0x34>
1001148a:	2300      	movs	r3, #0
1001148c:	e7df      	b.n	1001144e <__eqdf2+0x3a>
1001148e:	46c0      	nop			; (mov r8, r8)
10011490:	000007ff 	.word	0x000007ff

10011494 <__gedf2>:
10011494:	b5f0      	push	{r4, r5, r6, r7, lr}
10011496:	465f      	mov	r7, fp
10011498:	4644      	mov	r4, r8
1001149a:	4656      	mov	r6, sl
1001149c:	464d      	mov	r5, r9
1001149e:	b4f0      	push	{r4, r5, r6, r7}
100114a0:	031f      	lsls	r7, r3, #12
100114a2:	0b3c      	lsrs	r4, r7, #12
100114a4:	4f2c      	ldr	r7, [pc, #176]	; (10011558 <__gedf2+0xc4>)
100114a6:	030e      	lsls	r6, r1, #12
100114a8:	004d      	lsls	r5, r1, #1
100114aa:	46a3      	mov	fp, r4
100114ac:	005c      	lsls	r4, r3, #1
100114ae:	4684      	mov	ip, r0
100114b0:	0b36      	lsrs	r6, r6, #12
100114b2:	0d6d      	lsrs	r5, r5, #21
100114b4:	0fc9      	lsrs	r1, r1, #31
100114b6:	4690      	mov	r8, r2
100114b8:	0d64      	lsrs	r4, r4, #21
100114ba:	0fdb      	lsrs	r3, r3, #31
100114bc:	42bd      	cmp	r5, r7
100114be:	d02b      	beq.n	10011518 <__gedf2+0x84>
100114c0:	4f25      	ldr	r7, [pc, #148]	; (10011558 <__gedf2+0xc4>)
100114c2:	42bc      	cmp	r4, r7
100114c4:	d02e      	beq.n	10011524 <__gedf2+0x90>
100114c6:	2d00      	cmp	r5, #0
100114c8:	d10e      	bne.n	100114e8 <__gedf2+0x54>
100114ca:	4330      	orrs	r0, r6
100114cc:	0007      	movs	r7, r0
100114ce:	4681      	mov	r9, r0
100114d0:	4278      	negs	r0, r7
100114d2:	4178      	adcs	r0, r7
100114d4:	2c00      	cmp	r4, #0
100114d6:	d117      	bne.n	10011508 <__gedf2+0x74>
100114d8:	465f      	mov	r7, fp
100114da:	433a      	orrs	r2, r7
100114dc:	d114      	bne.n	10011508 <__gedf2+0x74>
100114de:	464b      	mov	r3, r9
100114e0:	2000      	movs	r0, #0
100114e2:	2b00      	cmp	r3, #0
100114e4:	d00a      	beq.n	100114fc <__gedf2+0x68>
100114e6:	e006      	b.n	100114f6 <__gedf2+0x62>
100114e8:	2c00      	cmp	r4, #0
100114ea:	d102      	bne.n	100114f2 <__gedf2+0x5e>
100114ec:	4658      	mov	r0, fp
100114ee:	4302      	orrs	r2, r0
100114f0:	d001      	beq.n	100114f6 <__gedf2+0x62>
100114f2:	4299      	cmp	r1, r3
100114f4:	d01a      	beq.n	1001152c <__gedf2+0x98>
100114f6:	2301      	movs	r3, #1
100114f8:	4248      	negs	r0, r1
100114fa:	4318      	orrs	r0, r3
100114fc:	bc3c      	pop	{r2, r3, r4, r5}
100114fe:	4690      	mov	r8, r2
10011500:	4699      	mov	r9, r3
10011502:	46a2      	mov	sl, r4
10011504:	46ab      	mov	fp, r5
10011506:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011508:	2800      	cmp	r0, #0
1001150a:	d0f2      	beq.n	100114f2 <__gedf2+0x5e>
1001150c:	4258      	negs	r0, r3
1001150e:	4158      	adcs	r0, r3
10011510:	2201      	movs	r2, #1
10011512:	4240      	negs	r0, r0
10011514:	4310      	orrs	r0, r2
10011516:	e7f1      	b.n	100114fc <__gedf2+0x68>
10011518:	0037      	movs	r7, r6
1001151a:	4307      	orrs	r7, r0
1001151c:	d0d0      	beq.n	100114c0 <__gedf2+0x2c>
1001151e:	2002      	movs	r0, #2
10011520:	4240      	negs	r0, r0
10011522:	e7eb      	b.n	100114fc <__gedf2+0x68>
10011524:	465f      	mov	r7, fp
10011526:	4317      	orrs	r7, r2
10011528:	d0cd      	beq.n	100114c6 <__gedf2+0x32>
1001152a:	e7f8      	b.n	1001151e <__gedf2+0x8a>
1001152c:	42a5      	cmp	r5, r4
1001152e:	dce2      	bgt.n	100114f6 <__gedf2+0x62>
10011530:	db05      	blt.n	1001153e <__gedf2+0xaa>
10011532:	455e      	cmp	r6, fp
10011534:	d8df      	bhi.n	100114f6 <__gedf2+0x62>
10011536:	d008      	beq.n	1001154a <__gedf2+0xb6>
10011538:	2000      	movs	r0, #0
1001153a:	455e      	cmp	r6, fp
1001153c:	d2de      	bcs.n	100114fc <__gedf2+0x68>
1001153e:	4248      	negs	r0, r1
10011540:	4148      	adcs	r0, r1
10011542:	2301      	movs	r3, #1
10011544:	4240      	negs	r0, r0
10011546:	4318      	orrs	r0, r3
10011548:	e7d8      	b.n	100114fc <__gedf2+0x68>
1001154a:	45c4      	cmp	ip, r8
1001154c:	d8d3      	bhi.n	100114f6 <__gedf2+0x62>
1001154e:	2000      	movs	r0, #0
10011550:	45c4      	cmp	ip, r8
10011552:	d3f4      	bcc.n	1001153e <__gedf2+0xaa>
10011554:	e7d2      	b.n	100114fc <__gedf2+0x68>
10011556:	46c0      	nop			; (mov r8, r8)
10011558:	000007ff 	.word	0x000007ff

1001155c <__ledf2>:
1001155c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001155e:	465f      	mov	r7, fp
10011560:	464d      	mov	r5, r9
10011562:	4644      	mov	r4, r8
10011564:	4656      	mov	r6, sl
10011566:	b4f0      	push	{r4, r5, r6, r7}
10011568:	031c      	lsls	r4, r3, #12
1001156a:	0b24      	lsrs	r4, r4, #12
1001156c:	46a4      	mov	ip, r4
1001156e:	4c2f      	ldr	r4, [pc, #188]	; (1001162c <__ledf2+0xd0>)
10011570:	030f      	lsls	r7, r1, #12
10011572:	004d      	lsls	r5, r1, #1
10011574:	005e      	lsls	r6, r3, #1
10011576:	0fc9      	lsrs	r1, r1, #31
10011578:	4680      	mov	r8, r0
1001157a:	0b3f      	lsrs	r7, r7, #12
1001157c:	0d6d      	lsrs	r5, r5, #21
1001157e:	468b      	mov	fp, r1
10011580:	4691      	mov	r9, r2
10011582:	0d76      	lsrs	r6, r6, #21
10011584:	0fdb      	lsrs	r3, r3, #31
10011586:	42a5      	cmp	r5, r4
10011588:	d020      	beq.n	100115cc <__ledf2+0x70>
1001158a:	4c28      	ldr	r4, [pc, #160]	; (1001162c <__ledf2+0xd0>)
1001158c:	42a6      	cmp	r6, r4
1001158e:	d022      	beq.n	100115d6 <__ledf2+0x7a>
10011590:	2d00      	cmp	r5, #0
10011592:	d112      	bne.n	100115ba <__ledf2+0x5e>
10011594:	4338      	orrs	r0, r7
10011596:	4244      	negs	r4, r0
10011598:	4144      	adcs	r4, r0
1001159a:	2e00      	cmp	r6, #0
1001159c:	d020      	beq.n	100115e0 <__ledf2+0x84>
1001159e:	2c00      	cmp	r4, #0
100115a0:	d00d      	beq.n	100115be <__ledf2+0x62>
100115a2:	425c      	negs	r4, r3
100115a4:	4163      	adcs	r3, r4
100115a6:	2401      	movs	r4, #1
100115a8:	425b      	negs	r3, r3
100115aa:	431c      	orrs	r4, r3
100115ac:	0020      	movs	r0, r4
100115ae:	bc3c      	pop	{r2, r3, r4, r5}
100115b0:	4690      	mov	r8, r2
100115b2:	4699      	mov	r9, r3
100115b4:	46a2      	mov	sl, r4
100115b6:	46ab      	mov	fp, r5
100115b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115ba:	2e00      	cmp	r6, #0
100115bc:	d017      	beq.n	100115ee <__ledf2+0x92>
100115be:	455b      	cmp	r3, fp
100115c0:	d019      	beq.n	100115f6 <__ledf2+0x9a>
100115c2:	465b      	mov	r3, fp
100115c4:	425c      	negs	r4, r3
100115c6:	2301      	movs	r3, #1
100115c8:	431c      	orrs	r4, r3
100115ca:	e7ef      	b.n	100115ac <__ledf2+0x50>
100115cc:	0039      	movs	r1, r7
100115ce:	2402      	movs	r4, #2
100115d0:	4301      	orrs	r1, r0
100115d2:	d1eb      	bne.n	100115ac <__ledf2+0x50>
100115d4:	e7d9      	b.n	1001158a <__ledf2+0x2e>
100115d6:	4661      	mov	r1, ip
100115d8:	2402      	movs	r4, #2
100115da:	4311      	orrs	r1, r2
100115dc:	d1e6      	bne.n	100115ac <__ledf2+0x50>
100115de:	e7d7      	b.n	10011590 <__ledf2+0x34>
100115e0:	4661      	mov	r1, ip
100115e2:	430a      	orrs	r2, r1
100115e4:	d1db      	bne.n	1001159e <__ledf2+0x42>
100115e6:	2400      	movs	r4, #0
100115e8:	2800      	cmp	r0, #0
100115ea:	d0df      	beq.n	100115ac <__ledf2+0x50>
100115ec:	e7e9      	b.n	100115c2 <__ledf2+0x66>
100115ee:	4661      	mov	r1, ip
100115f0:	430a      	orrs	r2, r1
100115f2:	d1e4      	bne.n	100115be <__ledf2+0x62>
100115f4:	e7e5      	b.n	100115c2 <__ledf2+0x66>
100115f6:	42b5      	cmp	r5, r6
100115f8:	dd03      	ble.n	10011602 <__ledf2+0xa6>
100115fa:	2201      	movs	r2, #1
100115fc:	425c      	negs	r4, r3
100115fe:	4314      	orrs	r4, r2
10011600:	e7d4      	b.n	100115ac <__ledf2+0x50>
10011602:	42b5      	cmp	r5, r6
10011604:	dbcd      	blt.n	100115a2 <__ledf2+0x46>
10011606:	4567      	cmp	r7, ip
10011608:	d8db      	bhi.n	100115c2 <__ledf2+0x66>
1001160a:	d009      	beq.n	10011620 <__ledf2+0xc4>
1001160c:	2400      	movs	r4, #0
1001160e:	4567      	cmp	r7, ip
10011610:	d2cc      	bcs.n	100115ac <__ledf2+0x50>
10011612:	4659      	mov	r1, fp
10011614:	424c      	negs	r4, r1
10011616:	4161      	adcs	r1, r4
10011618:	2401      	movs	r4, #1
1001161a:	4249      	negs	r1, r1
1001161c:	430c      	orrs	r4, r1
1001161e:	e7c5      	b.n	100115ac <__ledf2+0x50>
10011620:	45c8      	cmp	r8, r9
10011622:	d8ce      	bhi.n	100115c2 <__ledf2+0x66>
10011624:	2400      	movs	r4, #0
10011626:	45c8      	cmp	r8, r9
10011628:	d3f3      	bcc.n	10011612 <__ledf2+0xb6>
1001162a:	e7bf      	b.n	100115ac <__ledf2+0x50>
1001162c:	000007ff 	.word	0x000007ff

10011630 <__libc_init_array>:
10011630:	4b0e      	ldr	r3, [pc, #56]	; (1001166c <__libc_init_array+0x3c>)
10011632:	b570      	push	{r4, r5, r6, lr}
10011634:	2500      	movs	r5, #0
10011636:	001e      	movs	r6, r3
10011638:	4c0d      	ldr	r4, [pc, #52]	; (10011670 <__libc_init_array+0x40>)
1001163a:	1ae4      	subs	r4, r4, r3
1001163c:	10a4      	asrs	r4, r4, #2
1001163e:	42a5      	cmp	r5, r4
10011640:	d004      	beq.n	1001164c <__libc_init_array+0x1c>
10011642:	00ab      	lsls	r3, r5, #2
10011644:	58f3      	ldr	r3, [r6, r3]
10011646:	4798      	blx	r3
10011648:	3501      	adds	r5, #1
1001164a:	e7f8      	b.n	1001163e <__libc_init_array+0xe>
1001164c:	f002 f8e6 	bl	1001381c <_init>
10011650:	4b08      	ldr	r3, [pc, #32]	; (10011674 <__libc_init_array+0x44>)
10011652:	2500      	movs	r5, #0
10011654:	001e      	movs	r6, r3
10011656:	4c08      	ldr	r4, [pc, #32]	; (10011678 <__libc_init_array+0x48>)
10011658:	1ae4      	subs	r4, r4, r3
1001165a:	10a4      	asrs	r4, r4, #2
1001165c:	42a5      	cmp	r5, r4
1001165e:	d004      	beq.n	1001166a <__libc_init_array+0x3a>
10011660:	00ab      	lsls	r3, r5, #2
10011662:	58f3      	ldr	r3, [r6, r3]
10011664:	4798      	blx	r3
10011666:	3501      	adds	r5, #1
10011668:	e7f8      	b.n	1001165c <__libc_init_array+0x2c>
1001166a:	bd70      	pop	{r4, r5, r6, pc}
1001166c:	10013828 	.word	0x10013828
10011670:	10013828 	.word	0x10013828
10011674:	10013828 	.word	0x10013828
10011678:	1001382c 	.word	0x1001382c

1001167c <memcmp>:
1001167c:	b530      	push	{r4, r5, lr}
1001167e:	2400      	movs	r4, #0
10011680:	42a2      	cmp	r2, r4
10011682:	d008      	beq.n	10011696 <memcmp+0x1a>
10011684:	5d03      	ldrb	r3, [r0, r4]
10011686:	1c65      	adds	r5, r4, #1
10011688:	5d0c      	ldrb	r4, [r1, r4]
1001168a:	42a3      	cmp	r3, r4
1001168c:	d001      	beq.n	10011692 <memcmp+0x16>
1001168e:	1b18      	subs	r0, r3, r4
10011690:	e002      	b.n	10011698 <memcmp+0x1c>
10011692:	002c      	movs	r4, r5
10011694:	e7f4      	b.n	10011680 <memcmp+0x4>
10011696:	2000      	movs	r0, #0
10011698:	bd30      	pop	{r4, r5, pc}

1001169a <memcpy>:
1001169a:	2300      	movs	r3, #0
1001169c:	b510      	push	{r4, lr}
1001169e:	429a      	cmp	r2, r3
100116a0:	d003      	beq.n	100116aa <memcpy+0x10>
100116a2:	5ccc      	ldrb	r4, [r1, r3]
100116a4:	54c4      	strb	r4, [r0, r3]
100116a6:	3301      	adds	r3, #1
100116a8:	e7f9      	b.n	1001169e <memcpy+0x4>
100116aa:	bd10      	pop	{r4, pc}

100116ac <memset>:
100116ac:	0003      	movs	r3, r0
100116ae:	1882      	adds	r2, r0, r2
100116b0:	4293      	cmp	r3, r2
100116b2:	d002      	beq.n	100116ba <memset+0xe>
100116b4:	7019      	strb	r1, [r3, #0]
100116b6:	3301      	adds	r3, #1
100116b8:	e7fa      	b.n	100116b0 <memset+0x4>
100116ba:	4770      	bx	lr

100116bc <iprintf>:
100116bc:	b40f      	push	{r0, r1, r2, r3}
100116be:	4b0b      	ldr	r3, [pc, #44]	; (100116ec <iprintf+0x30>)
100116c0:	b513      	push	{r0, r1, r4, lr}
100116c2:	681c      	ldr	r4, [r3, #0]
100116c4:	2c00      	cmp	r4, #0
100116c6:	d005      	beq.n	100116d4 <iprintf+0x18>
100116c8:	69a3      	ldr	r3, [r4, #24]
100116ca:	2b00      	cmp	r3, #0
100116cc:	d102      	bne.n	100116d4 <iprintf+0x18>
100116ce:	0020      	movs	r0, r4
100116d0:	f000 fb4e 	bl	10011d70 <__sinit>
100116d4:	ab05      	add	r3, sp, #20
100116d6:	9a04      	ldr	r2, [sp, #16]
100116d8:	68a1      	ldr	r1, [r4, #8]
100116da:	0020      	movs	r0, r4
100116dc:	9301      	str	r3, [sp, #4]
100116de:	f000 fd0d 	bl	100120fc <_vfiprintf_r>
100116e2:	bc16      	pop	{r1, r2, r4}
100116e4:	bc08      	pop	{r3}
100116e6:	b004      	add	sp, #16
100116e8:	4718      	bx	r3
100116ea:	46c0      	nop			; (mov r8, r8)
100116ec:	100138b0 	.word	0x100138b0

100116f0 <putchar>:
100116f0:	4b08      	ldr	r3, [pc, #32]	; (10011714 <putchar+0x24>)
100116f2:	b570      	push	{r4, r5, r6, lr}
100116f4:	681c      	ldr	r4, [r3, #0]
100116f6:	0005      	movs	r5, r0
100116f8:	2c00      	cmp	r4, #0
100116fa:	d005      	beq.n	10011708 <putchar+0x18>
100116fc:	69a3      	ldr	r3, [r4, #24]
100116fe:	2b00      	cmp	r3, #0
10011700:	d102      	bne.n	10011708 <putchar+0x18>
10011702:	0020      	movs	r0, r4
10011704:	f000 fb34 	bl	10011d70 <__sinit>
10011708:	0029      	movs	r1, r5
1001170a:	68a2      	ldr	r2, [r4, #8]
1001170c:	0020      	movs	r0, r4
1001170e:	f000 ffa1 	bl	10012654 <_putc_r>
10011712:	bd70      	pop	{r4, r5, r6, pc}
10011714:	100138b0 	.word	0x100138b0

10011718 <_puts_r>:
10011718:	b570      	push	{r4, r5, r6, lr}
1001171a:	0005      	movs	r5, r0
1001171c:	000e      	movs	r6, r1
1001171e:	2800      	cmp	r0, #0
10011720:	d004      	beq.n	1001172c <_puts_r+0x14>
10011722:	6983      	ldr	r3, [r0, #24]
10011724:	2b00      	cmp	r3, #0
10011726:	d101      	bne.n	1001172c <_puts_r+0x14>
10011728:	f000 fb22 	bl	10011d70 <__sinit>
1001172c:	69ab      	ldr	r3, [r5, #24]
1001172e:	68ac      	ldr	r4, [r5, #8]
10011730:	2b00      	cmp	r3, #0
10011732:	d102      	bne.n	1001173a <_puts_r+0x22>
10011734:	0028      	movs	r0, r5
10011736:	f000 fb1b 	bl	10011d70 <__sinit>
1001173a:	4b25      	ldr	r3, [pc, #148]	; (100117d0 <_puts_r+0xb8>)
1001173c:	429c      	cmp	r4, r3
1001173e:	d101      	bne.n	10011744 <_puts_r+0x2c>
10011740:	686c      	ldr	r4, [r5, #4]
10011742:	e008      	b.n	10011756 <_puts_r+0x3e>
10011744:	4b23      	ldr	r3, [pc, #140]	; (100117d4 <_puts_r+0xbc>)
10011746:	429c      	cmp	r4, r3
10011748:	d101      	bne.n	1001174e <_puts_r+0x36>
1001174a:	68ac      	ldr	r4, [r5, #8]
1001174c:	e003      	b.n	10011756 <_puts_r+0x3e>
1001174e:	4b22      	ldr	r3, [pc, #136]	; (100117d8 <_puts_r+0xc0>)
10011750:	429c      	cmp	r4, r3
10011752:	d100      	bne.n	10011756 <_puts_r+0x3e>
10011754:	68ec      	ldr	r4, [r5, #12]
10011756:	89a3      	ldrh	r3, [r4, #12]
10011758:	071b      	lsls	r3, r3, #28
1001175a:	d502      	bpl.n	10011762 <_puts_r+0x4a>
1001175c:	6923      	ldr	r3, [r4, #16]
1001175e:	2b00      	cmp	r3, #0
10011760:	d111      	bne.n	10011786 <_puts_r+0x6e>
10011762:	0021      	movs	r1, r4
10011764:	0028      	movs	r0, r5
10011766:	f000 f999 	bl	10011a9c <__swsetup_r>
1001176a:	2800      	cmp	r0, #0
1001176c:	d00b      	beq.n	10011786 <_puts_r+0x6e>
1001176e:	2001      	movs	r0, #1
10011770:	4240      	negs	r0, r0
10011772:	e02b      	b.n	100117cc <_puts_r+0xb4>
10011774:	3b01      	subs	r3, #1
10011776:	3601      	adds	r6, #1
10011778:	60a3      	str	r3, [r4, #8]
1001177a:	2b00      	cmp	r3, #0
1001177c:	db08      	blt.n	10011790 <_puts_r+0x78>
1001177e:	6823      	ldr	r3, [r4, #0]
10011780:	1c5a      	adds	r2, r3, #1
10011782:	6022      	str	r2, [r4, #0]
10011784:	7019      	strb	r1, [r3, #0]
10011786:	7831      	ldrb	r1, [r6, #0]
10011788:	68a3      	ldr	r3, [r4, #8]
1001178a:	2900      	cmp	r1, #0
1001178c:	d1f2      	bne.n	10011774 <_puts_r+0x5c>
1001178e:	e00b      	b.n	100117a8 <_puts_r+0x90>
10011790:	69a2      	ldr	r2, [r4, #24]
10011792:	4293      	cmp	r3, r2
10011794:	db01      	blt.n	1001179a <_puts_r+0x82>
10011796:	290a      	cmp	r1, #10
10011798:	d1f1      	bne.n	1001177e <_puts_r+0x66>
1001179a:	0022      	movs	r2, r4
1001179c:	0028      	movs	r0, r5
1001179e:	f000 f925 	bl	100119ec <__swbuf_r>
100117a2:	1c43      	adds	r3, r0, #1
100117a4:	d1ef      	bne.n	10011786 <_puts_r+0x6e>
100117a6:	e7e2      	b.n	1001176e <_puts_r+0x56>
100117a8:	3b01      	subs	r3, #1
100117aa:	60a3      	str	r3, [r4, #8]
100117ac:	2b00      	cmp	r3, #0
100117ae:	da08      	bge.n	100117c2 <_puts_r+0xaa>
100117b0:	0022      	movs	r2, r4
100117b2:	310a      	adds	r1, #10
100117b4:	0028      	movs	r0, r5
100117b6:	f000 f919 	bl	100119ec <__swbuf_r>
100117ba:	1c43      	adds	r3, r0, #1
100117bc:	d0d7      	beq.n	1001176e <_puts_r+0x56>
100117be:	200a      	movs	r0, #10
100117c0:	e004      	b.n	100117cc <_puts_r+0xb4>
100117c2:	200a      	movs	r0, #10
100117c4:	6823      	ldr	r3, [r4, #0]
100117c6:	1c5a      	adds	r2, r3, #1
100117c8:	6022      	str	r2, [r4, #0]
100117ca:	7018      	strb	r0, [r3, #0]
100117cc:	bd70      	pop	{r4, r5, r6, pc}
100117ce:	46c0      	nop			; (mov r8, r8)
100117d0:	10013788 	.word	0x10013788
100117d4:	100137a8 	.word	0x100137a8
100117d8:	100137c8 	.word	0x100137c8

100117dc <puts>:
100117dc:	b510      	push	{r4, lr}
100117de:	4b03      	ldr	r3, [pc, #12]	; (100117ec <puts+0x10>)
100117e0:	0001      	movs	r1, r0
100117e2:	6818      	ldr	r0, [r3, #0]
100117e4:	f7ff ff98 	bl	10011718 <_puts_r>
100117e8:	bd10      	pop	{r4, pc}
100117ea:	46c0      	nop			; (mov r8, r8)
100117ec:	100138b0 	.word	0x100138b0

100117f0 <rand>:
100117f0:	4b15      	ldr	r3, [pc, #84]	; (10011848 <rand+0x58>)
100117f2:	b510      	push	{r4, lr}
100117f4:	681c      	ldr	r4, [r3, #0]
100117f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100117f8:	2b00      	cmp	r3, #0
100117fa:	d115      	bne.n	10011828 <rand+0x38>
100117fc:	2018      	movs	r0, #24
100117fe:	f000 fbaf 	bl	10011f60 <malloc>
10011802:	4b12      	ldr	r3, [pc, #72]	; (1001184c <rand+0x5c>)
10011804:	63a0      	str	r0, [r4, #56]	; 0x38
10011806:	8003      	strh	r3, [r0, #0]
10011808:	4b11      	ldr	r3, [pc, #68]	; (10011850 <rand+0x60>)
1001180a:	2201      	movs	r2, #1
1001180c:	8043      	strh	r3, [r0, #2]
1001180e:	4b11      	ldr	r3, [pc, #68]	; (10011854 <rand+0x64>)
10011810:	8083      	strh	r3, [r0, #4]
10011812:	4b11      	ldr	r3, [pc, #68]	; (10011858 <rand+0x68>)
10011814:	80c3      	strh	r3, [r0, #6]
10011816:	4b11      	ldr	r3, [pc, #68]	; (1001185c <rand+0x6c>)
10011818:	8103      	strh	r3, [r0, #8]
1001181a:	2305      	movs	r3, #5
1001181c:	8143      	strh	r3, [r0, #10]
1001181e:	3306      	adds	r3, #6
10011820:	8183      	strh	r3, [r0, #12]
10011822:	2300      	movs	r3, #0
10011824:	6102      	str	r2, [r0, #16]
10011826:	6143      	str	r3, [r0, #20]
10011828:	6ba4      	ldr	r4, [r4, #56]	; 0x38
1001182a:	4a0d      	ldr	r2, [pc, #52]	; (10011860 <rand+0x70>)
1001182c:	6920      	ldr	r0, [r4, #16]
1001182e:	6961      	ldr	r1, [r4, #20]
10011830:	4b0c      	ldr	r3, [pc, #48]	; (10011864 <rand+0x74>)
10011832:	f001 f821 	bl	10012878 <__aeabi_lmul>
10011836:	2201      	movs	r2, #1
10011838:	2300      	movs	r3, #0
1001183a:	1880      	adds	r0, r0, r2
1001183c:	4159      	adcs	r1, r3
1001183e:	6120      	str	r0, [r4, #16]
10011840:	6161      	str	r1, [r4, #20]
10011842:	0048      	lsls	r0, r1, #1
10011844:	0840      	lsrs	r0, r0, #1
10011846:	bd10      	pop	{r4, pc}
10011848:	100138b0 	.word	0x100138b0
1001184c:	0000330e 	.word	0x0000330e
10011850:	ffffabcd 	.word	0xffffabcd
10011854:	00001234 	.word	0x00001234
10011858:	ffffe66d 	.word	0xffffe66d
1001185c:	ffffdeec 	.word	0xffffdeec
10011860:	4c957f2d 	.word	0x4c957f2d
10011864:	5851f42d 	.word	0x5851f42d

10011868 <setbuf>:
10011868:	424a      	negs	r2, r1
1001186a:	414a      	adcs	r2, r1
1001186c:	2380      	movs	r3, #128	; 0x80
1001186e:	b510      	push	{r4, lr}
10011870:	0052      	lsls	r2, r2, #1
10011872:	00db      	lsls	r3, r3, #3
10011874:	f000 f802 	bl	1001187c <setvbuf>
10011878:	bd10      	pop	{r4, pc}
	...

1001187c <setvbuf>:
1001187c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001187e:	001d      	movs	r5, r3
10011880:	4b51      	ldr	r3, [pc, #324]	; (100119c8 <setvbuf+0x14c>)
10011882:	b085      	sub	sp, #20
10011884:	681e      	ldr	r6, [r3, #0]
10011886:	0004      	movs	r4, r0
10011888:	000f      	movs	r7, r1
1001188a:	9200      	str	r2, [sp, #0]
1001188c:	2e00      	cmp	r6, #0
1001188e:	d005      	beq.n	1001189c <setvbuf+0x20>
10011890:	69b3      	ldr	r3, [r6, #24]
10011892:	2b00      	cmp	r3, #0
10011894:	d102      	bne.n	1001189c <setvbuf+0x20>
10011896:	0030      	movs	r0, r6
10011898:	f000 fa6a 	bl	10011d70 <__sinit>
1001189c:	4b4b      	ldr	r3, [pc, #300]	; (100119cc <setvbuf+0x150>)
1001189e:	429c      	cmp	r4, r3
100118a0:	d101      	bne.n	100118a6 <setvbuf+0x2a>
100118a2:	6874      	ldr	r4, [r6, #4]
100118a4:	e008      	b.n	100118b8 <setvbuf+0x3c>
100118a6:	4b4a      	ldr	r3, [pc, #296]	; (100119d0 <setvbuf+0x154>)
100118a8:	429c      	cmp	r4, r3
100118aa:	d101      	bne.n	100118b0 <setvbuf+0x34>
100118ac:	68b4      	ldr	r4, [r6, #8]
100118ae:	e003      	b.n	100118b8 <setvbuf+0x3c>
100118b0:	4b48      	ldr	r3, [pc, #288]	; (100119d4 <setvbuf+0x158>)
100118b2:	429c      	cmp	r4, r3
100118b4:	d100      	bne.n	100118b8 <setvbuf+0x3c>
100118b6:	68f4      	ldr	r4, [r6, #12]
100118b8:	9b00      	ldr	r3, [sp, #0]
100118ba:	2b02      	cmp	r3, #2
100118bc:	d005      	beq.n	100118ca <setvbuf+0x4e>
100118be:	2b01      	cmp	r3, #1
100118c0:	d900      	bls.n	100118c4 <setvbuf+0x48>
100118c2:	e07c      	b.n	100119be <setvbuf+0x142>
100118c4:	2d00      	cmp	r5, #0
100118c6:	da00      	bge.n	100118ca <setvbuf+0x4e>
100118c8:	e079      	b.n	100119be <setvbuf+0x142>
100118ca:	0021      	movs	r1, r4
100118cc:	0030      	movs	r0, r6
100118ce:	f000 f9e1 	bl	10011c94 <_fflush_r>
100118d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
100118d4:	2900      	cmp	r1, #0
100118d6:	d008      	beq.n	100118ea <setvbuf+0x6e>
100118d8:	0023      	movs	r3, r4
100118da:	3344      	adds	r3, #68	; 0x44
100118dc:	4299      	cmp	r1, r3
100118de:	d002      	beq.n	100118e6 <setvbuf+0x6a>
100118e0:	0030      	movs	r0, r6
100118e2:	f000 fb47 	bl	10011f74 <_free_r>
100118e6:	2300      	movs	r3, #0
100118e8:	6363      	str	r3, [r4, #52]	; 0x34
100118ea:	2300      	movs	r3, #0
100118ec:	61a3      	str	r3, [r4, #24]
100118ee:	6063      	str	r3, [r4, #4]
100118f0:	89a3      	ldrh	r3, [r4, #12]
100118f2:	061b      	lsls	r3, r3, #24
100118f4:	d503      	bpl.n	100118fe <setvbuf+0x82>
100118f6:	6921      	ldr	r1, [r4, #16]
100118f8:	0030      	movs	r0, r6
100118fa:	f000 fb3b 	bl	10011f74 <_free_r>
100118fe:	89a2      	ldrh	r2, [r4, #12]
10011900:	4b35      	ldr	r3, [pc, #212]	; (100119d8 <setvbuf+0x15c>)
10011902:	4013      	ands	r3, r2
10011904:	81a3      	strh	r3, [r4, #12]
10011906:	9b00      	ldr	r3, [sp, #0]
10011908:	2b02      	cmp	r3, #2
1001190a:	d021      	beq.n	10011950 <setvbuf+0xd4>
1001190c:	ab03      	add	r3, sp, #12
1001190e:	aa02      	add	r2, sp, #8
10011910:	0021      	movs	r1, r4
10011912:	0030      	movs	r0, r6
10011914:	f000 fac0 	bl	10011e98 <__swhatbuf_r>
10011918:	89a3      	ldrh	r3, [r4, #12]
1001191a:	4318      	orrs	r0, r3
1001191c:	81a0      	strh	r0, [r4, #12]
1001191e:	2d00      	cmp	r5, #0
10011920:	d101      	bne.n	10011926 <setvbuf+0xaa>
10011922:	9d02      	ldr	r5, [sp, #8]
10011924:	e001      	b.n	1001192a <setvbuf+0xae>
10011926:	2f00      	cmp	r7, #0
10011928:	d125      	bne.n	10011976 <setvbuf+0xfa>
1001192a:	0028      	movs	r0, r5
1001192c:	f000 fb18 	bl	10011f60 <malloc>
10011930:	9501      	str	r5, [sp, #4]
10011932:	1e07      	subs	r7, r0, #0
10011934:	d11a      	bne.n	1001196c <setvbuf+0xf0>
10011936:	9b02      	ldr	r3, [sp, #8]
10011938:	9301      	str	r3, [sp, #4]
1001193a:	42ab      	cmp	r3, r5
1001193c:	d102      	bne.n	10011944 <setvbuf+0xc8>
1001193e:	2001      	movs	r0, #1
10011940:	4240      	negs	r0, r0
10011942:	e006      	b.n	10011952 <setvbuf+0xd6>
10011944:	9801      	ldr	r0, [sp, #4]
10011946:	f000 fb0b 	bl	10011f60 <malloc>
1001194a:	1e07      	subs	r7, r0, #0
1001194c:	d10e      	bne.n	1001196c <setvbuf+0xf0>
1001194e:	e7f6      	b.n	1001193e <setvbuf+0xc2>
10011950:	2000      	movs	r0, #0
10011952:	2202      	movs	r2, #2
10011954:	89a3      	ldrh	r3, [r4, #12]
10011956:	4313      	orrs	r3, r2
10011958:	81a3      	strh	r3, [r4, #12]
1001195a:	2300      	movs	r3, #0
1001195c:	60a3      	str	r3, [r4, #8]
1001195e:	0023      	movs	r3, r4
10011960:	3347      	adds	r3, #71	; 0x47
10011962:	6023      	str	r3, [r4, #0]
10011964:	6123      	str	r3, [r4, #16]
10011966:	2301      	movs	r3, #1
10011968:	6163      	str	r3, [r4, #20]
1001196a:	e02a      	b.n	100119c2 <setvbuf+0x146>
1001196c:	2280      	movs	r2, #128	; 0x80
1001196e:	89a3      	ldrh	r3, [r4, #12]
10011970:	9d01      	ldr	r5, [sp, #4]
10011972:	4313      	orrs	r3, r2
10011974:	81a3      	strh	r3, [r4, #12]
10011976:	69b3      	ldr	r3, [r6, #24]
10011978:	2b00      	cmp	r3, #0
1001197a:	d102      	bne.n	10011982 <setvbuf+0x106>
1001197c:	0030      	movs	r0, r6
1001197e:	f000 f9f7 	bl	10011d70 <__sinit>
10011982:	9b00      	ldr	r3, [sp, #0]
10011984:	2b01      	cmp	r3, #1
10011986:	d103      	bne.n	10011990 <setvbuf+0x114>
10011988:	89a3      	ldrh	r3, [r4, #12]
1001198a:	9a00      	ldr	r2, [sp, #0]
1001198c:	431a      	orrs	r2, r3
1001198e:	81a2      	strh	r2, [r4, #12]
10011990:	2308      	movs	r3, #8
10011992:	89a2      	ldrh	r2, [r4, #12]
10011994:	6027      	str	r7, [r4, #0]
10011996:	4013      	ands	r3, r2
10011998:	6127      	str	r7, [r4, #16]
1001199a:	6165      	str	r5, [r4, #20]
1001199c:	1e18      	subs	r0, r3, #0
1001199e:	d00c      	beq.n	100119ba <setvbuf+0x13e>
100119a0:	2301      	movs	r3, #1
100119a2:	401a      	ands	r2, r3
100119a4:	2300      	movs	r3, #0
100119a6:	1e10      	subs	r0, r2, #0
100119a8:	4298      	cmp	r0, r3
100119aa:	d004      	beq.n	100119b6 <setvbuf+0x13a>
100119ac:	426d      	negs	r5, r5
100119ae:	60a3      	str	r3, [r4, #8]
100119b0:	61a5      	str	r5, [r4, #24]
100119b2:	0018      	movs	r0, r3
100119b4:	e005      	b.n	100119c2 <setvbuf+0x146>
100119b6:	60a5      	str	r5, [r4, #8]
100119b8:	e003      	b.n	100119c2 <setvbuf+0x146>
100119ba:	60a3      	str	r3, [r4, #8]
100119bc:	e001      	b.n	100119c2 <setvbuf+0x146>
100119be:	2001      	movs	r0, #1
100119c0:	4240      	negs	r0, r0
100119c2:	b005      	add	sp, #20
100119c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100119c6:	46c0      	nop			; (mov r8, r8)
100119c8:	100138b0 	.word	0x100138b0
100119cc:	10013788 	.word	0x10013788
100119d0:	100137a8 	.word	0x100137a8
100119d4:	100137c8 	.word	0x100137c8
100119d8:	fffff35c 	.word	0xfffff35c

100119dc <strcpy>:
100119dc:	1c03      	adds	r3, r0, #0
100119de:	780a      	ldrb	r2, [r1, #0]
100119e0:	3101      	adds	r1, #1
100119e2:	701a      	strb	r2, [r3, #0]
100119e4:	3301      	adds	r3, #1
100119e6:	2a00      	cmp	r2, #0
100119e8:	d1f9      	bne.n	100119de <strcpy+0x2>
100119ea:	4770      	bx	lr

100119ec <__swbuf_r>:
100119ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100119ee:	0005      	movs	r5, r0
100119f0:	000f      	movs	r7, r1
100119f2:	0014      	movs	r4, r2
100119f4:	2800      	cmp	r0, #0
100119f6:	d004      	beq.n	10011a02 <__swbuf_r+0x16>
100119f8:	6983      	ldr	r3, [r0, #24]
100119fa:	2b00      	cmp	r3, #0
100119fc:	d101      	bne.n	10011a02 <__swbuf_r+0x16>
100119fe:	f000 f9b7 	bl	10011d70 <__sinit>
10011a02:	4b23      	ldr	r3, [pc, #140]	; (10011a90 <__swbuf_r+0xa4>)
10011a04:	429c      	cmp	r4, r3
10011a06:	d101      	bne.n	10011a0c <__swbuf_r+0x20>
10011a08:	686c      	ldr	r4, [r5, #4]
10011a0a:	e008      	b.n	10011a1e <__swbuf_r+0x32>
10011a0c:	4b21      	ldr	r3, [pc, #132]	; (10011a94 <__swbuf_r+0xa8>)
10011a0e:	429c      	cmp	r4, r3
10011a10:	d101      	bne.n	10011a16 <__swbuf_r+0x2a>
10011a12:	68ac      	ldr	r4, [r5, #8]
10011a14:	e003      	b.n	10011a1e <__swbuf_r+0x32>
10011a16:	4b20      	ldr	r3, [pc, #128]	; (10011a98 <__swbuf_r+0xac>)
10011a18:	429c      	cmp	r4, r3
10011a1a:	d100      	bne.n	10011a1e <__swbuf_r+0x32>
10011a1c:	68ec      	ldr	r4, [r5, #12]
10011a1e:	69a3      	ldr	r3, [r4, #24]
10011a20:	60a3      	str	r3, [r4, #8]
10011a22:	89a3      	ldrh	r3, [r4, #12]
10011a24:	071b      	lsls	r3, r3, #28
10011a26:	d50a      	bpl.n	10011a3e <__swbuf_r+0x52>
10011a28:	6923      	ldr	r3, [r4, #16]
10011a2a:	2b00      	cmp	r3, #0
10011a2c:	d007      	beq.n	10011a3e <__swbuf_r+0x52>
10011a2e:	6823      	ldr	r3, [r4, #0]
10011a30:	6922      	ldr	r2, [r4, #16]
10011a32:	b2fe      	uxtb	r6, r7
10011a34:	1a98      	subs	r0, r3, r2
10011a36:	6963      	ldr	r3, [r4, #20]
10011a38:	4298      	cmp	r0, r3
10011a3a:	db0f      	blt.n	10011a5c <__swbuf_r+0x70>
10011a3c:	e008      	b.n	10011a50 <__swbuf_r+0x64>
10011a3e:	0021      	movs	r1, r4
10011a40:	0028      	movs	r0, r5
10011a42:	f000 f82b 	bl	10011a9c <__swsetup_r>
10011a46:	2800      	cmp	r0, #0
10011a48:	d0f1      	beq.n	10011a2e <__swbuf_r+0x42>
10011a4a:	2001      	movs	r0, #1
10011a4c:	4240      	negs	r0, r0
10011a4e:	e01d      	b.n	10011a8c <__swbuf_r+0xa0>
10011a50:	0021      	movs	r1, r4
10011a52:	0028      	movs	r0, r5
10011a54:	f000 f91e 	bl	10011c94 <_fflush_r>
10011a58:	2800      	cmp	r0, #0
10011a5a:	d1f6      	bne.n	10011a4a <__swbuf_r+0x5e>
10011a5c:	68a3      	ldr	r3, [r4, #8]
10011a5e:	3001      	adds	r0, #1
10011a60:	3b01      	subs	r3, #1
10011a62:	60a3      	str	r3, [r4, #8]
10011a64:	6823      	ldr	r3, [r4, #0]
10011a66:	1c5a      	adds	r2, r3, #1
10011a68:	6022      	str	r2, [r4, #0]
10011a6a:	701f      	strb	r7, [r3, #0]
10011a6c:	6963      	ldr	r3, [r4, #20]
10011a6e:	4298      	cmp	r0, r3
10011a70:	d005      	beq.n	10011a7e <__swbuf_r+0x92>
10011a72:	89a3      	ldrh	r3, [r4, #12]
10011a74:	0030      	movs	r0, r6
10011a76:	07db      	lsls	r3, r3, #31
10011a78:	d508      	bpl.n	10011a8c <__swbuf_r+0xa0>
10011a7a:	2e0a      	cmp	r6, #10
10011a7c:	d106      	bne.n	10011a8c <__swbuf_r+0xa0>
10011a7e:	0021      	movs	r1, r4
10011a80:	0028      	movs	r0, r5
10011a82:	f000 f907 	bl	10011c94 <_fflush_r>
10011a86:	2800      	cmp	r0, #0
10011a88:	d1df      	bne.n	10011a4a <__swbuf_r+0x5e>
10011a8a:	0030      	movs	r0, r6
10011a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011a8e:	46c0      	nop			; (mov r8, r8)
10011a90:	10013788 	.word	0x10013788
10011a94:	100137a8 	.word	0x100137a8
10011a98:	100137c8 	.word	0x100137c8

10011a9c <__swsetup_r>:
10011a9c:	4b36      	ldr	r3, [pc, #216]	; (10011b78 <__swsetup_r+0xdc>)
10011a9e:	b570      	push	{r4, r5, r6, lr}
10011aa0:	681d      	ldr	r5, [r3, #0]
10011aa2:	0006      	movs	r6, r0
10011aa4:	000c      	movs	r4, r1
10011aa6:	2d00      	cmp	r5, #0
10011aa8:	d005      	beq.n	10011ab6 <__swsetup_r+0x1a>
10011aaa:	69ab      	ldr	r3, [r5, #24]
10011aac:	2b00      	cmp	r3, #0
10011aae:	d102      	bne.n	10011ab6 <__swsetup_r+0x1a>
10011ab0:	0028      	movs	r0, r5
10011ab2:	f000 f95d 	bl	10011d70 <__sinit>
10011ab6:	4b31      	ldr	r3, [pc, #196]	; (10011b7c <__swsetup_r+0xe0>)
10011ab8:	429c      	cmp	r4, r3
10011aba:	d101      	bne.n	10011ac0 <__swsetup_r+0x24>
10011abc:	686c      	ldr	r4, [r5, #4]
10011abe:	e008      	b.n	10011ad2 <__swsetup_r+0x36>
10011ac0:	4b2f      	ldr	r3, [pc, #188]	; (10011b80 <__swsetup_r+0xe4>)
10011ac2:	429c      	cmp	r4, r3
10011ac4:	d101      	bne.n	10011aca <__swsetup_r+0x2e>
10011ac6:	68ac      	ldr	r4, [r5, #8]
10011ac8:	e003      	b.n	10011ad2 <__swsetup_r+0x36>
10011aca:	4b2e      	ldr	r3, [pc, #184]	; (10011b84 <__swsetup_r+0xe8>)
10011acc:	429c      	cmp	r4, r3
10011ace:	d100      	bne.n	10011ad2 <__swsetup_r+0x36>
10011ad0:	68ec      	ldr	r4, [r5, #12]
10011ad2:	220c      	movs	r2, #12
10011ad4:	5ea3      	ldrsh	r3, [r4, r2]
10011ad6:	b29a      	uxth	r2, r3
10011ad8:	0711      	lsls	r1, r2, #28
10011ada:	d423      	bmi.n	10011b24 <__swsetup_r+0x88>
10011adc:	06d1      	lsls	r1, r2, #27
10011ade:	d407      	bmi.n	10011af0 <__swsetup_r+0x54>
10011ae0:	2209      	movs	r2, #9
10011ae2:	2001      	movs	r0, #1
10011ae4:	6032      	str	r2, [r6, #0]
10011ae6:	3237      	adds	r2, #55	; 0x37
10011ae8:	4313      	orrs	r3, r2
10011aea:	81a3      	strh	r3, [r4, #12]
10011aec:	4240      	negs	r0, r0
10011aee:	e042      	b.n	10011b76 <__swsetup_r+0xda>
10011af0:	0753      	lsls	r3, r2, #29
10011af2:	d513      	bpl.n	10011b1c <__swsetup_r+0x80>
10011af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011af6:	2900      	cmp	r1, #0
10011af8:	d008      	beq.n	10011b0c <__swsetup_r+0x70>
10011afa:	0023      	movs	r3, r4
10011afc:	3344      	adds	r3, #68	; 0x44
10011afe:	4299      	cmp	r1, r3
10011b00:	d002      	beq.n	10011b08 <__swsetup_r+0x6c>
10011b02:	0030      	movs	r0, r6
10011b04:	f000 fa36 	bl	10011f74 <_free_r>
10011b08:	2300      	movs	r3, #0
10011b0a:	6363      	str	r3, [r4, #52]	; 0x34
10011b0c:	2224      	movs	r2, #36	; 0x24
10011b0e:	89a3      	ldrh	r3, [r4, #12]
10011b10:	4393      	bics	r3, r2
10011b12:	81a3      	strh	r3, [r4, #12]
10011b14:	2300      	movs	r3, #0
10011b16:	6063      	str	r3, [r4, #4]
10011b18:	6923      	ldr	r3, [r4, #16]
10011b1a:	6023      	str	r3, [r4, #0]
10011b1c:	2208      	movs	r2, #8
10011b1e:	89a3      	ldrh	r3, [r4, #12]
10011b20:	4313      	orrs	r3, r2
10011b22:	81a3      	strh	r3, [r4, #12]
10011b24:	6923      	ldr	r3, [r4, #16]
10011b26:	2b00      	cmp	r3, #0
10011b28:	d10b      	bne.n	10011b42 <__swsetup_r+0xa6>
10011b2a:	23a0      	movs	r3, #160	; 0xa0
10011b2c:	89a2      	ldrh	r2, [r4, #12]
10011b2e:	009b      	lsls	r3, r3, #2
10011b30:	4013      	ands	r3, r2
10011b32:	2280      	movs	r2, #128	; 0x80
10011b34:	0092      	lsls	r2, r2, #2
10011b36:	4293      	cmp	r3, r2
10011b38:	d003      	beq.n	10011b42 <__swsetup_r+0xa6>
10011b3a:	0021      	movs	r1, r4
10011b3c:	0030      	movs	r0, r6
10011b3e:	f000 f9d1 	bl	10011ee4 <__smakebuf_r>
10011b42:	2301      	movs	r3, #1
10011b44:	89a2      	ldrh	r2, [r4, #12]
10011b46:	4013      	ands	r3, r2
10011b48:	d005      	beq.n	10011b56 <__swsetup_r+0xba>
10011b4a:	2300      	movs	r3, #0
10011b4c:	60a3      	str	r3, [r4, #8]
10011b4e:	6963      	ldr	r3, [r4, #20]
10011b50:	425b      	negs	r3, r3
10011b52:	61a3      	str	r3, [r4, #24]
10011b54:	e003      	b.n	10011b5e <__swsetup_r+0xc2>
10011b56:	0792      	lsls	r2, r2, #30
10011b58:	d400      	bmi.n	10011b5c <__swsetup_r+0xc0>
10011b5a:	6963      	ldr	r3, [r4, #20]
10011b5c:	60a3      	str	r3, [r4, #8]
10011b5e:	2000      	movs	r0, #0
10011b60:	6923      	ldr	r3, [r4, #16]
10011b62:	4283      	cmp	r3, r0
10011b64:	d107      	bne.n	10011b76 <__swsetup_r+0xda>
10011b66:	220c      	movs	r2, #12
10011b68:	5ea3      	ldrsh	r3, [r4, r2]
10011b6a:	061a      	lsls	r2, r3, #24
10011b6c:	d503      	bpl.n	10011b76 <__swsetup_r+0xda>
10011b6e:	2240      	movs	r2, #64	; 0x40
10011b70:	4313      	orrs	r3, r2
10011b72:	81a3      	strh	r3, [r4, #12]
10011b74:	3801      	subs	r0, #1
10011b76:	bd70      	pop	{r4, r5, r6, pc}
10011b78:	100138b0 	.word	0x100138b0
10011b7c:	10013788 	.word	0x10013788
10011b80:	100137a8 	.word	0x100137a8
10011b84:	100137c8 	.word	0x100137c8

10011b88 <__sflush_r>:
10011b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011b8a:	898a      	ldrh	r2, [r1, #12]
10011b8c:	0005      	movs	r5, r0
10011b8e:	000c      	movs	r4, r1
10011b90:	0713      	lsls	r3, r2, #28
10011b92:	d45a      	bmi.n	10011c4a <__sflush_r+0xc2>
10011b94:	684b      	ldr	r3, [r1, #4]
10011b96:	2b00      	cmp	r3, #0
10011b98:	dc02      	bgt.n	10011ba0 <__sflush_r+0x18>
10011b9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10011b9c:	2b00      	cmp	r3, #0
10011b9e:	dd19      	ble.n	10011bd4 <__sflush_r+0x4c>
10011ba0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011ba2:	2f00      	cmp	r7, #0
10011ba4:	d016      	beq.n	10011bd4 <__sflush_r+0x4c>
10011ba6:	2300      	movs	r3, #0
10011ba8:	682e      	ldr	r6, [r5, #0]
10011baa:	602b      	str	r3, [r5, #0]
10011bac:	2380      	movs	r3, #128	; 0x80
10011bae:	015b      	lsls	r3, r3, #5
10011bb0:	401a      	ands	r2, r3
10011bb2:	d001      	beq.n	10011bb8 <__sflush_r+0x30>
10011bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
10011bb6:	e014      	b.n	10011be2 <__sflush_r+0x5a>
10011bb8:	2301      	movs	r3, #1
10011bba:	6a21      	ldr	r1, [r4, #32]
10011bbc:	0028      	movs	r0, r5
10011bbe:	47b8      	blx	r7
10011bc0:	1c43      	adds	r3, r0, #1
10011bc2:	d10e      	bne.n	10011be2 <__sflush_r+0x5a>
10011bc4:	682b      	ldr	r3, [r5, #0]
10011bc6:	2b00      	cmp	r3, #0
10011bc8:	d00b      	beq.n	10011be2 <__sflush_r+0x5a>
10011bca:	2b1d      	cmp	r3, #29
10011bcc:	d001      	beq.n	10011bd2 <__sflush_r+0x4a>
10011bce:	2b16      	cmp	r3, #22
10011bd0:	d102      	bne.n	10011bd8 <__sflush_r+0x50>
10011bd2:	602e      	str	r6, [r5, #0]
10011bd4:	2000      	movs	r0, #0
10011bd6:	e05a      	b.n	10011c8e <__sflush_r+0x106>
10011bd8:	2240      	movs	r2, #64	; 0x40
10011bda:	89a3      	ldrh	r3, [r4, #12]
10011bdc:	4313      	orrs	r3, r2
10011bde:	81a3      	strh	r3, [r4, #12]
10011be0:	e055      	b.n	10011c8e <__sflush_r+0x106>
10011be2:	89a3      	ldrh	r3, [r4, #12]
10011be4:	075b      	lsls	r3, r3, #29
10011be6:	d506      	bpl.n	10011bf6 <__sflush_r+0x6e>
10011be8:	6863      	ldr	r3, [r4, #4]
10011bea:	1ac0      	subs	r0, r0, r3
10011bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
10011bee:	2b00      	cmp	r3, #0
10011bf0:	d001      	beq.n	10011bf6 <__sflush_r+0x6e>
10011bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
10011bf4:	1ac0      	subs	r0, r0, r3
10011bf6:	2300      	movs	r3, #0
10011bf8:	0002      	movs	r2, r0
10011bfa:	6a21      	ldr	r1, [r4, #32]
10011bfc:	0028      	movs	r0, r5
10011bfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10011c00:	47b8      	blx	r7
10011c02:	89a3      	ldrh	r3, [r4, #12]
10011c04:	1c42      	adds	r2, r0, #1
10011c06:	d106      	bne.n	10011c16 <__sflush_r+0x8e>
10011c08:	6829      	ldr	r1, [r5, #0]
10011c0a:	291d      	cmp	r1, #29
10011c0c:	d83a      	bhi.n	10011c84 <__sflush_r+0xfc>
10011c0e:	4a20      	ldr	r2, [pc, #128]	; (10011c90 <__sflush_r+0x108>)
10011c10:	40ca      	lsrs	r2, r1
10011c12:	07d2      	lsls	r2, r2, #31
10011c14:	d536      	bpl.n	10011c84 <__sflush_r+0xfc>
10011c16:	2200      	movs	r2, #0
10011c18:	6062      	str	r2, [r4, #4]
10011c1a:	6922      	ldr	r2, [r4, #16]
10011c1c:	6022      	str	r2, [r4, #0]
10011c1e:	04db      	lsls	r3, r3, #19
10011c20:	d505      	bpl.n	10011c2e <__sflush_r+0xa6>
10011c22:	1c43      	adds	r3, r0, #1
10011c24:	d102      	bne.n	10011c2c <__sflush_r+0xa4>
10011c26:	682b      	ldr	r3, [r5, #0]
10011c28:	2b00      	cmp	r3, #0
10011c2a:	d100      	bne.n	10011c2e <__sflush_r+0xa6>
10011c2c:	6560      	str	r0, [r4, #84]	; 0x54
10011c2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011c30:	602e      	str	r6, [r5, #0]
10011c32:	2900      	cmp	r1, #0
10011c34:	d0ce      	beq.n	10011bd4 <__sflush_r+0x4c>
10011c36:	0023      	movs	r3, r4
10011c38:	3344      	adds	r3, #68	; 0x44
10011c3a:	4299      	cmp	r1, r3
10011c3c:	d002      	beq.n	10011c44 <__sflush_r+0xbc>
10011c3e:	0028      	movs	r0, r5
10011c40:	f000 f998 	bl	10011f74 <_free_r>
10011c44:	2000      	movs	r0, #0
10011c46:	6360      	str	r0, [r4, #52]	; 0x34
10011c48:	e021      	b.n	10011c8e <__sflush_r+0x106>
10011c4a:	690f      	ldr	r7, [r1, #16]
10011c4c:	2f00      	cmp	r7, #0
10011c4e:	d0c1      	beq.n	10011bd4 <__sflush_r+0x4c>
10011c50:	680b      	ldr	r3, [r1, #0]
10011c52:	600f      	str	r7, [r1, #0]
10011c54:	1bdb      	subs	r3, r3, r7
10011c56:	9301      	str	r3, [sp, #4]
10011c58:	2300      	movs	r3, #0
10011c5a:	0792      	lsls	r2, r2, #30
10011c5c:	d100      	bne.n	10011c60 <__sflush_r+0xd8>
10011c5e:	694b      	ldr	r3, [r1, #20]
10011c60:	60a3      	str	r3, [r4, #8]
10011c62:	e003      	b.n	10011c6c <__sflush_r+0xe4>
10011c64:	9b01      	ldr	r3, [sp, #4]
10011c66:	183f      	adds	r7, r7, r0
10011c68:	1a1b      	subs	r3, r3, r0
10011c6a:	9301      	str	r3, [sp, #4]
10011c6c:	9b01      	ldr	r3, [sp, #4]
10011c6e:	2b00      	cmp	r3, #0
10011c70:	ddb0      	ble.n	10011bd4 <__sflush_r+0x4c>
10011c72:	9b01      	ldr	r3, [sp, #4]
10011c74:	003a      	movs	r2, r7
10011c76:	6a21      	ldr	r1, [r4, #32]
10011c78:	0028      	movs	r0, r5
10011c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10011c7c:	47b0      	blx	r6
10011c7e:	2800      	cmp	r0, #0
10011c80:	dcf0      	bgt.n	10011c64 <__sflush_r+0xdc>
10011c82:	89a3      	ldrh	r3, [r4, #12]
10011c84:	2240      	movs	r2, #64	; 0x40
10011c86:	2001      	movs	r0, #1
10011c88:	4313      	orrs	r3, r2
10011c8a:	81a3      	strh	r3, [r4, #12]
10011c8c:	4240      	negs	r0, r0
10011c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011c90:	20400001 	.word	0x20400001

10011c94 <_fflush_r>:
10011c94:	690b      	ldr	r3, [r1, #16]
10011c96:	b570      	push	{r4, r5, r6, lr}
10011c98:	0005      	movs	r5, r0
10011c9a:	000c      	movs	r4, r1
10011c9c:	2b00      	cmp	r3, #0
10011c9e:	d101      	bne.n	10011ca4 <_fflush_r+0x10>
10011ca0:	2000      	movs	r0, #0
10011ca2:	e01c      	b.n	10011cde <_fflush_r+0x4a>
10011ca4:	2800      	cmp	r0, #0
10011ca6:	d004      	beq.n	10011cb2 <_fflush_r+0x1e>
10011ca8:	6983      	ldr	r3, [r0, #24]
10011caa:	2b00      	cmp	r3, #0
10011cac:	d101      	bne.n	10011cb2 <_fflush_r+0x1e>
10011cae:	f000 f85f 	bl	10011d70 <__sinit>
10011cb2:	4b0b      	ldr	r3, [pc, #44]	; (10011ce0 <_fflush_r+0x4c>)
10011cb4:	429c      	cmp	r4, r3
10011cb6:	d101      	bne.n	10011cbc <_fflush_r+0x28>
10011cb8:	686c      	ldr	r4, [r5, #4]
10011cba:	e008      	b.n	10011cce <_fflush_r+0x3a>
10011cbc:	4b09      	ldr	r3, [pc, #36]	; (10011ce4 <_fflush_r+0x50>)
10011cbe:	429c      	cmp	r4, r3
10011cc0:	d101      	bne.n	10011cc6 <_fflush_r+0x32>
10011cc2:	68ac      	ldr	r4, [r5, #8]
10011cc4:	e003      	b.n	10011cce <_fflush_r+0x3a>
10011cc6:	4b08      	ldr	r3, [pc, #32]	; (10011ce8 <_fflush_r+0x54>)
10011cc8:	429c      	cmp	r4, r3
10011cca:	d100      	bne.n	10011cce <_fflush_r+0x3a>
10011ccc:	68ec      	ldr	r4, [r5, #12]
10011cce:	220c      	movs	r2, #12
10011cd0:	5ea3      	ldrsh	r3, [r4, r2]
10011cd2:	2b00      	cmp	r3, #0
10011cd4:	d0e4      	beq.n	10011ca0 <_fflush_r+0xc>
10011cd6:	0021      	movs	r1, r4
10011cd8:	0028      	movs	r0, r5
10011cda:	f7ff ff55 	bl	10011b88 <__sflush_r>
10011cde:	bd70      	pop	{r4, r5, r6, pc}
10011ce0:	10013788 	.word	0x10013788
10011ce4:	100137a8 	.word	0x100137a8
10011ce8:	100137c8 	.word	0x100137c8

10011cec <_cleanup_r>:
10011cec:	b510      	push	{r4, lr}
10011cee:	4902      	ldr	r1, [pc, #8]	; (10011cf8 <_cleanup_r+0xc>)
10011cf0:	f000 f8b0 	bl	10011e54 <_fwalk_reent>
10011cf4:	bd10      	pop	{r4, pc}
10011cf6:	46c0      	nop			; (mov r8, r8)
10011cf8:	10011c95 	.word	0x10011c95

10011cfc <std.isra.0>:
10011cfc:	2300      	movs	r3, #0
10011cfe:	b510      	push	{r4, lr}
10011d00:	0004      	movs	r4, r0
10011d02:	6003      	str	r3, [r0, #0]
10011d04:	6043      	str	r3, [r0, #4]
10011d06:	6083      	str	r3, [r0, #8]
10011d08:	8181      	strh	r1, [r0, #12]
10011d0a:	6643      	str	r3, [r0, #100]	; 0x64
10011d0c:	81c2      	strh	r2, [r0, #14]
10011d0e:	6103      	str	r3, [r0, #16]
10011d10:	6143      	str	r3, [r0, #20]
10011d12:	6183      	str	r3, [r0, #24]
10011d14:	0019      	movs	r1, r3
10011d16:	2208      	movs	r2, #8
10011d18:	305c      	adds	r0, #92	; 0x5c
10011d1a:	f7ff fcc7 	bl	100116ac <memset>
10011d1e:	4b05      	ldr	r3, [pc, #20]	; (10011d34 <std.isra.0+0x38>)
10011d20:	6224      	str	r4, [r4, #32]
10011d22:	6263      	str	r3, [r4, #36]	; 0x24
10011d24:	4b04      	ldr	r3, [pc, #16]	; (10011d38 <std.isra.0+0x3c>)
10011d26:	62a3      	str	r3, [r4, #40]	; 0x28
10011d28:	4b04      	ldr	r3, [pc, #16]	; (10011d3c <std.isra.0+0x40>)
10011d2a:	62e3      	str	r3, [r4, #44]	; 0x2c
10011d2c:	4b04      	ldr	r3, [pc, #16]	; (10011d40 <std.isra.0+0x44>)
10011d2e:	6323      	str	r3, [r4, #48]	; 0x30
10011d30:	bd10      	pop	{r4, pc}
10011d32:	46c0      	nop			; (mov r8, r8)
10011d34:	100126e5 	.word	0x100126e5
10011d38:	1001270d 	.word	0x1001270d
10011d3c:	10012745 	.word	0x10012745
10011d40:	10012771 	.word	0x10012771

10011d44 <__sfmoreglue>:
10011d44:	b570      	push	{r4, r5, r6, lr}
10011d46:	2568      	movs	r5, #104	; 0x68
10011d48:	1e4b      	subs	r3, r1, #1
10011d4a:	435d      	muls	r5, r3
10011d4c:	000e      	movs	r6, r1
10011d4e:	0029      	movs	r1, r5
10011d50:	3174      	adds	r1, #116	; 0x74
10011d52:	f000 f955 	bl	10012000 <_malloc_r>
10011d56:	1e04      	subs	r4, r0, #0
10011d58:	d008      	beq.n	10011d6c <__sfmoreglue+0x28>
10011d5a:	2100      	movs	r1, #0
10011d5c:	002a      	movs	r2, r5
10011d5e:	6001      	str	r1, [r0, #0]
10011d60:	6046      	str	r6, [r0, #4]
10011d62:	300c      	adds	r0, #12
10011d64:	60a0      	str	r0, [r4, #8]
10011d66:	3268      	adds	r2, #104	; 0x68
10011d68:	f7ff fca0 	bl	100116ac <memset>
10011d6c:	0020      	movs	r0, r4
10011d6e:	bd70      	pop	{r4, r5, r6, pc}

10011d70 <__sinit>:
10011d70:	6983      	ldr	r3, [r0, #24]
10011d72:	b513      	push	{r0, r1, r4, lr}
10011d74:	0004      	movs	r4, r0
10011d76:	2b00      	cmp	r3, #0
10011d78:	d128      	bne.n	10011dcc <__sinit+0x5c>
10011d7a:	6483      	str	r3, [r0, #72]	; 0x48
10011d7c:	64c3      	str	r3, [r0, #76]	; 0x4c
10011d7e:	6503      	str	r3, [r0, #80]	; 0x50
10011d80:	4b13      	ldr	r3, [pc, #76]	; (10011dd0 <__sinit+0x60>)
10011d82:	4a14      	ldr	r2, [pc, #80]	; (10011dd4 <__sinit+0x64>)
10011d84:	681b      	ldr	r3, [r3, #0]
10011d86:	6282      	str	r2, [r0, #40]	; 0x28
10011d88:	9301      	str	r3, [sp, #4]
10011d8a:	4298      	cmp	r0, r3
10011d8c:	d101      	bne.n	10011d92 <__sinit+0x22>
10011d8e:	2301      	movs	r3, #1
10011d90:	6183      	str	r3, [r0, #24]
10011d92:	0020      	movs	r0, r4
10011d94:	f000 f820 	bl	10011dd8 <__sfp>
10011d98:	6060      	str	r0, [r4, #4]
10011d9a:	0020      	movs	r0, r4
10011d9c:	f000 f81c 	bl	10011dd8 <__sfp>
10011da0:	60a0      	str	r0, [r4, #8]
10011da2:	0020      	movs	r0, r4
10011da4:	f000 f818 	bl	10011dd8 <__sfp>
10011da8:	2200      	movs	r2, #0
10011daa:	60e0      	str	r0, [r4, #12]
10011dac:	2104      	movs	r1, #4
10011dae:	6860      	ldr	r0, [r4, #4]
10011db0:	f7ff ffa4 	bl	10011cfc <std.isra.0>
10011db4:	2201      	movs	r2, #1
10011db6:	2109      	movs	r1, #9
10011db8:	68a0      	ldr	r0, [r4, #8]
10011dba:	f7ff ff9f 	bl	10011cfc <std.isra.0>
10011dbe:	2202      	movs	r2, #2
10011dc0:	2112      	movs	r1, #18
10011dc2:	68e0      	ldr	r0, [r4, #12]
10011dc4:	f7ff ff9a 	bl	10011cfc <std.isra.0>
10011dc8:	2301      	movs	r3, #1
10011dca:	61a3      	str	r3, [r4, #24]
10011dcc:	bd13      	pop	{r0, r1, r4, pc}
10011dce:	46c0      	nop			; (mov r8, r8)
10011dd0:	10013784 	.word	0x10013784
10011dd4:	10011ced 	.word	0x10011ced

10011dd8 <__sfp>:
10011dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011dda:	4b1d      	ldr	r3, [pc, #116]	; (10011e50 <__sfp+0x78>)
10011ddc:	0006      	movs	r6, r0
10011dde:	681d      	ldr	r5, [r3, #0]
10011de0:	69ab      	ldr	r3, [r5, #24]
10011de2:	2b00      	cmp	r3, #0
10011de4:	d102      	bne.n	10011dec <__sfp+0x14>
10011de6:	0028      	movs	r0, r5
10011de8:	f7ff ffc2 	bl	10011d70 <__sinit>
10011dec:	3548      	adds	r5, #72	; 0x48
10011dee:	68ac      	ldr	r4, [r5, #8]
10011df0:	686b      	ldr	r3, [r5, #4]
10011df2:	3b01      	subs	r3, #1
10011df4:	d405      	bmi.n	10011e02 <__sfp+0x2a>
10011df6:	220c      	movs	r2, #12
10011df8:	5ea7      	ldrsh	r7, [r4, r2]
10011dfa:	2f00      	cmp	r7, #0
10011dfc:	d010      	beq.n	10011e20 <__sfp+0x48>
10011dfe:	3468      	adds	r4, #104	; 0x68
10011e00:	e7f7      	b.n	10011df2 <__sfp+0x1a>
10011e02:	682b      	ldr	r3, [r5, #0]
10011e04:	2b00      	cmp	r3, #0
10011e06:	d001      	beq.n	10011e0c <__sfp+0x34>
10011e08:	682d      	ldr	r5, [r5, #0]
10011e0a:	e7f0      	b.n	10011dee <__sfp+0x16>
10011e0c:	2104      	movs	r1, #4
10011e0e:	0030      	movs	r0, r6
10011e10:	f7ff ff98 	bl	10011d44 <__sfmoreglue>
10011e14:	6028      	str	r0, [r5, #0]
10011e16:	2800      	cmp	r0, #0
10011e18:	d1f6      	bne.n	10011e08 <__sfp+0x30>
10011e1a:	230c      	movs	r3, #12
10011e1c:	6033      	str	r3, [r6, #0]
10011e1e:	e016      	b.n	10011e4e <__sfp+0x76>
10011e20:	2301      	movs	r3, #1
10011e22:	0020      	movs	r0, r4
10011e24:	425b      	negs	r3, r3
10011e26:	81e3      	strh	r3, [r4, #14]
10011e28:	3302      	adds	r3, #2
10011e2a:	81a3      	strh	r3, [r4, #12]
10011e2c:	6667      	str	r7, [r4, #100]	; 0x64
10011e2e:	6027      	str	r7, [r4, #0]
10011e30:	60a7      	str	r7, [r4, #8]
10011e32:	6067      	str	r7, [r4, #4]
10011e34:	6127      	str	r7, [r4, #16]
10011e36:	6167      	str	r7, [r4, #20]
10011e38:	61a7      	str	r7, [r4, #24]
10011e3a:	305c      	adds	r0, #92	; 0x5c
10011e3c:	2208      	movs	r2, #8
10011e3e:	0039      	movs	r1, r7
10011e40:	f7ff fc34 	bl	100116ac <memset>
10011e44:	0020      	movs	r0, r4
10011e46:	6367      	str	r7, [r4, #52]	; 0x34
10011e48:	63a7      	str	r7, [r4, #56]	; 0x38
10011e4a:	64a7      	str	r7, [r4, #72]	; 0x48
10011e4c:	64e7      	str	r7, [r4, #76]	; 0x4c
10011e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011e50:	10013784 	.word	0x10013784

10011e54 <_fwalk_reent>:
10011e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011e56:	0004      	movs	r4, r0
10011e58:	0007      	movs	r7, r0
10011e5a:	2600      	movs	r6, #0
10011e5c:	9101      	str	r1, [sp, #4]
10011e5e:	3448      	adds	r4, #72	; 0x48
10011e60:	2c00      	cmp	r4, #0
10011e62:	d016      	beq.n	10011e92 <_fwalk_reent+0x3e>
10011e64:	6863      	ldr	r3, [r4, #4]
10011e66:	68a5      	ldr	r5, [r4, #8]
10011e68:	9300      	str	r3, [sp, #0]
10011e6a:	9b00      	ldr	r3, [sp, #0]
10011e6c:	3b01      	subs	r3, #1
10011e6e:	9300      	str	r3, [sp, #0]
10011e70:	d40d      	bmi.n	10011e8e <_fwalk_reent+0x3a>
10011e72:	89ab      	ldrh	r3, [r5, #12]
10011e74:	2b01      	cmp	r3, #1
10011e76:	d908      	bls.n	10011e8a <_fwalk_reent+0x36>
10011e78:	220e      	movs	r2, #14
10011e7a:	5eab      	ldrsh	r3, [r5, r2]
10011e7c:	3301      	adds	r3, #1
10011e7e:	d004      	beq.n	10011e8a <_fwalk_reent+0x36>
10011e80:	0029      	movs	r1, r5
10011e82:	0038      	movs	r0, r7
10011e84:	9b01      	ldr	r3, [sp, #4]
10011e86:	4798      	blx	r3
10011e88:	4306      	orrs	r6, r0
10011e8a:	3568      	adds	r5, #104	; 0x68
10011e8c:	e7ed      	b.n	10011e6a <_fwalk_reent+0x16>
10011e8e:	6824      	ldr	r4, [r4, #0]
10011e90:	e7e6      	b.n	10011e60 <_fwalk_reent+0xc>
10011e92:	0030      	movs	r0, r6
10011e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10011e98 <__swhatbuf_r>:
10011e98:	b570      	push	{r4, r5, r6, lr}
10011e9a:	000e      	movs	r6, r1
10011e9c:	001d      	movs	r5, r3
10011e9e:	230e      	movs	r3, #14
10011ea0:	5ec9      	ldrsh	r1, [r1, r3]
10011ea2:	b090      	sub	sp, #64	; 0x40
10011ea4:	0014      	movs	r4, r2
10011ea6:	2900      	cmp	r1, #0
10011ea8:	da06      	bge.n	10011eb8 <__swhatbuf_r+0x20>
10011eaa:	2300      	movs	r3, #0
10011eac:	602b      	str	r3, [r5, #0]
10011eae:	89b3      	ldrh	r3, [r6, #12]
10011eb0:	061b      	lsls	r3, r3, #24
10011eb2:	d50f      	bpl.n	10011ed4 <__swhatbuf_r+0x3c>
10011eb4:	2340      	movs	r3, #64	; 0x40
10011eb6:	e00f      	b.n	10011ed8 <__swhatbuf_r+0x40>
10011eb8:	aa01      	add	r2, sp, #4
10011eba:	f000 fc85 	bl	100127c8 <_fstat_r>
10011ebe:	2800      	cmp	r0, #0
10011ec0:	dbf3      	blt.n	10011eaa <__swhatbuf_r+0x12>
10011ec2:	23f0      	movs	r3, #240	; 0xf0
10011ec4:	9a02      	ldr	r2, [sp, #8]
10011ec6:	021b      	lsls	r3, r3, #8
10011ec8:	4013      	ands	r3, r2
10011eca:	4a05      	ldr	r2, [pc, #20]	; (10011ee0 <__swhatbuf_r+0x48>)
10011ecc:	189b      	adds	r3, r3, r2
10011ece:	425a      	negs	r2, r3
10011ed0:	4153      	adcs	r3, r2
10011ed2:	602b      	str	r3, [r5, #0]
10011ed4:	2380      	movs	r3, #128	; 0x80
10011ed6:	00db      	lsls	r3, r3, #3
10011ed8:	2000      	movs	r0, #0
10011eda:	6023      	str	r3, [r4, #0]
10011edc:	b010      	add	sp, #64	; 0x40
10011ede:	bd70      	pop	{r4, r5, r6, pc}
10011ee0:	ffffe000 	.word	0xffffe000

10011ee4 <__smakebuf_r>:
10011ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011ee6:	2602      	movs	r6, #2
10011ee8:	898b      	ldrh	r3, [r1, #12]
10011eea:	0005      	movs	r5, r0
10011eec:	000c      	movs	r4, r1
10011eee:	4233      	tst	r3, r6
10011ef0:	d110      	bne.n	10011f14 <__smakebuf_r+0x30>
10011ef2:	ab01      	add	r3, sp, #4
10011ef4:	466a      	mov	r2, sp
10011ef6:	f7ff ffcf 	bl	10011e98 <__swhatbuf_r>
10011efa:	9900      	ldr	r1, [sp, #0]
10011efc:	0007      	movs	r7, r0
10011efe:	0028      	movs	r0, r5
10011f00:	f000 f87e 	bl	10012000 <_malloc_r>
10011f04:	2800      	cmp	r0, #0
10011f06:	d10c      	bne.n	10011f22 <__smakebuf_r+0x3e>
10011f08:	220c      	movs	r2, #12
10011f0a:	5ea3      	ldrsh	r3, [r4, r2]
10011f0c:	059a      	lsls	r2, r3, #22
10011f0e:	d423      	bmi.n	10011f58 <__smakebuf_r+0x74>
10011f10:	4333      	orrs	r3, r6
10011f12:	81a3      	strh	r3, [r4, #12]
10011f14:	0023      	movs	r3, r4
10011f16:	3347      	adds	r3, #71	; 0x47
10011f18:	6023      	str	r3, [r4, #0]
10011f1a:	6123      	str	r3, [r4, #16]
10011f1c:	2301      	movs	r3, #1
10011f1e:	6163      	str	r3, [r4, #20]
10011f20:	e01a      	b.n	10011f58 <__smakebuf_r+0x74>
10011f22:	2280      	movs	r2, #128	; 0x80
10011f24:	4b0d      	ldr	r3, [pc, #52]	; (10011f5c <__smakebuf_r+0x78>)
10011f26:	62ab      	str	r3, [r5, #40]	; 0x28
10011f28:	89a3      	ldrh	r3, [r4, #12]
10011f2a:	6020      	str	r0, [r4, #0]
10011f2c:	4313      	orrs	r3, r2
10011f2e:	81a3      	strh	r3, [r4, #12]
10011f30:	9b00      	ldr	r3, [sp, #0]
10011f32:	6120      	str	r0, [r4, #16]
10011f34:	6163      	str	r3, [r4, #20]
10011f36:	9b01      	ldr	r3, [sp, #4]
10011f38:	2b00      	cmp	r3, #0
10011f3a:	d00a      	beq.n	10011f52 <__smakebuf_r+0x6e>
10011f3c:	230e      	movs	r3, #14
10011f3e:	5ee1      	ldrsh	r1, [r4, r3]
10011f40:	0028      	movs	r0, r5
10011f42:	f000 fc53 	bl	100127ec <_isatty_r>
10011f46:	2800      	cmp	r0, #0
10011f48:	d003      	beq.n	10011f52 <__smakebuf_r+0x6e>
10011f4a:	2201      	movs	r2, #1
10011f4c:	89a3      	ldrh	r3, [r4, #12]
10011f4e:	4313      	orrs	r3, r2
10011f50:	81a3      	strh	r3, [r4, #12]
10011f52:	89a3      	ldrh	r3, [r4, #12]
10011f54:	431f      	orrs	r7, r3
10011f56:	81a7      	strh	r7, [r4, #12]
10011f58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10011f5a:	46c0      	nop			; (mov r8, r8)
10011f5c:	10011ced 	.word	0x10011ced

10011f60 <malloc>:
10011f60:	b510      	push	{r4, lr}
10011f62:	4b03      	ldr	r3, [pc, #12]	; (10011f70 <malloc+0x10>)
10011f64:	0001      	movs	r1, r0
10011f66:	6818      	ldr	r0, [r3, #0]
10011f68:	f000 f84a 	bl	10012000 <_malloc_r>
10011f6c:	bd10      	pop	{r4, pc}
10011f6e:	46c0      	nop			; (mov r8, r8)
10011f70:	100138b0 	.word	0x100138b0

10011f74 <_free_r>:
10011f74:	b530      	push	{r4, r5, lr}
10011f76:	2900      	cmp	r1, #0
10011f78:	d03e      	beq.n	10011ff8 <_free_r+0x84>
10011f7a:	3904      	subs	r1, #4
10011f7c:	680b      	ldr	r3, [r1, #0]
10011f7e:	2b00      	cmp	r3, #0
10011f80:	da00      	bge.n	10011f84 <_free_r+0x10>
10011f82:	18c9      	adds	r1, r1, r3
10011f84:	4a1d      	ldr	r2, [pc, #116]	; (10011ffc <_free_r+0x88>)
10011f86:	6813      	ldr	r3, [r2, #0]
10011f88:	0014      	movs	r4, r2
10011f8a:	2b00      	cmp	r3, #0
10011f8c:	d102      	bne.n	10011f94 <_free_r+0x20>
10011f8e:	604b      	str	r3, [r1, #4]
10011f90:	6011      	str	r1, [r2, #0]
10011f92:	e031      	b.n	10011ff8 <_free_r+0x84>
10011f94:	428b      	cmp	r3, r1
10011f96:	d90d      	bls.n	10011fb4 <_free_r+0x40>
10011f98:	680a      	ldr	r2, [r1, #0]
10011f9a:	1888      	adds	r0, r1, r2
10011f9c:	4283      	cmp	r3, r0
10011f9e:	d103      	bne.n	10011fa8 <_free_r+0x34>
10011fa0:	6818      	ldr	r0, [r3, #0]
10011fa2:	685b      	ldr	r3, [r3, #4]
10011fa4:	1882      	adds	r2, r0, r2
10011fa6:	600a      	str	r2, [r1, #0]
10011fa8:	604b      	str	r3, [r1, #4]
10011faa:	6021      	str	r1, [r4, #0]
10011fac:	e024      	b.n	10011ff8 <_free_r+0x84>
10011fae:	428a      	cmp	r2, r1
10011fb0:	d803      	bhi.n	10011fba <_free_r+0x46>
10011fb2:	0013      	movs	r3, r2
10011fb4:	685a      	ldr	r2, [r3, #4]
10011fb6:	2a00      	cmp	r2, #0
10011fb8:	d1f9      	bne.n	10011fae <_free_r+0x3a>
10011fba:	681d      	ldr	r5, [r3, #0]
10011fbc:	195c      	adds	r4, r3, r5
10011fbe:	428c      	cmp	r4, r1
10011fc0:	d10b      	bne.n	10011fda <_free_r+0x66>
10011fc2:	6809      	ldr	r1, [r1, #0]
10011fc4:	1869      	adds	r1, r5, r1
10011fc6:	1858      	adds	r0, r3, r1
10011fc8:	6019      	str	r1, [r3, #0]
10011fca:	4282      	cmp	r2, r0
10011fcc:	d114      	bne.n	10011ff8 <_free_r+0x84>
10011fce:	6810      	ldr	r0, [r2, #0]
10011fd0:	6852      	ldr	r2, [r2, #4]
10011fd2:	1841      	adds	r1, r0, r1
10011fd4:	6019      	str	r1, [r3, #0]
10011fd6:	605a      	str	r2, [r3, #4]
10011fd8:	e00e      	b.n	10011ff8 <_free_r+0x84>
10011fda:	428c      	cmp	r4, r1
10011fdc:	d902      	bls.n	10011fe4 <_free_r+0x70>
10011fde:	230c      	movs	r3, #12
10011fe0:	6003      	str	r3, [r0, #0]
10011fe2:	e009      	b.n	10011ff8 <_free_r+0x84>
10011fe4:	6808      	ldr	r0, [r1, #0]
10011fe6:	180c      	adds	r4, r1, r0
10011fe8:	42a2      	cmp	r2, r4
10011fea:	d103      	bne.n	10011ff4 <_free_r+0x80>
10011fec:	6814      	ldr	r4, [r2, #0]
10011fee:	6852      	ldr	r2, [r2, #4]
10011ff0:	1820      	adds	r0, r4, r0
10011ff2:	6008      	str	r0, [r1, #0]
10011ff4:	604a      	str	r2, [r1, #4]
10011ff6:	6059      	str	r1, [r3, #4]
10011ff8:	bd30      	pop	{r4, r5, pc}
10011ffa:	46c0      	nop			; (mov r8, r8)
10011ffc:	100153a8 	.word	0x100153a8

10012000 <_malloc_r>:
10012000:	2303      	movs	r3, #3
10012002:	b570      	push	{r4, r5, r6, lr}
10012004:	1ccd      	adds	r5, r1, #3
10012006:	439d      	bics	r5, r3
10012008:	3508      	adds	r5, #8
1001200a:	0006      	movs	r6, r0
1001200c:	2d0c      	cmp	r5, #12
1001200e:	d201      	bcs.n	10012014 <_malloc_r+0x14>
10012010:	250c      	movs	r5, #12
10012012:	e005      	b.n	10012020 <_malloc_r+0x20>
10012014:	2d00      	cmp	r5, #0
10012016:	da03      	bge.n	10012020 <_malloc_r+0x20>
10012018:	230c      	movs	r3, #12
1001201a:	2000      	movs	r0, #0
1001201c:	6033      	str	r3, [r6, #0]
1001201e:	e040      	b.n	100120a2 <_malloc_r+0xa2>
10012020:	42a9      	cmp	r1, r5
10012022:	d8f9      	bhi.n	10012018 <_malloc_r+0x18>
10012024:	4b1f      	ldr	r3, [pc, #124]	; (100120a4 <_malloc_r+0xa4>)
10012026:	681c      	ldr	r4, [r3, #0]
10012028:	001a      	movs	r2, r3
1001202a:	0021      	movs	r1, r4
1001202c:	2900      	cmp	r1, #0
1001202e:	d013      	beq.n	10012058 <_malloc_r+0x58>
10012030:	680b      	ldr	r3, [r1, #0]
10012032:	1b5b      	subs	r3, r3, r5
10012034:	d40d      	bmi.n	10012052 <_malloc_r+0x52>
10012036:	2b0b      	cmp	r3, #11
10012038:	d902      	bls.n	10012040 <_malloc_r+0x40>
1001203a:	600b      	str	r3, [r1, #0]
1001203c:	18cc      	adds	r4, r1, r3
1001203e:	e01e      	b.n	1001207e <_malloc_r+0x7e>
10012040:	428c      	cmp	r4, r1
10012042:	d102      	bne.n	1001204a <_malloc_r+0x4a>
10012044:	6863      	ldr	r3, [r4, #4]
10012046:	6013      	str	r3, [r2, #0]
10012048:	e01a      	b.n	10012080 <_malloc_r+0x80>
1001204a:	684b      	ldr	r3, [r1, #4]
1001204c:	6063      	str	r3, [r4, #4]
1001204e:	000c      	movs	r4, r1
10012050:	e016      	b.n	10012080 <_malloc_r+0x80>
10012052:	000c      	movs	r4, r1
10012054:	6849      	ldr	r1, [r1, #4]
10012056:	e7e9      	b.n	1001202c <_malloc_r+0x2c>
10012058:	4c13      	ldr	r4, [pc, #76]	; (100120a8 <_malloc_r+0xa8>)
1001205a:	6823      	ldr	r3, [r4, #0]
1001205c:	2b00      	cmp	r3, #0
1001205e:	d103      	bne.n	10012068 <_malloc_r+0x68>
10012060:	0030      	movs	r0, r6
10012062:	f000 fb2d 	bl	100126c0 <_sbrk_r>
10012066:	6020      	str	r0, [r4, #0]
10012068:	0029      	movs	r1, r5
1001206a:	0030      	movs	r0, r6
1001206c:	f000 fb28 	bl	100126c0 <_sbrk_r>
10012070:	1c43      	adds	r3, r0, #1
10012072:	d0d1      	beq.n	10012018 <_malloc_r+0x18>
10012074:	2303      	movs	r3, #3
10012076:	1cc4      	adds	r4, r0, #3
10012078:	439c      	bics	r4, r3
1001207a:	42a0      	cmp	r0, r4
1001207c:	d10a      	bne.n	10012094 <_malloc_r+0x94>
1001207e:	6025      	str	r5, [r4, #0]
10012080:	0020      	movs	r0, r4
10012082:	2207      	movs	r2, #7
10012084:	300b      	adds	r0, #11
10012086:	1d23      	adds	r3, r4, #4
10012088:	4390      	bics	r0, r2
1001208a:	1ac3      	subs	r3, r0, r3
1001208c:	d009      	beq.n	100120a2 <_malloc_r+0xa2>
1001208e:	425a      	negs	r2, r3
10012090:	50e2      	str	r2, [r4, r3]
10012092:	e006      	b.n	100120a2 <_malloc_r+0xa2>
10012094:	1a21      	subs	r1, r4, r0
10012096:	0030      	movs	r0, r6
10012098:	f000 fb12 	bl	100126c0 <_sbrk_r>
1001209c:	1c43      	adds	r3, r0, #1
1001209e:	d1ee      	bne.n	1001207e <_malloc_r+0x7e>
100120a0:	e7ba      	b.n	10012018 <_malloc_r+0x18>
100120a2:	bd70      	pop	{r4, r5, r6, pc}
100120a4:	100153a8 	.word	0x100153a8
100120a8:	100153a4 	.word	0x100153a4

100120ac <__sfputc_r>:
100120ac:	6893      	ldr	r3, [r2, #8]
100120ae:	b510      	push	{r4, lr}
100120b0:	3b01      	subs	r3, #1
100120b2:	6093      	str	r3, [r2, #8]
100120b4:	2b00      	cmp	r3, #0
100120b6:	da05      	bge.n	100120c4 <__sfputc_r+0x18>
100120b8:	6994      	ldr	r4, [r2, #24]
100120ba:	42a3      	cmp	r3, r4
100120bc:	db08      	blt.n	100120d0 <__sfputc_r+0x24>
100120be:	b2cb      	uxtb	r3, r1
100120c0:	2b0a      	cmp	r3, #10
100120c2:	d005      	beq.n	100120d0 <__sfputc_r+0x24>
100120c4:	6813      	ldr	r3, [r2, #0]
100120c6:	1c58      	adds	r0, r3, #1
100120c8:	6010      	str	r0, [r2, #0]
100120ca:	7019      	strb	r1, [r3, #0]
100120cc:	b2c8      	uxtb	r0, r1
100120ce:	e001      	b.n	100120d4 <__sfputc_r+0x28>
100120d0:	f7ff fc8c 	bl	100119ec <__swbuf_r>
100120d4:	bd10      	pop	{r4, pc}

100120d6 <__sfputs_r>:
100120d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100120d8:	0006      	movs	r6, r0
100120da:	000f      	movs	r7, r1
100120dc:	0014      	movs	r4, r2
100120de:	18d5      	adds	r5, r2, r3
100120e0:	42ac      	cmp	r4, r5
100120e2:	d008      	beq.n	100120f6 <__sfputs_r+0x20>
100120e4:	7821      	ldrb	r1, [r4, #0]
100120e6:	003a      	movs	r2, r7
100120e8:	0030      	movs	r0, r6
100120ea:	f7ff ffdf 	bl	100120ac <__sfputc_r>
100120ee:	3401      	adds	r4, #1
100120f0:	1c43      	adds	r3, r0, #1
100120f2:	d1f5      	bne.n	100120e0 <__sfputs_r+0xa>
100120f4:	e000      	b.n	100120f8 <__sfputs_r+0x22>
100120f6:	2000      	movs	r0, #0
100120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100120fc <_vfiprintf_r>:
100120fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100120fe:	b09f      	sub	sp, #124	; 0x7c
10012100:	0006      	movs	r6, r0
10012102:	000f      	movs	r7, r1
10012104:	9202      	str	r2, [sp, #8]
10012106:	9305      	str	r3, [sp, #20]
10012108:	2800      	cmp	r0, #0
1001210a:	d004      	beq.n	10012116 <_vfiprintf_r+0x1a>
1001210c:	6983      	ldr	r3, [r0, #24]
1001210e:	2b00      	cmp	r3, #0
10012110:	d101      	bne.n	10012116 <_vfiprintf_r+0x1a>
10012112:	f7ff fe2d 	bl	10011d70 <__sinit>
10012116:	4b7f      	ldr	r3, [pc, #508]	; (10012314 <_vfiprintf_r+0x218>)
10012118:	429f      	cmp	r7, r3
1001211a:	d101      	bne.n	10012120 <_vfiprintf_r+0x24>
1001211c:	6877      	ldr	r7, [r6, #4]
1001211e:	e008      	b.n	10012132 <_vfiprintf_r+0x36>
10012120:	4b7d      	ldr	r3, [pc, #500]	; (10012318 <_vfiprintf_r+0x21c>)
10012122:	429f      	cmp	r7, r3
10012124:	d101      	bne.n	1001212a <_vfiprintf_r+0x2e>
10012126:	68b7      	ldr	r7, [r6, #8]
10012128:	e003      	b.n	10012132 <_vfiprintf_r+0x36>
1001212a:	4b7c      	ldr	r3, [pc, #496]	; (1001231c <_vfiprintf_r+0x220>)
1001212c:	429f      	cmp	r7, r3
1001212e:	d100      	bne.n	10012132 <_vfiprintf_r+0x36>
10012130:	68f7      	ldr	r7, [r6, #12]
10012132:	89bb      	ldrh	r3, [r7, #12]
10012134:	071b      	lsls	r3, r3, #28
10012136:	d50a      	bpl.n	1001214e <_vfiprintf_r+0x52>
10012138:	693b      	ldr	r3, [r7, #16]
1001213a:	2b00      	cmp	r3, #0
1001213c:	d007      	beq.n	1001214e <_vfiprintf_r+0x52>
1001213e:	2300      	movs	r3, #0
10012140:	ad06      	add	r5, sp, #24
10012142:	616b      	str	r3, [r5, #20]
10012144:	3320      	adds	r3, #32
10012146:	766b      	strb	r3, [r5, #25]
10012148:	3310      	adds	r3, #16
1001214a:	76ab      	strb	r3, [r5, #26]
1001214c:	e03d      	b.n	100121ca <_vfiprintf_r+0xce>
1001214e:	0039      	movs	r1, r7
10012150:	0030      	movs	r0, r6
10012152:	f7ff fca3 	bl	10011a9c <__swsetup_r>
10012156:	2800      	cmp	r0, #0
10012158:	d0f1      	beq.n	1001213e <_vfiprintf_r+0x42>
1001215a:	2001      	movs	r0, #1
1001215c:	4240      	negs	r0, r0
1001215e:	e0d6      	b.n	1001230e <_vfiprintf_r+0x212>
10012160:	9a05      	ldr	r2, [sp, #20]
10012162:	1d11      	adds	r1, r2, #4
10012164:	6812      	ldr	r2, [r2, #0]
10012166:	9105      	str	r1, [sp, #20]
10012168:	2a00      	cmp	r2, #0
1001216a:	da00      	bge.n	1001216e <_vfiprintf_r+0x72>
1001216c:	e07f      	b.n	1001226e <_vfiprintf_r+0x172>
1001216e:	9209      	str	r2, [sp, #36]	; 0x24
10012170:	3401      	adds	r4, #1
10012172:	7823      	ldrb	r3, [r4, #0]
10012174:	2b2e      	cmp	r3, #46	; 0x2e
10012176:	d100      	bne.n	1001217a <_vfiprintf_r+0x7e>
10012178:	e08d      	b.n	10012296 <_vfiprintf_r+0x19a>
1001217a:	7821      	ldrb	r1, [r4, #0]
1001217c:	2203      	movs	r2, #3
1001217e:	4868      	ldr	r0, [pc, #416]	; (10012320 <_vfiprintf_r+0x224>)
10012180:	f000 fb5a 	bl	10012838 <memchr>
10012184:	2800      	cmp	r0, #0
10012186:	d007      	beq.n	10012198 <_vfiprintf_r+0x9c>
10012188:	4b65      	ldr	r3, [pc, #404]	; (10012320 <_vfiprintf_r+0x224>)
1001218a:	682a      	ldr	r2, [r5, #0]
1001218c:	1ac0      	subs	r0, r0, r3
1001218e:	2340      	movs	r3, #64	; 0x40
10012190:	4083      	lsls	r3, r0
10012192:	4313      	orrs	r3, r2
10012194:	602b      	str	r3, [r5, #0]
10012196:	3401      	adds	r4, #1
10012198:	7821      	ldrb	r1, [r4, #0]
1001219a:	1c63      	adds	r3, r4, #1
1001219c:	2206      	movs	r2, #6
1001219e:	4861      	ldr	r0, [pc, #388]	; (10012324 <_vfiprintf_r+0x228>)
100121a0:	9302      	str	r3, [sp, #8]
100121a2:	7629      	strb	r1, [r5, #24]
100121a4:	f000 fb48 	bl	10012838 <memchr>
100121a8:	2800      	cmp	r0, #0
100121aa:	d100      	bne.n	100121ae <_vfiprintf_r+0xb2>
100121ac:	e09d      	b.n	100122ea <_vfiprintf_r+0x1ee>
100121ae:	4b5e      	ldr	r3, [pc, #376]	; (10012328 <_vfiprintf_r+0x22c>)
100121b0:	2b00      	cmp	r3, #0
100121b2:	d000      	beq.n	100121b6 <_vfiprintf_r+0xba>
100121b4:	e090      	b.n	100122d8 <_vfiprintf_r+0x1dc>
100121b6:	2207      	movs	r2, #7
100121b8:	9b05      	ldr	r3, [sp, #20]
100121ba:	3307      	adds	r3, #7
100121bc:	4393      	bics	r3, r2
100121be:	3308      	adds	r3, #8
100121c0:	9305      	str	r3, [sp, #20]
100121c2:	696b      	ldr	r3, [r5, #20]
100121c4:	9a03      	ldr	r2, [sp, #12]
100121c6:	189b      	adds	r3, r3, r2
100121c8:	616b      	str	r3, [r5, #20]
100121ca:	9c02      	ldr	r4, [sp, #8]
100121cc:	7823      	ldrb	r3, [r4, #0]
100121ce:	2b00      	cmp	r3, #0
100121d0:	d104      	bne.n	100121dc <_vfiprintf_r+0xe0>
100121d2:	9b02      	ldr	r3, [sp, #8]
100121d4:	1ae3      	subs	r3, r4, r3
100121d6:	9304      	str	r3, [sp, #16]
100121d8:	d012      	beq.n	10012200 <_vfiprintf_r+0x104>
100121da:	e003      	b.n	100121e4 <_vfiprintf_r+0xe8>
100121dc:	2b25      	cmp	r3, #37	; 0x25
100121de:	d0f8      	beq.n	100121d2 <_vfiprintf_r+0xd6>
100121e0:	3401      	adds	r4, #1
100121e2:	e7f3      	b.n	100121cc <_vfiprintf_r+0xd0>
100121e4:	9b04      	ldr	r3, [sp, #16]
100121e6:	9a02      	ldr	r2, [sp, #8]
100121e8:	0039      	movs	r1, r7
100121ea:	0030      	movs	r0, r6
100121ec:	f7ff ff73 	bl	100120d6 <__sfputs_r>
100121f0:	1c43      	adds	r3, r0, #1
100121f2:	d100      	bne.n	100121f6 <_vfiprintf_r+0xfa>
100121f4:	e086      	b.n	10012304 <_vfiprintf_r+0x208>
100121f6:	696a      	ldr	r2, [r5, #20]
100121f8:	9b04      	ldr	r3, [sp, #16]
100121fa:	4694      	mov	ip, r2
100121fc:	4463      	add	r3, ip
100121fe:	616b      	str	r3, [r5, #20]
10012200:	7823      	ldrb	r3, [r4, #0]
10012202:	2b00      	cmp	r3, #0
10012204:	d07e      	beq.n	10012304 <_vfiprintf_r+0x208>
10012206:	2201      	movs	r2, #1
10012208:	2300      	movs	r3, #0
1001220a:	4252      	negs	r2, r2
1001220c:	606a      	str	r2, [r5, #4]
1001220e:	a902      	add	r1, sp, #8
10012210:	3254      	adds	r2, #84	; 0x54
10012212:	1852      	adds	r2, r2, r1
10012214:	3401      	adds	r4, #1
10012216:	602b      	str	r3, [r5, #0]
10012218:	60eb      	str	r3, [r5, #12]
1001221a:	60ab      	str	r3, [r5, #8]
1001221c:	7013      	strb	r3, [r2, #0]
1001221e:	65ab      	str	r3, [r5, #88]	; 0x58
10012220:	7821      	ldrb	r1, [r4, #0]
10012222:	2205      	movs	r2, #5
10012224:	4841      	ldr	r0, [pc, #260]	; (1001232c <_vfiprintf_r+0x230>)
10012226:	f000 fb07 	bl	10012838 <memchr>
1001222a:	2800      	cmp	r0, #0
1001222c:	d008      	beq.n	10012240 <_vfiprintf_r+0x144>
1001222e:	4b3f      	ldr	r3, [pc, #252]	; (1001232c <_vfiprintf_r+0x230>)
10012230:	682a      	ldr	r2, [r5, #0]
10012232:	1ac0      	subs	r0, r0, r3
10012234:	2301      	movs	r3, #1
10012236:	4083      	lsls	r3, r0
10012238:	4313      	orrs	r3, r2
1001223a:	602b      	str	r3, [r5, #0]
1001223c:	3401      	adds	r4, #1
1001223e:	e7ef      	b.n	10012220 <_vfiprintf_r+0x124>
10012240:	682b      	ldr	r3, [r5, #0]
10012242:	06da      	lsls	r2, r3, #27
10012244:	d504      	bpl.n	10012250 <_vfiprintf_r+0x154>
10012246:	2253      	movs	r2, #83	; 0x53
10012248:	2120      	movs	r1, #32
1001224a:	a802      	add	r0, sp, #8
1001224c:	1812      	adds	r2, r2, r0
1001224e:	7011      	strb	r1, [r2, #0]
10012250:	071a      	lsls	r2, r3, #28
10012252:	d504      	bpl.n	1001225e <_vfiprintf_r+0x162>
10012254:	2253      	movs	r2, #83	; 0x53
10012256:	212b      	movs	r1, #43	; 0x2b
10012258:	a802      	add	r0, sp, #8
1001225a:	1812      	adds	r2, r2, r0
1001225c:	7011      	strb	r1, [r2, #0]
1001225e:	7822      	ldrb	r2, [r4, #0]
10012260:	2a2a      	cmp	r2, #42	; 0x2a
10012262:	d100      	bne.n	10012266 <_vfiprintf_r+0x16a>
10012264:	e77c      	b.n	10012160 <_vfiprintf_r+0x64>
10012266:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012268:	2000      	movs	r0, #0
1001226a:	210a      	movs	r1, #10
1001226c:	e005      	b.n	1001227a <_vfiprintf_r+0x17e>
1001226e:	4252      	negs	r2, r2
10012270:	60ea      	str	r2, [r5, #12]
10012272:	2202      	movs	r2, #2
10012274:	4313      	orrs	r3, r2
10012276:	602b      	str	r3, [r5, #0]
10012278:	e77a      	b.n	10012170 <_vfiprintf_r+0x74>
1001227a:	7822      	ldrb	r2, [r4, #0]
1001227c:	3a30      	subs	r2, #48	; 0x30
1001227e:	2a09      	cmp	r2, #9
10012280:	d804      	bhi.n	1001228c <_vfiprintf_r+0x190>
10012282:	434b      	muls	r3, r1
10012284:	3401      	adds	r4, #1
10012286:	189b      	adds	r3, r3, r2
10012288:	2001      	movs	r0, #1
1001228a:	e7f6      	b.n	1001227a <_vfiprintf_r+0x17e>
1001228c:	2800      	cmp	r0, #0
1001228e:	d100      	bne.n	10012292 <_vfiprintf_r+0x196>
10012290:	e76f      	b.n	10012172 <_vfiprintf_r+0x76>
10012292:	9309      	str	r3, [sp, #36]	; 0x24
10012294:	e76d      	b.n	10012172 <_vfiprintf_r+0x76>
10012296:	7863      	ldrb	r3, [r4, #1]
10012298:	2b2a      	cmp	r3, #42	; 0x2a
1001229a:	d10a      	bne.n	100122b2 <_vfiprintf_r+0x1b6>
1001229c:	9b05      	ldr	r3, [sp, #20]
1001229e:	3402      	adds	r4, #2
100122a0:	1d1a      	adds	r2, r3, #4
100122a2:	681b      	ldr	r3, [r3, #0]
100122a4:	9205      	str	r2, [sp, #20]
100122a6:	2b00      	cmp	r3, #0
100122a8:	da01      	bge.n	100122ae <_vfiprintf_r+0x1b2>
100122aa:	2301      	movs	r3, #1
100122ac:	425b      	negs	r3, r3
100122ae:	9307      	str	r3, [sp, #28]
100122b0:	e763      	b.n	1001217a <_vfiprintf_r+0x7e>
100122b2:	2300      	movs	r3, #0
100122b4:	200a      	movs	r0, #10
100122b6:	001a      	movs	r2, r3
100122b8:	3401      	adds	r4, #1
100122ba:	606b      	str	r3, [r5, #4]
100122bc:	7821      	ldrb	r1, [r4, #0]
100122be:	3930      	subs	r1, #48	; 0x30
100122c0:	2909      	cmp	r1, #9
100122c2:	d804      	bhi.n	100122ce <_vfiprintf_r+0x1d2>
100122c4:	4342      	muls	r2, r0
100122c6:	3401      	adds	r4, #1
100122c8:	1852      	adds	r2, r2, r1
100122ca:	2301      	movs	r3, #1
100122cc:	e7f6      	b.n	100122bc <_vfiprintf_r+0x1c0>
100122ce:	2b00      	cmp	r3, #0
100122d0:	d100      	bne.n	100122d4 <_vfiprintf_r+0x1d8>
100122d2:	e752      	b.n	1001217a <_vfiprintf_r+0x7e>
100122d4:	9207      	str	r2, [sp, #28]
100122d6:	e750      	b.n	1001217a <_vfiprintf_r+0x7e>
100122d8:	ab05      	add	r3, sp, #20
100122da:	9300      	str	r3, [sp, #0]
100122dc:	003a      	movs	r2, r7
100122de:	4b14      	ldr	r3, [pc, #80]	; (10012330 <_vfiprintf_r+0x234>)
100122e0:	0029      	movs	r1, r5
100122e2:	0030      	movs	r0, r6
100122e4:	e000      	b.n	100122e8 <_vfiprintf_r+0x1ec>
100122e6:	bf00      	nop
100122e8:	e007      	b.n	100122fa <_vfiprintf_r+0x1fe>
100122ea:	ab05      	add	r3, sp, #20
100122ec:	9300      	str	r3, [sp, #0]
100122ee:	003a      	movs	r2, r7
100122f0:	4b0f      	ldr	r3, [pc, #60]	; (10012330 <_vfiprintf_r+0x234>)
100122f2:	0029      	movs	r1, r5
100122f4:	0030      	movs	r0, r6
100122f6:	f000 f88b 	bl	10012410 <_printf_i>
100122fa:	9003      	str	r0, [sp, #12]
100122fc:	9b03      	ldr	r3, [sp, #12]
100122fe:	3301      	adds	r3, #1
10012300:	d000      	beq.n	10012304 <_vfiprintf_r+0x208>
10012302:	e75e      	b.n	100121c2 <_vfiprintf_r+0xc6>
10012304:	89bb      	ldrh	r3, [r7, #12]
10012306:	065b      	lsls	r3, r3, #25
10012308:	d500      	bpl.n	1001230c <_vfiprintf_r+0x210>
1001230a:	e726      	b.n	1001215a <_vfiprintf_r+0x5e>
1001230c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001230e:	b01f      	add	sp, #124	; 0x7c
10012310:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012312:	46c0      	nop			; (mov r8, r8)
10012314:	10013788 	.word	0x10013788
10012318:	100137a8 	.word	0x100137a8
1001231c:	100137c8 	.word	0x100137c8
10012320:	100137ee 	.word	0x100137ee
10012324:	100137f2 	.word	0x100137f2
10012328:	00000000 	.word	0x00000000
1001232c:	100137e8 	.word	0x100137e8
10012330:	100120d7 	.word	0x100120d7

10012334 <_printf_common>:
10012334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012336:	0017      	movs	r7, r2
10012338:	9301      	str	r3, [sp, #4]
1001233a:	688a      	ldr	r2, [r1, #8]
1001233c:	690b      	ldr	r3, [r1, #16]
1001233e:	9000      	str	r0, [sp, #0]
10012340:	000c      	movs	r4, r1
10012342:	4293      	cmp	r3, r2
10012344:	da00      	bge.n	10012348 <_printf_common+0x14>
10012346:	0013      	movs	r3, r2
10012348:	0022      	movs	r2, r4
1001234a:	603b      	str	r3, [r7, #0]
1001234c:	3243      	adds	r2, #67	; 0x43
1001234e:	7812      	ldrb	r2, [r2, #0]
10012350:	2a00      	cmp	r2, #0
10012352:	d001      	beq.n	10012358 <_printf_common+0x24>
10012354:	3301      	adds	r3, #1
10012356:	603b      	str	r3, [r7, #0]
10012358:	6823      	ldr	r3, [r4, #0]
1001235a:	069b      	lsls	r3, r3, #26
1001235c:	d502      	bpl.n	10012364 <_printf_common+0x30>
1001235e:	683b      	ldr	r3, [r7, #0]
10012360:	3302      	adds	r3, #2
10012362:	603b      	str	r3, [r7, #0]
10012364:	2506      	movs	r5, #6
10012366:	6823      	ldr	r3, [r4, #0]
10012368:	401d      	ands	r5, r3
1001236a:	d01e      	beq.n	100123aa <_printf_common+0x76>
1001236c:	0023      	movs	r3, r4
1001236e:	3343      	adds	r3, #67	; 0x43
10012370:	781b      	ldrb	r3, [r3, #0]
10012372:	1e5a      	subs	r2, r3, #1
10012374:	4193      	sbcs	r3, r2
10012376:	6822      	ldr	r2, [r4, #0]
10012378:	0692      	lsls	r2, r2, #26
1001237a:	d51c      	bpl.n	100123b6 <_printf_common+0x82>
1001237c:	2030      	movs	r0, #48	; 0x30
1001237e:	18e1      	adds	r1, r4, r3
10012380:	3143      	adds	r1, #67	; 0x43
10012382:	7008      	strb	r0, [r1, #0]
10012384:	0021      	movs	r1, r4
10012386:	1c5a      	adds	r2, r3, #1
10012388:	3145      	adds	r1, #69	; 0x45
1001238a:	7809      	ldrb	r1, [r1, #0]
1001238c:	18a2      	adds	r2, r4, r2
1001238e:	3243      	adds	r2, #67	; 0x43
10012390:	3302      	adds	r3, #2
10012392:	7011      	strb	r1, [r2, #0]
10012394:	e00f      	b.n	100123b6 <_printf_common+0x82>
10012396:	0022      	movs	r2, r4
10012398:	2301      	movs	r3, #1
1001239a:	3219      	adds	r2, #25
1001239c:	9901      	ldr	r1, [sp, #4]
1001239e:	9800      	ldr	r0, [sp, #0]
100123a0:	9e08      	ldr	r6, [sp, #32]
100123a2:	47b0      	blx	r6
100123a4:	1c43      	adds	r3, r0, #1
100123a6:	d00e      	beq.n	100123c6 <_printf_common+0x92>
100123a8:	3501      	adds	r5, #1
100123aa:	68e3      	ldr	r3, [r4, #12]
100123ac:	683a      	ldr	r2, [r7, #0]
100123ae:	1a9b      	subs	r3, r3, r2
100123b0:	429d      	cmp	r5, r3
100123b2:	dbf0      	blt.n	10012396 <_printf_common+0x62>
100123b4:	e7da      	b.n	1001236c <_printf_common+0x38>
100123b6:	0022      	movs	r2, r4
100123b8:	9901      	ldr	r1, [sp, #4]
100123ba:	3243      	adds	r2, #67	; 0x43
100123bc:	9800      	ldr	r0, [sp, #0]
100123be:	9d08      	ldr	r5, [sp, #32]
100123c0:	47a8      	blx	r5
100123c2:	1c43      	adds	r3, r0, #1
100123c4:	d102      	bne.n	100123cc <_printf_common+0x98>
100123c6:	2001      	movs	r0, #1
100123c8:	4240      	negs	r0, r0
100123ca:	e020      	b.n	1001240e <_printf_common+0xda>
100123cc:	2306      	movs	r3, #6
100123ce:	6820      	ldr	r0, [r4, #0]
100123d0:	68e1      	ldr	r1, [r4, #12]
100123d2:	683a      	ldr	r2, [r7, #0]
100123d4:	4003      	ands	r3, r0
100123d6:	2500      	movs	r5, #0
100123d8:	2b04      	cmp	r3, #4
100123da:	d103      	bne.n	100123e4 <_printf_common+0xb0>
100123dc:	1a8d      	subs	r5, r1, r2
100123de:	43eb      	mvns	r3, r5
100123e0:	17db      	asrs	r3, r3, #31
100123e2:	401d      	ands	r5, r3
100123e4:	68a3      	ldr	r3, [r4, #8]
100123e6:	6922      	ldr	r2, [r4, #16]
100123e8:	4293      	cmp	r3, r2
100123ea:	dd01      	ble.n	100123f0 <_printf_common+0xbc>
100123ec:	1a9b      	subs	r3, r3, r2
100123ee:	18ed      	adds	r5, r5, r3
100123f0:	2700      	movs	r7, #0
100123f2:	42bd      	cmp	r5, r7
100123f4:	d00a      	beq.n	1001240c <_printf_common+0xd8>
100123f6:	0022      	movs	r2, r4
100123f8:	2301      	movs	r3, #1
100123fa:	321a      	adds	r2, #26
100123fc:	9901      	ldr	r1, [sp, #4]
100123fe:	9800      	ldr	r0, [sp, #0]
10012400:	9e08      	ldr	r6, [sp, #32]
10012402:	47b0      	blx	r6
10012404:	1c43      	adds	r3, r0, #1
10012406:	d0de      	beq.n	100123c6 <_printf_common+0x92>
10012408:	3701      	adds	r7, #1
1001240a:	e7f2      	b.n	100123f2 <_printf_common+0xbe>
1001240c:	2000      	movs	r0, #0
1001240e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012410 <_printf_i>:
10012410:	b5f0      	push	{r4, r5, r6, r7, lr}
10012412:	b08b      	sub	sp, #44	; 0x2c
10012414:	9206      	str	r2, [sp, #24]
10012416:	000a      	movs	r2, r1
10012418:	3243      	adds	r2, #67	; 0x43
1001241a:	9307      	str	r3, [sp, #28]
1001241c:	9005      	str	r0, [sp, #20]
1001241e:	9204      	str	r2, [sp, #16]
10012420:	7e0a      	ldrb	r2, [r1, #24]
10012422:	000c      	movs	r4, r1
10012424:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012426:	2a6e      	cmp	r2, #110	; 0x6e
10012428:	d100      	bne.n	1001242c <_printf_i+0x1c>
1001242a:	e0ab      	b.n	10012584 <_printf_i+0x174>
1001242c:	d811      	bhi.n	10012452 <_printf_i+0x42>
1001242e:	2a63      	cmp	r2, #99	; 0x63
10012430:	d022      	beq.n	10012478 <_printf_i+0x68>
10012432:	d809      	bhi.n	10012448 <_printf_i+0x38>
10012434:	2a00      	cmp	r2, #0
10012436:	d100      	bne.n	1001243a <_printf_i+0x2a>
10012438:	e0b5      	b.n	100125a6 <_printf_i+0x196>
1001243a:	2a58      	cmp	r2, #88	; 0x58
1001243c:	d000      	beq.n	10012440 <_printf_i+0x30>
1001243e:	e0c5      	b.n	100125cc <_printf_i+0x1bc>
10012440:	3145      	adds	r1, #69	; 0x45
10012442:	700a      	strb	r2, [r1, #0]
10012444:	4a81      	ldr	r2, [pc, #516]	; (1001264c <_printf_i+0x23c>)
10012446:	e04f      	b.n	100124e8 <_printf_i+0xd8>
10012448:	2a64      	cmp	r2, #100	; 0x64
1001244a:	d01d      	beq.n	10012488 <_printf_i+0x78>
1001244c:	2a69      	cmp	r2, #105	; 0x69
1001244e:	d01b      	beq.n	10012488 <_printf_i+0x78>
10012450:	e0bc      	b.n	100125cc <_printf_i+0x1bc>
10012452:	2a73      	cmp	r2, #115	; 0x73
10012454:	d100      	bne.n	10012458 <_printf_i+0x48>
10012456:	e0aa      	b.n	100125ae <_printf_i+0x19e>
10012458:	d809      	bhi.n	1001246e <_printf_i+0x5e>
1001245a:	2a6f      	cmp	r2, #111	; 0x6f
1001245c:	d029      	beq.n	100124b2 <_printf_i+0xa2>
1001245e:	2a70      	cmp	r2, #112	; 0x70
10012460:	d000      	beq.n	10012464 <_printf_i+0x54>
10012462:	e0b3      	b.n	100125cc <_printf_i+0x1bc>
10012464:	2220      	movs	r2, #32
10012466:	6809      	ldr	r1, [r1, #0]
10012468:	430a      	orrs	r2, r1
1001246a:	6022      	str	r2, [r4, #0]
1001246c:	e037      	b.n	100124de <_printf_i+0xce>
1001246e:	2a75      	cmp	r2, #117	; 0x75
10012470:	d01f      	beq.n	100124b2 <_printf_i+0xa2>
10012472:	2a78      	cmp	r2, #120	; 0x78
10012474:	d033      	beq.n	100124de <_printf_i+0xce>
10012476:	e0a9      	b.n	100125cc <_printf_i+0x1bc>
10012478:	000e      	movs	r6, r1
1001247a:	681a      	ldr	r2, [r3, #0]
1001247c:	3642      	adds	r6, #66	; 0x42
1001247e:	1d11      	adds	r1, r2, #4
10012480:	6019      	str	r1, [r3, #0]
10012482:	6813      	ldr	r3, [r2, #0]
10012484:	7033      	strb	r3, [r6, #0]
10012486:	e0a4      	b.n	100125d2 <_printf_i+0x1c2>
10012488:	6821      	ldr	r1, [r4, #0]
1001248a:	681a      	ldr	r2, [r3, #0]
1001248c:	0608      	lsls	r0, r1, #24
1001248e:	d406      	bmi.n	1001249e <_printf_i+0x8e>
10012490:	0649      	lsls	r1, r1, #25
10012492:	d504      	bpl.n	1001249e <_printf_i+0x8e>
10012494:	1d11      	adds	r1, r2, #4
10012496:	6019      	str	r1, [r3, #0]
10012498:	2300      	movs	r3, #0
1001249a:	5ed5      	ldrsh	r5, [r2, r3]
1001249c:	e002      	b.n	100124a4 <_printf_i+0x94>
1001249e:	1d11      	adds	r1, r2, #4
100124a0:	6019      	str	r1, [r3, #0]
100124a2:	6815      	ldr	r5, [r2, #0]
100124a4:	2d00      	cmp	r5, #0
100124a6:	da3b      	bge.n	10012520 <_printf_i+0x110>
100124a8:	232d      	movs	r3, #45	; 0x2d
100124aa:	9a04      	ldr	r2, [sp, #16]
100124ac:	426d      	negs	r5, r5
100124ae:	7013      	strb	r3, [r2, #0]
100124b0:	e036      	b.n	10012520 <_printf_i+0x110>
100124b2:	6821      	ldr	r1, [r4, #0]
100124b4:	681a      	ldr	r2, [r3, #0]
100124b6:	0608      	lsls	r0, r1, #24
100124b8:	d406      	bmi.n	100124c8 <_printf_i+0xb8>
100124ba:	0649      	lsls	r1, r1, #25
100124bc:	d504      	bpl.n	100124c8 <_printf_i+0xb8>
100124be:	6815      	ldr	r5, [r2, #0]
100124c0:	1d11      	adds	r1, r2, #4
100124c2:	6019      	str	r1, [r3, #0]
100124c4:	b2ad      	uxth	r5, r5
100124c6:	e002      	b.n	100124ce <_printf_i+0xbe>
100124c8:	1d11      	adds	r1, r2, #4
100124ca:	6019      	str	r1, [r3, #0]
100124cc:	6815      	ldr	r5, [r2, #0]
100124ce:	4b5f      	ldr	r3, [pc, #380]	; (1001264c <_printf_i+0x23c>)
100124d0:	7e22      	ldrb	r2, [r4, #24]
100124d2:	9303      	str	r3, [sp, #12]
100124d4:	2708      	movs	r7, #8
100124d6:	2a6f      	cmp	r2, #111	; 0x6f
100124d8:	d01d      	beq.n	10012516 <_printf_i+0x106>
100124da:	270a      	movs	r7, #10
100124dc:	e01b      	b.n	10012516 <_printf_i+0x106>
100124de:	0022      	movs	r2, r4
100124e0:	2178      	movs	r1, #120	; 0x78
100124e2:	3245      	adds	r2, #69	; 0x45
100124e4:	7011      	strb	r1, [r2, #0]
100124e6:	4a5a      	ldr	r2, [pc, #360]	; (10012650 <_printf_i+0x240>)
100124e8:	6819      	ldr	r1, [r3, #0]
100124ea:	9203      	str	r2, [sp, #12]
100124ec:	1d08      	adds	r0, r1, #4
100124ee:	6822      	ldr	r2, [r4, #0]
100124f0:	6018      	str	r0, [r3, #0]
100124f2:	680d      	ldr	r5, [r1, #0]
100124f4:	0610      	lsls	r0, r2, #24
100124f6:	d402      	bmi.n	100124fe <_printf_i+0xee>
100124f8:	0650      	lsls	r0, r2, #25
100124fa:	d500      	bpl.n	100124fe <_printf_i+0xee>
100124fc:	b2ad      	uxth	r5, r5
100124fe:	07d3      	lsls	r3, r2, #31
10012500:	d502      	bpl.n	10012508 <_printf_i+0xf8>
10012502:	2320      	movs	r3, #32
10012504:	431a      	orrs	r2, r3
10012506:	6022      	str	r2, [r4, #0]
10012508:	2710      	movs	r7, #16
1001250a:	2d00      	cmp	r5, #0
1001250c:	d103      	bne.n	10012516 <_printf_i+0x106>
1001250e:	2320      	movs	r3, #32
10012510:	6822      	ldr	r2, [r4, #0]
10012512:	439a      	bics	r2, r3
10012514:	6022      	str	r2, [r4, #0]
10012516:	0023      	movs	r3, r4
10012518:	2200      	movs	r2, #0
1001251a:	3343      	adds	r3, #67	; 0x43
1001251c:	701a      	strb	r2, [r3, #0]
1001251e:	e002      	b.n	10012526 <_printf_i+0x116>
10012520:	270a      	movs	r7, #10
10012522:	4b4a      	ldr	r3, [pc, #296]	; (1001264c <_printf_i+0x23c>)
10012524:	9303      	str	r3, [sp, #12]
10012526:	6863      	ldr	r3, [r4, #4]
10012528:	60a3      	str	r3, [r4, #8]
1001252a:	2b00      	cmp	r3, #0
1001252c:	db09      	blt.n	10012542 <_printf_i+0x132>
1001252e:	2204      	movs	r2, #4
10012530:	6821      	ldr	r1, [r4, #0]
10012532:	4391      	bics	r1, r2
10012534:	6021      	str	r1, [r4, #0]
10012536:	2d00      	cmp	r5, #0
10012538:	d105      	bne.n	10012546 <_printf_i+0x136>
1001253a:	9e04      	ldr	r6, [sp, #16]
1001253c:	2b00      	cmp	r3, #0
1001253e:	d011      	beq.n	10012564 <_printf_i+0x154>
10012540:	e07b      	b.n	1001263a <_printf_i+0x22a>
10012542:	2d00      	cmp	r5, #0
10012544:	d079      	beq.n	1001263a <_printf_i+0x22a>
10012546:	9e04      	ldr	r6, [sp, #16]
10012548:	0028      	movs	r0, r5
1001254a:	0039      	movs	r1, r7
1001254c:	f7fd fc1a 	bl	1000fd84 <__aeabi_uidivmod>
10012550:	9b03      	ldr	r3, [sp, #12]
10012552:	3e01      	subs	r6, #1
10012554:	5c5b      	ldrb	r3, [r3, r1]
10012556:	0028      	movs	r0, r5
10012558:	7033      	strb	r3, [r6, #0]
1001255a:	0039      	movs	r1, r7
1001255c:	f7fd fb8c 	bl	1000fc78 <__aeabi_uidiv>
10012560:	1e05      	subs	r5, r0, #0
10012562:	d1f1      	bne.n	10012548 <_printf_i+0x138>
10012564:	2f08      	cmp	r7, #8
10012566:	d109      	bne.n	1001257c <_printf_i+0x16c>
10012568:	6823      	ldr	r3, [r4, #0]
1001256a:	07db      	lsls	r3, r3, #31
1001256c:	d506      	bpl.n	1001257c <_printf_i+0x16c>
1001256e:	6863      	ldr	r3, [r4, #4]
10012570:	6922      	ldr	r2, [r4, #16]
10012572:	4293      	cmp	r3, r2
10012574:	dc02      	bgt.n	1001257c <_printf_i+0x16c>
10012576:	2330      	movs	r3, #48	; 0x30
10012578:	3e01      	subs	r6, #1
1001257a:	7033      	strb	r3, [r6, #0]
1001257c:	9b04      	ldr	r3, [sp, #16]
1001257e:	1b9b      	subs	r3, r3, r6
10012580:	6123      	str	r3, [r4, #16]
10012582:	e02b      	b.n	100125dc <_printf_i+0x1cc>
10012584:	6809      	ldr	r1, [r1, #0]
10012586:	681a      	ldr	r2, [r3, #0]
10012588:	0608      	lsls	r0, r1, #24
1001258a:	d407      	bmi.n	1001259c <_printf_i+0x18c>
1001258c:	0649      	lsls	r1, r1, #25
1001258e:	d505      	bpl.n	1001259c <_printf_i+0x18c>
10012590:	1d11      	adds	r1, r2, #4
10012592:	6019      	str	r1, [r3, #0]
10012594:	6813      	ldr	r3, [r2, #0]
10012596:	8aa2      	ldrh	r2, [r4, #20]
10012598:	801a      	strh	r2, [r3, #0]
1001259a:	e004      	b.n	100125a6 <_printf_i+0x196>
1001259c:	1d11      	adds	r1, r2, #4
1001259e:	6019      	str	r1, [r3, #0]
100125a0:	6813      	ldr	r3, [r2, #0]
100125a2:	6962      	ldr	r2, [r4, #20]
100125a4:	601a      	str	r2, [r3, #0]
100125a6:	2300      	movs	r3, #0
100125a8:	9e04      	ldr	r6, [sp, #16]
100125aa:	6123      	str	r3, [r4, #16]
100125ac:	e016      	b.n	100125dc <_printf_i+0x1cc>
100125ae:	681a      	ldr	r2, [r3, #0]
100125b0:	1d11      	adds	r1, r2, #4
100125b2:	6019      	str	r1, [r3, #0]
100125b4:	6816      	ldr	r6, [r2, #0]
100125b6:	2100      	movs	r1, #0
100125b8:	6862      	ldr	r2, [r4, #4]
100125ba:	0030      	movs	r0, r6
100125bc:	f000 f93c 	bl	10012838 <memchr>
100125c0:	2800      	cmp	r0, #0
100125c2:	d001      	beq.n	100125c8 <_printf_i+0x1b8>
100125c4:	1b80      	subs	r0, r0, r6
100125c6:	6060      	str	r0, [r4, #4]
100125c8:	6863      	ldr	r3, [r4, #4]
100125ca:	e003      	b.n	100125d4 <_printf_i+0x1c4>
100125cc:	0026      	movs	r6, r4
100125ce:	3642      	adds	r6, #66	; 0x42
100125d0:	7032      	strb	r2, [r6, #0]
100125d2:	2301      	movs	r3, #1
100125d4:	6123      	str	r3, [r4, #16]
100125d6:	2300      	movs	r3, #0
100125d8:	9a04      	ldr	r2, [sp, #16]
100125da:	7013      	strb	r3, [r2, #0]
100125dc:	9b07      	ldr	r3, [sp, #28]
100125de:	aa09      	add	r2, sp, #36	; 0x24
100125e0:	9300      	str	r3, [sp, #0]
100125e2:	0021      	movs	r1, r4
100125e4:	9b06      	ldr	r3, [sp, #24]
100125e6:	9805      	ldr	r0, [sp, #20]
100125e8:	f7ff fea4 	bl	10012334 <_printf_common>
100125ec:	1c43      	adds	r3, r0, #1
100125ee:	d102      	bne.n	100125f6 <_printf_i+0x1e6>
100125f0:	2001      	movs	r0, #1
100125f2:	4240      	negs	r0, r0
100125f4:	e027      	b.n	10012646 <_printf_i+0x236>
100125f6:	6923      	ldr	r3, [r4, #16]
100125f8:	0032      	movs	r2, r6
100125fa:	9906      	ldr	r1, [sp, #24]
100125fc:	9805      	ldr	r0, [sp, #20]
100125fe:	9d07      	ldr	r5, [sp, #28]
10012600:	47a8      	blx	r5
10012602:	1c43      	adds	r3, r0, #1
10012604:	d0f4      	beq.n	100125f0 <_printf_i+0x1e0>
10012606:	6823      	ldr	r3, [r4, #0]
10012608:	2500      	movs	r5, #0
1001260a:	079b      	lsls	r3, r3, #30
1001260c:	d40f      	bmi.n	1001262e <_printf_i+0x21e>
1001260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012610:	68e0      	ldr	r0, [r4, #12]
10012612:	4298      	cmp	r0, r3
10012614:	da17      	bge.n	10012646 <_printf_i+0x236>
10012616:	0018      	movs	r0, r3
10012618:	e015      	b.n	10012646 <_printf_i+0x236>
1001261a:	0022      	movs	r2, r4
1001261c:	2301      	movs	r3, #1
1001261e:	3219      	adds	r2, #25
10012620:	9906      	ldr	r1, [sp, #24]
10012622:	9805      	ldr	r0, [sp, #20]
10012624:	9e07      	ldr	r6, [sp, #28]
10012626:	47b0      	blx	r6
10012628:	1c43      	adds	r3, r0, #1
1001262a:	d0e1      	beq.n	100125f0 <_printf_i+0x1e0>
1001262c:	3501      	adds	r5, #1
1001262e:	68e3      	ldr	r3, [r4, #12]
10012630:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012632:	1a9b      	subs	r3, r3, r2
10012634:	429d      	cmp	r5, r3
10012636:	dbf0      	blt.n	1001261a <_printf_i+0x20a>
10012638:	e7e9      	b.n	1001260e <_printf_i+0x1fe>
1001263a:	0026      	movs	r6, r4
1001263c:	9b03      	ldr	r3, [sp, #12]
1001263e:	3642      	adds	r6, #66	; 0x42
10012640:	781b      	ldrb	r3, [r3, #0]
10012642:	7033      	strb	r3, [r6, #0]
10012644:	e78e      	b.n	10012564 <_printf_i+0x154>
10012646:	b00b      	add	sp, #44	; 0x2c
10012648:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001264a:	46c0      	nop			; (mov r8, r8)
1001264c:	100137f9 	.word	0x100137f9
10012650:	1001380a 	.word	0x1001380a

10012654 <_putc_r>:
10012654:	b570      	push	{r4, r5, r6, lr}
10012656:	0006      	movs	r6, r0
10012658:	000d      	movs	r5, r1
1001265a:	0014      	movs	r4, r2
1001265c:	2800      	cmp	r0, #0
1001265e:	d004      	beq.n	1001266a <_putc_r+0x16>
10012660:	6983      	ldr	r3, [r0, #24]
10012662:	2b00      	cmp	r3, #0
10012664:	d101      	bne.n	1001266a <_putc_r+0x16>
10012666:	f7ff fb83 	bl	10011d70 <__sinit>
1001266a:	4b12      	ldr	r3, [pc, #72]	; (100126b4 <_putc_r+0x60>)
1001266c:	429c      	cmp	r4, r3
1001266e:	d101      	bne.n	10012674 <_putc_r+0x20>
10012670:	6874      	ldr	r4, [r6, #4]
10012672:	e008      	b.n	10012686 <_putc_r+0x32>
10012674:	4b10      	ldr	r3, [pc, #64]	; (100126b8 <_putc_r+0x64>)
10012676:	429c      	cmp	r4, r3
10012678:	d101      	bne.n	1001267e <_putc_r+0x2a>
1001267a:	68b4      	ldr	r4, [r6, #8]
1001267c:	e003      	b.n	10012686 <_putc_r+0x32>
1001267e:	4b0f      	ldr	r3, [pc, #60]	; (100126bc <_putc_r+0x68>)
10012680:	429c      	cmp	r4, r3
10012682:	d100      	bne.n	10012686 <_putc_r+0x32>
10012684:	68f4      	ldr	r4, [r6, #12]
10012686:	68a3      	ldr	r3, [r4, #8]
10012688:	3b01      	subs	r3, #1
1001268a:	60a3      	str	r3, [r4, #8]
1001268c:	2b00      	cmp	r3, #0
1001268e:	da05      	bge.n	1001269c <_putc_r+0x48>
10012690:	69a2      	ldr	r2, [r4, #24]
10012692:	4293      	cmp	r3, r2
10012694:	db08      	blt.n	100126a8 <_putc_r+0x54>
10012696:	b2eb      	uxtb	r3, r5
10012698:	2b0a      	cmp	r3, #10
1001269a:	d005      	beq.n	100126a8 <_putc_r+0x54>
1001269c:	6823      	ldr	r3, [r4, #0]
1001269e:	b2e8      	uxtb	r0, r5
100126a0:	1c5a      	adds	r2, r3, #1
100126a2:	6022      	str	r2, [r4, #0]
100126a4:	701d      	strb	r5, [r3, #0]
100126a6:	e004      	b.n	100126b2 <_putc_r+0x5e>
100126a8:	0022      	movs	r2, r4
100126aa:	0029      	movs	r1, r5
100126ac:	0030      	movs	r0, r6
100126ae:	f7ff f99d 	bl	100119ec <__swbuf_r>
100126b2:	bd70      	pop	{r4, r5, r6, pc}
100126b4:	10013788 	.word	0x10013788
100126b8:	100137a8 	.word	0x100137a8
100126bc:	100137c8 	.word	0x100137c8

100126c0 <_sbrk_r>:
100126c0:	2300      	movs	r3, #0
100126c2:	b570      	push	{r4, r5, r6, lr}
100126c4:	4c06      	ldr	r4, [pc, #24]	; (100126e0 <_sbrk_r+0x20>)
100126c6:	0005      	movs	r5, r0
100126c8:	0008      	movs	r0, r1
100126ca:	6023      	str	r3, [r4, #0]
100126cc:	f7f7 fc4c 	bl	10009f68 <_sbrk>
100126d0:	1c43      	adds	r3, r0, #1
100126d2:	d103      	bne.n	100126dc <_sbrk_r+0x1c>
100126d4:	6823      	ldr	r3, [r4, #0]
100126d6:	2b00      	cmp	r3, #0
100126d8:	d000      	beq.n	100126dc <_sbrk_r+0x1c>
100126da:	602b      	str	r3, [r5, #0]
100126dc:	bd70      	pop	{r4, r5, r6, pc}
100126de:	46c0      	nop			; (mov r8, r8)
100126e0:	100165ec 	.word	0x100165ec

100126e4 <__sread>:
100126e4:	b570      	push	{r4, r5, r6, lr}
100126e6:	000c      	movs	r4, r1
100126e8:	250e      	movs	r5, #14
100126ea:	5f49      	ldrsh	r1, [r1, r5]
100126ec:	f000 f8b0 	bl	10012850 <_read_r>
100126f0:	2800      	cmp	r0, #0
100126f2:	db03      	blt.n	100126fc <__sread+0x18>
100126f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
100126f6:	181b      	adds	r3, r3, r0
100126f8:	6563      	str	r3, [r4, #84]	; 0x54
100126fa:	e003      	b.n	10012704 <__sread+0x20>
100126fc:	89a2      	ldrh	r2, [r4, #12]
100126fe:	4b02      	ldr	r3, [pc, #8]	; (10012708 <__sread+0x24>)
10012700:	4013      	ands	r3, r2
10012702:	81a3      	strh	r3, [r4, #12]
10012704:	bd70      	pop	{r4, r5, r6, pc}
10012706:	46c0      	nop			; (mov r8, r8)
10012708:	ffffefff 	.word	0xffffefff

1001270c <__swrite>:
1001270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001270e:	001f      	movs	r7, r3
10012710:	898b      	ldrh	r3, [r1, #12]
10012712:	0005      	movs	r5, r0
10012714:	000c      	movs	r4, r1
10012716:	0016      	movs	r6, r2
10012718:	05db      	lsls	r3, r3, #23
1001271a:	d505      	bpl.n	10012728 <__swrite+0x1c>
1001271c:	230e      	movs	r3, #14
1001271e:	5ec9      	ldrsh	r1, [r1, r3]
10012720:	2200      	movs	r2, #0
10012722:	2302      	movs	r3, #2
10012724:	f000 f874 	bl	10012810 <_lseek_r>
10012728:	89a2      	ldrh	r2, [r4, #12]
1001272a:	4b05      	ldr	r3, [pc, #20]	; (10012740 <__swrite+0x34>)
1001272c:	0028      	movs	r0, r5
1001272e:	4013      	ands	r3, r2
10012730:	81a3      	strh	r3, [r4, #12]
10012732:	0032      	movs	r2, r6
10012734:	230e      	movs	r3, #14
10012736:	5ee1      	ldrsh	r1, [r4, r3]
10012738:	003b      	movs	r3, r7
1001273a:	f000 f81f 	bl	1001277c <_write_r>
1001273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012740:	ffffefff 	.word	0xffffefff

10012744 <__sseek>:
10012744:	b570      	push	{r4, r5, r6, lr}
10012746:	000c      	movs	r4, r1
10012748:	250e      	movs	r5, #14
1001274a:	5f49      	ldrsh	r1, [r1, r5]
1001274c:	f000 f860 	bl	10012810 <_lseek_r>
10012750:	89a3      	ldrh	r3, [r4, #12]
10012752:	1c42      	adds	r2, r0, #1
10012754:	d103      	bne.n	1001275e <__sseek+0x1a>
10012756:	4a05      	ldr	r2, [pc, #20]	; (1001276c <__sseek+0x28>)
10012758:	4013      	ands	r3, r2
1001275a:	81a3      	strh	r3, [r4, #12]
1001275c:	e004      	b.n	10012768 <__sseek+0x24>
1001275e:	2280      	movs	r2, #128	; 0x80
10012760:	0152      	lsls	r2, r2, #5
10012762:	4313      	orrs	r3, r2
10012764:	81a3      	strh	r3, [r4, #12]
10012766:	6560      	str	r0, [r4, #84]	; 0x54
10012768:	bd70      	pop	{r4, r5, r6, pc}
1001276a:	46c0      	nop			; (mov r8, r8)
1001276c:	ffffefff 	.word	0xffffefff

10012770 <__sclose>:
10012770:	b510      	push	{r4, lr}
10012772:	230e      	movs	r3, #14
10012774:	5ec9      	ldrsh	r1, [r1, r3]
10012776:	f000 f815 	bl	100127a4 <_close_r>
1001277a:	bd10      	pop	{r4, pc}

1001277c <_write_r>:
1001277c:	b570      	push	{r4, r5, r6, lr}
1001277e:	0005      	movs	r5, r0
10012780:	0008      	movs	r0, r1
10012782:	0011      	movs	r1, r2
10012784:	2200      	movs	r2, #0
10012786:	4c06      	ldr	r4, [pc, #24]	; (100127a0 <_write_r+0x24>)
10012788:	6022      	str	r2, [r4, #0]
1001278a:	001a      	movs	r2, r3
1001278c:	f7f7 fbc4 	bl	10009f18 <_write>
10012790:	1c43      	adds	r3, r0, #1
10012792:	d103      	bne.n	1001279c <_write_r+0x20>
10012794:	6823      	ldr	r3, [r4, #0]
10012796:	2b00      	cmp	r3, #0
10012798:	d000      	beq.n	1001279c <_write_r+0x20>
1001279a:	602b      	str	r3, [r5, #0]
1001279c:	bd70      	pop	{r4, r5, r6, pc}
1001279e:	46c0      	nop			; (mov r8, r8)
100127a0:	100165ec 	.word	0x100165ec

100127a4 <_close_r>:
100127a4:	2300      	movs	r3, #0
100127a6:	b570      	push	{r4, r5, r6, lr}
100127a8:	4c06      	ldr	r4, [pc, #24]	; (100127c4 <_close_r+0x20>)
100127aa:	0005      	movs	r5, r0
100127ac:	0008      	movs	r0, r1
100127ae:	6023      	str	r3, [r4, #0]
100127b0:	f7f7 fbec 	bl	10009f8c <_close>
100127b4:	1c43      	adds	r3, r0, #1
100127b6:	d103      	bne.n	100127c0 <_close_r+0x1c>
100127b8:	6823      	ldr	r3, [r4, #0]
100127ba:	2b00      	cmp	r3, #0
100127bc:	d000      	beq.n	100127c0 <_close_r+0x1c>
100127be:	602b      	str	r3, [r5, #0]
100127c0:	bd70      	pop	{r4, r5, r6, pc}
100127c2:	46c0      	nop			; (mov r8, r8)
100127c4:	100165ec 	.word	0x100165ec

100127c8 <_fstat_r>:
100127c8:	2300      	movs	r3, #0
100127ca:	b570      	push	{r4, r5, r6, lr}
100127cc:	4c06      	ldr	r4, [pc, #24]	; (100127e8 <_fstat_r+0x20>)
100127ce:	0005      	movs	r5, r0
100127d0:	0008      	movs	r0, r1
100127d2:	0011      	movs	r1, r2
100127d4:	6023      	str	r3, [r4, #0]
100127d6:	f7f7 fbdd 	bl	10009f94 <_fstat>
100127da:	1c43      	adds	r3, r0, #1
100127dc:	d103      	bne.n	100127e6 <_fstat_r+0x1e>
100127de:	6823      	ldr	r3, [r4, #0]
100127e0:	2b00      	cmp	r3, #0
100127e2:	d000      	beq.n	100127e6 <_fstat_r+0x1e>
100127e4:	602b      	str	r3, [r5, #0]
100127e6:	bd70      	pop	{r4, r5, r6, pc}
100127e8:	100165ec 	.word	0x100165ec

100127ec <_isatty_r>:
100127ec:	2300      	movs	r3, #0
100127ee:	b570      	push	{r4, r5, r6, lr}
100127f0:	4c06      	ldr	r4, [pc, #24]	; (1001280c <_isatty_r+0x20>)
100127f2:	0005      	movs	r5, r0
100127f4:	0008      	movs	r0, r1
100127f6:	6023      	str	r3, [r4, #0]
100127f8:	f7f7 fbd2 	bl	10009fa0 <_isatty>
100127fc:	1c43      	adds	r3, r0, #1
100127fe:	d103      	bne.n	10012808 <_isatty_r+0x1c>
10012800:	6823      	ldr	r3, [r4, #0]
10012802:	2b00      	cmp	r3, #0
10012804:	d000      	beq.n	10012808 <_isatty_r+0x1c>
10012806:	602b      	str	r3, [r5, #0]
10012808:	bd70      	pop	{r4, r5, r6, pc}
1001280a:	46c0      	nop			; (mov r8, r8)
1001280c:	100165ec 	.word	0x100165ec

10012810 <_lseek_r>:
10012810:	b570      	push	{r4, r5, r6, lr}
10012812:	0005      	movs	r5, r0
10012814:	0008      	movs	r0, r1
10012816:	0011      	movs	r1, r2
10012818:	2200      	movs	r2, #0
1001281a:	4c06      	ldr	r4, [pc, #24]	; (10012834 <_lseek_r+0x24>)
1001281c:	6022      	str	r2, [r4, #0]
1001281e:	001a      	movs	r2, r3
10012820:	f7f7 fbc0 	bl	10009fa4 <_lseek>
10012824:	1c43      	adds	r3, r0, #1
10012826:	d103      	bne.n	10012830 <_lseek_r+0x20>
10012828:	6823      	ldr	r3, [r4, #0]
1001282a:	2b00      	cmp	r3, #0
1001282c:	d000      	beq.n	10012830 <_lseek_r+0x20>
1001282e:	602b      	str	r3, [r5, #0]
10012830:	bd70      	pop	{r4, r5, r6, pc}
10012832:	46c0      	nop			; (mov r8, r8)
10012834:	100165ec 	.word	0x100165ec

10012838 <memchr>:
10012838:	b2c9      	uxtb	r1, r1
1001283a:	1882      	adds	r2, r0, r2
1001283c:	4290      	cmp	r0, r2
1001283e:	d004      	beq.n	1001284a <memchr+0x12>
10012840:	7803      	ldrb	r3, [r0, #0]
10012842:	428b      	cmp	r3, r1
10012844:	d002      	beq.n	1001284c <memchr+0x14>
10012846:	3001      	adds	r0, #1
10012848:	e7f8      	b.n	1001283c <memchr+0x4>
1001284a:	2000      	movs	r0, #0
1001284c:	4770      	bx	lr
	...

10012850 <_read_r>:
10012850:	b570      	push	{r4, r5, r6, lr}
10012852:	0005      	movs	r5, r0
10012854:	0008      	movs	r0, r1
10012856:	0011      	movs	r1, r2
10012858:	2200      	movs	r2, #0
1001285a:	4c06      	ldr	r4, [pc, #24]	; (10012874 <_read_r+0x24>)
1001285c:	6022      	str	r2, [r4, #0]
1001285e:	001a      	movs	r2, r3
10012860:	f7f7 fb3a 	bl	10009ed8 <_read>
10012864:	1c43      	adds	r3, r0, #1
10012866:	d103      	bne.n	10012870 <_read_r+0x20>
10012868:	6823      	ldr	r3, [r4, #0]
1001286a:	2b00      	cmp	r3, #0
1001286c:	d000      	beq.n	10012870 <_read_r+0x20>
1001286e:	602b      	str	r3, [r5, #0]
10012870:	bd70      	pop	{r4, r5, r6, pc}
10012872:	46c0      	nop			; (mov r8, r8)
10012874:	100165ec 	.word	0x100165ec

10012878 <__aeabi_lmul>:
10012878:	b5f0      	push	{r4, r5, r6, r7, lr}
1001287a:	464f      	mov	r7, r9
1001287c:	4646      	mov	r6, r8
1001287e:	b4c0      	push	{r6, r7}
10012880:	0416      	lsls	r6, r2, #16
10012882:	0c36      	lsrs	r6, r6, #16
10012884:	4699      	mov	r9, r3
10012886:	0033      	movs	r3, r6
10012888:	0405      	lsls	r5, r0, #16
1001288a:	0c2c      	lsrs	r4, r5, #16
1001288c:	0c07      	lsrs	r7, r0, #16
1001288e:	0c15      	lsrs	r5, r2, #16
10012890:	4363      	muls	r3, r4
10012892:	437e      	muls	r6, r7
10012894:	436f      	muls	r7, r5
10012896:	4365      	muls	r5, r4
10012898:	0c1c      	lsrs	r4, r3, #16
1001289a:	19ad      	adds	r5, r5, r6
1001289c:	1964      	adds	r4, r4, r5
1001289e:	469c      	mov	ip, r3
100128a0:	42a6      	cmp	r6, r4
100128a2:	d903      	bls.n	100128ac <__aeabi_lmul+0x34>
100128a4:	2380      	movs	r3, #128	; 0x80
100128a6:	025b      	lsls	r3, r3, #9
100128a8:	4698      	mov	r8, r3
100128aa:	4447      	add	r7, r8
100128ac:	4663      	mov	r3, ip
100128ae:	0c25      	lsrs	r5, r4, #16
100128b0:	19ef      	adds	r7, r5, r7
100128b2:	041d      	lsls	r5, r3, #16
100128b4:	464b      	mov	r3, r9
100128b6:	434a      	muls	r2, r1
100128b8:	4343      	muls	r3, r0
100128ba:	0c2d      	lsrs	r5, r5, #16
100128bc:	0424      	lsls	r4, r4, #16
100128be:	1964      	adds	r4, r4, r5
100128c0:	1899      	adds	r1, r3, r2
100128c2:	19c9      	adds	r1, r1, r7
100128c4:	0020      	movs	r0, r4
100128c6:	bc0c      	pop	{r2, r3}
100128c8:	4690      	mov	r8, r2
100128ca:	4699      	mov	r9, r3
100128cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100128ce:	46c0      	nop			; (mov r8, r8)
100128d0:	100091f4 	.word	0x100091f4
100128d4:	10009202 	.word	0x10009202
100128d8:	10009210 	.word	0x10009210
100128dc:	1000921e 	.word	0x1000921e
100128e0:	1000922c 	.word	0x1000922c
100128e4:	1000923a 	.word	0x1000923a
100128e8:	10009248 	.word	0x10009248
100128ec:	10009258 	.word	0x10009258
100128f0:	10009268 	.word	0x10009268
100128f4:	10009278 	.word	0x10009278
100128f8:	10009288 	.word	0x10009288
100128fc:	10009298 	.word	0x10009298
10012900:	100092a8 	.word	0x100092a8
10012904:	100092b8 	.word	0x100092b8
10012908:	100092c8 	.word	0x100092c8
1001290c:	100092d8 	.word	0x100092d8
10012910:	100092e8 	.word	0x100092e8
10012914:	100092f8 	.word	0x100092f8
10012918:	10009308 	.word	0x10009308
1001291c:	10009318 	.word	0x10009318
10012920:	10009328 	.word	0x10009328
10012924:	10009338 	.word	0x10009338
10012928:	10009348 	.word	0x10009348
1001292c:	10009358 	.word	0x10009358
10012930:	10009368 	.word	0x10009368
10012934:	10009378 	.word	0x10009378
10012938:	10009388 	.word	0x10009388
1001293c:	10009398 	.word	0x10009398
10012940:	100093a6 	.word	0x100093a6
10012944:	100093b4 	.word	0x100093b4
10012948:	100093c2 	.word	0x100093c2
1001294c:	100093d0 	.word	0x100093d0
10012950:	100093de 	.word	0x100093de
10012954:	100093ec 	.word	0x100093ec
10012958:	100093fa 	.word	0x100093fa
1001295c:	10009408 	.word	0x10009408
10012960:	10009418 	.word	0x10009418
10012964:	10009428 	.word	0x10009428
10012968:	10009438 	.word	0x10009438
1001296c:	10009448 	.word	0x10009448
10012970:	10009458 	.word	0x10009458
10012974:	10009468 	.word	0x10009468
10012978:	10009478 	.word	0x10009478
1001297c:	10009488 	.word	0x10009488
10012980:	10009498 	.word	0x10009498
10012984:	100094a8 	.word	0x100094a8
10012988:	100094b8 	.word	0x100094b8
1001298c:	100094c8 	.word	0x100094c8
10012990:	100094d8 	.word	0x100094d8
10012994:	100094e8 	.word	0x100094e8
10012998:	100094f8 	.word	0x100094f8
1001299c:	10009508 	.word	0x10009508
100129a0:	10009516 	.word	0x10009516
100129a4:	10009524 	.word	0x10009524
100129a8:	10009564 	.word	0x10009564
100129ac:	1000958c 	.word	0x1000958c
100129b0:	100095b4 	.word	0x100095b4
100129b4:	100095dc 	.word	0x100095dc
100129b8:	1000981c 	.word	0x1000981c
100129bc:	1000960c 	.word	0x1000960c
100129c0:	10009624 	.word	0x10009624
100129c4:	1000969c 	.word	0x1000969c
100129c8:	100096b4 	.word	0x100096b4
100129cc:	1000963c 	.word	0x1000963c
100129d0:	10009654 	.word	0x10009654
100129d4:	1000966c 	.word	0x1000966c
100129d8:	10009684 	.word	0x10009684
100129dc:	100096cc 	.word	0x100096cc
100129e0:	10009990 	.word	0x10009990
100129e4:	10009990 	.word	0x10009990
100129e8:	10009990 	.word	0x10009990
100129ec:	10009990 	.word	0x10009990
100129f0:	10009990 	.word	0x10009990
100129f4:	10009990 	.word	0x10009990
100129f8:	10009990 	.word	0x10009990
100129fc:	10009990 	.word	0x10009990
10012a00:	10009774 	.word	0x10009774
10012a04:	1000978c 	.word	0x1000978c
10012a08:	100097a4 	.word	0x100097a4
10012a0c:	10009832 	.word	0x10009832
10012a10:	100096fc 	.word	0x100096fc
10012a14:	10009990 	.word	0x10009990
10012a18:	10009990 	.word	0x10009990
10012a1c:	10009990 	.word	0x10009990
10012a20:	10009990 	.word	0x10009990
10012a24:	10009990 	.word	0x10009990
10012a28:	10009990 	.word	0x10009990
10012a2c:	100097bc 	.word	0x100097bc
10012a30:	100097d4 	.word	0x100097d4
10012a34:	100097ec 	.word	0x100097ec
10012a38:	10009804 	.word	0x10009804
10012a3c:	10009990 	.word	0x10009990
10012a40:	10009948 	.word	0x10009948
10012a44:	10009960 	.word	0x10009960
10012a48:	10009990 	.word	0x10009990
10012a4c:	10009990 	.word	0x10009990
10012a50:	1000985e 	.word	0x1000985e
10012a54:	10009874 	.word	0x10009874
10012a58:	1000988a 	.word	0x1000988a
10012a5c:	100098a0 	.word	0x100098a0
10012a60:	10009990 	.word	0x10009990
10012a64:	10009990 	.word	0x10009990
10012a68:	10009990 	.word	0x10009990
10012a6c:	10009990 	.word	0x10009990
10012a70:	10009990 	.word	0x10009990
10012a74:	10009990 	.word	0x10009990
10012a78:	10009990 	.word	0x10009990
10012a7c:	10009990 	.word	0x10009990
10012a80:	10009550 	.word	0x10009550
10012a84:	10009578 	.word	0x10009578
10012a88:	100095a0 	.word	0x100095a0
10012a8c:	100095c8 	.word	0x100095c8
10012a90:	100095f4 	.word	0x100095f4
10012a94:	100096e4 	.word	0x100096e4
10012a98:	10009714 	.word	0x10009714
10012a9c:	1000972c 	.word	0x1000972c
10012aa0:	10009744 	.word	0x10009744
10012aa4:	1000975c 	.word	0x1000975c
10012aa8:	10009848 	.word	0x10009848
10012aac:	100098b6 	.word	0x100098b6
10012ab0:	10009930 	.word	0x10009930
10012ab4:	10009978 	.word	0x10009978
10012ab8:	0000000d 	.word	0x0000000d
10012abc:	61647075 	.word	0x61647075
10012ac0:	676e6974 	.word	0x676e6974
10012ac4:	65687420 	.word	0x65687420
10012ac8:	61686320 	.word	0x61686320
10012acc:	74636172 	.word	0x74636172
10012ad0:	73697265 	.word	0x73697265
10012ad4:	20636974 	.word	0x20636974
10012ad8:	6c696166 	.word	0x6c696166
10012adc:	64256465 	.word	0x64256465
10012ae0:	00000000 	.word	0x00000000
10012ae4:	646e6573 	.word	0x646e6573
10012ae8:	20676e69 	.word	0x20676e69
10012aec:	69746f6e 	.word	0x69746f6e
10012af0:	61636966 	.word	0x61636966
10012af4:	6e6f6974 	.word	0x6e6f6974
10012af8:	69616620 	.word	0x69616620
10012afc:	2564656c 	.word	0x2564656c
10012b00:	00000064 	.word	0x00000064
10012b04:	1000a208 	.word	0x1000a208
10012b08:	1000a20a 	.word	0x1000a20a
10012b0c:	1000a1f0 	.word	0x1000a1f0
10012b10:	1000a1f0 	.word	0x1000a1f0
10012b14:	1000a1f0 	.word	0x1000a1f0
10012b18:	1000a208 	.word	0x1000a208
10012b1c:	1000a1f0 	.word	0x1000a1f0
10012b20:	1000a1f0 	.word	0x1000a1f0
10012b24:	1000aa56 	.word	0x1000aa56
10012b28:	1000aaca 	.word	0x1000aaca
10012b2c:	1000aa3e 	.word	0x1000aa3e
10012b30:	1000aad0 	.word	0x1000aad0
10012b34:	1000aa44 	.word	0x1000aa44
10012b38:	1000aa4a 	.word	0x1000aa4a
10012b3c:	1000aa50 	.word	0x1000aa50
10012b40:	1000b128 	.word	0x1000b128
10012b44:	1000b128 	.word	0x1000b128
10012b48:	1000b128 	.word	0x1000b128
10012b4c:	1000b128 	.word	0x1000b128
10012b50:	1000b128 	.word	0x1000b128
10012b54:	1000b128 	.word	0x1000b128
10012b58:	1000b128 	.word	0x1000b128
10012b5c:	1000b128 	.word	0x1000b128
10012b60:	1000b128 	.word	0x1000b128
10012b64:	1000b128 	.word	0x1000b128
10012b68:	1000b128 	.word	0x1000b128
10012b6c:	1000b128 	.word	0x1000b128
10012b70:	1000b128 	.word	0x1000b128
10012b74:	1000b128 	.word	0x1000b128
10012b78:	1000b128 	.word	0x1000b128
10012b7c:	1000b128 	.word	0x1000b128
10012b80:	1000b128 	.word	0x1000b128
10012b84:	1000b128 	.word	0x1000b128
10012b88:	1000b128 	.word	0x1000b128
10012b8c:	1000b146 	.word	0x1000b146
10012b90:	1000b146 	.word	0x1000b146
10012b94:	1000b146 	.word	0x1000b146
10012b98:	1000b146 	.word	0x1000b146
10012b9c:	1000b146 	.word	0x1000b146
10012ba0:	1000b146 	.word	0x1000b146
10012ba4:	1000b146 	.word	0x1000b146
10012ba8:	1000b146 	.word	0x1000b146
10012bac:	1000b146 	.word	0x1000b146
10012bb0:	1000b146 	.word	0x1000b146
10012bb4:	1000b168 	.word	0x1000b168
10012bb8:	1000b168 	.word	0x1000b168
10012bbc:	1000b168 	.word	0x1000b168
10012bc0:	1000b168 	.word	0x1000b168
10012bc4:	1000b168 	.word	0x1000b168
10012bc8:	1000b168 	.word	0x1000b168
10012bcc:	1000b168 	.word	0x1000b168
10012bd0:	1000b168 	.word	0x1000b168
10012bd4:	1000b168 	.word	0x1000b168
10012bd8:	1000b168 	.word	0x1000b168
10012bdc:	1000b18a 	.word	0x1000b18a
10012be0:	1000b18a 	.word	0x1000b18a
10012be4:	1000b18a 	.word	0x1000b18a
10012be8:	1000b18a 	.word	0x1000b18a
10012bec:	1000b18a 	.word	0x1000b18a
10012bf0:	1000b18a 	.word	0x1000b18a
10012bf4:	1000b1a4 	.word	0x1000b1a4
10012bf8:	1000b1a4 	.word	0x1000b1a4
10012bfc:	1000b1a4 	.word	0x1000b1a4
10012c00:	1000b1a4 	.word	0x1000b1a4
10012c04:	1000b1a4 	.word	0x1000b1a4
10012c08:	1000b1a4 	.word	0x1000b1a4
10012c0c:	1000b1a4 	.word	0x1000b1a4
10012c10:	1000b1a4 	.word	0x1000b1a4
10012c14:	1000b1a4 	.word	0x1000b1a4
10012c18:	1000b1be 	.word	0x1000b1be
10012c1c:	1000b1be 	.word	0x1000b1be
10012c20:	1000b1e0 	.word	0x1000b1e0
10012c24:	1000b1e0 	.word	0x1000b1e0
10012c28:	1000b1fa 	.word	0x1000b1fa
10012c2c:	1000b1e0 	.word	0x1000b1e0
10012c30:	34333231 	.word	0x34333231
10012c34:	00003635 	.word	0x00003635
10012c38:	efcdab00 	.word	0xefcdab00
10012c3c:	00efcdab 	.word	0x00efcdab
10012c40:	b2d60600 	.word	0xb2d60600
10012c44:	f8f005f0 	.word	0xf8f005f0
10012c48:	00000000 	.word	0x00000000

10012c4c <ble_mgr_gatt_server_handle>:
	...
10012c64:	1000a14d 1000a189 1000a151 00000000     M.......Q.......
10012c74:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10012c84:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10012c94:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10012ca4:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10012cb4:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10012cc4:	64206563 6f637369 63656e6e 20646574     ce disconnected 
10012cd4:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
10012ce4:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
10012cf4:	69747079 66206e6f 656c6961 00000064     yption failed...
10012d04:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
10012d14:	64657465 63757320 73736563 6c6c7566     eted successfull
10012d24:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10012d34:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10012d44:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10012d54:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10012d64:	206e6163 69766564 72206563 68636165     can device reach
10012d74:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10012d84:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10012d94:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10012da4:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10012db4:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10012dc4:	656e6e6f 52207463 65757165 46207473     onnect Request F
10012dd4:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
10012de4:	636f7270 72756465 6f632065 656c706d     procedure comple
10012df4:	20646574 63637573 66737365 796c6c75     ted successfully
10012e04:	00000000 20454c42 69766544 6e206563     ....BLE Device n
10012e14:	6620746f 646e756f 206f7420 726f7473     ot found to stor
10012e24:	68742065 61702065 6e697269 6e692067     e the pairing in
10012e34:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10012e44:	7320746f 74726174 00006465 76616c53     ot started..Slav
10012e54:	65532065 69727563 52207974 2d207165     e Security Req -
10012e64:	74754120 746e6568 74616369 206e6f69      Authentication 
10012e74:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10012e84:	74736575 41202d20 65687475 6369746e     uest - Authentic
10012e94:	6f697461 6146206e 64656c69 00000000     ation Failed....
10012ea4:	65746e45 68742072 61502065 656b7373     Enter the Passke
10012eb4:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10012ec4:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
10012ed4:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
10012ee4:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
10012ef4:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
10012f04:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
10012f14:	6568746f 65442072 65636976 00003a29     other Device):..
10012f24:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10012f34:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10012f44:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10012f54:	00000064 65746e45 20646572 73736150     d...Entered Pass
10012f64:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10012f74:	6f666e69 74616d72 206e6f69 7020666f     information of p
10012f84:	20726565 69766564 69206563 6f6e2073     eer device is no
10012f94:	76612074 616c6961 2e656c62 00000000     t available.....
10012fa4:	61656c50 75206573 6961706e 68742072     Please unpair th
10012fb4:	65642065 65636976 6f726620 6570206d     e device from pe
10012fc4:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10012fd4:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10012fe4:	20646e61 72617473 61702074 6e697269     and start pairin
10012ff4:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10013004:	52206e6f 65757165 52207473 796c7065     on Request Reply
10013014:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
10013024:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10013034:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10013044:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10013054:	63206573 6b636568 65687420 776f7020     se check the pow
10013064:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10013074:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10013084:	7463656e 0000726f 454d5441 454d2d4c     nector..ATMEL-ME
10013094:	00000048 69766544 6e206563 20656d61     H...Device name 
100130a4:	20746573 6c696166 00006465 61204442     set failed..BD a
100130b4:	65726464 67207373 66207465 656c6961     ddress get faile
100130c4:	00000064 41204442 65726464 303a7373     d...BD Address:0
100130d4:	32302578 32302558 32302558 32302558     x%02X%02X%02X%02
100130e4:	32302558 32302558 41202c58 65726464     X%02X%02X, Addre
100130f4:	54207373 3a657079 00006425 20746553     ss Type:%d..Set 
10013104:	20454c42 69766544 63206563 69666e6f     BLE Device confi
10013114:	61727567 6e6f6974 69616620 0064656c     guration failed.
10013124:	20746553 20454c42 69766544 41206563     Set BLE Device A
10013134:	65726464 66207373 656c6961 00000064     ddress failed...
10013144:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10013154:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10013164:	65732065 69727563 72207974 65757165     e security reque
10013174:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10013184:	65746365 6f742064 65657020 65642072     ected to peer de
10013194:	65636976 74697720 64612068 73657264     vice with addres
100131a4:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
100131b4:	78323025 78323025 78323025 00000000     %02x%02x%02x....
100131c4:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
100131d4:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100131e4:	61522067 6d6f646e 64646120 73736572     g Random address
100131f4:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013204:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013214:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013224:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10013234:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10013244:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10013254:	53202d20 75746174 25203a73 00000064      - Status: %d...
10013264:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10013274:	61642074 73206174 66207465 656c6961     t data set faile
10013284:	00000064                                d...

10013288 <ble_mgr_gap_handle>:
10013288:	1000a149 1000a305 1000a161 00000000     I.......a.......
10013298:	00000000 1000adf1 1000a1b9 1000a15d     ............]...
100132a8:	1000a4a5 1000a385 1000a6a9 1000a4bd     ................
100132b8:	1000a7fd 1000a941 1000a241 1000b02d     ....A...A...-...
	...

100132d4 <battery_app_gap_cb>:
	...
100132e8:	1000bef9 1000c099 00000000 00000000     ................
100132f8:	1000bee9 00000000 00000000 00000000     ................
10013308:	00000000 1000bee9 00000000 00000000     ................
	...

10013320 <app_htpt_handle>:
	...
10013334:	1000bf31 00000000 00000000 00000000     1...............

10013344 <app_gap_cb>:
	...
1001335c:	1000c0c5 00000000 00000000 1000c149     ............I...
	...
10013390:	72617453 20646574 20505448 706d6554     Started HTP Temp
100133a0:	74617265 20657275 69746f4e 61636966     erature Notifica
100133b0:	6e6f6974 00000000 20505448 706d6554     tion....HTP Temp
100133c0:	74617265 20657275 69746f4e 61636966     erature Notifica
100133d0:	6e6f6974 6f745320 64657070 00000000     tion Stopped....
100133e0:	65766461 73697472 6e656d65 61642074     advertisement da
100133f0:	73206174 66207465 656c6961 65722064     ta set failed re
10013400:	6e6f7361 64253a20 00000000 20454c42     ason :%d....BLE 
10013410:	72617453 20646574 00766441 20454c42     Started Adv.BLE 
10013420:	20766441 72617473 61462074 64656c69     Adv start Failed
10013430:	61657220 206e6f73 0064253a 7373410a      reason :%d..Ass
10013440:	6d6e6769 20746e65 3a322e33 70704120     ignment 3.2: App
10013450:	6163696c 6e6f6974 73696420 6e6e6f63     lication disconn
10013460:	65746365 00002064 7373410a 6d6e6769     ected ...Assignm
10013470:	20746e65 20312e32 7453203a 20747261     ent 2.1 : Start 
10013480:	65766441 73697472 00676e69 23230d0a     Advertising...##
10013490:	76644120 69747265 656d6573 6420746e      Advertisement d
100134a0:	20617461 20746573 6c696166 3a206465     ata set failed :
100134b0:	72726520 2520726f 00000078 7373410a      error %x....Ass
100134c0:	6d6e6769 20746e65 3a322e33 70704120     ignment 3.2: App
100134d0:	6163696c 6e6f6974 69617020 20646572     lication paired 
100134e0:	00000000 7373410a 6d6e6769 20746e65     .....Assignment 
100134f0:	3a312e34 616e6520 20656c62 6c616568     4.1: enable heal
10013500:	74206874 65706d65 75746172 73206572     th temperature s
10013510:	69767265 00206563 202a2a2a 6c696146     ervice .*** Fail
10013520:	20657275 48206e69 50205054 69666f72     ure in HTP Profi
10013530:	4520656c 6c62616e 00000065 74696e49     le Enable...Init
10013540:	696c6169 676e697a 74614220 79726574     ializing Battery
10013550:	72655320 65636976 70704120 6163696c      Service Applica
10013560:	6e6f6974 00000000 706d6554 74617265     tion....Temperat
10013570:	3a657275 20642520 20676544 736c6543     ure: %d Deg Cels
10013580:	00737569 7373410a 6d6e6769 20746e65     ius..Assignment 
10013590:	3a312e34 696e4920 65482074 68746c61     4.1: Init Health
100135a0:	6d657420 61726570 65727574 72657320      temperature ser
100135b0:	65636976 00000020 20505448 61746144     vice ...HTP Data
100135c0:	73614220 72632065 69746165 66206e6f      Base creation f
100135d0:	656c6961 00000064 69666564 676e696e     ailed...defining
100135e0:	74616220 79726574 72657320 65636976      battery service
100135f0:	69616620 2064656c 00006425 7373410a      failed %d...Ass
10013600:	6d6e6769 20746e65 3a322e33 67655220     ignment 3.2: Reg
10013610:	65747369 6c622072 6f746575 2068746f     ister bluetooth 
10013620:	6e657665 63207374 626c6c61 736b6361     events callbacks
10013630:	00000000 4523230a 726f7272 65687720     .....##Error whe
10013640:	6552206e 74736967 6e697265 53202067     n Registering  S
10013650:	31424d41 61672031 61632070 61626c6c     AMB11 gap callba
10013660:	00736b63 4523230a 726f7272 65687720     cks..##Error whe
10013670:	6552206e 74736967 6e697265 53202067     n Registering  S
10013680:	31424d41 74682031 63207470 626c6c61     AMB11 htpt callb
10013690:	736b6361 00000000 74746142 20797265     acks....Battery 
100136a0:	6576654c 64253a6c 00002525              Level:%d%%..

100136ac <battery_app_gatt_server_cb>:
100136ac:	1000bf09 00000000 1000bf7d 00000000     ........}.......
	...
100136d4:	656d7441 6f43206c 022e7072                       Atmel Corp.

100136df <CSWTCH.45>:
100136df:	00100402                                         ...

100136e2 <CSWTCH.47>:
100136e2:	03010300 03030303 03030303 02020303              ...............

100136f1 <client_conf_uuid>:
100136f1:	29042902                                         .)

100136f3 <presentation_format_uuid>:
100136f3:	29012904                                         .)

100136f5 <user_desc_uuid>:
100136f5:	29032901                                         .)

100136f7 <server_conf_uuid>:
100136f7:	29002903                                         .)

100136f9 <extended_props_uuid>:
100136f9:	28022900                                         .)

100136fb <include_uuid>:
100136fb:	28032802                                         .(

100136fd <char_uuid>:
100136fd:	18002803 761000ff 761000fe 741000fe     .(.....v...v...t
1001370d:	0a1000fe 0a1000ff 001000ff 741000ff     ...............t
1001371d:	0a1000fe 001000ff 0a1000ff 741000ff     ...............t
1001372d:	101000fe 101000ff 101000ff 9a1000ff     ................
1001373d:	641000ff 24100105 24100104 22100104     ...d...$...$..."
1001374d:	3c100104 3c100105 2e100105 22100105     ...<...<......."
1001375d:	3c100104 2e100105 3c100105 22100105     ...<.......<..."
1001376d:	44100104 44100105 44100105 44100105     ...D...D...D...D
1001377d:	43100107 50000000                                ...C...

10013784 <_global_impure_ptr>:
10013784:	10013850                                P8..

10013788 <__sf_fake_stdin>:
	...

100137a8 <__sf_fake_stdout>:
	...

100137c8 <__sf_fake_stderr>:
	...
100137e8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100137f8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013808:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013818:	00006665                                ef..

1001381c <_init>:
1001381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001381e:	46c0      	nop			; (mov r8, r8)
10013820:	bcf8      	pop	{r3, r4, r5, r6, r7}
10013822:	bc08      	pop	{r3}
10013824:	469e      	mov	lr, r3
10013826:	4770      	bx	lr

10013828 <__init_array_start>:
10013828:	100080b1 	.word	0x100080b1

1001382c <_fini>:
1001382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001382e:	46c0      	nop			; (mov r8, r8)
10013830:	bcf8      	pop	{r3, r4, r5, r6, r7}
10013832:	bc08      	pop	{r3}
10013834:	469e      	mov	lr, r3
10013836:	4770      	bx	lr

10013838 <__fini_array_start>:
10013838:	10008089 	.word	0x10008089
